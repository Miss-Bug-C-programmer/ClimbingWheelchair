
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0c8  0800a0c8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d0  0800a0d0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800a0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000170  0800a248  00020170  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800a248  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bffc  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e2e  00000000  00000000  0003c19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  000414e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027263  00000000  00000000  00042830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df56  00000000  00000000  00069a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e201d  00000000  00000000  000879e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005824  00000000  00000000  00169a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009de4 	.word	0x08009de4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	08009de4 	.word	0x08009de4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	61f8      	str	r0, [r7, #28]
 8000e2c:	61b9      	str	r1, [r7, #24]
 8000e2e:	617a      	str	r2, [r7, #20]
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e36:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e3a:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000e58:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000ea0 <pid_create+0x7c>
 8000e5c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000ea4 <pid_create+0x80>
 8000e60:	69f8      	ldr	r0, [r7, #28]
 8000e62:	f000 f96b 	bl	800113c <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	2264      	movs	r2, #100	; 0x64
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	69f8      	ldr	r0, [r7, #28]
 8000e70:	f000 fa06 	bl	8001280 <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000e74:	ed97 1a01 	vldr	s2, [r7, #4]
 8000e78:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e7c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e80:	69f8      	ldr	r0, [r7, #28]
 8000e82:	f000 f8b9 	bl	8000ff8 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000e86:	f002 f957 	bl	8003138 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	1ad2      	subs	r2, r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000e96:	69fb      	ldr	r3, [r7, #28]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	437f0000 	.word	0x437f0000
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000eb0:	f002 f942 	bl	8003138 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	1ad2      	subs	r2, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	bf2c      	ite	cs
 8000ec4:	2301      	movcs	r3, #1
 8000ec6:	2300      	movcc	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <pid_compute>:
void pid_compute(PID_t pid)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 8084 	beq.w	8000fee <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	ed93 7a00 	vldr	s14, [r3]
 8000ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efe:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f34:	dd04      	ble.n	8000f40 <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	621a      	str	r2, [r3, #32]
 8000f3e:	e00e      	b.n	8000f5e <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	d503      	bpl.n	8000f5e <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f64:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd03      	ble.n	8000fba <pid_compute+0xe8>
		out = pid->omax;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e00c      	b.n	8000fd4 <pid_compute+0x102>
	else if (out < pid->omin)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d502      	bpl.n	8000fd4 <pid_compute+0x102>
		out = pid->omin;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 8000fe2:	f002 f8a9 	bl	8003138 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
 8000fec:	e000      	b.n	8000ff0 <pid_compute+0x11e>
		return ;
 8000fee:	bf00      	nop
}
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
 8001008:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 800100c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	d452      	bmi.n	80010c0 <PID_tune+0xc8>
 800101a:	edd7 7a01 	vldr	s15, [r7, #4]
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d44b      	bmi.n	80010c0 <PID_tune+0xc8>
 8001028:	edd7 7a00 	vldr	s15, [r7]
 800102c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d444      	bmi.n	80010c0 <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001042:	eddf 6a22 	vldr	s13, [pc, #136]	; 80010cc <PID_tune+0xd4>
 8001046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104a:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001054:	ed97 7a01 	vldr	s14, [r7, #4]
 8001058:	edd7 7a05 	vldr	s15, [r7, #20]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001066:	edd7 6a00 	vldr	s13, [r7]
 800106a:	ed97 7a05 	vldr	s14, [r7, #20]
 800106e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800107e:	2b01      	cmp	r3, #1
 8001080:	d11f      	bne.n	80010c2 <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	edd3 7a03 	vldr	s15, [r3, #12]
 8001088:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010d0 <PID_tune+0xd8>
 800108c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a04 	vldr	s15, [r3, #16]
 800109c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010d0 <PID_tune+0xd8>
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80010b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010d0 <PID_tune+0xd8>
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edc3 7a05 	vstr	s15, [r3, #20]
 80010be:	e000      	b.n	80010c2 <PID_tune+0xca>
		return;
 80010c0:	bf00      	nop
	}
}
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	447a0000 	.word	0x447a0000
 80010d0:	00000000 	.word	0x00000000

080010d4 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d025      	beq.n	8001130 <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fe:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	ed93 7a04 	vldr	s14, [r3, #16]
 8001108:	edd7 7a03 	vldr	s15, [r7, #12]
 800110c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 6a05 	vldr	s13, [r3, #20]
 800111c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	ed87 0a02 	vstr	s0, [r7, #8]
 8001148:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 800114c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001150:	edd7 7a01 	vldr	s15, [r7, #4]
 8001154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	da4d      	bge.n	80011fa <pid_limits+0xbe>
	pid->omin = min;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001170:	2b00      	cmp	r3, #0
 8001172:	d043      	beq.n	80011fc <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001182:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dd05      	ble.n	8001198 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	69d2      	ldr	r2, [r2, #28]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e010      	b.n	80011ba <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	ed93 7a00 	vldr	s14, [r3]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80011a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d504      	bpl.n	80011ba <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6992      	ldr	r2, [r2, #24]
 80011b8:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80011c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dd04      	ble.n	80011da <pid_limits+0x9e>
			pid->iterm = pid->omax;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	69da      	ldr	r2, [r3, #28]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	621a      	str	r2, [r3, #32]
 80011d8:	e010      	b.n	80011fc <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	d505      	bpl.n	80011fc <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	621a      	str	r2, [r3, #32]
 80011f8:	e000      	b.n	80011fc <pid_limits+0xc0>
	if (min >= max) return;
 80011fa:	bf00      	nop
	}
}
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001214:	2b00      	cmp	r3, #0
 8001216:	d12c      	bne.n	8001272 <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a07 	vldr	s15, [r3, #28]
 8001238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	dd04      	ble.n	800124c <pid_auto+0x46>
			pid->iterm = pid->omax;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	621a      	str	r2, [r3, #32]
 800124a:	e00e      	b.n	800126a <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a06 	vldr	s15, [r3, #24]
 8001258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	d503      	bpl.n	800126a <pid_auto+0x64>
			pid->iterm = pid->omin;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001292:	2b00      	cmp	r3, #0
 8001294:	d023      	beq.n	80012de <pid_direction+0x5e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d01d      	beq.n	80012de <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012f4 <pid_direction+0x74>
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012f4 <pid_direction+0x74>
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012f4 <pid_direction+0x74>
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	78fa      	ldrb	r2, [r7, #3]
 80012e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	00000000 	.word	0x00000000

080012f8 <pid_reset>:

void pid_reset(PID_t pid){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	*(pid->output) = 0;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
	*(pid->input)  = 0;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
	pid->iterm = *(pid->output);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	621a      	str	r2, [r3, #32]
	pid->lastin = *(pid->input);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <hubMotor_Init+0x2c>)
 8001340:	f004 f88e 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <hubMotor_Init+0x2c>)
 800134c:	f004 f888 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001356:	4802      	ldr	r0, [pc, #8]	; (8001360 <hubMotor_Init+0x2c>)
 8001358:	f004 f882 	bl	8005460 <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020c00 	.word	0x40020c00

08001364 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 800136c:	2200      	movs	r2, #0
 800136e:	2110      	movs	r1, #16
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <ADC_Read+0x30>)
 8001372:	f004 f875 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001376:	2302      	movs	r3, #2
 8001378:	2208      	movs	r2, #8
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <ADC_Read+0x34>)
 800137e:	f005 faa3 	bl	80068c8 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001382:	2201      	movs	r2, #1
 8001384:	2110      	movs	r1, #16
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <ADC_Read+0x30>)
 8001388:	f004 f86a 	bl	8005460 <HAL_GPIO_WritePin>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020000 	.word	0x40020000
 8001398:	200001e0 	.word	0x200001e0

0800139c <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80013a4:	2100      	movs	r1, #0
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f808 	bl	80013bc <enableMotor>
	brakeMotor(motor, 0);
 80013ac:	2100      	movs	r1, #0
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f828 	bl	8001404 <brakeMotor>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	4619      	mov	r1, r3
 80013d4:	f004 f844 	bl	8005460 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	461a      	mov	r2, r3
 80013ee:	2108      	movs	r1, #8
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <emBrakeMotor+0x20>)
 80013f2:	f004 f835 	bl	8005460 <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40020c00 	.word	0x40020c00

08001404 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69d8      	ldr	r0, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	8c1b      	ldrh	r3, [r3, #32]
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	4619      	mov	r1, r3
 800141c:	f004 f820 	bl	8005460 <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	4619      	mov	r1, r3
 8001440:	f004 f80e 	bl	8005460 <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0000      	movs	r0, r0
	...

08001450 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 8001462:	edd7 7a00 	vldr	s15, [r7]
 8001466:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001598 <setMotorSpeed+0x148>
 800146a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	dd01      	ble.n	8001478 <setMotorSpeed+0x28>
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <setMotorSpeed+0x14c>)
 8001476:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f7ff f81d 	bl	80004b8 <__aeabi_f2d>
 800147e:	a340      	add	r3, pc, #256	; (adr r3, 8001580 <setMotorSpeed+0x130>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe feb8 	bl	80001f8 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	a33d      	add	r3, pc, #244	; (adr r3, 8001588 <setMotorSpeed+0x138>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f991 	bl	80007bc <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fb23 	bl	8000aec <__aeabi_d2uiz>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7fe fffe 	bl	80004b8 <__aeabi_f2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	a133      	add	r1, pc, #204	; (adr r1, 8001590 <setMotorSpeed+0x140>)
 80014c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014c6:	f7ff f979 	bl	80007bc <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fae3 	bl	8000a9c <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80014de:	8a7b      	ldrh	r3, [r7, #18]
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80014e6:	edd7 7a00 	vldr	s15, [r7]
 80014ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d503      	bpl.n	8001500 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80014f8:	2101      	movs	r1, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ff82 	bl	8001404 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	8a7a      	ldrh	r2, [r7, #18]
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	8b1b      	ldrh	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
 800151c:	e01c      	b.n	8001558 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	8b1b      	ldrh	r3, [r3, #24]
 8001522:	2b04      	cmp	r3, #4
 8001524:	d105      	bne.n	8001532 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
 8001530:	e012      	b.n	8001558 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	8b1b      	ldrh	r3, [r3, #24]
 8001536:	2b08      	cmp	r3, #8
 8001538:	d105      	bne.n	8001546 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c
 8001544:	e008      	b.n	8001558 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8b1b      	ldrh	r3, [r3, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d104      	bne.n	8001558 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	8b1b      	ldrh	r3, [r3, #24]
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f005 ffa6 	bl	80074b4 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	bfb15b57 	.word	0xbfb15b57
 8001584:	3fd09eec 	.word	0x3fd09eec
 8001588:	1172ef0b 	.word	0x1172ef0b
 800158c:	3f9989df 	.word	0x3f9989df
 8001590:	00000000 	.word	0x00000000
 8001594:	412e8480 	.word	0x412e8480
 8001598:	42c80000 	.word	0x42c80000
 800159c:	42c80000 	.word	0x42c80000

080015a0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d129      	bne.n	800160a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80015b6:	edd7 7a00 	vldr	s15, [r7]
 80015ba:	eef0 7ae7 	vabs.f32	s15, s15
 80015be:	ee17 0a90 	vmov	r0, s15
 80015c2:	f7fe ff79 	bl	80004b8 <__aeabi_f2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f7fe ff74 	bl	80004b8 <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7ff f8f0 	bl	80007bc <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	f7ff fa42 	bl	8000a74 <__aeabi_dcmpge>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80015f6:	2100      	movs	r1, #0
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff15 	bl	8001428 <setMotorDir>
 80015fe:	e032      	b.n	8001666 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001600:	2101      	movs	r1, #1
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff10 	bl	8001428 <setMotorDir>
 8001608:	e02d      	b.n	8001666 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001610:	2b02      	cmp	r3, #2
 8001612:	d128      	bne.n	8001666 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001614:	edd7 7a00 	vldr	s15, [r7]
 8001618:	eef0 7ae7 	vabs.f32	s15, s15
 800161c:	ee17 0a90 	vmov	r0, s15
 8001620:	f7fe ff4a 	bl	80004b8 <__aeabi_f2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7fe ff45 	bl	80004b8 <__aeabi_f2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7ff f8c1 	bl	80007bc <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f7ff fa13 	bl	8000a74 <__aeabi_dcmpge>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d004      	beq.n	800165e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001654:	2101      	movs	r1, #1
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fee6 	bl	8001428 <setMotorDir>
 800165c:	e003      	b.n	8001666 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 800165e:	2100      	movs	r1, #0
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fee1 	bl	8001428 <setMotorDir>
    }

    HAL_Delay(50);
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f001 fd72 	bl	8003150 <HAL_Delay>
    brakeMotor(motor, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fec8 	bl	8001404 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	eef0 7ae7 	vabs.f32	s15, s15
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fee5 	bl	8001450 <setMotorSpeed>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bdb0      	pop	{r4, r5, r7, pc}

0800168e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f003 feb6 	bl	8005414 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	799a      	ldrb	r2, [r3, #6]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	79db      	ldrb	r3, [r3, #7]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d004      	beq.n	80016c6 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80016bc:	f001 fd3c 	bl	8003138 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80016c6:	f001 fd37 	bl	8003138 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d209      	bcs.n	80016ec <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	799a      	ldrb	r2, [r3, #6]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7a1b      	ldrb	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e004      	b.n	80016f6 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	799a      	ldrb	r2, [r3, #6]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <GPIO_Digital_Filtered_Impulse>:



uint8_t GPIO_Digital_Filtered_Impulse(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f003 fe7e 	bl	8005414 <HAL_GPIO_ReadPin>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	799a      	ldrb	r2, [r3, #6]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	79db      	ldrb	r3, [r3, #7]
 8001728:	429a      	cmp	r2, r3
 800172a:	d004      	beq.n	8001736 <GPIO_Digital_Filtered_Impulse+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800172c:	f001 fd04 	bl	8003138 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) && (hgpio->curRead != hgpio->state))
 8001736:	f001 fcff 	bl	8003138 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d20f      	bcs.n	8001768 <GPIO_Digital_Filtered_Impulse+0x6a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	799a      	ldrb	r2, [r3, #6]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7a1b      	ldrb	r3, [r3, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d009      	beq.n	8001768 <GPIO_Digital_Filtered_Impulse+0x6a>
	{
		hgpio->state = hgpio->curRead;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	799a      	ldrb	r2, [r3, #6]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	721a      	strb	r2, [r3, #8]

		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7a1b      	ldrb	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <GPIO_Digital_Filtered_Impulse+0x6a>
		{
			return GPIO_PIN_SET;
 8001764:	2301      	movs	r3, #1
 8001766:	e004      	b.n	8001772 <GPIO_Digital_Filtered_Impulse+0x74>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	799a      	ldrb	r2, [r3, #6]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <MX_CAN1_Init+0xc8>)
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <MX_CAN1_Init+0xcc>)
 8001786:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <MX_CAN1_Init+0xc8>)
 800178a:	2209      	movs	r2, #9
 800178c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <MX_CAN1_Init+0xc8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <MX_CAN1_Init+0xc8>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800179a:	4b2a      	ldr	r3, [pc, #168]	; (8001844 <MX_CAN1_Init+0xc8>)
 800179c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017a8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <MX_CAN1_Init+0xc8>)
 80017d0:	f001 fce2 	bl	8003198 <HAL_CAN_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80017da:	f000 fee9 	bl	80025b0 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <MX_CAN1_Init+0xc8>)
 800180c:	f001 fee0 	bl	80035d0 <HAL_CAN_ConfigFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001816:	f000 fecb 	bl	80025b0 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 800181a:	2102      	movs	r1, #2
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <MX_CAN1_Init+0xc8>)
 800181e:	f002 faab 	bl	8003d78 <HAL_CAN_ActivateNotification>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001828:	f000 fec2 	bl	80025b0 <Error_Handler>
 800182c:	e007      	b.n	800183e <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_CAN1_Init+0xc8>)
 8001830:	f002 f81c 	bl	800386c <HAL_CAN_Start>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 800183a:	f000 feb9 	bl	80025b0 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 800183e:	3728      	adds	r7, #40	; 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000238 	.word	0x20000238
 8001848:	40006400 	.word	0x40006400

0800184c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_CAN_MspInit+0x94>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d133      	bne.n	80018d6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_CAN_MspInit+0x98>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_CAN_MspInit+0x98>)
 8001878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_CAN_MspInit+0x98>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_CAN_MspInit+0x98>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_CAN_MspInit+0x98>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_CAN_MspInit+0x98>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a6:	2303      	movs	r3, #3
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018b6:	2309      	movs	r3, #9
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <HAL_CAN_MspInit+0x9c>)
 80018c2:	f003 fa7b 	bl	8004dbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2014      	movs	r0, #20
 80018cc:	f002 fda6 	bl	800441c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018d0:	2014      	movs	r0, #20
 80018d2:	f002 fdcf 	bl	8004474 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40006400 	.word	0x40006400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020c00 	.word	0x40020c00

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_DMA_Init+0x3c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <MX_DMA_Init+0x3c>)
 80018fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_DMA_Init+0x3c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	200c      	movs	r0, #12
 8001914:	f002 fd82 	bl	800441c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001918:	200c      	movs	r0, #12
 800191a:	f002 fdab 	bl	8004474 <HAL_NVIC_EnableIRQ>

}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <ENCODER_Init+0x24>)
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <ENCODER_Init+0x28>)
 8001934:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan1;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <ENCODER_Init+0x2c>)
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <ENCODER_Init+0x28>)
 800193a:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 800193c:	2101      	movs	r1, #1
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <ENCODER_Init+0x24>)
 8001940:	f000 f83f 	bl	80019c2 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 8001944:	2102      	movs	r1, #2
 8001946:	4804      	ldr	r0, [pc, #16]	; (8001958 <ENCODER_Init+0x2c>)
 8001948:	f000 f83b 	bl	80019c2 <ENCODER_Set_TxHeader>

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000260 	.word	0x20000260
 8001954:	20000238 	.word	0x20000238
 8001958:	200002dc 	.word	0x200002dc

0800195c <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	785a      	ldrb	r2, [r3, #1]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	789a      	ldrb	r2, [r3, #2]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	78da      	ldrb	r2, [r3, #3]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	791a      	ldrb	r2, [r3, #4]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	795a      	ldrb	r2, [r3, #5]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	799a      	ldrb	r2, [r3, #6]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	79da      	ldrb	r2, [r3, #7]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2204      	movs	r2, #4
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f103 0120 	add.w	r1, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3338      	adds	r3, #56	; 0x38
 8001a42:	f001 ff57 	bl	80038f4 <HAL_CAN_AddTxMessage>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffd1 	bl	80019fe <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001a92:	461a      	mov	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	441a      	add	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	4413      	add	r3, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	4b8a      	ldr	r3, [pc, #552]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a89      	ldr	r2, [pc, #548]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b87      	ldr	r3, [pc, #540]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	4b83      	ldr	r3, [pc, #524]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a82      	ldr	r2, [pc, #520]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b80      	ldr	r3, [pc, #512]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a7b      	ldr	r2, [pc, #492]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a74      	ldr	r2, [pc, #464]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b6e      	ldr	r3, [pc, #440]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a6d      	ldr	r2, [pc, #436]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <MX_GPIO_Init+0x244>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001b76:	2200      	movs	r2, #0
 8001b78:	213f      	movs	r1, #63	; 0x3f
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <MX_GPIO_Init+0x248>)
 8001b7c:	f003 fc70 	bl	8005460 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2110      	movs	r1, #16
 8001b84:	485f      	ldr	r0, [pc, #380]	; (8001d04 <MX_GPIO_Init+0x24c>)
 8001b86:	f003 fc6b 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	219b      	movs	r1, #155	; 0x9b
 8001b8e:	485e      	ldr	r0, [pc, #376]	; (8001d08 <MX_GPIO_Init+0x250>)
 8001b90:	f003 fc66 	bl	8005460 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001b9a:	485c      	ldr	r0, [pc, #368]	; (8001d0c <MX_GPIO_Init+0x254>)
 8001b9c:	f003 fc60 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001ba6:	485a      	ldr	r0, [pc, #360]	; (8001d10 <MX_GPIO_Init+0x258>)
 8001ba8:	f003 fc5a 	bl	8005460 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001bac:	2307      	movs	r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4853      	ldr	r0, [pc, #332]	; (8001d0c <MX_GPIO_Init+0x254>)
 8001bc0:	f003 f8fc 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001bc4:	f248 1378 	movw	r3, #33144	; 0x8178
 8001bc8:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	484c      	ldr	r0, [pc, #304]	; (8001d0c <MX_GPIO_Init+0x254>)
 8001bda:	f003 f8ef 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001bde:	233f      	movs	r3, #63	; 0x3f
 8001be0:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4842      	ldr	r0, [pc, #264]	; (8001d00 <MX_GPIO_Init+0x248>)
 8001bf6:	f003 f8e1 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	483c      	ldr	r0, [pc, #240]	; (8001d04 <MX_GPIO_Init+0x24c>)
 8001c12:	f003 f8d3 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <MX_GPIO_Init+0x25c>)
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4836      	ldr	r0, [pc, #216]	; (8001d04 <MX_GPIO_Init+0x24c>)
 8001c2a:	f003 f8c7 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001c2e:	239b      	movs	r3, #155	; 0x9b
 8001c30:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4830      	ldr	r0, [pc, #192]	; (8001d08 <MX_GPIO_Init+0x250>)
 8001c46:	f003 f8b9 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001c4a:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	482a      	ldr	r0, [pc, #168]	; (8001d0c <MX_GPIO_Init+0x254>)
 8001c64:	f003 f8aa 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001c68:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4820      	ldr	r0, [pc, #128]	; (8001d08 <MX_GPIO_Init+0x250>)
 8001c86:	f003 f899 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001c8a:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001c8e:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	481b      	ldr	r0, [pc, #108]	; (8001d10 <MX_GPIO_Init+0x258>)
 8001ca4:	f003 f88a 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_GPIO_Init+0x258>)
 8001cbe:	f003 f87d 	bl	8004dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001cd2:	2309      	movs	r3, #9
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480a      	ldr	r0, [pc, #40]	; (8001d08 <MX_GPIO_Init+0x250>)
 8001cde:	f003 f86d 	bl	8004dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2017      	movs	r0, #23
 8001ce8:	f002 fb98 	bl	800441c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cec:	2017      	movs	r0, #23
 8001cee:	f002 fbc1 	bl	8004474 <HAL_NVIC_EnableIRQ>

}
 8001cf2:	bf00      	nop
 8001cf4:	3730      	adds	r7, #48	; 0x30
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	10210000 	.word	0x10210000

08001d18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <MX_I2C1_Init+0x78>)
 8001d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <MX_I2C1_Init+0x7c>)
 8001d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d56:	f003 fbcd 	bl	80054f4 <HAL_I2C_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d60:	f000 fc26 	bl	80025b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d64:	2100      	movs	r1, #0
 8001d66:	4809      	ldr	r0, [pc, #36]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d68:	f003 fd90 	bl	800588c <HAL_I2CEx_ConfigAnalogFilter>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d72:	f000 fc1d 	bl	80025b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d76:	2100      	movs	r1, #0
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d7a:	f003 fde7 	bl	800594c <HAL_I2CEx_ConfigDigitalFilter>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d84:	f000 fc14 	bl	80025b0 <Error_Handler>
  }

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000330 	.word	0x20000330
 8001d90:	40005400 	.word	0x40005400
 8001d94:	00061a80 	.word	0x00061a80

08001d98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_I2C_MspInit+0x84>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12c      	bne.n	8001e14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ddc:	2312      	movs	r3, #18
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de8:	2304      	movs	r3, #4
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	480c      	ldr	r0, [pc, #48]	; (8001e24 <HAL_I2C_MspInit+0x8c>)
 8001df4:	f002 ffe2 	bl	8004dbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001e02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e06:	6413      	str	r3, [r2, #64]	; 0x40
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020400 	.word	0x40020400

08001e28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e2e:	f001 f91d 	bl	800306c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e32:	f000 fa59 	bl	80022e8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001e36:	f004 fbdf 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4ab9      	ldr	r2, [pc, #740]	; (8002124 <main+0x2fc>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	099b      	lsrs	r3, r3, #6
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 fb2d 	bl	80044a4 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e4a:	2004      	movs	r0, #4
 8001e4c:	f002 fb36 	bl	80044bc <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e58:	f002 fae0 	bl	800441c <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e5c:	f7ff fe2c 	bl	8001ab8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e60:	f7ff fd44 	bl	80018ec <MX_DMA_Init>
	MX_I2C1_Init();
 8001e64:	f7ff ff58 	bl	8001d18 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001e68:	f000 fcbc 	bl	80027e4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e6c:	f000 fd5a 	bl	8002924 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8001e70:	f001 f804 	bl	8002e7c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001e74:	f000 fdd0 	bl	8002a18 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001e78:	f000 fe50 	bl	8002b1c <MX_TIM8_Init>
	MX_CAN1_Init();
 8001e7c:	f7ff fc7e 	bl	800177c <MX_CAN1_Init>
	MX_SPI1_Init();
 8001e80:	f000 fba8 	bl	80025d4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 8001e84:	f7ff fd52 	bl	800192c <ENCODER_Init>
//	  DWT_Init();
//	while(MPU6050_Init(&hi2c1)==1);
	HAL_Delay(100);
 8001e88:	2064      	movs	r0, #100	; 0x64
 8001e8a:	f001 f961 	bl	8003150 <HAL_Delay>

	//Start base wheel pwm pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8001e8e:	4ba6      	ldr	r3, [pc, #664]	; (8002128 <main+0x300>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4aa6      	ldr	r2, [pc, #664]	; (800212c <main+0x304>)
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	4ba2      	ldr	r3, [pc, #648]	; (8002128 <main+0x300>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4aa3      	ldr	r2, [pc, #652]	; (8002130 <main+0x308>)
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	ed93 7a00 	vldr	s14, [r3]
 8001eaa:	eef0 0a47 	vmov.f32	s1, s14
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	48a0      	ldr	r0, [pc, #640]	; (8002134 <main+0x30c>)
 8001eb4:	f001 f886 	bl	8002fc4 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8001eb8:	489f      	ldr	r0, [pc, #636]	; (8002138 <main+0x310>)
 8001eba:	f005 f99b 	bl	80071f4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	489d      	ldr	r0, [pc, #628]	; (8002138 <main+0x310>)
 8001ec2:	f005 faf7 	bl	80074b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	489b      	ldr	r0, [pc, #620]	; (8002138 <main+0x310>)
 8001eca:	f005 faf3 	bl	80074b4 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001ece:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <main+0x310>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001ed8:	4b97      	ldr	r3, [pc, #604]	; (8002138 <main+0x310>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 8001ee2:	2064      	movs	r0, #100	; 0x64
 8001ee4:	f001 f934 	bl	8003150 <HAL_Delay>

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8001ee8:	4894      	ldr	r0, [pc, #592]	; (800213c <main+0x314>)
 8001eea:	f7ff fa57 	bl	800139c <bd25l_Init>
	bd25l_Init(&backMotor);
 8001eee:	4894      	ldr	r0, [pc, #592]	; (8002140 <main+0x318>)
 8001ef0:	f7ff fa54 	bl	800139c <bd25l_Init>
	runMotor(&rearMotor, 0);
 8001ef4:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8002144 <main+0x31c>
 8001ef8:	4890      	ldr	r0, [pc, #576]	; (800213c <main+0x314>)
 8001efa:	f7ff fb51 	bl	80015a0 <runMotor>
	runMotor(&backMotor, 0);
 8001efe:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002144 <main+0x31c>
 8001f02:	488f      	ldr	r0, [pc, #572]	; (8002140 <main+0x318>)
 8001f04:	f7ff fb4c 	bl	80015a0 <runMotor>
	emBrakeMotor(1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fa69 	bl	80013e0 <emBrakeMotor>
//
	//Initialize hub motor provdided joystick control
	hubMotor_Init();
 8001f0e:	f7ff fa11 	bl	8001334 <hubMotor_Init>
	wheelSpeedControl_Init(&climbWheelSpeed,
 8001f12:	4b8d      	ldr	r3, [pc, #564]	; (8002148 <main+0x320>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a8d      	ldr	r2, [pc, #564]	; (800214c <main+0x324>)
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	4b89      	ldr	r3, [pc, #548]	; (8002148 <main+0x320>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <main+0x328>)
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	ed93 7a00 	vldr	s14, [r3]
 8001f2e:	eef0 0a47 	vmov.f32	s1, s14
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	4887      	ldr	r0, [pc, #540]	; (8002154 <main+0x32c>)
 8001f38:	f001 f844 	bl	8002fc4 <wheelSpeedControl_Init>
			climb_linSpeedLevel[climb_speedLevel],
			climb_angSpeedLevel[climb_speedLevel]);

	//Initialize balance controller
	// Prepare PID controller for operation
	balance_pid = pid_create(&balance_ctrl, &balance_input, &balance_output,
 8001f3c:	4b86      	ldr	r3, [pc, #536]	; (8002158 <main+0x330>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	4b86      	ldr	r3, [pc, #536]	; (800215c <main+0x334>)
 8001f44:	ed93 7a00 	vldr	s14, [r3]
 8001f48:	4b85      	ldr	r3, [pc, #532]	; (8002160 <main+0x338>)
 8001f4a:	edd3 6a00 	vldr	s13, [r3]
 8001f4e:	eeb0 1a66 	vmov.f32	s2, s13
 8001f52:	eef0 0a47 	vmov.f32	s1, s14
 8001f56:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5a:	4b82      	ldr	r3, [pc, #520]	; (8002164 <main+0x33c>)
 8001f5c:	4a82      	ldr	r2, [pc, #520]	; (8002168 <main+0x340>)
 8001f5e:	4983      	ldr	r1, [pc, #524]	; (800216c <main+0x344>)
 8001f60:	4883      	ldr	r0, [pc, #524]	; (8002170 <main+0x348>)
 8001f62:	f7fe ff5f 	bl	8000e24 <pid_create>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a82      	ldr	r2, [pc, #520]	; (8002174 <main+0x34c>)
 8001f6a:	6013      	str	r3, [r2, #0]
			&balance_setpoint, balance_kp, balance_ki, balance_kd);
	// Set controler output limits from 0 to 200
	pid_limits(balance_pid, -30, 30);
 8001f6c:	4b81      	ldr	r3, [pc, #516]	; (8002174 <main+0x34c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001f74:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f8df 	bl	800113c <pid_limits>
	//Sample time is 1ms
	pid_sample(balance_pid, 1);
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <main+0x34c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8a5 	bl	80010d4 <pid_sample>
	// Allow PID to compute and change output
	pid_auto(balance_pid);
 8001f8a:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <main+0x34c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f939 	bl	8001206 <pid_auto>


	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8001f94:	4b78      	ldr	r3, [pc, #480]	; (8002178 <main+0x350>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	4b78      	ldr	r3, [pc, #480]	; (800217c <main+0x354>)
 8001f9c:	ed93 7a00 	vldr	s14, [r3]
 8001fa0:	4b77      	ldr	r3, [pc, #476]	; (8002180 <main+0x358>)
 8001fa2:	edd3 6a00 	vldr	s13, [r3]
 8001fa6:	eeb0 1a66 	vmov.f32	s2, s13
 8001faa:	eef0 0a47 	vmov.f32	s1, s14
 8001fae:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb2:	4b74      	ldr	r3, [pc, #464]	; (8002184 <main+0x35c>)
 8001fb4:	4a74      	ldr	r2, [pc, #464]	; (8002188 <main+0x360>)
 8001fb6:	4975      	ldr	r1, [pc, #468]	; (800218c <main+0x364>)
 8001fb8:	4875      	ldr	r0, [pc, #468]	; (8002190 <main+0x368>)
 8001fba:	f7fe ff33 	bl	8000e24 <pid_create>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a74      	ldr	r2, [pc, #464]	; (8002194 <main+0x36c>)
 8001fc2:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 8001fc4:	4b73      	ldr	r3, [pc, #460]	; (8002194 <main+0x36c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	eddf 0a73 	vldr	s1, [pc, #460]	; 8002198 <main+0x370>
 8001fcc:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800219c <main+0x374>
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f8b3 	bl	800113c <pid_limits>
	pid_sample(frontClimb_pid, 1);
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <main+0x36c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f879 	bl	80010d4 <pid_sample>
	pid_auto(frontClimb_pid);
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <main+0x36c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f90d 	bl	8001206 <pid_auto>

	frontClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8001fec:	4b6c      	ldr	r3, [pc, #432]	; (80021a0 <main+0x378>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <main+0x37c>)
 8001ff4:	ed93 7a00 	vldr	s14, [r3]
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	; (80021a8 <main+0x380>)
 8001ffa:	edd3 6a00 	vldr	s13, [r3]
 8001ffe:	eeb0 1a66 	vmov.f32	s2, s13
 8002002:	eef0 0a47 	vmov.f32	s1, s14
 8002006:	eeb0 0a67 	vmov.f32	s0, s15
 800200a:	4b68      	ldr	r3, [pc, #416]	; (80021ac <main+0x384>)
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <main+0x388>)
 800200e:	4969      	ldr	r1, [pc, #420]	; (80021b4 <main+0x38c>)
 8002010:	4869      	ldr	r0, [pc, #420]	; (80021b8 <main+0x390>)
 8002012:	f7fe ff07 	bl	8000e24 <pid_create>
 8002016:	4603      	mov	r3, r0
 8002018:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <main+0x36c>)
 800201a:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp,
			backClimb_ki, backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 800201c:	4b67      	ldr	r3, [pc, #412]	; (80021bc <main+0x394>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8002198 <main+0x370>
 8002024:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800219c <main+0x374>
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f887 	bl	800113c <pid_limits>
	pid_sample(backClimb_pid, 1);
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <main+0x394>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2101      	movs	r1, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f84d 	bl	80010d4 <pid_sample>
	pid_auto(backClimb_pid);
 800203a:	4b60      	ldr	r3, [pc, #384]	; (80021bc <main+0x394>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f8e1 	bl	8001206 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8002044:	f001 f878 	bl	8003138 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]
	ENCODER_Get_Angle(&encoderLeft);
 800204a:	485d      	ldr	r0, [pc, #372]	; (80021c0 <main+0x398>)
 800204c:	f7ff fcff 	bl	8001a4e <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderRight);
 8002050:	485c      	ldr	r0, [pc, #368]	; (80021c4 <main+0x39c>)
 8002052:	f7ff fcfc 	bl	8001a4e <ENCODER_Get_Angle>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderLeft);
//	ENCODER_Set_ZeroPosition(&encoderRight);
	HAL_Delay(500);
 8002056:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800205a:	f001 f879 	bl	8003150 <HAL_Delay>
	//debug variable
	uint32_t debug_prev_time = HAL_GetTick();
 800205e:	f001 f86b 	bl	8003138 <HAL_GetTick>
 8002062:	60b8      	str	r0, [r7, #8]
	uint8_t led_status = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	71fb      	strb	r3, [r7, #7]
	//  float speed = 0;
	while (1) {
		//Code to debug with blinking LED
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 8002068:	f001 f866 	bl	8003138 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002076:	d317      	bcc.n	80020a8 <main+0x280>
			if (led_status == 0) {
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <main+0x266>
				//	      count++;
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800207e:	2201      	movs	r2, #1
 8002080:	2108      	movs	r1, #8
 8002082:	4851      	ldr	r0, [pc, #324]	; (80021c8 <main+0x3a0>)
 8002084:	f003 f9ec 	bl	8005460 <HAL_GPIO_WritePin>
				led_status = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	e009      	b.n	80020a2 <main+0x27a>
			} else if (led_status == 1) {
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <main+0x27a>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2108      	movs	r1, #8
 8002098:	484b      	ldr	r0, [pc, #300]	; (80021c8 <main+0x3a0>)
 800209a:	f003 f9e1 	bl	8005460 <HAL_GPIO_WritePin>
				led_status = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	71fb      	strb	r3, [r7, #7]
			}
			debug_prev_time = HAL_GetTick();
 80020a2:	f001 f849 	bl	8003138 <HAL_GetTick>
 80020a6:	60b8      	str	r0, [r7, #8]

		//      runMotor(&backMotor, speed++, 1);
//		ENCODER_Get_Angle(&encoderLeft);
//		ENCODER_Get_Angle(&encoderRight);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1) {
 80020a8:	f001 f846 	bl	8003138 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d0d9      	beq.n	8002068 <main+0x240>
			//	ADC_DataRequest();
			ENCODER_Read(&encoderLeft);
 80020b4:	4842      	ldr	r0, [pc, #264]	; (80021c0 <main+0x398>)
 80020b6:	f7ff fca2 	bl	80019fe <ENCODER_Read>
			ENCODER_Read(&encoderRight);
 80020ba:	4842      	ldr	r0, [pc, #264]	; (80021c4 <main+0x39c>)
 80020bc:	f7ff fc9f 	bl	80019fe <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			//	MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Impulse(&button1, 30);
 80020c0:	211e      	movs	r1, #30
 80020c2:	4842      	ldr	r0, [pc, #264]	; (80021cc <main+0x3a4>)
 80020c4:	f7ff fb1b 	bl	80016fe <GPIO_Digital_Filtered_Impulse>
			GPIO_Digital_Filtered_Impulse(&button2, 30);
 80020c8:	211e      	movs	r1, #30
 80020ca:	4841      	ldr	r0, [pc, #260]	; (80021d0 <main+0x3a8>)
 80020cc:	f7ff fb17 	bl	80016fe <GPIO_Digital_Filtered_Impulse>
			GPIO_Digital_Filtered_Impulse(&button3, 30);
 80020d0:	211e      	movs	r1, #30
 80020d2:	4840      	ldr	r0, [pc, #256]	; (80021d4 <main+0x3ac>)
 80020d4:	f7ff fb13 	bl	80016fe <GPIO_Digital_Filtered_Impulse>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80020d8:	2105      	movs	r1, #5
 80020da:	483f      	ldr	r0, [pc, #252]	; (80021d8 <main+0x3b0>)
 80020dc:	f7ff fad7 	bl	800168e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80020e0:	2105      	movs	r1, #5
 80020e2:	483e      	ldr	r0, [pc, #248]	; (80021dc <main+0x3b4>)
 80020e4:	f7ff fad3 	bl	800168e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80020e8:	2105      	movs	r1, #5
 80020ea:	483d      	ldr	r0, [pc, #244]	; (80021e0 <main+0x3b8>)
 80020ec:	f7ff facf 	bl	800168e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80020f0:	2105      	movs	r1, #5
 80020f2:	483c      	ldr	r0, [pc, #240]	; (80021e4 <main+0x3bc>)
 80020f4:	f7ff facb 	bl	800168e <GPIO_Digital_Filtered_Input>
//				send_HubMotor(410, 410);
			//---------------------------------------------------------------------------------------------------
			//Testing Climbing Balance Control
			//---------------------------------------------------------------------------------------------------
//
			if (button2.state == GPIO_PIN_SET && state_count++ > 5) {
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <main+0x3a8>)
 80020fa:	7a1b      	ldrb	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d17e      	bne.n	80021fe <main+0x3d6>
 8002100:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <main+0x3c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	4938      	ldr	r1, [pc, #224]	; (80021e8 <main+0x3c0>)
 8002108:	600a      	str	r2, [r1, #0]
 800210a:	2b05      	cmp	r3, #5
 800210c:	dd77      	ble.n	80021fe <main+0x3d6>
				state_count = 0;
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <main+0x3c0>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
				if (state == TEST) {
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <main+0x3c4>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d169      	bne.n	80021f0 <main+0x3c8>
					state = NORMAL;
 800211c:	4b33      	ldr	r3, [pc, #204]	; (80021ec <main+0x3c4>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e06c      	b.n	80021fe <main+0x3d6>
 8002124:	10624dd3 	.word	0x10624dd3
 8002128:	20000098 	.word	0x20000098
 800212c:	0800a078 	.word	0x0800a078
 8002130:	0800a084 	.word	0x0800a084
 8002134:	20000068 	.word	0x20000068
 8002138:	2000050c 	.word	0x2000050c
 800213c:	20000000 	.word	0x20000000
 8002140:	20000034 	.word	0x20000034
 8002144:	00000000 	.word	0x00000000
 8002148:	20000198 	.word	0x20000198
 800214c:	0800a090 	.word	0x0800a090
 8002150:	0800a09c 	.word	0x0800a09c
 8002154:	2000009c 	.word	0x2000009c
 8002158:	2000013c 	.word	0x2000013c
 800215c:	20000140 	.word	0x20000140
 8002160:	20000144 	.word	0x20000144
 8002164:	200001a4 	.word	0x200001a4
 8002168:	200001a0 	.word	0x200001a0
 800216c:	2000019c 	.word	0x2000019c
 8002170:	20000444 	.word	0x20000444
 8002174:	2000042c 	.word	0x2000042c
 8002178:	20000148 	.word	0x20000148
 800217c:	2000014c 	.word	0x2000014c
 8002180:	20000150 	.word	0x20000150
 8002184:	200001b0 	.word	0x200001b0
 8002188:	200001ac 	.word	0x200001ac
 800218c:	200001a8 	.word	0x200001a8
 8002190:	20000478 	.word	0x20000478
 8002194:	20000440 	.word	0x20000440
 8002198:	42480000 	.word	0x42480000
 800219c:	c2480000 	.word	0xc2480000
 80021a0:	20000154 	.word	0x20000154
 80021a4:	20000158 	.word	0x20000158
 80021a8:	2000015c 	.word	0x2000015c
 80021ac:	200001bc 	.word	0x200001bc
 80021b0:	200001b8 	.word	0x200001b8
 80021b4:	200001b4 	.word	0x200001b4
 80021b8:	200003f8 	.word	0x200003f8
 80021bc:	200004c8 	.word	0x200004c8
 80021c0:	20000260 	.word	0x20000260
 80021c4:	200002dc 	.word	0x200002dc
 80021c8:	40020400 	.word	0x40020400
 80021cc:	2000010c 	.word	0x2000010c
 80021d0:	2000011c 	.word	0x2000011c
 80021d4:	2000012c 	.word	0x2000012c
 80021d8:	200000cc 	.word	0x200000cc
 80021dc:	200000dc 	.word	0x200000dc
 80021e0:	200000ec 	.word	0x200000ec
 80021e4:	200000fc 	.word	0x200000fc
 80021e8:	200001c0 	.word	0x200001c0
 80021ec:	20000160 	.word	0x20000160
				} else if (state == NORMAL)
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <main+0x49c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <main+0x3d6>
					state = TEST;
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <main+0x49c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
			}
//			 && fabs(MAX_FRONT_CLIMBING_ENC - encoderRight.encoder_pos) > 30
			if (state == TEST) {
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <main+0x49c>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <main+0x3e4>
//					pid_compute(frontClimb_pid);
//					//Change actuator value
//					speed[FRONT_INDEX] = frontClimb_output;
//				} else
//					speed[FRONT_INDEX] = 0;
				front_goto_pos(0);
 8002206:	2000      	movs	r0, #0
 8002208:	f000 f976 	bl	80024f8 <front_goto_pos>

			}

			if (state == NORMAL) {
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <main+0x49c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d124      	bne.n	800225e <main+0x436>
				if (button1.state == GPIO_PIN_SET
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <main+0x4a0>)
 8002216:	7a1b      	ldrb	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <main+0x404>
						&& button3.state == GPIO_PIN_RESET)
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <main+0x4a4>)
 800221e:	7a1b      	ldrb	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <main+0x404>
					speed[FRONT_INDEX] = 30;
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <main+0x4a8>)
 8002226:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <main+0x4ac>)
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e013      	b.n	8002254 <main+0x42c>
				else if (button1.state == GPIO_PIN_SET
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <main+0x4a0>)
 800222e:	7a1b      	ldrb	r3, [r3, #8]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <main+0x41c>
						&& button3.state == GPIO_PIN_SET)
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <main+0x4a4>)
 8002236:	7a1b      	ldrb	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d103      	bne.n	8002244 <main+0x41c>
					speed[FRONT_INDEX] = -30;
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <main+0x4a8>)
 800223e:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <main+0x4b0>)
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <main+0x42c>
				else if (button1.state == GPIO_PIN_RESET)
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <main+0x4a0>)
 8002246:	7a1b      	ldrb	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <main+0x42c>
					speed[FRONT_INDEX] = 0;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <main+0x4a8>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <main+0x4b4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f84d 	bl	80012f8 <pid_reset>
			}
			runMotor(&rearMotor, speed[FRONT_INDEX]);
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <main+0x4a8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	eeb0 0a67 	vmov.f32	s0, s15
 8002268:	481d      	ldr	r0, [pc, #116]	; (80022e0 <main+0x4b8>)
 800226a:	f7ff f999 	bl	80015a0 <runMotor>
			//		if (button3.state == GPIO_PIN_SET)
			//			reinitialize();
			//
			//	}

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <main+0x4a8>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d10b      	bne.n	8002296 <main+0x46e>
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <main+0x4a8>)
 8002280:	edd3 7a01 	vldr	s15, [r3, #4]
 8002284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d103      	bne.n	8002296 <main+0x46e>
				emBrakeMotor(0);
 800228e:	2000      	movs	r0, #0
 8002290:	f7ff f8a6 	bl	80013e0 <emBrakeMotor>
 8002294:	e002      	b.n	800229c <main+0x474>
			else
				emBrakeMotor(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff f8a2 	bl	80013e0 <emBrakeMotor>
			runMotor(&rearMotor, speed[FRONT_INDEX]);
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <main+0x4a8>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eeb0 0a67 	vmov.f32	s0, s15
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <main+0x4b8>)
 80022a8:	f7ff f97a 	bl	80015a0 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <main+0x4a8>)
 80022ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	480b      	ldr	r0, [pc, #44]	; (80022e4 <main+0x4bc>)
 80022b8:	f7ff f972 	bl	80015a0 <runMotor>
			//	    back_touchdown = 1;
			//	}
			//
			//	//Climbing phase start

			prev_time = HAL_GetTick();
 80022bc:	f000 ff3c 	bl	8003138 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 80022c2:	e6d1      	b.n	8002068 <main+0x240>
 80022c4:	20000160 	.word	0x20000160
 80022c8:	2000010c 	.word	0x2000010c
 80022cc:	2000012c 	.word	0x2000012c
 80022d0:	20000190 	.word	0x20000190
 80022d4:	41f00000 	.word	0x41f00000
 80022d8:	c1f00000 	.word	0xc1f00000
 80022dc:	20000440 	.word	0x20000440
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000034 	.word	0x20000034

080022e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	; 0x50
 80022ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	2230      	movs	r2, #48	; 0x30
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 fd6c 	bl	8009dd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <SystemClock_Config+0xd8>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <SystemClock_Config+0xd8>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <SystemClock_Config+0xd8>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	2300      	movs	r3, #0
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <SystemClock_Config+0xdc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <SystemClock_Config+0xdc>)
 8002332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <SystemClock_Config+0xdc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002344:	2301      	movs	r3, #1
 8002346:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234e:	2302      	movs	r3, #2
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002358:	2308      	movs	r3, #8
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800235c:	23b4      	movs	r3, #180	; 0xb4
 800235e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002360:	2302      	movs	r3, #2
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002364:	2304      	movs	r3, #4
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002368:	f107 0320 	add.w	r3, r7, #32
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fb9d 	bl	8005aac <HAL_RCC_OscConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0x94>
		Error_Handler();
 8002378:	f000 f91a 	bl	80025b0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800237c:	f003 fb46 	bl	8005a0c <HAL_PWREx_EnableOverDrive>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0xa2>
		Error_Handler();
 8002386:	f000 f913 	bl	80025b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800238a:	230f      	movs	r3, #15
 800238c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238e:	2302      	movs	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002396:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800239a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800239c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	2105      	movs	r1, #5
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fe9f 	bl	80060ec <HAL_RCC_ClockConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <SystemClock_Config+0xd0>
		Error_Handler();
 80023b4:	f000 f8fc 	bl	80025b0 <Error_Handler>
	}
}
 80023b8:	bf00      	nop
 80023ba:	3750      	adds	r7, #80	; 0x50
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000

080023c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d11c      	bne.n	8002412 <HAL_GPIO_EXTI_Callback+0x4a>
	case AD_BUSY_Pin: {
		if (HAL_GetTick() - prev_adc_time > 1) {
 80023d8:	f000 feae 	bl	8003138 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_GPIO_EXTI_Callback+0x58>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d916      	bls.n	8002416 <HAL_GPIO_EXTI_Callback+0x4e>
			ADC_Read(&adc_rawData[0]);
 80023e8:	480e      	ldr	r0, [pc, #56]	; (8002424 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023ea:	f7fe ffbb 	bl	8001364 <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_GPIO_EXTI_Callback+0x60>)
 80023f8:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002400:	461a      	mov	r2, r3
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_GPIO_EXTI_Callback+0x64>)
 8002404:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002406:	f000 fe97 	bl	8003138 <HAL_GetTick>
 800240a:	4603      	mov	r3, r0
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <HAL_GPIO_EXTI_Callback+0x58>)
 800240e:	6013      	str	r3, [r2, #0]
		}
	}

		break;
 8002410:	e001      	b.n	8002416 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002412:	bf00      	nop
 8002414:	e000      	b.n	8002418 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002416:	bf00      	nop
	}
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000018c 	.word	0x2000018c
 8002424:	20000430 	.word	0x20000430
 8002428:	200004c4 	.word	0x200004c4
 800242c:	20000388 	.word	0x20000388

08002430 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a2a      	ldr	r2, [pc, #168]	; (80024e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d14d      	bne.n	80024dc <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8002446:	2100      	movs	r1, #0
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f001 fb77 	bl	8003b3c <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT) {
 800244e:	7a7b      	ldrb	r3, [r7, #9]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d11a      	bne.n	800248a <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	4924      	ldr	r1, [pc, #144]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa7e 	bl	800195c <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderLeft);
 8002460:	4822      	ldr	r0, [pc, #136]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002462:	f7ff faf4 	bl	8001a4e <ENCODER_Get_Angle>
			//TODO: Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderLeft.encoder_pos = (uint32_t) (4096 * FRONT_GEAR_RATIO)
					- encoderLeft.encoder_pos
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 800246a:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderLeft.encoder_pos
 800246e:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 8002472:	3333      	adds	r3, #51	; 0x33
			encoderLeft.encoder_pos = (uint32_t) (4096 * FRONT_GEAR_RATIO)
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002476:	6453      	str	r3, [r2, #68]	; 0x44
			encoderLeft.angleDeg = encoderLeft.encoder_pos
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
					/ (uint32_t) (4096 * BACK_GEAR_RATIO) * 360;
 800247c:	0b5b      	lsrs	r3, r3, #13
 800247e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002482:	fb02 f303 	mul.w	r3, r2, r3
			encoderLeft.angleDeg = encoderLeft.encoder_pos
 8002486:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT) {
 800248a:	7a7b      	ldrb	r3, [r7, #9]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d125      	bne.n	80024dc <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fa60 	bl	800195c <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderRight);
 800249c:	4814      	ldr	r0, [pc, #80]	; (80024f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800249e:	f7ff fad6 	bl	8001a4e <ENCODER_Get_Angle>
			encoderRight.encoder_pos = (uint32_t) (4096 * FRONT_GEAR_RATIO)
					- encoderRight.encoder_pos
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80024a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
							% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80024a8:	fba3 1302 	umull	r1, r3, r3, r2
 80024ac:	0b5b      	lsrs	r3, r3, #13
 80024ae:	f242 3133 	movw	r1, #9011	; 0x2333
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	1ad3      	subs	r3, r2, r3
					- encoderRight.encoder_pos
 80024b8:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80024bc:	3333      	adds	r3, #51	; 0x33
			encoderRight.encoder_pos = (uint32_t) (4096 * FRONT_GEAR_RATIO)
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
			encoderRight.angleDeg = (encoderRight.encoder_pos
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
					/ (uint32_t) (4096 * FRONT_GEAR_RATIO) * 360) + 38;
 80024c6:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	0b5b      	lsrs	r3, r3, #13
 80024ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	3326      	adds	r3, #38	; 0x26
			encoderRight.angleDeg = (encoderRight.encoder_pos
 80024d8:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
		}

	}

}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000238 	.word	0x20000238
 80024e8:	200001c4 	.word	0x200001c4
 80024ec:	20000260 	.word	0x20000260
 80024f0:	200002dc 	.word	0x200002dc
 80024f4:	e8bb8111 	.word	0xe8bb8111

080024f8 <front_goto_pos>:
	lifting_mode = 0;
	retraction_mode = 0;
	forward_distance = BASE_LENGTH;
}

void front_goto_pos(uint32_t enc) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
//	&& encoderRight.encoder_pos >= MIN_FRONT_ALLOWABLE_ENC 	&& cur_enc_pos <= MAX_FRONT_ALLOWABLE_ENC
	int cur_enc_pos = (int) encoderRight.encoder_pos;
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <front_goto_pos+0xa0>)
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	60fb      	str	r3, [r7, #12]
	if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 10) {
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <front_goto_pos+0xa4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fccc 	bl	8000ea8 <pid_need_compute>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d033      	beq.n	800257e <front_goto_pos+0x86>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b0a      	cmp	r3, #10
 800251e:	d92e      	bls.n	800257e <front_goto_pos+0x86>
		// Read process feedback
		if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002526:	4293      	cmp	r3, r2
 8002528:	d90f      	bls.n	800254a <front_goto_pos+0x52>
			cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7fd ffb2 	bl	8000494 <__aeabi_i2d>
 8002530:	a317      	add	r3, pc, #92	; (adr r3, 8002590 <front_goto_pos+0x98>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fd fe5f 	bl	80001f8 <__aeabi_dsub>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe faab 	bl	8000a9c <__aeabi_d2iz>
 8002546:	4603      	mov	r3, r0
 8002548:	60fb      	str	r3, [r7, #12]
		frontClimb_setpoint = enc;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <front_goto_pos+0xa8>)
 8002556:	edc3 7a00 	vstr	s15, [r3]
		frontClimb_input = cur_enc_pos;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <front_goto_pos+0xac>)
 8002566:	edc3 7a00 	vstr	s15, [r3]
		// Compute new PID output value
		pid_compute(frontClimb_pid);
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <front_goto_pos+0xa4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fcaf 	bl	8000ed2 <pid_compute>
		//Change actuator value
		speed[FRONT_INDEX] = frontClimb_output;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <front_goto_pos+0xb0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <front_goto_pos+0xb4>)
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e004      	b.n	8002588 <front_goto_pos+0x90>
	} else {
		speed[FRONT_INDEX] = 0;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <front_goto_pos+0xb4>)
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
//		pid_reset(frontClimb_pid);
	}
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	9999999a 	.word	0x9999999a
 8002594:	40c19999 	.word	0x40c19999
 8002598:	200002dc 	.word	0x200002dc
 800259c:	20000440 	.word	0x20000440
 80025a0:	200001b0 	.word	0x200001b0
 80025a4:	200001a8 	.word	0x200001a8
 80025a8:	200001ac 	.word	0x200001ac
 80025ac:	20000190 	.word	0x20000190

080025b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_SPI1_Init+0x68>)
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <MX_SPI1_Init+0x6c>)
 80025dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_SPI1_Init+0x68>)
 80025e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_SPI1_Init+0x68>)
 80025e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <MX_SPI1_Init+0x68>)
 80025f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_SPI1_Init+0x68>)
 80025f8:	2202      	movs	r2, #2
 80025fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_SPI1_Init+0x68>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_SPI1_Init+0x68>)
 8002604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_SPI1_Init+0x68>)
 800260c:	2228      	movs	r2, #40	; 0x28
 800260e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <MX_SPI1_Init+0x68>)
 8002612:	2200      	movs	r2, #0
 8002614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_SPI1_Init+0x68>)
 8002618:	2200      	movs	r2, #0
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <MX_SPI1_Init+0x68>)
 800261e:	2200      	movs	r2, #0
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_SPI1_Init+0x68>)
 8002624:	220a      	movs	r2, #10
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_SPI1_Init+0x68>)
 800262a:	f004 f819 	bl	8006660 <HAL_SPI_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002634:	f7ff ffbc 	bl	80025b0 <Error_Handler>
  }

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200001e0 	.word	0x200001e0
 8002640:	40013000 	.word	0x40013000

08002644 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_SPI_MspInit+0x84>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12b      	bne.n	80026be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_SPI_MspInit+0x88>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_SPI_MspInit+0x88>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800269e:	2360      	movs	r3, #96	; 0x60
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ae:	2305      	movs	r3, #5
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 80026ba:	f002 fb7f 	bl	8004dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40013000 	.word	0x40013000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000

080026d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_MspInit+0x4c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_MspInit+0x4c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_MspInit+0x4c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_MspInit+0x4c>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <HardFault_Handler+0x4>

08002738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <MemManage_Handler+0x4>

0800273e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <UsageFault_Handler+0x4>

0800274a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002778:	f000 fcca 	bl	8003110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <DMA1_Stream1_IRQHandler+0x10>)
 8002786:	f002 f8dd 	bl	8004944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200005cc 	.word	0x200005cc

08002794 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <CAN1_RX0_IRQHandler+0x10>)
 800279a:	f001 fb1f 	bl	8003ddc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000238 	.word	0x20000238

080027a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80027ac:	2080      	movs	r0, #128	; 0x80
 80027ae:	f002 fe89 	bl	80054c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <SystemInit+0x28>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <SystemInit+0x28>)
 80027c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SystemInit+0x28>)
 80027ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d2:	609a      	str	r2, [r3, #8]
#endif
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b096      	sub	sp, #88	; 0x58
 80027e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2220      	movs	r2, #32
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f007 fad9 	bl	8009dd4 <memset>

  htim1.Instance = TIM1;
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <MX_TIM1_Init+0x138>)
 8002824:	4a3e      	ldr	r2, [pc, #248]	; (8002920 <MX_TIM1_Init+0x13c>)
 8002826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8002828:	4b3c      	ldr	r3, [pc, #240]	; (800291c <MX_TIM1_Init+0x138>)
 800282a:	22b3      	movs	r2, #179	; 0xb3
 800282c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <MX_TIM1_Init+0x138>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002834:	4b39      	ldr	r3, [pc, #228]	; (800291c <MX_TIM1_Init+0x138>)
 8002836:	2263      	movs	r2, #99	; 0x63
 8002838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <MX_TIM1_Init+0x138>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <MX_TIM1_Init+0x138>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002846:	4b35      	ldr	r3, [pc, #212]	; (800291c <MX_TIM1_Init+0x138>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800284c:	4833      	ldr	r0, [pc, #204]	; (800291c <MX_TIM1_Init+0x138>)
 800284e:	f004 fc05 	bl	800705c <HAL_TIM_Base_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002858:	f7ff feaa 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002866:	4619      	mov	r1, r3
 8002868:	482c      	ldr	r0, [pc, #176]	; (800291c <MX_TIM1_Init+0x138>)
 800286a:	f005 fb83 	bl	8007f74 <HAL_TIM_ConfigClockSource>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002874:	f7ff fe9c 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002878:	4828      	ldr	r0, [pc, #160]	; (800291c <MX_TIM1_Init+0x138>)
 800287a:	f004 fd45 	bl	8007308 <HAL_TIM_PWM_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002884:	f7ff fe94 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002890:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002894:	4619      	mov	r1, r3
 8002896:	4821      	ldr	r0, [pc, #132]	; (800291c <MX_TIM1_Init+0x138>)
 8002898:	f006 fc0a 	bl	80090b0 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80028a2:	f7ff fe85 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a6:	2360      	movs	r3, #96	; 0x60
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ae:	2300      	movs	r3, #0
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028b2:	2300      	movs	r3, #0
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c6:	2204      	movs	r2, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4814      	ldr	r0, [pc, #80]	; (800291c <MX_TIM1_Init+0x138>)
 80028cc:	f005 f976 	bl	8007bbc <HAL_TIM_PWM_ConfigChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80028d6:	f7ff fe6b 	bl	80025b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4807      	ldr	r0, [pc, #28]	; (800291c <MX_TIM1_Init+0x138>)
 80028fe:	f006 fcb5 	bl	800926c <HAL_TIMEx_ConfigBreakDeadTime>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002908:	f7ff fe52 	bl	80025b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800290c:	4803      	ldr	r0, [pc, #12]	; (800291c <MX_TIM1_Init+0x138>)
 800290e:	f000 fa2b 	bl	8002d68 <HAL_TIM_MspPostInit>

}
 8002912:	bf00      	nop
 8002914:	3758      	adds	r7, #88	; 0x58
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000054c 	.word	0x2000054c
 8002920:	40010000 	.word	0x40010000

08002924 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	f107 0318 	add.w	r3, r7, #24
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002942:	463b      	mov	r3, r7
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <MX_TIM2_Init+0xf0>)
 8002950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002956:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <MX_TIM2_Init+0xf0>)
 8002958:	22b3      	movs	r2, #179	; 0xb3
 800295a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <MX_TIM2_Init+0xf0>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8002962:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <MX_TIM2_Init+0xf0>)
 8002964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_TIM2_Init+0xf0>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <MX_TIM2_Init+0xf0>)
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002976:	4827      	ldr	r0, [pc, #156]	; (8002a14 <MX_TIM2_Init+0xf0>)
 8002978:	f004 fb70 	bl	800705c <HAL_TIM_Base_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002982:	f7ff fe15 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	4619      	mov	r1, r3
 8002992:	4820      	ldr	r0, [pc, #128]	; (8002a14 <MX_TIM2_Init+0xf0>)
 8002994:	f005 faee 	bl	8007f74 <HAL_TIM_ConfigClockSource>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800299e:	f7ff fe07 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80029a2:	481c      	ldr	r0, [pc, #112]	; (8002a14 <MX_TIM2_Init+0xf0>)
 80029a4:	f004 fe80 	bl	80076a8 <HAL_TIM_IC_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80029ae:	f7ff fdff 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	4814      	ldr	r0, [pc, #80]	; (8002a14 <MX_TIM2_Init+0xf0>)
 80029c2:	f006 fb75 	bl	80090b0 <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80029cc:	f7ff fdf0 	bl	80025b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029d0:	2300      	movs	r3, #0
 80029d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029d4:	2301      	movs	r3, #1
 80029d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80029e0:	463b      	mov	r3, r7
 80029e2:	2208      	movs	r2, #8
 80029e4:	4619      	mov	r1, r3
 80029e6:	480b      	ldr	r0, [pc, #44]	; (8002a14 <MX_TIM2_Init+0xf0>)
 80029e8:	f004 ff34 	bl	8007854 <HAL_TIM_IC_ConfigChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80029f2:	f7ff fddd 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80029f6:	463b      	mov	r3, r7
 80029f8:	220c      	movs	r2, #12
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_TIM2_Init+0xf0>)
 80029fe:	f004 ff29 	bl	8007854 <HAL_TIM_IC_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002a08:	f7ff fdd2 	bl	80025b0 <Error_Handler>
  }

}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	; 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	2000058c 	.word	0x2000058c

08002a18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a4a:	4a33      	ldr	r2, [pc, #204]	; (8002b18 <MX_TIM3_Init+0x100>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a50:	2259      	movs	r2, #89	; 0x59
 8002a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a5c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a6e:	4829      	ldr	r0, [pc, #164]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a70:	f004 faf4 	bl	800705c <HAL_TIM_Base_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a7a:	f7ff fd99 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4822      	ldr	r0, [pc, #136]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a8c:	f005 fa72 	bl	8007f74 <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a96:	f7ff fd8b 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a9a:	481e      	ldr	r0, [pc, #120]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002a9c:	f004 fc34 	bl	8007308 <HAL_TIM_PWM_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002aa6:	f7ff fd83 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4816      	ldr	r0, [pc, #88]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002aba:	f006 faf9 	bl	80090b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ac4:	f7ff fd74 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac8:	2360      	movs	r3, #96	; 0x60
 8002aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002acc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002ae2:	f005 f86b 	bl	8007bbc <HAL_TIM_PWM_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002aec:	f7ff fd60 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2204      	movs	r2, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4807      	ldr	r0, [pc, #28]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002af8:	f005 f860 	bl	8007bbc <HAL_TIM_PWM_ConfigChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002b02:	f7ff fd55 	bl	80025b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002b06:	4803      	ldr	r0, [pc, #12]	; (8002b14 <MX_TIM3_Init+0xfc>)
 8002b08:	f000 f92e 	bl	8002d68 <HAL_TIM_MspPostInit>

}
 8002b0c:	bf00      	nop
 8002b0e:	3738      	adds	r7, #56	; 0x38
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000050c 	.word	0x2000050c
 8002b18:	40000400 	.word	0x40000400

08002b1c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b096      	sub	sp, #88	; 0x58
 8002b20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	615a      	str	r2, [r3, #20]
 8002b4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2220      	movs	r2, #32
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f007 f93d 	bl	8009dd4 <memset>

  htim8.Instance = TIM8;
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b5c:	4a3d      	ldr	r2, [pc, #244]	; (8002c54 <MX_TIM8_Init+0x138>)
 8002b5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8002b60:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b62:	22b3      	movs	r2, #179	; 0xb3
 8002b64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8002b6c:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b6e:	2263      	movs	r2, #99	; 0x63
 8002b70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b84:	4832      	ldr	r0, [pc, #200]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002b86:	f004 fa69 	bl	800705c <HAL_TIM_Base_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002b90:	f7ff fd0e 	bl	80025b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	482b      	ldr	r0, [pc, #172]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002ba2:	f005 f9e7 	bl	8007f74 <HAL_TIM_ConfigClockSource>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002bac:	f7ff fd00 	bl	80025b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002bb0:	4827      	ldr	r0, [pc, #156]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002bb2:	f004 fba9 	bl	8007308 <HAL_TIM_PWM_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002bbc:	f7ff fcf8 	bl	80025b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4820      	ldr	r0, [pc, #128]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002bd0:	f006 fa6e 	bl	80090b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002bda:	f7ff fce9 	bl	80025b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bde:	2360      	movs	r3, #96	; 0x60
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002c00:	f004 ffdc 	bl	8007bbc <HAL_TIM_PWM_ConfigChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002c0a:	f7ff fcd1 	bl	80025b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4807      	ldr	r0, [pc, #28]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002c32:	f006 fb1b 	bl	800926c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8002c3c:	f7ff fcb8 	bl	80025b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002c40:	4803      	ldr	r0, [pc, #12]	; (8002c50 <MX_TIM8_Init+0x134>)
 8002c42:	f000 f891 	bl	8002d68 <HAL_TIM_MspPostInit>

}
 8002c46:	bf00      	nop
 8002c48:	3758      	adds	r7, #88	; 0x58
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200004cc 	.word	0x200004cc
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_TIM_Base_MspInit+0xfc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a35      	ldr	r2, [pc, #212]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002c96:	e059      	b.n	8002d4c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca0:	d12d      	bne.n	8002cfe <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a2b      	ldr	r2, [pc, #172]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8002cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cec:	2301      	movs	r3, #1
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4819      	ldr	r0, [pc, #100]	; (8002d5c <HAL_TIM_Base_MspInit+0x104>)
 8002cf8:	f002 f860 	bl	8004dbc <HAL_GPIO_Init>
}
 8002cfc:	e026      	b.n	8002d4c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_TIM_Base_MspInit+0x108>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10e      	bne.n	8002d26 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6413      	str	r3, [r2, #64]	; 0x40
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	e012      	b.n	8002d4c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_TIM_Base_MspInit+0x10c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10d      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_TIM_Base_MspInit+0x100>)
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	3730      	adds	r7, #48	; 0x30
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40010400 	.word	0x40010400

08002d68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a37      	ldr	r2, [pc, #220]	; (8002e64 <HAL_TIM_MspPostInit+0xfc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d11f      	bne.n	8002dca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a35      	ldr	r2, [pc, #212]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8002da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	482a      	ldr	r0, [pc, #168]	; (8002e6c <HAL_TIM_MspPostInit+0x104>)
 8002dc4:	f001 fffa 	bl	8004dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002dc8:	e047      	b.n	8002e5a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a28      	ldr	r2, [pc, #160]	; (8002e70 <HAL_TIM_MspPostInit+0x108>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d11e      	bne.n	8002e12 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6313      	str	r3, [r2, #48]	; 0x30
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8002df0:	23c0      	movs	r3, #192	; 0xc0
 8002df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e00:	2302      	movs	r3, #2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	481a      	ldr	r0, [pc, #104]	; (8002e74 <HAL_TIM_MspPostInit+0x10c>)
 8002e0c:	f001 ffd6 	bl	8004dbc <HAL_GPIO_Init>
}
 8002e10:	e023      	b.n	8002e5a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_TIM_MspPostInit+0x110>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d11e      	bne.n	8002e5a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_TIM_MspPostInit+0x100>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8002e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4807      	ldr	r0, [pc, #28]	; (8002e74 <HAL_TIM_MspPostInit+0x10c>)
 8002e56:	f001 ffb1 	bl	8004dbc <HAL_GPIO_Init>
}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40020800 	.word	0x40020800
 8002e78:	40010400 	.word	0x40010400

08002e7c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <MX_USART3_UART_Init+0x50>)
 8002e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <MX_USART3_UART_Init+0x4c>)
 8002eb4:	f006 faa6 	bl	8009404 <HAL_UART_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ebe:	f7ff fb77 	bl	80025b0 <Error_Handler>
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	2000062c 	.word	0x2000062c
 8002ecc:	40004800 	.word	0x40004800

08002ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <HAL_UART_MspInit+0xe0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d15a      	bne.n	8002fa8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <HAL_UART_MspInit+0xe4>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_UART_MspInit+0xe4>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_UART_MspInit+0xe4>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_UART_MspInit+0xe4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_UART_MspInit+0xe4>)
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_UART_MspInit+0xe4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8002f2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f3c:	2307      	movs	r3, #7
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	481c      	ldr	r0, [pc, #112]	; (8002fb8 <HAL_UART_MspInit+0xe8>)
 8002f48:	f001 ff38 	bl	8004dbc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_UART_MspInit+0xf0>)
 8002f50:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f58:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f60:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f8c:	480b      	ldr	r0, [pc, #44]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002f8e:	f001 fabd 	bl	800450c <HAL_DMA_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002f98:	f7ff fb0a 	bl	80025b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa2:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <HAL_UART_MspInit+0xec>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40004800 	.word	0x40004800
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	200005cc 	.word	0x200005cc
 8002fc0:	40026028 	.word	0x40026028

08002fc4 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fd0:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003050 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800301c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800301e:	e003      	b.n	8003028 <LoopCopyDataInit>

08003020 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003022:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003024:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003026:	3104      	adds	r1, #4

08003028 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003028:	480b      	ldr	r0, [pc, #44]	; (8003058 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800302c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800302e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003030:	d3f6      	bcc.n	8003020 <CopyDataInit>
  ldr  r2, =_sbss
 8003032:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003034:	e002      	b.n	800303c <LoopFillZerobss>

08003036 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003036:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003038:	f842 3b04 	str.w	r3, [r2], #4

0800303c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800303e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003040:	d3f9      	bcc.n	8003036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003042:	f7ff fbb9 	bl	80027b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003046:	f006 fea1 	bl	8009d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7fe feed 	bl	8001e28 <main>
  bx  lr    
 800304e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003050:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003054:	0800a0d8 	.word	0x0800a0d8
  ldr  r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800305c:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 8003060:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 8003064:	20000670 	.word	0x20000670

08003068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC_IRQHandler>
	...

0800306c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_Init+0x40>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <HAL_Init+0x40>)
 8003076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_Init+0x40>)
 8003082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <HAL_Init+0x40>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003094:	2003      	movs	r0, #3
 8003096:	f001 f9a1 	bl	80043dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309a:	2000      	movs	r0, #0
 800309c:	f000 f808 	bl	80030b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a0:	f7ff fb18 	bl	80026d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_InitTick+0x54>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_InitTick+0x58>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 f9e8 	bl	80044a4 <HAL_SYSTICK_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d80a      	bhi.n	80030fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e4:	2200      	movs	r2, #0
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ec:	f001 f996 	bl	800441c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <HAL_InitTick+0x5c>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000164 	.word	0x20000164
 8003108:	2000016c 	.word	0x2000016c
 800310c:	20000168 	.word	0x20000168

08003110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x20>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x24>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4413      	add	r3, r2
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_IncTick+0x24>)
 8003122:	6013      	str	r3, [r2, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	2000016c 	.word	0x2000016c
 8003134:	2000066c 	.word	0x2000066c

08003138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return uwTick;
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_GetTick+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	2000066c 	.word	0x2000066c

08003150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff ffee 	bl	8003138 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003168:	d005      	beq.n	8003176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_Delay+0x44>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003176:	bf00      	nop
 8003178:	f7ff ffde 	bl	8003138 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d8f7      	bhi.n	8003178 <HAL_Delay+0x28>
  {
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	2000016c 	.word	0x2000016c

08003198 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e20e      	b.n	80035c8 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4aa0      	ldr	r2, [pc, #640]	; (8003430 <HAL_CAN_Init+0x298>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d009      	beq.n	80031c8 <HAL_CAN_Init+0x30>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a9e      	ldr	r2, [pc, #632]	; (8003434 <HAL_CAN_Init+0x29c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <HAL_CAN_Init+0x30>
 80031be:	f240 111d 	movw	r1, #285	; 0x11d
 80031c2:	489d      	ldr	r0, [pc, #628]	; (8003438 <HAL_CAN_Init+0x2a0>)
 80031c4:	f7ff f9fb 	bl	80025be <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e1b      	ldrb	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_CAN_Init+0x4a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7e1b      	ldrb	r3, [r3, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d004      	beq.n	80031e2 <HAL_CAN_Init+0x4a>
 80031d8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80031dc:	4896      	ldr	r0, [pc, #600]	; (8003438 <HAL_CAN_Init+0x2a0>)
 80031de:	f7ff f9ee 	bl	80025be <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7e5b      	ldrb	r3, [r3, #25]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_CAN_Init+0x64>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7e5b      	ldrb	r3, [r3, #25]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d004      	beq.n	80031fc <HAL_CAN_Init+0x64>
 80031f2:	f240 111f 	movw	r1, #287	; 0x11f
 80031f6:	4890      	ldr	r0, [pc, #576]	; (8003438 <HAL_CAN_Init+0x2a0>)
 80031f8:	f7ff f9e1 	bl	80025be <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e9b      	ldrb	r3, [r3, #26]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_CAN_Init+0x7e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e9b      	ldrb	r3, [r3, #26]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d004      	beq.n	8003216 <HAL_CAN_Init+0x7e>
 800320c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003210:	4889      	ldr	r0, [pc, #548]	; (8003438 <HAL_CAN_Init+0x2a0>)
 8003212:	f7ff f9d4 	bl	80025be <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7edb      	ldrb	r3, [r3, #27]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_CAN_Init+0x98>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7edb      	ldrb	r3, [r3, #27]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d004      	beq.n	8003230 <HAL_CAN_Init+0x98>
 8003226:	f240 1121 	movw	r1, #289	; 0x121
 800322a:	4883      	ldr	r0, [pc, #524]	; (8003438 <HAL_CAN_Init+0x2a0>)
 800322c:	f7ff f9c7 	bl	80025be <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7f1b      	ldrb	r3, [r3, #28]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_CAN_Init+0xb2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7f1b      	ldrb	r3, [r3, #28]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d004      	beq.n	800324a <HAL_CAN_Init+0xb2>
 8003240:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003244:	487c      	ldr	r0, [pc, #496]	; (8003438 <HAL_CAN_Init+0x2a0>)
 8003246:	f7ff f9ba 	bl	80025be <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7f5b      	ldrb	r3, [r3, #29]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_CAN_Init+0xcc>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7f5b      	ldrb	r3, [r3, #29]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d004      	beq.n	8003264 <HAL_CAN_Init+0xcc>
 800325a:	f240 1123 	movw	r1, #291	; 0x123
 800325e:	4876      	ldr	r0, [pc, #472]	; (8003438 <HAL_CAN_Init+0x2a0>)
 8003260:	f7ff f9ad 	bl	80025be <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_CAN_Init+0xfc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d00e      	beq.n	8003294 <HAL_CAN_Init+0xfc>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800327e:	d009      	beq.n	8003294 <HAL_CAN_Init+0xfc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003288:	d004      	beq.n	8003294 <HAL_CAN_Init+0xfc>
 800328a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800328e:	486a      	ldr	r0, [pc, #424]	; (8003438 <HAL_CAN_Init+0x2a0>)
 8003290:	f7ff f995 	bl	80025be <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_CAN_Init+0x12c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d00e      	beq.n	80032c4 <HAL_CAN_Init+0x12c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ae:	d009      	beq.n	80032c4 <HAL_CAN_Init+0x12c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b8:	d004      	beq.n	80032c4 <HAL_CAN_Init+0x12c>
 80032ba:	f240 1125 	movw	r1, #293	; 0x125
 80032be:	485e      	ldr	r0, [pc, #376]	; (8003438 <HAL_CAN_Init+0x2a0>)
 80032c0:	f7ff f97d 	bl	80025be <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d04f      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d04a      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032de:	d045      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032e8:	d040      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032f2:	d03b      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d036      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003306:	d031      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003310:	d02c      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800331a:	d027      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003324:	d022      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800332e:	d01d      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8003338:	d018      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003342:	d013      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800334c:	d00e      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003356:	d009      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8003360:	d004      	beq.n	800336c <HAL_CAN_Init+0x1d4>
 8003362:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003366:	4834      	ldr	r0, [pc, #208]	; (8003438 <HAL_CAN_Init+0x2a0>)
 8003368:	f7ff f929 	bl	80025be <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d027      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337c:	d022      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003386:	d01d      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003390:	d018      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800339a:	d013      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80033a4:	d00e      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033ae:	d009      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80033b8:	d004      	beq.n	80033c4 <HAL_CAN_Init+0x22c>
 80033ba:	f240 1127 	movw	r1, #295	; 0x127
 80033be:	481e      	ldr	r0, [pc, #120]	; (8003438 <HAL_CAN_Init+0x2a0>)
 80033c0:	f7ff f8fd 	bl	80025be <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_CAN_Init+0x23e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d904      	bls.n	80033e0 <HAL_CAN_Init+0x248>
 80033d6:	f44f 7194 	mov.w	r1, #296	; 0x128
 80033da:	4817      	ldr	r0, [pc, #92]	; (8003438 <HAL_CAN_Init+0x2a0>)
 80033dc:	f7ff f8ef 	bl	80025be <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fe fa2d 	bl	800184c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0202 	bic.w	r2, r2, #2
 8003400:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003402:	f7ff fe99 	bl	8003138 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003408:	e018      	b.n	800343c <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800340a:	f7ff fe95 	bl	8003138 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b0a      	cmp	r3, #10
 8003416:	d911      	bls.n	800343c <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2205      	movs	r2, #5
 8003428:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0cb      	b.n	80035c8 <HAL_CAN_Init+0x430>
 8003430:	40006400 	.word	0x40006400
 8003434:	40006800 	.word	0x40006800
 8003438:	08009dfc 	.word	0x08009dfc
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1df      	bne.n	800340a <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800345a:	f7ff fe6d 	bl	8003138 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003460:	e012      	b.n	8003488 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003462:	f7ff fe69 	bl	8003138 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b0a      	cmp	r3, #10
 800346e:	d90b      	bls.n	8003488 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2205      	movs	r2, #5
 8003480:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e09f      	b.n	80035c8 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0e5      	beq.n	8003462 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7e1b      	ldrb	r3, [r3, #24]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d108      	bne.n	80034b0 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e007      	b.n	80034c0 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7e5b      	ldrb	r3, [r3, #25]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d108      	bne.n	80034da <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e007      	b.n	80034ea <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7e9b      	ldrb	r3, [r3, #26]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e007      	b.n	8003514 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0220 	bic.w	r2, r2, #32
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7edb      	ldrb	r3, [r3, #27]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d108      	bne.n	800352e <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0210 	bic.w	r2, r2, #16
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e007      	b.n	800353e <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0210 	orr.w	r2, r2, #16
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7f1b      	ldrb	r3, [r3, #28]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d108      	bne.n	8003558 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0208 	orr.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e007      	b.n	8003568 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0208 	bic.w	r2, r2, #8
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7f5b      	ldrb	r3, [r3, #29]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d108      	bne.n	8003582 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0204 	orr.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e007      	b.n	8003592 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0204 	bic.w	r2, r2, #4
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	ea42 0103 	orr.w	r1, r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	1e5a      	subs	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d003      	beq.n	80035f6 <HAL_CAN_ConfigFilter+0x26>
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 812c 	bne.w	800384e <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d304      	bcc.n	800360a <HAL_CAN_ConfigFilter+0x3a>
 8003600:	f44f 7154 	mov.w	r1, #848	; 0x350
 8003604:	4897      	ldr	r0, [pc, #604]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 8003606:	f7fe ffda 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d304      	bcc.n	800361e <HAL_CAN_ConfigFilter+0x4e>
 8003614:	f240 3151 	movw	r1, #849	; 0x351
 8003618:	4892      	ldr	r0, [pc, #584]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 800361a:	f7fe ffd0 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d304      	bcc.n	8003632 <HAL_CAN_ConfigFilter+0x62>
 8003628:	f240 3152 	movw	r1, #850	; 0x352
 800362c:	488d      	ldr	r0, [pc, #564]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 800362e:	f7fe ffc6 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d304      	bcc.n	8003646 <HAL_CAN_ConfigFilter+0x76>
 800363c:	f240 3153 	movw	r1, #851	; 0x353
 8003640:	4888      	ldr	r0, [pc, #544]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 8003642:	f7fe ffbc 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_CAN_ConfigFilter+0x90>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d004      	beq.n	8003660 <HAL_CAN_ConfigFilter+0x90>
 8003656:	f44f 7155 	mov.w	r1, #852	; 0x354
 800365a:	4882      	ldr	r0, [pc, #520]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 800365c:	f7fe ffaf 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_CAN_ConfigFilter+0xaa>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d004      	beq.n	800367a <HAL_CAN_ConfigFilter+0xaa>
 8003670:	f240 3155 	movw	r1, #853	; 0x355
 8003674:	487b      	ldr	r0, [pc, #492]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 8003676:	f7fe ffa2 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_CAN_ConfigFilter+0xc4>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d004      	beq.n	8003694 <HAL_CAN_ConfigFilter+0xc4>
 800368a:	f240 3156 	movw	r1, #854	; 0x356
 800368e:	4875      	ldr	r0, [pc, #468]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 8003690:	f7fe ff95 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_CAN_ConfigFilter+0xde>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d004      	beq.n	80036ae <HAL_CAN_ConfigFilter+0xde>
 80036a4:	f240 3157 	movw	r1, #855	; 0x357
 80036a8:	486e      	ldr	r0, [pc, #440]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 80036aa:	f7fe ff88 	bl	80025be <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80036ae:	4b6e      	ldr	r3, [pc, #440]	; (8003868 <HAL_CAN_ConfigFilter+0x298>)
 80036b0:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	2b1b      	cmp	r3, #27
 80036b8:	d904      	bls.n	80036c4 <HAL_CAN_ConfigFilter+0xf4>
 80036ba:	f240 3172 	movw	r1, #882	; 0x372
 80036be:	4869      	ldr	r0, [pc, #420]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 80036c0:	f7fe ff7d 	bl	80025be <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b1b      	cmp	r3, #27
 80036ca:	d904      	bls.n	80036d6 <HAL_CAN_ConfigFilter+0x106>
 80036cc:	f240 3173 	movw	r1, #883	; 0x373
 80036d0:	4864      	ldr	r0, [pc, #400]	; (8003864 <HAL_CAN_ConfigFilter+0x294>)
 80036d2:	f7fe ff74 	bl	80025be <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	431a      	orrs	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	43db      	mvns	r3, r3
 8003724:	401a      	ands	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d123      	bne.n	800377c <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003756:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3248      	adds	r2, #72	; 0x48
 800375c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003770:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	3348      	adds	r3, #72	; 0x48
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d122      	bne.n	80037ca <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	431a      	orrs	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3248      	adds	r2, #72	; 0x48
 80037aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	3348      	adds	r3, #72	; 0x48
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037e4:	e007      	b.n	80037f6 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43db      	mvns	r3, r3
 8003808:	401a      	ands	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003810:	e007      	b.n	8003822 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	431a      	orrs	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	431a      	orrs	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003840:	f023 0201 	bic.w	r2, r3, #1
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e006      	b.n	800385c <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	08009dfc 	.word	0x08009dfc
 8003868:	40006400 	.word	0x40006400

0800386c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d12e      	bne.n	80038de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003898:	f7ff fc4e 	bl	8003138 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800389e:	e012      	b.n	80038c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038a0:	f7ff fc4a 	bl	8003138 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b0a      	cmp	r3, #10
 80038ac:	d90b      	bls.n	80038c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2205      	movs	r2, #5
 80038be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e012      	b.n	80038ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e5      	bne.n	80038a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e006      	b.n	80038ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003908:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_CAN_AddTxMessage+0x38>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d004      	beq.n	800392c <HAL_CAN_AddTxMessage+0x38>
 8003922:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003926:	4884      	ldr	r0, [pc, #528]	; (8003b38 <HAL_CAN_AddTxMessage+0x244>)
 8003928:	f7fe fe49 	bl	80025be <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_CAN_AddTxMessage+0x52>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d004      	beq.n	8003946 <HAL_CAN_AddTxMessage+0x52>
 800393c:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003940:	487d      	ldr	r0, [pc, #500]	; (8003b38 <HAL_CAN_AddTxMessage+0x244>)
 8003942:	f7fe fe3c 	bl	80025be <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b08      	cmp	r3, #8
 800394c:	d904      	bls.n	8003958 <HAL_CAN_AddTxMessage+0x64>
 800394e:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003952:	4879      	ldr	r0, [pc, #484]	; (8003b38 <HAL_CAN_AddTxMessage+0x244>)
 8003954:	f7fe fe33 	bl	80025be <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003968:	d30f      	bcc.n	800398a <HAL_CAN_AddTxMessage+0x96>
 800396a:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800396e:	4872      	ldr	r0, [pc, #456]	; (8003b38 <HAL_CAN_AddTxMessage+0x244>)
 8003970:	f7fe fe25 	bl	80025be <assert_failed>
 8003974:	e009      	b.n	800398a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397e:	d304      	bcc.n	800398a <HAL_CAN_AddTxMessage+0x96>
 8003980:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8003984:	486c      	ldr	r0, [pc, #432]	; (8003b38 <HAL_CAN_AddTxMessage+0x244>)
 8003986:	f7fe fe1a 	bl	80025be <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	7d1b      	ldrb	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_CAN_AddTxMessage+0xb0>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	7d1b      	ldrb	r3, [r3, #20]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d004      	beq.n	80039a4 <HAL_CAN_AddTxMessage+0xb0>
 800399a:	f240 41f4 	movw	r1, #1268	; 0x4f4
 800399e:	4866      	ldr	r0, [pc, #408]	; (8003b38 <HAL_CAN_AddTxMessage+0x244>)
 80039a0:	f7fe fe0d 	bl	80025be <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80039a4:	7ffb      	ldrb	r3, [r7, #31]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d003      	beq.n	80039b2 <HAL_CAN_AddTxMessage+0xbe>
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	f040 80b8 	bne.w	8003b22 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80a0 	beq.w	8003b12 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d907      	bls.n	80039f2 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e09e      	b.n	8003b30 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	6809      	ldr	r1, [r1, #0]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3318      	adds	r3, #24
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	440b      	add	r3, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e00f      	b.n	8003a40 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a2a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a34:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3318      	adds	r3, #24
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	440b      	add	r3, r1
 8003a3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3318      	adds	r3, #24
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	440b      	add	r3, r1
 8003a50:	3304      	adds	r3, #4
 8003a52:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	7d1b      	ldrb	r3, [r3, #20]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d111      	bne.n	8003a80 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3318      	adds	r3, #24
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6811      	ldr	r1, [r2, #0]
 8003a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3318      	adds	r3, #24
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3307      	adds	r3, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	061a      	lsls	r2, r3, #24
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3306      	adds	r3, #6
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3305      	adds	r3, #5
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	3204      	adds	r2, #4
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	6811      	ldr	r1, [r2, #0]
 8003aa8:	ea43 0200 	orr.w	r2, r3, r0
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003ab6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3303      	adds	r3, #3
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	061a      	lsls	r2, r3, #24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3301      	adds	r3, #1
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	4610      	mov	r0, r2
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	ea43 0200 	orr.w	r2, r3, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003aec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3318      	adds	r3, #24
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	4413      	add	r3, r2
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	6811      	ldr	r1, [r2, #0]
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3318      	adds	r3, #24
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	440b      	add	r3, r1
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e00e      	b.n	8003b30 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e006      	b.n	8003b30 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	08009dfc 	.word	0x08009dfc

08003b3c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b50:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_CAN_GetRxMessage+0x2c>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d004      	beq.n	8003b68 <HAL_CAN_GetRxMessage+0x2c>
 8003b5e:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8003b62:	4884      	ldr	r0, [pc, #528]	; (8003d74 <HAL_CAN_GetRxMessage+0x238>)
 8003b64:	f7fe fd2b 	bl	80025be <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d003      	beq.n	8003b76 <HAL_CAN_GetRxMessage+0x3a>
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	f040 80f3 	bne.w	8003d5c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10e      	bne.n	8003b9a <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0e7      	b.n	8003d6a <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0d8      	b.n	8003d6a <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	331b      	adds	r3, #27
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4413      	add	r3, r2
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0204 	and.w	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	331b      	adds	r3, #27
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0d5b      	lsrs	r3, r3, #21
 8003be6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e00b      	b.n	8003c08 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	331b      	adds	r3, #27
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	4413      	add	r3, r2
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	08db      	lsrs	r3, r3, #3
 8003c00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	331b      	adds	r3, #27
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0202 	and.w	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	331b      	adds	r3, #27
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 020f 	and.w	r2, r3, #15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	331b      	adds	r3, #27
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	331b      	adds	r3, #27
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0a1a      	lsrs	r2, r3, #8
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	0c1a      	lsrs	r2, r3, #16
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	3302      	adds	r3, #2
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	0e1a      	lsrs	r2, r3, #24
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	3303      	adds	r3, #3
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	0a1a      	lsrs	r2, r3, #8
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	3305      	adds	r3, #5
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0c1a      	lsrs	r2, r3, #16
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	3306      	adds	r3, #6
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	0e1a      	lsrs	r2, r3, #24
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	3307      	adds	r3, #7
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	e007      	b.n	8003d58 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0220 	orr.w	r2, r2, #32
 8003d56:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e006      	b.n	8003d6a <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	08009dfc 	.word	0x08009dfc

08003d78 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d88:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_CAN_ActivateNotification+0x5c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d904      	bls.n	8003d9c <HAL_CAN_ActivateNotification+0x24>
 8003d92:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8003d96:	4810      	ldr	r0, [pc, #64]	; (8003dd8 <HAL_CAN_ActivateNotification+0x60>)
 8003d98:	f7fe fc11 	bl	80025be <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d002      	beq.n	8003da8 <HAL_CAN_ActivateNotification+0x30>
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d109      	bne.n	8003dbc <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6959      	ldr	r1, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e006      	b.n	8003dca <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	00038f7f 	.word	0x00038f7f
 8003dd8:	08009dfc 	.word	0x08009dfc

08003ddc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d07c      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d023      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2201      	movs	r2, #1
 8003e32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f983 	bl	800414a <HAL_CAN_TxMailbox0CompleteCallback>
 8003e44:	e016      	b.n	8003e74 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
 8003e58:	e00c      	b.n	8003e74 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e002      	b.n	8003e74 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f989 	bl	8004186 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d024      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f963 	bl	800415e <HAL_CAN_TxMailbox1CompleteCallback>
 8003e98:	e016      	b.n	8003ec8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e00c      	b.n	8003ec8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e002      	b.n	8003ec8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f969 	bl	800419a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d024      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f943 	bl	8004172 <HAL_CAN_TxMailbox2CompleteCallback>
 8003eec:	e016      	b.n	8003f1c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	e00c      	b.n	8003f1c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	e002      	b.n	8003f1c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f949 	bl	80041ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f930 	bl	80041c2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe fa58 	bl	8002430 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00c      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d006      	beq.n	8003fc6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f912 	bl	80041ea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d009      	beq.n	8003fe4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8f9 	bl	80041d6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d006      	beq.n	8004006 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8fc 	bl	80041fe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2208      	movs	r2, #8
 8004020:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8f5 	bl	8004212 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d07b      	beq.n	800412a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d072      	beq.n	8004122 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004096:	2b00      	cmp	r3, #0
 8004098:	d043      	beq.n	8004122 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03e      	beq.n	8004122 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040aa:	2b60      	cmp	r3, #96	; 0x60
 80040ac:	d02b      	beq.n	8004106 <HAL_CAN_IRQHandler+0x32a>
 80040ae:	2b60      	cmp	r3, #96	; 0x60
 80040b0:	d82e      	bhi.n	8004110 <HAL_CAN_IRQHandler+0x334>
 80040b2:	2b50      	cmp	r3, #80	; 0x50
 80040b4:	d022      	beq.n	80040fc <HAL_CAN_IRQHandler+0x320>
 80040b6:	2b50      	cmp	r3, #80	; 0x50
 80040b8:	d82a      	bhi.n	8004110 <HAL_CAN_IRQHandler+0x334>
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d019      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x316>
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d826      	bhi.n	8004110 <HAL_CAN_IRQHandler+0x334>
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d010      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x30c>
 80040c6:	2b30      	cmp	r3, #48	; 0x30
 80040c8:	d822      	bhi.n	8004110 <HAL_CAN_IRQHandler+0x334>
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d002      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x2f8>
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d005      	beq.n	80040de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040d2:	e01d      	b.n	8004110 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040dc:	e019      	b.n	8004112 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f043 0310 	orr.w	r3, r3, #16
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040e6:	e014      	b.n	8004112 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040f0:	e00f      	b.n	8004112 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040fa:	e00a      	b.n	8004112 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004104:	e005      	b.n	8004112 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800410e:	e000      	b.n	8004112 <HAL_CAN_IRQHandler+0x336>
            break;
 8004110:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004120:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2204      	movs	r2, #4
 8004128:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f872 	bl	8004226 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004142:	bf00      	nop
 8004144:	3728      	adds	r7, #40	; 0x28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <__NVIC_SetPriorityGrouping+0x44>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800426e:	4a04      	ldr	r2, [pc, #16]	; (8004280 <__NVIC_SetPriorityGrouping+0x44>)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	60d3      	str	r3, [r2, #12]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <__NVIC_GetPriorityGrouping+0x18>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0307 	and.w	r3, r3, #7
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	db0b      	blt.n	80042ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	4907      	ldr	r1, [pc, #28]	; (80042d8 <__NVIC_EnableIRQ+0x38>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2001      	movs	r0, #1
 80042c2:	fa00 f202 	lsl.w	r2, r0, r2
 80042c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100

080042dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	db0a      	blt.n	8004306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	490c      	ldr	r1, [pc, #48]	; (8004328 <__NVIC_SetPriority+0x4c>)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	440b      	add	r3, r1
 8004300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004304:	e00a      	b.n	800431c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4908      	ldr	r1, [pc, #32]	; (800432c <__NVIC_SetPriority+0x50>)
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	3b04      	subs	r3, #4
 8004314:	0112      	lsls	r2, r2, #4
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	440b      	add	r3, r1
 800431a:	761a      	strb	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f1c3 0307 	rsb	r3, r3, #7
 800434a:	2b04      	cmp	r3, #4
 800434c:	bf28      	it	cs
 800434e:	2304      	movcs	r3, #4
 8004350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3304      	adds	r3, #4
 8004356:	2b06      	cmp	r3, #6
 8004358:	d902      	bls.n	8004360 <NVIC_EncodePriority+0x30>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3b03      	subs	r3, #3
 800435e:	e000      	b.n	8004362 <NVIC_EncodePriority+0x32>
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	401a      	ands	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	43d9      	mvns	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	4313      	orrs	r3, r2
         );
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a8:	d301      	bcc.n	80043ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043aa:	2301      	movs	r3, #1
 80043ac:	e00f      	b.n	80043ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <SysTick_Config+0x40>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043b6:	210f      	movs	r1, #15
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043bc:	f7ff ff8e 	bl	80042dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <SysTick_Config+0x40>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <SysTick_Config+0x40>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	e000e010 	.word	0xe000e010

080043dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b07      	cmp	r3, #7
 80043e8:	d00f      	beq.n	800440a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d00c      	beq.n	800440a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d009      	beq.n	800440a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d006      	beq.n	800440a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d003      	beq.n	800440a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004402:	2192      	movs	r1, #146	; 0x92
 8004404:	4804      	ldr	r0, [pc, #16]	; (8004418 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004406:	f7fe f8da 	bl	80025be <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff16 	bl	800423c <__NVIC_SetPriorityGrouping>
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	08009e34 	.word	0x08009e34

0800441c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b0f      	cmp	r3, #15
 8004432:	d903      	bls.n	800443c <HAL_NVIC_SetPriority+0x20>
 8004434:	21aa      	movs	r1, #170	; 0xaa
 8004436:	480e      	ldr	r0, [pc, #56]	; (8004470 <HAL_NVIC_SetPriority+0x54>)
 8004438:	f7fe f8c1 	bl	80025be <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d903      	bls.n	800444a <HAL_NVIC_SetPriority+0x2e>
 8004442:	21ab      	movs	r1, #171	; 0xab
 8004444:	480a      	ldr	r0, [pc, #40]	; (8004470 <HAL_NVIC_SetPriority+0x54>)
 8004446:	f7fe f8ba 	bl	80025be <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800444a:	f7ff ff1b 	bl	8004284 <__NVIC_GetPriorityGrouping>
 800444e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f7ff ff6b 	bl	8004330 <NVIC_EncodePriority>
 800445a:	4602      	mov	r2, r0
 800445c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff3a 	bl	80042dc <__NVIC_SetPriority>
}
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08009e34 	.word	0x08009e34

08004474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da03      	bge.n	800448e <HAL_NVIC_EnableIRQ+0x1a>
 8004486:	21be      	movs	r1, #190	; 0xbe
 8004488:	4805      	ldr	r0, [pc, #20]	; (80044a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800448a:	f7fe f898 	bl	80025be <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff04 	bl	80042a0 <__NVIC_EnableIRQ>
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08009e34 	.word	0x08009e34

080044a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff73 	bl	8004398 <SysTick_Config>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d007      	beq.n	80044da <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80044d0:	f240 11c9 	movw	r1, #457	; 0x1c9
 80044d4:	480b      	ldr	r0, [pc, #44]	; (8004504 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 80044d6:	f7fe f872 	bl	80025be <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d106      	bne.n	80044ee <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80044ec:	e005      	b.n	80044fa <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	08009e34 	.word	0x08009e34
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004518:	f7fe fe0e 	bl	8003138 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e204      	b.n	8004932 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a97      	ldr	r2, [pc, #604]	; (800478c <HAL_DMA_Init+0x280>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d04e      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a96      	ldr	r2, [pc, #600]	; (8004790 <HAL_DMA_Init+0x284>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d049      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a94      	ldr	r2, [pc, #592]	; (8004794 <HAL_DMA_Init+0x288>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d044      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a93      	ldr	r2, [pc, #588]	; (8004798 <HAL_DMA_Init+0x28c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d03f      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a91      	ldr	r2, [pc, #580]	; (800479c <HAL_DMA_Init+0x290>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d03a      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a90      	ldr	r2, [pc, #576]	; (80047a0 <HAL_DMA_Init+0x294>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d035      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a8e      	ldr	r2, [pc, #568]	; (80047a4 <HAL_DMA_Init+0x298>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d030      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a8d      	ldr	r2, [pc, #564]	; (80047a8 <HAL_DMA_Init+0x29c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d02b      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8b      	ldr	r2, [pc, #556]	; (80047ac <HAL_DMA_Init+0x2a0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d026      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a8a      	ldr	r2, [pc, #552]	; (80047b0 <HAL_DMA_Init+0x2a4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d021      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a88      	ldr	r2, [pc, #544]	; (80047b4 <HAL_DMA_Init+0x2a8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01c      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a87      	ldr	r2, [pc, #540]	; (80047b8 <HAL_DMA_Init+0x2ac>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d017      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a85      	ldr	r2, [pc, #532]	; (80047bc <HAL_DMA_Init+0x2b0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d012      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a84      	ldr	r2, [pc, #528]	; (80047c0 <HAL_DMA_Init+0x2b4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00d      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a82      	ldr	r2, [pc, #520]	; (80047c4 <HAL_DMA_Init+0x2b8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d008      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a81      	ldr	r2, [pc, #516]	; (80047c8 <HAL_DMA_Init+0x2bc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <HAL_DMA_Init+0xc4>
 80045c8:	21b8      	movs	r1, #184	; 0xb8
 80045ca:	4880      	ldr	r0, [pc, #512]	; (80047cc <HAL_DMA_Init+0x2c0>)
 80045cc:	f7fd fff7 	bl	80025be <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d026      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045e0:	d021      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ea:	d01c      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80045f4:	d017      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fe:	d012      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004608:	d00d      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004612:	d008      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800461c:	d003      	beq.n	8004626 <HAL_DMA_Init+0x11a>
 800461e:	21b9      	movs	r1, #185	; 0xb9
 8004620:	486a      	ldr	r0, [pc, #424]	; (80047cc <HAL_DMA_Init+0x2c0>)
 8004622:	f7fd ffcc 	bl	80025be <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_DMA_Init+0x13a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d007      	beq.n	8004646 <HAL_DMA_Init+0x13a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d003      	beq.n	8004646 <HAL_DMA_Init+0x13a>
 800463e:	21ba      	movs	r1, #186	; 0xba
 8004640:	4862      	ldr	r0, [pc, #392]	; (80047cc <HAL_DMA_Init+0x2c0>)
 8004642:	f7fd ffbc 	bl	80025be <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464e:	d007      	beq.n	8004660 <HAL_DMA_Init+0x154>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_DMA_Init+0x154>
 8004658:	21bb      	movs	r1, #187	; 0xbb
 800465a:	485c      	ldr	r0, [pc, #368]	; (80047cc <HAL_DMA_Init+0x2c0>)
 800465c:	f7fd ffaf 	bl	80025be <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d007      	beq.n	800467a <HAL_DMA_Init+0x16e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_DMA_Init+0x16e>
 8004672:	21bc      	movs	r1, #188	; 0xbc
 8004674:	4855      	ldr	r0, [pc, #340]	; (80047cc <HAL_DMA_Init+0x2c0>)
 8004676:	f7fd ffa2 	bl	80025be <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <HAL_DMA_Init+0x192>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468a:	d008      	beq.n	800469e <HAL_DMA_Init+0x192>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d003      	beq.n	800469e <HAL_DMA_Init+0x192>
 8004696:	21bd      	movs	r1, #189	; 0xbd
 8004698:	484c      	ldr	r0, [pc, #304]	; (80047cc <HAL_DMA_Init+0x2c0>)
 800469a:	f7fd ff90 	bl	80025be <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_DMA_Init+0x1b6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d008      	beq.n	80046c2 <HAL_DMA_Init+0x1b6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b8:	d003      	beq.n	80046c2 <HAL_DMA_Init+0x1b6>
 80046ba:	21be      	movs	r1, #190	; 0xbe
 80046bc:	4843      	ldr	r0, [pc, #268]	; (80047cc <HAL_DMA_Init+0x2c0>)
 80046be:	f7fd ff7e 	bl	80025be <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_DMA_Init+0x1d8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d2:	d007      	beq.n	80046e4 <HAL_DMA_Init+0x1d8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d003      	beq.n	80046e4 <HAL_DMA_Init+0x1d8>
 80046dc:	21bf      	movs	r1, #191	; 0xbf
 80046de:	483b      	ldr	r0, [pc, #236]	; (80047cc <HAL_DMA_Init+0x2c0>)
 80046e0:	f7fd ff6d 	bl	80025be <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <HAL_DMA_Init+0x206>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f4:	d00d      	beq.n	8004712 <HAL_DMA_Init+0x206>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046fe:	d008      	beq.n	8004712 <HAL_DMA_Init+0x206>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004708:	d003      	beq.n	8004712 <HAL_DMA_Init+0x206>
 800470a:	21c0      	movs	r1, #192	; 0xc0
 800470c:	482f      	ldr	r0, [pc, #188]	; (80047cc <HAL_DMA_Init+0x2c0>)
 800470e:	f7fd ff56 	bl	80025be <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_DMA_Init+0x21e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_DMA_Init+0x21e>
 8004722:	21c1      	movs	r1, #193	; 0xc1
 8004724:	4829      	ldr	r0, [pc, #164]	; (80047cc <HAL_DMA_Init+0x2c0>)
 8004726:	f7fd ff4a 	bl	80025be <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d065      	beq.n	80047fe <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <HAL_DMA_Init+0x24e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	2b01      	cmp	r3, #1
 8004740:	d00b      	beq.n	800475a <HAL_DMA_Init+0x24e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	2b02      	cmp	r3, #2
 8004748:	d007      	beq.n	800475a <HAL_DMA_Init+0x24e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	2b03      	cmp	r3, #3
 8004750:	d003      	beq.n	800475a <HAL_DMA_Init+0x24e>
 8004752:	21c6      	movs	r1, #198	; 0xc6
 8004754:	481d      	ldr	r0, [pc, #116]	; (80047cc <HAL_DMA_Init+0x2c0>)
 8004756:	f7fd ff32 	bl	80025be <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d036      	beq.n	80047d0 <HAL_DMA_Init+0x2c4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476a:	d031      	beq.n	80047d0 <HAL_DMA_Init+0x2c4>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d02c      	beq.n	80047d0 <HAL_DMA_Init+0x2c4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800477e:	d027      	beq.n	80047d0 <HAL_DMA_Init+0x2c4>
 8004780:	21c7      	movs	r1, #199	; 0xc7
 8004782:	4812      	ldr	r0, [pc, #72]	; (80047cc <HAL_DMA_Init+0x2c0>)
 8004784:	f7fd ff1b 	bl	80025be <assert_failed>
 8004788:	e022      	b.n	80047d0 <HAL_DMA_Init+0x2c4>
 800478a:	bf00      	nop
 800478c:	40026010 	.word	0x40026010
 8004790:	40026028 	.word	0x40026028
 8004794:	40026040 	.word	0x40026040
 8004798:	40026058 	.word	0x40026058
 800479c:	40026070 	.word	0x40026070
 80047a0:	40026088 	.word	0x40026088
 80047a4:	400260a0 	.word	0x400260a0
 80047a8:	400260b8 	.word	0x400260b8
 80047ac:	40026410 	.word	0x40026410
 80047b0:	40026428 	.word	0x40026428
 80047b4:	40026440 	.word	0x40026440
 80047b8:	40026458 	.word	0x40026458
 80047bc:	40026470 	.word	0x40026470
 80047c0:	40026488 	.word	0x40026488
 80047c4:	400264a0 	.word	0x400264a0
 80047c8:	400264b8 	.word	0x400264b8
 80047cc:	08009e70 	.word	0x08009e70
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <HAL_DMA_Init+0x2f2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047e0:	d00d      	beq.n	80047fe <HAL_DMA_Init+0x2f2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ea:	d008      	beq.n	80047fe <HAL_DMA_Init+0x2f2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047f4:	d003      	beq.n	80047fe <HAL_DMA_Init+0x2f2>
 80047f6:	21c8      	movs	r1, #200	; 0xc8
 80047f8:	4850      	ldr	r0, [pc, #320]	; (800493c <HAL_DMA_Init+0x430>)
 80047fa:	f7fd fee0 	bl	80025be <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800481e:	e00f      	b.n	8004840 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004820:	f7fe fc8a 	bl	8003138 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b05      	cmp	r3, #5
 800482c:	d908      	bls.n	8004840 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2203      	movs	r2, #3
 8004838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e078      	b.n	8004932 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e8      	bne.n	8004820 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4b39      	ldr	r3, [pc, #228]	; (8004940 <HAL_DMA_Init+0x434>)
 800485a:	4013      	ands	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800486c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b04      	cmp	r3, #4
 8004898:	d107      	bne.n	80048aa <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	4313      	orrs	r3, r2
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 0307 	bic.w	r3, r3, #7
 80048c0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d117      	bne.n	8004904 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00e      	beq.n	8004904 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9ec 	bl	8004cc4 <DMA_CheckFifoParam>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2240      	movs	r2, #64	; 0x40
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004900:	2301      	movs	r3, #1
 8004902:	e016      	b.n	8004932 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f9a3 	bl	8004c58 <DMA_CalcBaseAndBitshift>
 8004912:	4603      	mov	r3, r0
 8004914:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	223f      	movs	r2, #63	; 0x3f
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	08009e70 	.word	0x08009e70
 8004940:	f010803f 	.word	0xf010803f

08004944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004950:	4b92      	ldr	r3, [pc, #584]	; (8004b9c <HAL_DMA_IRQHandler+0x258>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a92      	ldr	r2, [pc, #584]	; (8004ba0 <HAL_DMA_IRQHandler+0x25c>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	2208      	movs	r2, #8
 8004970:	409a      	lsls	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01a      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0204 	bic.w	r2, r2, #4
 8004996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499c:	2208      	movs	r2, #8
 800499e:	409a      	lsls	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f043 0202 	orr.w	r2, r3, #2
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	2204      	movs	r2, #4
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	2204      	movs	r2, #4
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f043 0204 	orr.w	r2, r3, #4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	2210      	movs	r2, #16
 8004a22:	409a      	lsls	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d043      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03c      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	2210      	movs	r2, #16
 8004a40:	409a      	lsls	r2, r3
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d018      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
 8004a72:	e01f      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
 8004a84:	e016      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0208 	bic.w	r2, r2, #8
 8004aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	2220      	movs	r2, #32
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 808e 	beq.w	8004be2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8086 	beq.w	8004be2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	2220      	movs	r2, #32
 8004adc:	409a      	lsls	r2, r3
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d136      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0216 	bic.w	r2, r2, #22
 8004afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <HAL_DMA_IRQHandler+0x1da>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0208 	bic.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	223f      	movs	r2, #63	; 0x3f
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d07d      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
        }
        return;
 8004b5a:	e078      	b.n	8004c4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01c      	beq.n	8004ba4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d108      	bne.n	8004b8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d030      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
 8004b88:	e02b      	b.n	8004be2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d027      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
 8004b9a:	e022      	b.n	8004be2 <HAL_DMA_IRQHandler+0x29e>
 8004b9c:	20000164 	.word	0x20000164
 8004ba0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0210 	bic.w	r2, r2, #16
 8004bc0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d032      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d022      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60bb      	str	r3, [r7, #8]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d307      	bcc.n	8004c2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f2      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x2ca>
 8004c28:	e000      	b.n	8004c2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c2a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
 8004c4c:	e000      	b.n	8004c50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c4e:	bf00      	nop
    }
  }
}
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop

08004c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	3b10      	subs	r3, #16
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <DMA_CalcBaseAndBitshift+0x64>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <DMA_CalcBaseAndBitshift+0x68>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d909      	bls.n	8004c9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	659a      	str	r2, [r3, #88]	; 0x58
 8004c98:	e007      	b.n	8004caa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	aaaaaaab 	.word	0xaaaaaaab
 8004cc0:	0800a0c0 	.word	0x0800a0c0

08004cc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11f      	bne.n	8004d1e <DMA_CheckFifoParam+0x5a>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d856      	bhi.n	8004d92 <DMA_CheckFifoParam+0xce>
 8004ce4:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <DMA_CheckFifoParam+0x28>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004cfd 	.word	0x08004cfd
 8004cf0:	08004d0f 	.word	0x08004d0f
 8004cf4:	08004cfd 	.word	0x08004cfd
 8004cf8:	08004d93 	.word	0x08004d93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d046      	beq.n	8004d96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0c:	e043      	b.n	8004d96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d16:	d140      	bne.n	8004d9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d1c:	e03d      	b.n	8004d9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d26:	d121      	bne.n	8004d6c <DMA_CheckFifoParam+0xa8>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d837      	bhi.n	8004d9e <DMA_CheckFifoParam+0xda>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <DMA_CheckFifoParam+0x70>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d45 	.word	0x08004d45
 8004d38:	08004d4b 	.word	0x08004d4b
 8004d3c:	08004d45 	.word	0x08004d45
 8004d40:	08004d5d 	.word	0x08004d5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      break;
 8004d48:	e030      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d025      	beq.n	8004da2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5a:	e022      	b.n	8004da2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d64:	d11f      	bne.n	8004da6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d6a:	e01c      	b.n	8004da6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d903      	bls.n	8004d7a <DMA_CheckFifoParam+0xb6>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d003      	beq.n	8004d80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d78:	e018      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7e:	e015      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d90:	e00b      	b.n	8004daa <DMA_CheckFifoParam+0xe6>
      break;
 8004d92:	bf00      	nop
 8004d94:	e00a      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      break;
 8004d96:	bf00      	nop
 8004d98:	e008      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e006      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e004      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      break;
 8004da2:	bf00      	nop
 8004da4:	e002      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      break;   
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
    }
  } 
  
  return status; 
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop

08004dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a45      	ldr	r2, [pc, #276]	; (8004eec <HAL_GPIO_Init+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02b      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a44      	ldr	r2, [pc, #272]	; (8004ef0 <HAL_GPIO_Init+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d027      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a43      	ldr	r2, [pc, #268]	; (8004ef4 <HAL_GPIO_Init+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d023      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a42      	ldr	r2, [pc, #264]	; (8004ef8 <HAL_GPIO_Init+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01f      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a41      	ldr	r2, [pc, #260]	; (8004efc <HAL_GPIO_Init+0x140>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01b      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a40      	ldr	r2, [pc, #256]	; (8004f00 <HAL_GPIO_Init+0x144>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d017      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <HAL_GPIO_Init+0x148>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a3e      	ldr	r2, [pc, #248]	; (8004f08 <HAL_GPIO_Init+0x14c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a3d      	ldr	r2, [pc, #244]	; (8004f0c <HAL_GPIO_Init+0x150>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a3c      	ldr	r2, [pc, #240]	; (8004f10 <HAL_GPIO_Init+0x154>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a3b      	ldr	r2, [pc, #236]	; (8004f14 <HAL_GPIO_Init+0x158>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x76>
 8004e2a:	21b3      	movs	r1, #179	; 0xb3
 8004e2c:	483a      	ldr	r0, [pc, #232]	; (8004f18 <HAL_GPIO_Init+0x15c>)
 8004e2e:	f7fd fbc6 	bl	80025be <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_GPIO_Init+0x8c>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	041b      	lsls	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x94>
 8004e48:	21b4      	movs	r1, #180	; 0xb4
 8004e4a:	4833      	ldr	r0, [pc, #204]	; (8004f18 <HAL_GPIO_Init+0x15c>)
 8004e4c:	f7fd fbb7 	bl	80025be <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d035      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d031      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b11      	cmp	r3, #17
 8004e66:	d02d      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d029      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b12      	cmp	r3, #18
 8004e76:	d025      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_GPIO_Init+0x160>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d020      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4a26      	ldr	r2, [pc, #152]	; (8004f20 <HAL_GPIO_Init+0x164>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01b      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_GPIO_Init+0x168>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d016      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <HAL_GPIO_Init+0x16c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d011      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_GPIO_Init+0x170>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_GPIO_Init+0x174>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x108>
 8004ebc:	21b5      	movs	r1, #181	; 0xb5
 8004ebe:	4816      	ldr	r0, [pc, #88]	; (8004f18 <HAL_GPIO_Init+0x15c>)
 8004ec0:	f7fd fb7d 	bl	80025be <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_GPIO_Init+0x128>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d007      	beq.n	8004ee4 <HAL_GPIO_Init+0x128>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x128>
 8004edc:	21b6      	movs	r1, #182	; 0xb6
 8004ede:	480e      	ldr	r0, [pc, #56]	; (8004f18 <HAL_GPIO_Init+0x15c>)
 8004ee0:	f7fd fb6d 	bl	80025be <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e270      	b.n	80053cc <HAL_GPIO_Init+0x610>
 8004eea:	bf00      	nop
 8004eec:	40020000 	.word	0x40020000
 8004ef0:	40020400 	.word	0x40020400
 8004ef4:	40020800 	.word	0x40020800
 8004ef8:	40020c00 	.word	0x40020c00
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40021400 	.word	0x40021400
 8004f04:	40021800 	.word	0x40021800
 8004f08:	40021c00 	.word	0x40021c00
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40022400 	.word	0x40022400
 8004f14:	40022800 	.word	0x40022800
 8004f18:	08009ea8 	.word	0x08009ea8
 8004f1c:	10110000 	.word	0x10110000
 8004f20:	10210000 	.word	0x10210000
 8004f24:	10310000 	.word	0x10310000
 8004f28:	10120000 	.word	0x10120000
 8004f2c:	10220000 	.word	0x10220000
 8004f30:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f34:	2201      	movs	r2, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	f040 823a 	bne.w	80053c6 <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d00b      	beq.n	8004f72 <HAL_GPIO_Init+0x1b6>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d007      	beq.n	8004f72 <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f66:	2b11      	cmp	r3, #17
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b12      	cmp	r3, #18
 8004f70:	d144      	bne.n	8004ffc <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00f      	beq.n	8004f9a <HAL_GPIO_Init+0x1de>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d00b      	beq.n	8004f9a <HAL_GPIO_Init+0x1de>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d007      	beq.n	8004f9a <HAL_GPIO_Init+0x1de>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x1de>
 8004f92:	21c8      	movs	r1, #200	; 0xc8
 8004f94:	489a      	ldr	r0, [pc, #616]	; (8005200 <HAL_GPIO_Init+0x444>)
 8004f96:	f7fd fb12 	bl	80025be <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 0201 	and.w	r2, r3, #1
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2203      	movs	r2, #3
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d004      	beq.n	800503e <HAL_GPIO_Init+0x282>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b12      	cmp	r3, #18
 800503a:	f040 80e3 	bne.w	8005204 <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 80b6 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b09      	cmp	r3, #9
 800504e:	f000 80b1 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80ac 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80a7 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80a2 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 809d 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b01      	cmp	r3, #1
 8005080:	f000 8098 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b01      	cmp	r3, #1
 800508a:	f000 8093 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b02      	cmp	r3, #2
 8005094:	f000 808e 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b02      	cmp	r3, #2
 800509e:	f000 8089 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	f000 8084 	beq.w	80051b4 <HAL_GPIO_Init+0x3f8>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d07f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d07b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d077      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d073      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d06f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d06b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	d067      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b06      	cmp	r3, #6
 80050ea:	d063      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	d05f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b07      	cmp	r3, #7
 80050fa:	d05b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b07      	cmp	r3, #7
 8005102:	d057      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b07      	cmp	r3, #7
 800510a:	d053      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d04f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d04b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d047      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b09      	cmp	r3, #9
 800512a:	d043      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b09      	cmp	r3, #9
 8005132:	d03f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b0a      	cmp	r3, #10
 800513a:	d03b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b0a      	cmp	r3, #10
 8005142:	d037      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b0b      	cmp	r3, #11
 800514a:	d033      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b0c      	cmp	r3, #12
 8005152:	d02f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b0c      	cmp	r3, #12
 800515a:	d02b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b0d      	cmp	r3, #13
 8005162:	d027      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d023      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d01f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b05      	cmp	r3, #5
 800517a:	d01b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d017      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d013      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d00f      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d00b      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b06      	cmp	r3, #6
 80051a2:	d007      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b0e      	cmp	r3, #14
 80051aa:	d003      	beq.n	80051b4 <HAL_GPIO_Init+0x3f8>
 80051ac:	21e0      	movs	r1, #224	; 0xe0
 80051ae:	4814      	ldr	r0, [pc, #80]	; (8005200 <HAL_GPIO_Init+0x444>)
 80051b0:	f7fd fa05 	bl	80025be <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	08da      	lsrs	r2, r3, #3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3208      	adds	r2, #8
 80051bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	220f      	movs	r2, #15
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	08da      	lsrs	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3208      	adds	r2, #8
 80051f6:	69b9      	ldr	r1, [r7, #24]
 80051f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80051fc:	e002      	b.n	8005204 <HAL_GPIO_Init+0x448>
 80051fe:	bf00      	nop
 8005200:	08009ea8 	.word	0x08009ea8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	2203      	movs	r2, #3
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 0203 	and.w	r2, r3, #3
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4313      	orrs	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80c0 	beq.w	80053c6 <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <HAL_GPIO_Init+0x624>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	4a64      	ldr	r2, [pc, #400]	; (80053e0 <HAL_GPIO_Init+0x624>)
 8005250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005254:	6453      	str	r3, [r2, #68]	; 0x44
 8005256:	4b62      	ldr	r3, [pc, #392]	; (80053e0 <HAL_GPIO_Init+0x624>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005262:	4a60      	ldr	r2, [pc, #384]	; (80053e4 <HAL_GPIO_Init+0x628>)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	089b      	lsrs	r3, r3, #2
 8005268:	3302      	adds	r3, #2
 800526a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	220f      	movs	r2, #15
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a57      	ldr	r2, [pc, #348]	; (80053e8 <HAL_GPIO_Init+0x62c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d037      	beq.n	80052fe <HAL_GPIO_Init+0x542>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a56      	ldr	r2, [pc, #344]	; (80053ec <HAL_GPIO_Init+0x630>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_GPIO_Init+0x53e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a55      	ldr	r2, [pc, #340]	; (80053f0 <HAL_GPIO_Init+0x634>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02b      	beq.n	80052f6 <HAL_GPIO_Init+0x53a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a54      	ldr	r2, [pc, #336]	; (80053f4 <HAL_GPIO_Init+0x638>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d025      	beq.n	80052f2 <HAL_GPIO_Init+0x536>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a53      	ldr	r2, [pc, #332]	; (80053f8 <HAL_GPIO_Init+0x63c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01f      	beq.n	80052ee <HAL_GPIO_Init+0x532>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a52      	ldr	r2, [pc, #328]	; (80053fc <HAL_GPIO_Init+0x640>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d019      	beq.n	80052ea <HAL_GPIO_Init+0x52e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a51      	ldr	r2, [pc, #324]	; (8005400 <HAL_GPIO_Init+0x644>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_GPIO_Init+0x52a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a50      	ldr	r2, [pc, #320]	; (8005404 <HAL_GPIO_Init+0x648>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00d      	beq.n	80052e2 <HAL_GPIO_Init+0x526>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4f      	ldr	r2, [pc, #316]	; (8005408 <HAL_GPIO_Init+0x64c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <HAL_GPIO_Init+0x522>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a4e      	ldr	r2, [pc, #312]	; (800540c <HAL_GPIO_Init+0x650>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <HAL_GPIO_Init+0x51e>
 80052d6:	2309      	movs	r3, #9
 80052d8:	e012      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052da:	230a      	movs	r3, #10
 80052dc:	e010      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052de:	2308      	movs	r3, #8
 80052e0:	e00e      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052e2:	2307      	movs	r3, #7
 80052e4:	e00c      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052e6:	2306      	movs	r3, #6
 80052e8:	e00a      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052ea:	2305      	movs	r3, #5
 80052ec:	e008      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052ee:	2304      	movs	r3, #4
 80052f0:	e006      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052f2:	2303      	movs	r3, #3
 80052f4:	e004      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e002      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <HAL_GPIO_Init+0x544>
 80052fe:	2300      	movs	r3, #0
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	f002 0203 	and.w	r2, r2, #3
 8005306:	0092      	lsls	r2, r2, #2
 8005308:	4093      	lsls	r3, r2
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4313      	orrs	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005310:	4934      	ldr	r1, [pc, #208]	; (80053e4 <HAL_GPIO_Init+0x628>)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	089b      	lsrs	r3, r3, #2
 8005316:	3302      	adds	r3, #2
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <HAL_GPIO_Init+0x654>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005342:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_GPIO_Init+0x654>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005348:	4b31      	ldr	r3, [pc, #196]	; (8005410 <HAL_GPIO_Init+0x654>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800536c:	4a28      	ldr	r2, [pc, #160]	; (8005410 <HAL_GPIO_Init+0x654>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005372:	4b27      	ldr	r3, [pc, #156]	; (8005410 <HAL_GPIO_Init+0x654>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_GPIO_Init+0x654>)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <HAL_GPIO_Init+0x654>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4013      	ands	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053c0:	4a13      	ldr	r2, [pc, #76]	; (8005410 <HAL_GPIO_Init+0x654>)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3301      	adds	r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	f67f adb0 	bls.w	8004f34 <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40013800 	.word	0x40013800
 80053e8:	40020000 	.word	0x40020000
 80053ec:	40020400 	.word	0x40020400
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020c00 	.word	0x40020c00
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40021400 	.word	0x40021400
 8005400:	40021800 	.word	0x40021800
 8005404:	40021c00 	.word	0x40021c00
 8005408:	40022000 	.word	0x40022000
 800540c:	40022400 	.word	0x40022400
 8005410:	40013c00 	.word	0x40013c00

08005414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <HAL_GPIO_ReadPin+0x1c>
 8005426:	887b      	ldrh	r3, [r7, #2]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HAL_GPIO_ReadPin+0x26>
 8005430:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005434:	4809      	ldr	r0, [pc, #36]	; (800545c <HAL_GPIO_ReadPin+0x48>)
 8005436:	f7fd f8c2 	bl	80025be <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	887b      	ldrh	r3, [r7, #2]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
 800544a:	e001      	b.n	8005450 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	08009ea8 	.word	0x08009ea8

08005460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
 800546c:	4613      	mov	r3, r2
 800546e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <HAL_GPIO_WritePin+0x20>
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	0c1b      	lsrs	r3, r3, #16
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_GPIO_WritePin+0x2a>
 8005480:	f240 119f 	movw	r1, #415	; 0x19f
 8005484:	480e      	ldr	r0, [pc, #56]	; (80054c0 <HAL_GPIO_WritePin+0x60>)
 8005486:	f7fd f89a 	bl	80025be <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800548a:	787b      	ldrb	r3, [r7, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_GPIO_WritePin+0x40>
 8005490:	787b      	ldrb	r3, [r7, #1]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d004      	beq.n	80054a0 <HAL_GPIO_WritePin+0x40>
 8005496:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800549a:	4809      	ldr	r0, [pc, #36]	; (80054c0 <HAL_GPIO_WritePin+0x60>)
 800549c:	f7fd f88f 	bl	80025be <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80054a0:	787b      	ldrb	r3, [r7, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054ac:	e003      	b.n	80054b6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ae:	887b      	ldrh	r3, [r7, #2]
 80054b0:	041a      	lsls	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	619a      	str	r2, [r3, #24]
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	08009ea8 	.word	0x08009ea8

080054c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054da:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fc ff70 	bl	80023c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40013c00 	.word	0x40013c00

080054f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e1be      	b.n	8005884 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a9f      	ldr	r2, [pc, #636]	; (8005788 <HAL_I2C_Init+0x294>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_I2C_Init+0x3a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a9d      	ldr	r2, [pc, #628]	; (800578c <HAL_I2C_Init+0x298>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_I2C_Init+0x3a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a9c      	ldr	r2, [pc, #624]	; (8005790 <HAL_I2C_Init+0x29c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_I2C_Init+0x3a>
 8005524:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005528:	489a      	ldr	r0, [pc, #616]	; (8005794 <HAL_I2C_Init+0x2a0>)
 800552a:	f7fd f848 	bl	80025be <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <HAL_I2C_Init+0x4c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4a97      	ldr	r2, [pc, #604]	; (8005798 <HAL_I2C_Init+0x2a4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d904      	bls.n	800554a <HAL_I2C_Init+0x56>
 8005540:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005544:	4893      	ldr	r0, [pc, #588]	; (8005794 <HAL_I2C_Init+0x2a0>)
 8005546:	f7fd f83a 	bl	80025be <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <HAL_I2C_Init+0x72>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800555a:	d004      	beq.n	8005566 <HAL_I2C_Init+0x72>
 800555c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005560:	488c      	ldr	r0, [pc, #560]	; (8005794 <HAL_I2C_Init+0x2a0>)
 8005562:	f7fd f82c 	bl	80025be <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <HAL_I2C_Init+0x8c>
 8005576:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800557a:	4886      	ldr	r0, [pc, #536]	; (8005794 <HAL_I2C_Init+0x2a0>)
 800557c:	f7fd f81f 	bl	80025be <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005588:	d009      	beq.n	800559e <HAL_I2C_Init+0xaa>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005592:	d004      	beq.n	800559e <HAL_I2C_Init+0xaa>
 8005594:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005598:	487e      	ldr	r0, [pc, #504]	; (8005794 <HAL_I2C_Init+0x2a0>)
 800559a:	f7fd f810 	bl	80025be <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_I2C_Init+0xc4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d004      	beq.n	80055b8 <HAL_I2C_Init+0xc4>
 80055ae:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80055b2:	4878      	ldr	r0, [pc, #480]	; (8005794 <HAL_I2C_Init+0x2a0>)
 80055b4:	f7fd f803 	bl	80025be <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_I2C_Init+0xda>
 80055c4:	f240 11c5 	movw	r1, #453	; 0x1c5
 80055c8:	4872      	ldr	r0, [pc, #456]	; (8005794 <HAL_I2C_Init+0x2a0>)
 80055ca:	f7fc fff8 	bl	80025be <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_I2C_Init+0xf4>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d004      	beq.n	80055e8 <HAL_I2C_Init+0xf4>
 80055de:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80055e2:	486c      	ldr	r0, [pc, #432]	; (8005794 <HAL_I2C_Init+0x2a0>)
 80055e4:	f7fc ffeb 	bl	80025be <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_I2C_Init+0x10e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d004      	beq.n	8005602 <HAL_I2C_Init+0x10e>
 80055f8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80055fc:	4865      	ldr	r0, [pc, #404]	; (8005794 <HAL_I2C_Init+0x2a0>)
 80055fe:	f7fc ffde 	bl	80025be <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fc fbbe 	bl	8001d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2224      	movs	r2, #36	; 0x24
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005654:	f000 ffdc 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8005658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4a4f      	ldr	r2, [pc, #316]	; (800579c <HAL_I2C_Init+0x2a8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d807      	bhi.n	8005674 <HAL_I2C_Init+0x180>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_I2C_Init+0x2ac>)
 8005668:	4293      	cmp	r3, r2
 800566a:	bf94      	ite	ls
 800566c:	2301      	movls	r3, #1
 800566e:	2300      	movhi	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e006      	b.n	8005682 <HAL_I2C_Init+0x18e>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a4b      	ldr	r2, [pc, #300]	; (80057a4 <HAL_I2C_Init+0x2b0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	bf94      	ite	ls
 800567c:	2301      	movls	r3, #1
 800567e:	2300      	movhi	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0fc      	b.n	8005884 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a46      	ldr	r2, [pc, #280]	; (80057a8 <HAL_I2C_Init+0x2b4>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0c9b      	lsrs	r3, r3, #18
 8005694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a38      	ldr	r2, [pc, #224]	; (800579c <HAL_I2C_Init+0x2a8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d802      	bhi.n	80056c4 <HAL_I2C_Init+0x1d0>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3301      	adds	r3, #1
 80056c2:	e009      	b.n	80056d8 <HAL_I2C_Init+0x1e4>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	4a37      	ldr	r2, [pc, #220]	; (80057ac <HAL_I2C_Init+0x2b8>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	3301      	adds	r3, #1
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	430b      	orrs	r3, r1
 80056de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	492a      	ldr	r1, [pc, #168]	; (800579c <HAL_I2C_Init+0x2a8>)
 80056f4:	428b      	cmp	r3, r1
 80056f6:	d819      	bhi.n	800572c <HAL_I2C_Init+0x238>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	1e59      	subs	r1, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	fbb1 f3f3 	udiv	r3, r1, r3
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800570c:	400b      	ands	r3, r1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_I2C_Init+0x234>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1e59      	subs	r1, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005720:	3301      	adds	r3, #1
 8005722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005726:	e066      	b.n	80057f6 <HAL_I2C_Init+0x302>
 8005728:	2304      	movs	r3, #4
 800572a:	e064      	b.n	80057f6 <HAL_I2C_Init+0x302>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d111      	bne.n	8005758 <HAL_I2C_Init+0x264>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1e58      	subs	r0, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	440b      	add	r3, r1
 8005742:	fbb0 f3f3 	udiv	r3, r0, r3
 8005746:	3301      	adds	r3, #1
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e012      	b.n	800577e <HAL_I2C_Init+0x28a>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1e58      	subs	r0, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6859      	ldr	r1, [r3, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	0099      	lsls	r1, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	fbb0 f3f3 	udiv	r3, r0, r3
 800576e:	3301      	adds	r3, #1
 8005770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d016      	beq.n	80057b0 <HAL_I2C_Init+0x2bc>
 8005782:	2301      	movs	r3, #1
 8005784:	e037      	b.n	80057f6 <HAL_I2C_Init+0x302>
 8005786:	bf00      	nop
 8005788:	40005400 	.word	0x40005400
 800578c:	40005800 	.word	0x40005800
 8005790:	40005c00 	.word	0x40005c00
 8005794:	08009ee4 	.word	0x08009ee4
 8005798:	00061a80 	.word	0x00061a80
 800579c:	000186a0 	.word	0x000186a0
 80057a0:	001e847f 	.word	0x001e847f
 80057a4:	003d08ff 	.word	0x003d08ff
 80057a8:	431bde83 	.word	0x431bde83
 80057ac:	10624dd3 	.word	0x10624dd3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10e      	bne.n	80057d6 <HAL_I2C_Init+0x2e2>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1e58      	subs	r0, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6859      	ldr	r1, [r3, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	440b      	add	r3, r1
 80057c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ca:	3301      	adds	r3, #1
 80057cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	e00f      	b.n	80057f6 <HAL_I2C_Init+0x302>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1e58      	subs	r0, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6859      	ldr	r1, [r3, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	0099      	lsls	r1, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ec:	3301      	adds	r3, #1
 80057ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	6809      	ldr	r1, [r1, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005824:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6911      	ldr	r1, [r2, #16]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	68d2      	ldr	r2, [r2, #12]
 8005830:	4311      	orrs	r1, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	430b      	orrs	r3, r1
 8005838:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a28      	ldr	r2, [pc, #160]	; (800593c <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00d      	beq.n	80058bc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d008      	beq.n	80058bc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a25      	ldr	r2, [pc, #148]	; (8005944 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80058b4:	215c      	movs	r1, #92	; 0x5c
 80058b6:	4824      	ldr	r0, [pc, #144]	; (8005948 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80058b8:	f7fc fe81 	bl	80025be <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d003      	beq.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80058c8:	215d      	movs	r1, #93	; 0x5d
 80058ca:	481f      	ldr	r0, [pc, #124]	; (8005948 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80058cc:	f7fc fe77 	bl	80025be <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d129      	bne.n	8005930 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2224      	movs	r2, #36	; 0x24
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0210 	bic.w	r2, r2, #16
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40005400 	.word	0x40005400
 8005940:	40005800 	.word	0x40005800
 8005944:	40005c00 	.word	0x40005c00
 8005948:	08009f1c 	.word	0x08009f1c

0800594c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a27      	ldr	r2, [pc, #156]	; (80059fc <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00d      	beq.n	8005980 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d008      	beq.n	8005980 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8005978:	2184      	movs	r1, #132	; 0x84
 800597a:	4823      	ldr	r0, [pc, #140]	; (8005a08 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 800597c:	f7fc fe1f 	bl	80025be <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d903      	bls.n	800598e <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8005986:	2185      	movs	r1, #133	; 0x85
 8005988:	481f      	ldr	r0, [pc, #124]	; (8005a08 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 800598a:	f7fc fe18 	bl	80025be <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b20      	cmp	r3, #32
 8005998:	d12a      	bne.n	80059f0 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2224      	movs	r2, #36	; 0x24
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80059ba:	89fb      	ldrh	r3, [r7, #14]
 80059bc:	f023 030f 	bic.w	r3, r3, #15
 80059c0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	89fb      	ldrh	r3, [r7, #14]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	89fa      	ldrh	r2, [r7, #14]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40005400 	.word	0x40005400
 8005a00:	40005800 	.word	0x40005800
 8005a04:	40005c00 	.word	0x40005c00
 8005a08:	08009f1c 	.word	0x08009f1c

08005a0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	; 0x40
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_PWREx_EnableOverDrive+0x90>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a32:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a38:	f7fd fb7e 	bl	8003138 <HAL_GetTick>
 8005a3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a3e:	e009      	b.n	8005a54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a40:	f7fd fb7a 	bl	8003138 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a4e:	d901      	bls.n	8005a54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e01f      	b.n	8005a94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a54:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d1ee      	bne.n	8005a40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a68:	f7fd fb66 	bl	8003138 <HAL_GetTick>
 8005a6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a6e:	e009      	b.n	8005a84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a70:	f7fd fb62 	bl	8003138 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7e:	d901      	bls.n	8005a84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e007      	b.n	8005a94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a90:	d1ee      	bne.n	8005a70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	420e0040 	.word	0x420e0040
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	420e0044 	.word	0x420e0044

08005aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e30d      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	d903      	bls.n	8005ace <HAL_RCC_OscConfig+0x22>
 8005ac6:	21e8      	movs	r1, #232	; 0xe8
 8005ac8:	48a3      	ldr	r0, [pc, #652]	; (8005d58 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	f7fc fd78 	bl	80025be <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8088 	beq.w	8005bec <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00d      	beq.n	8005b00 <HAL_RCC_OscConfig+0x54>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d008      	beq.n	8005b00 <HAL_RCC_OscConfig+0x54>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af6:	d003      	beq.n	8005b00 <HAL_RCC_OscConfig+0x54>
 8005af8:	21ed      	movs	r1, #237	; 0xed
 8005afa:	4897      	ldr	r0, [pc, #604]	; (8005d58 <HAL_RCC_OscConfig+0x2ac>)
 8005afc:	f7fc fd5f 	bl	80025be <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b00:	4b96      	ldr	r3, [pc, #600]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d00c      	beq.n	8005b26 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b0c:	4b93      	ldr	r3, [pc, #588]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d112      	bne.n	8005b3e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b18:	4b90      	ldr	r3, [pc, #576]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b24:	d10b      	bne.n	8005b3e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b26:	4b8d      	ldr	r3, [pc, #564]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d05b      	beq.n	8005bea <HAL_RCC_OscConfig+0x13e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d157      	bne.n	8005bea <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e2cd      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0xaa>
 8005b48:	4b84      	ldr	r3, [pc, #528]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a83      	ldr	r2, [pc, #524]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	e01d      	b.n	8005b92 <HAL_RCC_OscConfig+0xe6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b5e:	d10c      	bne.n	8005b7a <HAL_RCC_OscConfig+0xce>
 8005b60:	4b7e      	ldr	r3, [pc, #504]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a7d      	ldr	r2, [pc, #500]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b7b      	ldr	r3, [pc, #492]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a7a      	ldr	r2, [pc, #488]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e00b      	b.n	8005b92 <HAL_RCC_OscConfig+0xe6>
 8005b7a:	4b78      	ldr	r3, [pc, #480]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a77      	ldr	r2, [pc, #476]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b75      	ldr	r3, [pc, #468]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a74      	ldr	r2, [pc, #464]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fd facd 	bl	8003138 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba2:	f7fd fac9 	bl	8003138 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b64      	cmp	r3, #100	; 0x64
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e292      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb4:	4b69      	ldr	r3, [pc, #420]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0xf6>
 8005bc0:	e014      	b.n	8005bec <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc2:	f7fd fab9 	bl	8003138 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bca:	f7fd fab5 	bl	8003138 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b64      	cmp	r3, #100	; 0x64
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e27e      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bdc:	4b5f      	ldr	r3, [pc, #380]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCC_OscConfig+0x11e>
 8005be8:	e000      	b.n	8005bec <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d079      	beq.n	8005cec <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_RCC_OscConfig+0x166>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d004      	beq.n	8005c12 <HAL_RCC_OscConfig+0x166>
 8005c08:	f240 111f 	movw	r1, #287	; 0x11f
 8005c0c:	4852      	ldr	r0, [pc, #328]	; (8005d58 <HAL_RCC_OscConfig+0x2ac>)
 8005c0e:	f7fc fcd6 	bl	80025be <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b1f      	cmp	r3, #31
 8005c18:	d904      	bls.n	8005c24 <HAL_RCC_OscConfig+0x178>
 8005c1a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005c1e:	484e      	ldr	r0, [pc, #312]	; (8005d58 <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	f7fc fccd 	bl	80025be <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c24:	4b4d      	ldr	r3, [pc, #308]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 030c 	and.w	r3, r3, #12
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c30:	4b4a      	ldr	r3, [pc, #296]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d11c      	bne.n	8005c76 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3c:	4b47      	ldr	r3, [pc, #284]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d116      	bne.n	8005c76 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c48:	4b44      	ldr	r3, [pc, #272]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_OscConfig+0x1b4>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e23c      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c60:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	493b      	ldr	r1, [pc, #236]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c74:	e03a      	b.n	8005cec <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d020      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7e:	4b38      	ldr	r3, [pc, #224]	; (8005d60 <HAL_RCC_OscConfig+0x2b4>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fd fa58 	bl	8003138 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7fd fa54 	bl	8003138 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e21d      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005caa:	4b2c      	ldr	r3, [pc, #176]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4928      	ldr	r1, [pc, #160]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
 8005cbe:	e015      	b.n	8005cec <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <HAL_RCC_OscConfig+0x2b4>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fd fa37 	bl	8003138 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cce:	f7fd fa33 	bl	8003138 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e1fc      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d046      	beq.n	8005d86 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_RCC_OscConfig+0x266>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d004      	beq.n	8005d12 <HAL_RCC_OscConfig+0x266>
 8005d08:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005d0c:	4812      	ldr	r0, [pc, #72]	; (8005d58 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	f7fc fc56 	bl	80025be <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_RCC_OscConfig+0x2b8>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fd fa0a 	bl	8003138 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d28:	f7fd fa06 	bl	8003138 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1cf      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3a:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <HAL_RCC_OscConfig+0x2b0>)
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0f0      	beq.n	8005d28 <HAL_RCC_OscConfig+0x27c>
 8005d46:	e01e      	b.n	8005d86 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_OscConfig+0x2b8>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4e:	f7fd f9f3 	bl	8003138 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d54:	e011      	b.n	8005d7a <HAL_RCC_OscConfig+0x2ce>
 8005d56:	bf00      	nop
 8005d58:	08009f58 	.word	0x08009f58
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	42470000 	.word	0x42470000
 8005d64:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d68:	f7fd f9e6 	bl	8003138 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e1af      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d7a:	4b97      	ldr	r3, [pc, #604]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80a8 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d94:	2300      	movs	r3, #0
 8005d96:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00c      	beq.n	8005dba <HAL_RCC_OscConfig+0x30e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d008      	beq.n	8005dba <HAL_RCC_OscConfig+0x30e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d004      	beq.n	8005dba <HAL_RCC_OscConfig+0x30e>
 8005db0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005db4:	4889      	ldr	r0, [pc, #548]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005db6:	f7fc fc02 	bl	80025be <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dba:	4b87      	ldr	r3, [pc, #540]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10f      	bne.n	8005de6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	4b83      	ldr	r3, [pc, #524]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	4a82      	ldr	r2, [pc, #520]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd6:	4b80      	ldr	r3, [pc, #512]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de6:	4b7e      	ldr	r3, [pc, #504]	; (8005fe0 <HAL_RCC_OscConfig+0x534>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d118      	bne.n	8005e24 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005df2:	4b7b      	ldr	r3, [pc, #492]	; (8005fe0 <HAL_RCC_OscConfig+0x534>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a7a      	ldr	r2, [pc, #488]	; (8005fe0 <HAL_RCC_OscConfig+0x534>)
 8005df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfe:	f7fd f99b 	bl	8003138 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e06:	f7fd f997 	bl	8003138 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e160      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	4b71      	ldr	r3, [pc, #452]	; (8005fe0 <HAL_RCC_OscConfig+0x534>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x38e>
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a69      	ldr	r2, [pc, #420]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
 8005e38:	e01c      	b.n	8005e74 <HAL_RCC_OscConfig+0x3c8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x3b0>
 8005e42:	4b65      	ldr	r3, [pc, #404]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	4a64      	ldr	r2, [pc, #400]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e4e:	4b62      	ldr	r3, [pc, #392]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	4a61      	ldr	r2, [pc, #388]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCC_OscConfig+0x3c8>
 8005e5c:	4b5e      	ldr	r3, [pc, #376]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	4a5d      	ldr	r2, [pc, #372]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	6713      	str	r3, [r2, #112]	; 0x70
 8005e68:	4b5b      	ldr	r3, [pc, #364]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a5a      	ldr	r2, [pc, #360]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fd f95c 	bl	8003138 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7fd f958 	bl	8003138 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e11f      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9a:	4b4f      	ldr	r3, [pc, #316]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ee      	beq.n	8005e84 <HAL_RCC_OscConfig+0x3d8>
 8005ea6:	e014      	b.n	8005ed2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea8:	f7fd f946 	bl	8003138 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb0:	f7fd f942 	bl	8003138 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e109      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec6:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ee      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed8:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	4a3e      	ldr	r2, [pc, #248]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_RCC_OscConfig+0x45a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_OscConfig+0x45a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d004      	beq.n	8005f06 <HAL_RCC_OscConfig+0x45a>
 8005efc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005f00:	4836      	ldr	r0, [pc, #216]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005f02:	f7fc fb5c 	bl	80025be <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80e4 	beq.w	80060d8 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f10:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <HAL_RCC_OscConfig+0x52c>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	f000 80ae 	beq.w	800607a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	f040 8092 	bne.w	800604c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d009      	beq.n	8005f44 <HAL_RCC_OscConfig+0x498>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f38:	d004      	beq.n	8005f44 <HAL_RCC_OscConfig+0x498>
 8005f3a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005f3e:	4827      	ldr	r0, [pc, #156]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005f40:	f7fc fb3d 	bl	80025be <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	2b3f      	cmp	r3, #63	; 0x3f
 8005f4a:	d904      	bls.n	8005f56 <HAL_RCC_OscConfig+0x4aa>
 8005f4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f50:	4822      	ldr	r0, [pc, #136]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005f52:	f7fc fb34 	bl	80025be <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b31      	cmp	r3, #49	; 0x31
 8005f5c:	d904      	bls.n	8005f68 <HAL_RCC_OscConfig+0x4bc>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005f66:	d904      	bls.n	8005f72 <HAL_RCC_OscConfig+0x4c6>
 8005f68:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005f6c:	481b      	ldr	r0, [pc, #108]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005f6e:	f7fc fb26 	bl	80025be <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d010      	beq.n	8005f9c <HAL_RCC_OscConfig+0x4f0>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d00c      	beq.n	8005f9c <HAL_RCC_OscConfig+0x4f0>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d008      	beq.n	8005f9c <HAL_RCC_OscConfig+0x4f0>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d004      	beq.n	8005f9c <HAL_RCC_OscConfig+0x4f0>
 8005f92:	f240 11db 	movw	r1, #475	; 0x1db
 8005f96:	4811      	ldr	r0, [pc, #68]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005f98:	f7fc fb11 	bl	80025be <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d903      	bls.n	8005fac <HAL_RCC_OscConfig+0x500>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	2b0f      	cmp	r3, #15
 8005faa:	d904      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x50a>
 8005fac:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005fb0:	480a      	ldr	r0, [pc, #40]	; (8005fdc <HAL_RCC_OscConfig+0x530>)
 8005fb2:	f7fc fb04 	bl	80025be <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCC_OscConfig+0x538>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fd f8bc 	bl	8003138 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc2:	e011      	b.n	8005fe8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc4:	f7fd f8b8 	bl	8003138 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d90a      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e081      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	08009f58 	.word	0x08009f58
 8005fe0:	40007000 	.word	0x40007000
 8005fe4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe8:	4b3e      	ldr	r3, [pc, #248]	; (80060e4 <HAL_RCC_OscConfig+0x638>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e7      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	019b      	lsls	r3, r3, #6
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	3b01      	subs	r3, #1
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	4932      	ldr	r1, [pc, #200]	; (80060e4 <HAL_RCC_OscConfig+0x638>)
 800601a:	4313      	orrs	r3, r2
 800601c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601e:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <HAL_RCC_OscConfig+0x63c>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fd f888 	bl	8003138 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602c:	f7fd f884 	bl	8003138 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e04d      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603e:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <HAL_RCC_OscConfig+0x638>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x580>
 800604a:	e045      	b.n	80060d8 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604c:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <HAL_RCC_OscConfig+0x63c>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006052:	f7fd f871 	bl	8003138 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605a:	f7fd f86d 	bl	8003138 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e036      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <HAL_RCC_OscConfig+0x638>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <HAL_RCC_OscConfig+0x5ae>
 8006078:	e02e      	b.n	80060d8 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e029      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006086:	4b17      	ldr	r3, [pc, #92]	; (80060e4 <HAL_RCC_OscConfig+0x638>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	429a      	cmp	r2, r3
 8006098:	d11c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d115      	bne.n	80060d4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060ae:	4013      	ands	r3, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d10d      	bne.n	80060d4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d106      	bne.n	80060d4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800
 80060e8:	42470060 	.word	0x42470060

080060ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e18c      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <HAL_RCC_ClockConfig+0x24>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d904      	bls.n	800611a <HAL_RCC_ClockConfig+0x2e>
 8006110:	f240 2151 	movw	r1, #593	; 0x251
 8006114:	4887      	ldr	r0, [pc, #540]	; (8006334 <HAL_RCC_ClockConfig+0x248>)
 8006116:	f7fc fa52 	bl	80025be <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d031      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d02e      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d02b      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d028      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d025      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b05      	cmp	r3, #5
 800613c:	d022      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b06      	cmp	r3, #6
 8006142:	d01f      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b07      	cmp	r3, #7
 8006148:	d01c      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d019      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b09      	cmp	r3, #9
 8006154:	d016      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b0a      	cmp	r3, #10
 800615a:	d013      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b0b      	cmp	r3, #11
 8006160:	d010      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b0c      	cmp	r3, #12
 8006166:	d00d      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b0d      	cmp	r3, #13
 800616c:	d00a      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b0e      	cmp	r3, #14
 8006172:	d007      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d004      	beq.n	8006184 <HAL_RCC_ClockConfig+0x98>
 800617a:	f240 2152 	movw	r1, #594	; 0x252
 800617e:	486d      	ldr	r0, [pc, #436]	; (8006334 <HAL_RCC_ClockConfig+0x248>)
 8006180:	f7fc fa1d 	bl	80025be <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006184:	4b6c      	ldr	r3, [pc, #432]	; (8006338 <HAL_RCC_ClockConfig+0x24c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d90c      	bls.n	80061ac <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b69      	ldr	r3, [pc, #420]	; (8006338 <HAL_RCC_ClockConfig+0x24c>)
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b67      	ldr	r3, [pc, #412]	; (8006338 <HAL_RCC_ClockConfig+0x24c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e136      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d049      	beq.n	800624c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c4:	4b5d      	ldr	r3, [pc, #372]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a5c      	ldr	r2, [pc, #368]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80061ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061dc:	4b57      	ldr	r3, [pc, #348]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a56      	ldr	r2, [pc, #344]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80061e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d024      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b80      	cmp	r3, #128	; 0x80
 80061f6:	d020      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b90      	cmp	r3, #144	; 0x90
 80061fe:	d01c      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2ba0      	cmp	r3, #160	; 0xa0
 8006206:	d018      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2bb0      	cmp	r3, #176	; 0xb0
 800620e:	d014      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2bc0      	cmp	r3, #192	; 0xc0
 8006216:	d010      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2bd0      	cmp	r3, #208	; 0xd0
 800621e:	d00c      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2be0      	cmp	r3, #224	; 0xe0
 8006226:	d008      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2bf0      	cmp	r3, #240	; 0xf0
 800622e:	d004      	beq.n	800623a <HAL_RCC_ClockConfig+0x14e>
 8006230:	f240 2175 	movw	r1, #629	; 0x275
 8006234:	483f      	ldr	r0, [pc, #252]	; (8006334 <HAL_RCC_ClockConfig+0x248>)
 8006236:	f7fc f9c2 	bl	80025be <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800623a:	4b40      	ldr	r3, [pc, #256]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	493d      	ldr	r1, [pc, #244]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 8006248:	4313      	orrs	r3, r2
 800624a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d059      	beq.n	800630c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <HAL_RCC_ClockConfig+0x196>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00c      	beq.n	8006282 <HAL_RCC_ClockConfig+0x196>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d008      	beq.n	8006282 <HAL_RCC_ClockConfig+0x196>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d004      	beq.n	8006282 <HAL_RCC_ClockConfig+0x196>
 8006278:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800627c:	482d      	ldr	r0, [pc, #180]	; (8006334 <HAL_RCC_ClockConfig+0x248>)
 800627e:	f7fc f99e 	bl	80025be <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628a:	4b2c      	ldr	r3, [pc, #176]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d119      	bne.n	80062ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0bf      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d003      	beq.n	80062aa <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062aa:	4b24      	ldr	r3, [pc, #144]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e0af      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ba:	4b20      	ldr	r3, [pc, #128]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e0a7      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b1c      	ldr	r3, [pc, #112]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4919      	ldr	r1, [pc, #100]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062dc:	f7fc ff2c 	bl	8003138 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fc ff28 	bl	8003138 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e08f      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <HAL_RCC_ClockConfig+0x250>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <HAL_RCC_ClockConfig+0x24c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d212      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b07      	ldr	r3, [pc, #28]	; (8006338 <HAL_RCC_ClockConfig+0x24c>)
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <HAL_RCC_ClockConfig+0x24c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d007      	beq.n	8006340 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e072      	b.n	800641a <HAL_RCC_ClockConfig+0x32e>
 8006334:	08009f58 	.word	0x08009f58
 8006338:	40023c00 	.word	0x40023c00
 800633c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d025      	beq.n	8006398 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d018      	beq.n	8006386 <HAL_RCC_ClockConfig+0x29a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635c:	d013      	beq.n	8006386 <HAL_RCC_ClockConfig+0x29a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006366:	d00e      	beq.n	8006386 <HAL_RCC_ClockConfig+0x29a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006370:	d009      	beq.n	8006386 <HAL_RCC_ClockConfig+0x29a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800637a:	d004      	beq.n	8006386 <HAL_RCC_ClockConfig+0x29a>
 800637c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8006380:	4828      	ldr	r0, [pc, #160]	; (8006424 <HAL_RCC_ClockConfig+0x338>)
 8006382:	f7fc f91c 	bl	80025be <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006386:	4b28      	ldr	r3, [pc, #160]	; (8006428 <HAL_RCC_ClockConfig+0x33c>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	4925      	ldr	r1, [pc, #148]	; (8006428 <HAL_RCC_ClockConfig+0x33c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d026      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d018      	beq.n	80063de <HAL_RCC_ClockConfig+0x2f2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d013      	beq.n	80063de <HAL_RCC_ClockConfig+0x2f2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063be:	d00e      	beq.n	80063de <HAL_RCC_ClockConfig+0x2f2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80063c8:	d009      	beq.n	80063de <HAL_RCC_ClockConfig+0x2f2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80063d2:	d004      	beq.n	80063de <HAL_RCC_ClockConfig+0x2f2>
 80063d4:	f240 21c1 	movw	r1, #705	; 0x2c1
 80063d8:	4812      	ldr	r0, [pc, #72]	; (8006424 <HAL_RCC_ClockConfig+0x338>)
 80063da:	f7fc f8f0 	bl	80025be <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <HAL_RCC_ClockConfig+0x33c>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	490e      	ldr	r1, [pc, #56]	; (8006428 <HAL_RCC_ClockConfig+0x33c>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063f2:	f000 f821 	bl	8006438 <HAL_RCC_GetSysClockFreq>
 80063f6:	4602      	mov	r2, r0
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <HAL_RCC_ClockConfig+0x33c>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	490a      	ldr	r1, [pc, #40]	; (800642c <HAL_RCC_ClockConfig+0x340>)
 8006404:	5ccb      	ldrb	r3, [r1, r3]
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	4a09      	ldr	r2, [pc, #36]	; (8006430 <HAL_RCC_ClockConfig+0x344>)
 800640c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <HAL_RCC_ClockConfig+0x348>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fc fe4c 	bl	80030b0 <HAL_InitTick>

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	08009f58 	.word	0x08009f58
 8006428:	40023800 	.word	0x40023800
 800642c:	0800a0a8 	.word	0x0800a0a8
 8006430:	20000164 	.word	0x20000164
 8006434:	20000168 	.word	0x20000168

08006438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006438:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	607b      	str	r3, [r7, #4]
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	2300      	movs	r3, #0
 800644a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006450:	4b67      	ldr	r3, [pc, #412]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 030c 	and.w	r3, r3, #12
 8006458:	2b08      	cmp	r3, #8
 800645a:	d00d      	beq.n	8006478 <HAL_RCC_GetSysClockFreq+0x40>
 800645c:	2b08      	cmp	r3, #8
 800645e:	f200 80bd 	bhi.w	80065dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0x34>
 8006466:	2b04      	cmp	r3, #4
 8006468:	d003      	beq.n	8006472 <HAL_RCC_GetSysClockFreq+0x3a>
 800646a:	e0b7      	b.n	80065dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800646c:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800646e:	60bb      	str	r3, [r7, #8]
       break;
 8006470:	e0b7      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006472:	4b60      	ldr	r3, [pc, #384]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006474:	60bb      	str	r3, [r7, #8]
      break;
 8006476:	e0b4      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006478:	4b5d      	ldr	r3, [pc, #372]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006480:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006482:	4b5b      	ldr	r3, [pc, #364]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04d      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648e:	4b58      	ldr	r3, [pc, #352]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	099b      	lsrs	r3, r3, #6
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	ea02 0800 	and.w	r8, r2, r0
 80064a6:	ea03 0901 	and.w	r9, r3, r1
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	014b      	lsls	r3, r1, #5
 80064b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064bc:	0142      	lsls	r2, r0, #5
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	ebb0 0008 	subs.w	r0, r0, r8
 80064c6:	eb61 0109 	sbc.w	r1, r1, r9
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	018b      	lsls	r3, r1, #6
 80064d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064d8:	0182      	lsls	r2, r0, #6
 80064da:	1a12      	subs	r2, r2, r0
 80064dc:	eb63 0301 	sbc.w	r3, r3, r1
 80064e0:	f04f 0000 	mov.w	r0, #0
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	00d9      	lsls	r1, r3, #3
 80064ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ee:	00d0      	lsls	r0, r2, #3
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	eb12 0208 	adds.w	r2, r2, r8
 80064f8:	eb43 0309 	adc.w	r3, r3, r9
 80064fc:	f04f 0000 	mov.w	r0, #0
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	0299      	lsls	r1, r3, #10
 8006506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800650a:	0290      	lsls	r0, r2, #10
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	f7fa fb06 	bl	8000b2c <__aeabi_uldivmod>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4613      	mov	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e04a      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652a:	4b31      	ldr	r3, [pc, #196]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	099b      	lsrs	r3, r3, #6
 8006530:	461a      	mov	r2, r3
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800653a:	f04f 0100 	mov.w	r1, #0
 800653e:	ea02 0400 	and.w	r4, r2, r0
 8006542:	ea03 0501 	and.w	r5, r3, r1
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	014b      	lsls	r3, r1, #5
 8006554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006558:	0142      	lsls	r2, r0, #5
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	1b00      	subs	r0, r0, r4
 8006560:	eb61 0105 	sbc.w	r1, r1, r5
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	018b      	lsls	r3, r1, #6
 800656e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006572:	0182      	lsls	r2, r0, #6
 8006574:	1a12      	subs	r2, r2, r0
 8006576:	eb63 0301 	sbc.w	r3, r3, r1
 800657a:	f04f 0000 	mov.w	r0, #0
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	00d9      	lsls	r1, r3, #3
 8006584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006588:	00d0      	lsls	r0, r2, #3
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	1912      	adds	r2, r2, r4
 8006590:	eb45 0303 	adc.w	r3, r5, r3
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f04f 0100 	mov.w	r1, #0
 800659c:	0299      	lsls	r1, r3, #10
 800659e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065a2:	0290      	lsls	r0, r2, #10
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4610      	mov	r0, r2
 80065aa:	4619      	mov	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	f7fa faba 	bl	8000b2c <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	3301      	adds	r3, #1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	60bb      	str	r3, [r7, #8]
      break;
 80065da:	e002      	b.n	80065e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065de:	60bb      	str	r3, [r7, #8]
      break;
 80065e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065e2:	68bb      	ldr	r3, [r7, #8]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800
 80065f4:	00f42400 	.word	0x00f42400

080065f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <HAL_RCC_GetHCLKFreq+0x14>)
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000164 	.word	0x20000164

08006610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006614:	f7ff fff0 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0a9b      	lsrs	r3, r3, #10
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	4903      	ldr	r1, [pc, #12]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40023800 	.word	0x40023800
 8006634:	0800a0b8 	.word	0x0800a0b8

08006638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800663c:	f7ff ffdc 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0b5b      	lsrs	r3, r3, #13
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4903      	ldr	r1, [pc, #12]	; (800665c <HAL_RCC_GetPCLK2Freq+0x24>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40023800 	.word	0x40023800
 800665c:	0800a0b8 	.word	0x0800a0b8

08006660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e118      	b.n	80068a4 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a8d      	ldr	r2, [pc, #564]	; (80068ac <HAL_SPI_Init+0x24c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d01d      	beq.n	80066b8 <HAL_SPI_Init+0x58>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a8b      	ldr	r2, [pc, #556]	; (80068b0 <HAL_SPI_Init+0x250>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d018      	beq.n	80066b8 <HAL_SPI_Init+0x58>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a8a      	ldr	r2, [pc, #552]	; (80068b4 <HAL_SPI_Init+0x254>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d013      	beq.n	80066b8 <HAL_SPI_Init+0x58>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a88      	ldr	r2, [pc, #544]	; (80068b8 <HAL_SPI_Init+0x258>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00e      	beq.n	80066b8 <HAL_SPI_Init+0x58>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a87      	ldr	r2, [pc, #540]	; (80068bc <HAL_SPI_Init+0x25c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d009      	beq.n	80066b8 <HAL_SPI_Init+0x58>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a85      	ldr	r2, [pc, #532]	; (80068c0 <HAL_SPI_Init+0x260>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_SPI_Init+0x58>
 80066ae:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80066b2:	4884      	ldr	r0, [pc, #528]	; (80068c4 <HAL_SPI_Init+0x264>)
 80066b4:	f7fb ff83 	bl	80025be <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <HAL_SPI_Init+0x74>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c8:	d004      	beq.n	80066d4 <HAL_SPI_Init+0x74>
 80066ca:	f240 1143 	movw	r1, #323	; 0x143
 80066ce:	487d      	ldr	r0, [pc, #500]	; (80068c4 <HAL_SPI_Init+0x264>)
 80066d0:	f7fb ff75 	bl	80025be <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00e      	beq.n	80066fa <HAL_SPI_Init+0x9a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e4:	d009      	beq.n	80066fa <HAL_SPI_Init+0x9a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ee:	d004      	beq.n	80066fa <HAL_SPI_Init+0x9a>
 80066f0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80066f4:	4873      	ldr	r0, [pc, #460]	; (80068c4 <HAL_SPI_Init+0x264>)
 80066f6:	f7fb ff62 	bl	80025be <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006702:	d008      	beq.n	8006716 <HAL_SPI_Init+0xb6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_SPI_Init+0xb6>
 800670c:	f240 1145 	movw	r1, #325	; 0x145
 8006710:	486c      	ldr	r0, [pc, #432]	; (80068c4 <HAL_SPI_Init+0x264>)
 8006712:	f7fb ff54 	bl	80025be <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671e:	d00d      	beq.n	800673c <HAL_SPI_Init+0xdc>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <HAL_SPI_Init+0xdc>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006730:	d004      	beq.n	800673c <HAL_SPI_Init+0xdc>
 8006732:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006736:	4863      	ldr	r0, [pc, #396]	; (80068c4 <HAL_SPI_Init+0x264>)
 8006738:	f7fb ff41 	bl	80025be <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d020      	beq.n	8006786 <HAL_SPI_Init+0x126>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d01c      	beq.n	8006786 <HAL_SPI_Init+0x126>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	2b10      	cmp	r3, #16
 8006752:	d018      	beq.n	8006786 <HAL_SPI_Init+0x126>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	2b18      	cmp	r3, #24
 800675a:	d014      	beq.n	8006786 <HAL_SPI_Init+0x126>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	2b20      	cmp	r3, #32
 8006762:	d010      	beq.n	8006786 <HAL_SPI_Init+0x126>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	2b28      	cmp	r3, #40	; 0x28
 800676a:	d00c      	beq.n	8006786 <HAL_SPI_Init+0x126>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	2b30      	cmp	r3, #48	; 0x30
 8006772:	d008      	beq.n	8006786 <HAL_SPI_Init+0x126>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	2b38      	cmp	r3, #56	; 0x38
 800677a:	d004      	beq.n	8006786 <HAL_SPI_Init+0x126>
 800677c:	f240 1147 	movw	r1, #327	; 0x147
 8006780:	4850      	ldr	r0, [pc, #320]	; (80068c4 <HAL_SPI_Init+0x264>)
 8006782:	f7fb ff1c 	bl	80025be <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <HAL_SPI_Init+0x140>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d004      	beq.n	80067a0 <HAL_SPI_Init+0x140>
 8006796:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800679a:	484a      	ldr	r0, [pc, #296]	; (80068c4 <HAL_SPI_Init+0x264>)
 800679c:	f7fb ff0f 	bl	80025be <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_SPI_Init+0x15a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d004      	beq.n	80067ba <HAL_SPI_Init+0x15a>
 80067b0:	f240 1149 	movw	r1, #329	; 0x149
 80067b4:	4843      	ldr	r0, [pc, #268]	; (80068c4 <HAL_SPI_Init+0x264>)
 80067b6:	f7fb ff02 	bl	80025be <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d119      	bne.n	80067f6 <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_SPI_Init+0x17c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d004      	beq.n	80067dc <HAL_SPI_Init+0x17c>
 80067d2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80067d6:	483b      	ldr	r0, [pc, #236]	; (80068c4 <HAL_SPI_Init+0x264>)
 80067d8:	f7fb fef1 	bl	80025be <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_SPI_Init+0x196>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d004      	beq.n	80067f6 <HAL_SPI_Init+0x196>
 80067ec:	f240 114d 	movw	r1, #333	; 0x14d
 80067f0:	4834      	ldr	r0, [pc, #208]	; (80068c4 <HAL_SPI_Init+0x264>)
 80067f2:	f7fb fee4 	bl	80025be <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fb ff17 	bl	8002644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800682c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	ea42 0103 	orr.w	r1, r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	f003 0104 	and.w	r1, r3, #4
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006892:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40013000 	.word	0x40013000
 80068b0:	40003800 	.word	0x40003800
 80068b4:	40003c00 	.word	0x40003c00
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40015000 	.word	0x40015000
 80068c0:	40015400 	.word	0x40015400
 80068c4:	08009f90 	.word	0x08009f90

080068c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e4:	d112      	bne.n	800690c <HAL_SPI_Receive+0x44>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10e      	bne.n	800690c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2204      	movs	r2, #4
 80068f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f8ea 	bl	8006adc <HAL_SPI_TransmitReceive>
 8006908:	4603      	mov	r3, r0
 800690a:	e0e2      	b.n	8006ad2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_SPI_Receive+0x52>
 8006916:	2302      	movs	r3, #2
 8006918:	e0db      	b.n	8006ad2 <HAL_SPI_Receive+0x20a>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006922:	f7fc fc09 	bl	8003138 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d002      	beq.n	800693a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006934:	2302      	movs	r3, #2
 8006936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006938:	e0c2      	b.n	8006ac0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_SPI_Receive+0x7e>
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]
    goto error;
 800694a:	e0b9      	b.n	8006ac0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2204      	movs	r2, #4
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006992:	d107      	bne.n	80069a4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d007      	beq.n	80069c2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d162      	bne.n	8006a90 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80069ca:	e02e      	b.n	8006a2a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d115      	bne.n	8006a06 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f103 020c 	add.w	r2, r3, #12
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a04:	e011      	b.n	8006a2a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a06:	f7fc fb97 	bl	8003138 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d803      	bhi.n	8006a1e <HAL_SPI_Receive+0x156>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a1c:	d102      	bne.n	8006a24 <HAL_SPI_Receive+0x15c>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a28:	e04a      	b.n	8006ac0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1cb      	bne.n	80069cc <HAL_SPI_Receive+0x104>
 8006a34:	e031      	b.n	8006a9a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d113      	bne.n	8006a6c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	b292      	uxth	r2, r2
 8006a50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a6a:	e011      	b.n	8006a90 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a6c:	f7fc fb64 	bl	8003138 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d803      	bhi.n	8006a84 <HAL_SPI_Receive+0x1bc>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a82:	d102      	bne.n	8006a8a <HAL_SPI_Receive+0x1c2>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a8e:	e017      	b.n	8006ac0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1cd      	bne.n	8006a36 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fa34 	bl	8006f0c <SPI_EndRxTransaction>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2220      	movs	r2, #32
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
 8006abc:	e000      	b.n	8006ac0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08c      	sub	sp, #48	; 0x30
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aea:	2301      	movs	r3, #1
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x2a>
 8006afc:	f240 415a 	movw	r1, #1114	; 0x45a
 8006b00:	4884      	ldr	r0, [pc, #528]	; (8006d14 <HAL_SPI_TransmitReceive+0x238>)
 8006b02:	f7fb fd5c 	bl	80025be <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x38>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e18d      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x354>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b1c:	f7fc fb0c 	bl	8003138 <HAL_GetTick>
 8006b20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b32:	887b      	ldrh	r3, [r7, #2]
 8006b34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d00f      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x82>
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b44:	d107      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d103      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x7a>
 8006b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d003      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8006b56:	2302      	movs	r3, #2
 8006b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b5c:	e15e      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x94>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x94>
 8006b6a:	887b      	ldrh	r3, [r7, #2]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b76:	e151      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d003      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2205      	movs	r2, #5
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	887a      	ldrh	r2, [r7, #2]
 8006b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	887a      	ldrh	r2, [r7, #2]
 8006ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	887a      	ldrh	r2, [r7, #2]
 8006bae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	887a      	ldrh	r2, [r7, #2]
 8006bb4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d007      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be8:	d178      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_SPI_TransmitReceive+0x11c>
 8006bf2:	8b7b      	ldrh	r3, [r7, #26]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d166      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	881a      	ldrh	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	1c9a      	adds	r2, r3, #2
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c1c:	e053      	b.n	8006cc6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d11b      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x188>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d016      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x188>
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d113      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	1c9a      	adds	r2, r3, #2
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d119      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x1ca>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d014      	beq.n	8006ca6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	b292      	uxth	r2, r2
 8006c88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ca6:	f7fc fa47 	bl	8003138 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d807      	bhi.n	8006cc6 <HAL_SPI_TransmitReceive+0x1ea>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cbc:	d003      	beq.n	8006cc6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cc4:	e0aa      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1a6      	bne.n	8006c1e <HAL_SPI_TransmitReceive+0x142>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1a1      	bne.n	8006c1e <HAL_SPI_TransmitReceive+0x142>
 8006cda:	e07f      	b.n	8006ddc <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_SPI_TransmitReceive+0x20e>
 8006ce4:	8b7b      	ldrh	r3, [r7, #26]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d16e      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d10:	e05a      	b.n	8006dc8 <HAL_SPI_TransmitReceive+0x2ec>
 8006d12:	bf00      	nop
 8006d14:	08009f90 	.word	0x08009f90
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d11c      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x284>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d017      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x284>
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d114      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	7812      	ldrb	r2, [r2, #0]
 8006d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d119      	bne.n	8006da2 <HAL_SPI_TransmitReceive+0x2c6>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d014      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006da2:	f7fc f9c9 	bl	8003138 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d803      	bhi.n	8006dba <HAL_SPI_TransmitReceive+0x2de>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db8:	d102      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x2e4>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dc6:	e029      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1a2      	bne.n	8006d18 <HAL_SPI_TransmitReceive+0x23c>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d19d      	bne.n	8006d18 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f8f9 	bl	8006fd8 <SPI_EndRxTxTransaction>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006df8:	e010      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	e000      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3730      	adds	r7, #48	; 0x30
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4613      	mov	r3, r2
 8006e46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e48:	e04c      	b.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e50:	d048      	beq.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e52:	f7fc f971 	bl	8003138 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d902      	bls.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d13d      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e80:	d111      	bne.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	d004      	beq.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e94:	d107      	bne.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	d10f      	bne.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ece:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e00f      	b.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	4013      	ands	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d1a3      	bne.n	8006e4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f20:	d111      	bne.n	8006f46 <SPI_EndRxTransaction+0x3a>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2a:	d004      	beq.n	8006f36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f34:	d107      	bne.n	8006f46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4e:	d12a      	bne.n	8006fa6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f58:	d012      	beq.n	8006f80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2180      	movs	r1, #128	; 0x80
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff67 	bl	8006e38 <SPI_WaitFlagStateUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d02d      	beq.n	8006fcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e026      	b.n	8006fce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	2101      	movs	r1, #1
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff ff54 	bl	8006e38 <SPI_WaitFlagStateUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d01a      	beq.n	8006fcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e013      	b.n	8006fce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2101      	movs	r1, #1
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff ff41 	bl	8006e38 <SPI_WaitFlagStateUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e000      	b.n	8006fce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <SPI_EndRxTxTransaction+0x7c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1b      	ldr	r2, [pc, #108]	; (8007058 <SPI_EndRxTxTransaction+0x80>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	0d5b      	lsrs	r3, r3, #21
 8006ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ff4:	fb02 f303 	mul.w	r3, r2, r3
 8006ff8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007002:	d112      	bne.n	800702a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	2180      	movs	r1, #128	; 0x80
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff ff12 	bl	8006e38 <SPI_WaitFlagStateUntilTimeout>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d016      	beq.n	8007048 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e00f      	b.n	800704a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	3b01      	subs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d0f2      	beq.n	800702a <SPI_EndRxTxTransaction+0x52>
 8007044:	e000      	b.n	8007048 <SPI_EndRxTxTransaction+0x70>
        break;
 8007046:	bf00      	nop
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000164 	.word	0x20000164
 8007058:	165e9f81 	.word	0x165e9f81

0800705c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e0a1      	b.n	80071b2 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a52      	ldr	r2, [pc, #328]	; (80071bc <HAL_TIM_Base_Init+0x160>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d045      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007080:	d040      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a4e      	ldr	r2, [pc, #312]	; (80071c0 <HAL_TIM_Base_Init+0x164>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d03b      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a4c      	ldr	r2, [pc, #304]	; (80071c4 <HAL_TIM_Base_Init+0x168>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d036      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a4b      	ldr	r2, [pc, #300]	; (80071c8 <HAL_TIM_Base_Init+0x16c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d031      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a49      	ldr	r2, [pc, #292]	; (80071cc <HAL_TIM_Base_Init+0x170>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d02c      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a48      	ldr	r2, [pc, #288]	; (80071d0 <HAL_TIM_Base_Init+0x174>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d027      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a46      	ldr	r2, [pc, #280]	; (80071d4 <HAL_TIM_Base_Init+0x178>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d022      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a45      	ldr	r2, [pc, #276]	; (80071d8 <HAL_TIM_Base_Init+0x17c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d01d      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a43      	ldr	r2, [pc, #268]	; (80071dc <HAL_TIM_Base_Init+0x180>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d018      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_TIM_Base_Init+0x184>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a40      	ldr	r2, [pc, #256]	; (80071e4 <HAL_TIM_Base_Init+0x188>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00e      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3f      	ldr	r2, [pc, #252]	; (80071e8 <HAL_TIM_Base_Init+0x18c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <HAL_TIM_Base_Init+0x190>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <HAL_TIM_Base_Init+0xa8>
 80070fa:	f44f 7189 	mov.w	r1, #274	; 0x112
 80070fe:	483c      	ldr	r0, [pc, #240]	; (80071f0 <HAL_TIM_Base_Init+0x194>)
 8007100:	f7fb fa5d 	bl	80025be <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d014      	beq.n	8007136 <HAL_TIM_Base_Init+0xda>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2b10      	cmp	r3, #16
 8007112:	d010      	beq.n	8007136 <HAL_TIM_Base_Init+0xda>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	2b20      	cmp	r3, #32
 800711a:	d00c      	beq.n	8007136 <HAL_TIM_Base_Init+0xda>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b40      	cmp	r3, #64	; 0x40
 8007122:	d008      	beq.n	8007136 <HAL_TIM_Base_Init+0xda>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b60      	cmp	r3, #96	; 0x60
 800712a:	d004      	beq.n	8007136 <HAL_TIM_Base_Init+0xda>
 800712c:	f240 1113 	movw	r1, #275	; 0x113
 8007130:	482f      	ldr	r0, [pc, #188]	; (80071f0 <HAL_TIM_Base_Init+0x194>)
 8007132:	f7fb fa44 	bl	80025be <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00e      	beq.n	800715c <HAL_TIM_Base_Init+0x100>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007146:	d009      	beq.n	800715c <HAL_TIM_Base_Init+0x100>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d004      	beq.n	800715c <HAL_TIM_Base_Init+0x100>
 8007152:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007156:	4826      	ldr	r0, [pc, #152]	; (80071f0 <HAL_TIM_Base_Init+0x194>)
 8007158:	f7fb fa31 	bl	80025be <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_TIM_Base_Init+0x11a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b80      	cmp	r3, #128	; 0x80
 800716a:	d004      	beq.n	8007176 <HAL_TIM_Base_Init+0x11a>
 800716c:	f240 1115 	movw	r1, #277	; 0x115
 8007170:	481f      	ldr	r0, [pc, #124]	; (80071f0 <HAL_TIM_Base_Init+0x194>)
 8007172:	f7fb fa24 	bl	80025be <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fb fd64 	bl	8002c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f001 fa62 	bl	800866c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40001000 	.word	0x40001000
 80071d0:	40001400 	.word	0x40001400
 80071d4:	40010400 	.word	0x40010400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800
 80071e4:	40001800 	.word	0x40001800
 80071e8:	40001c00 	.word	0x40001c00
 80071ec:	40002000 	.word	0x40002000
 80071f0:	08009fc8 	.word	0x08009fc8

080071f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a33      	ldr	r2, [pc, #204]	; (80072d0 <HAL_TIM_Base_Start+0xdc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d045      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720e:	d040      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a2f      	ldr	r2, [pc, #188]	; (80072d4 <HAL_TIM_Base_Start+0xe0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d03b      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <HAL_TIM_Base_Start+0xe4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d036      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <HAL_TIM_Base_Start+0xe8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d031      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <HAL_TIM_Base_Start+0xec>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d02c      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a29      	ldr	r2, [pc, #164]	; (80072e4 <HAL_TIM_Base_Start+0xf0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d027      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <HAL_TIM_Base_Start+0xf4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d022      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a26      	ldr	r2, [pc, #152]	; (80072ec <HAL_TIM_Base_Start+0xf8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01d      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a25      	ldr	r2, [pc, #148]	; (80072f0 <HAL_TIM_Base_Start+0xfc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d018      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <HAL_TIM_Base_Start+0x100>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <HAL_TIM_Base_Start+0x104>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00e      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a20      	ldr	r2, [pc, #128]	; (80072fc <HAL_TIM_Base_Start+0x108>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <HAL_TIM_Base_Start+0x10c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <HAL_TIM_Base_Start+0x9e>
 8007288:	f240 1185 	movw	r1, #389	; 0x185
 800728c:	481d      	ldr	r0, [pc, #116]	; (8007304 <HAL_TIM_Base_Start+0x110>)
 800728e:	f7fb f996 	bl	80025be <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b06      	cmp	r3, #6
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0201 	orr.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40000c00 	.word	0x40000c00
 80072e0:	40001000 	.word	0x40001000
 80072e4:	40001400 	.word	0x40001400
 80072e8:	40010400 	.word	0x40010400
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800
 80072f8:	40001800 	.word	0x40001800
 80072fc:	40001c00 	.word	0x40001c00
 8007300:	40002000 	.word	0x40002000
 8007304:	08009fc8 	.word	0x08009fc8

08007308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e0a1      	b.n	800745e <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a52      	ldr	r2, [pc, #328]	; (8007468 <HAL_TIM_PWM_Init+0x160>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d045      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732c:	d040      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a4e      	ldr	r2, [pc, #312]	; (800746c <HAL_TIM_PWM_Init+0x164>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d03b      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a4c      	ldr	r2, [pc, #304]	; (8007470 <HAL_TIM_PWM_Init+0x168>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d036      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a4b      	ldr	r2, [pc, #300]	; (8007474 <HAL_TIM_PWM_Init+0x16c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d031      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a49      	ldr	r2, [pc, #292]	; (8007478 <HAL_TIM_PWM_Init+0x170>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d02c      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a48      	ldr	r2, [pc, #288]	; (800747c <HAL_TIM_PWM_Init+0x174>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d027      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a46      	ldr	r2, [pc, #280]	; (8007480 <HAL_TIM_PWM_Init+0x178>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d022      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a45      	ldr	r2, [pc, #276]	; (8007484 <HAL_TIM_PWM_Init+0x17c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d01d      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a43      	ldr	r2, [pc, #268]	; (8007488 <HAL_TIM_PWM_Init+0x180>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d018      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a42      	ldr	r2, [pc, #264]	; (800748c <HAL_TIM_PWM_Init+0x184>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d013      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a40      	ldr	r2, [pc, #256]	; (8007490 <HAL_TIM_PWM_Init+0x188>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00e      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a3f      	ldr	r2, [pc, #252]	; (8007494 <HAL_TIM_PWM_Init+0x18c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d009      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a3d      	ldr	r2, [pc, #244]	; (8007498 <HAL_TIM_PWM_Init+0x190>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d004      	beq.n	80073b0 <HAL_TIM_PWM_Init+0xa8>
 80073a6:	f240 419b 	movw	r1, #1179	; 0x49b
 80073aa:	483c      	ldr	r0, [pc, #240]	; (800749c <HAL_TIM_PWM_Init+0x194>)
 80073ac:	f7fb f907 	bl	80025be <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d014      	beq.n	80073e2 <HAL_TIM_PWM_Init+0xda>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d010      	beq.n	80073e2 <HAL_TIM_PWM_Init+0xda>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d00c      	beq.n	80073e2 <HAL_TIM_PWM_Init+0xda>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d008      	beq.n	80073e2 <HAL_TIM_PWM_Init+0xda>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b60      	cmp	r3, #96	; 0x60
 80073d6:	d004      	beq.n	80073e2 <HAL_TIM_PWM_Init+0xda>
 80073d8:	f240 419c 	movw	r1, #1180	; 0x49c
 80073dc:	482f      	ldr	r0, [pc, #188]	; (800749c <HAL_TIM_PWM_Init+0x194>)
 80073de:	f7fb f8ee 	bl	80025be <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <HAL_TIM_PWM_Init+0x100>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d009      	beq.n	8007408 <HAL_TIM_PWM_Init+0x100>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fc:	d004      	beq.n	8007408 <HAL_TIM_PWM_Init+0x100>
 80073fe:	f240 419d 	movw	r1, #1181	; 0x49d
 8007402:	4826      	ldr	r0, [pc, #152]	; (800749c <HAL_TIM_PWM_Init+0x194>)
 8007404:	f7fb f8db 	bl	80025be <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d008      	beq.n	8007422 <HAL_TIM_PWM_Init+0x11a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d004      	beq.n	8007422 <HAL_TIM_PWM_Init+0x11a>
 8007418:	f240 419e 	movw	r1, #1182	; 0x49e
 800741c:	481f      	ldr	r0, [pc, #124]	; (800749c <HAL_TIM_PWM_Init+0x194>)
 800741e:	f7fb f8ce 	bl	80025be <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f832 	bl	80074a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f001 f90c 	bl	800866c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	40010000 	.word	0x40010000
 800746c:	40000400 	.word	0x40000400
 8007470:	40000800 	.word	0x40000800
 8007474:	40000c00 	.word	0x40000c00
 8007478:	40001000 	.word	0x40001000
 800747c:	40001400 	.word	0x40001400
 8007480:	40010400 	.word	0x40010400
 8007484:	40014000 	.word	0x40014000
 8007488:	40014400 	.word	0x40014400
 800748c:	40014800 	.word	0x40014800
 8007490:	40001800 	.word	0x40001800
 8007494:	40001c00 	.word	0x40001c00
 8007498:	40002000 	.word	0x40002000
 800749c:	08009fc8 	.word	0x08009fc8

080074a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a6d      	ldr	r2, [pc, #436]	; (8007678 <HAL_TIM_PWM_Start+0x1c4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d10f      	bne.n	80074e8 <HAL_TIM_PWM_Start+0x34>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 809f 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	f000 809b 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	2b08      	cmp	r3, #8
 80074dc:	f000 8097 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b0c      	cmp	r3, #12
 80074e4:	f000 8093 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f0:	d10e      	bne.n	8007510 <HAL_TIM_PWM_Start+0x5c>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 808a 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	f000 8086 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b08      	cmp	r3, #8
 8007506:	f000 8082 	beq.w	800760e <HAL_TIM_PWM_Start+0x15a>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b0c      	cmp	r3, #12
 800750e:	d07e      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a59      	ldr	r2, [pc, #356]	; (800767c <HAL_TIM_PWM_Start+0x1c8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d10b      	bne.n	8007532 <HAL_TIM_PWM_Start+0x7e>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d076      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b04      	cmp	r3, #4
 8007524:	d073      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b08      	cmp	r3, #8
 800752a:	d070      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d06d      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a52      	ldr	r2, [pc, #328]	; (8007680 <HAL_TIM_PWM_Start+0x1cc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d10b      	bne.n	8007554 <HAL_TIM_PWM_Start+0xa0>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d065      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b04      	cmp	r3, #4
 8007546:	d062      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b08      	cmp	r3, #8
 800754c:	d05f      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b0c      	cmp	r3, #12
 8007552:	d05c      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a4a      	ldr	r2, [pc, #296]	; (8007684 <HAL_TIM_PWM_Start+0x1d0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d10b      	bne.n	8007576 <HAL_TIM_PWM_Start+0xc2>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d054      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2b04      	cmp	r3, #4
 8007568:	d051      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b08      	cmp	r3, #8
 800756e:	d04e      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b0c      	cmp	r3, #12
 8007574:	d04b      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a43      	ldr	r2, [pc, #268]	; (8007688 <HAL_TIM_PWM_Start+0x1d4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d10b      	bne.n	8007598 <HAL_TIM_PWM_Start+0xe4>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d043      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b04      	cmp	r3, #4
 800758a:	d040      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b08      	cmp	r3, #8
 8007590:	d03d      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d03a      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a3b      	ldr	r2, [pc, #236]	; (800768c <HAL_TIM_PWM_Start+0x1d8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d105      	bne.n	80075ae <HAL_TIM_PWM_Start+0xfa>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d032      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d02f      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a37      	ldr	r2, [pc, #220]	; (8007690 <HAL_TIM_PWM_Start+0x1dc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d102      	bne.n	80075be <HAL_TIM_PWM_Start+0x10a>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d027      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a34      	ldr	r2, [pc, #208]	; (8007694 <HAL_TIM_PWM_Start+0x1e0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d102      	bne.n	80075ce <HAL_TIM_PWM_Start+0x11a>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d01f      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a31      	ldr	r2, [pc, #196]	; (8007698 <HAL_TIM_PWM_Start+0x1e4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d105      	bne.n	80075e4 <HAL_TIM_PWM_Start+0x130>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d017      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d014      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2c      	ldr	r2, [pc, #176]	; (800769c <HAL_TIM_PWM_Start+0x1e8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d102      	bne.n	80075f4 <HAL_TIM_PWM_Start+0x140>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a29      	ldr	r2, [pc, #164]	; (80076a0 <HAL_TIM_PWM_Start+0x1ec>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d102      	bne.n	8007604 <HAL_TIM_PWM_Start+0x150>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <HAL_TIM_PWM_Start+0x15a>
 8007604:	f240 5113 	movw	r1, #1299	; 0x513
 8007608:	4826      	ldr	r0, [pc, #152]	; (80076a4 <HAL_TIM_PWM_Start+0x1f0>)
 800760a:	f7fa ffd8 	bl	80025be <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fcc6 	bl	8008fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a15      	ldr	r2, [pc, #84]	; (8007678 <HAL_TIM_PWM_Start+0x1c4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_TIM_PWM_Start+0x17c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <HAL_TIM_PWM_Start+0x1d4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d101      	bne.n	8007634 <HAL_TIM_PWM_Start+0x180>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <HAL_TIM_PWM_Start+0x182>
 8007634:	2300      	movs	r3, #0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b06      	cmp	r3, #6
 800765a:	d007      	beq.n	800766c <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40010000 	.word	0x40010000
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40010400 	.word	0x40010400
 800768c:	40014000 	.word	0x40014000
 8007690:	40014400 	.word	0x40014400
 8007694:	40014800 	.word	0x40014800
 8007698:	40001800 	.word	0x40001800
 800769c:	40001c00 	.word	0x40001c00
 80076a0:	40002000 	.word	0x40002000
 80076a4:	08009fc8 	.word	0x08009fc8

080076a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e0a1      	b.n	80077fe <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a52      	ldr	r2, [pc, #328]	; (8007808 <HAL_TIM_IC_Init+0x160>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d045      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076cc:	d040      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a4e      	ldr	r2, [pc, #312]	; (800780c <HAL_TIM_IC_Init+0x164>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d03b      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a4c      	ldr	r2, [pc, #304]	; (8007810 <HAL_TIM_IC_Init+0x168>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d036      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a4b      	ldr	r2, [pc, #300]	; (8007814 <HAL_TIM_IC_Init+0x16c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d031      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a49      	ldr	r2, [pc, #292]	; (8007818 <HAL_TIM_IC_Init+0x170>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d02c      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a48      	ldr	r2, [pc, #288]	; (800781c <HAL_TIM_IC_Init+0x174>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d027      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a46      	ldr	r2, [pc, #280]	; (8007820 <HAL_TIM_IC_Init+0x178>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d022      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a45      	ldr	r2, [pc, #276]	; (8007824 <HAL_TIM_IC_Init+0x17c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d01d      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a43      	ldr	r2, [pc, #268]	; (8007828 <HAL_TIM_IC_Init+0x180>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d018      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a42      	ldr	r2, [pc, #264]	; (800782c <HAL_TIM_IC_Init+0x184>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d013      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a40      	ldr	r2, [pc, #256]	; (8007830 <HAL_TIM_IC_Init+0x188>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00e      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a3f      	ldr	r2, [pc, #252]	; (8007834 <HAL_TIM_IC_Init+0x18c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d009      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a3d      	ldr	r2, [pc, #244]	; (8007838 <HAL_TIM_IC_Init+0x190>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d004      	beq.n	8007750 <HAL_TIM_IC_Init+0xa8>
 8007746:	f240 61d9 	movw	r1, #1753	; 0x6d9
 800774a:	483c      	ldr	r0, [pc, #240]	; (800783c <HAL_TIM_IC_Init+0x194>)
 800774c:	f7fa ff37 	bl	80025be <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d014      	beq.n	8007782 <HAL_TIM_IC_Init+0xda>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b10      	cmp	r3, #16
 800775e:	d010      	beq.n	8007782 <HAL_TIM_IC_Init+0xda>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b20      	cmp	r3, #32
 8007766:	d00c      	beq.n	8007782 <HAL_TIM_IC_Init+0xda>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d008      	beq.n	8007782 <HAL_TIM_IC_Init+0xda>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b60      	cmp	r3, #96	; 0x60
 8007776:	d004      	beq.n	8007782 <HAL_TIM_IC_Init+0xda>
 8007778:	f240 61da 	movw	r1, #1754	; 0x6da
 800777c:	482f      	ldr	r0, [pc, #188]	; (800783c <HAL_TIM_IC_Init+0x194>)
 800777e:	f7fa ff1e 	bl	80025be <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <HAL_TIM_IC_Init+0x100>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007792:	d009      	beq.n	80077a8 <HAL_TIM_IC_Init+0x100>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_IC_Init+0x100>
 800779e:	f240 61db 	movw	r1, #1755	; 0x6db
 80077a2:	4826      	ldr	r0, [pc, #152]	; (800783c <HAL_TIM_IC_Init+0x194>)
 80077a4:	f7fa ff0b 	bl	80025be <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d008      	beq.n	80077c2 <HAL_TIM_IC_Init+0x11a>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d004      	beq.n	80077c2 <HAL_TIM_IC_Init+0x11a>
 80077b8:	f240 61dc 	movw	r1, #1756	; 0x6dc
 80077bc:	481f      	ldr	r0, [pc, #124]	; (800783c <HAL_TIM_IC_Init+0x194>)
 80077be:	f7fa fefe 	bl	80025be <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f832 	bl	8007840 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f000 ff3c 	bl	800866c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40001000 	.word	0x40001000
 800781c:	40001400 	.word	0x40001400
 8007820:	40010400 	.word	0x40010400
 8007824:	40014000 	.word	0x40014000
 8007828:	40014400 	.word	0x40014400
 800782c:	40014800 	.word	0x40014800
 8007830:	40001800 	.word	0x40001800
 8007834:	40001c00 	.word	0x40001c00
 8007838:	40002000 	.word	0x40002000
 800783c:	08009fc8 	.word	0x08009fc8

08007840 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a7c      	ldr	r2, [pc, #496]	; (8007a58 <HAL_TIM_IC_ConfigChannel+0x204>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d03b      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007872:	d036      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a78      	ldr	r2, [pc, #480]	; (8007a5c <HAL_TIM_IC_ConfigChannel+0x208>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d031      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a77      	ldr	r2, [pc, #476]	; (8007a60 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d02c      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a75      	ldr	r2, [pc, #468]	; (8007a64 <HAL_TIM_IC_ConfigChannel+0x210>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d027      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a74      	ldr	r2, [pc, #464]	; (8007a68 <HAL_TIM_IC_ConfigChannel+0x214>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d022      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a72      	ldr	r2, [pc, #456]	; (8007a6c <HAL_TIM_IC_ConfigChannel+0x218>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d01d      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a71      	ldr	r2, [pc, #452]	; (8007a70 <HAL_TIM_IC_ConfigChannel+0x21c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d018      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a6f      	ldr	r2, [pc, #444]	; (8007a74 <HAL_TIM_IC_ConfigChannel+0x220>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d013      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a6e      	ldr	r2, [pc, #440]	; (8007a78 <HAL_TIM_IC_ConfigChannel+0x224>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00e      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a6c      	ldr	r2, [pc, #432]	; (8007a7c <HAL_TIM_IC_ConfigChannel+0x228>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a6b      	ldr	r2, [pc, #428]	; (8007a80 <HAL_TIM_IC_ConfigChannel+0x22c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d004      	beq.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80078d8:	f640 5189 	movw	r1, #3465	; 0xd89
 80078dc:	4869      	ldr	r0, [pc, #420]	; (8007a84 <HAL_TIM_IC_ConfigChannel+0x230>)
 80078de:	f7fa fe6e 	bl	80025be <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <HAL_TIM_IC_ConfigChannel+0xb0>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d008      	beq.n	8007904 <HAL_TIM_IC_ConfigChannel+0xb0>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b0a      	cmp	r3, #10
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_IC_ConfigChannel+0xb0>
 80078fa:	f640 518a 	movw	r1, #3466	; 0xd8a
 80078fe:	4861      	ldr	r0, [pc, #388]	; (8007a84 <HAL_TIM_IC_ConfigChannel+0x230>)
 8007900:	f7fa fe5d 	bl	80025be <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d00c      	beq.n	8007926 <HAL_TIM_IC_ConfigChannel+0xd2>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d008      	beq.n	8007926 <HAL_TIM_IC_ConfigChannel+0xd2>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d004      	beq.n	8007926 <HAL_TIM_IC_ConfigChannel+0xd2>
 800791c:	f640 518b 	movw	r1, #3467	; 0xd8b
 8007920:	4858      	ldr	r0, [pc, #352]	; (8007a84 <HAL_TIM_IC_ConfigChannel+0x230>)
 8007922:	f7fa fe4c 	bl	80025be <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d010      	beq.n	8007950 <HAL_TIM_IC_ConfigChannel+0xfc>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IC_ConfigChannel+0xfc>
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b08      	cmp	r3, #8
 800793c:	d008      	beq.n	8007950 <HAL_TIM_IC_ConfigChannel+0xfc>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b0c      	cmp	r3, #12
 8007944:	d004      	beq.n	8007950 <HAL_TIM_IC_ConfigChannel+0xfc>
 8007946:	f640 518c 	movw	r1, #3468	; 0xd8c
 800794a:	484e      	ldr	r0, [pc, #312]	; (8007a84 <HAL_TIM_IC_ConfigChannel+0x230>)
 800794c:	f7fa fe37 	bl	80025be <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d904      	bls.n	8007962 <HAL_TIM_IC_ConfigChannel+0x10e>
 8007958:	f640 518d 	movw	r1, #3469	; 0xd8d
 800795c:	4849      	ldr	r0, [pc, #292]	; (8007a84 <HAL_TIM_IC_ConfigChannel+0x230>)
 800795e:	f7fa fe2e 	bl	80025be <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_TIM_IC_ConfigChannel+0x11c>
 800796c:	2302      	movs	r3, #2
 800796e:	e115      	b.n	8007b9c <HAL_TIM_IC_ConfigChannel+0x348>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11b      	bne.n	80079be <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6819      	ldr	r1, [r3, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f001 f943 	bl	8008c20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 020c 	bic.w	r2, r2, #12
 80079a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6999      	ldr	r1, [r3, #24]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	619a      	str	r2, [r3, #24]
 80079bc:	e0e5      	b.n	8007b8a <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d161      	bne.n	8007a88 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a23      	ldr	r2, [pc, #140]	; (8007a58 <HAL_TIM_IC_ConfigChannel+0x204>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d027      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d6:	d022      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1f      	ldr	r2, [pc, #124]	; (8007a5c <HAL_TIM_IC_ConfigChannel+0x208>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01d      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <HAL_TIM_IC_ConfigChannel+0x20c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1c      	ldr	r2, [pc, #112]	; (8007a64 <HAL_TIM_IC_ConfigChannel+0x210>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1b      	ldr	r2, [pc, #108]	; (8007a68 <HAL_TIM_IC_ConfigChannel+0x214>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <HAL_TIM_IC_ConfigChannel+0x218>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <HAL_TIM_IC_ConfigChannel+0x224>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8007a14:	f640 51a5 	movw	r1, #3493	; 0xda5
 8007a18:	481a      	ldr	r0, [pc, #104]	; (8007a84 <HAL_TIM_IC_ConfigChannel+0x230>)
 8007a1a:	f7fa fdd0 	bl	80025be <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6819      	ldr	r1, [r3, #0]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f001 f99a 	bl	8008d66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6999      	ldr	r1, [r3, #24]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	021a      	lsls	r2, r3, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	619a      	str	r2, [r3, #24]
 8007a56:	e098      	b.n	8007b8a <HAL_TIM_IC_ConfigChannel+0x336>
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40014400 	.word	0x40014400
 8007a74:	40014800 	.word	0x40014800
 8007a78:	40001800 	.word	0x40001800
 8007a7c:	40001c00 	.word	0x40001c00
 8007a80:	40002000 	.word	0x40002000
 8007a84:	08009fc8 	.word	0x08009fc8
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d13e      	bne.n	8007b0c <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a44      	ldr	r2, [pc, #272]	; (8007ba4 <HAL_TIM_IC_ConfigChannel+0x350>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01d      	beq.n	8007ad4 <HAL_TIM_IC_ConfigChannel+0x280>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa0:	d018      	beq.n	8007ad4 <HAL_TIM_IC_ConfigChannel+0x280>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a40      	ldr	r2, [pc, #256]	; (8007ba8 <HAL_TIM_IC_ConfigChannel+0x354>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <HAL_TIM_IC_ConfigChannel+0x280>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a3e      	ldr	r2, [pc, #248]	; (8007bac <HAL_TIM_IC_ConfigChannel+0x358>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_TIM_IC_ConfigChannel+0x280>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3d      	ldr	r2, [pc, #244]	; (8007bb0 <HAL_TIM_IC_ConfigChannel+0x35c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <HAL_TIM_IC_ConfigChannel+0x280>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a3b      	ldr	r2, [pc, #236]	; (8007bb4 <HAL_TIM_IC_ConfigChannel+0x360>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_TIM_IC_ConfigChannel+0x280>
 8007aca:	f640 51b5 	movw	r1, #3509	; 0xdb5
 8007ace:	483a      	ldr	r0, [pc, #232]	; (8007bb8 <HAL_TIM_IC_ConfigChannel+0x364>)
 8007ad0:	f7fa fd75 	bl	80025be <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6819      	ldr	r1, [r3, #0]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f001 f9ac 	bl	8008e40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69da      	ldr	r2, [r3, #28]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 020c 	bic.w	r2, r2, #12
 8007af6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69d9      	ldr	r1, [r3, #28]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	689a      	ldr	r2, [r3, #8]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	61da      	str	r2, [r3, #28]
 8007b0a:	e03e      	b.n	8007b8a <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <HAL_TIM_IC_ConfigChannel+0x350>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01d      	beq.n	8007b52 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1e:	d018      	beq.n	8007b52 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a20      	ldr	r2, [pc, #128]	; (8007ba8 <HAL_TIM_IC_ConfigChannel+0x354>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d013      	beq.n	8007b52 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <HAL_TIM_IC_ConfigChannel+0x358>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00e      	beq.n	8007b52 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1d      	ldr	r2, [pc, #116]	; (8007bb0 <HAL_TIM_IC_ConfigChannel+0x35c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d009      	beq.n	8007b52 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <HAL_TIM_IC_ConfigChannel+0x360>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8007b48:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8007b4c:	481a      	ldr	r0, [pc, #104]	; (8007bb8 <HAL_TIM_IC_ConfigChannel+0x364>)
 8007b4e:	f7fa fd36 	bl	80025be <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f001 f9a9 	bl	8008eb8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69d9      	ldr	r1, [r3, #28]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	021a      	lsls	r2, r3, #8
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40010000 	.word	0x40010000
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40000800 	.word	0x40000800
 8007bb0:	40000c00 	.word	0x40000c00
 8007bb4:	40010400 	.word	0x40010400
 8007bb8:	08009fc8 	.word	0x08009fc8

08007bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d010      	beq.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d00d      	beq.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d00a      	beq.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b0c      	cmp	r3, #12
 8007bde:	d007      	beq.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b3c      	cmp	r3, #60	; 0x3c
 8007be4:	d004      	beq.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8007be6:	f640 51ec 	movw	r1, #3564	; 0xdec
 8007bea:	4885      	ldr	r0, [pc, #532]	; (8007e00 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007bec:	f7fa fce7 	bl	80025be <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b60      	cmp	r3, #96	; 0x60
 8007bf6:	d008      	beq.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b70      	cmp	r3, #112	; 0x70
 8007bfe:	d004      	beq.n	8007c0a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007c00:	f640 51ed 	movw	r1, #3565	; 0xded
 8007c04:	487e      	ldr	r0, [pc, #504]	; (8007e00 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007c06:	f7fa fcda 	bl	80025be <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x68>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d004      	beq.n	8007c24 <HAL_TIM_PWM_ConfigChannel+0x68>
 8007c1a:	f640 51ee 	movw	r1, #3566	; 0xdee
 8007c1e:	4878      	ldr	r0, [pc, #480]	; (8007e00 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007c20:	f7fa fccd 	bl	80025be <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_TIM_PWM_ConfigChannel+0x82>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d004      	beq.n	8007c3e <HAL_TIM_PWM_ConfigChannel+0x82>
 8007c34:	f640 51ef 	movw	r1, #3567	; 0xdef
 8007c38:	4871      	ldr	r0, [pc, #452]	; (8007e00 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007c3a:	f7fa fcc0 	bl	80025be <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_TIM_PWM_ConfigChannel+0x90>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e182      	b.n	8007f52 <HAL_TIM_PWM_ConfigChannel+0x396>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	f200 816d 	bhi.w	8007f3e <HAL_TIM_PWM_ConfigChannel+0x382>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007ca1 	.word	0x08007ca1
 8007c70:	08007f3f 	.word	0x08007f3f
 8007c74:	08007f3f 	.word	0x08007f3f
 8007c78:	08007f3f 	.word	0x08007f3f
 8007c7c:	08007d63 	.word	0x08007d63
 8007c80:	08007f3f 	.word	0x08007f3f
 8007c84:	08007f3f 	.word	0x08007f3f
 8007c88:	08007f3f 	.word	0x08007f3f
 8007c8c:	08007e31 	.word	0x08007e31
 8007c90:	08007f3f 	.word	0x08007f3f
 8007c94:	08007f3f 	.word	0x08007f3f
 8007c98:	08007f3f 	.word	0x08007f3f
 8007c9c:	08007eb7 	.word	0x08007eb7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a57      	ldr	r2, [pc, #348]	; (8007e04 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d03b      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb2:	d036      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a53      	ldr	r2, [pc, #332]	; (8007e08 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d031      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a52      	ldr	r2, [pc, #328]	; (8007e0c <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d02c      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a50      	ldr	r2, [pc, #320]	; (8007e10 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d027      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a4f      	ldr	r2, [pc, #316]	; (8007e14 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d022      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a4d      	ldr	r2, [pc, #308]	; (8007e18 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d01d      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a4c      	ldr	r2, [pc, #304]	; (8007e1c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d018      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a4a      	ldr	r2, [pc, #296]	; (8007e20 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a49      	ldr	r2, [pc, #292]	; (8007e24 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d00e      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a47      	ldr	r2, [pc, #284]	; (8007e28 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d009      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a46      	ldr	r2, [pc, #280]	; (8007e2c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d004      	beq.n	8007d22 <HAL_TIM_PWM_ConfigChannel+0x166>
 8007d18:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8007d1c:	4838      	ldr	r0, [pc, #224]	; (8007e00 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007d1e:	f7fa fc4e 	bl	80025be <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68b9      	ldr	r1, [r7, #8]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fd3f 	bl	80087ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0208 	orr.w	r2, r2, #8
 8007d3c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699a      	ldr	r2, [r3, #24]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0204 	bic.w	r2, r2, #4
 8007d4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6999      	ldr	r1, [r3, #24]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	619a      	str	r2, [r3, #24]
      break;
 8007d60:	e0ee      	b.n	8007f40 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a27      	ldr	r2, [pc, #156]	; (8007e04 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d027      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d022      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a23      	ldr	r2, [pc, #140]	; (8007e08 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d01d      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a21      	ldr	r2, [pc, #132]	; (8007e0c <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d018      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00e      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1d      	ldr	r2, [pc, #116]	; (8007e18 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d009      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_TIM_PWM_ConfigChannel+0x200>
 8007db2:	f640 610c 	movw	r1, #3596	; 0xe0c
 8007db6:	4812      	ldr	r0, [pc, #72]	; (8007e00 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8007db8:	f7fa fc01 	bl	80025be <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68b9      	ldr	r1, [r7, #8]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fd8c 	bl	80088e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699a      	ldr	r2, [r3, #24]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6999      	ldr	r1, [r3, #24]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	021a      	lsls	r2, r3, #8
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	619a      	str	r2, [r3, #24]
      break;
 8007dfc:	e0a0      	b.n	8007f40 <HAL_TIM_PWM_ConfigChannel+0x384>
 8007dfe:	bf00      	nop
 8007e00:	08009fc8 	.word	0x08009fc8
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40000400 	.word	0x40000400
 8007e0c:	40000800 	.word	0x40000800
 8007e10:	40000c00 	.word	0x40000c00
 8007e14:	40010400 	.word	0x40010400
 8007e18:	40014000 	.word	0x40014000
 8007e1c:	40014400 	.word	0x40014400
 8007e20:	40014800 	.word	0x40014800
 8007e24:	40001800 	.word	0x40001800
 8007e28:	40001c00 	.word	0x40001c00
 8007e2c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a49      	ldr	r2, [pc, #292]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01d      	beq.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d018      	beq.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a45      	ldr	r2, [pc, #276]	; (8007f60 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a44      	ldr	r2, [pc, #272]	; (8007f64 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a42      	ldr	r2, [pc, #264]	; (8007f68 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a41      	ldr	r2, [pc, #260]	; (8007f6c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8007e6c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8007e70:	483f      	ldr	r0, [pc, #252]	; (8007f70 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8007e72:	f7fa fba4 	bl	80025be <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fdcd 	bl	8008a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0208 	orr.w	r2, r2, #8
 8007e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0204 	bic.w	r2, r2, #4
 8007ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69d9      	ldr	r1, [r3, #28]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	61da      	str	r2, [r3, #28]
      break;
 8007eb4:	e044      	b.n	8007f40 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d01d      	beq.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x340>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec8:	d018      	beq.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x340>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d013      	beq.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x340>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00e      	beq.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x340>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a21      	ldr	r2, [pc, #132]	; (8007f68 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d009      	beq.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x340>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a1f      	ldr	r2, [pc, #124]	; (8007f6c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <HAL_TIM_PWM_ConfigChannel+0x340>
 8007ef2:	f640 612e 	movw	r1, #3630	; 0xe2e
 8007ef6:	481e      	ldr	r0, [pc, #120]	; (8007f70 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8007ef8:	f7fa fb61 	bl	80025be <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fe28 	bl	8008b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69da      	ldr	r2, [r3, #28]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69da      	ldr	r2, [r3, #28]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69d9      	ldr	r1, [r3, #28]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	021a      	lsls	r2, r3, #8
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	61da      	str	r2, [r3, #28]
      break;
 8007f3c:	e000      	b.n	8007f40 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 8007f3e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40000400 	.word	0x40000400
 8007f64:	40000800 	.word	0x40000800
 8007f68:	40000c00 	.word	0x40000c00
 8007f6c:	40010400 	.word	0x40010400
 8007f70:	08009fc8 	.word	0x08009fc8

08007f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_TIM_ConfigClockSource+0x18>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e35b      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x6d0>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa4:	d029      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fae:	d024      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d020      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b10      	cmp	r3, #16
 8007fbe:	d01c      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d018      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b30      	cmp	r3, #48	; 0x30
 8007fce:	d014      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b40      	cmp	r3, #64	; 0x40
 8007fd6:	d010      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b50      	cmp	r3, #80	; 0x50
 8007fde:	d00c      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b60      	cmp	r3, #96	; 0x60
 8007fe6:	d008      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b70      	cmp	r3, #112	; 0x70
 8007fee:	d004      	beq.n	8007ffa <HAL_TIM_ConfigClockSource+0x86>
 8007ff0:	f241 118b 	movw	r1, #4491	; 0x118b
 8007ff4:	4893      	ldr	r0, [pc, #588]	; (8008244 <HAL_TIM_ConfigClockSource+0x2d0>)
 8007ff6:	f7fa fae2 	bl	80025be <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008008:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008010:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008022:	f000 812b 	beq.w	800827c <HAL_TIM_ConfigClockSource+0x308>
 8008026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802a:	f200 82ff 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008032:	d02e      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x11e>
 8008034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008038:	f200 82f8 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 800803c:	2b70      	cmp	r3, #112	; 0x70
 800803e:	f000 8082 	beq.w	8008146 <HAL_TIM_ConfigClockSource+0x1d2>
 8008042:	2b70      	cmp	r3, #112	; 0x70
 8008044:	f200 82f2 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 8008048:	2b60      	cmp	r3, #96	; 0x60
 800804a:	f000 81e8 	beq.w	800841e <HAL_TIM_ConfigClockSource+0x4aa>
 800804e:	2b60      	cmp	r3, #96	; 0x60
 8008050:	f200 82ec 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 8008054:	2b50      	cmp	r3, #80	; 0x50
 8008056:	f000 8182 	beq.w	800835e <HAL_TIM_ConfigClockSource+0x3ea>
 800805a:	2b50      	cmp	r3, #80	; 0x50
 800805c:	f200 82e6 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	f000 824d 	beq.w	8008500 <HAL_TIM_ConfigClockSource+0x58c>
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	f200 82e0 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 800806c:	2b30      	cmp	r3, #48	; 0x30
 800806e:	f000 82a7 	beq.w	80085c0 <HAL_TIM_ConfigClockSource+0x64c>
 8008072:	2b30      	cmp	r3, #48	; 0x30
 8008074:	f200 82da 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 8008078:	2b20      	cmp	r3, #32
 800807a:	f000 82a1 	beq.w	80085c0 <HAL_TIM_ConfigClockSource+0x64c>
 800807e:	2b20      	cmp	r3, #32
 8008080:	f200 82d4 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x6b8>
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 829b 	beq.w	80085c0 <HAL_TIM_ConfigClockSource+0x64c>
 800808a:	2b10      	cmp	r3, #16
 800808c:	f000 8298 	beq.w	80085c0 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008090:	e2cc      	b.n	800862c <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a6c      	ldr	r2, [pc, #432]	; (8008248 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	f000 82c9 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a6:	f000 82c3 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a67      	ldr	r2, [pc, #412]	; (800824c <HAL_TIM_ConfigClockSource+0x2d8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	f000 82bd 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a65      	ldr	r2, [pc, #404]	; (8008250 <HAL_TIM_ConfigClockSource+0x2dc>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	f000 82b7 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a63      	ldr	r2, [pc, #396]	; (8008254 <HAL_TIM_ConfigClockSource+0x2e0>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	f000 82b1 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a61      	ldr	r2, [pc, #388]	; (8008258 <HAL_TIM_ConfigClockSource+0x2e4>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	f000 82ab 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a5f      	ldr	r2, [pc, #380]	; (800825c <HAL_TIM_ConfigClockSource+0x2e8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	f000 82a5 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a5d      	ldr	r2, [pc, #372]	; (8008260 <HAL_TIM_ConfigClockSource+0x2ec>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f000 829f 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a5b      	ldr	r2, [pc, #364]	; (8008264 <HAL_TIM_ConfigClockSource+0x2f0>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	f000 8299 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a59      	ldr	r2, [pc, #356]	; (8008268 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	f000 8293 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a57      	ldr	r2, [pc, #348]	; (800826c <HAL_TIM_ConfigClockSource+0x2f8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	f000 828d 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a55      	ldr	r2, [pc, #340]	; (8008270 <HAL_TIM_ConfigClockSource+0x2fc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	f000 8287 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a53      	ldr	r2, [pc, #332]	; (8008274 <HAL_TIM_ConfigClockSource+0x300>)
 8008128:	4293      	cmp	r3, r2
 800812a:	f000 8281 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a51      	ldr	r2, [pc, #324]	; (8008278 <HAL_TIM_ConfigClockSource+0x304>)
 8008134:	4293      	cmp	r3, r2
 8008136:	f000 827b 	beq.w	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
 800813a:	f241 1197 	movw	r1, #4503	; 0x1197
 800813e:	4841      	ldr	r0, [pc, #260]	; (8008244 <HAL_TIM_ConfigClockSource+0x2d0>)
 8008140:	f7fa fa3d 	bl	80025be <assert_failed>
      break;
 8008144:	e274      	b.n	8008630 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a3f      	ldr	r2, [pc, #252]	; (8008248 <HAL_TIM_ConfigClockSource+0x2d4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d027      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008158:	d022      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a3b      	ldr	r2, [pc, #236]	; (800824c <HAL_TIM_ConfigClockSource+0x2d8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d01d      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a39      	ldr	r2, [pc, #228]	; (8008250 <HAL_TIM_ConfigClockSource+0x2dc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a38      	ldr	r2, [pc, #224]	; (8008254 <HAL_TIM_ConfigClockSource+0x2e0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a38      	ldr	r2, [pc, #224]	; (8008260 <HAL_TIM_ConfigClockSource+0x2ec>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a37      	ldr	r2, [pc, #220]	; (8008264 <HAL_TIM_ConfigClockSource+0x2f0>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a37      	ldr	r2, [pc, #220]	; (8008270 <HAL_TIM_ConfigClockSource+0x2fc>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x22c>
 8008196:	f241 119e 	movw	r1, #4510	; 0x119e
 800819a:	482a      	ldr	r0, [pc, #168]	; (8008244 <HAL_TIM_ConfigClockSource+0x2d0>)
 800819c:	f7fa fa0f 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d013      	beq.n	80081d0 <HAL_TIM_ConfigClockSource+0x25c>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d00e      	beq.n	80081d0 <HAL_TIM_ConfigClockSource+0x25c>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ba:	d009      	beq.n	80081d0 <HAL_TIM_ConfigClockSource+0x25c>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081c4:	d004      	beq.n	80081d0 <HAL_TIM_ConfigClockSource+0x25c>
 80081c6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80081ca:	481e      	ldr	r0, [pc, #120]	; (8008244 <HAL_TIM_ConfigClockSource+0x2d0>)
 80081cc:	f7fa f9f7 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d8:	d014      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0x290>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d010      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0x290>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00c      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0x290>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d008      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0x290>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b0a      	cmp	r3, #10
 80081f8:	d004      	beq.n	8008204 <HAL_TIM_ConfigClockSource+0x290>
 80081fa:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80081fe:	4811      	ldr	r0, [pc, #68]	; (8008244 <HAL_TIM_ConfigClockSource+0x2d0>)
 8008200:	f7fa f9dd 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b0f      	cmp	r3, #15
 800820a:	d904      	bls.n	8008216 <HAL_TIM_ConfigClockSource+0x2a2>
 800820c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8008210:	480c      	ldr	r0, [pc, #48]	; (8008244 <HAL_TIM_ConfigClockSource+0x2d0>)
 8008212:	f7fa f9d4 	bl	80025be <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	6899      	ldr	r1, [r3, #8]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f000 fe9f 	bl	8008f68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008238:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	609a      	str	r2, [r3, #8]
      break;
 8008242:	e1f6      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
 8008244:	08009fc8 	.word	0x08009fc8
 8008248:	40010000 	.word	0x40010000
 800824c:	40000400 	.word	0x40000400
 8008250:	40000800 	.word	0x40000800
 8008254:	40000c00 	.word	0x40000c00
 8008258:	40001000 	.word	0x40001000
 800825c:	40001400 	.word	0x40001400
 8008260:	40010400 	.word	0x40010400
 8008264:	40014000 	.word	0x40014000
 8008268:	40014400 	.word	0x40014400
 800826c:	40014800 	.word	0x40014800
 8008270:	40001800 	.word	0x40001800
 8008274:	40001c00 	.word	0x40001c00
 8008278:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a97      	ldr	r2, [pc, #604]	; (80084e0 <HAL_TIM_ConfigClockSource+0x56c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d01d      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x34e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828e:	d018      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x34e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a93      	ldr	r2, [pc, #588]	; (80084e4 <HAL_TIM_ConfigClockSource+0x570>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d013      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x34e>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a92      	ldr	r2, [pc, #584]	; (80084e8 <HAL_TIM_ConfigClockSource+0x574>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00e      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x34e>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a90      	ldr	r2, [pc, #576]	; (80084ec <HAL_TIM_ConfigClockSource+0x578>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d009      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x34e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a8f      	ldr	r2, [pc, #572]	; (80084f0 <HAL_TIM_ConfigClockSource+0x57c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d004      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x34e>
 80082b8:	f241 11b6 	movw	r1, #4534	; 0x11b6
 80082bc:	488d      	ldr	r0, [pc, #564]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80082be:	f7fa f97e 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d013      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x37e>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d2:	d00e      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x37e>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082dc:	d009      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x37e>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082e6:	d004      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x37e>
 80082e8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80082ec:	4881      	ldr	r0, [pc, #516]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80082ee:	f7fa f966 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082fa:	d014      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x3b2>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x3b2>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x3b2>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d008      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x3b2>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b0a      	cmp	r3, #10
 800831a:	d004      	beq.n	8008326 <HAL_TIM_ConfigClockSource+0x3b2>
 800831c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8008320:	4874      	ldr	r0, [pc, #464]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 8008322:	f7fa f94c 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	2b0f      	cmp	r3, #15
 800832c:	d904      	bls.n	8008338 <HAL_TIM_ConfigClockSource+0x3c4>
 800832e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8008332:	4870      	ldr	r0, [pc, #448]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 8008334:	f7fa f943 	bl	80025be <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6899      	ldr	r1, [r3, #8]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f000 fe0e 	bl	8008f68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800835a:	609a      	str	r2, [r3, #8]
      break;
 800835c:	e169      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a5f      	ldr	r2, [pc, #380]	; (80084e0 <HAL_TIM_ConfigClockSource+0x56c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d027      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008370:	d022      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a5b      	ldr	r2, [pc, #364]	; (80084e4 <HAL_TIM_ConfigClockSource+0x570>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d01d      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a59      	ldr	r2, [pc, #356]	; (80084e8 <HAL_TIM_ConfigClockSource+0x574>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d018      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a58      	ldr	r2, [pc, #352]	; (80084ec <HAL_TIM_ConfigClockSource+0x578>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d013      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a56      	ldr	r2, [pc, #344]	; (80084f0 <HAL_TIM_ConfigClockSource+0x57c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00e      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a56      	ldr	r2, [pc, #344]	; (80084f8 <HAL_TIM_ConfigClockSource+0x584>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d009      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a54      	ldr	r2, [pc, #336]	; (80084fc <HAL_TIM_ConfigClockSource+0x588>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d004      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0x444>
 80083ae:	f241 11ca 	movw	r1, #4554	; 0x11ca
 80083b2:	4850      	ldr	r0, [pc, #320]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80083b4:	f7fa f903 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c0:	d014      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0x478>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d010      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0x478>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0x478>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d008      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0x478>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b0a      	cmp	r3, #10
 80083e0:	d004      	beq.n	80083ec <HAL_TIM_ConfigClockSource+0x478>
 80083e2:	f241 11cd 	movw	r1, #4557	; 0x11cd
 80083e6:	4843      	ldr	r0, [pc, #268]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80083e8:	f7fa f8e9 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	2b0f      	cmp	r3, #15
 80083f2:	d904      	bls.n	80083fe <HAL_TIM_ConfigClockSource+0x48a>
 80083f4:	f241 11ce 	movw	r1, #4558	; 0x11ce
 80083f8:	483e      	ldr	r0, [pc, #248]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80083fa:	f7fa f8e0 	bl	80025be <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	461a      	mov	r2, r3
 800840c:	f000 fc7c 	bl	8008d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2150      	movs	r1, #80	; 0x50
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fd8b 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 800841c:	e109      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a2f      	ldr	r2, [pc, #188]	; (80084e0 <HAL_TIM_ConfigClockSource+0x56c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d027      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008430:	d022      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2b      	ldr	r2, [pc, #172]	; (80084e4 <HAL_TIM_ConfigClockSource+0x570>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d01d      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a29      	ldr	r2, [pc, #164]	; (80084e8 <HAL_TIM_ConfigClockSource+0x574>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d018      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a28      	ldr	r2, [pc, #160]	; (80084ec <HAL_TIM_ConfigClockSource+0x578>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a26      	ldr	r2, [pc, #152]	; (80084f0 <HAL_TIM_ConfigClockSource+0x57c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00e      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <HAL_TIM_ConfigClockSource+0x584>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d009      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a24      	ldr	r2, [pc, #144]	; (80084fc <HAL_TIM_ConfigClockSource+0x588>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d004      	beq.n	8008478 <HAL_TIM_ConfigClockSource+0x504>
 800846e:	f241 11da 	movw	r1, #4570	; 0x11da
 8008472:	4820      	ldr	r0, [pc, #128]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 8008474:	f7fa f8a3 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d014      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0x538>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d010      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0x538>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00c      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0x538>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d008      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0x538>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b0a      	cmp	r3, #10
 80084a0:	d004      	beq.n	80084ac <HAL_TIM_ConfigClockSource+0x538>
 80084a2:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80084a6:	4813      	ldr	r0, [pc, #76]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80084a8:	f7fa f889 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b0f      	cmp	r3, #15
 80084b2:	d904      	bls.n	80084be <HAL_TIM_ConfigClockSource+0x54a>
 80084b4:	f241 11de 	movw	r1, #4574	; 0x11de
 80084b8:	480e      	ldr	r0, [pc, #56]	; (80084f4 <HAL_TIM_ConfigClockSource+0x580>)
 80084ba:	f7fa f880 	bl	80025be <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	6859      	ldr	r1, [r3, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f000 fc88 	bl	8008de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2160      	movs	r1, #96	; 0x60
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fd2b 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80084dc:	e0a9      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
 80084de:	bf00      	nop
 80084e0:	40010000 	.word	0x40010000
 80084e4:	40000400 	.word	0x40000400
 80084e8:	40000800 	.word	0x40000800
 80084ec:	40000c00 	.word	0x40000c00
 80084f0:	40010400 	.word	0x40010400
 80084f4:	08009fc8 	.word	0x08009fc8
 80084f8:	40014000 	.word	0x40014000
 80084fc:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a51      	ldr	r2, [pc, #324]	; (800864c <HAL_TIM_ConfigClockSource+0x6d8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d027      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008512:	d022      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a4d      	ldr	r2, [pc, #308]	; (8008650 <HAL_TIM_ConfigClockSource+0x6dc>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01d      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a4c      	ldr	r2, [pc, #304]	; (8008654 <HAL_TIM_ConfigClockSource+0x6e0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d018      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a4a      	ldr	r2, [pc, #296]	; (8008658 <HAL_TIM_ConfigClockSource+0x6e4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a49      	ldr	r2, [pc, #292]	; (800865c <HAL_TIM_ConfigClockSource+0x6e8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00e      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a47      	ldr	r2, [pc, #284]	; (8008660 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d009      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a46      	ldr	r2, [pc, #280]	; (8008664 <HAL_TIM_ConfigClockSource+0x6f0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d004      	beq.n	800855a <HAL_TIM_ConfigClockSource+0x5e6>
 8008550:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8008554:	4844      	ldr	r0, [pc, #272]	; (8008668 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008556:	f7fa f832 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008562:	d014      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x61a>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d010      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x61a>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00c      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x61a>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d008      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x61a>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b0a      	cmp	r3, #10
 8008582:	d004      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x61a>
 8008584:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8008588:	4837      	ldr	r0, [pc, #220]	; (8008668 <HAL_TIM_ConfigClockSource+0x6f4>)
 800858a:	f7fa f818 	bl	80025be <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	2b0f      	cmp	r3, #15
 8008594:	d904      	bls.n	80085a0 <HAL_TIM_ConfigClockSource+0x62c>
 8008596:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800859a:	4833      	ldr	r0, [pc, #204]	; (8008668 <HAL_TIM_ConfigClockSource+0x6f4>)
 800859c:	f7fa f80f 	bl	80025be <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6859      	ldr	r1, [r3, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	461a      	mov	r2, r3
 80085ae:	f000 fbab 	bl	8008d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2140      	movs	r1, #64	; 0x40
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fcba 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80085be:	e038      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a21      	ldr	r2, [pc, #132]	; (800864c <HAL_TIM_ConfigClockSource+0x6d8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d027      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d2:	d022      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1d      	ldr	r2, [pc, #116]	; (8008650 <HAL_TIM_ConfigClockSource+0x6dc>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d01d      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1c      	ldr	r2, [pc, #112]	; (8008654 <HAL_TIM_ConfigClockSource+0x6e0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d018      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1a      	ldr	r2, [pc, #104]	; (8008658 <HAL_TIM_ConfigClockSource+0x6e4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d013      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a19      	ldr	r2, [pc, #100]	; (800865c <HAL_TIM_ConfigClockSource+0x6e8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00e      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <HAL_TIM_ConfigClockSource+0x6ec>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d009      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a16      	ldr	r2, [pc, #88]	; (8008664 <HAL_TIM_ConfigClockSource+0x6f0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d004      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x6a6>
 8008610:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8008614:	4814      	ldr	r0, [pc, #80]	; (8008668 <HAL_TIM_ConfigClockSource+0x6f4>)
 8008616:	f7f9 ffd2 	bl	80025be <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f000 fc84 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 800862a:	e002      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800862c:	bf00      	nop
 800862e:	e000      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 8008630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40010000 	.word	0x40010000
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40000c00 	.word	0x40000c00
 800865c:	40010400 	.word	0x40010400
 8008660:	40014000 	.word	0x40014000
 8008664:	40001800 	.word	0x40001800
 8008668:	08009fc8 	.word	0x08009fc8

0800866c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a40      	ldr	r2, [pc, #256]	; (8008780 <TIM_Base_SetConfig+0x114>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d013      	beq.n	80086ac <TIM_Base_SetConfig+0x40>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868a:	d00f      	beq.n	80086ac <TIM_Base_SetConfig+0x40>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a3d      	ldr	r2, [pc, #244]	; (8008784 <TIM_Base_SetConfig+0x118>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00b      	beq.n	80086ac <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a3c      	ldr	r2, [pc, #240]	; (8008788 <TIM_Base_SetConfig+0x11c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d007      	beq.n	80086ac <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a3b      	ldr	r2, [pc, #236]	; (800878c <TIM_Base_SetConfig+0x120>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a3a      	ldr	r2, [pc, #232]	; (8008790 <TIM_Base_SetConfig+0x124>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d108      	bne.n	80086be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a2f      	ldr	r2, [pc, #188]	; (8008780 <TIM_Base_SetConfig+0x114>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d02b      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086cc:	d027      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a2c      	ldr	r2, [pc, #176]	; (8008784 <TIM_Base_SetConfig+0x118>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d023      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a2b      	ldr	r2, [pc, #172]	; (8008788 <TIM_Base_SetConfig+0x11c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d01f      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a2a      	ldr	r2, [pc, #168]	; (800878c <TIM_Base_SetConfig+0x120>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d01b      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a29      	ldr	r2, [pc, #164]	; (8008790 <TIM_Base_SetConfig+0x124>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d017      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a28      	ldr	r2, [pc, #160]	; (8008794 <TIM_Base_SetConfig+0x128>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d013      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a27      	ldr	r2, [pc, #156]	; (8008798 <TIM_Base_SetConfig+0x12c>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00f      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a26      	ldr	r2, [pc, #152]	; (800879c <TIM_Base_SetConfig+0x130>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00b      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a25      	ldr	r2, [pc, #148]	; (80087a0 <TIM_Base_SetConfig+0x134>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a24      	ldr	r2, [pc, #144]	; (80087a4 <TIM_Base_SetConfig+0x138>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a23      	ldr	r2, [pc, #140]	; (80087a8 <TIM_Base_SetConfig+0x13c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d108      	bne.n	8008730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4313      	orrs	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a0a      	ldr	r2, [pc, #40]	; (8008780 <TIM_Base_SetConfig+0x114>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d003      	beq.n	8008764 <TIM_Base_SetConfig+0xf8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a0c      	ldr	r2, [pc, #48]	; (8008790 <TIM_Base_SetConfig+0x124>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d103      	bne.n	800876c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	615a      	str	r2, [r3, #20]
}
 8008772:	bf00      	nop
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	40010000 	.word	0x40010000
 8008784:	40000400 	.word	0x40000400
 8008788:	40000800 	.word	0x40000800
 800878c:	40000c00 	.word	0x40000c00
 8008790:	40010400 	.word	0x40010400
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800
 80087a0:	40001800 	.word	0x40001800
 80087a4:	40001c00 	.word	0x40001c00
 80087a8:	40002000 	.word	0x40002000

080087ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f023 0201 	bic.w	r2, r3, #1
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0303 	bic.w	r3, r3, #3
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f023 0302 	bic.w	r3, r3, #2
 80087f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a34      	ldr	r2, [pc, #208]	; (80088d4 <TIM_OC1_SetConfig+0x128>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_OC1_SetConfig+0x64>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a33      	ldr	r2, [pc, #204]	; (80088d8 <TIM_OC1_SetConfig+0x12c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d119      	bne.n	8008844 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <TIM_OC1_SetConfig+0x7e>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d004      	beq.n	800882a <TIM_OC1_SetConfig+0x7e>
 8008820:	f241 7102 	movw	r1, #5890	; 0x1702
 8008824:	482d      	ldr	r0, [pc, #180]	; (80088dc <TIM_OC1_SetConfig+0x130>)
 8008826:	f7f9 feca 	bl	80025be <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f023 0308 	bic.w	r3, r3, #8
 8008830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f023 0304 	bic.w	r3, r3, #4
 8008842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a23      	ldr	r2, [pc, #140]	; (80088d4 <TIM_OC1_SetConfig+0x128>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d003      	beq.n	8008854 <TIM_OC1_SetConfig+0xa8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a22      	ldr	r2, [pc, #136]	; (80088d8 <TIM_OC1_SetConfig+0x12c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d12d      	bne.n	80088b0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885c:	d008      	beq.n	8008870 <TIM_OC1_SetConfig+0xc4>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <TIM_OC1_SetConfig+0xc4>
 8008866:	f241 710f 	movw	r1, #5903	; 0x170f
 800886a:	481c      	ldr	r0, [pc, #112]	; (80088dc <TIM_OC1_SetConfig+0x130>)
 800886c:	f7f9 fea7 	bl	80025be <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008878:	d008      	beq.n	800888c <TIM_OC1_SetConfig+0xe0>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d004      	beq.n	800888c <TIM_OC1_SetConfig+0xe0>
 8008882:	f241 7110 	movw	r1, #5904	; 0x1710
 8008886:	4815      	ldr	r0, [pc, #84]	; (80088dc <TIM_OC1_SetConfig+0x130>)
 8008888:	f7f9 fe99 	bl	80025be <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800889a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40010400 	.word	0x40010400
 80088dc:	08009fc8 	.word	0x08009fc8

080088e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	f023 0210 	bic.w	r2, r3, #16
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0320 	bic.w	r3, r3, #32
 800892a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a35      	ldr	r2, [pc, #212]	; (8008a10 <TIM_OC2_SetConfig+0x130>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_OC2_SetConfig+0x68>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a34      	ldr	r2, [pc, #208]	; (8008a14 <TIM_OC2_SetConfig+0x134>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d11a      	bne.n	800897e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d008      	beq.n	8008962 <TIM_OC2_SetConfig+0x82>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	2b08      	cmp	r3, #8
 8008956:	d004      	beq.n	8008962 <TIM_OC2_SetConfig+0x82>
 8008958:	f241 714d 	movw	r1, #5965	; 0x174d
 800895c:	482e      	ldr	r0, [pc, #184]	; (8008a18 <TIM_OC2_SetConfig+0x138>)
 800895e:	f7f9 fe2e 	bl	80025be <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800897c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a23      	ldr	r2, [pc, #140]	; (8008a10 <TIM_OC2_SetConfig+0x130>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d003      	beq.n	800898e <TIM_OC2_SetConfig+0xae>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a22      	ldr	r2, [pc, #136]	; (8008a14 <TIM_OC2_SetConfig+0x134>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d12f      	bne.n	80089ee <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008996:	d008      	beq.n	80089aa <TIM_OC2_SetConfig+0xca>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <TIM_OC2_SetConfig+0xca>
 80089a0:	f241 715b 	movw	r1, #5979	; 0x175b
 80089a4:	481c      	ldr	r0, [pc, #112]	; (8008a18 <TIM_OC2_SetConfig+0x138>)
 80089a6:	f7f9 fe0a 	bl	80025be <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b2:	d008      	beq.n	80089c6 <TIM_OC2_SetConfig+0xe6>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <TIM_OC2_SetConfig+0xe6>
 80089bc:	f241 715c 	movw	r1, #5980	; 0x175c
 80089c0:	4815      	ldr	r0, [pc, #84]	; (8008a18 <TIM_OC2_SetConfig+0x138>)
 80089c2:	f7f9 fdfc 	bl	80025be <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	4313      	orrs	r3, r2
 80089e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	621a      	str	r2, [r3, #32]
}
 8008a08:	bf00      	nop
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	40010000 	.word	0x40010000
 8008a14:	40010400 	.word	0x40010400
 8008a18:	08009fc8 	.word	0x08009fc8

08008a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a35      	ldr	r2, [pc, #212]	; (8008b4c <TIM_OC3_SetConfig+0x130>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d003      	beq.n	8008a82 <TIM_OC3_SetConfig+0x66>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a34      	ldr	r2, [pc, #208]	; (8008b50 <TIM_OC3_SetConfig+0x134>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d11a      	bne.n	8008ab8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <TIM_OC3_SetConfig+0x80>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d004      	beq.n	8008a9c <TIM_OC3_SetConfig+0x80>
 8008a92:	f241 7198 	movw	r1, #6040	; 0x1798
 8008a96:	482f      	ldr	r0, [pc, #188]	; (8008b54 <TIM_OC3_SetConfig+0x138>)
 8008a98:	f7f9 fd91 	bl	80025be <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a24      	ldr	r2, [pc, #144]	; (8008b4c <TIM_OC3_SetConfig+0x130>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d003      	beq.n	8008ac8 <TIM_OC3_SetConfig+0xac>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a23      	ldr	r2, [pc, #140]	; (8008b50 <TIM_OC3_SetConfig+0x134>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d12f      	bne.n	8008b28 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad0:	d008      	beq.n	8008ae4 <TIM_OC3_SetConfig+0xc8>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <TIM_OC3_SetConfig+0xc8>
 8008ada:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8008ade:	481d      	ldr	r0, [pc, #116]	; (8008b54 <TIM_OC3_SetConfig+0x138>)
 8008ae0:	f7f9 fd6d 	bl	80025be <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aec:	d008      	beq.n	8008b00 <TIM_OC3_SetConfig+0xe4>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <TIM_OC3_SetConfig+0xe4>
 8008af6:	f241 71a6 	movw	r1, #6054	; 0x17a6
 8008afa:	4816      	ldr	r0, [pc, #88]	; (8008b54 <TIM_OC3_SetConfig+0x138>)
 8008afc:	f7f9 fd5f 	bl	80025be <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	621a      	str	r2, [r3, #32]
}
 8008b42:	bf00      	nop
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40010400 	.word	0x40010400
 8008b54:	08009fc8 	.word	0x08009fc8

08008b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	031b      	lsls	r3, r3, #12
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a18      	ldr	r2, [pc, #96]	; (8008c14 <TIM_OC4_SetConfig+0xbc>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d003      	beq.n	8008bc0 <TIM_OC4_SetConfig+0x68>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <TIM_OC4_SetConfig+0xc0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d117      	bne.n	8008bf0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc8:	d008      	beq.n	8008bdc <TIM_OC4_SetConfig+0x84>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <TIM_OC4_SetConfig+0x84>
 8008bd2:	f241 71e4 	movw	r1, #6116	; 0x17e4
 8008bd6:	4811      	ldr	r0, [pc, #68]	; (8008c1c <TIM_OC4_SetConfig+0xc4>)
 8008bd8:	f7f9 fcf1 	bl	80025be <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	019b      	lsls	r3, r3, #6
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	621a      	str	r2, [r3, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40010400 	.word	0x40010400
 8008c1c:	08009fc8 	.word	0x08009fc8

08008c20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	f023 0201 	bic.w	r2, r3, #1
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4a28      	ldr	r2, [pc, #160]	; (8008cec <TIM_TI1_SetConfig+0xcc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01b      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c54:	d017      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a25      	ldr	r2, [pc, #148]	; (8008cf0 <TIM_TI1_SetConfig+0xd0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d013      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4a24      	ldr	r2, [pc, #144]	; (8008cf4 <TIM_TI1_SetConfig+0xd4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00f      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4a23      	ldr	r2, [pc, #140]	; (8008cf8 <TIM_TI1_SetConfig+0xd8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4a22      	ldr	r2, [pc, #136]	; (8008cfc <TIM_TI1_SetConfig+0xdc>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4a21      	ldr	r2, [pc, #132]	; (8008d00 <TIM_TI1_SetConfig+0xe0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_TI1_SetConfig+0x66>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4a20      	ldr	r2, [pc, #128]	; (8008d04 <TIM_TI1_SetConfig+0xe4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d101      	bne.n	8008c8a <TIM_TI1_SetConfig+0x6a>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <TIM_TI1_SetConfig+0x6c>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d008      	beq.n	8008ca2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e003      	b.n	8008caa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f043 0301 	orr.w	r3, r3, #1
 8008ca8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f023 030a 	bic.w	r3, r3, #10
 8008cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f003 030a 	and.w	r3, r3, #10
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	621a      	str	r2, [r3, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40000c00 	.word	0x40000c00
 8008cfc:	40010400 	.word	0x40010400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40001800 	.word	0x40001800

08008d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f023 0201 	bic.w	r2, r3, #1
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f023 030a 	bic.w	r3, r3, #10
 8008d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	621a      	str	r2, [r3, #32]
}
 8008d5a:	bf00      	nop
 8008d5c:	371c      	adds	r7, #28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b087      	sub	sp, #28
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	f023 0210 	bic.w	r2, r3, #16
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	021b      	lsls	r3, r3, #8
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	031b      	lsls	r3, r3, #12
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008db8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	621a      	str	r2, [r3, #32]
}
 8008dd4:	bf00      	nop
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f023 0210 	bic.w	r2, r3, #16
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	031b      	lsls	r3, r3, #12
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	621a      	str	r2, [r3, #32]
}
 8008e34:	bf00      	nop
 8008e36:	371c      	adds	r7, #28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f023 0303 	bic.w	r3, r3, #3
 8008e6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	021b      	lsls	r3, r3, #8
 8008e96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	621a      	str	r2, [r3, #32]
}
 8008eac:	bf00      	nop
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ef6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	031b      	lsls	r3, r3, #12
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	031b      	lsls	r3, r3, #12
 8008f10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	f043 0307 	orr.w	r3, r3, #7
 8008f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	609a      	str	r2, [r3, #8]
}
 8008f5c:	bf00      	nop
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	021a      	lsls	r2, r3, #8
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	609a      	str	r2, [r3, #8]
}
 8008f9c:	bf00      	nop
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a32      	ldr	r2, [pc, #200]	; (8009080 <TIM_CCxChannelCmd+0xd8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d030      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc2:	d02c      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a2f      	ldr	r2, [pc, #188]	; (8009084 <TIM_CCxChannelCmd+0xdc>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d028      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4a2e      	ldr	r2, [pc, #184]	; (8009088 <TIM_CCxChannelCmd+0xe0>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d024      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4a2d      	ldr	r2, [pc, #180]	; (800908c <TIM_CCxChannelCmd+0xe4>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d020      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4a2c      	ldr	r2, [pc, #176]	; (8009090 <TIM_CCxChannelCmd+0xe8>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d01c      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a2b      	ldr	r2, [pc, #172]	; (8009094 <TIM_CCxChannelCmd+0xec>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d018      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4a2a      	ldr	r2, [pc, #168]	; (8009098 <TIM_CCxChannelCmd+0xf0>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d014      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4a29      	ldr	r2, [pc, #164]	; (800909c <TIM_CCxChannelCmd+0xf4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d010      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a28      	ldr	r2, [pc, #160]	; (80090a0 <TIM_CCxChannelCmd+0xf8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00c      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a27      	ldr	r2, [pc, #156]	; (80090a4 <TIM_CCxChannelCmd+0xfc>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d008      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4a26      	ldr	r2, [pc, #152]	; (80090a8 <TIM_CCxChannelCmd+0x100>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d004      	beq.n	800901e <TIM_CCxChannelCmd+0x76>
 8009014:	f641 11cc 	movw	r1, #6604	; 0x19cc
 8009018:	4824      	ldr	r0, [pc, #144]	; (80090ac <TIM_CCxChannelCmd+0x104>)
 800901a:	f7f9 fad0 	bl	80025be <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d010      	beq.n	8009046 <TIM_CCxChannelCmd+0x9e>
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d00d      	beq.n	8009046 <TIM_CCxChannelCmd+0x9e>
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b08      	cmp	r3, #8
 800902e:	d00a      	beq.n	8009046 <TIM_CCxChannelCmd+0x9e>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b0c      	cmp	r3, #12
 8009034:	d007      	beq.n	8009046 <TIM_CCxChannelCmd+0x9e>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b3c      	cmp	r3, #60	; 0x3c
 800903a:	d004      	beq.n	8009046 <TIM_CCxChannelCmd+0x9e>
 800903c:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8009040:	481a      	ldr	r0, [pc, #104]	; (80090ac <TIM_CCxChannelCmd+0x104>)
 8009042:	f7f9 fabc 	bl	80025be <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f003 031f 	and.w	r3, r3, #31
 800904c:	2201      	movs	r2, #1
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6a1a      	ldr	r2, [r3, #32]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	43db      	mvns	r3, r3
 800905c:	401a      	ands	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a1a      	ldr	r2, [r3, #32]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	6879      	ldr	r1, [r7, #4]
 800906e:	fa01 f303 	lsl.w	r3, r1, r3
 8009072:	431a      	orrs	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	621a      	str	r2, [r3, #32]
}
 8009078:	bf00      	nop
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	40010000 	.word	0x40010000
 8009084:	40000400 	.word	0x40000400
 8009088:	40000800 	.word	0x40000800
 800908c:	40000c00 	.word	0x40000c00
 8009090:	40010400 	.word	0x40010400
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800
 80090a0:	40001800 	.word	0x40001800
 80090a4:	40001c00 	.word	0x40001c00
 80090a8:	40002000 	.word	0x40002000
 80090ac:	08009fc8 	.word	0x08009fc8

080090b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a61      	ldr	r2, [pc, #388]	; (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d027      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090cc:	d022      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a5d      	ldr	r2, [pc, #372]	; (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01d      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a5b      	ldr	r2, [pc, #364]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a5a      	ldr	r2, [pc, #360]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a58      	ldr	r2, [pc, #352]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a57      	ldr	r2, [pc, #348]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a55      	ldr	r2, [pc, #340]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800910a:	f240 6164 	movw	r1, #1636	; 0x664
 800910e:	4854      	ldr	r0, [pc, #336]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009110:	f7f9 fa55 	bl	80025be <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d020      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b10      	cmp	r3, #16
 8009122:	d01c      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b20      	cmp	r3, #32
 800912a:	d018      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b30      	cmp	r3, #48	; 0x30
 8009132:	d014      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b40      	cmp	r3, #64	; 0x40
 800913a:	d010      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b50      	cmp	r3, #80	; 0x50
 8009142:	d00c      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b60      	cmp	r3, #96	; 0x60
 800914a:	d008      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b70      	cmp	r3, #112	; 0x70
 8009152:	d004      	beq.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009154:	f240 6165 	movw	r1, #1637	; 0x665
 8009158:	4841      	ldr	r0, [pc, #260]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800915a:	f7f9 fa30 	bl	80025be <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d008      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800916e:	f240 6166 	movw	r1, #1638	; 0x666
 8009172:	483b      	ldr	r0, [pc, #236]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8009174:	f7f9 fa23 	bl	80025be <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009182:	2302      	movs	r3, #2
 8009184:	e05a      	b.n	800923c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d022      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d2:	d01d      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a1b      	ldr	r2, [pc, #108]	; (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d018      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a1a      	ldr	r2, [pc, #104]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a18      	ldr	r2, [pc, #96]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00e      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a19      	ldr	r2, [pc, #100]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d009      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a18      	ldr	r2, [pc, #96]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d004      	beq.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a17      	ldr	r2, [pc, #92]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d10c      	bne.n	800922a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	4313      	orrs	r3, r2
 8009220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	40010000 	.word	0x40010000
 8009248:	40000400 	.word	0x40000400
 800924c:	40000800 	.word	0x40000800
 8009250:	40000c00 	.word	0x40000c00
 8009254:	40001000 	.word	0x40001000
 8009258:	40001400 	.word	0x40001400
 800925c:	40010400 	.word	0x40010400
 8009260:	0800a000 	.word	0x0800a000
 8009264:	40014000 	.word	0x40014000
 8009268:	40001800 	.word	0x40001800

0800926c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a5e      	ldr	r2, [pc, #376]	; (80093f8 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d009      	beq.n	8009298 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a5c      	ldr	r2, [pc, #368]	; (80093fc <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800928e:	f240 61a1 	movw	r1, #1697	; 0x6a1
 8009292:	485b      	ldr	r0, [pc, #364]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009294:	f7f9 f993 	bl	80025be <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092a0:	d008      	beq.n	80092b4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80092aa:	f240 61a2 	movw	r1, #1698	; 0x6a2
 80092ae:	4854      	ldr	r0, [pc, #336]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092b0:	f7f9 f985 	bl	80025be <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092bc:	d008      	beq.n	80092d0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80092c6:	f240 61a3 	movw	r1, #1699	; 0x6a3
 80092ca:	484d      	ldr	r0, [pc, #308]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092cc:	f7f9 f977 	bl	80025be <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d013      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e0:	d00e      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ea:	d009      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092f4:	d004      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80092f6:	f240 61a4 	movw	r1, #1700	; 0x6a4
 80092fa:	4841      	ldr	r0, [pc, #260]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80092fc:	f7f9 f95f 	bl	80025be <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	2bff      	cmp	r3, #255	; 0xff
 8009306:	d904      	bls.n	8009312 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8009308:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800930c:	483c      	ldr	r0, [pc, #240]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800930e:	f7f9 f956 	bl	80025be <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931a:	d008      	beq.n	800932e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009324:	f240 61a6 	movw	r1, #1702	; 0x6a6
 8009328:	4835      	ldr	r0, [pc, #212]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800932a:	f7f9 f948 	bl	80025be <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800933e:	d004      	beq.n	800934a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009340:	f240 61a7 	movw	r1, #1703	; 0x6a7
 8009344:	482e      	ldr	r0, [pc, #184]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009346:	f7f9 f93a 	bl	80025be <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009352:	d008      	beq.n	8009366 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800935c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 8009360:	4827      	ldr	r0, [pc, #156]	; (8009400 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8009362:	f7f9 f92c 	bl	80025be <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8009370:	2302      	movs	r3, #2
 8009372:	e03d      	b.n	80093f0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40010400 	.word	0x40010400
 8009400:	0800a000 	.word	0x0800a000

08009404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e0be      	b.n	8009594 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d031      	beq.n	8009482 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a5e      	ldr	r2, [pc, #376]	; (800959c <HAL_UART_Init+0x198>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d013      	beq.n	8009450 <HAL_UART_Init+0x4c>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a5c      	ldr	r2, [pc, #368]	; (80095a0 <HAL_UART_Init+0x19c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d00e      	beq.n	8009450 <HAL_UART_Init+0x4c>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a5b      	ldr	r2, [pc, #364]	; (80095a4 <HAL_UART_Init+0x1a0>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d009      	beq.n	8009450 <HAL_UART_Init+0x4c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a59      	ldr	r2, [pc, #356]	; (80095a8 <HAL_UART_Init+0x1a4>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d004      	beq.n	8009450 <HAL_UART_Init+0x4c>
 8009446:	f240 114b 	movw	r1, #331	; 0x14b
 800944a:	4858      	ldr	r0, [pc, #352]	; (80095ac <HAL_UART_Init+0x1a8>)
 800944c:	f7f9 f8b7 	bl	80025be <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d041      	beq.n	80094dc <HAL_UART_Init+0xd8>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009460:	d03c      	beq.n	80094dc <HAL_UART_Init+0xd8>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800946a:	d037      	beq.n	80094dc <HAL_UART_Init+0xd8>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009474:	d032      	beq.n	80094dc <HAL_UART_Init+0xd8>
 8009476:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800947a:	484c      	ldr	r0, [pc, #304]	; (80095ac <HAL_UART_Init+0x1a8>)
 800947c:	f7f9 f89f 	bl	80025be <assert_failed>
 8009480:	e02c      	b.n	80094dc <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a45      	ldr	r2, [pc, #276]	; (800959c <HAL_UART_Init+0x198>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d027      	beq.n	80094dc <HAL_UART_Init+0xd8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a43      	ldr	r2, [pc, #268]	; (80095a0 <HAL_UART_Init+0x19c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d022      	beq.n	80094dc <HAL_UART_Init+0xd8>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a42      	ldr	r2, [pc, #264]	; (80095a4 <HAL_UART_Init+0x1a0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d01d      	beq.n	80094dc <HAL_UART_Init+0xd8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a42      	ldr	r2, [pc, #264]	; (80095b0 <HAL_UART_Init+0x1ac>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d018      	beq.n	80094dc <HAL_UART_Init+0xd8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a41      	ldr	r2, [pc, #260]	; (80095b4 <HAL_UART_Init+0x1b0>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d013      	beq.n	80094dc <HAL_UART_Init+0xd8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a3b      	ldr	r2, [pc, #236]	; (80095a8 <HAL_UART_Init+0x1a4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00e      	beq.n	80094dc <HAL_UART_Init+0xd8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a3d      	ldr	r2, [pc, #244]	; (80095b8 <HAL_UART_Init+0x1b4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d009      	beq.n	80094dc <HAL_UART_Init+0xd8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a3b      	ldr	r2, [pc, #236]	; (80095bc <HAL_UART_Init+0x1b8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <HAL_UART_Init+0xd8>
 80094d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80094d6:	4835      	ldr	r0, [pc, #212]	; (80095ac <HAL_UART_Init+0x1a8>)
 80094d8:	f7f9 f871 	bl	80025be <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <HAL_UART_Init+0xf4>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ec:	d004      	beq.n	80094f8 <HAL_UART_Init+0xf4>
 80094ee:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80094f2:	482e      	ldr	r0, [pc, #184]	; (80095ac <HAL_UART_Init+0x1a8>)
 80094f4:	f7f9 f863 	bl	80025be <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d009      	beq.n	8009514 <HAL_UART_Init+0x110>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009508:	d004      	beq.n	8009514 <HAL_UART_Init+0x110>
 800950a:	f240 1153 	movw	r1, #339	; 0x153
 800950e:	4827      	ldr	r0, [pc, #156]	; (80095ac <HAL_UART_Init+0x1a8>)
 8009510:	f7f9 f855 	bl	80025be <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d106      	bne.n	800952e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7f9 fcd1 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2224      	movs	r2, #36	; 0x24
 8009532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009544:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f83a 	bl	80095c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800955a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695a      	ldr	r2, [r3, #20]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800956a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800957a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2220      	movs	r2, #32
 800958e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40011000 	.word	0x40011000
 80095a0:	40004400 	.word	0x40004400
 80095a4:	40004800 	.word	0x40004800
 80095a8:	40011400 	.word	0x40011400
 80095ac:	0800a03c 	.word	0x0800a03c
 80095b0:	40004c00 	.word	0x40004c00
 80095b4:	40005000 	.word	0x40005000
 80095b8:	40007800 	.word	0x40007800
 80095bc:	40007c00 	.word	0x40007c00

080095c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	b0bd      	sub	sp, #244	; 0xf4
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80095cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	4bae      	ldr	r3, [pc, #696]	; (800988c <UART_SetConfig+0x2cc>)
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d904      	bls.n	80095e2 <UART_SetConfig+0x22>
 80095d8:	f640 31fb 	movw	r1, #3067	; 0xbfb
 80095dc:	48ac      	ldr	r0, [pc, #688]	; (8009890 <UART_SetConfig+0x2d0>)
 80095de:	f7f8 ffee 	bl	80025be <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <UART_SetConfig+0x42>
 80095ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f6:	d004      	beq.n	8009602 <UART_SetConfig+0x42>
 80095f8:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80095fc:	48a4      	ldr	r0, [pc, #656]	; (8009890 <UART_SetConfig+0x2d0>)
 80095fe:	f7f8 ffde 	bl	80025be <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d010      	beq.n	800962e <UART_SetConfig+0x6e>
 800960c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009616:	d00a      	beq.n	800962e <UART_SetConfig+0x6e>
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009622:	d004      	beq.n	800962e <UART_SetConfig+0x6e>
 8009624:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8009628:	4899      	ldr	r0, [pc, #612]	; (8009890 <UART_SetConfig+0x2d0>)
 800962a:	f7f8 ffc8 	bl	80025be <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009632:	695a      	ldr	r2, [r3, #20]
 8009634:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8009638:	4013      	ands	r3, r2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d104      	bne.n	8009648 <UART_SetConfig+0x88>
 800963e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <UART_SetConfig+0x92>
 8009648:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800964c:	4890      	ldr	r0, [pc, #576]	; (8009890 <UART_SetConfig+0x2d0>)
 800964e:	f7f8 ffb6 	bl	80025be <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	68d9      	ldr	r1, [r3, #12]
 8009664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	ea40 0301 	orr.w	r3, r0, r1
 800966e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	431a      	orrs	r2, r3
 800967e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	431a      	orrs	r2, r3
 8009686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	4313      	orrs	r3, r2
 800968e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800969e:	f021 010c 	bic.w	r1, r1, #12
 80096a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096ac:	430b      	orrs	r3, r1
 80096ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c0:	6999      	ldr	r1, [r3, #24]
 80096c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	ea40 0301 	orr.w	r3, r0, r1
 80096cc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096d8:	f040 81a9 	bne.w	8009a2e <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	4b6c      	ldr	r3, [pc, #432]	; (8009894 <UART_SetConfig+0x2d4>)
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d006      	beq.n	80096f6 <UART_SetConfig+0x136>
 80096e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b6a      	ldr	r3, [pc, #424]	; (8009898 <UART_SetConfig+0x2d8>)
 80096f0:	429a      	cmp	r2, r3
 80096f2:	f040 80d5 	bne.w	80098a0 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096f6:	f7fc ff9f 	bl	8006638 <HAL_RCC_GetPCLK2Freq>
 80096fa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009702:	461c      	mov	r4, r3
 8009704:	f04f 0500 	mov.w	r5, #0
 8009708:	4622      	mov	r2, r4
 800970a:	462b      	mov	r3, r5
 800970c:	1891      	adds	r1, r2, r2
 800970e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009712:	415b      	adcs	r3, r3
 8009714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009718:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800971c:	1912      	adds	r2, r2, r4
 800971e:	eb45 0303 	adc.w	r3, r5, r3
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f04f 0100 	mov.w	r1, #0
 800972a:	00d9      	lsls	r1, r3, #3
 800972c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009730:	00d0      	lsls	r0, r2, #3
 8009732:	4602      	mov	r2, r0
 8009734:	460b      	mov	r3, r1
 8009736:	1911      	adds	r1, r2, r4
 8009738:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800973c:	416b      	adcs	r3, r5
 800973e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	461a      	mov	r2, r3
 800974a:	f04f 0300 	mov.w	r3, #0
 800974e:	1891      	adds	r1, r2, r2
 8009750:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009754:	415b      	adcs	r3, r3
 8009756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800975a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800975e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009762:	f7f7 f9e3 	bl	8000b2c <__aeabi_uldivmod>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4b4c      	ldr	r3, [pc, #304]	; (800989c <UART_SetConfig+0x2dc>)
 800976c:	fba3 2302 	umull	r2, r3, r3, r2
 8009770:	095b      	lsrs	r3, r3, #5
 8009772:	011e      	lsls	r6, r3, #4
 8009774:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009778:	461c      	mov	r4, r3
 800977a:	f04f 0500 	mov.w	r5, #0
 800977e:	4622      	mov	r2, r4
 8009780:	462b      	mov	r3, r5
 8009782:	1891      	adds	r1, r2, r2
 8009784:	67b9      	str	r1, [r7, #120]	; 0x78
 8009786:	415b      	adcs	r3, r3
 8009788:	67fb      	str	r3, [r7, #124]	; 0x7c
 800978a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800978e:	1912      	adds	r2, r2, r4
 8009790:	eb45 0303 	adc.w	r3, r5, r3
 8009794:	f04f 0000 	mov.w	r0, #0
 8009798:	f04f 0100 	mov.w	r1, #0
 800979c:	00d9      	lsls	r1, r3, #3
 800979e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097a2:	00d0      	lsls	r0, r2, #3
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	1911      	adds	r1, r2, r4
 80097aa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80097ae:	416b      	adcs	r3, r5
 80097b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80097b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f04f 0300 	mov.w	r3, #0
 80097c0:	1891      	adds	r1, r2, r2
 80097c2:	6739      	str	r1, [r7, #112]	; 0x70
 80097c4:	415b      	adcs	r3, r3
 80097c6:	677b      	str	r3, [r7, #116]	; 0x74
 80097c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80097cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80097d0:	f7f7 f9ac 	bl	8000b2c <__aeabi_uldivmod>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4b30      	ldr	r3, [pc, #192]	; (800989c <UART_SetConfig+0x2dc>)
 80097da:	fba3 1302 	umull	r1, r3, r3, r2
 80097de:	095b      	lsrs	r3, r3, #5
 80097e0:	2164      	movs	r1, #100	; 0x64
 80097e2:	fb01 f303 	mul.w	r3, r1, r3
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	3332      	adds	r3, #50	; 0x32
 80097ec:	4a2b      	ldr	r2, [pc, #172]	; (800989c <UART_SetConfig+0x2dc>)
 80097ee:	fba2 2303 	umull	r2, r3, r2, r3
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097fa:	441e      	add	r6, r3
 80097fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009800:	4618      	mov	r0, r3
 8009802:	f04f 0100 	mov.w	r1, #0
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	1894      	adds	r4, r2, r2
 800980c:	66bc      	str	r4, [r7, #104]	; 0x68
 800980e:	415b      	adcs	r3, r3
 8009810:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009812:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009816:	1812      	adds	r2, r2, r0
 8009818:	eb41 0303 	adc.w	r3, r1, r3
 800981c:	f04f 0400 	mov.w	r4, #0
 8009820:	f04f 0500 	mov.w	r5, #0
 8009824:	00dd      	lsls	r5, r3, #3
 8009826:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800982a:	00d4      	lsls	r4, r2, #3
 800982c:	4622      	mov	r2, r4
 800982e:	462b      	mov	r3, r5
 8009830:	1814      	adds	r4, r2, r0
 8009832:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009836:	414b      	adcs	r3, r1
 8009838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800983c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	461a      	mov	r2, r3
 8009844:	f04f 0300 	mov.w	r3, #0
 8009848:	1891      	adds	r1, r2, r2
 800984a:	6639      	str	r1, [r7, #96]	; 0x60
 800984c:	415b      	adcs	r3, r3
 800984e:	667b      	str	r3, [r7, #100]	; 0x64
 8009850:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009854:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009858:	f7f7 f968 	bl	8000b2c <__aeabi_uldivmod>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <UART_SetConfig+0x2dc>)
 8009862:	fba3 1302 	umull	r1, r3, r3, r2
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	2164      	movs	r1, #100	; 0x64
 800986a:	fb01 f303 	mul.w	r3, r1, r3
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	3332      	adds	r3, #50	; 0x32
 8009874:	4a09      	ldr	r2, [pc, #36]	; (800989c <UART_SetConfig+0x2dc>)
 8009876:	fba2 2303 	umull	r2, r3, r2, r3
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	f003 0207 	and.w	r2, r3, #7
 8009880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4432      	add	r2, r6
 8009888:	609a      	str	r2, [r3, #8]
 800988a:	e277      	b.n	8009d7c <UART_SetConfig+0x7bc>
 800988c:	00a037a0 	.word	0x00a037a0
 8009890:	0800a03c 	.word	0x0800a03c
 8009894:	40011000 	.word	0x40011000
 8009898:	40011400 	.word	0x40011400
 800989c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098a0:	f7fc feb6 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 80098a4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098ac:	461c      	mov	r4, r3
 80098ae:	f04f 0500 	mov.w	r5, #0
 80098b2:	4622      	mov	r2, r4
 80098b4:	462b      	mov	r3, r5
 80098b6:	1891      	adds	r1, r2, r2
 80098b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80098ba:	415b      	adcs	r3, r3
 80098bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098c2:	1912      	adds	r2, r2, r4
 80098c4:	eb45 0303 	adc.w	r3, r5, r3
 80098c8:	f04f 0000 	mov.w	r0, #0
 80098cc:	f04f 0100 	mov.w	r1, #0
 80098d0:	00d9      	lsls	r1, r3, #3
 80098d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098d6:	00d0      	lsls	r0, r2, #3
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	1911      	adds	r1, r2, r4
 80098de:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80098e2:	416b      	adcs	r3, r5
 80098e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	1891      	adds	r1, r2, r2
 80098f6:	6539      	str	r1, [r7, #80]	; 0x50
 80098f8:	415b      	adcs	r3, r3
 80098fa:	657b      	str	r3, [r7, #84]	; 0x54
 80098fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009900:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009904:	f7f7 f912 	bl	8000b2c <__aeabi_uldivmod>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4bb3      	ldr	r3, [pc, #716]	; (8009bdc <UART_SetConfig+0x61c>)
 800990e:	fba3 2302 	umull	r2, r3, r3, r2
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	011e      	lsls	r6, r3, #4
 8009916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800991a:	461c      	mov	r4, r3
 800991c:	f04f 0500 	mov.w	r5, #0
 8009920:	4622      	mov	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	1891      	adds	r1, r2, r2
 8009926:	64b9      	str	r1, [r7, #72]	; 0x48
 8009928:	415b      	adcs	r3, r3
 800992a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800992c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009930:	1912      	adds	r2, r2, r4
 8009932:	eb45 0303 	adc.w	r3, r5, r3
 8009936:	f04f 0000 	mov.w	r0, #0
 800993a:	f04f 0100 	mov.w	r1, #0
 800993e:	00d9      	lsls	r1, r3, #3
 8009940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009944:	00d0      	lsls	r0, r2, #3
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	1911      	adds	r1, r2, r4
 800994c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009950:	416b      	adcs	r3, r5
 8009952:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	461a      	mov	r2, r3
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	1891      	adds	r1, r2, r2
 8009964:	6439      	str	r1, [r7, #64]	; 0x40
 8009966:	415b      	adcs	r3, r3
 8009968:	647b      	str	r3, [r7, #68]	; 0x44
 800996a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800996e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009972:	f7f7 f8db 	bl	8000b2c <__aeabi_uldivmod>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4b98      	ldr	r3, [pc, #608]	; (8009bdc <UART_SetConfig+0x61c>)
 800997c:	fba3 1302 	umull	r1, r3, r3, r2
 8009980:	095b      	lsrs	r3, r3, #5
 8009982:	2164      	movs	r1, #100	; 0x64
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	3332      	adds	r3, #50	; 0x32
 800998e:	4a93      	ldr	r2, [pc, #588]	; (8009bdc <UART_SetConfig+0x61c>)
 8009990:	fba2 2303 	umull	r2, r3, r2, r3
 8009994:	095b      	lsrs	r3, r3, #5
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800999c:	441e      	add	r6, r3
 800999e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099a2:	4618      	mov	r0, r3
 80099a4:	f04f 0100 	mov.w	r1, #0
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	1894      	adds	r4, r2, r2
 80099ae:	63bc      	str	r4, [r7, #56]	; 0x38
 80099b0:	415b      	adcs	r3, r3
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099b8:	1812      	adds	r2, r2, r0
 80099ba:	eb41 0303 	adc.w	r3, r1, r3
 80099be:	f04f 0400 	mov.w	r4, #0
 80099c2:	f04f 0500 	mov.w	r5, #0
 80099c6:	00dd      	lsls	r5, r3, #3
 80099c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099cc:	00d4      	lsls	r4, r2, #3
 80099ce:	4622      	mov	r2, r4
 80099d0:	462b      	mov	r3, r5
 80099d2:	1814      	adds	r4, r2, r0
 80099d4:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80099d8:	414b      	adcs	r3, r1
 80099da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	461a      	mov	r2, r3
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	1891      	adds	r1, r2, r2
 80099ec:	6339      	str	r1, [r7, #48]	; 0x30
 80099ee:	415b      	adcs	r3, r3
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
 80099f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80099f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099fa:	f7f7 f897 	bl	8000b2c <__aeabi_uldivmod>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4b76      	ldr	r3, [pc, #472]	; (8009bdc <UART_SetConfig+0x61c>)
 8009a04:	fba3 1302 	umull	r1, r3, r3, r2
 8009a08:	095b      	lsrs	r3, r3, #5
 8009a0a:	2164      	movs	r1, #100	; 0x64
 8009a0c:	fb01 f303 	mul.w	r3, r1, r3
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	3332      	adds	r3, #50	; 0x32
 8009a16:	4a71      	ldr	r2, [pc, #452]	; (8009bdc <UART_SetConfig+0x61c>)
 8009a18:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1c:	095b      	lsrs	r3, r3, #5
 8009a1e:	f003 0207 	and.w	r2, r3, #7
 8009a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4432      	add	r2, r6
 8009a2a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009a2c:	e1a6      	b.n	8009d7c <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4b6a      	ldr	r3, [pc, #424]	; (8009be0 <UART_SetConfig+0x620>)
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d006      	beq.n	8009a48 <UART_SetConfig+0x488>
 8009a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	4b68      	ldr	r3, [pc, #416]	; (8009be4 <UART_SetConfig+0x624>)
 8009a42:	429a      	cmp	r2, r3
 8009a44:	f040 80d0 	bne.w	8009be8 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a48:	f7fc fdf6 	bl	8006638 <HAL_RCC_GetPCLK2Freq>
 8009a4c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a54:	461c      	mov	r4, r3
 8009a56:	f04f 0500 	mov.w	r5, #0
 8009a5a:	4622      	mov	r2, r4
 8009a5c:	462b      	mov	r3, r5
 8009a5e:	1891      	adds	r1, r2, r2
 8009a60:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a62:	415b      	adcs	r3, r3
 8009a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a6a:	1912      	adds	r2, r2, r4
 8009a6c:	eb45 0303 	adc.w	r3, r5, r3
 8009a70:	f04f 0000 	mov.w	r0, #0
 8009a74:	f04f 0100 	mov.w	r1, #0
 8009a78:	00d9      	lsls	r1, r3, #3
 8009a7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a7e:	00d0      	lsls	r0, r2, #3
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	eb12 0a04 	adds.w	sl, r2, r4
 8009a88:	eb43 0b05 	adc.w	fp, r3, r5
 8009a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f04f 0100 	mov.w	r1, #0
 8009a98:	f04f 0200 	mov.w	r2, #0
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	008b      	lsls	r3, r1, #2
 8009aa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009aa6:	0082      	lsls	r2, r0, #2
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	4659      	mov	r1, fp
 8009aac:	f7f7 f83e 	bl	8000b2c <__aeabi_uldivmod>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4b49      	ldr	r3, [pc, #292]	; (8009bdc <UART_SetConfig+0x61c>)
 8009ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	011e      	lsls	r6, r3, #4
 8009abe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f04f 0100 	mov.w	r1, #0
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	1894      	adds	r4, r2, r2
 8009ace:	623c      	str	r4, [r7, #32]
 8009ad0:	415b      	adcs	r3, r3
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ad8:	1812      	adds	r2, r2, r0
 8009ada:	eb41 0303 	adc.w	r3, r1, r3
 8009ade:	f04f 0400 	mov.w	r4, #0
 8009ae2:	f04f 0500 	mov.w	r5, #0
 8009ae6:	00dd      	lsls	r5, r3, #3
 8009ae8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009aec:	00d4      	lsls	r4, r2, #3
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	1814      	adds	r4, r2, r0
 8009af4:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009af8:	414b      	adcs	r3, r1
 8009afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f04f 0100 	mov.w	r1, #0
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	008b      	lsls	r3, r1, #2
 8009b14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b18:	0082      	lsls	r2, r0, #2
 8009b1a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009b1e:	f7f7 f805 	bl	8000b2c <__aeabi_uldivmod>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4b2d      	ldr	r3, [pc, #180]	; (8009bdc <UART_SetConfig+0x61c>)
 8009b28:	fba3 1302 	umull	r1, r3, r3, r2
 8009b2c:	095b      	lsrs	r3, r3, #5
 8009b2e:	2164      	movs	r1, #100	; 0x64
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	3332      	adds	r3, #50	; 0x32
 8009b3a:	4a28      	ldr	r2, [pc, #160]	; (8009bdc <UART_SetConfig+0x61c>)
 8009b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b40:	095b      	lsrs	r3, r3, #5
 8009b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b46:	441e      	add	r6, r3
 8009b48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f04f 0100 	mov.w	r1, #0
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	1894      	adds	r4, r2, r2
 8009b58:	61bc      	str	r4, [r7, #24]
 8009b5a:	415b      	adcs	r3, r3
 8009b5c:	61fb      	str	r3, [r7, #28]
 8009b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b62:	1812      	adds	r2, r2, r0
 8009b64:	eb41 0303 	adc.w	r3, r1, r3
 8009b68:	f04f 0400 	mov.w	r4, #0
 8009b6c:	f04f 0500 	mov.w	r5, #0
 8009b70:	00dd      	lsls	r5, r3, #3
 8009b72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b76:	00d4      	lsls	r4, r2, #3
 8009b78:	4622      	mov	r2, r4
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	1814      	adds	r4, r2, r0
 8009b7e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009b82:	414b      	adcs	r3, r1
 8009b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f04f 0100 	mov.w	r1, #0
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	f04f 0300 	mov.w	r3, #0
 8009b9c:	008b      	lsls	r3, r1, #2
 8009b9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ba2:	0082      	lsls	r2, r0, #2
 8009ba4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009ba8:	f7f6 ffc0 	bl	8000b2c <__aeabi_uldivmod>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <UART_SetConfig+0x61c>)
 8009bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	2164      	movs	r1, #100	; 0x64
 8009bba:	fb01 f303 	mul.w	r3, r1, r3
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	3332      	adds	r3, #50	; 0x32
 8009bc4:	4a05      	ldr	r2, [pc, #20]	; (8009bdc <UART_SetConfig+0x61c>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	095b      	lsrs	r3, r3, #5
 8009bcc:	f003 020f 	and.w	r2, r3, #15
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4432      	add	r2, r6
 8009bd8:	609a      	str	r2, [r3, #8]
 8009bda:	e0cf      	b.n	8009d7c <UART_SetConfig+0x7bc>
 8009bdc:	51eb851f 	.word	0x51eb851f
 8009be0:	40011000 	.word	0x40011000
 8009be4:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8009be8:	f7fc fd12 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8009bec:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bf4:	461c      	mov	r4, r3
 8009bf6:	f04f 0500 	mov.w	r5, #0
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	1891      	adds	r1, r2, r2
 8009c00:	6139      	str	r1, [r7, #16]
 8009c02:	415b      	adcs	r3, r3
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c0a:	1912      	adds	r2, r2, r4
 8009c0c:	eb45 0303 	adc.w	r3, r5, r3
 8009c10:	f04f 0000 	mov.w	r0, #0
 8009c14:	f04f 0100 	mov.w	r1, #0
 8009c18:	00d9      	lsls	r1, r3, #3
 8009c1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c1e:	00d0      	lsls	r0, r2, #3
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	eb12 0804 	adds.w	r8, r2, r4
 8009c28:	eb43 0905 	adc.w	r9, r3, r5
 8009c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f04f 0100 	mov.w	r1, #0
 8009c38:	f04f 0200 	mov.w	r2, #0
 8009c3c:	f04f 0300 	mov.w	r3, #0
 8009c40:	008b      	lsls	r3, r1, #2
 8009c42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c46:	0082      	lsls	r2, r0, #2
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 ff6e 	bl	8000b2c <__aeabi_uldivmod>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4b4c      	ldr	r3, [pc, #304]	; (8009d88 <UART_SetConfig+0x7c8>)
 8009c56:	fba3 2302 	umull	r2, r3, r3, r2
 8009c5a:	095b      	lsrs	r3, r3, #5
 8009c5c:	011e      	lsls	r6, r3, #4
 8009c5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c62:	4618      	mov	r0, r3
 8009c64:	f04f 0100 	mov.w	r1, #0
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	1894      	adds	r4, r2, r2
 8009c6e:	60bc      	str	r4, [r7, #8]
 8009c70:	415b      	adcs	r3, r3
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c78:	1812      	adds	r2, r2, r0
 8009c7a:	eb41 0303 	adc.w	r3, r1, r3
 8009c7e:	f04f 0400 	mov.w	r4, #0
 8009c82:	f04f 0500 	mov.w	r5, #0
 8009c86:	00dd      	lsls	r5, r3, #3
 8009c88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c8c:	00d4      	lsls	r4, r2, #3
 8009c8e:	4622      	mov	r2, r4
 8009c90:	462b      	mov	r3, r5
 8009c92:	1814      	adds	r4, r2, r0
 8009c94:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009c98:	414b      	adcs	r3, r1
 8009c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f04f 0100 	mov.w	r1, #0
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	008b      	lsls	r3, r1, #2
 8009cb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009cb8:	0082      	lsls	r2, r0, #2
 8009cba:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009cbe:	f7f6 ff35 	bl	8000b2c <__aeabi_uldivmod>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4b30      	ldr	r3, [pc, #192]	; (8009d88 <UART_SetConfig+0x7c8>)
 8009cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ccc:	095b      	lsrs	r3, r3, #5
 8009cce:	2164      	movs	r1, #100	; 0x64
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	3332      	adds	r3, #50	; 0x32
 8009cda:	4a2b      	ldr	r2, [pc, #172]	; (8009d88 <UART_SetConfig+0x7c8>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ce6:	441e      	add	r6, r3
 8009ce8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cec:	4618      	mov	r0, r3
 8009cee:	f04f 0100 	mov.w	r1, #0
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	1894      	adds	r4, r2, r2
 8009cf8:	603c      	str	r4, [r7, #0]
 8009cfa:	415b      	adcs	r3, r3
 8009cfc:	607b      	str	r3, [r7, #4]
 8009cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d02:	1812      	adds	r2, r2, r0
 8009d04:	eb41 0303 	adc.w	r3, r1, r3
 8009d08:	f04f 0400 	mov.w	r4, #0
 8009d0c:	f04f 0500 	mov.w	r5, #0
 8009d10:	00dd      	lsls	r5, r3, #3
 8009d12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d16:	00d4      	lsls	r4, r2, #3
 8009d18:	4622      	mov	r2, r4
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	1814      	adds	r4, r2, r0
 8009d1e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009d22:	414b      	adcs	r3, r1
 8009d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f04f 0100 	mov.w	r1, #0
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	008b      	lsls	r3, r1, #2
 8009d3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009d42:	0082      	lsls	r2, r0, #2
 8009d44:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009d48:	f7f6 fef0 	bl	8000b2c <__aeabi_uldivmod>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4b0d      	ldr	r3, [pc, #52]	; (8009d88 <UART_SetConfig+0x7c8>)
 8009d52:	fba3 1302 	umull	r1, r3, r3, r2
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	2164      	movs	r1, #100	; 0x64
 8009d5a:	fb01 f303 	mul.w	r3, r1, r3
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	3332      	adds	r3, #50	; 0x32
 8009d64:	4a08      	ldr	r2, [pc, #32]	; (8009d88 <UART_SetConfig+0x7c8>)
 8009d66:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6a:	095b      	lsrs	r3, r3, #5
 8009d6c:	f003 020f 	and.w	r2, r3, #15
 8009d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4432      	add	r2, r6
 8009d78:	609a      	str	r2, [r3, #8]
}
 8009d7a:	e7ff      	b.n	8009d7c <UART_SetConfig+0x7bc>
 8009d7c:	bf00      	nop
 8009d7e:	37f4      	adds	r7, #244	; 0xf4
 8009d80:	46bd      	mov	sp, r7
 8009d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d86:	bf00      	nop
 8009d88:	51eb851f 	.word	0x51eb851f

08009d8c <__libc_init_array>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4d0d      	ldr	r5, [pc, #52]	; (8009dc4 <__libc_init_array+0x38>)
 8009d90:	4c0d      	ldr	r4, [pc, #52]	; (8009dc8 <__libc_init_array+0x3c>)
 8009d92:	1b64      	subs	r4, r4, r5
 8009d94:	10a4      	asrs	r4, r4, #2
 8009d96:	2600      	movs	r6, #0
 8009d98:	42a6      	cmp	r6, r4
 8009d9a:	d109      	bne.n	8009db0 <__libc_init_array+0x24>
 8009d9c:	4d0b      	ldr	r5, [pc, #44]	; (8009dcc <__libc_init_array+0x40>)
 8009d9e:	4c0c      	ldr	r4, [pc, #48]	; (8009dd0 <__libc_init_array+0x44>)
 8009da0:	f000 f820 	bl	8009de4 <_init>
 8009da4:	1b64      	subs	r4, r4, r5
 8009da6:	10a4      	asrs	r4, r4, #2
 8009da8:	2600      	movs	r6, #0
 8009daa:	42a6      	cmp	r6, r4
 8009dac:	d105      	bne.n	8009dba <__libc_init_array+0x2e>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db4:	4798      	blx	r3
 8009db6:	3601      	adds	r6, #1
 8009db8:	e7ee      	b.n	8009d98 <__libc_init_array+0xc>
 8009dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dbe:	4798      	blx	r3
 8009dc0:	3601      	adds	r6, #1
 8009dc2:	e7f2      	b.n	8009daa <__libc_init_array+0x1e>
 8009dc4:	0800a0d0 	.word	0x0800a0d0
 8009dc8:	0800a0d0 	.word	0x0800a0d0
 8009dcc:	0800a0d0 	.word	0x0800a0d0
 8009dd0:	0800a0d4 	.word	0x0800a0d4

08009dd4 <memset>:
 8009dd4:	4402      	add	r2, r0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d100      	bne.n	8009dde <memset+0xa>
 8009ddc:	4770      	bx	lr
 8009dde:	f803 1b01 	strb.w	r1, [r3], #1
 8009de2:	e7f9      	b.n	8009dd8 <memset+0x4>

08009de4 <_init>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	bf00      	nop
 8009de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dea:	bc08      	pop	{r3}
 8009dec:	469e      	mov	lr, r3
 8009dee:	4770      	bx	lr

08009df0 <_fini>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	bf00      	nop
 8009df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df6:	bc08      	pop	{r3}
 8009df8:	469e      	mov	lr, r3
 8009dfa:	4770      	bx	lr
