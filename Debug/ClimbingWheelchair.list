
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800bc98  0800bc98  0001bc98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfd8  0800bfd8  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfe0  0800bfe0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfe0  0800bfe0  0001bfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfe4  0800bfe4  0001bfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800bfe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000278  0800c25c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800c25c  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4c2  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004089  00000000  00000000  0003d766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  000417f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00042d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ae0  00000000  00000000  000440c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb75  00000000  00000000  0006bba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e22b5  00000000  00000000  0008a715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c9ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa8  00000000  00000000  0016ca20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000278 	.word	0x20000278
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bc7c 	.word	0x0800bc7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	0800bc7c 	.word	0x0800bc7c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f002 fe45 	bl	8003be0 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f002 fe30 	bl	8003be0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f002 fd97 	bl	8003be0 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	*(pid->output) = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	*(pid->input)  = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
	pid->iterm = *(pid->output);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	621a      	str	r2, [r3, #32]
	pid->lastin = *(pid->input);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <hubMotor_Init+0x2c>)
 800140c:	f004 fd7c 	bl	8005f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <hubMotor_Init+0x2c>)
 8001418:	f004 fd76 	bl	8005f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <hubMotor_Init+0x2c>)
 8001424:	f004 fd70 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020c00 	.word	0x40020c00

08001430 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001438:	2200      	movs	r2, #0
 800143a:	2110      	movs	r1, #16
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <ADC_Read+0x30>)
 800143e:	f004 fd63 	bl	8005f08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001442:	2302      	movs	r3, #2
 8001444:	2208      	movs	r2, #8
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <ADC_Read+0x34>)
 800144a:	f006 fe25 	bl	8008098 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800144e:	2201      	movs	r2, #1
 8001450:	2110      	movs	r1, #16
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <ADC_Read+0x30>)
 8001454:	f004 fd58 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40020000 	.word	0x40020000
 8001464:	20000304 	.word	0x20000304

08001468 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f808 	bl	8001488 <enableMotor>
	brakeMotor(motor, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f828 	bl	80014d0 <brakeMotor>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	4619      	mov	r1, r3
 80014a0:	f004 fd32 	bl	8005f08 <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	461a      	mov	r2, r3
 80014ba:	2108      	movs	r1, #8
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <emBrakeMotor+0x20>)
 80014be:	f004 fd23 	bl	8005f08 <HAL_GPIO_WritePin>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020c00 	.word	0x40020c00

080014d0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69d8      	ldr	r0, [r3, #28]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8c1b      	ldrh	r3, [r3, #32]
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f004 fd0e 	bl	8005f08 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	4619      	mov	r1, r3
 800150c:	f004 fcfc 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800152a:	edd7 7a00 	vldr	s15, [r7]
 800152e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001660 <setMotorSpeed+0x148>
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd01      	ble.n	8001540 <setMotorSpeed+0x28>
 800153c:	4b49      	ldr	r3, [pc, #292]	; (8001664 <setMotorSpeed+0x14c>)
 800153e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7fe ffb9 	bl	80004b8 <__aeabi_f2d>
 8001546:	a340      	add	r3, pc, #256	; (adr r3, 8001648 <setMotorSpeed+0x130>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe fe54 	bl	80001f8 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a33d      	add	r3, pc, #244	; (adr r3, 8001650 <setMotorSpeed+0x138>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f92d 	bl	80007bc <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fad5 	bl	8000b18 <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29b      	uxth	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7fe ff9a 	bl	80004b8 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	a133      	add	r1, pc, #204	; (adr r1, 8001658 <setMotorSpeed+0x140>)
 800158a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800158e:	f7ff f915 	bl	80007bc <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fa95 	bl	8000ac8 <__aeabi_d2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80015a6:	8a7b      	ldrh	r3, [r7, #18]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80015ae:	edd7 7a00 	vldr	s15, [r7]
 80015b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d503      	bpl.n	80015c8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80015c0:	2101      	movs	r1, #1
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff84 	bl	80014d0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	8a7a      	ldrh	r2, [r7, #18]
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8b1b      	ldrh	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
 80015e4:	e01c      	b.n	8001620 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8b1b      	ldrh	r3, [r3, #24]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d105      	bne.n	80015fa <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
 80015f8:	e012      	b.n	8001620 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	8b1b      	ldrh	r3, [r3, #24]
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d105      	bne.n	800160e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
 800160c:	e008      	b.n	8001620 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	8b1b      	ldrh	r3, [r3, #24]
 8001612:	2b0c      	cmp	r3, #12
 8001614:	d104      	bne.n	8001620 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	8b1b      	ldrh	r3, [r3, #24]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f007 fb2a 	bl	8008c84 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	bfb15b57 	.word	0xbfb15b57
 800164c:	3fd09eec 	.word	0x3fd09eec
 8001650:	1172ef0b 	.word	0x1172ef0b
 8001654:	3f9989df 	.word	0x3f9989df
 8001658:	00000000 	.word	0x00000000
 800165c:	412e8480 	.word	0x412e8480
 8001660:	42c80000 	.word	0x42c80000
 8001664:	42c80000 	.word	0x42c80000

08001668 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800167a:	2b01      	cmp	r3, #1
 800167c:	d129      	bne.n	80016d2 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800167e:	edd7 7a00 	vldr	s15, [r7]
 8001682:	eef0 7ae7 	vabs.f32	s15, s15
 8001686:	ee17 0a90 	vmov	r0, s15
 800168a:	f7fe ff15 	bl	80004b8 <__aeabi_f2d>
 800168e:	4604      	mov	r4, r0
 8001690:	460d      	mov	r5, r1
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f7fe ff10 	bl	80004b8 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7ff f88c 	bl	80007bc <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	f7ff f9de 	bl	8000a74 <__aeabi_dcmpge>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff17 	bl	80014f4 <setMotorDir>
 80016c6:	e032      	b.n	800172e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80016c8:	2101      	movs	r1, #1
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff12 	bl	80014f4 <setMotorDir>
 80016d0:	e02d      	b.n	800172e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d128      	bne.n	800172e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80016dc:	edd7 7a00 	vldr	s15, [r7]
 80016e0:	eef0 7ae7 	vabs.f32	s15, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fee6 	bl	80004b8 <__aeabi_f2d>
 80016ec:	4604      	mov	r4, r0
 80016ee:	460d      	mov	r5, r1
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7fe fee1 	bl	80004b8 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7ff f85d 	bl	80007bc <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	f7ff f9af 	bl	8000a74 <__aeabi_dcmpge>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800171c:	2101      	movs	r1, #1
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fee8 	bl	80014f4 <setMotorDir>
 8001724:	e003      	b.n	800172e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fee3 	bl	80014f4 <setMotorDir>
    }

    HAL_Delay(50);
 800172e:	2032      	movs	r0, #50	; 0x32
 8001730:	f002 fa62 	bl	8003bf8 <HAL_Delay>
    brakeMotor(motor, 0);
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff feca 	bl	80014d0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800173c:	edd7 7a00 	vldr	s15, [r7]
 8001740:	eef0 7ae7 	vabs.f32	s15, s15
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fee5 	bl	8001518 <setMotorSpeed>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bdb0      	pop	{r4, r5, r7, pc}

08001756 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f004 fba6 	bl	8005ebc <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	799a      	ldrb	r2, [r3, #6]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	79db      	ldrb	r3, [r3, #7]
 8001780:	429a      	cmp	r2, r3
 8001782:	d004      	beq.n	800178e <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001784:	f002 fa2c 	bl	8003be0 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800178e:	f002 fa27 	bl	8003be0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d209      	bcs.n	80017b4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	799a      	ldrb	r2, [r3, #6]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7a1b      	ldrb	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e004      	b.n	80017be <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	799a      	ldrb	r2, [r3, #6]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017d0:	4a30      	ldr	r2, [pc, #192]	; (8001894 <MX_CAN1_Init+0xcc>)
 80017d2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80017d4:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017d6:	2209      	movs	r2, #9
 80017d8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017e0:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <MX_CAN1_Init+0xc8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001804:	2200      	movs	r2, #0
 8001806:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001808:	4b21      	ldr	r3, [pc, #132]	; (8001890 <MX_CAN1_Init+0xc8>)
 800180a:	2200      	movs	r2, #0
 800180c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001810:	2200      	movs	r2, #0
 8001812:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001816:	2200      	movs	r2, #0
 8001818:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800181a:	481d      	ldr	r0, [pc, #116]	; (8001890 <MX_CAN1_Init+0xc8>)
 800181c:	f002 fa10 	bl	8003c40 <HAL_CAN_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001826:	f001 f87b 	bl	8002920 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001832:	2301      	movs	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <MX_CAN1_Init+0xc8>)
 8001858:	f002 fc0e 	bl	8004078 <HAL_CAN_ConfigFilter>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001862:	f001 f85d 	bl	8002920 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001866:	2102      	movs	r1, #2
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <MX_CAN1_Init+0xc8>)
 800186a:	f002 ffd9 	bl	8004820 <HAL_CAN_ActivateNotification>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001874:	f001 f854 	bl	8002920 <Error_Handler>
 8001878:	e007      	b.n	800188a <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_CAN1_Init+0xc8>)
 800187c:	f002 fd4a 	bl	8004314 <HAL_CAN_Start>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001886:	f001 f84b 	bl	8002920 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000035c 	.word	0x2000035c
 8001894:	40006400 	.word	0x40006400

08001898 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_CAN_MspInit+0x94>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d133      	bne.n	8001922 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_CAN_MspInit+0x98>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f2:	2303      	movs	r3, #3
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001902:	2309      	movs	r3, #9
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4809      	ldr	r0, [pc, #36]	; (8001934 <HAL_CAN_MspInit+0x9c>)
 800190e:	f003 ffa9 	bl	8005864 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2014      	movs	r0, #20
 8001918:	f003 fad4 	bl	8004ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800191c:	2014      	movs	r0, #20
 800191e:	f003 fafd 	bl	8004f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40006400 	.word	0x40006400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020c00 	.word	0x40020c00

08001938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_DMA_Init+0x3c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MX_DMA_Init+0x3c>)
 8001948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_DMA_Init+0x3c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	200c      	movs	r0, #12
 8001960:	f003 fab0 	bl	8004ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001964:	200c      	movs	r0, #12
 8001966:	f003 fad9 	bl	8004f1c <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <ENCODER_Init+0x24>)
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <ENCODER_Init+0x28>)
 8001980:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <ENCODER_Init+0x2c>)
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <ENCODER_Init+0x28>)
 8001986:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001988:	2101      	movs	r1, #1
 800198a:	4804      	ldr	r0, [pc, #16]	; (800199c <ENCODER_Init+0x24>)
 800198c:	f000 f83f 	bl	8001a0e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001990:	2102      	movs	r1, #2
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <ENCODER_Init+0x2c>)
 8001994:	f000 f83b 	bl	8001a0e <ENCODER_Set_TxHeader>

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000400 	.word	0x20000400
 80019a0:	2000035c 	.word	0x2000035c
 80019a4:	200003ac 	.word	0x200003ac

080019a8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	785a      	ldrb	r2, [r3, #1]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	789a      	ldrb	r2, [r3, #2]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	78da      	ldrb	r2, [r3, #3]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791a      	ldrb	r2, [r3, #4]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	795a      	ldrb	r2, [r3, #5]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	799a      	ldrb	r2, [r3, #6]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	79da      	ldrb	r2, [r3, #7]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0120 	add.w	r1, r3, #32
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3338      	adds	r3, #56	; 0x38
 8001a8e:	f002 fc85 	bl	800439c <HAL_CAN_AddTxMessage>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffd1 	bl	8001a4a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	441a      	add	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	4413      	add	r3, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	4b8a      	ldr	r3, [pc, #552]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a89      	ldr	r2, [pc, #548]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b83      	ldr	r3, [pc, #524]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a82      	ldr	r2, [pc, #520]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a7b      	ldr	r2, [pc, #492]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a74      	ldr	r2, [pc, #464]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <MX_GPIO_Init+0x244>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	213f      	movs	r1, #63	; 0x3f
 8001bc6:	4861      	ldr	r0, [pc, #388]	; (8001d4c <MX_GPIO_Init+0x248>)
 8001bc8:	f004 f99e 	bl	8005f08 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2110      	movs	r1, #16
 8001bd0:	485f      	ldr	r0, [pc, #380]	; (8001d50 <MX_GPIO_Init+0x24c>)
 8001bd2:	f004 f999 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	219b      	movs	r1, #155	; 0x9b
 8001bda:	485e      	ldr	r0, [pc, #376]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001bdc:	f004 f994 	bl	8005f08 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001be6:	485c      	ldr	r0, [pc, #368]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001be8:	f004 f98e 	bl	8005f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001bec:	2200      	movs	r2, #0
 8001bee:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001bf2:	485a      	ldr	r0, [pc, #360]	; (8001d5c <MX_GPIO_Init+0x258>)
 8001bf4:	f004 f988 	bl	8005f08 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c00:	2302      	movs	r3, #2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4853      	ldr	r0, [pc, #332]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001c0c:	f003 fe2a 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001c10:	f248 1378 	movw	r3, #33144	; 0x8178
 8001c14:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	484c      	ldr	r0, [pc, #304]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001c26:	f003 fe1d 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001c2a:	233f      	movs	r3, #63	; 0x3f
 8001c2c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4842      	ldr	r0, [pc, #264]	; (8001d4c <MX_GPIO_Init+0x248>)
 8001c42:	f003 fe0f 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001c46:	2310      	movs	r3, #16
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	483c      	ldr	r0, [pc, #240]	; (8001d50 <MX_GPIO_Init+0x24c>)
 8001c5e:	f003 fe01 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c66:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <MX_GPIO_Init+0x25c>)
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4836      	ldr	r0, [pc, #216]	; (8001d50 <MX_GPIO_Init+0x24c>)
 8001c76:	f003 fdf5 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001c7a:	239b      	movs	r3, #155	; 0x9b
 8001c7c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4830      	ldr	r0, [pc, #192]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001c92:	f003 fde7 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001c96:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	482a      	ldr	r0, [pc, #168]	; (8001d58 <MX_GPIO_Init+0x254>)
 8001cb0:	f003 fdd8 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001cb4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4820      	ldr	r0, [pc, #128]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001cd2:	f003 fdc7 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001cd6:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001cda:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	481b      	ldr	r0, [pc, #108]	; (8001d5c <MX_GPIO_Init+0x258>)
 8001cf0:	f003 fdb8 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4814      	ldr	r0, [pc, #80]	; (8001d5c <MX_GPIO_Init+0x258>)
 8001d0a:	f003 fdab 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d1e:	2309      	movs	r3, #9
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <MX_GPIO_Init+0x250>)
 8001d2a:	f003 fd9b 	bl	8005864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2017      	movs	r0, #23
 8001d34:	f003 f8c6 	bl	8004ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d38:	2017      	movs	r0, #23
 8001d3a:	f003 f8ef 	bl	8004f1c <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	10210000 	.word	0x10210000

08001d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_I2C1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <MX_I2C1_Init+0x7c>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001da2:	f004 f8fb 	bl	8005f9c <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f000 fdb8 	bl	8002920 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001db0:	2100      	movs	r1, #0
 8001db2:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001db4:	f005 f952 	bl	800705c <HAL_I2CEx_ConfigAnalogFilter>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001dbe:	f000 fdaf 	bl	8002920 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001dc6:	f005 f9a9 	bl	800711c <HAL_I2CEx_ConfigDigitalFilter>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f000 fda6 	bl	8002920 <Error_Handler>
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000454 	.word	0x20000454
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00061a80 	.word	0x00061a80

08001de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_I2C_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12c      	bne.n	8001e60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e28:	2312      	movs	r3, #18
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e34:	2304      	movs	r3, #4
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <HAL_I2C_MspInit+0x8c>)
 8001e40:	f003 fd10 	bl	8005864 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_I2C_MspInit+0x88>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400

08001e74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e7a:	f001 fe4b 	bl	8003b14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e7e:	f000 facf 	bl	8002420 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001e82:	f005 ffa1 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4aae      	ldr	r2, [pc, #696]	; (8002144 <main+0x2d0>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 f85b 	bl	8004f4c <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e96:	2004      	movs	r0, #4
 8001e98:	f003 f864 	bl	8004f64 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea4:	f003 f80e 	bl	8004ec4 <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea8:	f7ff fe2c 	bl	8001b04 <MX_GPIO_Init>
	MX_DMA_Init();
 8001eac:	f7ff fd44 	bl	8001938 <MX_DMA_Init>
	MX_I2C1_Init();
 8001eb0:	f7ff ff58 	bl	8001d64 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001eb4:	f001 f9ea 	bl	800328c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001eb8:	f001 fa88 	bl	80033cc <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8001ebc:	f001 fd32 	bl	8003924 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001ec0:	f001 fafe 	bl	80034c0 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001ec4:	f001 fb7e 	bl	80035c4 <MX_TIM8_Init>
	MX_CAN1_Init();
 8001ec8:	f7ff fc7e 	bl	80017c8 <MX_CAN1_Init>
	MX_SPI1_Init();
 8001ecc:	f001 f8d6 	bl	800307c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 8001ed0:	f7ff fd52 	bl	8001978 <ENCODER_Init>
//	  DWT_Init();
	while (MPU6050_Init(&hi2c1) == 1)
 8001ed4:	bf00      	nop
 8001ed6:	489c      	ldr	r0, [pc, #624]	; (8002148 <main+0x2d4>)
 8001ed8:	f000 fd34 	bl	8002944 <MPU6050_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d0f9      	beq.n	8001ed6 <main+0x62>
		;
	HAL_Delay(1000);
 8001ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee6:	f001 fe87 	bl	8003bf8 <HAL_Delay>

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8001eea:	4b98      	ldr	r3, [pc, #608]	; (800214c <main+0x2d8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a98      	ldr	r2, [pc, #608]	; (8002150 <main+0x2dc>)
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <main+0x2d8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a95      	ldr	r2, [pc, #596]	; (8002154 <main+0x2e0>)
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	eef0 0a47 	vmov.f32	s1, s14
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	4892      	ldr	r0, [pc, #584]	; (8002158 <main+0x2e4>)
 8001f10:	f001 fdac 	bl	8003a6c <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8001f14:	4891      	ldr	r0, [pc, #580]	; (800215c <main+0x2e8>)
 8001f16:	f006 fd55 	bl	80089c4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	488f      	ldr	r0, [pc, #572]	; (800215c <main+0x2e8>)
 8001f1e:	f006 feb1 	bl	8008c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001f22:	2104      	movs	r1, #4
 8001f24:	488d      	ldr	r0, [pc, #564]	; (800215c <main+0x2e8>)
 8001f26:	f006 fead 	bl	8008c84 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001f2a:	4b8c      	ldr	r3, [pc, #560]	; (800215c <main+0x2e8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001f34:	4b89      	ldr	r3, [pc, #548]	; (800215c <main+0x2e8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f001 fe5a 	bl	8003bf8 <HAL_Delay>

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8001f44:	4886      	ldr	r0, [pc, #536]	; (8002160 <main+0x2ec>)
 8001f46:	f7ff fa8f 	bl	8001468 <bd25l_Init>
	bd25l_Init(&backMotor);
 8001f4a:	4886      	ldr	r0, [pc, #536]	; (8002164 <main+0x2f0>)
 8001f4c:	f7ff fa8c 	bl	8001468 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8001f50:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8002168 <main+0x2f4>
 8001f54:	4882      	ldr	r0, [pc, #520]	; (8002160 <main+0x2ec>)
 8001f56:	f7ff fb87 	bl	8001668 <runMotor>
	runMotor(&backMotor, 0);
 8001f5a:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8002168 <main+0x2f4>
 8001f5e:	4881      	ldr	r0, [pc, #516]	; (8002164 <main+0x2f0>)
 8001f60:	f7ff fb82 	bl	8001668 <runMotor>
	emBrakeMotor(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff faa1 	bl	80014ac <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8001f6a:	f7ff fa49 	bl	8001400 <hubMotor_Init>
	wheelSpeedControl_Init(&climbWheelSpeed,
 8001f6e:	4b7f      	ldr	r3, [pc, #508]	; (800216c <main+0x2f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7f      	ldr	r2, [pc, #508]	; (8002170 <main+0x2fc>)
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <main+0x2f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a7c      	ldr	r2, [pc, #496]	; (8002174 <main+0x300>)
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	eef0 0a47 	vmov.f32	s1, s14
 8001f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f92:	4879      	ldr	r0, [pc, #484]	; (8002178 <main+0x304>)
 8001f94:	f001 fd6a 	bl	8003a6c <wheelSpeedControl_Init>
			climb_linSpeedLevel[climb_speedLevel],
			climb_angSpeedLevel[climb_speedLevel]);

	//Initialize front and back balance controller
	frontBalance_pid = pid_create(&frontBalance_ctrl, &frontBalance_input,
 8001f98:	4b78      	ldr	r3, [pc, #480]	; (800217c <main+0x308>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	4b78      	ldr	r3, [pc, #480]	; (8002180 <main+0x30c>)
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <main+0x310>)
 8001fa6:	edd3 6a00 	vldr	s13, [r3]
 8001faa:	eeb0 1a66 	vmov.f32	s2, s13
 8001fae:	eef0 0a47 	vmov.f32	s1, s14
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	4b74      	ldr	r3, [pc, #464]	; (8002188 <main+0x314>)
 8001fb8:	4a74      	ldr	r2, [pc, #464]	; (800218c <main+0x318>)
 8001fba:	4975      	ldr	r1, [pc, #468]	; (8002190 <main+0x31c>)
 8001fbc:	4875      	ldr	r0, [pc, #468]	; (8002194 <main+0x320>)
 8001fbe:	f7fe ff97 	bl	8000ef0 <pid_create>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a74      	ldr	r2, [pc, #464]	; (8002198 <main+0x324>)
 8001fc6:	6013      	str	r3, [r2, #0]
			&frontBalance_output, &frontBalance_setpoint, frontBalance_kp,
			frontBalance_ki, frontBalance_kd);
	pid_limits(frontBalance_pid, -50, 50);
 8001fc8:	4b73      	ldr	r3, [pc, #460]	; (8002198 <main+0x324>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	eddf 0a73 	vldr	s1, [pc, #460]	; 800219c <main+0x328>
 8001fd0:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80021a0 <main+0x32c>
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f917 	bl	8001208 <pid_limits>
	pid_sample(frontBalance_pid, 1);
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <main+0x324>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f8dd 	bl	80011a0 <pid_sample>
	pid_auto(frontBalance_pid);
 8001fe6:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <main+0x324>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f971 	bl	80012d2 <pid_auto>

	backBalance_pid = pid_create(&backBalance_ctrl, &backBalance_input,
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <main+0x330>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <main+0x334>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <main+0x338>)
 8001ffe:	edd3 6a00 	vldr	s13, [r3]
 8002002:	eeb0 1a66 	vmov.f32	s2, s13
 8002006:	eef0 0a47 	vmov.f32	s1, s14
 800200a:	eeb0 0a67 	vmov.f32	s0, s15
 800200e:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <main+0x33c>)
 8002010:	4a68      	ldr	r2, [pc, #416]	; (80021b4 <main+0x340>)
 8002012:	4969      	ldr	r1, [pc, #420]	; (80021b8 <main+0x344>)
 8002014:	4869      	ldr	r0, [pc, #420]	; (80021bc <main+0x348>)
 8002016:	f7fe ff6b 	bl	8000ef0 <pid_create>
 800201a:	4603      	mov	r3, r0
 800201c:	4a68      	ldr	r2, [pc, #416]	; (80021c0 <main+0x34c>)
 800201e:	6013      	str	r3, [r2, #0]
			&backBalance_output, &backBalance_setpoint, backBalance_kp,
			backBalance_ki, backBalance_kd);
	pid_limits(backBalance_pid, -50, 50);
 8002020:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <main+0x34c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800219c <main+0x328>
 8002028:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80021a0 <main+0x32c>
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f8eb 	bl	8001208 <pid_limits>
	pid_sample(backBalance_pid, 1);
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <main+0x34c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff f8b1 	bl	80011a0 <pid_sample>
	pid_auto(backBalance_pid);
 800203e:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <main+0x34c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f945 	bl	80012d2 <pid_auto>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8002048:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <main+0x350>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <main+0x354>)
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	4b5d      	ldr	r3, [pc, #372]	; (80021cc <main+0x358>)
 8002056:	edd3 6a00 	vldr	s13, [r3]
 800205a:	eeb0 1a66 	vmov.f32	s2, s13
 800205e:	eef0 0a47 	vmov.f32	s1, s14
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	4b5a      	ldr	r3, [pc, #360]	; (80021d0 <main+0x35c>)
 8002068:	4a5a      	ldr	r2, [pc, #360]	; (80021d4 <main+0x360>)
 800206a:	495b      	ldr	r1, [pc, #364]	; (80021d8 <main+0x364>)
 800206c:	485b      	ldr	r0, [pc, #364]	; (80021dc <main+0x368>)
 800206e:	f7fe ff3f 	bl	8000ef0 <pid_create>
 8002072:	4603      	mov	r3, r0
 8002074:	4a5a      	ldr	r2, [pc, #360]	; (80021e0 <main+0x36c>)
 8002076:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <main+0x36c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	eddf 0a47 	vldr	s1, [pc, #284]	; 800219c <main+0x328>
 8002080:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80021a0 <main+0x32c>
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f8bf 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 800208a:	4b55      	ldr	r3, [pc, #340]	; (80021e0 <main+0x36c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f885 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <main+0x36c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f919 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <main+0x370>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <main+0x374>)
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <main+0x378>)
 80020ae:	edd3 6a00 	vldr	s13, [r3]
 80020b2:	eeb0 1a66 	vmov.f32	s2, s13
 80020b6:	eef0 0a47 	vmov.f32	s1, s14
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <main+0x37c>)
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <main+0x380>)
 80020c2:	494d      	ldr	r1, [pc, #308]	; (80021f8 <main+0x384>)
 80020c4:	484d      	ldr	r0, [pc, #308]	; (80021fc <main+0x388>)
 80020c6:	f7fe ff13 	bl	8000ef0 <pid_create>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <main+0x38c>)
 80020ce:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <main+0x38c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	eddf 0a31 	vldr	s1, [pc, #196]	; 800219c <main+0x328>
 80020d8:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80021a0 <main+0x32c>
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f893 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <main+0x38c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f859 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <main+0x38c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f8ed 	bl	80012d2 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 80020f8:	f001 fd72 	bl	8003be0 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]
	ENCODER_Get_Angle(&encoderBack);
 80020fe:	4841      	ldr	r0, [pc, #260]	; (8002204 <main+0x390>)
 8002100:	f7ff fccb 	bl	8001a9a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 8002104:	4840      	ldr	r0, [pc, #256]	; (8002208 <main+0x394>)
 8002106:	f7ff fcc8 	bl	8001a9a <ENCODER_Get_Angle>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800210a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210e:	f001 fd73 	bl	8003bf8 <HAL_Delay>
	//debug variable
	uint32_t debug_prev_time = HAL_GetTick();
 8002112:	f001 fd65 	bl	8003be0 <HAL_GetTick>
 8002116:	60b8      	str	r0, [r7, #8]
	uint8_t led_status = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	71fb      	strb	r3, [r7, #7]
	//  float speed = 0;
	while (1) {
		//Code to debug with blinking LED
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 800211c:	f001 fd60 	bl	8003be0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212a:	d37e      	bcc.n	800222a <main+0x3b6>
			if (led_status == 0) {
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d16e      	bne.n	8002210 <main+0x39c>
				//	      count++;
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	2108      	movs	r1, #8
 8002136:	4835      	ldr	r0, [pc, #212]	; (800220c <main+0x398>)
 8002138:	f003 fee6 	bl	8005f08 <HAL_GPIO_WritePin>
				led_status = 1;
 800213c:	2301      	movs	r3, #1
 800213e:	71fb      	strb	r3, [r7, #7]
 8002140:	e070      	b.n	8002224 <main+0x3b0>
 8002142:	bf00      	nop
 8002144:	10624dd3 	.word	0x10624dd3
 8002148:	20000454 	.word	0x20000454
 800214c:	20000108 	.word	0x20000108
 8002150:	0800bf14 	.word	0x0800bf14
 8002154:	0800bf20 	.word	0x0800bf20
 8002158:	200000d8 	.word	0x200000d8
 800215c:	20000668 	.word	0x20000668
 8002160:	20000000 	.word	0x20000000
 8002164:	20000034 	.word	0x20000034
 8002168:	00000000 	.word	0x00000000
 800216c:	200002dc 	.word	0x200002dc
 8002170:	0800bf2c 	.word	0x0800bf2c
 8002174:	0800bf38 	.word	0x0800bf38
 8002178:	2000013c 	.word	0x2000013c
 800217c:	20000118 	.word	0x20000118
 8002180:	200002a4 	.word	0x200002a4
 8002184:	200002a8 	.word	0x200002a8
 8002188:	200002a0 	.word	0x200002a0
 800218c:	2000029c 	.word	0x2000029c
 8002190:	20000298 	.word	0x20000298
 8002194:	200004ac 	.word	0x200004ac
 8002198:	200005c8 	.word	0x200005c8
 800219c:	42480000 	.word	0x42480000
 80021a0:	c2480000 	.word	0xc2480000
 80021a4:	2000011c 	.word	0x2000011c
 80021a8:	200002b8 	.word	0x200002b8
 80021ac:	20000120 	.word	0x20000120
 80021b0:	200002b4 	.word	0x200002b4
 80021b4:	200002b0 	.word	0x200002b0
 80021b8:	200002ac 	.word	0x200002ac
 80021bc:	200004e8 	.word	0x200004e8
 80021c0:	20000580 	.word	0x20000580
 80021c4:	20000124 	.word	0x20000124
 80021c8:	20000128 	.word	0x20000128
 80021cc:	2000012c 	.word	0x2000012c
 80021d0:	200002cc 	.word	0x200002cc
 80021d4:	200002c8 	.word	0x200002c8
 80021d8:	200002c4 	.word	0x200002c4
 80021dc:	200005d0 	.word	0x200005d0
 80021e0:	200005cc 	.word	0x200005cc
 80021e4:	20000130 	.word	0x20000130
 80021e8:	20000134 	.word	0x20000134
 80021ec:	20000138 	.word	0x20000138
 80021f0:	200002d8 	.word	0x200002d8
 80021f4:	200002d4 	.word	0x200002d4
 80021f8:	200002d0 	.word	0x200002d0
 80021fc:	20000584 	.word	0x20000584
 8002200:	20000620 	.word	0x20000620
 8002204:	20000400 	.word	0x20000400
 8002208:	200003ac 	.word	0x200003ac
 800220c:	40020400 	.word	0x40020400
			} else if (led_status == 1) {
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d106      	bne.n	8002224 <main+0x3b0>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	2108      	movs	r1, #8
 800221a:	486c      	ldr	r0, [pc, #432]	; (80023cc <main+0x558>)
 800221c:	f003 fe74 	bl	8005f08 <HAL_GPIO_WritePin>
				led_status = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	71fb      	strb	r3, [r7, #7]
			}
			debug_prev_time = HAL_GetTick();
 8002224:	f001 fcdc 	bl	8003be0 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]

		//      runMotor(&backMotor, speed++, 1);xia
//		ENCODER_Get_Angle(&encoderBack);
//		ENCODER_Get_Angle(&encoderFront);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1) {
 800222a:	f001 fcd9 	bl	8003be0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4293      	cmp	r3, r2
 8002234:	f43f af72 	beq.w	800211c <main+0x2a8>
			//	ADC_DataRequest();
			ENCODER_Read(&encoderBack);
 8002238:	4865      	ldr	r0, [pc, #404]	; (80023d0 <main+0x55c>)
 800223a:	f7ff fc06 	bl	8001a4a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800223e:	4865      	ldr	r0, [pc, #404]	; (80023d4 <main+0x560>)
 8002240:	f7ff fc03 	bl	8001a4a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8002244:	4964      	ldr	r1, [pc, #400]	; (80023d8 <main+0x564>)
 8002246:	4865      	ldr	r0, [pc, #404]	; (80023dc <main+0x568>)
 8002248:	f000 fbd6 	bl	80029f8 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 800224c:	211e      	movs	r1, #30
 800224e:	4864      	ldr	r0, [pc, #400]	; (80023e0 <main+0x56c>)
 8002250:	f7ff fa81 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8002254:	211e      	movs	r1, #30
 8002256:	4863      	ldr	r0, [pc, #396]	; (80023e4 <main+0x570>)
 8002258:	f7ff fa7d 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 800225c:	211e      	movs	r1, #30
 800225e:	4862      	ldr	r0, [pc, #392]	; (80023e8 <main+0x574>)
 8002260:	f7ff fa79 	bl	8001756 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8002264:	2105      	movs	r1, #5
 8002266:	4861      	ldr	r0, [pc, #388]	; (80023ec <main+0x578>)
 8002268:	f7ff fa75 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 800226c:	2105      	movs	r1, #5
 800226e:	4860      	ldr	r0, [pc, #384]	; (80023f0 <main+0x57c>)
 8002270:	f7ff fa71 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 8002274:	2105      	movs	r1, #5
 8002276:	485f      	ldr	r0, [pc, #380]	; (80023f4 <main+0x580>)
 8002278:	f7ff fa6d 	bl	8001756 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 800227c:	2105      	movs	r1, #5
 800227e:	485e      	ldr	r0, [pc, #376]	; (80023f8 <main+0x584>)
 8002280:	f7ff fa69 	bl	8001756 <GPIO_Digital_Filtered_Input>
//			runMotor(&backMotor, speed[BACK_INDEX]);

			//---------------------------------------------------------------------------------------------------
			//Testing Climbing Balance Control
			//---------------------------------------------------------------------------------------------------
			if (button2.state == GPIO_PIN_SET && state_count++ > 10) {
 8002284:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <main+0x570>)
 8002286:	7a1b      	ldrb	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d118      	bne.n	80022be <main+0x44a>
 800228c:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <main+0x588>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	495a      	ldr	r1, [pc, #360]	; (80023fc <main+0x588>)
 8002294:	600a      	str	r2, [r1, #0]
 8002296:	2b0a      	cmp	r3, #10
 8002298:	dd11      	ble.n	80022be <main+0x44a>
				state_count = 0;
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <main+0x588>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
				if (state == TEST) {
 80022a0:	4b57      	ldr	r3, [pc, #348]	; (8002400 <main+0x58c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <main+0x43c>
					state = NORMAL;
 80022a8:	4b55      	ldr	r3, [pc, #340]	; (8002400 <main+0x58c>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e006      	b.n	80022be <main+0x44a>
				} else if (state == NORMAL)
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <main+0x58c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d102      	bne.n	80022be <main+0x44a>
					state = TEST;
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <main+0x58c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
			}
			if (state == TEST) {
 80022be:	4b50      	ldr	r3, [pc, #320]	; (8002400 <main+0x58c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12e      	bne.n	8002324 <main+0x4b0>
				if (button1.state == GPIO_PIN_SET
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <main+0x56c>)
 80022c8:	7a1b      	ldrb	r3, [r3, #8]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <main+0x46a>
						&& button3.state == GPIO_PIN_RESET)
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <main+0x574>)
 80022d0:	7a1b      	ldrb	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <main+0x46a>
					speed[FRONT_INDEX] = 30;
 80022d6:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <main+0x590>)
 80022d8:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <main+0x594>)
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e013      	b.n	8002306 <main+0x492>
				else if (button1.state == GPIO_PIN_SET
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <main+0x56c>)
 80022e0:	7a1b      	ldrb	r3, [r3, #8]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <main+0x482>
						&& button3.state == GPIO_PIN_SET)
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <main+0x574>)
 80022e8:	7a1b      	ldrb	r3, [r3, #8]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d103      	bne.n	80022f6 <main+0x482>
					speed[FRONT_INDEX] = -30;
 80022ee:	4b45      	ldr	r3, [pc, #276]	; (8002404 <main+0x590>)
 80022f0:	4a46      	ldr	r2, [pc, #280]	; (800240c <main+0x598>)
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e007      	b.n	8002306 <main+0x492>
				else if (button1.state == GPIO_PIN_RESET)
 80022f6:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <main+0x56c>)
 80022f8:	7a1b      	ldrb	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <main+0x492>
					speed[FRONT_INDEX] = 0;
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <main+0x590>)
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
				runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <main+0x590>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	483f      	ldr	r0, [pc, #252]	; (8002410 <main+0x59c>)
 8002312:	f7ff f9a9 	bl	8001668 <runMotor>
				goto_angle(0, backBalance_pid);
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <main+0x5a0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002418 <main+0x5a4>
 8002320:	f000 fa2e 	bl	8002780 <goto_angle>
			}

			if (state == NORMAL) {
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <main+0x58c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d12c      	bne.n	8002386 <main+0x512>
				if (button1.state == GPIO_PIN_SET
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <main+0x56c>)
 800232e:	7a1b      	ldrb	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <main+0x4d0>
						&& button3.state == GPIO_PIN_RESET)
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <main+0x574>)
 8002336:	7a1b      	ldrb	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <main+0x4d0>
					speed[FRONT_INDEX] = 30;
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <main+0x590>)
 800233e:	4a32      	ldr	r2, [pc, #200]	; (8002408 <main+0x594>)
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e013      	b.n	800236c <main+0x4f8>
				else if (button1.state == GPIO_PIN_SET
 8002344:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <main+0x56c>)
 8002346:	7a1b      	ldrb	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d107      	bne.n	800235c <main+0x4e8>
						&& button3.state == GPIO_PIN_SET)
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <main+0x574>)
 800234e:	7a1b      	ldrb	r3, [r3, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d103      	bne.n	800235c <main+0x4e8>
					speed[FRONT_INDEX] = -30;
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <main+0x590>)
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <main+0x598>)
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e007      	b.n	800236c <main+0x4f8>
				else if (button1.state == GPIO_PIN_RESET)
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <main+0x56c>)
 800235e:	7a1b      	ldrb	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <main+0x4f8>
					speed[FRONT_INDEX] = 0;
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <main+0x590>)
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
				pid_reset(backBalance_pid);
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <main+0x5a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff f827 	bl	80013c4 <pid_reset>
				runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <main+0x590>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	eeb0 0a67 	vmov.f32	s0, s15
 8002380:	4823      	ldr	r0, [pc, #140]	; (8002410 <main+0x59c>)
 8002382:	f7ff f971 	bl	8001668 <runMotor>
//					speed[BACK_INDEX] = -30;
//				else if (button1.state == GPIO_PIN_RESET)
//					speed[BACK_INDEX] = 0;
//				pid_reset(backClimb_pid);
//			}
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <main+0x590>)
 8002388:	edd3 7a01 	vldr	s15, [r3, #4]
 800238c:	eeb0 0a67 	vmov.f32	s0, s15
 8002390:	4822      	ldr	r0, [pc, #136]	; (800241c <main+0x5a8>)
 8002392:	f7ff f969 	bl	8001668 <runMotor>
			//		if (button3.state == GPIO_PIN_SET)
			//			reinitialize();
			//
			//	}

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <main+0x590>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	d10b      	bne.n	80023be <main+0x54a>
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <main+0x590>)
 80023a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d103      	bne.n	80023be <main+0x54a>
				emBrakeMotor(0);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff f878 	bl	80014ac <emBrakeMotor>
 80023bc:	e002      	b.n	80023c4 <main+0x550>
			else
				emBrakeMotor(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f7ff f874 	bl	80014ac <emBrakeMotor>
			//	    back_touchdown = 1;
			//	}
			//
			//	//Climbing phase start

			prev_time = HAL_GetTick();
 80023c4:	f001 fc0c 	bl	8003be0 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 80023ca:	e6a7      	b.n	800211c <main+0x2a8>
 80023cc:	40020400 	.word	0x40020400
 80023d0:	20000400 	.word	0x20000400
 80023d4:	200003ac 	.word	0x200003ac
 80023d8:	20000520 	.word	0x20000520
 80023dc:	20000454 	.word	0x20000454
 80023e0:	200000a8 	.word	0x200000a8
 80023e4:	200000b8 	.word	0x200000b8
 80023e8:	200000c8 	.word	0x200000c8
 80023ec:	20000068 	.word	0x20000068
 80023f0:	20000078 	.word	0x20000078
 80023f4:	20000088 	.word	0x20000088
 80023f8:	20000098 	.word	0x20000098
 80023fc:	200002e0 	.word	0x200002e0
 8002400:	2000016c 	.word	0x2000016c
 8002404:	200002bc 	.word	0x200002bc
 8002408:	41f00000 	.word	0x41f00000
 800240c:	c1f00000 	.word	0xc1f00000
 8002410:	20000000 	.word	0x20000000
 8002414:	20000580 	.word	0x20000580
 8002418:	00000000 	.word	0x00000000
 800241c:	20000034 	.word	0x20000034

08002420 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b094      	sub	sp, #80	; 0x50
 8002424:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002426:	f107 0320 	add.w	r3, r7, #32
 800242a:	2230      	movs	r2, #48	; 0x30
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f009 f8be 	bl	800b5b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <SystemClock_Config+0xd8>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <SystemClock_Config+0xd8>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <SystemClock_Config+0xd8>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <SystemClock_Config+0xdc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a24      	ldr	r2, [pc, #144]	; (80024fc <SystemClock_Config+0xdc>)
 800246a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <SystemClock_Config+0xdc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247c:	2301      	movs	r3, #1
 800247e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002486:	2302      	movs	r3, #2
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002490:	2308      	movs	r3, #8
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002494:	23b4      	movs	r3, #180	; 0xb4
 8002496:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002498:	2302      	movs	r3, #2
 800249a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800249c:	2304      	movs	r3, #4
 800249e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 fee9 	bl	800727c <HAL_RCC_OscConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0x94>
		Error_Handler();
 80024b0:	f000 fa36 	bl	8002920 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80024b4:	f004 fe92 	bl	80071dc <HAL_PWREx_EnableOverDrive>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <SystemClock_Config+0xa2>
		Error_Handler();
 80024be:	f000 fa2f 	bl	8002920 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024c2:	230f      	movs	r3, #15
 80024c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c6:	2302      	movs	r3, #2
 80024c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	2105      	movs	r1, #5
 80024e0:	4618      	mov	r0, r3
 80024e2:	f005 f9eb 	bl	80078bc <HAL_RCC_ClockConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <SystemClock_Config+0xd0>
		Error_Handler();
 80024ec:	f000 fa18 	bl	8002920 <Error_Handler>
	}
}
 80024f0:	bf00      	nop
 80024f2:	3750      	adds	r7, #80	; 0x50
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000

08002500 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d11c      	bne.n	800254a <HAL_GPIO_EXTI_Callback+0x4a>
	case AD_BUSY_Pin: {
		if (HAL_GetTick() - prev_adc_time > 1) {
 8002510:	f001 fb66 	bl	8003be0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_GPIO_EXTI_Callback+0x58>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d916      	bls.n	800254e <HAL_GPIO_EXTI_Callback+0x4e>
			ADC_Read(&adc_rawData[0]);
 8002520:	480e      	ldr	r0, [pc, #56]	; (800255c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002522:	f7fe ff85 	bl	8001430 <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800252c:	461a      	mov	r2, r3
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_GPIO_EXTI_Callback+0x60>)
 8002530:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002538:	461a      	mov	r2, r3
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_GPIO_EXTI_Callback+0x64>)
 800253c:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 800253e:	f001 fb4f 	bl	8003be0 <HAL_GetTick>
 8002542:	4603      	mov	r3, r0
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_GPIO_EXTI_Callback+0x58>)
 8002546:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002548:	e001      	b.n	800254e <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 800254e:	bf00      	nop
	}
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000294 	.word	0x20000294
 800255c:	200005b8 	.word	0x200005b8
 8002560:	2000061c 	.word	0x2000061c
 8002564:	200004a8 	.word	0x200004a8

08002568 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a7b      	ldr	r2, [pc, #492]	; (8002760 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	f040 80e6 	bne.w	8002746 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4a79      	ldr	r2, [pc, #484]	; (8002764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8002580:	2100      	movs	r1, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f002 f82e 	bl	80045e4 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT) {
 8002588:	7a7b      	ldrb	r3, [r7, #9]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d144      	bne.n	8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4975      	ldr	r1, [pc, #468]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fa07 	bl	80019a8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 800259a:	4873      	ldr	r0, [pc, #460]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800259c:	f7ff fa7d 	bl	8001a9a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 80025a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 80025a8:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 80025ac:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025ae:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80025b0:	4b6d      	ldr	r3, [pc, #436]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 80025bc:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800276c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80025c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	ee17 0a90 	vmov	r0, s15
 80025d0:	f7fd ff72 	bl	80004b8 <__aeabi_f2d>
 80025d4:	a35e      	add	r3, pc, #376	; (adr r3, 8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fe0f 	bl	80001fc <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fab7 	bl	8000b58 <__aeabi_d2f>
 80025ea:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 80025f0:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80025f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80025f6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80025fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	dd09      	ble.n	8002618 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002604:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002606:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800260a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 800260e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002612:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002614:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT) {
 8002618:	7a7b      	ldrb	r3, [r7, #9]
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 8093 	bne.w	8002746 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4953      	ldr	r1, [pc, #332]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f9be 	bl	80019a8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 800262c:	4851      	ldr	r0, [pc, #324]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800262e:	f7ff fa34 	bl	8001a9a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000) {
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 800263a:	f247 522f 	movw	r2, #29999	; 0x752f
 800263e:	4293      	cmp	r3, r2
 8002640:	d839      	bhi.n	80026b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	0b5b      	lsrs	r3, r3, #13
 8002652:	f242 3133 	movw	r1, #9011	; 0x2333
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800265c:	4a45      	ldr	r2, [pc, #276]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800265e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002660:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266c:	ee17 0a90 	vmov	r0, s15
 8002670:	f7fd ff22 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002674:	a338      	add	r3, pc, #224	; (adr r3, 8002758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f89f 	bl	80007bc <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800268c:	f7fd ff6c 	bl	8000568 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	a32d      	add	r3, pc, #180	; (adr r3, 8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fdad 	bl	80001fc <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa55 	bl	8000b58 <__aeabi_d2f>
 80026ae:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80026b0:	4a30      	ldr	r2, [pc, #192]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026b2:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 80026b4:	e047      	b.n	8002746 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd feda 	bl	8000474 <__aeabi_ui2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	a124      	add	r1, pc, #144	; (adr r1, 8002758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80026c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ca:	f7fd fd95 	bl	80001f8 <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa1f 	bl	8000b18 <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026de:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd fee2 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 80026f4:	a318      	add	r3, pc, #96	; (adr r3, 8002758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fe f85f 	bl	80007bc <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800270c:	f7fd ff2c 	bl	8000568 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	a30d      	add	r3, pc, #52	; (adr r3, 8002750 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd fd6d 	bl	80001fc <__adddf3>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002730:	f7fd fd62 	bl	80001f8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa0c 	bl	8000b58 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	d0e56042 	.word	0xd0e56042
 8002754:	40424b22 	.word	0x40424b22
 8002758:	9999999a 	.word	0x9999999a
 800275c:	40c19999 	.word	0x40c19999
 8002760:	2000035c 	.word	0x2000035c
 8002764:	200002e4 	.word	0x200002e4
 8002768:	20000400 	.word	0x20000400
 800276c:	46000000 	.word	0x46000000
 8002770:	43b40000 	.word	0x43b40000
 8002774:	200003ac 	.word	0x200003ac
 8002778:	e8bb8111 	.word	0xe8bb8111
 800277c:	40768000 	.word	0x40768000

08002780 <goto_angle>:
			speed[BACK_INDEX] = 0;
		}
	}
}

void goto_angle(float angle, PID_t pid_t) {
 8002780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	ed87 0a01 	vstr	s0, [r7, #4]
 800278c:	6038      	str	r0, [r7, #0]
	static float cur_angle;
	if (pid_t == backBalance_pid) {
 800278e:	4b57      	ldr	r3, [pc, #348]	; (80028ec <goto_angle+0x16c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d167      	bne.n	8002868 <goto_angle+0xe8>
		cur_angle = exp_angle_filter * (float) MPU6050.KalmanAngleX + (1-exp_angle_filter) * cur_angle;
 8002798:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <goto_angle+0x170>)
 800279a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe f9d9 	bl	8000b58 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fe85 	bl	80004b8 <__aeabi_f2d>
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <goto_angle+0x174>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fed8 	bl	8000568 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <goto_angle+0x174>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f04f 0000 	mov.w	r0, #0
 80027ca:	494b      	ldr	r1, [pc, #300]	; (80028f8 <goto_angle+0x178>)
 80027cc:	f7fd fd14 	bl	80001f8 <__aeabi_dsub>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	4b48      	ldr	r3, [pc, #288]	; (80028fc <goto_angle+0x17c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe6b 	bl	80004b8 <__aeabi_f2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4640      	mov	r0, r8
 80027e8:	4649      	mov	r1, r9
 80027ea:	f7fd febd 	bl	8000568 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4620      	mov	r0, r4
 80027f4:	4629      	mov	r1, r5
 80027f6:	f7fd fd01 	bl	80001fc <__adddf3>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f7fe f9a9 	bl	8000b58 <__aeabi_d2f>
 8002806:	4603      	mov	r3, r0
 8002808:	4a3c      	ldr	r2, [pc, #240]	; (80028fc <goto_angle+0x17c>)
 800280a:	6013      	str	r3, [r2, #0]
		if (pid_need_compute(backBalance_pid) && fabs(angle - cur_angle) > 1.5) {
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <goto_angle+0x16c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fbaf 	bl	8000f74 <pid_need_compute>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <goto_angle+0xde>
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <goto_angle+0x17c>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ed97 7a01 	vldr	s14, [r7, #4]
 8002826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282a:	eef0 7ae7 	vabs.f32	s15, s15
 800282e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	dd10      	ble.n	800285e <goto_angle+0xde>
			backBalance_setpoint = angle;
 800283c:	4a30      	ldr	r2, [pc, #192]	; (8002900 <goto_angle+0x180>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
			backBalance_input = cur_angle;
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <goto_angle+0x17c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <goto_angle+0x184>)
 8002848:	6013      	str	r3, [r2, #0]
			pid_compute(backBalance_pid);
 800284a:	4b28      	ldr	r3, [pc, #160]	; (80028ec <goto_angle+0x16c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fba5 	bl	8000f9e <pid_compute>
			speed[BACK_INDEX] = backBalance_output;
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <goto_angle+0x188>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <goto_angle+0x18c>)
 800285a:	6053      	str	r3, [r2, #4]
 800285c:	e041      	b.n	80028e2 <goto_angle+0x162>
		} else {
			speed[BACK_INDEX] = 0;
 800285e:	4b2b      	ldr	r3, [pc, #172]	; (800290c <goto_angle+0x18c>)
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	605a      	str	r2, [r3, #4]
		} else {
			speed[FRONT_INDEX] = 0;
//			pid_reset(pid_t);
		}
	}
}
 8002866:	e03c      	b.n	80028e2 <goto_angle+0x162>
	} else if (pid_t == frontBalance_pid) {
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <goto_angle+0x190>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d137      	bne.n	80028e2 <goto_angle+0x162>
		cur_angle = (float) MPU6050.KalmanAngleX;
 8002872:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <goto_angle+0x170>)
 8002874:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f96c 	bl	8000b58 <__aeabi_d2f>
 8002880:	4603      	mov	r3, r0
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <goto_angle+0x17c>)
 8002884:	6013      	str	r3, [r2, #0]
		if (pid_need_compute(frontBalance_pid) && fabs(angle - cur_angle) > 1.5) {
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <goto_angle+0x190>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fb72 	bl	8000f74 <pid_need_compute>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d020      	beq.n	80028d8 <goto_angle+0x158>
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <goto_angle+0x17c>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ed97 7a01 	vldr	s14, [r7, #4]
 80028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a4:	eef0 7ae7 	vabs.f32	s15, s15
 80028a8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80028ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	dd10      	ble.n	80028d8 <goto_angle+0x158>
			frontBalance_setpoint = angle;
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <goto_angle+0x194>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]
			frontBalance_input = cur_angle;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <goto_angle+0x17c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <goto_angle+0x198>)
 80028c2:	6013      	str	r3, [r2, #0]
			pid_compute(frontBalance_pid);
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <goto_angle+0x190>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fb68 	bl	8000f9e <pid_compute>
			speed[FRONT_INDEX] = frontBalance_output;
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <goto_angle+0x19c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <goto_angle+0x18c>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e004      	b.n	80028e2 <goto_angle+0x162>
			speed[FRONT_INDEX] = 0;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <goto_angle+0x18c>)
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	e7ff      	b.n	80028e2 <goto_angle+0x162>
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028ec:	20000580 	.word	0x20000580
 80028f0:	20000520 	.word	0x20000520
 80028f4:	20000110 	.word	0x20000110
 80028f8:	3ff00000 	.word	0x3ff00000
 80028fc:	20000300 	.word	0x20000300
 8002900:	200002b4 	.word	0x200002b4
 8002904:	200002ac 	.word	0x200002ac
 8002908:	200002b0 	.word	0x200002b0
 800290c:	200002bc 	.word	0x200002bc
 8002910:	200005c8 	.word	0x200005c8
 8002914:	200002a0 	.word	0x200002a0
 8002918:	20000298 	.word	0x20000298
 800291c:	2000029c 	.word	0x2000029c

08002920 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af04      	add	r7, sp, #16
 800294a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800294c:	2364      	movs	r3, #100	; 0x64
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	2301      	movs	r3, #1
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	f107 030f 	add.w	r3, r7, #15
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2301      	movs	r3, #1
 800295c:	2275      	movs	r2, #117	; 0x75
 800295e:	21d0      	movs	r1, #208	; 0xd0
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f003 fded 	bl	8006540 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b68      	cmp	r3, #104	; 0x68
 800296a:	d13d      	bne.n	80029e8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002970:	2364      	movs	r3, #100	; 0x64
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	2301      	movs	r3, #1
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	f107 030e 	add.w	r3, r7, #14
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2301      	movs	r3, #1
 8002980:	226b      	movs	r2, #107	; 0x6b
 8002982:	21d0      	movs	r1, #208	; 0xd0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f003 fcd5 	bl	8006334 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800298a:	2307      	movs	r3, #7
 800298c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800298e:	2364      	movs	r3, #100	; 0x64
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	2301      	movs	r3, #1
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	f107 030e 	add.w	r3, r7, #14
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2301      	movs	r3, #1
 800299e:	2219      	movs	r2, #25
 80029a0:	21d0      	movs	r1, #208	; 0xd0
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f003 fcc6 	bl	8006334 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80029ac:	2364      	movs	r3, #100	; 0x64
 80029ae:	9302      	str	r3, [sp, #8]
 80029b0:	2301      	movs	r3, #1
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	f107 030e 	add.w	r3, r7, #14
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2301      	movs	r3, #1
 80029bc:	221c      	movs	r2, #28
 80029be:	21d0      	movs	r1, #208	; 0xd0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f003 fcb7 	bl	8006334 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f107 030e 	add.w	r3, r7, #14
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	221b      	movs	r2, #27
 80029dc:	21d0      	movs	r1, #208	; 0xd0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f003 fca8 	bl	8006334 <HAL_I2C_Mem_Write>
        return 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <MPU6050_Init+0xa6>
    }
    return 1;
 80029e8:	2301      	movs	r3, #1
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	0000      	movs	r0, r0
 80029f4:	0000      	movs	r0, r0
	...

080029f8 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80029f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029fc:	b094      	sub	sp, #80	; 0x50
 80029fe:	af04      	add	r7, sp, #16
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002a04:	2364      	movs	r3, #100	; 0x64
 8002a06:	9302      	str	r3, [sp, #8]
 8002a08:	230e      	movs	r3, #14
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2301      	movs	r3, #1
 8002a14:	223b      	movs	r2, #59	; 0x3b
 8002a16:	21d0      	movs	r1, #208	; 0xd0
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f003 fd91 	bl	8006540 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002a1e:	7a3b      	ldrb	r3, [r7, #8]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	7a7b      	ldrb	r3, [r7, #9]
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002a30:	7abb      	ldrb	r3, [r7, #10]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002a42:	7b3b      	ldrb	r3, [r7, #12]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	7b7b      	ldrb	r3, [r7, #13]
 8002a4a:	b21b      	sxth	r3, r3
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b21a      	sxth	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002a54:	7bbb      	ldrb	r3, [r7, #14]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	b21a      	sxth	r2, r3
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002a62:	7c3b      	ldrb	r3, [r7, #16]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	7c7b      	ldrb	r3, [r7, #17]
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002a74:	7cbb      	ldrb	r3, [r7, #18]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002a86:	7d3b      	ldrb	r3, [r7, #20]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b21a      	sxth	r2, r3
 8002a8c:	7d7b      	ldrb	r3, [r7, #21]
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b21a      	sxth	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fcf8 	bl	8000494 <__aeabi_i2d>
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	4bbd      	ldr	r3, [pc, #756]	; (8002da0 <MPU6050_Read_All+0x3a8>)
 8002aaa:	f7fd fe87 	bl	80007bc <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	6839      	ldr	r1, [r7, #0]
 8002ab4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fce8 	bl	8000494 <__aeabi_i2d>
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	4bb5      	ldr	r3, [pc, #724]	; (8002da0 <MPU6050_Read_All+0x3a8>)
 8002aca:	f7fd fe77 	bl	80007bc <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fcd8 	bl	8000494 <__aeabi_i2d>
 8002ae4:	a3a8      	add	r3, pc, #672	; (adr r3, 8002d88 <MPU6050_Read_All+0x390>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fe67 	bl	80007bc <__aeabi_ddiv>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002af8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b04:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002da4 <MPU6050_Read_All+0x3ac>
 8002b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002da8 <MPU6050_Read_All+0x3b0>
 8002b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fcb7 	bl	8000494 <__aeabi_i2d>
 8002b26:	a39a      	add	r3, pc, #616	; (adr r3, 8002d90 <MPU6050_Read_All+0x398>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fe46 	bl	80007bc <__aeabi_ddiv>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fca7 	bl	8000494 <__aeabi_i2d>
 8002b46:	a392      	add	r3, pc, #584	; (adr r3, 8002d90 <MPU6050_Read_All+0x398>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fe36 	bl	80007bc <__aeabi_ddiv>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fc97 	bl	8000494 <__aeabi_i2d>
 8002b66:	a38a      	add	r3, pc, #552	; (adr r3, 8002d90 <MPU6050_Read_All+0x398>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f7fd fe26 	bl	80007bc <__aeabi_ddiv>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002b7a:	f001 f831 	bl	8003be0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b8a      	ldr	r3, [pc, #552]	; (8002dac <MPU6050_Read_All+0x3b4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fc74 	bl	8000474 <__aeabi_ui2d>
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	4b87      	ldr	r3, [pc, #540]	; (8002db0 <MPU6050_Read_All+0x3b8>)
 8002b92:	f7fd fe13 	bl	80007bc <__aeabi_ddiv>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002b9e:	f001 f81f 	bl	8003be0 <HAL_GetTick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a81      	ldr	r2, [pc, #516]	; (8002dac <MPU6050_Read_All+0x3b4>)
 8002ba6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb6:	fb03 f202 	mul.w	r2, r3, r2
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bc8:	fb03 f301 	mul.w	r3, r3, r1
 8002bcc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fc60 	bl	8000494 <__aeabi_i2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	ec43 2b10 	vmov	d0, r2, r3
 8002bdc:	f008 fe9c 	bl	800b918 <sqrt>
 8002be0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bf0:	f7fd ff22 	bl	8000a38 <__aeabi_dcmpeq>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11f      	bne.n	8002c3a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fc47 	bl	8000494 <__aeabi_i2d>
 8002c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c0a:	f7fd fdd7 	bl	80007bc <__aeabi_ddiv>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	ec43 2b17 	vmov	d7, r2, r3
 8002c16:	eeb0 0a47 	vmov.f32	s0, s14
 8002c1a:	eef0 0a67 	vmov.f32	s1, s15
 8002c1e:	f008 fccf 	bl	800b5c0 <atan>
 8002c22:	ec51 0b10 	vmov	r0, r1, d0
 8002c26:	a35c      	add	r3, pc, #368	; (adr r3, 8002d98 <MPU6050_Read_All+0x3a0>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd fc9c 	bl	8000568 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002c38:	e005      	b.n	8002c46 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4c:	425b      	negs	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc20 	bl	8000494 <__aeabi_i2d>
 8002c54:	4682      	mov	sl, r0
 8002c56:	468b      	mov	fp, r1
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc18 	bl	8000494 <__aeabi_i2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	ec43 2b11 	vmov	d1, r2, r3
 8002c6c:	ec4b ab10 	vmov	d0, sl, fp
 8002c70:	f008 fe4f 	bl	800b912 <atan2>
 8002c74:	ec51 0b10 	vmov	r0, r1, d0
 8002c78:	a347      	add	r3, pc, #284	; (adr r3, 8002d98 <MPU6050_Read_All+0x3a0>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fc73 	bl	8000568 <__aeabi_dmul>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <MPU6050_Read_All+0x3bc>)
 8002c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c94:	f7fd feda 	bl	8000a4c <__aeabi_dcmplt>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <MPU6050_Read_All+0x2bc>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <MPU6050_Read_All+0x3c0>)
 8002caa:	f7fd feed 	bl	8000a88 <__aeabi_dcmpgt>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d114      	bne.n	8002cde <MPU6050_Read_All+0x2e6>
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <MPU6050_Read_All+0x3c0>)
 8002cba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cbe:	f7fd fee3 	bl	8000a88 <__aeabi_dcmpgt>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <MPU6050_Read_All+0x2fc>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <MPU6050_Read_All+0x3bc>)
 8002cd4:	f7fd feba 	bl	8000a4c <__aeabi_dcmplt>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8002cde:	4937      	ldr	r1, [pc, #220]	; (8002dbc <MPU6050_Read_All+0x3c4>)
 8002ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002ce8:	6839      	ldr	r1, [r7, #0]
 8002cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002cf2:	e014      	b.n	8002d1e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002cfa:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002cfe:	eeb0 1a47 	vmov.f32	s2, s14
 8002d02:	eef0 1a67 	vmov.f32	s3, s15
 8002d06:	ed97 0b06 	vldr	d0, [r7, #24]
 8002d0a:	482c      	ldr	r0, [pc, #176]	; (8002dbc <MPU6050_Read_All+0x3c4>)
 8002d0c:	f000 f85a 	bl	8002dc4 <Kalman_getAngle>
 8002d10:	eeb0 7a40 	vmov.f32	s14, s0
 8002d14:	eef0 7a60 	vmov.f32	s15, s1
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002d24:	4690      	mov	r8, r2
 8002d26:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <MPU6050_Read_All+0x3c0>)
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fea8 	bl	8000a88 <__aeabi_dcmpgt>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d44:	4614      	mov	r4, r2
 8002d46:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002d56:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002d5a:	eeb0 1a47 	vmov.f32	s2, s14
 8002d5e:	eef0 1a67 	vmov.f32	s3, s15
 8002d62:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002d66:	4816      	ldr	r0, [pc, #88]	; (8002dc0 <MPU6050_Read_All+0x3c8>)
 8002d68:	f000 f82c 	bl	8002dc4 <Kalman_getAngle>
 8002d6c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d70:	eef0 7a60 	vmov.f32	s15, s1
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002d7a:	bf00      	nop
 8002d7c:	3740      	adds	r7, #64	; 0x40
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d84:	f3af 8000 	nop.w
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	40cc2900 	.word	0x40cc2900
 8002d90:	00000000 	.word	0x00000000
 8002d94:	40606000 	.word	0x40606000
 8002d98:	1a63c1f8 	.word	0x1a63c1f8
 8002d9c:	404ca5dc 	.word	0x404ca5dc
 8002da0:	40d00000 	.word	0x40d00000
 8002da4:	43aa0000 	.word	0x43aa0000
 8002da8:	42121eb8 	.word	0x42121eb8
 8002dac:	20000624 	.word	0x20000624
 8002db0:	408f4000 	.word	0x408f4000
 8002db4:	c0568000 	.word	0xc0568000
 8002db8:	40568000 	.word	0x40568000
 8002dbc:	200001b8 	.word	0x200001b8
 8002dc0:	20000170 	.word	0x20000170

08002dc4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b096      	sub	sp, #88	; 0x58
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	61f8      	str	r0, [r7, #28]
 8002dcc:	ed87 0b04 	vstr	d0, [r7, #16]
 8002dd0:	ed87 1b02 	vstr	d1, [r7, #8]
 8002dd4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002de2:	f7fd fa09 	bl	80001f8 <__aeabi_dsub>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dfc:	f7fd fbb4 	bl	8000568 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4620      	mov	r0, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7fd f9f8 	bl	80001fc <__adddf3>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	69f9      	ldr	r1, [r7, #28]
 8002e12:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e26:	f7fd fb9f 	bl	8000568 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e38:	f7fd f9de 	bl	80001f8 <__aeabi_dsub>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e4a:	f7fd f9d5 	bl	80001f8 <__aeabi_dsub>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd f9ce 	bl	80001fc <__adddf3>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e6c:	f7fd fb7c 	bl	8000568 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd f9c0 	bl	80001fc <__adddf3>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	69f9      	ldr	r1, [r7, #28]
 8002e82:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e96:	f7fd fb67 	bl	8000568 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7fd f9a9 	bl	80001f8 <__aeabi_dsub>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	69f9      	ldr	r1, [r7, #28]
 8002eac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec0:	f7fd fb52 	bl	8000568 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f994 	bl	80001f8 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	69f9      	ldr	r1, [r7, #28]
 8002ed6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eea:	f7fd fb3d 	bl	8000568 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7fd f981 	bl	80001fc <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	69f9      	ldr	r1, [r7, #28]
 8002f00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f10:	f7fd f974 	bl	80001fc <__adddf3>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f26:	f7fd fc49 	bl	80007bc <__aeabi_ddiv>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002f38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f3c:	f7fd fc3e 	bl	80007bc <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f52:	f7fd f951 	bl	80001f8 <__aeabi_dsub>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f6c:	f7fd fafc 	bl	8000568 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4620      	mov	r0, r4
 8002f76:	4629      	mov	r1, r5
 8002f78:	f7fd f940 	bl	80001fc <__adddf3>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	69f9      	ldr	r1, [r7, #28]
 8002f82:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002f8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f94:	f7fd fae8 	bl	8000568 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7fd f92c 	bl	80001fc <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	69f9      	ldr	r1, [r7, #28]
 8002faa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002fb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002fbe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002fc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd0:	f7fd faca 	bl	8000568 <__aeabi_dmul>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4629      	mov	r1, r5
 8002fdc:	f7fd f90c 	bl	80001f8 <__aeabi_dsub>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	69f9      	ldr	r1, [r7, #28]
 8002fe6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ff0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ff4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ff8:	f7fd fab6 	bl	8000568 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4620      	mov	r0, r4
 8003002:	4629      	mov	r1, r5
 8003004:	f7fd f8f8 	bl	80001f8 <__aeabi_dsub>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003018:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800301c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003020:	f7fd faa2 	bl	8000568 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f8e4 	bl	80001f8 <__aeabi_dsub>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	69f9      	ldr	r1, [r7, #28]
 8003036:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003040:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003044:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003048:	f7fd fa8e 	bl	8000568 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	f7fd f8d0 	bl	80001f8 <__aeabi_dsub>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	69f9      	ldr	r1, [r7, #28]
 800305e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003068:	ec43 2b17 	vmov	d7, r2, r3
};
 800306c:	eeb0 0a47 	vmov.f32	s0, s14
 8003070:	eef0 0a67 	vmov.f32	s1, s15
 8003074:	3758      	adds	r7, #88	; 0x58
 8003076:	46bd      	mov	sp, r7
 8003078:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800307c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <MX_SPI1_Init+0x68>)
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <MX_SPI1_Init+0x6c>)
 8003084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <MX_SPI1_Init+0x68>)
 8003088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800308c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <MX_SPI1_Init+0x68>)
 8003090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003094:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003096:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <MX_SPI1_Init+0x68>)
 8003098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030a0:	2202      	movs	r2, #2
 80030a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030b4:	2228      	movs	r2, #40	; 0x28
 80030b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030cc:	220a      	movs	r2, #10
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <MX_SPI1_Init+0x68>)
 80030d2:	f004 fead 	bl	8007e30 <HAL_SPI_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80030dc:	f7ff fc20 	bl	8002920 <Error_Handler>
  }

}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000304 	.word	0x20000304
 80030e8:	40013000 	.word	0x40013000

080030ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_SPI_MspInit+0x84>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d12b      	bne.n	8003166 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_SPI_MspInit+0x88>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_SPI_MspInit+0x88>)
 8003118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_SPI_MspInit+0x88>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_SPI_MspInit+0x88>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_SPI_MspInit+0x88>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_SPI_MspInit+0x88>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003146:	2360      	movs	r3, #96	; 0x60
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003156:	2305      	movs	r3, #5
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <HAL_SPI_MspInit+0x8c>)
 8003162:	f002 fb7f 	bl	8005864 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40013000 	.word	0x40013000
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000

0800317c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_MspInit+0x4c>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <HAL_MspInit+0x4c>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <HAL_MspInit+0x4c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_MspInit+0x4c>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_MspInit+0x4c>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_MspInit+0x4c>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800

080031cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031de:	e7fe      	b.n	80031de <HardFault_Handler+0x4>

080031e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <MemManage_Handler+0x4>

080031e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <BusFault_Handler+0x4>

080031ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <UsageFault_Handler+0x4>

080031f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003220:	f000 fcca 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <DMA1_Stream1_IRQHandler+0x10>)
 800322e:	f002 f8dd 	bl	80053ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000728 	.word	0x20000728

0800323c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <CAN1_RX0_IRQHandler+0x10>)
 8003242:	f001 fb1f 	bl	8004884 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000035c 	.word	0x2000035c

08003250 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003254:	2080      	movs	r0, #128	; 0x80
 8003256:	f002 fe89 	bl	8005f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <SystemInit+0x28>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	4a07      	ldr	r2, [pc, #28]	; (8003288 <SystemInit+0x28>)
 800326c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <SystemInit+0x28>)
 8003276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800327a:	609a      	str	r2, [r3, #8]
#endif
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b096      	sub	sp, #88	; 0x58
 8003290:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	611a      	str	r2, [r3, #16]
 80032ba:	615a      	str	r2, [r3, #20]
 80032bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	2220      	movs	r2, #32
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f008 f973 	bl	800b5b0 <memset>

  htim1.Instance = TIM1;
 80032ca:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032cc:	4a3e      	ldr	r2, [pc, #248]	; (80033c8 <MX_TIM1_Init+0x13c>)
 80032ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80032d0:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032d2:	22b3      	movs	r2, #179	; 0xb3
 80032d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d6:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032de:	2263      	movs	r2, #99	; 0x63
 80032e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e2:	4b38      	ldr	r3, [pc, #224]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032f4:	4833      	ldr	r0, [pc, #204]	; (80033c4 <MX_TIM1_Init+0x138>)
 80032f6:	f005 fa99 	bl	800882c <HAL_TIM_Base_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003300:	f7ff fb0e 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800330a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800330e:	4619      	mov	r1, r3
 8003310:	482c      	ldr	r0, [pc, #176]	; (80033c4 <MX_TIM1_Init+0x138>)
 8003312:	f006 fa17 	bl	8009744 <HAL_TIM_ConfigClockSource>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800331c:	f7ff fb00 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003320:	4828      	ldr	r0, [pc, #160]	; (80033c4 <MX_TIM1_Init+0x138>)
 8003322:	f005 fbd9 	bl	8008ad8 <HAL_TIM_PWM_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800332c:	f7ff faf8 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003334:	2300      	movs	r3, #0
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800333c:	4619      	mov	r1, r3
 800333e:	4821      	ldr	r0, [pc, #132]	; (80033c4 <MX_TIM1_Init+0x138>)
 8003340:	f007 fa9e 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800334a:	f7ff fae9 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800334e:	2360      	movs	r3, #96	; 0x60
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800335a:	2300      	movs	r3, #0
 800335c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800336a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336e:	2204      	movs	r2, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4814      	ldr	r0, [pc, #80]	; (80033c4 <MX_TIM1_Init+0x138>)
 8003374:	f006 f80a 	bl	800938c <HAL_TIM_PWM_ConfigChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800337e:	f7ff facf 	bl	8002920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4807      	ldr	r0, [pc, #28]	; (80033c4 <MX_TIM1_Init+0x138>)
 80033a6:	f007 fb49 	bl	800aa3c <HAL_TIMEx_ConfigBreakDeadTime>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80033b0:	f7ff fab6 	bl	8002920 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80033b4:	4803      	ldr	r0, [pc, #12]	; (80033c4 <MX_TIM1_Init+0x138>)
 80033b6:	f000 fa2b 	bl	8003810 <HAL_TIM_MspPostInit>

}
 80033ba:	bf00      	nop
 80033bc:	3758      	adds	r7, #88	; 0x58
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200006a8 	.word	0x200006a8
 80033c8:	40010000 	.word	0x40010000

080033cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d2:	f107 0318 	add.w	r3, r7, #24
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80033ea:	463b      	mov	r3, r7
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <MX_TIM2_Init+0xf0>)
 80033f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <MX_TIM2_Init+0xf0>)
 8003400:	22b3      	movs	r2, #179	; 0xb3
 8003402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003404:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <MX_TIM2_Init+0xf0>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <MX_TIM2_Init+0xf0>)
 800340c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <MX_TIM2_Init+0xf0>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003418:	4b28      	ldr	r3, [pc, #160]	; (80034bc <MX_TIM2_Init+0xf0>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800341e:	4827      	ldr	r0, [pc, #156]	; (80034bc <MX_TIM2_Init+0xf0>)
 8003420:	f005 fa04 	bl	800882c <HAL_TIM_Base_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800342a:	f7ff fa79 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800342e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003432:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003434:	f107 0318 	add.w	r3, r7, #24
 8003438:	4619      	mov	r1, r3
 800343a:	4820      	ldr	r0, [pc, #128]	; (80034bc <MX_TIM2_Init+0xf0>)
 800343c:	f006 f982 	bl	8009744 <HAL_TIM_ConfigClockSource>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003446:	f7ff fa6b 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800344a:	481c      	ldr	r0, [pc, #112]	; (80034bc <MX_TIM2_Init+0xf0>)
 800344c:	f005 fd14 	bl	8008e78 <HAL_TIM_IC_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003456:	f7ff fa63 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	4619      	mov	r1, r3
 8003468:	4814      	ldr	r0, [pc, #80]	; (80034bc <MX_TIM2_Init+0xf0>)
 800346a:	f007 fa09 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003474:	f7ff fa54 	bl	8002920 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003478:	2300      	movs	r3, #0
 800347a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800347c:	2301      	movs	r3, #1
 800347e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003488:	463b      	mov	r3, r7
 800348a:	2208      	movs	r2, #8
 800348c:	4619      	mov	r1, r3
 800348e:	480b      	ldr	r0, [pc, #44]	; (80034bc <MX_TIM2_Init+0xf0>)
 8003490:	f005 fdc8 	bl	8009024 <HAL_TIM_IC_ConfigChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800349a:	f7ff fa41 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800349e:	463b      	mov	r3, r7
 80034a0:	220c      	movs	r2, #12
 80034a2:	4619      	mov	r1, r3
 80034a4:	4805      	ldr	r0, [pc, #20]	; (80034bc <MX_TIM2_Init+0xf0>)
 80034a6:	f005 fdbd 	bl	8009024 <HAL_TIM_IC_ConfigChannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80034b0:	f7ff fa36 	bl	8002920 <Error_Handler>
  }

}
 80034b4:	bf00      	nop
 80034b6:	3728      	adds	r7, #40	; 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	200006e8 	.word	0x200006e8

080034c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	; 0x38
 80034c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d4:	f107 0320 	add.w	r3, r7, #32
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
 80034ec:	615a      	str	r2, [r3, #20]
 80034ee:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <MX_TIM3_Init+0xfc>)
 80034f2:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <MX_TIM3_Init+0x100>)
 80034f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <MX_TIM3_Init+0xfc>)
 80034f8:	2259      	movs	r2, #89	; 0x59
 80034fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <MX_TIM3_Init+0xfc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003502:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <MX_TIM3_Init+0xfc>)
 8003504:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003508:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <MX_TIM3_Init+0xfc>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <MX_TIM3_Init+0xfc>)
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003516:	4829      	ldr	r0, [pc, #164]	; (80035bc <MX_TIM3_Init+0xfc>)
 8003518:	f005 f988 	bl	800882c <HAL_TIM_Base_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003522:	f7ff f9fd 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800352c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003530:	4619      	mov	r1, r3
 8003532:	4822      	ldr	r0, [pc, #136]	; (80035bc <MX_TIM3_Init+0xfc>)
 8003534:	f006 f906 	bl	8009744 <HAL_TIM_ConfigClockSource>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800353e:	f7ff f9ef 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003542:	481e      	ldr	r0, [pc, #120]	; (80035bc <MX_TIM3_Init+0xfc>)
 8003544:	f005 fac8 	bl	8008ad8 <HAL_TIM_PWM_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800354e:	f7ff f9e7 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	4619      	mov	r1, r3
 8003560:	4816      	ldr	r0, [pc, #88]	; (80035bc <MX_TIM3_Init+0xfc>)
 8003562:	f007 f98d 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800356c:	f7ff f9d8 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003570:	2360      	movs	r3, #96	; 0x60
 8003572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003574:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	2200      	movs	r2, #0
 8003586:	4619      	mov	r1, r3
 8003588:	480c      	ldr	r0, [pc, #48]	; (80035bc <MX_TIM3_Init+0xfc>)
 800358a:	f005 feff 	bl	800938c <HAL_TIM_PWM_ConfigChannel>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003594:	f7ff f9c4 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	2204      	movs	r2, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4807      	ldr	r0, [pc, #28]	; (80035bc <MX_TIM3_Init+0xfc>)
 80035a0:	f005 fef4 	bl	800938c <HAL_TIM_PWM_ConfigChannel>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80035aa:	f7ff f9b9 	bl	8002920 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80035ae:	4803      	ldr	r0, [pc, #12]	; (80035bc <MX_TIM3_Init+0xfc>)
 80035b0:	f000 f92e 	bl	8003810 <HAL_TIM_MspPostInit>

}
 80035b4:	bf00      	nop
 80035b6:	3738      	adds	r7, #56	; 0x38
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000668 	.word	0x20000668
 80035c0:	40000400 	.word	0x40000400

080035c4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b096      	sub	sp, #88	; 0x58
 80035c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	611a      	str	r2, [r3, #16]
 80035f2:	615a      	str	r2, [r3, #20]
 80035f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2220      	movs	r2, #32
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f007 ffd7 	bl	800b5b0 <memset>

  htim8.Instance = TIM8;
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <MX_TIM8_Init+0x134>)
 8003604:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <MX_TIM8_Init+0x138>)
 8003606:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <MX_TIM8_Init+0x134>)
 800360a:	22b3      	movs	r2, #179	; 0xb3
 800360c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <MX_TIM8_Init+0x134>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8003614:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <MX_TIM8_Init+0x134>)
 8003616:	2263      	movs	r2, #99	; 0x63
 8003618:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <MX_TIM8_Init+0x134>)
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <MX_TIM8_Init+0x134>)
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003626:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <MX_TIM8_Init+0x134>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800362c:	4832      	ldr	r0, [pc, #200]	; (80036f8 <MX_TIM8_Init+0x134>)
 800362e:	f005 f8fd 	bl	800882c <HAL_TIM_Base_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003638:	f7ff f972 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003646:	4619      	mov	r1, r3
 8003648:	482b      	ldr	r0, [pc, #172]	; (80036f8 <MX_TIM8_Init+0x134>)
 800364a:	f006 f87b 	bl	8009744 <HAL_TIM_ConfigClockSource>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003654:	f7ff f964 	bl	8002920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003658:	4827      	ldr	r0, [pc, #156]	; (80036f8 <MX_TIM8_Init+0x134>)
 800365a:	f005 fa3d 	bl	8008ad8 <HAL_TIM_PWM_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003664:	f7ff f95c 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003668:	2300      	movs	r3, #0
 800366a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003674:	4619      	mov	r1, r3
 8003676:	4820      	ldr	r0, [pc, #128]	; (80036f8 <MX_TIM8_Init+0x134>)
 8003678:	f007 f902 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003682:	f7ff f94d 	bl	8002920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003686:	2360      	movs	r3, #96	; 0x60
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800369e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a2:	220c      	movs	r2, #12
 80036a4:	4619      	mov	r1, r3
 80036a6:	4814      	ldr	r0, [pc, #80]	; (80036f8 <MX_TIM8_Init+0x134>)
 80036a8:	f005 fe70 	bl	800938c <HAL_TIM_PWM_ConfigChannel>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80036b2:	f7ff f935 	bl	8002920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4807      	ldr	r0, [pc, #28]	; (80036f8 <MX_TIM8_Init+0x134>)
 80036da:	f007 f9af 	bl	800aa3c <HAL_TIMEx_ConfigBreakDeadTime>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 80036e4:	f7ff f91c 	bl	8002920 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <MX_TIM8_Init+0x134>)
 80036ea:	f000 f891 	bl	8003810 <HAL_TIM_MspPostInit>

}
 80036ee:	bf00      	nop
 80036f0:	3758      	adds	r7, #88	; 0x58
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000628 	.word	0x20000628
 80036fc:	40010400 	.word	0x40010400

08003700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 031c 	add.w	r3, r7, #28
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a37      	ldr	r2, [pc, #220]	; (80037fc <HAL_TIM_Base_MspInit+0xfc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a35      	ldr	r2, [pc, #212]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b33      	ldr	r3, [pc, #204]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800373e:	e059      	b.n	80037f4 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003748:	d12d      	bne.n	80037a6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b29      	ldr	r3, [pc, #164]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a24      	ldr	r2, [pc, #144]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8003782:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003794:	2301      	movs	r3, #1
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f107 031c 	add.w	r3, r7, #28
 800379c:	4619      	mov	r1, r3
 800379e:	4819      	ldr	r0, [pc, #100]	; (8003804 <HAL_TIM_Base_MspInit+0x104>)
 80037a0:	f002 f860 	bl	8005864 <HAL_GPIO_Init>
}
 80037a4:	e026      	b.n	80037f4 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_TIM_Base_MspInit+0x108>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10e      	bne.n	80037ce <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	4a11      	ldr	r2, [pc, #68]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	e012      	b.n	80037f4 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a0e      	ldr	r2, [pc, #56]	; (800380c <HAL_TIM_Base_MspInit+0x10c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10d      	bne.n	80037f4 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	6453      	str	r3, [r2, #68]	; 0x44
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_TIM_Base_MspInit+0x100>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	bf00      	nop
 80037f6:	3730      	adds	r7, #48	; 0x30
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40010000 	.word	0x40010000
 8003800:	40023800 	.word	0x40023800
 8003804:	40020400 	.word	0x40020400
 8003808:	40000400 	.word	0x40000400
 800380c:	40010400 	.word	0x40010400

08003810 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a37      	ldr	r2, [pc, #220]	; (800390c <HAL_TIM_MspPostInit+0xfc>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d11f      	bne.n	8003872 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a35      	ldr	r2, [pc, #212]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b33      	ldr	r3, [pc, #204]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 800384e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003854:	2302      	movs	r3, #2
 8003856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2300      	movs	r3, #0
 800385e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003860:	2301      	movs	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	4619      	mov	r1, r3
 800386a:	482a      	ldr	r0, [pc, #168]	; (8003914 <HAL_TIM_MspPostInit+0x104>)
 800386c:	f001 fffa 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003870:	e047      	b.n	8003902 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <HAL_TIM_MspPostInit+0x108>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d11e      	bne.n	80038ba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4a22      	ldr	r2, [pc, #136]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 8003886:	f043 0304 	orr.w	r3, r3, #4
 800388a:	6313      	str	r3, [r2, #48]	; 0x30
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8003898:	23c0      	movs	r3, #192	; 0xc0
 800389a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038a8:	2302      	movs	r3, #2
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	481a      	ldr	r0, [pc, #104]	; (800391c <HAL_TIM_MspPostInit+0x10c>)
 80038b4:	f001 ffd6 	bl	8005864 <HAL_GPIO_Init>
}
 80038b8:	e023      	b.n	8003902 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_TIM_MspPostInit+0x110>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d11e      	bne.n	8003902 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4a10      	ldr	r2, [pc, #64]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	6313      	str	r3, [r2, #48]	; 0x30
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <HAL_TIM_MspPostInit+0x100>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 80038e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038f2:	2303      	movs	r3, #3
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	4619      	mov	r1, r3
 80038fc:	4807      	ldr	r0, [pc, #28]	; (800391c <HAL_TIM_MspPostInit+0x10c>)
 80038fe:	f001 ffb1 	bl	8005864 <HAL_GPIO_Init>
}
 8003902:	bf00      	nop
 8003904:	3728      	adds	r7, #40	; 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40023800 	.word	0x40023800
 8003914:	40020000 	.word	0x40020000
 8003918:	40000400 	.word	0x40000400
 800391c:	40020800 	.word	0x40020800
 8003920:	40010400 	.word	0x40010400

08003924 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <MX_USART3_UART_Init+0x50>)
 800392c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 8003930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 800394a:	220c      	movs	r2, #12
 800394c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800395a:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_USART3_UART_Init+0x4c>)
 800395c:	f007 f93a 	bl	800abd4 <HAL_UART_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003966:	f7fe ffdb 	bl	8002920 <Error_Handler>
  }

}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000788 	.word	0x20000788
 8003974:	40004800 	.word	0x40004800

08003978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a30      	ldr	r2, [pc, #192]	; (8003a58 <HAL_UART_MspInit+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d15a      	bne.n	8003a50 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_UART_MspInit+0xe4>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <HAL_UART_MspInit+0xe4>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_UART_MspInit+0xe4>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_UART_MspInit+0xe4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_UART_MspInit+0xe4>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_UART_MspInit+0xe4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80039d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039e4:	2307      	movs	r3, #7
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	4619      	mov	r1, r3
 80039ee:	481c      	ldr	r0, [pc, #112]	; (8003a60 <HAL_UART_MspInit+0xe8>)
 80039f0:	f001 ff38 	bl	8005864 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_UART_MspInit+0xec>)
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_UART_MspInit+0xf0>)
 80039f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_UART_MspInit+0xec>)
 80039fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a02:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a28:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a34:	480b      	ldr	r0, [pc, #44]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a36:	f001 fabd 	bl	8004fb4 <HAL_DMA_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003a40:	f7fe ff6e 	bl	8002920 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34
 8003a4a:	4a06      	ldr	r2, [pc, #24]	; (8003a64 <HAL_UART_MspInit+0xec>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a50:	bf00      	nop
 8003a52:	3728      	adds	r7, #40	; 0x28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40004800 	.word	0x40004800
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	20000728 	.word	0x20000728
 8003a68:	40026028 	.word	0x40026028

08003a6c <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a78:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ac6:	e003      	b.n	8003ad0 <LoopCopyDataInit>

08003ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ace:	3104      	adds	r1, #4

08003ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ad0:	480b      	ldr	r0, [pc, #44]	; (8003b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ad8:	d3f6      	bcc.n	8003ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003adc:	e002      	b.n	8003ae4 <LoopFillZerobss>

08003ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ae0:	f842 3b04 	str.w	r3, [r2], #4

08003ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ae8:	d3f9      	bcc.n	8003ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003aea:	f7ff fbb9 	bl	8003260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aee:	f007 fd3b 	bl	800b568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fe f9bf 	bl	8001e74 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003af8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003afc:	0800bfe8 	.word	0x0800bfe8
  ldr  r0, =_sdata
 8003b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b04:	20000274 	.word	0x20000274
  ldr  r2, =_sbss
 8003b08:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 8003b0c:	200007cc 	.word	0x200007cc

08003b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_Init+0x40>)
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_Init+0x40>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_Init+0x40>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f001 f9a1 	bl	8004e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 f808 	bl	8003b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fb18 	bl	800317c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_InitTick+0x54>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_InitTick+0x58>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f9e8 	bl	8004f4c <HAL_SYSTICK_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00e      	b.n	8003ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d80a      	bhi.n	8003ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b94:	f001 f996 	bl	8004ec4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b98:	4a06      	ldr	r2, [pc, #24]	; (8003bb4 <HAL_InitTick+0x5c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000200 	.word	0x20000200
 8003bb0:	20000208 	.word	0x20000208
 8003bb4:	20000204 	.word	0x20000204

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000208 	.word	0x20000208
 8003bdc:	200007c8 	.word	0x200007c8

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	200007c8 	.word	0x200007c8

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff ffee 	bl	8003be0 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_Delay+0x44>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000208 	.word	0x20000208

08003c40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e20e      	b.n	8004070 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4aa0      	ldr	r2, [pc, #640]	; (8003ed8 <HAL_CAN_Init+0x298>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <HAL_CAN_Init+0x30>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a9e      	ldr	r2, [pc, #632]	; (8003edc <HAL_CAN_Init+0x29c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_CAN_Init+0x30>
 8003c66:	f240 111d 	movw	r1, #285	; 0x11d
 8003c6a:	489d      	ldr	r0, [pc, #628]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003c6c:	f7fe fe5f 	bl	800292e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7e1b      	ldrb	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_CAN_Init+0x4a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7e1b      	ldrb	r3, [r3, #24]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d004      	beq.n	8003c8a <HAL_CAN_Init+0x4a>
 8003c80:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003c84:	4896      	ldr	r0, [pc, #600]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003c86:	f7fe fe52 	bl	800292e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7e5b      	ldrb	r3, [r3, #25]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_CAN_Init+0x64>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7e5b      	ldrb	r3, [r3, #25]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d004      	beq.n	8003ca4 <HAL_CAN_Init+0x64>
 8003c9a:	f240 111f 	movw	r1, #287	; 0x11f
 8003c9e:	4890      	ldr	r0, [pc, #576]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003ca0:	f7fe fe45 	bl	800292e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e9b      	ldrb	r3, [r3, #26]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_CAN_Init+0x7e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e9b      	ldrb	r3, [r3, #26]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d004      	beq.n	8003cbe <HAL_CAN_Init+0x7e>
 8003cb4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003cb8:	4889      	ldr	r0, [pc, #548]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003cba:	f7fe fe38 	bl	800292e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7edb      	ldrb	r3, [r3, #27]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_CAN_Init+0x98>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	7edb      	ldrb	r3, [r3, #27]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d004      	beq.n	8003cd8 <HAL_CAN_Init+0x98>
 8003cce:	f240 1121 	movw	r1, #289	; 0x121
 8003cd2:	4883      	ldr	r0, [pc, #524]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003cd4:	f7fe fe2b 	bl	800292e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7f1b      	ldrb	r3, [r3, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_CAN_Init+0xb2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7f1b      	ldrb	r3, [r3, #28]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d004      	beq.n	8003cf2 <HAL_CAN_Init+0xb2>
 8003ce8:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003cec:	487c      	ldr	r0, [pc, #496]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003cee:	f7fe fe1e 	bl	800292e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7f5b      	ldrb	r3, [r3, #29]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_CAN_Init+0xcc>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7f5b      	ldrb	r3, [r3, #29]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d004      	beq.n	8003d0c <HAL_CAN_Init+0xcc>
 8003d02:	f240 1123 	movw	r1, #291	; 0x123
 8003d06:	4876      	ldr	r0, [pc, #472]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003d08:	f7fe fe11 	bl	800292e <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_CAN_Init+0xfc>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d00e      	beq.n	8003d3c <HAL_CAN_Init+0xfc>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d26:	d009      	beq.n	8003d3c <HAL_CAN_Init+0xfc>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003d30:	d004      	beq.n	8003d3c <HAL_CAN_Init+0xfc>
 8003d32:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003d36:	486a      	ldr	r0, [pc, #424]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003d38:	f7fe fdf9 	bl	800292e <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_CAN_Init+0x12c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4c:	d00e      	beq.n	8003d6c <HAL_CAN_Init+0x12c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d56:	d009      	beq.n	8003d6c <HAL_CAN_Init+0x12c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d60:	d004      	beq.n	8003d6c <HAL_CAN_Init+0x12c>
 8003d62:	f240 1125 	movw	r1, #293	; 0x125
 8003d66:	485e      	ldr	r0, [pc, #376]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003d68:	f7fe fde1 	bl	800292e <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d04f      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d04a      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d86:	d045      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d90:	d040      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9a:	d03b      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da4:	d036      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003dae:	d031      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003db8:	d02c      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dc2:	d027      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003dcc:	d022      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003dd6:	d01d      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8003de0:	d018      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003dea:	d013      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003df4:	d00e      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003dfe:	d009      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8003e08:	d004      	beq.n	8003e14 <HAL_CAN_Init+0x1d4>
 8003e0a:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003e0e:	4834      	ldr	r0, [pc, #208]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003e10:	f7fe fd8d 	bl	800292e <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d027      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e24:	d022      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2e:	d01d      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e38:	d018      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e42:	d013      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003e4c:	d00e      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e56:	d009      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003e60:	d004      	beq.n	8003e6c <HAL_CAN_Init+0x22c>
 8003e62:	f240 1127 	movw	r1, #295	; 0x127
 8003e66:	481e      	ldr	r0, [pc, #120]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003e68:	f7fe fd61 	bl	800292e <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_CAN_Init+0x23e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d904      	bls.n	8003e88 <HAL_CAN_Init+0x248>
 8003e7e:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003e82:	4817      	ldr	r0, [pc, #92]	; (8003ee0 <HAL_CAN_Init+0x2a0>)
 8003e84:	f7fe fd53 	bl	800292e <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd fcff 	bl	8001898 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0202 	bic.w	r2, r2, #2
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eaa:	f7ff fe99 	bl	8003be0 <HAL_GetTick>
 8003eae:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eb0:	e018      	b.n	8003ee4 <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb2:	f7ff fe95 	bl	8003be0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b0a      	cmp	r3, #10
 8003ebe:	d911      	bls.n	8003ee4 <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2205      	movs	r2, #5
 8003ed0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cb      	b.n	8004070 <HAL_CAN_Init+0x430>
 8003ed8:	40006400 	.word	0x40006400
 8003edc:	40006800 	.word	0x40006800
 8003ee0:	0800bc98 	.word	0x0800bc98
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1df      	bne.n	8003eb2 <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f02:	f7ff fe6d 	bl	8003be0 <HAL_GetTick>
 8003f06:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f08:	e012      	b.n	8003f30 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f0a:	f7ff fe69 	bl	8003be0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b0a      	cmp	r3, #10
 8003f16:	d90b      	bls.n	8003f30 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2205      	movs	r2, #5
 8003f28:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e09f      	b.n	8004070 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0e5      	beq.n	8003f0a <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7e1b      	ldrb	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d108      	bne.n	8003f58 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e007      	b.n	8003f68 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7e5b      	ldrb	r3, [r3, #25]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d108      	bne.n	8003f82 <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e007      	b.n	8003f92 <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7e9b      	ldrb	r3, [r3, #26]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d108      	bne.n	8003fac <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0220 	orr.w	r2, r2, #32
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e007      	b.n	8003fbc <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0220 	bic.w	r2, r2, #32
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7edb      	ldrb	r3, [r3, #27]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d108      	bne.n	8003fd6 <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0210 	bic.w	r2, r2, #16
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e007      	b.n	8003fe6 <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0210 	orr.w	r2, r2, #16
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7f1b      	ldrb	r3, [r3, #28]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d108      	bne.n	8004000 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0208 	orr.w	r2, r2, #8
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e007      	b.n	8004010 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0208 	bic.w	r2, r2, #8
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7f5b      	ldrb	r3, [r3, #29]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d108      	bne.n	800402a <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0204 	orr.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e007      	b.n	800403a <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	ea42 0103 	orr.w	r1, r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800408e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d003      	beq.n	800409e <HAL_CAN_ConfigFilter+0x26>
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b02      	cmp	r3, #2
 800409a:	f040 812c 	bne.w	80042f6 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d304      	bcc.n	80040b2 <HAL_CAN_ConfigFilter+0x3a>
 80040a8:	f44f 7154 	mov.w	r1, #848	; 0x350
 80040ac:	4897      	ldr	r0, [pc, #604]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 80040ae:	f7fe fc3e 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d304      	bcc.n	80040c6 <HAL_CAN_ConfigFilter+0x4e>
 80040bc:	f240 3151 	movw	r1, #849	; 0x351
 80040c0:	4892      	ldr	r0, [pc, #584]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 80040c2:	f7fe fc34 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d304      	bcc.n	80040da <HAL_CAN_ConfigFilter+0x62>
 80040d0:	f240 3152 	movw	r1, #850	; 0x352
 80040d4:	488d      	ldr	r0, [pc, #564]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 80040d6:	f7fe fc2a 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e2:	d304      	bcc.n	80040ee <HAL_CAN_ConfigFilter+0x76>
 80040e4:	f240 3153 	movw	r1, #851	; 0x353
 80040e8:	4888      	ldr	r0, [pc, #544]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 80040ea:	f7fe fc20 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_CAN_ConfigFilter+0x90>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d004      	beq.n	8004108 <HAL_CAN_ConfigFilter+0x90>
 80040fe:	f44f 7155 	mov.w	r1, #852	; 0x354
 8004102:	4882      	ldr	r0, [pc, #520]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 8004104:	f7fe fc13 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_CAN_ConfigFilter+0xaa>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d004      	beq.n	8004122 <HAL_CAN_ConfigFilter+0xaa>
 8004118:	f240 3155 	movw	r1, #853	; 0x355
 800411c:	487b      	ldr	r0, [pc, #492]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 800411e:	f7fe fc06 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_CAN_ConfigFilter+0xc4>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d004      	beq.n	800413c <HAL_CAN_ConfigFilter+0xc4>
 8004132:	f240 3156 	movw	r1, #854	; 0x356
 8004136:	4875      	ldr	r0, [pc, #468]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 8004138:	f7fe fbf9 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_CAN_ConfigFilter+0xde>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d004      	beq.n	8004156 <HAL_CAN_ConfigFilter+0xde>
 800414c:	f240 3157 	movw	r1, #855	; 0x357
 8004150:	486e      	ldr	r0, [pc, #440]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 8004152:	f7fe fbec 	bl	800292e <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004156:	4b6e      	ldr	r3, [pc, #440]	; (8004310 <HAL_CAN_ConfigFilter+0x298>)
 8004158:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	2b1b      	cmp	r3, #27
 8004160:	d904      	bls.n	800416c <HAL_CAN_ConfigFilter+0xf4>
 8004162:	f240 3172 	movw	r1, #882	; 0x372
 8004166:	4869      	ldr	r0, [pc, #420]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 8004168:	f7fe fbe1 	bl	800292e <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b1b      	cmp	r3, #27
 8004172:	d904      	bls.n	800417e <HAL_CAN_ConfigFilter+0x106>
 8004174:	f240 3173 	movw	r1, #883	; 0x373
 8004178:	4864      	ldr	r0, [pc, #400]	; (800430c <HAL_CAN_ConfigFilter+0x294>)
 800417a:	f7fe fbd8 	bl	800292e <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004194:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	431a      	orrs	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2201      	movs	r2, #1
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	401a      	ands	r2, r3
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d123      	bne.n	8004224 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3248      	adds	r2, #72	; 0x48
 8004204:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004218:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800421a:	6979      	ldr	r1, [r7, #20]
 800421c:	3348      	adds	r3, #72	; 0x48
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d122      	bne.n	8004272 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	431a      	orrs	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800424c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	3248      	adds	r2, #72	; 0x48
 8004252:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004266:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004268:	6979      	ldr	r1, [r7, #20]
 800426a:	3348      	adds	r3, #72	; 0x48
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	43db      	mvns	r3, r3
 8004284:	401a      	ands	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800428c:	e007      	b.n	800429e <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	431a      	orrs	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	401a      	ands	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80042b8:	e007      	b.n	80042ca <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	431a      	orrs	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042e8:	f023 0201 	bic.w	r2, r3, #1
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e006      	b.n	8004304 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	0800bc98 	.word	0x0800bc98
 8004310:	40006400 	.word	0x40006400

08004314 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	d12e      	bne.n	8004386 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004340:	f7ff fc4e 	bl	8003be0 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004346:	e012      	b.n	800436e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004348:	f7ff fc4a 	bl	8003be0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b0a      	cmp	r3, #10
 8004354:	d90b      	bls.n	800436e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2205      	movs	r2, #5
 8004366:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e012      	b.n	8004394 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e006      	b.n	8004394 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_CAN_AddTxMessage+0x38>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d004      	beq.n	80043d4 <HAL_CAN_AddTxMessage+0x38>
 80043ca:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80043ce:	4884      	ldr	r0, [pc, #528]	; (80045e0 <HAL_CAN_AddTxMessage+0x244>)
 80043d0:	f7fe faad 	bl	800292e <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_CAN_AddTxMessage+0x52>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d004      	beq.n	80043ee <HAL_CAN_AddTxMessage+0x52>
 80043e4:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80043e8:	487d      	ldr	r0, [pc, #500]	; (80045e0 <HAL_CAN_AddTxMessage+0x244>)
 80043ea:	f7fe faa0 	bl	800292e <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d904      	bls.n	8004400 <HAL_CAN_AddTxMessage+0x64>
 80043f6:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80043fa:	4879      	ldr	r0, [pc, #484]	; (80045e0 <HAL_CAN_AddTxMessage+0x244>)
 80043fc:	f7fe fa97 	bl	800292e <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004410:	d30f      	bcc.n	8004432 <HAL_CAN_AddTxMessage+0x96>
 8004412:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8004416:	4872      	ldr	r0, [pc, #456]	; (80045e0 <HAL_CAN_AddTxMessage+0x244>)
 8004418:	f7fe fa89 	bl	800292e <assert_failed>
 800441c:	e009      	b.n	8004432 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d304      	bcc.n	8004432 <HAL_CAN_AddTxMessage+0x96>
 8004428:	f240 41f2 	movw	r1, #1266	; 0x4f2
 800442c:	486c      	ldr	r0, [pc, #432]	; (80045e0 <HAL_CAN_AddTxMessage+0x244>)
 800442e:	f7fe fa7e 	bl	800292e <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	7d1b      	ldrb	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_CAN_AddTxMessage+0xb0>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	7d1b      	ldrb	r3, [r3, #20]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d004      	beq.n	800444c <HAL_CAN_AddTxMessage+0xb0>
 8004442:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8004446:	4866      	ldr	r0, [pc, #408]	; (80045e0 <HAL_CAN_AddTxMessage+0x244>)
 8004448:	f7fe fa71 	bl	800292e <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800444c:	7ffb      	ldrb	r3, [r7, #31]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <HAL_CAN_AddTxMessage+0xbe>
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	2b02      	cmp	r3, #2
 8004456:	f040 80b8 	bne.w	80045ca <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80a0 	beq.w	80045ba <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d907      	bls.n	800449a <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e09e      	b.n	80045d8 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800449a:	2201      	movs	r2, #1
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	409a      	lsls	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	6809      	ldr	r1, [r1, #0]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	3318      	adds	r3, #24
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	440b      	add	r3, r1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e00f      	b.n	80044e8 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044d8:	68f9      	ldr	r1, [r7, #12]
 80044da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80044dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3318      	adds	r3, #24
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	440b      	add	r3, r1
 80044e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3318      	adds	r3, #24
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	440b      	add	r3, r1
 80044f8:	3304      	adds	r3, #4
 80044fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	7d1b      	ldrb	r3, [r3, #20]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d111      	bne.n	8004528 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3318      	adds	r3, #24
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	3318      	adds	r3, #24
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	440b      	add	r3, r1
 8004524:	3304      	adds	r3, #4
 8004526:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3307      	adds	r3, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	061a      	lsls	r2, r3, #24
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3306      	adds	r3, #6
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3305      	adds	r3, #5
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	4313      	orrs	r3, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	3204      	adds	r2, #4
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	4610      	mov	r0, r2
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6811      	ldr	r1, [r2, #0]
 8004550:	ea43 0200 	orr.w	r2, r3, r0
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	440b      	add	r3, r1
 800455a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800455e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3303      	adds	r3, #3
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	061a      	lsls	r2, r3, #24
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3302      	adds	r3, #2
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3301      	adds	r3, #1
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	4313      	orrs	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	7812      	ldrb	r2, [r2, #0]
 8004580:	4610      	mov	r0, r2
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	ea43 0200 	orr.w	r2, r3, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	440b      	add	r3, r1
 8004590:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004594:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	3318      	adds	r3, #24
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	4413      	add	r3, r2
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	6811      	ldr	r1, [r2, #0]
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	3318      	adds	r3, #24
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	440b      	add	r3, r1
 80045b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e00e      	b.n	80045d8 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e006      	b.n	80045d8 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	0800bc98 	.word	0x0800bc98

080045e4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_CAN_GetRxMessage+0x2c>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d004      	beq.n	8004610 <HAL_CAN_GetRxMessage+0x2c>
 8004606:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 800460a:	4884      	ldr	r0, [pc, #528]	; (800481c <HAL_CAN_GetRxMessage+0x238>)
 800460c:	f7fe f98f 	bl	800292e <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d003      	beq.n	800461e <HAL_CAN_GetRxMessage+0x3a>
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b02      	cmp	r3, #2
 800461a:	f040 80f3 	bne.w	8004804 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10e      	bne.n	8004642 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e0e7      	b.n	8004812 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0d8      	b.n	8004812 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	331b      	adds	r3, #27
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	4413      	add	r3, r2
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0204 	and.w	r2, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	331b      	adds	r3, #27
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	4413      	add	r3, r2
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0d5b      	lsrs	r3, r3, #21
 800468e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e00b      	b.n	80046b0 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	331b      	adds	r3, #27
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4413      	add	r3, r2
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	331b      	adds	r3, #27
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	4413      	add	r3, r2
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0202 	and.w	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	331b      	adds	r3, #27
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	331b      	adds	r3, #27
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	4413      	add	r3, r2
 80046ea:	3304      	adds	r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	331b      	adds	r3, #27
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	4413      	add	r3, r2
 8004702:	3304      	adds	r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	4413      	add	r3, r2
 8004718:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4413      	add	r3, r2
 800472e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0a1a      	lsrs	r2, r3, #8
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	4413      	add	r3, r2
 8004748:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	0c1a      	lsrs	r2, r3, #16
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	3302      	adds	r3, #2
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4413      	add	r3, r2
 8004762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	0e1a      	lsrs	r2, r3, #24
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	3303      	adds	r3, #3
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	3304      	adds	r3, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0a1a      	lsrs	r2, r3, #8
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	3305      	adds	r3, #5
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0c1a      	lsrs	r2, r3, #16
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	3306      	adds	r3, #6
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0e1a      	lsrs	r2, r3, #24
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3307      	adds	r3, #7
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0220 	orr.w	r2, r2, #32
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	e007      	b.n	8004800 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0220 	orr.w	r2, r2, #32
 80047fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e006      	b.n	8004812 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	0800bc98 	.word	0x0800bc98

08004820 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004830:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_CAN_ActivateNotification+0x5c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d904      	bls.n	8004844 <HAL_CAN_ActivateNotification+0x24>
 800483a:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 800483e:	4810      	ldr	r0, [pc, #64]	; (8004880 <HAL_CAN_ActivateNotification+0x60>)
 8004840:	f7fe f875 	bl	800292e <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <HAL_CAN_ActivateNotification+0x30>
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d109      	bne.n	8004864 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6959      	ldr	r1, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e006      	b.n	8004872 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	00038f7f 	.word	0x00038f7f
 8004880:	0800bc98 	.word	0x0800bc98

08004884 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d07c      	beq.n	80049c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2201      	movs	r2, #1
 80048da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f983 	bl	8004bf2 <HAL_CAN_TxMailbox0CompleteCallback>
 80048ec:	e016      	b.n	800491c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	e00c      	b.n	800491c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
 8004914:	e002      	b.n	800491c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f989 	bl	8004c2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d024      	beq.n	8004970 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800492e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f963 	bl	8004c06 <HAL_CAN_TxMailbox1CompleteCallback>
 8004940:	e016      	b.n	8004970 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	e00c      	b.n	8004970 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
 8004968:	e002      	b.n	8004970 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f969 	bl	8004c42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d024      	beq.n	80049c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004982:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f943 	bl	8004c1a <HAL_CAN_TxMailbox2CompleteCallback>
 8004994:	e016      	b.n	80049c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
 80049a8:	e00c      	b.n	80049c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	e002      	b.n	80049c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f949 	bl	8004c56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2210      	movs	r2, #16
 80049e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2208      	movs	r2, #8
 8004a02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f930 	bl	8004c6a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fda0 	bl	8002568 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2210      	movs	r2, #16
 8004a4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f912 	bl	8004c92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8f9 	bl	8004c7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8fc 	bl	8004ca6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8f5 	bl	8004cba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d07b      	beq.n	8004bd2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d072      	beq.n	8004bca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f043 0302 	orr.w	r3, r3, #2
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	f043 0304 	orr.w	r3, r3, #4
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d043      	beq.n	8004bca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d03e      	beq.n	8004bca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b52:	2b60      	cmp	r3, #96	; 0x60
 8004b54:	d02b      	beq.n	8004bae <HAL_CAN_IRQHandler+0x32a>
 8004b56:	2b60      	cmp	r3, #96	; 0x60
 8004b58:	d82e      	bhi.n	8004bb8 <HAL_CAN_IRQHandler+0x334>
 8004b5a:	2b50      	cmp	r3, #80	; 0x50
 8004b5c:	d022      	beq.n	8004ba4 <HAL_CAN_IRQHandler+0x320>
 8004b5e:	2b50      	cmp	r3, #80	; 0x50
 8004b60:	d82a      	bhi.n	8004bb8 <HAL_CAN_IRQHandler+0x334>
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d019      	beq.n	8004b9a <HAL_CAN_IRQHandler+0x316>
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d826      	bhi.n	8004bb8 <HAL_CAN_IRQHandler+0x334>
 8004b6a:	2b30      	cmp	r3, #48	; 0x30
 8004b6c:	d010      	beq.n	8004b90 <HAL_CAN_IRQHandler+0x30c>
 8004b6e:	2b30      	cmp	r3, #48	; 0x30
 8004b70:	d822      	bhi.n	8004bb8 <HAL_CAN_IRQHandler+0x334>
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d002      	beq.n	8004b7c <HAL_CAN_IRQHandler+0x2f8>
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d005      	beq.n	8004b86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004b7a:	e01d      	b.n	8004bb8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	f043 0308 	orr.w	r3, r3, #8
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b84:	e019      	b.n	8004bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	f043 0310 	orr.w	r3, r3, #16
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b8e:	e014      	b.n	8004bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	f043 0320 	orr.w	r3, r3, #32
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b98:	e00f      	b.n	8004bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ba2:	e00a      	b.n	8004bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bac:	e005      	b.n	8004bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bb6:	e000      	b.n	8004bba <HAL_CAN_IRQHandler+0x336>
            break;
 8004bb8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699a      	ldr	r2, [r3, #24]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bc8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f872 	bl	8004cce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004bea:	bf00      	nop
 8004bec:	3728      	adds	r7, #40	; 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d00:	4013      	ands	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d16:	4a04      	ldr	r2, [pc, #16]	; (8004d28 <__NVIC_SetPriorityGrouping+0x44>)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	60d3      	str	r3, [r2, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <__NVIC_GetPriorityGrouping+0x18>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	f003 0307 	and.w	r3, r3, #7
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db0b      	blt.n	8004d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4907      	ldr	r1, [pc, #28]	; (8004d80 <__NVIC_EnableIRQ+0x38>)
 8004d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	2001      	movs	r0, #1
 8004d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e100 	.word	0xe000e100

08004d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db0a      	blt.n	8004dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	490c      	ldr	r1, [pc, #48]	; (8004dd0 <__NVIC_SetPriority+0x4c>)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	440b      	add	r3, r1
 8004da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dac:	e00a      	b.n	8004dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	4908      	ldr	r1, [pc, #32]	; (8004dd4 <__NVIC_SetPriority+0x50>)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	0112      	lsls	r2, r2, #4
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	761a      	strb	r2, [r3, #24]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000e100 	.word	0xe000e100
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f1c3 0307 	rsb	r3, r3, #7
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf28      	it	cs
 8004df6:	2304      	movcs	r3, #4
 8004df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d902      	bls.n	8004e08 <NVIC_EncodePriority+0x30>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3b03      	subs	r3, #3
 8004e06:	e000      	b.n	8004e0a <NVIC_EncodePriority+0x32>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	43d9      	mvns	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e30:	4313      	orrs	r3, r2
         );
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3724      	adds	r7, #36	; 0x24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e50:	d301      	bcc.n	8004e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e52:	2301      	movs	r3, #1
 8004e54:	e00f      	b.n	8004e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <SysTick_Config+0x40>)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e5e:	210f      	movs	r1, #15
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e64:	f7ff ff8e 	bl	8004d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <SysTick_Config+0x40>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <SysTick_Config+0x40>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	e000e010 	.word	0xe000e010

08004e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b07      	cmp	r3, #7
 8004e90:	d00f      	beq.n	8004eb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d00c      	beq.n	8004eb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d009      	beq.n	8004eb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d006      	beq.n	8004eb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d003      	beq.n	8004eb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004eaa:	2192      	movs	r1, #146	; 0x92
 8004eac:	4804      	ldr	r0, [pc, #16]	; (8004ec0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004eae:	f7fd fd3e 	bl	800292e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff16 	bl	8004ce4 <__NVIC_SetPriorityGrouping>
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	0800bcd0 	.word	0x0800bcd0

08004ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b0f      	cmp	r3, #15
 8004eda:	d903      	bls.n	8004ee4 <HAL_NVIC_SetPriority+0x20>
 8004edc:	21aa      	movs	r1, #170	; 0xaa
 8004ede:	480e      	ldr	r0, [pc, #56]	; (8004f18 <HAL_NVIC_SetPriority+0x54>)
 8004ee0:	f7fd fd25 	bl	800292e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d903      	bls.n	8004ef2 <HAL_NVIC_SetPriority+0x2e>
 8004eea:	21ab      	movs	r1, #171	; 0xab
 8004eec:	480a      	ldr	r0, [pc, #40]	; (8004f18 <HAL_NVIC_SetPriority+0x54>)
 8004eee:	f7fd fd1e 	bl	800292e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ef2:	f7ff ff1b 	bl	8004d2c <__NVIC_GetPriorityGrouping>
 8004ef6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	6978      	ldr	r0, [r7, #20]
 8004efe:	f7ff ff6b 	bl	8004dd8 <NVIC_EncodePriority>
 8004f02:	4602      	mov	r2, r0
 8004f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff ff3a 	bl	8004d84 <__NVIC_SetPriority>
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	0800bcd0 	.word	0x0800bcd0

08004f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da03      	bge.n	8004f36 <HAL_NVIC_EnableIRQ+0x1a>
 8004f2e:	21be      	movs	r1, #190	; 0xbe
 8004f30:	4805      	ldr	r0, [pc, #20]	; (8004f48 <HAL_NVIC_EnableIRQ+0x2c>)
 8004f32:	f7fd fcfc 	bl	800292e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff ff04 	bl	8004d48 <__NVIC_EnableIRQ>
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0800bcd0 	.word	0x0800bcd0

08004f4c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff ff73 	bl	8004e40 <SysTick_Config>
 8004f5a:	4603      	mov	r3, r0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d007      	beq.n	8004f82 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8004f78:	f240 11c9 	movw	r1, #457	; 0x1c9
 8004f7c:	480b      	ldr	r0, [pc, #44]	; (8004fac <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8004f7e:	f7fd fcd6 	bl	800292e <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d106      	bne.n	8004f96 <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004f8e:	f043 0304 	orr.w	r3, r3, #4
 8004f92:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004f94:	e005      	b.n	8004fa2 <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	6013      	str	r3, [r2, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	0800bcd0 	.word	0x0800bcd0
 8004fb0:	e000e010 	.word	0xe000e010

08004fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fc0:	f7fe fe0e 	bl	8003be0 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e204      	b.n	80053da <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a97      	ldr	r2, [pc, #604]	; (8005234 <HAL_DMA_Init+0x280>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d04e      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a96      	ldr	r2, [pc, #600]	; (8005238 <HAL_DMA_Init+0x284>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d049      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a94      	ldr	r2, [pc, #592]	; (800523c <HAL_DMA_Init+0x288>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d044      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a93      	ldr	r2, [pc, #588]	; (8005240 <HAL_DMA_Init+0x28c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d03f      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a91      	ldr	r2, [pc, #580]	; (8005244 <HAL_DMA_Init+0x290>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d03a      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a90      	ldr	r2, [pc, #576]	; (8005248 <HAL_DMA_Init+0x294>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d035      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a8e      	ldr	r2, [pc, #568]	; (800524c <HAL_DMA_Init+0x298>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d030      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a8d      	ldr	r2, [pc, #564]	; (8005250 <HAL_DMA_Init+0x29c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d02b      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a8b      	ldr	r2, [pc, #556]	; (8005254 <HAL_DMA_Init+0x2a0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d026      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a8a      	ldr	r2, [pc, #552]	; (8005258 <HAL_DMA_Init+0x2a4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d021      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a88      	ldr	r2, [pc, #544]	; (800525c <HAL_DMA_Init+0x2a8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01c      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a87      	ldr	r2, [pc, #540]	; (8005260 <HAL_DMA_Init+0x2ac>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d017      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a85      	ldr	r2, [pc, #532]	; (8005264 <HAL_DMA_Init+0x2b0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d012      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a84      	ldr	r2, [pc, #528]	; (8005268 <HAL_DMA_Init+0x2b4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00d      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a82      	ldr	r2, [pc, #520]	; (800526c <HAL_DMA_Init+0x2b8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d008      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a81      	ldr	r2, [pc, #516]	; (8005270 <HAL_DMA_Init+0x2bc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <HAL_DMA_Init+0xc4>
 8005070:	21b8      	movs	r1, #184	; 0xb8
 8005072:	4880      	ldr	r0, [pc, #512]	; (8005274 <HAL_DMA_Init+0x2c0>)
 8005074:	f7fd fc5b 	bl	800292e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d026      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005088:	d021      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005092:	d01c      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800509c:	d017      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a6:	d012      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80050b0:	d00d      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050ba:	d008      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80050c4:	d003      	beq.n	80050ce <HAL_DMA_Init+0x11a>
 80050c6:	21b9      	movs	r1, #185	; 0xb9
 80050c8:	486a      	ldr	r0, [pc, #424]	; (8005274 <HAL_DMA_Init+0x2c0>)
 80050ca:	f7fd fc30 	bl	800292e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <HAL_DMA_Init+0x13a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d007      	beq.n	80050ee <HAL_DMA_Init+0x13a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d003      	beq.n	80050ee <HAL_DMA_Init+0x13a>
 80050e6:	21ba      	movs	r1, #186	; 0xba
 80050e8:	4862      	ldr	r0, [pc, #392]	; (8005274 <HAL_DMA_Init+0x2c0>)
 80050ea:	f7fd fc20 	bl	800292e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f6:	d007      	beq.n	8005108 <HAL_DMA_Init+0x154>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_DMA_Init+0x154>
 8005100:	21bb      	movs	r1, #187	; 0xbb
 8005102:	485c      	ldr	r0, [pc, #368]	; (8005274 <HAL_DMA_Init+0x2c0>)
 8005104:	f7fd fc13 	bl	800292e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005110:	d007      	beq.n	8005122 <HAL_DMA_Init+0x16e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_DMA_Init+0x16e>
 800511a:	21bc      	movs	r1, #188	; 0xbc
 800511c:	4855      	ldr	r0, [pc, #340]	; (8005274 <HAL_DMA_Init+0x2c0>)
 800511e:	f7fd fc06 	bl	800292e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <HAL_DMA_Init+0x192>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005132:	d008      	beq.n	8005146 <HAL_DMA_Init+0x192>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d003      	beq.n	8005146 <HAL_DMA_Init+0x192>
 800513e:	21bd      	movs	r1, #189	; 0xbd
 8005140:	484c      	ldr	r0, [pc, #304]	; (8005274 <HAL_DMA_Init+0x2c0>)
 8005142:	f7fd fbf4 	bl	800292e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <HAL_DMA_Init+0x1b6>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005156:	d008      	beq.n	800516a <HAL_DMA_Init+0x1b6>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005160:	d003      	beq.n	800516a <HAL_DMA_Init+0x1b6>
 8005162:	21be      	movs	r1, #190	; 0xbe
 8005164:	4843      	ldr	r0, [pc, #268]	; (8005274 <HAL_DMA_Init+0x2c0>)
 8005166:	f7fd fbe2 	bl	800292e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_DMA_Init+0x1d8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517a:	d007      	beq.n	800518c <HAL_DMA_Init+0x1d8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b20      	cmp	r3, #32
 8005182:	d003      	beq.n	800518c <HAL_DMA_Init+0x1d8>
 8005184:	21bf      	movs	r1, #191	; 0xbf
 8005186:	483b      	ldr	r0, [pc, #236]	; (8005274 <HAL_DMA_Init+0x2c0>)
 8005188:	f7fd fbd1 	bl	800292e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d012      	beq.n	80051ba <HAL_DMA_Init+0x206>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800519c:	d00d      	beq.n	80051ba <HAL_DMA_Init+0x206>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051a6:	d008      	beq.n	80051ba <HAL_DMA_Init+0x206>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051b0:	d003      	beq.n	80051ba <HAL_DMA_Init+0x206>
 80051b2:	21c0      	movs	r1, #192	; 0xc0
 80051b4:	482f      	ldr	r0, [pc, #188]	; (8005274 <HAL_DMA_Init+0x2c0>)
 80051b6:	f7fd fbba 	bl	800292e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <HAL_DMA_Init+0x21e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d003      	beq.n	80051d2 <HAL_DMA_Init+0x21e>
 80051ca:	21c1      	movs	r1, #193	; 0xc1
 80051cc:	4829      	ldr	r0, [pc, #164]	; (8005274 <HAL_DMA_Init+0x2c0>)
 80051ce:	f7fd fbae 	bl	800292e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d065      	beq.n	80052a6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00f      	beq.n	8005202 <HAL_DMA_Init+0x24e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d00b      	beq.n	8005202 <HAL_DMA_Init+0x24e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d007      	beq.n	8005202 <HAL_DMA_Init+0x24e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d003      	beq.n	8005202 <HAL_DMA_Init+0x24e>
 80051fa:	21c6      	movs	r1, #198	; 0xc6
 80051fc:	481d      	ldr	r0, [pc, #116]	; (8005274 <HAL_DMA_Init+0x2c0>)
 80051fe:	f7fd fb96 	bl	800292e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d036      	beq.n	8005278 <HAL_DMA_Init+0x2c4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005212:	d031      	beq.n	8005278 <HAL_DMA_Init+0x2c4>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800521c:	d02c      	beq.n	8005278 <HAL_DMA_Init+0x2c4>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005226:	d027      	beq.n	8005278 <HAL_DMA_Init+0x2c4>
 8005228:	21c7      	movs	r1, #199	; 0xc7
 800522a:	4812      	ldr	r0, [pc, #72]	; (8005274 <HAL_DMA_Init+0x2c0>)
 800522c:	f7fd fb7f 	bl	800292e <assert_failed>
 8005230:	e022      	b.n	8005278 <HAL_DMA_Init+0x2c4>
 8005232:	bf00      	nop
 8005234:	40026010 	.word	0x40026010
 8005238:	40026028 	.word	0x40026028
 800523c:	40026040 	.word	0x40026040
 8005240:	40026058 	.word	0x40026058
 8005244:	40026070 	.word	0x40026070
 8005248:	40026088 	.word	0x40026088
 800524c:	400260a0 	.word	0x400260a0
 8005250:	400260b8 	.word	0x400260b8
 8005254:	40026410 	.word	0x40026410
 8005258:	40026428 	.word	0x40026428
 800525c:	40026440 	.word	0x40026440
 8005260:	40026458 	.word	0x40026458
 8005264:	40026470 	.word	0x40026470
 8005268:	40026488 	.word	0x40026488
 800526c:	400264a0 	.word	0x400264a0
 8005270:	400264b8 	.word	0x400264b8
 8005274:	0800bd0c 	.word	0x0800bd0c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d012      	beq.n	80052a6 <HAL_DMA_Init+0x2f2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005288:	d00d      	beq.n	80052a6 <HAL_DMA_Init+0x2f2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005292:	d008      	beq.n	80052a6 <HAL_DMA_Init+0x2f2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800529c:	d003      	beq.n	80052a6 <HAL_DMA_Init+0x2f2>
 800529e:	21c8      	movs	r1, #200	; 0xc8
 80052a0:	4850      	ldr	r0, [pc, #320]	; (80053e4 <HAL_DMA_Init+0x430>)
 80052a2:	f7fd fb44 	bl	800292e <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052c6:	e00f      	b.n	80052e8 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052c8:	f7fe fc8a 	bl	8003be0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d908      	bls.n	80052e8 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2203      	movs	r2, #3
 80052e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e078      	b.n	80053da <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e8      	bne.n	80052c8 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <HAL_DMA_Init+0x434>)
 8005302:	4013      	ands	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800532c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b04      	cmp	r3, #4
 8005340:	d107      	bne.n	8005352 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	4313      	orrs	r3, r2
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 0307 	bic.w	r3, r3, #7
 8005368:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b04      	cmp	r3, #4
 800537a:	d117      	bne.n	80053ac <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00e      	beq.n	80053ac <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f9ec 	bl	800576c <DMA_CheckFifoParam>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2240      	movs	r2, #64	; 0x40
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053a8:	2301      	movs	r3, #1
 80053aa:	e016      	b.n	80053da <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9a3 	bl	8005700 <DMA_CalcBaseAndBitshift>
 80053ba:	4603      	mov	r3, r0
 80053bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	223f      	movs	r2, #63	; 0x3f
 80053c4:	409a      	lsls	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	0800bd0c 	.word	0x0800bd0c
 80053e8:	f010803f 	.word	0xf010803f

080053ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053f8:	4b92      	ldr	r3, [pc, #584]	; (8005644 <HAL_DMA_IRQHandler+0x258>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a92      	ldr	r2, [pc, #584]	; (8005648 <HAL_DMA_IRQHandler+0x25c>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0a9b      	lsrs	r3, r3, #10
 8005404:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	2208      	movs	r2, #8
 8005418:	409a      	lsls	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01a      	beq.n	8005458 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0204 	bic.w	r2, r2, #4
 800543e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005444:	2208      	movs	r2, #8
 8005446:	409a      	lsls	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005450:	f043 0201 	orr.w	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545c:	2201      	movs	r2, #1
 800545e:	409a      	lsls	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	2201      	movs	r2, #1
 800547c:	409a      	lsls	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005492:	2204      	movs	r2, #4
 8005494:	409a      	lsls	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4013      	ands	r3, r2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d012      	beq.n	80054c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b0:	2204      	movs	r2, #4
 80054b2:	409a      	lsls	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	f043 0204 	orr.w	r2, r3, #4
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	2210      	movs	r2, #16
 80054ca:	409a      	lsls	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d043      	beq.n	800555c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d03c      	beq.n	800555c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	2210      	movs	r2, #16
 80054e8:	409a      	lsls	r2, r3
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d018      	beq.n	800552e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d024      	beq.n	800555c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
 800551a:	e01f      	b.n	800555c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
 800552c:	e016      	b.n	800555c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0208 	bic.w	r2, r2, #8
 800554a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	2220      	movs	r2, #32
 8005562:	409a      	lsls	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 808e 	beq.w	800568a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8086 	beq.w	800568a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005582:	2220      	movs	r2, #32
 8005584:	409a      	lsls	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b05      	cmp	r3, #5
 8005594:	d136      	bne.n	8005604 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0216 	bic.w	r2, r2, #22
 80055a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_DMA_IRQHandler+0x1da>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0208 	bic.w	r2, r2, #8
 80055d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	223f      	movs	r2, #63	; 0x3f
 80055dc:	409a      	lsls	r2, r3
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d07d      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
        }
        return;
 8005602:	e078      	b.n	80056f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01c      	beq.n	800564c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d108      	bne.n	8005632 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	2b00      	cmp	r3, #0
 8005626:	d030      	beq.n	800568a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
 8005630:	e02b      	b.n	800568a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d027      	beq.n	800568a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
 8005642:	e022      	b.n	800568a <HAL_DMA_IRQHandler+0x29e>
 8005644:	20000200 	.word	0x20000200
 8005648:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10f      	bne.n	800567a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0210 	bic.w	r2, r2, #16
 8005668:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	2b00      	cmp	r3, #0
 8005690:	d032      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d022      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2205      	movs	r2, #5
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d307      	bcc.n	80056d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f2      	bne.n	80056b6 <HAL_DMA_IRQHandler+0x2ca>
 80056d0:	e000      	b.n	80056d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80056d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
 80056f4:	e000      	b.n	80056f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80056f6:	bf00      	nop
    }
  }
}
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop

08005700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	3b10      	subs	r3, #16
 8005710:	4a14      	ldr	r2, [pc, #80]	; (8005764 <DMA_CalcBaseAndBitshift+0x64>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800571a:	4a13      	ldr	r2, [pc, #76]	; (8005768 <DMA_CalcBaseAndBitshift+0x68>)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d909      	bls.n	8005742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	659a      	str	r2, [r3, #88]	; 0x58
 8005740:	e007      	b.n	8005752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	aaaaaaab 	.word	0xaaaaaaab
 8005768:	0800bf5c 	.word	0x0800bf5c

0800576c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11f      	bne.n	80057c6 <DMA_CheckFifoParam+0x5a>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b03      	cmp	r3, #3
 800578a:	d856      	bhi.n	800583a <DMA_CheckFifoParam+0xce>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <DMA_CheckFifoParam+0x28>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b7 	.word	0x080057b7
 800579c:	080057a5 	.word	0x080057a5
 80057a0:	0800583b 	.word	0x0800583b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d046      	beq.n	800583e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b4:	e043      	b.n	800583e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057be:	d140      	bne.n	8005842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c4:	e03d      	b.n	8005842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ce:	d121      	bne.n	8005814 <DMA_CheckFifoParam+0xa8>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d837      	bhi.n	8005846 <DMA_CheckFifoParam+0xda>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <DMA_CheckFifoParam+0x70>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057f3 	.word	0x080057f3
 80057e4:	080057ed 	.word	0x080057ed
 80057e8:	08005805 	.word	0x08005805
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e030      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d025      	beq.n	800584a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005802:	e022      	b.n	800584a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800580c:	d11f      	bne.n	800584e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005812:	e01c      	b.n	800584e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d903      	bls.n	8005822 <DMA_CheckFifoParam+0xb6>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d003      	beq.n	8005828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005820:	e018      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
      break;
 8005826:	e015      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      break;
 8005838:	e00b      	b.n	8005852 <DMA_CheckFifoParam+0xe6>
      break;
 800583a:	bf00      	nop
 800583c:	e00a      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 800583e:	bf00      	nop
 8005840:	e008      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 8005842:	bf00      	nop
 8005844:	e006      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 8005846:	bf00      	nop
 8005848:	e004      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 800584a:	bf00      	nop
 800584c:	e002      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;   
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <DMA_CheckFifoParam+0xe8>
      break;
 8005852:	bf00      	nop
    }
  } 
  
  return status; 
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop

08005864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a45      	ldr	r2, [pc, #276]	; (8005994 <HAL_GPIO_Init+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <HAL_GPIO_Init+0x76>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a44      	ldr	r2, [pc, #272]	; (8005998 <HAL_GPIO_Init+0x134>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_GPIO_Init+0x76>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a43      	ldr	r2, [pc, #268]	; (800599c <HAL_GPIO_Init+0x138>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <HAL_GPIO_Init+0x76>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a42      	ldr	r2, [pc, #264]	; (80059a0 <HAL_GPIO_Init+0x13c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <HAL_GPIO_Init+0x76>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a41      	ldr	r2, [pc, #260]	; (80059a4 <HAL_GPIO_Init+0x140>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <HAL_GPIO_Init+0x144>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a3f      	ldr	r2, [pc, #252]	; (80059ac <HAL_GPIO_Init+0x148>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a3e      	ldr	r2, [pc, #248]	; (80059b0 <HAL_GPIO_Init+0x14c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a3d      	ldr	r2, [pc, #244]	; (80059b4 <HAL_GPIO_Init+0x150>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a3c      	ldr	r2, [pc, #240]	; (80059b8 <HAL_GPIO_Init+0x154>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <HAL_GPIO_Init+0x158>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <HAL_GPIO_Init+0x76>
 80058d2:	21b3      	movs	r1, #179	; 0xb3
 80058d4:	483a      	ldr	r0, [pc, #232]	; (80059c0 <HAL_GPIO_Init+0x15c>)
 80058d6:	f7fd f82a 	bl	800292e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_GPIO_Init+0x8c>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	0c1b      	lsrs	r3, r3, #16
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_GPIO_Init+0x94>
 80058f0:	21b4      	movs	r1, #180	; 0xb4
 80058f2:	4833      	ldr	r0, [pc, #204]	; (80059c0 <HAL_GPIO_Init+0x15c>)
 80058f4:	f7fd f81b 	bl	800292e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d035      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d031      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b11      	cmp	r3, #17
 800590e:	d02d      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d029      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b12      	cmp	r3, #18
 800591e:	d025      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <HAL_GPIO_Init+0x160>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d020      	beq.n	800596c <HAL_GPIO_Init+0x108>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <HAL_GPIO_Init+0x164>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01b      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4a24      	ldr	r2, [pc, #144]	; (80059cc <HAL_GPIO_Init+0x168>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d016      	beq.n	800596c <HAL_GPIO_Init+0x108>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <HAL_GPIO_Init+0x16c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d011      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_GPIO_Init+0x170>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00c      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <HAL_GPIO_Init+0x174>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <HAL_GPIO_Init+0x108>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x108>
 8005964:	21b5      	movs	r1, #181	; 0xb5
 8005966:	4816      	ldr	r0, [pc, #88]	; (80059c0 <HAL_GPIO_Init+0x15c>)
 8005968:	f7fc ffe1 	bl	800292e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_GPIO_Init+0x128>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d007      	beq.n	800598c <HAL_GPIO_Init+0x128>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x128>
 8005984:	21b6      	movs	r1, #182	; 0xb6
 8005986:	480e      	ldr	r0, [pc, #56]	; (80059c0 <HAL_GPIO_Init+0x15c>)
 8005988:	f7fc ffd1 	bl	800292e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e270      	b.n	8005e74 <HAL_GPIO_Init+0x610>
 8005992:	bf00      	nop
 8005994:	40020000 	.word	0x40020000
 8005998:	40020400 	.word	0x40020400
 800599c:	40020800 	.word	0x40020800
 80059a0:	40020c00 	.word	0x40020c00
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40021400 	.word	0x40021400
 80059ac:	40021800 	.word	0x40021800
 80059b0:	40021c00 	.word	0x40021c00
 80059b4:	40022000 	.word	0x40022000
 80059b8:	40022400 	.word	0x40022400
 80059bc:	40022800 	.word	0x40022800
 80059c0:	0800bd44 	.word	0x0800bd44
 80059c4:	10110000 	.word	0x10110000
 80059c8:	10210000 	.word	0x10210000
 80059cc:	10310000 	.word	0x10310000
 80059d0:	10120000 	.word	0x10120000
 80059d4:	10220000 	.word	0x10220000
 80059d8:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059dc:	2201      	movs	r2, #1
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	f040 823a 	bne.w	8005e6e <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d00b      	beq.n	8005a1a <HAL_GPIO_Init+0x1b6>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d007      	beq.n	8005a1a <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a0e:	2b11      	cmp	r3, #17
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b12      	cmp	r3, #18
 8005a18:	d144      	bne.n	8005aa4 <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00f      	beq.n	8005a42 <HAL_GPIO_Init+0x1de>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d00b      	beq.n	8005a42 <HAL_GPIO_Init+0x1de>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d007      	beq.n	8005a42 <HAL_GPIO_Init+0x1de>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x1de>
 8005a3a:	21c8      	movs	r1, #200	; 0xc8
 8005a3c:	489a      	ldr	r0, [pc, #616]	; (8005ca8 <HAL_GPIO_Init+0x444>)
 8005a3e:	f7fc ff76 	bl	800292e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a78:	2201      	movs	r2, #1
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 0201 	and.w	r2, r3, #1
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d004      	beq.n	8005ae6 <HAL_GPIO_Init+0x282>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b12      	cmp	r3, #18
 8005ae2:	f040 80e3 	bne.w	8005cac <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80b6 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	f000 80b1 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80ac 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80a7 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80a2 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 809d 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f000 8098 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	f000 8093 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	f000 808e 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	f000 8089 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	f000 8084 	beq.w	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d07f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d07b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d077      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d073      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b05      	cmp	r3, #5
 8005b7a:	d06f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b05      	cmp	r3, #5
 8005b82:	d06b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b09      	cmp	r3, #9
 8005b8a:	d067      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b06      	cmp	r3, #6
 8005b92:	d063      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d05f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b07      	cmp	r3, #7
 8005ba2:	d05b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b07      	cmp	r3, #7
 8005baa:	d057      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b07      	cmp	r3, #7
 8005bb2:	d053      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d04f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d04b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d047      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b09      	cmp	r3, #9
 8005bd2:	d043      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b09      	cmp	r3, #9
 8005bda:	d03f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b0a      	cmp	r3, #10
 8005be2:	d03b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b0a      	cmp	r3, #10
 8005bea:	d037      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b0b      	cmp	r3, #11
 8005bf2:	d033      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	d02f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d02b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b0d      	cmp	r3, #13
 8005c0a:	d027      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d023      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d01f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d01b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	d017      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d013      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d00f      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	d00b      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d007      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	2b0e      	cmp	r3, #14
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x3f8>
 8005c54:	21e0      	movs	r1, #224	; 0xe0
 8005c56:	4814      	ldr	r0, [pc, #80]	; (8005ca8 <HAL_GPIO_Init+0x444>)
 8005c58:	f7fc fe69 	bl	800292e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	08da      	lsrs	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3208      	adds	r2, #8
 8005c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	220f      	movs	r2, #15
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	08da      	lsrs	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3208      	adds	r2, #8
 8005c9e:	69b9      	ldr	r1, [r7, #24]
 8005ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005ca4:	e002      	b.n	8005cac <HAL_GPIO_Init+0x448>
 8005ca6:	bf00      	nop
 8005ca8:	0800bd44 	.word	0x0800bd44
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0203 	and.w	r2, r3, #3
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80c0 	beq.w	8005e6e <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_GPIO_Init+0x624>)
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	4a64      	ldr	r2, [pc, #400]	; (8005e88 <HAL_GPIO_Init+0x624>)
 8005cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8005cfe:	4b62      	ldr	r3, [pc, #392]	; (8005e88 <HAL_GPIO_Init+0x624>)
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d0a:	4a60      	ldr	r2, [pc, #384]	; (8005e8c <HAL_GPIO_Init+0x628>)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	089b      	lsrs	r3, r3, #2
 8005d10:	3302      	adds	r3, #2
 8005d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	220f      	movs	r2, #15
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a57      	ldr	r2, [pc, #348]	; (8005e90 <HAL_GPIO_Init+0x62c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d037      	beq.n	8005da6 <HAL_GPIO_Init+0x542>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a56      	ldr	r2, [pc, #344]	; (8005e94 <HAL_GPIO_Init+0x630>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_GPIO_Init+0x53e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a55      	ldr	r2, [pc, #340]	; (8005e98 <HAL_GPIO_Init+0x634>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d02b      	beq.n	8005d9e <HAL_GPIO_Init+0x53a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a54      	ldr	r2, [pc, #336]	; (8005e9c <HAL_GPIO_Init+0x638>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d025      	beq.n	8005d9a <HAL_GPIO_Init+0x536>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a53      	ldr	r2, [pc, #332]	; (8005ea0 <HAL_GPIO_Init+0x63c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01f      	beq.n	8005d96 <HAL_GPIO_Init+0x532>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a52      	ldr	r2, [pc, #328]	; (8005ea4 <HAL_GPIO_Init+0x640>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d019      	beq.n	8005d92 <HAL_GPIO_Init+0x52e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a51      	ldr	r2, [pc, #324]	; (8005ea8 <HAL_GPIO_Init+0x644>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_GPIO_Init+0x52a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a50      	ldr	r2, [pc, #320]	; (8005eac <HAL_GPIO_Init+0x648>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00d      	beq.n	8005d8a <HAL_GPIO_Init+0x526>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a4f      	ldr	r2, [pc, #316]	; (8005eb0 <HAL_GPIO_Init+0x64c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <HAL_GPIO_Init+0x522>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a4e      	ldr	r2, [pc, #312]	; (8005eb4 <HAL_GPIO_Init+0x650>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_GPIO_Init+0x51e>
 8005d7e:	2309      	movs	r3, #9
 8005d80:	e012      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d82:	230a      	movs	r3, #10
 8005d84:	e010      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d86:	2308      	movs	r3, #8
 8005d88:	e00e      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d8a:	2307      	movs	r3, #7
 8005d8c:	e00c      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d8e:	2306      	movs	r3, #6
 8005d90:	e00a      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d92:	2305      	movs	r3, #5
 8005d94:	e008      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d96:	2304      	movs	r3, #4
 8005d98:	e006      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e004      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e002      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <HAL_GPIO_Init+0x544>
 8005da6:	2300      	movs	r3, #0
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	f002 0203 	and.w	r2, r2, #3
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	4093      	lsls	r3, r2
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005db8:	4934      	ldr	r1, [pc, #208]	; (8005e8c <HAL_GPIO_Init+0x628>)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005dc6:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dea:	4a33      	ldr	r2, [pc, #204]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005df0:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e14:	4a28      	ldr	r2, [pc, #160]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e1a:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e44:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_GPIO_Init+0x654>)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	f67f adb0 	bls.w	80059dc <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	40013800 	.word	0x40013800
 8005e90:	40020000 	.word	0x40020000
 8005e94:	40020400 	.word	0x40020400
 8005e98:	40020800 	.word	0x40020800
 8005e9c:	40020c00 	.word	0x40020c00
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40021400 	.word	0x40021400
 8005ea8:	40021800 	.word	0x40021800
 8005eac:	40021c00 	.word	0x40021c00
 8005eb0:	40022000 	.word	0x40022000
 8005eb4:	40022400 	.word	0x40022400
 8005eb8:	40013c00 	.word	0x40013c00

08005ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_GPIO_ReadPin+0x1c>
 8005ece:	887b      	ldrh	r3, [r7, #2]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d004      	beq.n	8005ee2 <HAL_GPIO_ReadPin+0x26>
 8005ed8:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8005edc:	4809      	ldr	r0, [pc, #36]	; (8005f04 <HAL_GPIO_ReadPin+0x48>)
 8005ede:	f7fc fd26 	bl	800292e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	e001      	b.n	8005ef8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	0800bd44 	.word	0x0800bd44

08005f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
 8005f14:	4613      	mov	r3, r2
 8005f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005f18:	887b      	ldrh	r3, [r7, #2]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <HAL_GPIO_WritePin+0x20>
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_GPIO_WritePin+0x2a>
 8005f28:	f240 119f 	movw	r1, #415	; 0x19f
 8005f2c:	480e      	ldr	r0, [pc, #56]	; (8005f68 <HAL_GPIO_WritePin+0x60>)
 8005f2e:	f7fc fcfe 	bl	800292e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005f32:	787b      	ldrb	r3, [r7, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <HAL_GPIO_WritePin+0x40>
 8005f38:	787b      	ldrb	r3, [r7, #1]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d004      	beq.n	8005f48 <HAL_GPIO_WritePin+0x40>
 8005f3e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8005f42:	4809      	ldr	r0, [pc, #36]	; (8005f68 <HAL_GPIO_WritePin+0x60>)
 8005f44:	f7fc fcf3 	bl	800292e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005f48:	787b      	ldrb	r3, [r7, #1]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f4e:	887a      	ldrh	r2, [r7, #2]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f54:	e003      	b.n	8005f5e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	041a      	lsls	r2, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	619a      	str	r2, [r3, #24]
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	0800bd44 	.word	0x0800bd44

08005f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d006      	beq.n	8005f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f82:	4a05      	ldr	r2, [pc, #20]	; (8005f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fc fab8 	bl	8002500 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40013c00 	.word	0x40013c00

08005f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e1be      	b.n	800632c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a9f      	ldr	r2, [pc, #636]	; (8006230 <HAL_I2C_Init+0x294>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_I2C_Init+0x3a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a9d      	ldr	r2, [pc, #628]	; (8006234 <HAL_I2C_Init+0x298>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_I2C_Init+0x3a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a9c      	ldr	r2, [pc, #624]	; (8006238 <HAL_I2C_Init+0x29c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_I2C_Init+0x3a>
 8005fcc:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005fd0:	489a      	ldr	r0, [pc, #616]	; (800623c <HAL_I2C_Init+0x2a0>)
 8005fd2:	f7fc fcac 	bl	800292e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <HAL_I2C_Init+0x4c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	4a97      	ldr	r2, [pc, #604]	; (8006240 <HAL_I2C_Init+0x2a4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d904      	bls.n	8005ff2 <HAL_I2C_Init+0x56>
 8005fe8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005fec:	4893      	ldr	r0, [pc, #588]	; (800623c <HAL_I2C_Init+0x2a0>)
 8005fee:	f7fc fc9e 	bl	800292e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_I2C_Init+0x72>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006002:	d004      	beq.n	800600e <HAL_I2C_Init+0x72>
 8006004:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006008:	488c      	ldr	r0, [pc, #560]	; (800623c <HAL_I2C_Init+0x2a0>)
 800600a:	f7fc fc90 	bl	800292e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <HAL_I2C_Init+0x8c>
 800601e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006022:	4886      	ldr	r0, [pc, #536]	; (800623c <HAL_I2C_Init+0x2a0>)
 8006024:	f7fc fc83 	bl	800292e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006030:	d009      	beq.n	8006046 <HAL_I2C_Init+0xaa>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800603a:	d004      	beq.n	8006046 <HAL_I2C_Init+0xaa>
 800603c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006040:	487e      	ldr	r0, [pc, #504]	; (800623c <HAL_I2C_Init+0x2a0>)
 8006042:	f7fc fc74 	bl	800292e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_I2C_Init+0xc4>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d004      	beq.n	8006060 <HAL_I2C_Init+0xc4>
 8006056:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800605a:	4878      	ldr	r0, [pc, #480]	; (800623c <HAL_I2C_Init+0x2a0>)
 800605c:	f7fc fc67 	bl	800292e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <HAL_I2C_Init+0xda>
 800606c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006070:	4872      	ldr	r0, [pc, #456]	; (800623c <HAL_I2C_Init+0x2a0>)
 8006072:	f7fc fc5c 	bl	800292e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_I2C_Init+0xf4>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d004      	beq.n	8006090 <HAL_I2C_Init+0xf4>
 8006086:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800608a:	486c      	ldr	r0, [pc, #432]	; (800623c <HAL_I2C_Init+0x2a0>)
 800608c:	f7fc fc4f 	bl	800292e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_I2C_Init+0x10e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d004      	beq.n	80060aa <HAL_I2C_Init+0x10e>
 80060a0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80060a4:	4865      	ldr	r0, [pc, #404]	; (800623c <HAL_I2C_Init+0x2a0>)
 80060a6:	f7fc fc42 	bl	800292e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fb fe90 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2224      	movs	r2, #36	; 0x24
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060fc:	f001 fe70 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 8006100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4a4f      	ldr	r2, [pc, #316]	; (8006244 <HAL_I2C_Init+0x2a8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d807      	bhi.n	800611c <HAL_I2C_Init+0x180>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a4e      	ldr	r2, [pc, #312]	; (8006248 <HAL_I2C_Init+0x2ac>)
 8006110:	4293      	cmp	r3, r2
 8006112:	bf94      	ite	ls
 8006114:	2301      	movls	r3, #1
 8006116:	2300      	movhi	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e006      	b.n	800612a <HAL_I2C_Init+0x18e>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a4b      	ldr	r2, [pc, #300]	; (800624c <HAL_I2C_Init+0x2b0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	bf94      	ite	ls
 8006124:	2301      	movls	r3, #1
 8006126:	2300      	movhi	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e0fc      	b.n	800632c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4a46      	ldr	r2, [pc, #280]	; (8006250 <HAL_I2C_Init+0x2b4>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	0c9b      	lsrs	r3, r3, #18
 800613c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4a38      	ldr	r2, [pc, #224]	; (8006244 <HAL_I2C_Init+0x2a8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d802      	bhi.n	800616c <HAL_I2C_Init+0x1d0>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	3301      	adds	r3, #1
 800616a:	e009      	b.n	8006180 <HAL_I2C_Init+0x1e4>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	4a37      	ldr	r2, [pc, #220]	; (8006254 <HAL_I2C_Init+0x2b8>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	099b      	lsrs	r3, r3, #6
 800617e:	3301      	adds	r3, #1
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	430b      	orrs	r3, r1
 8006186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006192:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	492a      	ldr	r1, [pc, #168]	; (8006244 <HAL_I2C_Init+0x2a8>)
 800619c:	428b      	cmp	r3, r1
 800619e:	d819      	bhi.n	80061d4 <HAL_I2C_Init+0x238>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1e59      	subs	r1, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061b4:	400b      	ands	r3, r1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <HAL_I2C_Init+0x234>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1e59      	subs	r1, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80061c8:	3301      	adds	r3, #1
 80061ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ce:	e066      	b.n	800629e <HAL_I2C_Init+0x302>
 80061d0:	2304      	movs	r3, #4
 80061d2:	e064      	b.n	800629e <HAL_I2C_Init+0x302>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d111      	bne.n	8006200 <HAL_I2C_Init+0x264>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	1e58      	subs	r0, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6859      	ldr	r1, [r3, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	440b      	add	r3, r1
 80061ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ee:	3301      	adds	r3, #1
 80061f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	e012      	b.n	8006226 <HAL_I2C_Init+0x28a>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	1e58      	subs	r0, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6859      	ldr	r1, [r3, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	0099      	lsls	r1, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	fbb0 f3f3 	udiv	r3, r0, r3
 8006216:	3301      	adds	r3, #1
 8006218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d016      	beq.n	8006258 <HAL_I2C_Init+0x2bc>
 800622a:	2301      	movs	r3, #1
 800622c:	e037      	b.n	800629e <HAL_I2C_Init+0x302>
 800622e:	bf00      	nop
 8006230:	40005400 	.word	0x40005400
 8006234:	40005800 	.word	0x40005800
 8006238:	40005c00 	.word	0x40005c00
 800623c:	0800bd80 	.word	0x0800bd80
 8006240:	00061a80 	.word	0x00061a80
 8006244:	000186a0 	.word	0x000186a0
 8006248:	001e847f 	.word	0x001e847f
 800624c:	003d08ff 	.word	0x003d08ff
 8006250:	431bde83 	.word	0x431bde83
 8006254:	10624dd3 	.word	0x10624dd3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10e      	bne.n	800627e <HAL_I2C_Init+0x2e2>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e58      	subs	r0, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	440b      	add	r3, r1
 800626e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006272:	3301      	adds	r3, #1
 8006274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	e00f      	b.n	800629e <HAL_I2C_Init+0x302>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1e58      	subs	r0, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	0099      	lsls	r1, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	fbb0 f3f3 	udiv	r3, r0, r3
 8006294:	3301      	adds	r3, #1
 8006296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	6809      	ldr	r1, [r1, #0]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6911      	ldr	r1, [r2, #16]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68d2      	ldr	r2, [r2, #12]
 80062d8:	4311      	orrs	r1, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	430b      	orrs	r3, r1
 80062e0:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695a      	ldr	r2, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	4603      	mov	r3, r0
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	460b      	mov	r3, r1
 8006348:	813b      	strh	r3, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800634e:	f7fd fc47 	bl	8003be0 <HAL_GetTick>
 8006352:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d007      	beq.n	800636a <HAL_I2C_Mem_Write+0x36>
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	2b10      	cmp	r3, #16
 800635e:	d004      	beq.n	800636a <HAL_I2C_Mem_Write+0x36>
 8006360:	f640 1175 	movw	r1, #2421	; 0x975
 8006364:	4873      	ldr	r0, [pc, #460]	; (8006534 <HAL_I2C_Mem_Write+0x200>)
 8006366:	f7fc fae2 	bl	800292e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b20      	cmp	r3, #32
 8006374:	f040 80d9 	bne.w	800652a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	2319      	movs	r3, #25
 800637e:	2201      	movs	r2, #1
 8006380:	496d      	ldr	r1, [pc, #436]	; (8006538 <HAL_I2C_Mem_Write+0x204>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fc8c 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
 8006390:	e0cc      	b.n	800652c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_I2C_Mem_Write+0x6c>
 800639c:	2302      	movs	r3, #2
 800639e:	e0c5      	b.n	800652c <HAL_I2C_Mem_Write+0x1f8>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d007      	beq.n	80063c6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2221      	movs	r2, #33	; 0x21
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2240      	movs	r2, #64	; 0x40
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a4d      	ldr	r2, [pc, #308]	; (800653c <HAL_I2C_Mem_Write+0x208>)
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006408:	88f8      	ldrh	r0, [r7, #6]
 800640a:	893a      	ldrh	r2, [r7, #8]
 800640c:	8979      	ldrh	r1, [r7, #10]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4603      	mov	r3, r0
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fac3 	bl	80069a4 <I2C_RequestMemoryWrite>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d052      	beq.n	80064ca <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e081      	b.n	800652c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fd0d 	bl	8006e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00d      	beq.n	8006454 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	2b04      	cmp	r3, #4
 800643e:	d107      	bne.n	8006450 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e06b      	b.n	800652c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b04      	cmp	r3, #4
 8006490:	d11b      	bne.n	80064ca <HAL_I2C_Mem_Write+0x196>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1aa      	bne.n	8006428 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fcf9 	bl	8006ece <I2C_WaitOnBTFFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00d      	beq.n	80064fe <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d107      	bne.n	80064fa <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e016      	b.n	800652c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	e000      	b.n	800652c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800652a:	2302      	movs	r3, #2
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	0800bd80 	.word	0x0800bd80
 8006538:	00100002 	.word	0x00100002
 800653c:	ffff0000 	.word	0xffff0000

08006540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	; 0x30
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	4608      	mov	r0, r1
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	4603      	mov	r3, r0
 8006550:	817b      	strh	r3, [r7, #10]
 8006552:	460b      	mov	r3, r1
 8006554:	813b      	strh	r3, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800655a:	f7fd fb41 	bl	8003be0 <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d007      	beq.n	8006576 <HAL_I2C_Mem_Read+0x36>
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b10      	cmp	r3, #16
 800656a:	d004      	beq.n	8006576 <HAL_I2C_Mem_Read+0x36>
 800656c:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8006570:	4881      	ldr	r0, [pc, #516]	; (8006778 <HAL_I2C_Mem_Read+0x238>)
 8006572:	f7fc f9dc 	bl	800292e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b20      	cmp	r3, #32
 8006580:	f040 8209 	bne.w	8006996 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2319      	movs	r3, #25
 800658a:	2201      	movs	r2, #1
 800658c:	497b      	ldr	r1, [pc, #492]	; (800677c <HAL_I2C_Mem_Read+0x23c>)
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 fb86 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
 800659c:	e1fc      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_I2C_Mem_Read+0x6c>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e1f5      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d007      	beq.n	80065d2 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2222      	movs	r2, #34	; 0x22
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2240      	movs	r2, #64	; 0x40
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a5b      	ldr	r2, [pc, #364]	; (8006780 <HAL_I2C_Mem_Read+0x240>)
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006614:	88f8      	ldrh	r0, [r7, #6]
 8006616:	893a      	ldrh	r2, [r7, #8]
 8006618:	8979      	ldrh	r1, [r7, #10]
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4603      	mov	r3, r0
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fa53 	bl	8006ad0 <I2C_RequestMemoryRead>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e1b1      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	d113      	bne.n	8006664 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663c:	2300      	movs	r3, #0
 800663e:	623b      	str	r3, [r7, #32]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	623b      	str	r3, [r7, #32]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	623b      	str	r3, [r7, #32]
 8006650:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e185      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	2b01      	cmp	r3, #1
 800666a:	d11b      	bne.n	80066a4 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e165      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d11b      	bne.n	80066e4 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ba:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ca:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066cc:	2300      	movs	r3, #0
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	e145      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066fa:	e139      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	2b03      	cmp	r3, #3
 8006702:	f200 80f2 	bhi.w	80068ea <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	2b01      	cmp	r3, #1
 800670c:	d123      	bne.n	8006756 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fc1c 	bl	8006f50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e13a      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006754:	e10c      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675a:	2b02      	cmp	r3, #2
 800675c:	d14f      	bne.n	80067fe <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2200      	movs	r2, #0
 8006766:	4907      	ldr	r1, [pc, #28]	; (8006784 <HAL_I2C_Mem_Read+0x244>)
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fa99 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e10f      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
 8006778:	0800bd80 	.word	0x0800bd80
 800677c:	00100002 	.word	0x00100002
 8006780:	ffff0000 	.word	0xffff0000
 8006784:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067fc:	e0b8      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	2200      	movs	r2, #0
 8006806:	4966      	ldr	r1, [pc, #408]	; (80069a0 <HAL_I2C_Mem_Read+0x460>)
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fa49 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e0bf      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	2200      	movs	r2, #0
 8006862:	494f      	ldr	r1, [pc, #316]	; (80069a0 <HAL_I2C_Mem_Read+0x460>)
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fa1b 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e091      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068e8:	e042      	b.n	8006970 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fb2e 	bl	8006f50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e04c      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b04      	cmp	r3, #4
 800693c:	d118      	bne.n	8006970 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006974:	2b00      	cmp	r3, #0
 8006976:	f47f aec1 	bne.w	80066fc <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3728      	adds	r7, #40	; 0x28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	00010004 	.word	0x00010004

080069a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	4608      	mov	r0, r1
 80069ae:	4611      	mov	r1, r2
 80069b0:	461a      	mov	r2, r3
 80069b2:	4603      	mov	r3, r0
 80069b4:	817b      	strh	r3, [r7, #10]
 80069b6:	460b      	mov	r3, r1
 80069b8:	813b      	strh	r3, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f960 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00d      	beq.n	8006a02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f4:	d103      	bne.n	80069fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e05f      	b.n	8006ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a02:	897b      	ldrh	r3, [r7, #10]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	6a3a      	ldr	r2, [r7, #32]
 8006a16:	492d      	ldr	r1, [pc, #180]	; (8006acc <I2C_RequestMemoryWrite+0x128>)
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f998 	bl	8006d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e04c      	b.n	8006ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a40:	6a39      	ldr	r1, [r7, #32]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fa02 	bl	8006e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d107      	bne.n	8006a66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e02b      	b.n	8006ac2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d105      	bne.n	8006a7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a70:	893b      	ldrh	r3, [r7, #8]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	611a      	str	r2, [r3, #16]
 8006a7a:	e021      	b.n	8006ac0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a7c:	893b      	ldrh	r3, [r7, #8]
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8c:	6a39      	ldr	r1, [r7, #32]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 f9dc 	bl	8006e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00d      	beq.n	8006ab6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d107      	bne.n	8006ab2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e005      	b.n	8006ac2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ab6:	893b      	ldrh	r3, [r7, #8]
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	00010002 	.word	0x00010002

08006ad0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	817b      	strh	r3, [r7, #10]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	813b      	strh	r3, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006af8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f8c2 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b30:	d103      	bne.n	8006b3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e0aa      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b3e:	897b      	ldrh	r3, [r7, #10]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	6a3a      	ldr	r2, [r7, #32]
 8006b52:	4952      	ldr	r1, [pc, #328]	; (8006c9c <I2C_RequestMemoryRead+0x1cc>)
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f8fa 	bl	8006d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e097      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7c:	6a39      	ldr	r1, [r7, #32]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f964 	bl	8006e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d107      	bne.n	8006ba2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e076      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d105      	bne.n	8006bb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bac:	893b      	ldrh	r3, [r7, #8]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	611a      	str	r2, [r3, #16]
 8006bb6:	e021      	b.n	8006bfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bb8:	893b      	ldrh	r3, [r7, #8]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	6a39      	ldr	r1, [r7, #32]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f93e 	bl	8006e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d107      	bne.n	8006bee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e050      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf2:	893b      	ldrh	r3, [r7, #8]
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfe:	6a39      	ldr	r1, [r7, #32]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f923 	bl	8006e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00d      	beq.n	8006c28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d107      	bne.n	8006c24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e035      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f82b 	bl	8006ca0 <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00d      	beq.n	8006c6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d103      	bne.n	8006c68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e013      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c6c:	897b      	ldrh	r3, [r7, #10]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	6a3a      	ldr	r2, [r7, #32]
 8006c80:	4906      	ldr	r1, [pc, #24]	; (8006c9c <I2C_RequestMemoryRead+0x1cc>)
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f863 	bl	8006d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	00010002 	.word	0x00010002

08006ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cb0:	e025      	b.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb8:	d021      	beq.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cba:	f7fc ff91 	bl	8003be0 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d116      	bne.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f043 0220 	orr.w	r2, r3, #32
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e023      	b.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d10d      	bne.n	8006d24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	e00c      	b.n	8006d3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	43da      	mvns	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf0c      	ite	eq
 8006d36:	2301      	moveq	r3, #1
 8006d38:	2300      	movne	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d0b6      	beq.n	8006cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d5c:	e051      	b.n	8006e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d123      	bne.n	8006db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f043 0204 	orr.w	r2, r3, #4
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e046      	b.n	8006e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dbc:	d021      	beq.n	8006e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dbe:	f7fc ff0f 	bl	8003be0 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d302      	bcc.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d116      	bne.n	8006e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f043 0220 	orr.w	r2, r3, #32
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e020      	b.n	8006e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d10c      	bne.n	8006e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	43da      	mvns	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4013      	ands	r3, r2
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2301      	movne	r3, #1
 8006e20:	2300      	moveq	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e00b      	b.n	8006e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	43da      	mvns	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4013      	ands	r3, r2
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf14      	ite	ne
 8006e38:	2301      	movne	r3, #1
 8006e3a:	2300      	moveq	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d18d      	bne.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e58:	e02d      	b.n	8006eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f8ce 	bl	8006ffc <I2C_IsAcknowledgeFailed>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e02d      	b.n	8006ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e70:	d021      	beq.n	8006eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fc feb5 	bl	8003be0 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d116      	bne.n	8006eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f043 0220 	orr.w	r2, r3, #32
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e007      	b.n	8006ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d1ca      	bne.n	8006e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006eda:	e02d      	b.n	8006f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f88d 	bl	8006ffc <I2C_IsAcknowledgeFailed>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e02d      	b.n	8006f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef2:	d021      	beq.n	8006f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef4:	f7fc fe74 	bl	8003be0 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d302      	bcc.n	8006f0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d116      	bne.n	8006f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e007      	b.n	8006f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d1ca      	bne.n	8006edc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f5c:	e042      	b.n	8006fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d119      	bne.n	8006fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f06f 0210 	mvn.w	r2, #16
 8006f74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e029      	b.n	8006ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa0:	f7fc fe1e 	bl	8003be0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d116      	bne.n	8006fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	f043 0220 	orr.w	r2, r3, #32
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e007      	b.n	8006ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d1b5      	bne.n	8006f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007012:	d11b      	bne.n	800704c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800701c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	f043 0204 	orr.w	r2, r3, #4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a28      	ldr	r2, [pc, #160]	; (800710c <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00d      	beq.n	800708c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a26      	ldr	r2, [pc, #152]	; (8007110 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d008      	beq.n	800708c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a25      	ldr	r2, [pc, #148]	; (8007114 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8007084:	215c      	movs	r1, #92	; 0x5c
 8007086:	4824      	ldr	r0, [pc, #144]	; (8007118 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 8007088:	f7fb fc51 	bl	800292e <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d006      	beq.n	80070a0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b10      	cmp	r3, #16
 8007096:	d003      	beq.n	80070a0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8007098:	215d      	movs	r1, #93	; 0x5d
 800709a:	481f      	ldr	r0, [pc, #124]	; (8007118 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 800709c:	f7fb fc47 	bl	800292e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d129      	bne.n	8007100 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2224      	movs	r2, #36	; 0x24
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0210 	bic.w	r2, r2, #16
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e000      	b.n	8007102 <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007100:	2302      	movs	r3, #2
  }
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40005400 	.word	0x40005400
 8007110:	40005800 	.word	0x40005800
 8007114:	40005c00 	.word	0x40005c00
 8007118:	0800bdb8 	.word	0x0800bdb8

0800711c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a27      	ldr	r2, [pc, #156]	; (80071cc <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00d      	beq.n	8007150 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a25      	ldr	r2, [pc, #148]	; (80071d0 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d008      	beq.n	8007150 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a24      	ldr	r2, [pc, #144]	; (80071d4 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007148:	2184      	movs	r1, #132	; 0x84
 800714a:	4823      	ldr	r0, [pc, #140]	; (80071d8 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 800714c:	f7fb fbef 	bl	800292e <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b0f      	cmp	r3, #15
 8007154:	d903      	bls.n	800715e <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8007156:	2185      	movs	r1, #133	; 0x85
 8007158:	481f      	ldr	r0, [pc, #124]	; (80071d8 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 800715a:	f7fb fbe8 	bl	800292e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b20      	cmp	r3, #32
 8007168:	d12a      	bne.n	80071c0 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2224      	movs	r2, #36	; 0x24
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800718a:	89fb      	ldrh	r3, [r7, #14]
 800718c:	f023 030f 	bic.w	r3, r3, #15
 8007190:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	b29a      	uxth	r2, r3
 8007196:	89fb      	ldrh	r3, [r7, #14]
 8007198:	4313      	orrs	r3, r2
 800719a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	89fa      	ldrh	r2, [r7, #14]
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40005400 	.word	0x40005400
 80071d0:	40005800 	.word	0x40005800
 80071d4:	40005c00 	.word	0x40005c00
 80071d8:	0800bdb8 	.word	0x0800bdb8

080071dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071e6:	2300      	movs	r3, #0
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	4b20      	ldr	r3, [pc, #128]	; (800726c <HAL_PWREx_EnableOverDrive+0x90>)
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	4a1f      	ldr	r2, [pc, #124]	; (800726c <HAL_PWREx_EnableOverDrive+0x90>)
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6413      	str	r3, [r2, #64]	; 0x40
 80071f6:	4b1d      	ldr	r3, [pc, #116]	; (800726c <HAL_PWREx_EnableOverDrive+0x90>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <HAL_PWREx_EnableOverDrive+0x94>)
 8007204:	2201      	movs	r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007208:	f7fc fcea 	bl	8003be0 <HAL_GetTick>
 800720c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800720e:	e009      	b.n	8007224 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007210:	f7fc fce6 	bl	8003be0 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721e:	d901      	bls.n	8007224 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e01f      	b.n	8007264 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007224:	4b13      	ldr	r3, [pc, #76]	; (8007274 <HAL_PWREx_EnableOverDrive+0x98>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007230:	d1ee      	bne.n	8007210 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007234:	2201      	movs	r2, #1
 8007236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007238:	f7fc fcd2 	bl	8003be0 <HAL_GetTick>
 800723c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800723e:	e009      	b.n	8007254 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007240:	f7fc fcce 	bl	8003be0 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800724e:	d901      	bls.n	8007254 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e007      	b.n	8007264 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <HAL_PWREx_EnableOverDrive+0x98>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007260:	d1ee      	bne.n	8007240 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40023800 	.word	0x40023800
 8007270:	420e0040 	.word	0x420e0040
 8007274:	40007000 	.word	0x40007000
 8007278:	420e0044 	.word	0x420e0044

0800727c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e30d      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b0f      	cmp	r3, #15
 8007294:	d903      	bls.n	800729e <HAL_RCC_OscConfig+0x22>
 8007296:	21e8      	movs	r1, #232	; 0xe8
 8007298:	48a3      	ldr	r0, [pc, #652]	; (8007528 <HAL_RCC_OscConfig+0x2ac>)
 800729a:	f7fb fb48 	bl	800292e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8088 	beq.w	80073bc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <HAL_RCC_OscConfig+0x54>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072bc:	d008      	beq.n	80072d0 <HAL_RCC_OscConfig+0x54>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072c6:	d003      	beq.n	80072d0 <HAL_RCC_OscConfig+0x54>
 80072c8:	21ed      	movs	r1, #237	; 0xed
 80072ca:	4897      	ldr	r0, [pc, #604]	; (8007528 <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	f7fb fb2f 	bl	800292e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072d0:	4b96      	ldr	r3, [pc, #600]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 030c 	and.w	r3, r3, #12
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d00c      	beq.n	80072f6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072dc:	4b93      	ldr	r3, [pc, #588]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d112      	bne.n	800730e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072e8:	4b90      	ldr	r3, [pc, #576]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072f4:	d10b      	bne.n	800730e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f6:	4b8d      	ldr	r3, [pc, #564]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d05b      	beq.n	80073ba <HAL_RCC_OscConfig+0x13e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d157      	bne.n	80073ba <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e2cd      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007316:	d106      	bne.n	8007326 <HAL_RCC_OscConfig+0xaa>
 8007318:	4b84      	ldr	r3, [pc, #528]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a83      	ldr	r2, [pc, #524]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800731e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	e01d      	b.n	8007362 <HAL_RCC_OscConfig+0xe6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800732e:	d10c      	bne.n	800734a <HAL_RCC_OscConfig+0xce>
 8007330:	4b7e      	ldr	r3, [pc, #504]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7d      	ldr	r2, [pc, #500]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4b7b      	ldr	r3, [pc, #492]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a7a      	ldr	r2, [pc, #488]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	e00b      	b.n	8007362 <HAL_RCC_OscConfig+0xe6>
 800734a:	4b78      	ldr	r3, [pc, #480]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a77      	ldr	r2, [pc, #476]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4b75      	ldr	r3, [pc, #468]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a74      	ldr	r2, [pc, #464]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800735c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007360:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d013      	beq.n	8007392 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736a:	f7fc fc39 	bl	8003be0 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007372:	f7fc fc35 	bl	8003be0 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b64      	cmp	r3, #100	; 0x64
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e292      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007384:	4b69      	ldr	r3, [pc, #420]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0xf6>
 8007390:	e014      	b.n	80073bc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007392:	f7fc fc25 	bl	8003be0 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007398:	e008      	b.n	80073ac <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800739a:	f7fc fc21 	bl	8003be0 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b64      	cmp	r3, #100	; 0x64
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e27e      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ac:	4b5f      	ldr	r3, [pc, #380]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f0      	bne.n	800739a <HAL_RCC_OscConfig+0x11e>
 80073b8:	e000      	b.n	80073bc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d079      	beq.n	80074bc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_RCC_OscConfig+0x166>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d004      	beq.n	80073e2 <HAL_RCC_OscConfig+0x166>
 80073d8:	f240 111f 	movw	r1, #287	; 0x11f
 80073dc:	4852      	ldr	r0, [pc, #328]	; (8007528 <HAL_RCC_OscConfig+0x2ac>)
 80073de:	f7fb faa6 	bl	800292e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b1f      	cmp	r3, #31
 80073e8:	d904      	bls.n	80073f4 <HAL_RCC_OscConfig+0x178>
 80073ea:	f44f 7190 	mov.w	r1, #288	; 0x120
 80073ee:	484e      	ldr	r0, [pc, #312]	; (8007528 <HAL_RCC_OscConfig+0x2ac>)
 80073f0:	f7fb fa9d 	bl	800292e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073f4:	4b4d      	ldr	r3, [pc, #308]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 030c 	and.w	r3, r3, #12
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007400:	4b4a      	ldr	r3, [pc, #296]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007408:	2b08      	cmp	r3, #8
 800740a:	d11c      	bne.n	8007446 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800740c:	4b47      	ldr	r3, [pc, #284]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d116      	bne.n	8007446 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007418:	4b44      	ldr	r3, [pc, #272]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_RCC_OscConfig+0x1b4>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d001      	beq.n	8007430 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e23c      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007430:	4b3e      	ldr	r3, [pc, #248]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	493b      	ldr	r1, [pc, #236]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007440:	4313      	orrs	r3, r2
 8007442:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007444:	e03a      	b.n	80074bc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d020      	beq.n	8007490 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800744e:	4b38      	ldr	r3, [pc, #224]	; (8007530 <HAL_RCC_OscConfig+0x2b4>)
 8007450:	2201      	movs	r2, #1
 8007452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fc fbc4 	bl	8003be0 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800745c:	f7fc fbc0 	bl	8003be0 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e21d      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800746e:	4b2f      	ldr	r3, [pc, #188]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0f0      	beq.n	800745c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747a:	4b2c      	ldr	r3, [pc, #176]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	4928      	ldr	r1, [pc, #160]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800748a:	4313      	orrs	r3, r2
 800748c:	600b      	str	r3, [r1, #0]
 800748e:	e015      	b.n	80074bc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007490:	4b27      	ldr	r3, [pc, #156]	; (8007530 <HAL_RCC_OscConfig+0x2b4>)
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007496:	f7fc fba3 	bl	8003be0 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800749e:	f7fc fb9f 	bl	8003be0 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e1fc      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074b0:	4b1e      	ldr	r3, [pc, #120]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1f0      	bne.n	800749e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d046      	beq.n	8007556 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <HAL_RCC_OscConfig+0x266>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d004      	beq.n	80074e2 <HAL_RCC_OscConfig+0x266>
 80074d8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80074dc:	4812      	ldr	r0, [pc, #72]	; (8007528 <HAL_RCC_OscConfig+0x2ac>)
 80074de:	f7fb fa26 	bl	800292e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d016      	beq.n	8007518 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <HAL_RCC_OscConfig+0x2b8>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fc fb76 	bl	8003be0 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f8:	f7fc fb72 	bl	8003be0 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e1cf      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800750a:	4b08      	ldr	r3, [pc, #32]	; (800752c <HAL_RCC_OscConfig+0x2b0>)
 800750c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCC_OscConfig+0x27c>
 8007516:	e01e      	b.n	8007556 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <HAL_RCC_OscConfig+0x2b8>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800751e:	f7fc fb5f 	bl	8003be0 <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007524:	e011      	b.n	800754a <HAL_RCC_OscConfig+0x2ce>
 8007526:	bf00      	nop
 8007528:	0800bdf4 	.word	0x0800bdf4
 800752c:	40023800 	.word	0x40023800
 8007530:	42470000 	.word	0x42470000
 8007534:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007538:	f7fc fb52 	bl	8003be0 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e1af      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800754a:	4b97      	ldr	r3, [pc, #604]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80a8 	beq.w	80076b4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007564:	2300      	movs	r3, #0
 8007566:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <HAL_RCC_OscConfig+0x30e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d008      	beq.n	800758a <HAL_RCC_OscConfig+0x30e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b05      	cmp	r3, #5
 800757e:	d004      	beq.n	800758a <HAL_RCC_OscConfig+0x30e>
 8007580:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8007584:	4889      	ldr	r0, [pc, #548]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 8007586:	f7fb f9d2 	bl	800292e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800758a:	4b87      	ldr	r3, [pc, #540]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10f      	bne.n	80075b6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]
 800759a:	4b83      	ldr	r3, [pc, #524]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	4a82      	ldr	r2, [pc, #520]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 80075a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a4:	6413      	str	r3, [r2, #64]	; 0x40
 80075a6:	4b80      	ldr	r3, [pc, #512]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ae:	60bb      	str	r3, [r7, #8]
 80075b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b6:	4b7e      	ldr	r3, [pc, #504]	; (80077b0 <HAL_RCC_OscConfig+0x534>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d118      	bne.n	80075f4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075c2:	4b7b      	ldr	r3, [pc, #492]	; (80077b0 <HAL_RCC_OscConfig+0x534>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a7a      	ldr	r2, [pc, #488]	; (80077b0 <HAL_RCC_OscConfig+0x534>)
 80075c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075ce:	f7fc fb07 	bl	8003be0 <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d6:	f7fc fb03 	bl	8003be0 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e160      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e8:	4b71      	ldr	r3, [pc, #452]	; (80077b0 <HAL_RCC_OscConfig+0x534>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f0      	beq.n	80075d6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d106      	bne.n	800760a <HAL_RCC_OscConfig+0x38e>
 80075fc:	4b6a      	ldr	r3, [pc, #424]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 80075fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007600:	4a69      	ldr	r2, [pc, #420]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	6713      	str	r3, [r2, #112]	; 0x70
 8007608:	e01c      	b.n	8007644 <HAL_RCC_OscConfig+0x3c8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b05      	cmp	r3, #5
 8007610:	d10c      	bne.n	800762c <HAL_RCC_OscConfig+0x3b0>
 8007612:	4b65      	ldr	r3, [pc, #404]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	4a64      	ldr	r2, [pc, #400]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007618:	f043 0304 	orr.w	r3, r3, #4
 800761c:	6713      	str	r3, [r2, #112]	; 0x70
 800761e:	4b62      	ldr	r3, [pc, #392]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a61      	ldr	r2, [pc, #388]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
 800762a:	e00b      	b.n	8007644 <HAL_RCC_OscConfig+0x3c8>
 800762c:	4b5e      	ldr	r3, [pc, #376]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800762e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007630:	4a5d      	ldr	r2, [pc, #372]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007632:	f023 0301 	bic.w	r3, r3, #1
 8007636:	6713      	str	r3, [r2, #112]	; 0x70
 8007638:	4b5b      	ldr	r3, [pc, #364]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	4a5a      	ldr	r2, [pc, #360]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800763e:	f023 0304 	bic.w	r3, r3, #4
 8007642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d015      	beq.n	8007678 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764c:	f7fc fac8 	bl	8003be0 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007652:	e00a      	b.n	800766a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007654:	f7fc fac4 	bl	8003be0 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e11f      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766a:	4b4f      	ldr	r3, [pc, #316]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0ee      	beq.n	8007654 <HAL_RCC_OscConfig+0x3d8>
 8007676:	e014      	b.n	80076a2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007678:	f7fc fab2 	bl	8003be0 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800767e:	e00a      	b.n	8007696 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007680:	f7fc faae 	bl	8003be0 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	f241 3288 	movw	r2, #5000	; 0x1388
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e109      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007696:	4b44      	ldr	r3, [pc, #272]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1ee      	bne.n	8007680 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d105      	bne.n	80076b4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076a8:	4b3f      	ldr	r3, [pc, #252]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	4a3e      	ldr	r2, [pc, #248]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 80076ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_RCC_OscConfig+0x45a>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d008      	beq.n	80076d6 <HAL_RCC_OscConfig+0x45a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d004      	beq.n	80076d6 <HAL_RCC_OscConfig+0x45a>
 80076cc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80076d0:	4836      	ldr	r0, [pc, #216]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 80076d2:	f7fb f92c 	bl	800292e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80e4 	beq.w	80078a8 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076e0:	4b31      	ldr	r3, [pc, #196]	; (80077a8 <HAL_RCC_OscConfig+0x52c>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 030c 	and.w	r3, r3, #12
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	f000 80ae 	beq.w	800784a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	f040 8092 	bne.w	800781c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <HAL_RCC_OscConfig+0x498>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007708:	d004      	beq.n	8007714 <HAL_RCC_OscConfig+0x498>
 800770a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800770e:	4827      	ldr	r0, [pc, #156]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 8007710:	f7fb f90d 	bl	800292e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	2b3f      	cmp	r3, #63	; 0x3f
 800771a:	d904      	bls.n	8007726 <HAL_RCC_OscConfig+0x4aa>
 800771c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007720:	4822      	ldr	r0, [pc, #136]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 8007722:	f7fb f904 	bl	800292e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b31      	cmp	r3, #49	; 0x31
 800772c:	d904      	bls.n	8007738 <HAL_RCC_OscConfig+0x4bc>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007736:	d904      	bls.n	8007742 <HAL_RCC_OscConfig+0x4c6>
 8007738:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800773c:	481b      	ldr	r0, [pc, #108]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 800773e:	f7fb f8f6 	bl	800292e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	2b02      	cmp	r3, #2
 8007748:	d010      	beq.n	800776c <HAL_RCC_OscConfig+0x4f0>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	2b04      	cmp	r3, #4
 8007750:	d00c      	beq.n	800776c <HAL_RCC_OscConfig+0x4f0>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	2b06      	cmp	r3, #6
 8007758:	d008      	beq.n	800776c <HAL_RCC_OscConfig+0x4f0>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2b08      	cmp	r3, #8
 8007760:	d004      	beq.n	800776c <HAL_RCC_OscConfig+0x4f0>
 8007762:	f240 11db 	movw	r1, #475	; 0x1db
 8007766:	4811      	ldr	r0, [pc, #68]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 8007768:	f7fb f8e1 	bl	800292e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d903      	bls.n	800777c <HAL_RCC_OscConfig+0x500>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	2b0f      	cmp	r3, #15
 800777a:	d904      	bls.n	8007786 <HAL_RCC_OscConfig+0x50a>
 800777c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007780:	480a      	ldr	r0, [pc, #40]	; (80077ac <HAL_RCC_OscConfig+0x530>)
 8007782:	f7fb f8d4 	bl	800292e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_RCC_OscConfig+0x538>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778c:	f7fc fa28 	bl	8003be0 <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007792:	e011      	b.n	80077b8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007794:	f7fc fa24 	bl	8003be0 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d90a      	bls.n	80077b8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e081      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
 80077a6:	bf00      	nop
 80077a8:	40023800 	.word	0x40023800
 80077ac:	0800bdf4 	.word	0x0800bdf4
 80077b0:	40007000 	.word	0x40007000
 80077b4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b8:	4b3e      	ldr	r3, [pc, #248]	; (80078b4 <HAL_RCC_OscConfig+0x638>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e7      	bne.n	8007794 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	019b      	lsls	r3, r3, #6
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	3b01      	subs	r3, #1
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	061b      	lsls	r3, r3, #24
 80077e8:	4932      	ldr	r1, [pc, #200]	; (80078b4 <HAL_RCC_OscConfig+0x638>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077ee:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <HAL_RCC_OscConfig+0x63c>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f4:	f7fc f9f4 	bl	8003be0 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077fc:	f7fc f9f0 	bl	8003be0 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e04d      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800780e:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <HAL_RCC_OscConfig+0x638>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f0      	beq.n	80077fc <HAL_RCC_OscConfig+0x580>
 800781a:	e045      	b.n	80078a8 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781c:	4b26      	ldr	r3, [pc, #152]	; (80078b8 <HAL_RCC_OscConfig+0x63c>)
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007822:	f7fc f9dd 	bl	8003be0 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800782a:	f7fc f9d9 	bl	8003be0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e036      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783c:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <HAL_RCC_OscConfig+0x638>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f0      	bne.n	800782a <HAL_RCC_OscConfig+0x5ae>
 8007848:	e02e      	b.n	80078a8 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e029      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007856:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <HAL_RCC_OscConfig+0x638>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	429a      	cmp	r2, r3
 8007868:	d11c      	bne.n	80078a4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007874:	429a      	cmp	r2, r3
 8007876:	d115      	bne.n	80078a4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800787e:	4013      	ands	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007884:	4293      	cmp	r3, r2
 8007886:	d10d      	bne.n	80078a4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007892:	429a      	cmp	r2, r3
 8007894:	d106      	bne.n	80078a4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d001      	beq.n	80078a8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800
 80078b8:	42470060 	.word	0x42470060

080078bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e18c      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x24>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b0f      	cmp	r3, #15
 80078de:	d904      	bls.n	80078ea <HAL_RCC_ClockConfig+0x2e>
 80078e0:	f240 2151 	movw	r1, #593	; 0x251
 80078e4:	4887      	ldr	r0, [pc, #540]	; (8007b04 <HAL_RCC_ClockConfig+0x248>)
 80078e6:	f7fb f822 	bl	800292e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d031      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d02e      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d02b      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d028      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b04      	cmp	r3, #4
 8007906:	d025      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b05      	cmp	r3, #5
 800790c:	d022      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b06      	cmp	r3, #6
 8007912:	d01f      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b07      	cmp	r3, #7
 8007918:	d01c      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b08      	cmp	r3, #8
 800791e:	d019      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b09      	cmp	r3, #9
 8007924:	d016      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b0a      	cmp	r3, #10
 800792a:	d013      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b0b      	cmp	r3, #11
 8007930:	d010      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b0c      	cmp	r3, #12
 8007936:	d00d      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b0d      	cmp	r3, #13
 800793c:	d00a      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b0e      	cmp	r3, #14
 8007942:	d007      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b0f      	cmp	r3, #15
 8007948:	d004      	beq.n	8007954 <HAL_RCC_ClockConfig+0x98>
 800794a:	f240 2152 	movw	r1, #594	; 0x252
 800794e:	486d      	ldr	r0, [pc, #436]	; (8007b04 <HAL_RCC_ClockConfig+0x248>)
 8007950:	f7fa ffed 	bl	800292e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007954:	4b6c      	ldr	r3, [pc, #432]	; (8007b08 <HAL_RCC_ClockConfig+0x24c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d90c      	bls.n	800797c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007962:	4b69      	ldr	r3, [pc, #420]	; (8007b08 <HAL_RCC_ClockConfig+0x24c>)
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800796a:	4b67      	ldr	r3, [pc, #412]	; (8007b08 <HAL_RCC_ClockConfig+0x24c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d001      	beq.n	800797c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e136      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d049      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007994:	4b5d      	ldr	r3, [pc, #372]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 800799a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800799e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079ac:	4b57      	ldr	r3, [pc, #348]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4a56      	ldr	r2, [pc, #344]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 80079b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d024      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b80      	cmp	r3, #128	; 0x80
 80079c6:	d020      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b90      	cmp	r3, #144	; 0x90
 80079ce:	d01c      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2ba0      	cmp	r3, #160	; 0xa0
 80079d6:	d018      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2bb0      	cmp	r3, #176	; 0xb0
 80079de:	d014      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2bc0      	cmp	r3, #192	; 0xc0
 80079e6:	d010      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2bd0      	cmp	r3, #208	; 0xd0
 80079ee:	d00c      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	2be0      	cmp	r3, #224	; 0xe0
 80079f6:	d008      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2bf0      	cmp	r3, #240	; 0xf0
 80079fe:	d004      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x14e>
 8007a00:	f240 2175 	movw	r1, #629	; 0x275
 8007a04:	483f      	ldr	r0, [pc, #252]	; (8007b04 <HAL_RCC_ClockConfig+0x248>)
 8007a06:	f7fa ff92 	bl	800292e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a0a:	4b40      	ldr	r3, [pc, #256]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	493d      	ldr	r1, [pc, #244]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d059      	beq.n	8007adc <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x196>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d00c      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x196>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d008      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x196>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d004      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x196>
 8007a48:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8007a4c:	482d      	ldr	r0, [pc, #180]	; (8007b04 <HAL_RCC_ClockConfig+0x248>)
 8007a4e:	f7fa ff6e 	bl	800292e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d107      	bne.n	8007a6a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d119      	bne.n	8007a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e0bf      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d003      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d107      	bne.n	8007a8a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7a:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0af      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a8a:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e0a7      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a9a:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f023 0203 	bic.w	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	4919      	ldr	r1, [pc, #100]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007aac:	f7fc f898 	bl	8003be0 <HAL_GetTick>
 8007ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab2:	e00a      	b.n	8007aca <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ab4:	f7fc f894 	bl	8003be0 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e08f      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aca:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <HAL_RCC_ClockConfig+0x250>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 020c 	and.w	r2, r3, #12
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d1eb      	bne.n	8007ab4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <HAL_RCC_ClockConfig+0x24c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d212      	bcs.n	8007b10 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <HAL_RCC_ClockConfig+0x24c>)
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <HAL_RCC_ClockConfig+0x24c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d007      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e072      	b.n	8007bea <HAL_RCC_ClockConfig+0x32e>
 8007b04:	0800bdf4 	.word	0x0800bdf4
 8007b08:	40023c00 	.word	0x40023c00
 8007b0c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d025      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d018      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x29a>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2c:	d013      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x29a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b36:	d00e      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x29a>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007b40:	d009      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x29a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007b4a:	d004      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x29a>
 8007b4c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007b50:	4828      	ldr	r0, [pc, #160]	; (8007bf4 <HAL_RCC_ClockConfig+0x338>)
 8007b52:	f7fa feec 	bl	800292e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b56:	4b28      	ldr	r3, [pc, #160]	; (8007bf8 <HAL_RCC_ClockConfig+0x33c>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	4925      	ldr	r1, [pc, #148]	; (8007bf8 <HAL_RCC_ClockConfig+0x33c>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d026      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d018      	beq.n	8007bae <HAL_RCC_ClockConfig+0x2f2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b84:	d013      	beq.n	8007bae <HAL_RCC_ClockConfig+0x2f2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b8e:	d00e      	beq.n	8007bae <HAL_RCC_ClockConfig+0x2f2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007b98:	d009      	beq.n	8007bae <HAL_RCC_ClockConfig+0x2f2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007ba2:	d004      	beq.n	8007bae <HAL_RCC_ClockConfig+0x2f2>
 8007ba4:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007ba8:	4812      	ldr	r0, [pc, #72]	; (8007bf4 <HAL_RCC_ClockConfig+0x338>)
 8007baa:	f7fa fec0 	bl	800292e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <HAL_RCC_ClockConfig+0x33c>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	490e      	ldr	r1, [pc, #56]	; (8007bf8 <HAL_RCC_ClockConfig+0x33c>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bc2:	f000 f821 	bl	8007c08 <HAL_RCC_GetSysClockFreq>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <HAL_RCC_ClockConfig+0x33c>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	091b      	lsrs	r3, r3, #4
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	490a      	ldr	r1, [pc, #40]	; (8007bfc <HAL_RCC_ClockConfig+0x340>)
 8007bd4:	5ccb      	ldrb	r3, [r1, r3]
 8007bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bda:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <HAL_RCC_ClockConfig+0x344>)
 8007bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_RCC_ClockConfig+0x348>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fb ffb8 	bl	8003b58 <HAL_InitTick>

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	0800bdf4 	.word	0x0800bdf4
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	0800bf44 	.word	0x0800bf44
 8007c00:	20000200 	.word	0x20000200
 8007c04:	20000204 	.word	0x20000204

08007c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c20:	4b67      	ldr	r3, [pc, #412]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f003 030c 	and.w	r3, r3, #12
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d00d      	beq.n	8007c48 <HAL_RCC_GetSysClockFreq+0x40>
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	f200 80bd 	bhi.w	8007dac <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_RCC_GetSysClockFreq+0x34>
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d003      	beq.n	8007c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c3a:	e0b7      	b.n	8007dac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c3c:	4b61      	ldr	r3, [pc, #388]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c3e:	60bb      	str	r3, [r7, #8]
       break;
 8007c40:	e0b7      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c42:	4b60      	ldr	r3, [pc, #384]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c44:	60bb      	str	r3, [r7, #8]
      break;
 8007c46:	e0b4      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c48:	4b5d      	ldr	r3, [pc, #372]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c52:	4b5b      	ldr	r3, [pc, #364]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d04d      	beq.n	8007cfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c5e:	4b58      	ldr	r3, [pc, #352]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	099b      	lsrs	r3, r3, #6
 8007c64:	461a      	mov	r2, r3
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c6e:	f04f 0100 	mov.w	r1, #0
 8007c72:	ea02 0800 	and.w	r8, r2, r0
 8007c76:	ea03 0901 	and.w	r9, r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	014b      	lsls	r3, r1, #5
 8007c88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c8c:	0142      	lsls	r2, r0, #5
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	ebb0 0008 	subs.w	r0, r0, r8
 8007c96:	eb61 0109 	sbc.w	r1, r1, r9
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	018b      	lsls	r3, r1, #6
 8007ca4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ca8:	0182      	lsls	r2, r0, #6
 8007caa:	1a12      	subs	r2, r2, r0
 8007cac:	eb63 0301 	sbc.w	r3, r3, r1
 8007cb0:	f04f 0000 	mov.w	r0, #0
 8007cb4:	f04f 0100 	mov.w	r1, #0
 8007cb8:	00d9      	lsls	r1, r3, #3
 8007cba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cbe:	00d0      	lsls	r0, r2, #3
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	eb12 0208 	adds.w	r2, r2, r8
 8007cc8:	eb43 0309 	adc.w	r3, r3, r9
 8007ccc:	f04f 0000 	mov.w	r0, #0
 8007cd0:	f04f 0100 	mov.w	r1, #0
 8007cd4:	0299      	lsls	r1, r3, #10
 8007cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007cda:	0290      	lsls	r0, r2, #10
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	f7f8 ff84 	bl	8000bf8 <__aeabi_uldivmod>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e04a      	b.n	8007d90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfa:	4b31      	ldr	r3, [pc, #196]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	461a      	mov	r2, r3
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d0a:	f04f 0100 	mov.w	r1, #0
 8007d0e:	ea02 0400 	and.w	r4, r2, r0
 8007d12:	ea03 0501 	and.w	r5, r3, r1
 8007d16:	4620      	mov	r0, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	014b      	lsls	r3, r1, #5
 8007d24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d28:	0142      	lsls	r2, r0, #5
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	1b00      	subs	r0, r0, r4
 8007d30:	eb61 0105 	sbc.w	r1, r1, r5
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	018b      	lsls	r3, r1, #6
 8007d3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d42:	0182      	lsls	r2, r0, #6
 8007d44:	1a12      	subs	r2, r2, r0
 8007d46:	eb63 0301 	sbc.w	r3, r3, r1
 8007d4a:	f04f 0000 	mov.w	r0, #0
 8007d4e:	f04f 0100 	mov.w	r1, #0
 8007d52:	00d9      	lsls	r1, r3, #3
 8007d54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d58:	00d0      	lsls	r0, r2, #3
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	1912      	adds	r2, r2, r4
 8007d60:	eb45 0303 	adc.w	r3, r5, r3
 8007d64:	f04f 0000 	mov.w	r0, #0
 8007d68:	f04f 0100 	mov.w	r1, #0
 8007d6c:	0299      	lsls	r1, r3, #10
 8007d6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d72:	0290      	lsls	r0, r2, #10
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	f7f8 ff38 	bl	8000bf8 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	60bb      	str	r3, [r7, #8]
      break;
 8007daa:	e002      	b.n	8007db2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007dae:	60bb      	str	r3, [r7, #8]
      break;
 8007db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007db2:	68bb      	ldr	r3, [r7, #8]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007dbe:	bf00      	nop
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	00f42400 	.word	0x00f42400

08007dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dcc:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dce:	681b      	ldr	r3, [r3, #0]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20000200 	.word	0x20000200

08007de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007de4:	f7ff fff0 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007de8:	4602      	mov	r2, r0
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	0a9b      	lsrs	r3, r3, #10
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	4903      	ldr	r1, [pc, #12]	; (8007e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007df6:	5ccb      	ldrb	r3, [r1, r3]
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40023800 	.word	0x40023800
 8007e04:	0800bf54 	.word	0x0800bf54

08007e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e0c:	f7ff ffdc 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007e10:	4602      	mov	r2, r0
 8007e12:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	0b5b      	lsrs	r3, r3, #13
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	4903      	ldr	r1, [pc, #12]	; (8007e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e1e:	5ccb      	ldrb	r3, [r1, r3]
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	0800bf54 	.word	0x0800bf54

08007e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e118      	b.n	8008074 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a8d      	ldr	r2, [pc, #564]	; (800807c <HAL_SPI_Init+0x24c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d01d      	beq.n	8007e88 <HAL_SPI_Init+0x58>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a8b      	ldr	r2, [pc, #556]	; (8008080 <HAL_SPI_Init+0x250>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d018      	beq.n	8007e88 <HAL_SPI_Init+0x58>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a8a      	ldr	r2, [pc, #552]	; (8008084 <HAL_SPI_Init+0x254>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <HAL_SPI_Init+0x58>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a88      	ldr	r2, [pc, #544]	; (8008088 <HAL_SPI_Init+0x258>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00e      	beq.n	8007e88 <HAL_SPI_Init+0x58>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a87      	ldr	r2, [pc, #540]	; (800808c <HAL_SPI_Init+0x25c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d009      	beq.n	8007e88 <HAL_SPI_Init+0x58>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a85      	ldr	r2, [pc, #532]	; (8008090 <HAL_SPI_Init+0x260>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <HAL_SPI_Init+0x58>
 8007e7e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007e82:	4884      	ldr	r0, [pc, #528]	; (8008094 <HAL_SPI_Init+0x264>)
 8007e84:	f7fa fd53 	bl	800292e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <HAL_SPI_Init+0x74>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e98:	d004      	beq.n	8007ea4 <HAL_SPI_Init+0x74>
 8007e9a:	f240 1143 	movw	r1, #323	; 0x143
 8007e9e:	487d      	ldr	r0, [pc, #500]	; (8008094 <HAL_SPI_Init+0x264>)
 8007ea0:	f7fa fd45 	bl	800292e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <HAL_SPI_Init+0x9a>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb4:	d009      	beq.n	8007eca <HAL_SPI_Init+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ebe:	d004      	beq.n	8007eca <HAL_SPI_Init+0x9a>
 8007ec0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007ec4:	4873      	ldr	r0, [pc, #460]	; (8008094 <HAL_SPI_Init+0x264>)
 8007ec6:	f7fa fd32 	bl	800292e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed2:	d008      	beq.n	8007ee6 <HAL_SPI_Init+0xb6>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <HAL_SPI_Init+0xb6>
 8007edc:	f240 1145 	movw	r1, #325	; 0x145
 8007ee0:	486c      	ldr	r0, [pc, #432]	; (8008094 <HAL_SPI_Init+0x264>)
 8007ee2:	f7fa fd24 	bl	800292e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eee:	d00d      	beq.n	8007f0c <HAL_SPI_Init+0xdc>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <HAL_SPI_Init+0xdc>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f00:	d004      	beq.n	8007f0c <HAL_SPI_Init+0xdc>
 8007f02:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007f06:	4863      	ldr	r0, [pc, #396]	; (8008094 <HAL_SPI_Init+0x264>)
 8007f08:	f7fa fd11 	bl	800292e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d020      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d01c      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d018      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	2b18      	cmp	r3, #24
 8007f2a:	d014      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	d010      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	2b28      	cmp	r3, #40	; 0x28
 8007f3a:	d00c      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	2b30      	cmp	r3, #48	; 0x30
 8007f42:	d008      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	2b38      	cmp	r3, #56	; 0x38
 8007f4a:	d004      	beq.n	8007f56 <HAL_SPI_Init+0x126>
 8007f4c:	f240 1147 	movw	r1, #327	; 0x147
 8007f50:	4850      	ldr	r0, [pc, #320]	; (8008094 <HAL_SPI_Init+0x264>)
 8007f52:	f7fa fcec 	bl	800292e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_SPI_Init+0x140>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	2b80      	cmp	r3, #128	; 0x80
 8007f64:	d004      	beq.n	8007f70 <HAL_SPI_Init+0x140>
 8007f66:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f6a:	484a      	ldr	r0, [pc, #296]	; (8008094 <HAL_SPI_Init+0x264>)
 8007f6c:	f7fa fcdf 	bl	800292e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d008      	beq.n	8007f8a <HAL_SPI_Init+0x15a>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d004      	beq.n	8007f8a <HAL_SPI_Init+0x15a>
 8007f80:	f240 1149 	movw	r1, #329	; 0x149
 8007f84:	4843      	ldr	r0, [pc, #268]	; (8008094 <HAL_SPI_Init+0x264>)
 8007f86:	f7fa fcd2 	bl	800292e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d119      	bne.n	8007fc6 <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <HAL_SPI_Init+0x17c>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d004      	beq.n	8007fac <HAL_SPI_Init+0x17c>
 8007fa2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007fa6:	483b      	ldr	r0, [pc, #236]	; (8008094 <HAL_SPI_Init+0x264>)
 8007fa8:	f7fa fcc1 	bl	800292e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d008      	beq.n	8007fc6 <HAL_SPI_Init+0x196>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d004      	beq.n	8007fc6 <HAL_SPI_Init+0x196>
 8007fbc:	f240 114d 	movw	r1, #333	; 0x14d
 8007fc0:	4834      	ldr	r0, [pc, #208]	; (8008094 <HAL_SPI_Init+0x264>)
 8007fc2:	f7fa fcb4 	bl	800292e <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7fb f883 	bl	80030ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ffc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	431a      	orrs	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	ea42 0103 	orr.w	r1, r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	f003 0104 	and.w	r1, r3, #4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69da      	ldr	r2, [r3, #28]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008062:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40013000 	.word	0x40013000
 8008080:	40003800 	.word	0x40003800
 8008084:	40003c00 	.word	0x40003c00
 8008088:	40013400 	.word	0x40013400
 800808c:	40015000 	.word	0x40015000
 8008090:	40015400 	.word	0x40015400
 8008094:	0800be2c 	.word	0x0800be2c

08008098 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af02      	add	r7, sp, #8
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b4:	d112      	bne.n	80080dc <HAL_SPI_Receive+0x44>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10e      	bne.n	80080dc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2204      	movs	r2, #4
 80080c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80080c6:	88fa      	ldrh	r2, [r7, #6]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 f8ea 	bl	80082ac <HAL_SPI_TransmitReceive>
 80080d8:	4603      	mov	r3, r0
 80080da:	e0e2      	b.n	80082a2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <HAL_SPI_Receive+0x52>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e0db      	b.n	80082a2 <HAL_SPI_Receive+0x20a>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080f2:	f7fb fd75 	bl	8003be0 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d002      	beq.n	800810a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008104:	2302      	movs	r3, #2
 8008106:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008108:	e0c2      	b.n	8008290 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <HAL_SPI_Receive+0x7e>
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	75fb      	strb	r3, [r7, #23]
    goto error;
 800811a:	e0b9      	b.n	8008290 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2204      	movs	r2, #4
 8008120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008162:	d107      	bne.n	8008174 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008172:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d007      	beq.n	8008192 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008190:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d162      	bne.n	8008260 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800819a:	e02e      	b.n	80081fa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d115      	bne.n	80081d6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f103 020c 	add.w	r2, r3, #12
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081d4:	e011      	b.n	80081fa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081d6:	f7fb fd03 	bl	8003be0 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d803      	bhi.n	80081ee <HAL_SPI_Receive+0x156>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ec:	d102      	bne.n	80081f4 <HAL_SPI_Receive+0x15c>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081f8:	e04a      	b.n	8008290 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1cb      	bne.n	800819c <HAL_SPI_Receive+0x104>
 8008204:	e031      	b.n	800826a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b01      	cmp	r3, #1
 8008212:	d113      	bne.n	800823c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	b292      	uxth	r2, r2
 8008220:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	1c9a      	adds	r2, r3, #2
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	87da      	strh	r2, [r3, #62]	; 0x3e
 800823a:	e011      	b.n	8008260 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800823c:	f7fb fcd0 	bl	8003be0 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d803      	bhi.n	8008254 <HAL_SPI_Receive+0x1bc>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008252:	d102      	bne.n	800825a <HAL_SPI_Receive+0x1c2>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800825e:	e017      	b.n	8008290 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1cd      	bne.n	8008206 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fa34 	bl	80086dc <SPI_EndRxTransaction>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
 800828c:	e000      	b.n	8008290 <HAL_SPI_Receive+0x1f8>
  }

error :
 800828e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08c      	sub	sp, #48	; 0x30
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082ba:	2301      	movs	r3, #1
 80082bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <HAL_SPI_TransmitReceive+0x2a>
 80082cc:	f240 415a 	movw	r1, #1114	; 0x45a
 80082d0:	4884      	ldr	r0, [pc, #528]	; (80084e4 <HAL_SPI_TransmitReceive+0x238>)
 80082d2:	f7fa fb2c 	bl	800292e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d101      	bne.n	80082e4 <HAL_SPI_TransmitReceive+0x38>
 80082e0:	2302      	movs	r3, #2
 80082e2:	e18d      	b.n	8008600 <HAL_SPI_TransmitReceive+0x354>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ec:	f7fb fc78 	bl	8003be0 <HAL_GetTick>
 80082f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008302:	887b      	ldrh	r3, [r7, #2]
 8008304:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800830a:	2b01      	cmp	r3, #1
 800830c:	d00f      	beq.n	800832e <HAL_SPI_TransmitReceive+0x82>
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008314:	d107      	bne.n	8008326 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d103      	bne.n	8008326 <HAL_SPI_TransmitReceive+0x7a>
 800831e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008322:	2b04      	cmp	r3, #4
 8008324:	d003      	beq.n	800832e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008326:	2302      	movs	r3, #2
 8008328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800832c:	e15e      	b.n	80085ec <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_SPI_TransmitReceive+0x94>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_SPI_TransmitReceive+0x94>
 800833a:	887b      	ldrh	r3, [r7, #2]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008346:	e151      	b.n	80085ec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b04      	cmp	r3, #4
 8008352:	d003      	beq.n	800835c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2205      	movs	r2, #5
 8008358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	887a      	ldrh	r2, [r7, #2]
 800836c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	887a      	ldrh	r2, [r7, #2]
 8008372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	887a      	ldrh	r2, [r7, #2]
 800837e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839c:	2b40      	cmp	r3, #64	; 0x40
 800839e:	d007      	beq.n	80083b0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b8:	d178      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_SPI_TransmitReceive+0x11c>
 80083c2:	8b7b      	ldrh	r3, [r7, #26]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d166      	bne.n	8008496 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	1c9a      	adds	r2, r3, #2
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ec:	e053      	b.n	8008496 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d11b      	bne.n	8008434 <HAL_SPI_TransmitReceive+0x188>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d016      	beq.n	8008434 <HAL_SPI_TransmitReceive+0x188>
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d113      	bne.n	8008434 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	881a      	ldrh	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d119      	bne.n	8008476 <HAL_SPI_TransmitReceive+0x1ca>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008446:	b29b      	uxth	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d014      	beq.n	8008476 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	b292      	uxth	r2, r2
 8008458:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	1c9a      	adds	r2, r3, #2
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008468:	b29b      	uxth	r3, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008472:	2301      	movs	r3, #1
 8008474:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008476:	f7fb fbb3 	bl	8003be0 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008482:	429a      	cmp	r2, r3
 8008484:	d807      	bhi.n	8008496 <HAL_SPI_TransmitReceive+0x1ea>
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800848c:	d003      	beq.n	8008496 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008494:	e0aa      	b.n	80085ec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800849a:	b29b      	uxth	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1a6      	bne.n	80083ee <HAL_SPI_TransmitReceive+0x142>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1a1      	bne.n	80083ee <HAL_SPI_TransmitReceive+0x142>
 80084aa:	e07f      	b.n	80085ac <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_SPI_TransmitReceive+0x20e>
 80084b4:	8b7b      	ldrh	r3, [r7, #26]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d16e      	bne.n	8008598 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	330c      	adds	r3, #12
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e0:	e05a      	b.n	8008598 <HAL_SPI_TransmitReceive+0x2ec>
 80084e2:	bf00      	nop
 80084e4:	0800be2c 	.word	0x0800be2c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d11c      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x284>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d017      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x284>
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	2b01      	cmp	r3, #1
 8008504:	d114      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	7812      	ldrb	r2, [r2, #0]
 8008512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b01      	cmp	r3, #1
 800853c:	d119      	bne.n	8008572 <HAL_SPI_TransmitReceive+0x2c6>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d014      	beq.n	8008572 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	b2d2      	uxtb	r2, r2
 8008554:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800856e:	2301      	movs	r3, #1
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008572:	f7fb fb35 	bl	8003be0 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800857e:	429a      	cmp	r2, r3
 8008580:	d803      	bhi.n	800858a <HAL_SPI_TransmitReceive+0x2de>
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008588:	d102      	bne.n	8008590 <HAL_SPI_TransmitReceive+0x2e4>
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	2b00      	cmp	r3, #0
 800858e:	d103      	bne.n	8008598 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008596:	e029      	b.n	80085ec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1a2      	bne.n	80084e8 <HAL_SPI_TransmitReceive+0x23c>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d19d      	bne.n	80084e8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f8f9 	bl	80087a8 <SPI_EndRxTxTransaction>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2220      	movs	r2, #32
 80085c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80085c8:	e010      	b.n	80085ec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10b      	bne.n	80085ea <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	e000      	b.n	80085ec <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80085ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008600:	4618      	mov	r0, r3
 8008602:	3730      	adds	r7, #48	; 0x30
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	4613      	mov	r3, r2
 8008616:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008618:	e04c      	b.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008620:	d048      	beq.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008622:	f7fb fadd 	bl	8003be0 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d902      	bls.n	8008638 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d13d      	bne.n	80086b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008646:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008650:	d111      	bne.n	8008676 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800865a:	d004      	beq.n	8008666 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008664:	d107      	bne.n	8008676 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800867e:	d10f      	bne.n	80086a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800869e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e00f      	b.n	80086d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4013      	ands	r3, r2
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	bf0c      	ite	eq
 80086c4:	2301      	moveq	r3, #1
 80086c6:	2300      	movne	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d1a3      	bne.n	800861a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f0:	d111      	bne.n	8008716 <SPI_EndRxTransaction+0x3a>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fa:	d004      	beq.n	8008706 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008704:	d107      	bne.n	8008716 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008714:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800871e:	d12a      	bne.n	8008776 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008728:	d012      	beq.n	8008750 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	2180      	movs	r1, #128	; 0x80
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff ff67 	bl	8008608 <SPI_WaitFlagStateUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02d      	beq.n	800879c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008744:	f043 0220 	orr.w	r2, r3, #32
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e026      	b.n	800879e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	2101      	movs	r1, #1
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff ff54 	bl	8008608 <SPI_WaitFlagStateUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01a      	beq.n	800879c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e013      	b.n	800879e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	2101      	movs	r1, #1
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff ff41 	bl	8008608 <SPI_WaitFlagStateUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008790:	f043 0220 	orr.w	r2, r3, #32
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e000      	b.n	800879e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <SPI_EndRxTxTransaction+0x7c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1b      	ldr	r2, [pc, #108]	; (8008828 <SPI_EndRxTxTransaction+0x80>)
 80087ba:	fba2 2303 	umull	r2, r3, r2, r3
 80087be:	0d5b      	lsrs	r3, r3, #21
 80087c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087c4:	fb02 f303 	mul.w	r3, r2, r3
 80087c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087d2:	d112      	bne.n	80087fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	; 0x80
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff ff12 	bl	8008608 <SPI_WaitFlagStateUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	f043 0220 	orr.w	r2, r3, #32
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e00f      	b.n	800881a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	3b01      	subs	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008810:	2b80      	cmp	r3, #128	; 0x80
 8008812:	d0f2      	beq.n	80087fa <SPI_EndRxTxTransaction+0x52>
 8008814:	e000      	b.n	8008818 <SPI_EndRxTxTransaction+0x70>
        break;
 8008816:	bf00      	nop
  }

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000200 	.word	0x20000200
 8008828:	165e9f81 	.word	0x165e9f81

0800882c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e0a1      	b.n	8008982 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a52      	ldr	r2, [pc, #328]	; (800898c <HAL_TIM_Base_Init+0x160>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d045      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008850:	d040      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a4e      	ldr	r2, [pc, #312]	; (8008990 <HAL_TIM_Base_Init+0x164>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d03b      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a4c      	ldr	r2, [pc, #304]	; (8008994 <HAL_TIM_Base_Init+0x168>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d036      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a4b      	ldr	r2, [pc, #300]	; (8008998 <HAL_TIM_Base_Init+0x16c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d031      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a49      	ldr	r2, [pc, #292]	; (800899c <HAL_TIM_Base_Init+0x170>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d02c      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a48      	ldr	r2, [pc, #288]	; (80089a0 <HAL_TIM_Base_Init+0x174>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d027      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a46      	ldr	r2, [pc, #280]	; (80089a4 <HAL_TIM_Base_Init+0x178>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d022      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a45      	ldr	r2, [pc, #276]	; (80089a8 <HAL_TIM_Base_Init+0x17c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d01d      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a43      	ldr	r2, [pc, #268]	; (80089ac <HAL_TIM_Base_Init+0x180>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d018      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a42      	ldr	r2, [pc, #264]	; (80089b0 <HAL_TIM_Base_Init+0x184>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d013      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a40      	ldr	r2, [pc, #256]	; (80089b4 <HAL_TIM_Base_Init+0x188>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00e      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a3f      	ldr	r2, [pc, #252]	; (80089b8 <HAL_TIM_Base_Init+0x18c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d009      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a3d      	ldr	r2, [pc, #244]	; (80089bc <HAL_TIM_Base_Init+0x190>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d004      	beq.n	80088d4 <HAL_TIM_Base_Init+0xa8>
 80088ca:	f44f 7189 	mov.w	r1, #274	; 0x112
 80088ce:	483c      	ldr	r0, [pc, #240]	; (80089c0 <HAL_TIM_Base_Init+0x194>)
 80088d0:	f7fa f82d 	bl	800292e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d014      	beq.n	8008906 <HAL_TIM_Base_Init+0xda>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d010      	beq.n	8008906 <HAL_TIM_Base_Init+0xda>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	2b20      	cmp	r3, #32
 80088ea:	d00c      	beq.n	8008906 <HAL_TIM_Base_Init+0xda>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b40      	cmp	r3, #64	; 0x40
 80088f2:	d008      	beq.n	8008906 <HAL_TIM_Base_Init+0xda>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b60      	cmp	r3, #96	; 0x60
 80088fa:	d004      	beq.n	8008906 <HAL_TIM_Base_Init+0xda>
 80088fc:	f240 1113 	movw	r1, #275	; 0x113
 8008900:	482f      	ldr	r0, [pc, #188]	; (80089c0 <HAL_TIM_Base_Init+0x194>)
 8008902:	f7fa f814 	bl	800292e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <HAL_TIM_Base_Init+0x100>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008916:	d009      	beq.n	800892c <HAL_TIM_Base_Init+0x100>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008920:	d004      	beq.n	800892c <HAL_TIM_Base_Init+0x100>
 8008922:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008926:	4826      	ldr	r0, [pc, #152]	; (80089c0 <HAL_TIM_Base_Init+0x194>)
 8008928:	f7fa f801 	bl	800292e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d008      	beq.n	8008946 <HAL_TIM_Base_Init+0x11a>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	2b80      	cmp	r3, #128	; 0x80
 800893a:	d004      	beq.n	8008946 <HAL_TIM_Base_Init+0x11a>
 800893c:	f240 1115 	movw	r1, #277	; 0x115
 8008940:	481f      	ldr	r0, [pc, #124]	; (80089c0 <HAL_TIM_Base_Init+0x194>)
 8008942:	f7f9 fff4 	bl	800292e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d106      	bne.n	8008960 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fa fed0 	bl	8003700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3304      	adds	r3, #4
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f001 fa62 	bl	8009e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40000400 	.word	0x40000400
 8008994:	40000800 	.word	0x40000800
 8008998:	40000c00 	.word	0x40000c00
 800899c:	40001000 	.word	0x40001000
 80089a0:	40001400 	.word	0x40001400
 80089a4:	40010400 	.word	0x40010400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400
 80089b0:	40014800 	.word	0x40014800
 80089b4:	40001800 	.word	0x40001800
 80089b8:	40001c00 	.word	0x40001c00
 80089bc:	40002000 	.word	0x40002000
 80089c0:	0800be64 	.word	0x0800be64

080089c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a33      	ldr	r2, [pc, #204]	; (8008aa0 <HAL_TIM_Base_Start+0xdc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d045      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089de:	d040      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a2f      	ldr	r2, [pc, #188]	; (8008aa4 <HAL_TIM_Base_Start+0xe0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d03b      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a2e      	ldr	r2, [pc, #184]	; (8008aa8 <HAL_TIM_Base_Start+0xe4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d036      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a2c      	ldr	r2, [pc, #176]	; (8008aac <HAL_TIM_Base_Start+0xe8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d031      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a2b      	ldr	r2, [pc, #172]	; (8008ab0 <HAL_TIM_Base_Start+0xec>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d02c      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a29      	ldr	r2, [pc, #164]	; (8008ab4 <HAL_TIM_Base_Start+0xf0>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d027      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a28      	ldr	r2, [pc, #160]	; (8008ab8 <HAL_TIM_Base_Start+0xf4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d022      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a26      	ldr	r2, [pc, #152]	; (8008abc <HAL_TIM_Base_Start+0xf8>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d01d      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a25      	ldr	r2, [pc, #148]	; (8008ac0 <HAL_TIM_Base_Start+0xfc>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d018      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a23      	ldr	r2, [pc, #140]	; (8008ac4 <HAL_TIM_Base_Start+0x100>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d013      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <HAL_TIM_Base_Start+0x104>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00e      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a20      	ldr	r2, [pc, #128]	; (8008acc <HAL_TIM_Base_Start+0x108>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d009      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <HAL_TIM_Base_Start+0x10c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d004      	beq.n	8008a62 <HAL_TIM_Base_Start+0x9e>
 8008a58:	f240 1185 	movw	r1, #389	; 0x185
 8008a5c:	481d      	ldr	r0, [pc, #116]	; (8008ad4 <HAL_TIM_Base_Start+0x110>)
 8008a5e:	f7f9 ff66 	bl	800292e <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	d007      	beq.n	8008a8c <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0201 	orr.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40010000 	.word	0x40010000
 8008aa4:	40000400 	.word	0x40000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	40000c00 	.word	0x40000c00
 8008ab0:	40001000 	.word	0x40001000
 8008ab4:	40001400 	.word	0x40001400
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400
 8008ac4:	40014800 	.word	0x40014800
 8008ac8:	40001800 	.word	0x40001800
 8008acc:	40001c00 	.word	0x40001c00
 8008ad0:	40002000 	.word	0x40002000
 8008ad4:	0800be64 	.word	0x0800be64

08008ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e0a1      	b.n	8008c2e <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a52      	ldr	r2, [pc, #328]	; (8008c38 <HAL_TIM_PWM_Init+0x160>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d045      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afc:	d040      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a4e      	ldr	r2, [pc, #312]	; (8008c3c <HAL_TIM_PWM_Init+0x164>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d03b      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a4c      	ldr	r2, [pc, #304]	; (8008c40 <HAL_TIM_PWM_Init+0x168>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d036      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a4b      	ldr	r2, [pc, #300]	; (8008c44 <HAL_TIM_PWM_Init+0x16c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d031      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a49      	ldr	r2, [pc, #292]	; (8008c48 <HAL_TIM_PWM_Init+0x170>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d02c      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a48      	ldr	r2, [pc, #288]	; (8008c4c <HAL_TIM_PWM_Init+0x174>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d027      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a46      	ldr	r2, [pc, #280]	; (8008c50 <HAL_TIM_PWM_Init+0x178>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d022      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a45      	ldr	r2, [pc, #276]	; (8008c54 <HAL_TIM_PWM_Init+0x17c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d01d      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a43      	ldr	r2, [pc, #268]	; (8008c58 <HAL_TIM_PWM_Init+0x180>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d018      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a42      	ldr	r2, [pc, #264]	; (8008c5c <HAL_TIM_PWM_Init+0x184>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d013      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a40      	ldr	r2, [pc, #256]	; (8008c60 <HAL_TIM_PWM_Init+0x188>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00e      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a3f      	ldr	r2, [pc, #252]	; (8008c64 <HAL_TIM_PWM_Init+0x18c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d009      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a3d      	ldr	r2, [pc, #244]	; (8008c68 <HAL_TIM_PWM_Init+0x190>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d004      	beq.n	8008b80 <HAL_TIM_PWM_Init+0xa8>
 8008b76:	f240 419b 	movw	r1, #1179	; 0x49b
 8008b7a:	483c      	ldr	r0, [pc, #240]	; (8008c6c <HAL_TIM_PWM_Init+0x194>)
 8008b7c:	f7f9 fed7 	bl	800292e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d014      	beq.n	8008bb2 <HAL_TIM_PWM_Init+0xda>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	d010      	beq.n	8008bb2 <HAL_TIM_PWM_Init+0xda>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	d00c      	beq.n	8008bb2 <HAL_TIM_PWM_Init+0xda>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d008      	beq.n	8008bb2 <HAL_TIM_PWM_Init+0xda>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	2b60      	cmp	r3, #96	; 0x60
 8008ba6:	d004      	beq.n	8008bb2 <HAL_TIM_PWM_Init+0xda>
 8008ba8:	f240 419c 	movw	r1, #1180	; 0x49c
 8008bac:	482f      	ldr	r0, [pc, #188]	; (8008c6c <HAL_TIM_PWM_Init+0x194>)
 8008bae:	f7f9 febe 	bl	800292e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00e      	beq.n	8008bd8 <HAL_TIM_PWM_Init+0x100>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc2:	d009      	beq.n	8008bd8 <HAL_TIM_PWM_Init+0x100>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bcc:	d004      	beq.n	8008bd8 <HAL_TIM_PWM_Init+0x100>
 8008bce:	f240 419d 	movw	r1, #1181	; 0x49d
 8008bd2:	4826      	ldr	r0, [pc, #152]	; (8008c6c <HAL_TIM_PWM_Init+0x194>)
 8008bd4:	f7f9 feab 	bl	800292e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HAL_TIM_PWM_Init+0x11a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b80      	cmp	r3, #128	; 0x80
 8008be6:	d004      	beq.n	8008bf2 <HAL_TIM_PWM_Init+0x11a>
 8008be8:	f240 419e 	movw	r1, #1182	; 0x49e
 8008bec:	481f      	ldr	r0, [pc, #124]	; (8008c6c <HAL_TIM_PWM_Init+0x194>)
 8008bee:	f7f9 fe9e 	bl	800292e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f832 	bl	8008c70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f001 f90c 	bl	8009e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40000400 	.word	0x40000400
 8008c40:	40000800 	.word	0x40000800
 8008c44:	40000c00 	.word	0x40000c00
 8008c48:	40001000 	.word	0x40001000
 8008c4c:	40001400 	.word	0x40001400
 8008c50:	40010400 	.word	0x40010400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800
 8008c60:	40001800 	.word	0x40001800
 8008c64:	40001c00 	.word	0x40001c00
 8008c68:	40002000 	.word	0x40002000
 8008c6c:	0800be64 	.word	0x0800be64

08008c70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a6d      	ldr	r2, [pc, #436]	; (8008e48 <HAL_TIM_PWM_Start+0x1c4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d10f      	bne.n	8008cb8 <HAL_TIM_PWM_Start+0x34>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 809f 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	f000 809b 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	f000 8097 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2b0c      	cmp	r3, #12
 8008cb4:	f000 8093 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc0:	d10e      	bne.n	8008ce0 <HAL_TIM_PWM_Start+0x5c>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 808a 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	f000 8086 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	f000 8082 	beq.w	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d07e      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a59      	ldr	r2, [pc, #356]	; (8008e4c <HAL_TIM_PWM_Start+0x1c8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d10b      	bne.n	8008d02 <HAL_TIM_PWM_Start+0x7e>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d076      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d073      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d070      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b0c      	cmp	r3, #12
 8008d00:	d06d      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a52      	ldr	r2, [pc, #328]	; (8008e50 <HAL_TIM_PWM_Start+0x1cc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d10b      	bne.n	8008d24 <HAL_TIM_PWM_Start+0xa0>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d065      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d062      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d05f      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b0c      	cmp	r3, #12
 8008d22:	d05c      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a4a      	ldr	r2, [pc, #296]	; (8008e54 <HAL_TIM_PWM_Start+0x1d0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d10b      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xc2>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d054      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d051      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d04e      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b0c      	cmp	r3, #12
 8008d44:	d04b      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a43      	ldr	r2, [pc, #268]	; (8008e58 <HAL_TIM_PWM_Start+0x1d4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d10b      	bne.n	8008d68 <HAL_TIM_PWM_Start+0xe4>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d043      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d040      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b08      	cmp	r3, #8
 8008d60:	d03d      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b0c      	cmp	r3, #12
 8008d66:	d03a      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a3b      	ldr	r2, [pc, #236]	; (8008e5c <HAL_TIM_PWM_Start+0x1d8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d105      	bne.n	8008d7e <HAL_TIM_PWM_Start+0xfa>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d032      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d02f      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a37      	ldr	r2, [pc, #220]	; (8008e60 <HAL_TIM_PWM_Start+0x1dc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d102      	bne.n	8008d8e <HAL_TIM_PWM_Start+0x10a>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d027      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a34      	ldr	r2, [pc, #208]	; (8008e64 <HAL_TIM_PWM_Start+0x1e0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d102      	bne.n	8008d9e <HAL_TIM_PWM_Start+0x11a>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01f      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a31      	ldr	r2, [pc, #196]	; (8008e68 <HAL_TIM_PWM_Start+0x1e4>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d105      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x130>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d017      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d014      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a2c      	ldr	r2, [pc, #176]	; (8008e6c <HAL_TIM_PWM_Start+0x1e8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d102      	bne.n	8008dc4 <HAL_TIM_PWM_Start+0x140>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00c      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a29      	ldr	r2, [pc, #164]	; (8008e70 <HAL_TIM_PWM_Start+0x1ec>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d102      	bne.n	8008dd4 <HAL_TIM_PWM_Start+0x150>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d004      	beq.n	8008dde <HAL_TIM_PWM_Start+0x15a>
 8008dd4:	f240 5113 	movw	r1, #1299	; 0x513
 8008dd8:	4826      	ldr	r0, [pc, #152]	; (8008e74 <HAL_TIM_PWM_Start+0x1f0>)
 8008dda:	f7f9 fda8 	bl	800292e <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2201      	movs	r2, #1
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 fcc6 	bl	800a778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a15      	ldr	r2, [pc, #84]	; (8008e48 <HAL_TIM_PWM_Start+0x1c4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d004      	beq.n	8008e00 <HAL_TIM_PWM_Start+0x17c>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <HAL_TIM_PWM_Start+0x1d4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d101      	bne.n	8008e04 <HAL_TIM_PWM_Start+0x180>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <HAL_TIM_PWM_Start+0x182>
 8008e04:	2300      	movs	r3, #0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d007      	beq.n	8008e1a <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b06      	cmp	r3, #6
 8008e2a:	d007      	beq.n	8008e3c <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0201 	orr.w	r2, r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40000800 	.word	0x40000800
 8008e54:	40000c00 	.word	0x40000c00
 8008e58:	40010400 	.word	0x40010400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800
 8008e68:	40001800 	.word	0x40001800
 8008e6c:	40001c00 	.word	0x40001c00
 8008e70:	40002000 	.word	0x40002000
 8008e74:	0800be64 	.word	0x0800be64

08008e78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e0a1      	b.n	8008fce <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a52      	ldr	r2, [pc, #328]	; (8008fd8 <HAL_TIM_IC_Init+0x160>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d045      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9c:	d040      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a4e      	ldr	r2, [pc, #312]	; (8008fdc <HAL_TIM_IC_Init+0x164>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d03b      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a4c      	ldr	r2, [pc, #304]	; (8008fe0 <HAL_TIM_IC_Init+0x168>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d036      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a4b      	ldr	r2, [pc, #300]	; (8008fe4 <HAL_TIM_IC_Init+0x16c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d031      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a49      	ldr	r2, [pc, #292]	; (8008fe8 <HAL_TIM_IC_Init+0x170>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d02c      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a48      	ldr	r2, [pc, #288]	; (8008fec <HAL_TIM_IC_Init+0x174>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d027      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a46      	ldr	r2, [pc, #280]	; (8008ff0 <HAL_TIM_IC_Init+0x178>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d022      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a45      	ldr	r2, [pc, #276]	; (8008ff4 <HAL_TIM_IC_Init+0x17c>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d01d      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a43      	ldr	r2, [pc, #268]	; (8008ff8 <HAL_TIM_IC_Init+0x180>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d018      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a42      	ldr	r2, [pc, #264]	; (8008ffc <HAL_TIM_IC_Init+0x184>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d013      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a40      	ldr	r2, [pc, #256]	; (8009000 <HAL_TIM_IC_Init+0x188>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d00e      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a3f      	ldr	r2, [pc, #252]	; (8009004 <HAL_TIM_IC_Init+0x18c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d009      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a3d      	ldr	r2, [pc, #244]	; (8009008 <HAL_TIM_IC_Init+0x190>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d004      	beq.n	8008f20 <HAL_TIM_IC_Init+0xa8>
 8008f16:	f240 61d9 	movw	r1, #1753	; 0x6d9
 8008f1a:	483c      	ldr	r0, [pc, #240]	; (800900c <HAL_TIM_IC_Init+0x194>)
 8008f1c:	f7f9 fd07 	bl	800292e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d014      	beq.n	8008f52 <HAL_TIM_IC_Init+0xda>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d010      	beq.n	8008f52 <HAL_TIM_IC_Init+0xda>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d00c      	beq.n	8008f52 <HAL_TIM_IC_Init+0xda>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d008      	beq.n	8008f52 <HAL_TIM_IC_Init+0xda>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2b60      	cmp	r3, #96	; 0x60
 8008f46:	d004      	beq.n	8008f52 <HAL_TIM_IC_Init+0xda>
 8008f48:	f240 61da 	movw	r1, #1754	; 0x6da
 8008f4c:	482f      	ldr	r0, [pc, #188]	; (800900c <HAL_TIM_IC_Init+0x194>)
 8008f4e:	f7f9 fcee 	bl	800292e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00e      	beq.n	8008f78 <HAL_TIM_IC_Init+0x100>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f62:	d009      	beq.n	8008f78 <HAL_TIM_IC_Init+0x100>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	d004      	beq.n	8008f78 <HAL_TIM_IC_Init+0x100>
 8008f6e:	f240 61db 	movw	r1, #1755	; 0x6db
 8008f72:	4826      	ldr	r0, [pc, #152]	; (800900c <HAL_TIM_IC_Init+0x194>)
 8008f74:	f7f9 fcdb 	bl	800292e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d008      	beq.n	8008f92 <HAL_TIM_IC_Init+0x11a>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d004      	beq.n	8008f92 <HAL_TIM_IC_Init+0x11a>
 8008f88:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8008f8c:	481f      	ldr	r0, [pc, #124]	; (800900c <HAL_TIM_IC_Init+0x194>)
 8008f8e:	f7f9 fcce 	bl	800292e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f832 	bl	8009010 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f000 ff3c 	bl	8009e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40000400 	.word	0x40000400
 8008fe0:	40000800 	.word	0x40000800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40001000 	.word	0x40001000
 8008fec:	40001400 	.word	0x40001400
 8008ff0:	40010400 	.word	0x40010400
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400
 8008ffc:	40014800 	.word	0x40014800
 8009000:	40001800 	.word	0x40001800
 8009004:	40001c00 	.word	0x40001c00
 8009008:	40002000 	.word	0x40002000
 800900c:	0800be64 	.word	0x0800be64

08009010 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a7c      	ldr	r2, [pc, #496]	; (8009228 <HAL_TIM_IC_ConfigChannel+0x204>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d03b      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009042:	d036      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a78      	ldr	r2, [pc, #480]	; (800922c <HAL_TIM_IC_ConfigChannel+0x208>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d031      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a77      	ldr	r2, [pc, #476]	; (8009230 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d02c      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a75      	ldr	r2, [pc, #468]	; (8009234 <HAL_TIM_IC_ConfigChannel+0x210>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d027      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a74      	ldr	r2, [pc, #464]	; (8009238 <HAL_TIM_IC_ConfigChannel+0x214>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d022      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a72      	ldr	r2, [pc, #456]	; (800923c <HAL_TIM_IC_ConfigChannel+0x218>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d01d      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a71      	ldr	r2, [pc, #452]	; (8009240 <HAL_TIM_IC_ConfigChannel+0x21c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d018      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a6f      	ldr	r2, [pc, #444]	; (8009244 <HAL_TIM_IC_ConfigChannel+0x220>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d013      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a6e      	ldr	r2, [pc, #440]	; (8009248 <HAL_TIM_IC_ConfigChannel+0x224>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d00e      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a6c      	ldr	r2, [pc, #432]	; (800924c <HAL_TIM_IC_ConfigChannel+0x228>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d009      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a6b      	ldr	r2, [pc, #428]	; (8009250 <HAL_TIM_IC_ConfigChannel+0x22c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d004      	beq.n	80090b2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80090a8:	f640 5189 	movw	r1, #3465	; 0xd89
 80090ac:	4869      	ldr	r0, [pc, #420]	; (8009254 <HAL_TIM_IC_ConfigChannel+0x230>)
 80090ae:	f7f9 fc3e 	bl	800292e <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <HAL_TIM_IC_ConfigChannel+0xb0>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d008      	beq.n	80090d4 <HAL_TIM_IC_ConfigChannel+0xb0>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b0a      	cmp	r3, #10
 80090c8:	d004      	beq.n	80090d4 <HAL_TIM_IC_ConfigChannel+0xb0>
 80090ca:	f640 518a 	movw	r1, #3466	; 0xd8a
 80090ce:	4861      	ldr	r0, [pc, #388]	; (8009254 <HAL_TIM_IC_ConfigChannel+0x230>)
 80090d0:	f7f9 fc2d 	bl	800292e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d00c      	beq.n	80090f6 <HAL_TIM_IC_ConfigChannel+0xd2>
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d008      	beq.n	80090f6 <HAL_TIM_IC_ConfigChannel+0xd2>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d004      	beq.n	80090f6 <HAL_TIM_IC_ConfigChannel+0xd2>
 80090ec:	f640 518b 	movw	r1, #3467	; 0xd8b
 80090f0:	4858      	ldr	r0, [pc, #352]	; (8009254 <HAL_TIM_IC_ConfigChannel+0x230>)
 80090f2:	f7f9 fc1c 	bl	800292e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d010      	beq.n	8009120 <HAL_TIM_IC_ConfigChannel+0xfc>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b04      	cmp	r3, #4
 8009104:	d00c      	beq.n	8009120 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	2b08      	cmp	r3, #8
 800910c:	d008      	beq.n	8009120 <HAL_TIM_IC_ConfigChannel+0xfc>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b0c      	cmp	r3, #12
 8009114:	d004      	beq.n	8009120 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009116:	f640 518c 	movw	r1, #3468	; 0xd8c
 800911a:	484e      	ldr	r0, [pc, #312]	; (8009254 <HAL_TIM_IC_ConfigChannel+0x230>)
 800911c:	f7f9 fc07 	bl	800292e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2b0f      	cmp	r3, #15
 8009126:	d904      	bls.n	8009132 <HAL_TIM_IC_ConfigChannel+0x10e>
 8009128:	f640 518d 	movw	r1, #3469	; 0xd8d
 800912c:	4849      	ldr	r0, [pc, #292]	; (8009254 <HAL_TIM_IC_ConfigChannel+0x230>)
 800912e:	f7f9 fbfe 	bl	800292e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_TIM_IC_ConfigChannel+0x11c>
 800913c:	2302      	movs	r3, #2
 800913e:	e115      	b.n	800936c <HAL_TIM_IC_ConfigChannel+0x348>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d11b      	bne.n	800918e <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6819      	ldr	r1, [r3, #0]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f001 f943 	bl	800a3f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 020c 	bic.w	r2, r2, #12
 8009178:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6999      	ldr	r1, [r3, #24]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	619a      	str	r2, [r3, #24]
 800918c:	e0e5      	b.n	800935a <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b04      	cmp	r3, #4
 8009192:	d161      	bne.n	8009258 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a23      	ldr	r2, [pc, #140]	; (8009228 <HAL_TIM_IC_ConfigChannel+0x204>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d027      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a6:	d022      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1f      	ldr	r2, [pc, #124]	; (800922c <HAL_TIM_IC_ConfigChannel+0x208>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d01d      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <HAL_TIM_IC_ConfigChannel+0x20c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d018      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1c      	ldr	r2, [pc, #112]	; (8009234 <HAL_TIM_IC_ConfigChannel+0x210>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d013      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a1b      	ldr	r2, [pc, #108]	; (8009238 <HAL_TIM_IC_ConfigChannel+0x214>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00e      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a19      	ldr	r2, [pc, #100]	; (800923c <HAL_TIM_IC_ConfigChannel+0x218>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d009      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1a      	ldr	r2, [pc, #104]	; (8009248 <HAL_TIM_IC_ConfigChannel+0x224>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d004      	beq.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1ca>
 80091e4:	f640 51a5 	movw	r1, #3493	; 0xda5
 80091e8:	481a      	ldr	r0, [pc, #104]	; (8009254 <HAL_TIM_IC_ConfigChannel+0x230>)
 80091ea:	f7f9 fba0 	bl	800292e <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	6819      	ldr	r1, [r3, #0]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f001 f99a 	bl	800a536 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009210:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6999      	ldr	r1, [r3, #24]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	021a      	lsls	r2, r3, #8
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	619a      	str	r2, [r3, #24]
 8009226:	e098      	b.n	800935a <HAL_TIM_IC_ConfigChannel+0x336>
 8009228:	40010000 	.word	0x40010000
 800922c:	40000400 	.word	0x40000400
 8009230:	40000800 	.word	0x40000800
 8009234:	40000c00 	.word	0x40000c00
 8009238:	40010400 	.word	0x40010400
 800923c:	40014000 	.word	0x40014000
 8009240:	40014400 	.word	0x40014400
 8009244:	40014800 	.word	0x40014800
 8009248:	40001800 	.word	0x40001800
 800924c:	40001c00 	.word	0x40001c00
 8009250:	40002000 	.word	0x40002000
 8009254:	0800be64 	.word	0x0800be64
  }
  else if (Channel == TIM_CHANNEL_3)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b08      	cmp	r3, #8
 800925c:	d13e      	bne.n	80092dc <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a44      	ldr	r2, [pc, #272]	; (8009374 <HAL_TIM_IC_ConfigChannel+0x350>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01d      	beq.n	80092a4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009270:	d018      	beq.n	80092a4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a40      	ldr	r2, [pc, #256]	; (8009378 <HAL_TIM_IC_ConfigChannel+0x354>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d013      	beq.n	80092a4 <HAL_TIM_IC_ConfigChannel+0x280>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a3e      	ldr	r2, [pc, #248]	; (800937c <HAL_TIM_IC_ConfigChannel+0x358>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00e      	beq.n	80092a4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a3d      	ldr	r2, [pc, #244]	; (8009380 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d009      	beq.n	80092a4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a3b      	ldr	r2, [pc, #236]	; (8009384 <HAL_TIM_IC_ConfigChannel+0x360>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_TIM_IC_ConfigChannel+0x280>
 800929a:	f640 51b5 	movw	r1, #3509	; 0xdb5
 800929e:	483a      	ldr	r0, [pc, #232]	; (8009388 <HAL_TIM_IC_ConfigChannel+0x364>)
 80092a0:	f7f9 fb45 	bl	800292e <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6819      	ldr	r1, [r3, #0]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f001 f9ac 	bl	800a610 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69da      	ldr	r2, [r3, #28]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 020c 	bic.w	r2, r2, #12
 80092c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	69d9      	ldr	r1, [r3, #28]
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	61da      	str	r2, [r3, #28]
 80092da:	e03e      	b.n	800935a <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a24      	ldr	r2, [pc, #144]	; (8009374 <HAL_TIM_IC_ConfigChannel+0x350>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d01d      	beq.n	8009322 <HAL_TIM_IC_ConfigChannel+0x2fe>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ee:	d018      	beq.n	8009322 <HAL_TIM_IC_ConfigChannel+0x2fe>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a20      	ldr	r2, [pc, #128]	; (8009378 <HAL_TIM_IC_ConfigChannel+0x354>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d013      	beq.n	8009322 <HAL_TIM_IC_ConfigChannel+0x2fe>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a1f      	ldr	r2, [pc, #124]	; (800937c <HAL_TIM_IC_ConfigChannel+0x358>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d00e      	beq.n	8009322 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a1d      	ldr	r2, [pc, #116]	; (8009380 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d009      	beq.n	8009322 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a1c      	ldr	r2, [pc, #112]	; (8009384 <HAL_TIM_IC_ConfigChannel+0x360>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d004      	beq.n	8009322 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009318:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800931c:	481a      	ldr	r0, [pc, #104]	; (8009388 <HAL_TIM_IC_ConfigChannel+0x364>)
 800931e:	f7f9 fb06 	bl	800292e <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6819      	ldr	r1, [r3, #0]
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f001 f9a9 	bl	800a688 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69da      	ldr	r2, [r3, #28]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009344:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69d9      	ldr	r1, [r3, #28]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	021a      	lsls	r2, r3, #8
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	40010000 	.word	0x40010000
 8009378:	40000400 	.word	0x40000400
 800937c:	40000800 	.word	0x40000800
 8009380:	40000c00 	.word	0x40000c00
 8009384:	40010400 	.word	0x40010400
 8009388:	0800be64 	.word	0x0800be64

0800938c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d010      	beq.n	80093c0 <HAL_TIM_PWM_ConfigChannel+0x34>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d00d      	beq.n	80093c0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d00a      	beq.n	80093c0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b0c      	cmp	r3, #12
 80093ae:	d007      	beq.n	80093c0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b3c      	cmp	r3, #60	; 0x3c
 80093b4:	d004      	beq.n	80093c0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80093b6:	f640 51ec 	movw	r1, #3564	; 0xdec
 80093ba:	4885      	ldr	r0, [pc, #532]	; (80095d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80093bc:	f7f9 fab7 	bl	800292e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b60      	cmp	r3, #96	; 0x60
 80093c6:	d008      	beq.n	80093da <HAL_TIM_PWM_ConfigChannel+0x4e>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b70      	cmp	r3, #112	; 0x70
 80093ce:	d004      	beq.n	80093da <HAL_TIM_PWM_ConfigChannel+0x4e>
 80093d0:	f640 51ed 	movw	r1, #3565	; 0xded
 80093d4:	487e      	ldr	r0, [pc, #504]	; (80095d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80093d6:	f7f9 faaa 	bl	800292e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d008      	beq.n	80093f4 <HAL_TIM_PWM_ConfigChannel+0x68>
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d004      	beq.n	80093f4 <HAL_TIM_PWM_ConfigChannel+0x68>
 80093ea:	f640 51ee 	movw	r1, #3566	; 0xdee
 80093ee:	4878      	ldr	r0, [pc, #480]	; (80095d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80093f0:	f7f9 fa9d 	bl	800292e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <HAL_TIM_PWM_ConfigChannel+0x82>
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b04      	cmp	r3, #4
 8009402:	d004      	beq.n	800940e <HAL_TIM_PWM_ConfigChannel+0x82>
 8009404:	f640 51ef 	movw	r1, #3567	; 0xdef
 8009408:	4871      	ldr	r0, [pc, #452]	; (80095d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800940a:	f7f9 fa90 	bl	800292e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_TIM_PWM_ConfigChannel+0x90>
 8009418:	2302      	movs	r3, #2
 800941a:	e182      	b.n	8009722 <HAL_TIM_PWM_ConfigChannel+0x396>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2202      	movs	r2, #2
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b0c      	cmp	r3, #12
 8009430:	f200 816d 	bhi.w	800970e <HAL_TIM_PWM_ConfigChannel+0x382>
 8009434:	a201      	add	r2, pc, #4	; (adr r2, 800943c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8009436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943a:	bf00      	nop
 800943c:	08009471 	.word	0x08009471
 8009440:	0800970f 	.word	0x0800970f
 8009444:	0800970f 	.word	0x0800970f
 8009448:	0800970f 	.word	0x0800970f
 800944c:	08009533 	.word	0x08009533
 8009450:	0800970f 	.word	0x0800970f
 8009454:	0800970f 	.word	0x0800970f
 8009458:	0800970f 	.word	0x0800970f
 800945c:	08009601 	.word	0x08009601
 8009460:	0800970f 	.word	0x0800970f
 8009464:	0800970f 	.word	0x0800970f
 8009468:	0800970f 	.word	0x0800970f
 800946c:	08009687 	.word	0x08009687
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a57      	ldr	r2, [pc, #348]	; (80095d4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d03b      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009482:	d036      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a53      	ldr	r2, [pc, #332]	; (80095d8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d031      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a52      	ldr	r2, [pc, #328]	; (80095dc <HAL_TIM_PWM_ConfigChannel+0x250>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d02c      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a50      	ldr	r2, [pc, #320]	; (80095e0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d027      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a4f      	ldr	r2, [pc, #316]	; (80095e4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d022      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a4d      	ldr	r2, [pc, #308]	; (80095e8 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d01d      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a4c      	ldr	r2, [pc, #304]	; (80095ec <HAL_TIM_PWM_ConfigChannel+0x260>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d018      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a4a      	ldr	r2, [pc, #296]	; (80095f0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d013      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a49      	ldr	r2, [pc, #292]	; (80095f4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00e      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a47      	ldr	r2, [pc, #284]	; (80095f8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d009      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a46      	ldr	r2, [pc, #280]	; (80095fc <HAL_TIM_PWM_ConfigChannel+0x270>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d004      	beq.n	80094f2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80094e8:	f640 51fb 	movw	r1, #3579	; 0xdfb
 80094ec:	4838      	ldr	r0, [pc, #224]	; (80095d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80094ee:	f7f9 fa1e 	bl	800292e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fd3f 	bl	8009f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699a      	ldr	r2, [r3, #24]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f042 0208 	orr.w	r2, r2, #8
 800950c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699a      	ldr	r2, [r3, #24]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0204 	bic.w	r2, r2, #4
 800951c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6999      	ldr	r1, [r3, #24]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	619a      	str	r2, [r3, #24]
      break;
 8009530:	e0ee      	b.n	8009710 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a27      	ldr	r2, [pc, #156]	; (80095d4 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d027      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009544:	d022      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a23      	ldr	r2, [pc, #140]	; (80095d8 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d01d      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a21      	ldr	r2, [pc, #132]	; (80095dc <HAL_TIM_PWM_ConfigChannel+0x250>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d018      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a20      	ldr	r2, [pc, #128]	; (80095e0 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d013      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a1e      	ldr	r2, [pc, #120]	; (80095e4 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00e      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1d      	ldr	r2, [pc, #116]	; (80095e8 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d009      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a1d      	ldr	r2, [pc, #116]	; (80095f4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_TIM_PWM_ConfigChannel+0x200>
 8009582:	f640 610c 	movw	r1, #3596	; 0xe0c
 8009586:	4812      	ldr	r0, [pc, #72]	; (80095d0 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009588:	f7f9 f9d1 	bl	800292e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68b9      	ldr	r1, [r7, #8]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fd8c 	bl	800a0b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	699a      	ldr	r2, [r3, #24]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6999      	ldr	r1, [r3, #24]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	021a      	lsls	r2, r3, #8
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	619a      	str	r2, [r3, #24]
      break;
 80095cc:	e0a0      	b.n	8009710 <HAL_TIM_PWM_ConfigChannel+0x384>
 80095ce:	bf00      	nop
 80095d0:	0800be64 	.word	0x0800be64
 80095d4:	40010000 	.word	0x40010000
 80095d8:	40000400 	.word	0x40000400
 80095dc:	40000800 	.word	0x40000800
 80095e0:	40000c00 	.word	0x40000c00
 80095e4:	40010400 	.word	0x40010400
 80095e8:	40014000 	.word	0x40014000
 80095ec:	40014400 	.word	0x40014400
 80095f0:	40014800 	.word	0x40014800
 80095f4:	40001800 	.word	0x40001800
 80095f8:	40001c00 	.word	0x40001c00
 80095fc:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a49      	ldr	r2, [pc, #292]	; (800972c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01d      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009612:	d018      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a45      	ldr	r2, [pc, #276]	; (8009730 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d013      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a44      	ldr	r2, [pc, #272]	; (8009734 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00e      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a42      	ldr	r2, [pc, #264]	; (8009738 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d009      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a41      	ldr	r2, [pc, #260]	; (800973c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d004      	beq.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800963c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8009640:	483f      	ldr	r0, [pc, #252]	; (8009740 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8009642:	f7f9 f974 	bl	800292e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fdcd 	bl	800a1ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	69da      	ldr	r2, [r3, #28]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f042 0208 	orr.w	r2, r2, #8
 8009660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69da      	ldr	r2, [r3, #28]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0204 	bic.w	r2, r2, #4
 8009670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69d9      	ldr	r1, [r3, #28]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	61da      	str	r2, [r3, #28]
      break;
 8009684:	e044      	b.n	8009710 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a28      	ldr	r2, [pc, #160]	; (800972c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01d      	beq.n	80096cc <HAL_TIM_PWM_ConfigChannel+0x340>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d018      	beq.n	80096cc <HAL_TIM_PWM_ConfigChannel+0x340>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a24      	ldr	r2, [pc, #144]	; (8009730 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d013      	beq.n	80096cc <HAL_TIM_PWM_ConfigChannel+0x340>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a22      	ldr	r2, [pc, #136]	; (8009734 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00e      	beq.n	80096cc <HAL_TIM_PWM_ConfigChannel+0x340>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a21      	ldr	r2, [pc, #132]	; (8009738 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d009      	beq.n	80096cc <HAL_TIM_PWM_ConfigChannel+0x340>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a1f      	ldr	r2, [pc, #124]	; (800973c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d004      	beq.n	80096cc <HAL_TIM_PWM_ConfigChannel+0x340>
 80096c2:	f640 612e 	movw	r1, #3630	; 0xe2e
 80096c6:	481e      	ldr	r0, [pc, #120]	; (8009740 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 80096c8:	f7f9 f931 	bl	800292e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fe28 	bl	800a328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69da      	ldr	r2, [r3, #28]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	69d9      	ldr	r1, [r3, #28]
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	021a      	lsls	r2, r3, #8
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	61da      	str	r2, [r3, #28]
      break;
 800970c:	e000      	b.n	8009710 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 800970e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	40010000 	.word	0x40010000
 8009730:	40000400 	.word	0x40000400
 8009734:	40000800 	.word	0x40000800
 8009738:	40000c00 	.word	0x40000c00
 800973c:	40010400 	.word	0x40010400
 8009740:	0800be64 	.word	0x0800be64

08009744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_TIM_ConfigClockSource+0x18>
 8009758:	2302      	movs	r3, #2
 800975a:	e35b      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x6d0>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009774:	d029      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800977e:	d024      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d020      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b10      	cmp	r3, #16
 800978e:	d01c      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b20      	cmp	r3, #32
 8009796:	d018      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b30      	cmp	r3, #48	; 0x30
 800979e:	d014      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	d010      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b50      	cmp	r3, #80	; 0x50
 80097ae:	d00c      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b60      	cmp	r3, #96	; 0x60
 80097b6:	d008      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b70      	cmp	r3, #112	; 0x70
 80097be:	d004      	beq.n	80097ca <HAL_TIM_ConfigClockSource+0x86>
 80097c0:	f241 118b 	movw	r1, #4491	; 0x118b
 80097c4:	4893      	ldr	r0, [pc, #588]	; (8009a14 <HAL_TIM_ConfigClockSource+0x2d0>)
 80097c6:	f7f9 f8b2 	bl	800292e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097f2:	f000 812b 	beq.w	8009a4c <HAL_TIM_ConfigClockSource+0x308>
 80097f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097fa:	f200 82ff 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 80097fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009802:	d02e      	beq.n	8009862 <HAL_TIM_ConfigClockSource+0x11e>
 8009804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009808:	f200 82f8 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 800980c:	2b70      	cmp	r3, #112	; 0x70
 800980e:	f000 8082 	beq.w	8009916 <HAL_TIM_ConfigClockSource+0x1d2>
 8009812:	2b70      	cmp	r3, #112	; 0x70
 8009814:	f200 82f2 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 8009818:	2b60      	cmp	r3, #96	; 0x60
 800981a:	f000 81e8 	beq.w	8009bee <HAL_TIM_ConfigClockSource+0x4aa>
 800981e:	2b60      	cmp	r3, #96	; 0x60
 8009820:	f200 82ec 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 8009824:	2b50      	cmp	r3, #80	; 0x50
 8009826:	f000 8182 	beq.w	8009b2e <HAL_TIM_ConfigClockSource+0x3ea>
 800982a:	2b50      	cmp	r3, #80	; 0x50
 800982c:	f200 82e6 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	f000 824d 	beq.w	8009cd0 <HAL_TIM_ConfigClockSource+0x58c>
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	f200 82e0 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 800983c:	2b30      	cmp	r3, #48	; 0x30
 800983e:	f000 82a7 	beq.w	8009d90 <HAL_TIM_ConfigClockSource+0x64c>
 8009842:	2b30      	cmp	r3, #48	; 0x30
 8009844:	f200 82da 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 8009848:	2b20      	cmp	r3, #32
 800984a:	f000 82a1 	beq.w	8009d90 <HAL_TIM_ConfigClockSource+0x64c>
 800984e:	2b20      	cmp	r3, #32
 8009850:	f200 82d4 	bhi.w	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 829b 	beq.w	8009d90 <HAL_TIM_ConfigClockSource+0x64c>
 800985a:	2b10      	cmp	r3, #16
 800985c:	f000 8298 	beq.w	8009d90 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009860:	e2cc      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a6c      	ldr	r2, [pc, #432]	; (8009a18 <HAL_TIM_ConfigClockSource+0x2d4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	f000 82c9 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009876:	f000 82c3 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a67      	ldr	r2, [pc, #412]	; (8009a1c <HAL_TIM_ConfigClockSource+0x2d8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	f000 82bd 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a65      	ldr	r2, [pc, #404]	; (8009a20 <HAL_TIM_ConfigClockSource+0x2dc>)
 800988c:	4293      	cmp	r3, r2
 800988e:	f000 82b7 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a63      	ldr	r2, [pc, #396]	; (8009a24 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009898:	4293      	cmp	r3, r2
 800989a:	f000 82b1 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a61      	ldr	r2, [pc, #388]	; (8009a28 <HAL_TIM_ConfigClockSource+0x2e4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	f000 82ab 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a5f      	ldr	r2, [pc, #380]	; (8009a2c <HAL_TIM_ConfigClockSource+0x2e8>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	f000 82a5 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a5d      	ldr	r2, [pc, #372]	; (8009a30 <HAL_TIM_ConfigClockSource+0x2ec>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	f000 829f 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a5b      	ldr	r2, [pc, #364]	; (8009a34 <HAL_TIM_ConfigClockSource+0x2f0>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	f000 8299 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a59      	ldr	r2, [pc, #356]	; (8009a38 <HAL_TIM_ConfigClockSource+0x2f4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	f000 8293 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a57      	ldr	r2, [pc, #348]	; (8009a3c <HAL_TIM_ConfigClockSource+0x2f8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	f000 828d 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a55      	ldr	r2, [pc, #340]	; (8009a40 <HAL_TIM_ConfigClockSource+0x2fc>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	f000 8287 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a53      	ldr	r2, [pc, #332]	; (8009a44 <HAL_TIM_ConfigClockSource+0x300>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	f000 8281 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a51      	ldr	r2, [pc, #324]	; (8009a48 <HAL_TIM_ConfigClockSource+0x304>)
 8009904:	4293      	cmp	r3, r2
 8009906:	f000 827b 	beq.w	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
 800990a:	f241 1197 	movw	r1, #4503	; 0x1197
 800990e:	4841      	ldr	r0, [pc, #260]	; (8009a14 <HAL_TIM_ConfigClockSource+0x2d0>)
 8009910:	f7f9 f80d 	bl	800292e <assert_failed>
      break;
 8009914:	e274      	b.n	8009e00 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a3f      	ldr	r2, [pc, #252]	; (8009a18 <HAL_TIM_ConfigClockSource+0x2d4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d027      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009928:	d022      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a3b      	ldr	r2, [pc, #236]	; (8009a1c <HAL_TIM_ConfigClockSource+0x2d8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d01d      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a39      	ldr	r2, [pc, #228]	; (8009a20 <HAL_TIM_ConfigClockSource+0x2dc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d018      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a38      	ldr	r2, [pc, #224]	; (8009a24 <HAL_TIM_ConfigClockSource+0x2e0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d013      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a38      	ldr	r2, [pc, #224]	; (8009a30 <HAL_TIM_ConfigClockSource+0x2ec>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d00e      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a37      	ldr	r2, [pc, #220]	; (8009a34 <HAL_TIM_ConfigClockSource+0x2f0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d009      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a37      	ldr	r2, [pc, #220]	; (8009a40 <HAL_TIM_ConfigClockSource+0x2fc>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d004      	beq.n	8009970 <HAL_TIM_ConfigClockSource+0x22c>
 8009966:	f241 119e 	movw	r1, #4510	; 0x119e
 800996a:	482a      	ldr	r0, [pc, #168]	; (8009a14 <HAL_TIM_ConfigClockSource+0x2d0>)
 800996c:	f7f8 ffdf 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d013      	beq.n	80099a0 <HAL_TIM_ConfigClockSource+0x25c>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009980:	d00e      	beq.n	80099a0 <HAL_TIM_ConfigClockSource+0x25c>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800998a:	d009      	beq.n	80099a0 <HAL_TIM_ConfigClockSource+0x25c>
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009994:	d004      	beq.n	80099a0 <HAL_TIM_ConfigClockSource+0x25c>
 8009996:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800999a:	481e      	ldr	r0, [pc, #120]	; (8009a14 <HAL_TIM_ConfigClockSource+0x2d0>)
 800999c:	f7f8 ffc7 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a8:	d014      	beq.n	80099d4 <HAL_TIM_ConfigClockSource+0x290>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d010      	beq.n	80099d4 <HAL_TIM_ConfigClockSource+0x290>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00c      	beq.n	80099d4 <HAL_TIM_ConfigClockSource+0x290>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d008      	beq.n	80099d4 <HAL_TIM_ConfigClockSource+0x290>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b0a      	cmp	r3, #10
 80099c8:	d004      	beq.n	80099d4 <HAL_TIM_ConfigClockSource+0x290>
 80099ca:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80099ce:	4811      	ldr	r0, [pc, #68]	; (8009a14 <HAL_TIM_ConfigClockSource+0x2d0>)
 80099d0:	f7f8 ffad 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	2b0f      	cmp	r3, #15
 80099da:	d904      	bls.n	80099e6 <HAL_TIM_ConfigClockSource+0x2a2>
 80099dc:	f241 11a3 	movw	r1, #4515	; 0x11a3
 80099e0:	480c      	ldr	r0, [pc, #48]	; (8009a14 <HAL_TIM_ConfigClockSource+0x2d0>)
 80099e2:	f7f8 ffa4 	bl	800292e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6899      	ldr	r1, [r3, #8]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	f000 fe9f 	bl	800a738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	609a      	str	r2, [r3, #8]
      break;
 8009a12:	e1f6      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
 8009a14:	0800be64 	.word	0x0800be64
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40001000 	.word	0x40001000
 8009a2c:	40001400 	.word	0x40001400
 8009a30:	40010400 	.word	0x40010400
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40014400 	.word	0x40014400
 8009a3c:	40014800 	.word	0x40014800
 8009a40:	40001800 	.word	0x40001800
 8009a44:	40001c00 	.word	0x40001c00
 8009a48:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a97      	ldr	r2, [pc, #604]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x56c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d01d      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x34e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a5e:	d018      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x34e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a93      	ldr	r2, [pc, #588]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x570>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d013      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x34e>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a92      	ldr	r2, [pc, #584]	; (8009cb8 <HAL_TIM_ConfigClockSource+0x574>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d00e      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x34e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a90      	ldr	r2, [pc, #576]	; (8009cbc <HAL_TIM_ConfigClockSource+0x578>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d009      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x34e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a8f      	ldr	r2, [pc, #572]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x57c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d004      	beq.n	8009a92 <HAL_TIM_ConfigClockSource+0x34e>
 8009a88:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8009a8c:	488d      	ldr	r0, [pc, #564]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009a8e:	f7f8 ff4e 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d013      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x37e>
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa2:	d00e      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x37e>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aac:	d009      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x37e>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ab6:	d004      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x37e>
 8009ab8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8009abc:	4881      	ldr	r0, [pc, #516]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009abe:	f7f8 ff36 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aca:	d014      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x3b2>
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d010      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x3b2>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00c      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x3b2>
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d008      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x3b2>
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b0a      	cmp	r3, #10
 8009aea:	d004      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x3b2>
 8009aec:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8009af0:	4874      	ldr	r0, [pc, #464]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009af2:	f7f8 ff1c 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	2b0f      	cmp	r3, #15
 8009afc:	d904      	bls.n	8009b08 <HAL_TIM_ConfigClockSource+0x3c4>
 8009afe:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8009b02:	4870      	ldr	r0, [pc, #448]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009b04:	f7f8 ff13 	bl	800292e <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	6899      	ldr	r1, [r3, #8]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f000 fe0e 	bl	800a738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b2a:	609a      	str	r2, [r3, #8]
      break;
 8009b2c:	e169      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a5f      	ldr	r2, [pc, #380]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x56c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d027      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b40:	d022      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a5b      	ldr	r2, [pc, #364]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x570>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d01d      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a59      	ldr	r2, [pc, #356]	; (8009cb8 <HAL_TIM_ConfigClockSource+0x574>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d018      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a58      	ldr	r2, [pc, #352]	; (8009cbc <HAL_TIM_ConfigClockSource+0x578>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d013      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a56      	ldr	r2, [pc, #344]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x57c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d00e      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a56      	ldr	r2, [pc, #344]	; (8009cc8 <HAL_TIM_ConfigClockSource+0x584>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d009      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a54      	ldr	r2, [pc, #336]	; (8009ccc <HAL_TIM_ConfigClockSource+0x588>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d004      	beq.n	8009b88 <HAL_TIM_ConfigClockSource+0x444>
 8009b7e:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8009b82:	4850      	ldr	r0, [pc, #320]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009b84:	f7f8 fed3 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b90:	d014      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0x478>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d010      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0x478>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00c      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0x478>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d008      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0x478>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b0a      	cmp	r3, #10
 8009bb0:	d004      	beq.n	8009bbc <HAL_TIM_ConfigClockSource+0x478>
 8009bb2:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8009bb6:	4843      	ldr	r0, [pc, #268]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009bb8:	f7f8 feb9 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2b0f      	cmp	r3, #15
 8009bc2:	d904      	bls.n	8009bce <HAL_TIM_ConfigClockSource+0x48a>
 8009bc4:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8009bc8:	483e      	ldr	r0, [pc, #248]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009bca:	f7f8 feb0 	bl	800292e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6859      	ldr	r1, [r3, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f000 fc7c 	bl	800a4d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2150      	movs	r1, #80	; 0x50
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fd8b 	bl	800a702 <TIM_ITRx_SetConfig>
      break;
 8009bec:	e109      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a2f      	ldr	r2, [pc, #188]	; (8009cb0 <HAL_TIM_ConfigClockSource+0x56c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d027      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c00:	d022      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a2b      	ldr	r2, [pc, #172]	; (8009cb4 <HAL_TIM_ConfigClockSource+0x570>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d01d      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a29      	ldr	r2, [pc, #164]	; (8009cb8 <HAL_TIM_ConfigClockSource+0x574>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d018      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a28      	ldr	r2, [pc, #160]	; (8009cbc <HAL_TIM_ConfigClockSource+0x578>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d013      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a26      	ldr	r2, [pc, #152]	; (8009cc0 <HAL_TIM_ConfigClockSource+0x57c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00e      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a26      	ldr	r2, [pc, #152]	; (8009cc8 <HAL_TIM_ConfigClockSource+0x584>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d009      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a24      	ldr	r2, [pc, #144]	; (8009ccc <HAL_TIM_ConfigClockSource+0x588>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d004      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0x504>
 8009c3e:	f241 11da 	movw	r1, #4570	; 0x11da
 8009c42:	4820      	ldr	r0, [pc, #128]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009c44:	f7f8 fe73 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c50:	d014      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0x538>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d010      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0x538>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00c      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0x538>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d008      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0x538>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2b0a      	cmp	r3, #10
 8009c70:	d004      	beq.n	8009c7c <HAL_TIM_ConfigClockSource+0x538>
 8009c72:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8009c76:	4813      	ldr	r0, [pc, #76]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009c78:	f7f8 fe59 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b0f      	cmp	r3, #15
 8009c82:	d904      	bls.n	8009c8e <HAL_TIM_ConfigClockSource+0x54a>
 8009c84:	f241 11de 	movw	r1, #4574	; 0x11de
 8009c88:	480e      	ldr	r0, [pc, #56]	; (8009cc4 <HAL_TIM_ConfigClockSource+0x580>)
 8009c8a:	f7f8 fe50 	bl	800292e <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6859      	ldr	r1, [r3, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f000 fc88 	bl	800a5b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2160      	movs	r1, #96	; 0x60
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fd2b 	bl	800a702 <TIM_ITRx_SetConfig>
      break;
 8009cac:	e0a9      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
 8009cae:	bf00      	nop
 8009cb0:	40010000 	.word	0x40010000
 8009cb4:	40000400 	.word	0x40000400
 8009cb8:	40000800 	.word	0x40000800
 8009cbc:	40000c00 	.word	0x40000c00
 8009cc0:	40010400 	.word	0x40010400
 8009cc4:	0800be64 	.word	0x0800be64
 8009cc8:	40014000 	.word	0x40014000
 8009ccc:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a51      	ldr	r2, [pc, #324]	; (8009e1c <HAL_TIM_ConfigClockSource+0x6d8>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d027      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d022      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a4d      	ldr	r2, [pc, #308]	; (8009e20 <HAL_TIM_ConfigClockSource+0x6dc>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d01d      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a4c      	ldr	r2, [pc, #304]	; (8009e24 <HAL_TIM_ConfigClockSource+0x6e0>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d018      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a4a      	ldr	r2, [pc, #296]	; (8009e28 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d013      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a49      	ldr	r2, [pc, #292]	; (8009e2c <HAL_TIM_ConfigClockSource+0x6e8>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00e      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a47      	ldr	r2, [pc, #284]	; (8009e30 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d009      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a46      	ldr	r2, [pc, #280]	; (8009e34 <HAL_TIM_ConfigClockSource+0x6f0>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d004      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x5e6>
 8009d20:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8009d24:	4844      	ldr	r0, [pc, #272]	; (8009e38 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009d26:	f7f8 fe02 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d32:	d014      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x61a>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d010      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x61a>
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x61a>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d008      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x61a>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2b0a      	cmp	r3, #10
 8009d52:	d004      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x61a>
 8009d54:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8009d58:	4837      	ldr	r0, [pc, #220]	; (8009e38 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009d5a:	f7f8 fde8 	bl	800292e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	2b0f      	cmp	r3, #15
 8009d64:	d904      	bls.n	8009d70 <HAL_TIM_ConfigClockSource+0x62c>
 8009d66:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8009d6a:	4833      	ldr	r0, [pc, #204]	; (8009e38 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009d6c:	f7f8 fddf 	bl	800292e <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6859      	ldr	r1, [r3, #4]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f000 fbab 	bl	800a4d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2140      	movs	r1, #64	; 0x40
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fcba 	bl	800a702 <TIM_ITRx_SetConfig>
      break;
 8009d8e:	e038      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a21      	ldr	r2, [pc, #132]	; (8009e1c <HAL_TIM_ConfigClockSource+0x6d8>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d027      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d022      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1d      	ldr	r2, [pc, #116]	; (8009e20 <HAL_TIM_ConfigClockSource+0x6dc>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d01d      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <HAL_TIM_ConfigClockSource+0x6e0>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d018      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1a      	ldr	r2, [pc, #104]	; (8009e28 <HAL_TIM_ConfigClockSource+0x6e4>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d013      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a19      	ldr	r2, [pc, #100]	; (8009e2c <HAL_TIM_ConfigClockSource+0x6e8>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00e      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	; (8009e30 <HAL_TIM_ConfigClockSource+0x6ec>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d009      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <HAL_TIM_ConfigClockSource+0x6f0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d004      	beq.n	8009dea <HAL_TIM_ConfigClockSource+0x6a6>
 8009de0:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8009de4:	4814      	ldr	r0, [pc, #80]	; (8009e38 <HAL_TIM_ConfigClockSource+0x6f4>)
 8009de6:	f7f8 fda2 	bl	800292e <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f000 fc84 	bl	800a702 <TIM_ITRx_SetConfig>
      break;
 8009dfa:	e002      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e000      	b.n	8009e02 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 8009e00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	40010000 	.word	0x40010000
 8009e20:	40000400 	.word	0x40000400
 8009e24:	40000800 	.word	0x40000800
 8009e28:	40000c00 	.word	0x40000c00
 8009e2c:	40010400 	.word	0x40010400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40001800 	.word	0x40001800
 8009e38:	0800be64 	.word	0x0800be64

08009e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a40      	ldr	r2, [pc, #256]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d013      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5a:	d00f      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a3d      	ldr	r2, [pc, #244]	; (8009f54 <TIM_Base_SetConfig+0x118>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00b      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a3c      	ldr	r2, [pc, #240]	; (8009f58 <TIM_Base_SetConfig+0x11c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a3b      	ldr	r2, [pc, #236]	; (8009f5c <TIM_Base_SetConfig+0x120>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_Base_SetConfig+0x40>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a3a      	ldr	r2, [pc, #232]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d108      	bne.n	8009e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a2f      	ldr	r2, [pc, #188]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d02b      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9c:	d027      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a2c      	ldr	r2, [pc, #176]	; (8009f54 <TIM_Base_SetConfig+0x118>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d023      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a2b      	ldr	r2, [pc, #172]	; (8009f58 <TIM_Base_SetConfig+0x11c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01f      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <TIM_Base_SetConfig+0x120>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d01b      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a29      	ldr	r2, [pc, #164]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d017      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <TIM_Base_SetConfig+0x128>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d013      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a27      	ldr	r2, [pc, #156]	; (8009f68 <TIM_Base_SetConfig+0x12c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00f      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a26      	ldr	r2, [pc, #152]	; (8009f6c <TIM_Base_SetConfig+0x130>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d00b      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a25      	ldr	r2, [pc, #148]	; (8009f70 <TIM_Base_SetConfig+0x134>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d007      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a24      	ldr	r2, [pc, #144]	; (8009f74 <TIM_Base_SetConfig+0x138>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d003      	beq.n	8009eee <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a23      	ldr	r2, [pc, #140]	; (8009f78 <TIM_Base_SetConfig+0x13c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d108      	bne.n	8009f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a0a      	ldr	r2, [pc, #40]	; (8009f50 <TIM_Base_SetConfig+0x114>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d003      	beq.n	8009f34 <TIM_Base_SetConfig+0xf8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <TIM_Base_SetConfig+0x124>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d103      	bne.n	8009f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	615a      	str	r2, [r3, #20]
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40010000 	.word	0x40010000
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800
 8009f70:	40001800 	.word	0x40001800
 8009f74:	40001c00 	.word	0x40001c00
 8009f78:	40002000 	.word	0x40002000

08009f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	f023 0201 	bic.w	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 0303 	bic.w	r3, r3, #3
 8009fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f023 0302 	bic.w	r3, r3, #2
 8009fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a34      	ldr	r2, [pc, #208]	; (800a0a4 <TIM_OC1_SetConfig+0x128>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d003      	beq.n	8009fe0 <TIM_OC1_SetConfig+0x64>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a33      	ldr	r2, [pc, #204]	; (800a0a8 <TIM_OC1_SetConfig+0x12c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d119      	bne.n	800a014 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <TIM_OC1_SetConfig+0x7e>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d004      	beq.n	8009ffa <TIM_OC1_SetConfig+0x7e>
 8009ff0:	f241 7102 	movw	r1, #5890	; 0x1702
 8009ff4:	482d      	ldr	r0, [pc, #180]	; (800a0ac <TIM_OC1_SetConfig+0x130>)
 8009ff6:	f7f8 fc9a 	bl	800292e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f023 0308 	bic.w	r3, r3, #8
 800a000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f023 0304 	bic.w	r3, r3, #4
 800a012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <TIM_OC1_SetConfig+0x128>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC1_SetConfig+0xa8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <TIM_OC1_SetConfig+0x12c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d12d      	bne.n	800a080 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02c:	d008      	beq.n	800a040 <TIM_OC1_SetConfig+0xc4>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d004      	beq.n	800a040 <TIM_OC1_SetConfig+0xc4>
 800a036:	f241 710f 	movw	r1, #5903	; 0x170f
 800a03a:	481c      	ldr	r0, [pc, #112]	; (800a0ac <TIM_OC1_SetConfig+0x130>)
 800a03c:	f7f8 fc77 	bl	800292e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a048:	d008      	beq.n	800a05c <TIM_OC1_SetConfig+0xe0>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d004      	beq.n	800a05c <TIM_OC1_SetConfig+0xe0>
 800a052:	f241 7110 	movw	r1, #5904	; 0x1710
 800a056:	4815      	ldr	r0, [pc, #84]	; (800a0ac <TIM_OC1_SetConfig+0x130>)
 800a058:	f7f8 fc69 	bl	800292e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a06a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	621a      	str	r2, [r3, #32]
}
 800a09a:	bf00      	nop
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	40010000 	.word	0x40010000
 800a0a8:	40010400 	.word	0x40010400
 800a0ac:	0800be64 	.word	0x0800be64

0800a0b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f023 0210 	bic.w	r2, r3, #16
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	021b      	lsls	r3, r3, #8
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f023 0320 	bic.w	r3, r3, #32
 800a0fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4313      	orrs	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a35      	ldr	r2, [pc, #212]	; (800a1e0 <TIM_OC2_SetConfig+0x130>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d003      	beq.n	800a118 <TIM_OC2_SetConfig+0x68>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a34      	ldr	r2, [pc, #208]	; (800a1e4 <TIM_OC2_SetConfig+0x134>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d11a      	bne.n	800a14e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d008      	beq.n	800a132 <TIM_OC2_SetConfig+0x82>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b08      	cmp	r3, #8
 800a126:	d004      	beq.n	800a132 <TIM_OC2_SetConfig+0x82>
 800a128:	f241 714d 	movw	r1, #5965	; 0x174d
 800a12c:	482e      	ldr	r0, [pc, #184]	; (800a1e8 <TIM_OC2_SetConfig+0x138>)
 800a12e:	f7f8 fbfe 	bl	800292e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a14c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a23      	ldr	r2, [pc, #140]	; (800a1e0 <TIM_OC2_SetConfig+0x130>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d003      	beq.n	800a15e <TIM_OC2_SetConfig+0xae>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a22      	ldr	r2, [pc, #136]	; (800a1e4 <TIM_OC2_SetConfig+0x134>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d12f      	bne.n	800a1be <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a166:	d008      	beq.n	800a17a <TIM_OC2_SetConfig+0xca>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <TIM_OC2_SetConfig+0xca>
 800a170:	f241 715b 	movw	r1, #5979	; 0x175b
 800a174:	481c      	ldr	r0, [pc, #112]	; (800a1e8 <TIM_OC2_SetConfig+0x138>)
 800a176:	f7f8 fbda 	bl	800292e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	d008      	beq.n	800a196 <TIM_OC2_SetConfig+0xe6>
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d004      	beq.n	800a196 <TIM_OC2_SetConfig+0xe6>
 800a18c:	f241 715c 	movw	r1, #5980	; 0x175c
 800a190:	4815      	ldr	r0, [pc, #84]	; (800a1e8 <TIM_OC2_SetConfig+0x138>)
 800a192:	f7f8 fbcc 	bl	800292e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a19c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	621a      	str	r2, [r3, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	40010000 	.word	0x40010000
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	0800be64 	.word	0x0800be64

0800a1ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f023 0303 	bic.w	r3, r3, #3
 800a222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	021b      	lsls	r3, r3, #8
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a35      	ldr	r2, [pc, #212]	; (800a31c <TIM_OC3_SetConfig+0x130>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d003      	beq.n	800a252 <TIM_OC3_SetConfig+0x66>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a34      	ldr	r2, [pc, #208]	; (800a320 <TIM_OC3_SetConfig+0x134>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d11a      	bne.n	800a288 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d008      	beq.n	800a26c <TIM_OC3_SetConfig+0x80>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	2b08      	cmp	r3, #8
 800a260:	d004      	beq.n	800a26c <TIM_OC3_SetConfig+0x80>
 800a262:	f241 7198 	movw	r1, #6040	; 0x1798
 800a266:	482f      	ldr	r0, [pc, #188]	; (800a324 <TIM_OC3_SetConfig+0x138>)
 800a268:	f7f8 fb61 	bl	800292e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a24      	ldr	r2, [pc, #144]	; (800a31c <TIM_OC3_SetConfig+0x130>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d003      	beq.n	800a298 <TIM_OC3_SetConfig+0xac>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	4a23      	ldr	r2, [pc, #140]	; (800a320 <TIM_OC3_SetConfig+0x134>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d12f      	bne.n	800a2f8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a0:	d008      	beq.n	800a2b4 <TIM_OC3_SetConfig+0xc8>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d004      	beq.n	800a2b4 <TIM_OC3_SetConfig+0xc8>
 800a2aa:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800a2ae:	481d      	ldr	r0, [pc, #116]	; (800a324 <TIM_OC3_SetConfig+0x138>)
 800a2b0:	f7f8 fb3d 	bl	800292e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2bc:	d008      	beq.n	800a2d0 <TIM_OC3_SetConfig+0xe4>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d004      	beq.n	800a2d0 <TIM_OC3_SetConfig+0xe4>
 800a2c6:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800a2ca:	4816      	ldr	r0, [pc, #88]	; (800a324 <TIM_OC3_SetConfig+0x138>)
 800a2cc:	f7f8 fb2f 	bl	800292e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	011b      	lsls	r3, r3, #4
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	693a      	ldr	r2, [r7, #16]
 800a2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	621a      	str	r2, [r3, #32]
}
 800a312:	bf00      	nop
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	40010000 	.word	0x40010000
 800a320:	40010400 	.word	0x40010400
 800a324:	0800be64 	.word	0x0800be64

0800a328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a1b      	ldr	r3, [r3, #32]
 800a342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	031b      	lsls	r3, r3, #12
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a18      	ldr	r2, [pc, #96]	; (800a3e4 <TIM_OC4_SetConfig+0xbc>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d003      	beq.n	800a390 <TIM_OC4_SetConfig+0x68>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <TIM_OC4_SetConfig+0xc0>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d117      	bne.n	800a3c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a398:	d008      	beq.n	800a3ac <TIM_OC4_SetConfig+0x84>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <TIM_OC4_SetConfig+0x84>
 800a3a2:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800a3a6:	4811      	ldr	r0, [pc, #68]	; (800a3ec <TIM_OC4_SetConfig+0xc4>)
 800a3a8:	f7f8 fac1 	bl	800292e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	019b      	lsls	r3, r3, #6
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40010000 	.word	0x40010000
 800a3e8:	40010400 	.word	0x40010400
 800a3ec:	0800be64 	.word	0x0800be64

0800a3f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f023 0201 	bic.w	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4a28      	ldr	r2, [pc, #160]	; (800a4bc <TIM_TI1_SetConfig+0xcc>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d01b      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a424:	d017      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4a25      	ldr	r2, [pc, #148]	; (800a4c0 <TIM_TI1_SetConfig+0xd0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d013      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4a24      	ldr	r2, [pc, #144]	; (800a4c4 <TIM_TI1_SetConfig+0xd4>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d00f      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a23      	ldr	r2, [pc, #140]	; (800a4c8 <TIM_TI1_SetConfig+0xd8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d00b      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a22      	ldr	r2, [pc, #136]	; (800a4cc <TIM_TI1_SetConfig+0xdc>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d007      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4a21      	ldr	r2, [pc, #132]	; (800a4d0 <TIM_TI1_SetConfig+0xe0>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d003      	beq.n	800a456 <TIM_TI1_SetConfig+0x66>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a20      	ldr	r2, [pc, #128]	; (800a4d4 <TIM_TI1_SetConfig+0xe4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d101      	bne.n	800a45a <TIM_TI1_SetConfig+0x6a>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <TIM_TI1_SetConfig+0x6c>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d008      	beq.n	800a472 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f023 0303 	bic.w	r3, r3, #3
 800a466:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e003      	b.n	800a47a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f043 0301 	orr.w	r3, r3, #1
 800a478:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	b2db      	uxtb	r3, r3
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	f023 030a 	bic.w	r3, r3, #10
 800a494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f003 030a 	and.w	r3, r3, #10
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	621a      	str	r2, [r3, #32]
}
 800a4ae:	bf00      	nop
 800a4b0:	371c      	adds	r7, #28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40010400 	.word	0x40010400
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40001800 	.word	0x40001800

0800a4d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	f023 0201 	bic.w	r2, r3, #1
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f023 030a 	bic.w	r3, r3, #10
 800a514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	621a      	str	r2, [r3, #32]
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a536:	b480      	push	{r7}
 800a538:	b087      	sub	sp, #28
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	f023 0210 	bic.w	r2, r3, #16
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a562:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	021b      	lsls	r3, r3, #8
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	031b      	lsls	r3, r3, #12
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a588:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	011b      	lsls	r3, r3, #4
 800a58e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	4313      	orrs	r3, r2
 800a596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	621a      	str	r2, [r3, #32]
}
 800a5a4:	bf00      	nop
 800a5a6:	371c      	adds	r7, #28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	f023 0210 	bic.w	r2, r3, #16
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	031b      	lsls	r3, r3, #12
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	011b      	lsls	r3, r3, #4
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	621a      	str	r2, [r3, #32]
}
 800a604:	bf00      	nop
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f023 0303 	bic.w	r3, r3, #3
 800a63c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a64c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	011b      	lsls	r3, r3, #4
 800a652:	b2db      	uxtb	r3, r3
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a660:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	621a      	str	r2, [r3, #32]
}
 800a67c:	bf00      	nop
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	021b      	lsls	r3, r3, #8
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	031b      	lsls	r3, r3, #12
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a6da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	031b      	lsls	r3, r3, #12
 800a6e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	621a      	str	r2, [r3, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a702:	b480      	push	{r7}
 800a704:	b085      	sub	sp, #20
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4313      	orrs	r3, r2
 800a720:	f043 0307 	orr.w	r3, r3, #7
 800a724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	609a      	str	r2, [r3, #8]
}
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	021a      	lsls	r2, r3, #8
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	431a      	orrs	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4313      	orrs	r3, r2
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	4313      	orrs	r3, r2
 800a764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	609a      	str	r2, [r3, #8]
}
 800a76c:	bf00      	nop
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4a32      	ldr	r2, [pc, #200]	; (800a850 <TIM_CCxChannelCmd+0xd8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d030      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a792:	d02c      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4a2f      	ldr	r2, [pc, #188]	; (800a854 <TIM_CCxChannelCmd+0xdc>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d028      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a2e      	ldr	r2, [pc, #184]	; (800a858 <TIM_CCxChannelCmd+0xe0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d024      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4a2d      	ldr	r2, [pc, #180]	; (800a85c <TIM_CCxChannelCmd+0xe4>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d020      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4a2c      	ldr	r2, [pc, #176]	; (800a860 <TIM_CCxChannelCmd+0xe8>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d01c      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4a2b      	ldr	r2, [pc, #172]	; (800a864 <TIM_CCxChannelCmd+0xec>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d018      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4a2a      	ldr	r2, [pc, #168]	; (800a868 <TIM_CCxChannelCmd+0xf0>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d014      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	4a29      	ldr	r2, [pc, #164]	; (800a86c <TIM_CCxChannelCmd+0xf4>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d010      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4a28      	ldr	r2, [pc, #160]	; (800a870 <TIM_CCxChannelCmd+0xf8>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00c      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4a27      	ldr	r2, [pc, #156]	; (800a874 <TIM_CCxChannelCmd+0xfc>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d008      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4a26      	ldr	r2, [pc, #152]	; (800a878 <TIM_CCxChannelCmd+0x100>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d004      	beq.n	800a7ee <TIM_CCxChannelCmd+0x76>
 800a7e4:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800a7e8:	4824      	ldr	r0, [pc, #144]	; (800a87c <TIM_CCxChannelCmd+0x104>)
 800a7ea:	f7f8 f8a0 	bl	800292e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d010      	beq.n	800a816 <TIM_CCxChannelCmd+0x9e>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d00d      	beq.n	800a816 <TIM_CCxChannelCmd+0x9e>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d00a      	beq.n	800a816 <TIM_CCxChannelCmd+0x9e>
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2b0c      	cmp	r3, #12
 800a804:	d007      	beq.n	800a816 <TIM_CCxChannelCmd+0x9e>
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b3c      	cmp	r3, #60	; 0x3c
 800a80a:	d004      	beq.n	800a816 <TIM_CCxChannelCmd+0x9e>
 800a80c:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800a810:	481a      	ldr	r0, [pc, #104]	; (800a87c <TIM_CCxChannelCmd+0x104>)
 800a812:	f7f8 f88c 	bl	800292e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	2201      	movs	r2, #1
 800a81e:	fa02 f303 	lsl.w	r3, r2, r3
 800a822:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6a1a      	ldr	r2, [r3, #32]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	43db      	mvns	r3, r3
 800a82c:	401a      	ands	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a1a      	ldr	r2, [r3, #32]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f003 031f 	and.w	r3, r3, #31
 800a83c:	6879      	ldr	r1, [r7, #4]
 800a83e:	fa01 f303 	lsl.w	r3, r1, r3
 800a842:	431a      	orrs	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	621a      	str	r2, [r3, #32]
}
 800a848:	bf00      	nop
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	40010000 	.word	0x40010000
 800a854:	40000400 	.word	0x40000400
 800a858:	40000800 	.word	0x40000800
 800a85c:	40000c00 	.word	0x40000c00
 800a860:	40010400 	.word	0x40010400
 800a864:	40014000 	.word	0x40014000
 800a868:	40014400 	.word	0x40014400
 800a86c:	40014800 	.word	0x40014800
 800a870:	40001800 	.word	0x40001800
 800a874:	40001c00 	.word	0x40001c00
 800a878:	40002000 	.word	0x40002000
 800a87c:	0800be64 	.word	0x0800be64

0800a880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a61      	ldr	r2, [pc, #388]	; (800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d027      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89c:	d022      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a5d      	ldr	r2, [pc, #372]	; (800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d01d      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a5b      	ldr	r2, [pc, #364]	; (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d018      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a5a      	ldr	r2, [pc, #360]	; (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d013      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a58      	ldr	r2, [pc, #352]	; (800aa24 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a57      	ldr	r2, [pc, #348]	; (800aa28 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a55      	ldr	r2, [pc, #340]	; (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800a8da:	f240 6164 	movw	r1, #1636	; 0x664
 800a8de:	4854      	ldr	r0, [pc, #336]	; (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a8e0:	f7f8 f825 	bl	800292e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d020      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b10      	cmp	r3, #16
 800a8f2:	d01c      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	d018      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b30      	cmp	r3, #48	; 0x30
 800a902:	d014      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	d010      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b50      	cmp	r3, #80	; 0x50
 800a912:	d00c      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b60      	cmp	r3, #96	; 0x60
 800a91a:	d008      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b70      	cmp	r3, #112	; 0x70
 800a922:	d004      	beq.n	800a92e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a924:	f240 6165 	movw	r1, #1637	; 0x665
 800a928:	4841      	ldr	r0, [pc, #260]	; (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a92a:	f7f8 f800 	bl	800292e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2b80      	cmp	r3, #128	; 0x80
 800a934:	d008      	beq.n	800a948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a93e:	f240 6166 	movw	r1, #1638	; 0x666
 800a942:	483b      	ldr	r0, [pc, #236]	; (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800a944:	f7f7 fff3 	bl	800292e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d101      	bne.n	800a956 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a952:	2302      	movs	r3, #2
 800a954:	e05a      	b.n	800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2202      	movs	r2, #2
 800a962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a1f      	ldr	r2, [pc, #124]	; (800aa14 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d022      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a2:	d01d      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a1b      	ldr	r2, [pc, #108]	; (800aa18 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d018      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a1a      	ldr	r2, [pc, #104]	; (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d013      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a18      	ldr	r2, [pc, #96]	; (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d00e      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a19      	ldr	r2, [pc, #100]	; (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d009      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a18      	ldr	r2, [pc, #96]	; (800aa34 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d004      	beq.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a17      	ldr	r2, [pc, #92]	; (800aa38 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d10c      	bne.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40010000 	.word	0x40010000
 800aa18:	40000400 	.word	0x40000400
 800aa1c:	40000800 	.word	0x40000800
 800aa20:	40000c00 	.word	0x40000c00
 800aa24:	40001000 	.word	0x40001000
 800aa28:	40001400 	.word	0x40001400
 800aa2c:	40010400 	.word	0x40010400
 800aa30:	0800be9c 	.word	0x0800be9c
 800aa34:	40014000 	.word	0x40014000
 800aa38:	40001800 	.word	0x40001800

0800aa3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a5e      	ldr	r2, [pc, #376]	; (800abc8 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d009      	beq.n	800aa68 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a5c      	ldr	r2, [pc, #368]	; (800abcc <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d004      	beq.n	800aa68 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800aa5e:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800aa62:	485b      	ldr	r0, [pc, #364]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa64:	f7f7 ff63 	bl	800292e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa70:	d008      	beq.n	800aa84 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800aa7a:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800aa7e:	4854      	ldr	r0, [pc, #336]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa80:	f7f7 ff55 	bl	800292e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa8c:	d008      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d004      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800aa96:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800aa9a:	484d      	ldr	r0, [pc, #308]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aa9c:	f7f7 ff47 	bl	800292e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d013      	beq.n	800aad0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab0:	d00e      	beq.n	800aad0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaba:	d009      	beq.n	800aad0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aac4:	d004      	beq.n	800aad0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800aac6:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800aaca:	4841      	ldr	r0, [pc, #260]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aacc:	f7f7 ff2f 	bl	800292e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	2bff      	cmp	r3, #255	; 0xff
 800aad6:	d904      	bls.n	800aae2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800aad8:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800aadc:	483c      	ldr	r0, [pc, #240]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aade:	f7f7 ff26 	bl	800292e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaea:	d008      	beq.n	800aafe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aaf4:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800aaf8:	4835      	ldr	r0, [pc, #212]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800aafa:	f7f7 ff18 	bl	800292e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab0e:	d004      	beq.n	800ab1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800ab10:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800ab14:	482e      	ldr	r0, [pc, #184]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab16:	f7f7 ff0a 	bl	800292e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab22:	d008      	beq.n	800ab36 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d004      	beq.n	800ab36 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800ab2c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800ab30:	4827      	ldr	r0, [pc, #156]	; (800abd0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800ab32:	f7f7 fefc 	bl	800292e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d101      	bne.n	800ab44 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e03d      	b.n	800abc0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	4313      	orrs	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400
 800abd0:	0800be9c 	.word	0x0800be9c

0800abd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e0be      	b.n	800ad64 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d031      	beq.n	800ac52 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a5e      	ldr	r2, [pc, #376]	; (800ad6c <HAL_UART_Init+0x198>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d013      	beq.n	800ac20 <HAL_UART_Init+0x4c>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a5c      	ldr	r2, [pc, #368]	; (800ad70 <HAL_UART_Init+0x19c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d00e      	beq.n	800ac20 <HAL_UART_Init+0x4c>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a5b      	ldr	r2, [pc, #364]	; (800ad74 <HAL_UART_Init+0x1a0>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d009      	beq.n	800ac20 <HAL_UART_Init+0x4c>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a59      	ldr	r2, [pc, #356]	; (800ad78 <HAL_UART_Init+0x1a4>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d004      	beq.n	800ac20 <HAL_UART_Init+0x4c>
 800ac16:	f240 114b 	movw	r1, #331	; 0x14b
 800ac1a:	4858      	ldr	r0, [pc, #352]	; (800ad7c <HAL_UART_Init+0x1a8>)
 800ac1c:	f7f7 fe87 	bl	800292e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d041      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac30:	d03c      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac3a:	d037      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac44:	d032      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac46:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800ac4a:	484c      	ldr	r0, [pc, #304]	; (800ad7c <HAL_UART_Init+0x1a8>)
 800ac4c:	f7f7 fe6f 	bl	800292e <assert_failed>
 800ac50:	e02c      	b.n	800acac <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a45      	ldr	r2, [pc, #276]	; (800ad6c <HAL_UART_Init+0x198>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d027      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a43      	ldr	r2, [pc, #268]	; (800ad70 <HAL_UART_Init+0x19c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d022      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a42      	ldr	r2, [pc, #264]	; (800ad74 <HAL_UART_Init+0x1a0>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d01d      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a42      	ldr	r2, [pc, #264]	; (800ad80 <HAL_UART_Init+0x1ac>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d018      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a41      	ldr	r2, [pc, #260]	; (800ad84 <HAL_UART_Init+0x1b0>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d013      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a3b      	ldr	r2, [pc, #236]	; (800ad78 <HAL_UART_Init+0x1a4>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d00e      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a3d      	ldr	r2, [pc, #244]	; (800ad88 <HAL_UART_Init+0x1b4>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d009      	beq.n	800acac <HAL_UART_Init+0xd8>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a3b      	ldr	r2, [pc, #236]	; (800ad8c <HAL_UART_Init+0x1b8>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d004      	beq.n	800acac <HAL_UART_Init+0xd8>
 800aca2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800aca6:	4835      	ldr	r0, [pc, #212]	; (800ad7c <HAL_UART_Init+0x1a8>)
 800aca8:	f7f7 fe41 	bl	800292e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d009      	beq.n	800acc8 <HAL_UART_Init+0xf4>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acbc:	d004      	beq.n	800acc8 <HAL_UART_Init+0xf4>
 800acbe:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800acc2:	482e      	ldr	r0, [pc, #184]	; (800ad7c <HAL_UART_Init+0x1a8>)
 800acc4:	f7f7 fe33 	bl	800292e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <HAL_UART_Init+0x110>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acd8:	d004      	beq.n	800ace4 <HAL_UART_Init+0x110>
 800acda:	f240 1153 	movw	r1, #339	; 0x153
 800acde:	4827      	ldr	r0, [pc, #156]	; (800ad7c <HAL_UART_Init+0x1a8>)
 800ace0:	f7f7 fe25 	bl	800292e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7f8 fe3d 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2224      	movs	r2, #36	; 0x24
 800ad02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f83a 	bl	800ad90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691a      	ldr	r2, [r3, #16]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695a      	ldr	r2, [r3, #20]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68da      	ldr	r2, [r3, #12]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	40011000 	.word	0x40011000
 800ad70:	40004400 	.word	0x40004400
 800ad74:	40004800 	.word	0x40004800
 800ad78:	40011400 	.word	0x40011400
 800ad7c:	0800bed8 	.word	0x0800bed8
 800ad80:	40004c00 	.word	0x40004c00
 800ad84:	40005000 	.word	0x40005000
 800ad88:	40007800 	.word	0x40007800
 800ad8c:	40007c00 	.word	0x40007c00

0800ad90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	b0bd      	sub	sp, #244	; 0xf4
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ad9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	4bae      	ldr	r3, [pc, #696]	; (800b05c <UART_SetConfig+0x2cc>)
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d904      	bls.n	800adb2 <UART_SetConfig+0x22>
 800ada8:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800adac:	48ac      	ldr	r0, [pc, #688]	; (800b060 <UART_SetConfig+0x2d0>)
 800adae:	f7f7 fdbe 	bl	800292e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800adb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_SetConfig+0x42>
 800adbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adc6:	d004      	beq.n	800add2 <UART_SetConfig+0x42>
 800adc8:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800adcc:	48a4      	ldr	r0, [pc, #656]	; (800b060 <UART_SetConfig+0x2d0>)
 800adce:	f7f7 fdae 	bl	800292e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800add2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d010      	beq.n	800adfe <UART_SetConfig+0x6e>
 800addc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade6:	d00a      	beq.n	800adfe <UART_SetConfig+0x6e>
 800ade8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800adf2:	d004      	beq.n	800adfe <UART_SetConfig+0x6e>
 800adf4:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800adf8:	4899      	ldr	r0, [pc, #612]	; (800b060 <UART_SetConfig+0x2d0>)
 800adfa:	f7f7 fd98 	bl	800292e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae02:	695a      	ldr	r2, [r3, #20]
 800ae04:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800ae08:	4013      	ands	r3, r2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d104      	bne.n	800ae18 <UART_SetConfig+0x88>
 800ae0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d104      	bne.n	800ae22 <UART_SetConfig+0x92>
 800ae18:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800ae1c:	4890      	ldr	r0, [pc, #576]	; (800b060 <UART_SetConfig+0x2d0>)
 800ae1e:	f7f7 fd86 	bl	800292e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae32:	68d9      	ldr	r1, [r3, #12]
 800ae34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	ea40 0301 	orr.w	r3, r0, r1
 800ae3e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	431a      	orrs	r2, r3
 800ae56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae6e:	f021 010c 	bic.w	r1, r1, #12
 800ae72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	6999      	ldr	r1, [r3, #24]
 800ae92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	ea40 0301 	orr.w	r3, r0, r1
 800ae9c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea2:	69db      	ldr	r3, [r3, #28]
 800aea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aea8:	f040 81a9 	bne.w	800b1fe <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aeac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	4b6c      	ldr	r3, [pc, #432]	; (800b064 <UART_SetConfig+0x2d4>)
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d006      	beq.n	800aec6 <UART_SetConfig+0x136>
 800aeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	4b6a      	ldr	r3, [pc, #424]	; (800b068 <UART_SetConfig+0x2d8>)
 800aec0:	429a      	cmp	r2, r3
 800aec2:	f040 80d5 	bne.w	800b070 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aec6:	f7fc ff9f 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 800aeca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aed2:	461c      	mov	r4, r3
 800aed4:	f04f 0500 	mov.w	r5, #0
 800aed8:	4622      	mov	r2, r4
 800aeda:	462b      	mov	r3, r5
 800aedc:	1891      	adds	r1, r2, r2
 800aede:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800aee2:	415b      	adcs	r3, r3
 800aee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aee8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800aeec:	1912      	adds	r2, r2, r4
 800aeee:	eb45 0303 	adc.w	r3, r5, r3
 800aef2:	f04f 0000 	mov.w	r0, #0
 800aef6:	f04f 0100 	mov.w	r1, #0
 800aefa:	00d9      	lsls	r1, r3, #3
 800aefc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af00:	00d0      	lsls	r0, r2, #3
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	1911      	adds	r1, r2, r4
 800af08:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800af0c:	416b      	adcs	r3, r5
 800af0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	461a      	mov	r2, r3
 800af1a:	f04f 0300 	mov.w	r3, #0
 800af1e:	1891      	adds	r1, r2, r2
 800af20:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800af24:	415b      	adcs	r3, r3
 800af26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af2a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800af2e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800af32:	f7f5 fe61 	bl	8000bf8 <__aeabi_uldivmod>
 800af36:	4602      	mov	r2, r0
 800af38:	460b      	mov	r3, r1
 800af3a:	4b4c      	ldr	r3, [pc, #304]	; (800b06c <UART_SetConfig+0x2dc>)
 800af3c:	fba3 2302 	umull	r2, r3, r3, r2
 800af40:	095b      	lsrs	r3, r3, #5
 800af42:	011e      	lsls	r6, r3, #4
 800af44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af48:	461c      	mov	r4, r3
 800af4a:	f04f 0500 	mov.w	r5, #0
 800af4e:	4622      	mov	r2, r4
 800af50:	462b      	mov	r3, r5
 800af52:	1891      	adds	r1, r2, r2
 800af54:	67b9      	str	r1, [r7, #120]	; 0x78
 800af56:	415b      	adcs	r3, r3
 800af58:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af5a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800af5e:	1912      	adds	r2, r2, r4
 800af60:	eb45 0303 	adc.w	r3, r5, r3
 800af64:	f04f 0000 	mov.w	r0, #0
 800af68:	f04f 0100 	mov.w	r1, #0
 800af6c:	00d9      	lsls	r1, r3, #3
 800af6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af72:	00d0      	lsls	r0, r2, #3
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	1911      	adds	r1, r2, r4
 800af7a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800af7e:	416b      	adcs	r3, r5
 800af80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	461a      	mov	r2, r3
 800af8c:	f04f 0300 	mov.w	r3, #0
 800af90:	1891      	adds	r1, r2, r2
 800af92:	6739      	str	r1, [r7, #112]	; 0x70
 800af94:	415b      	adcs	r3, r3
 800af96:	677b      	str	r3, [r7, #116]	; 0x74
 800af98:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800af9c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800afa0:	f7f5 fe2a 	bl	8000bf8 <__aeabi_uldivmod>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4b30      	ldr	r3, [pc, #192]	; (800b06c <UART_SetConfig+0x2dc>)
 800afaa:	fba3 1302 	umull	r1, r3, r3, r2
 800afae:	095b      	lsrs	r3, r3, #5
 800afb0:	2164      	movs	r1, #100	; 0x64
 800afb2:	fb01 f303 	mul.w	r3, r1, r3
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	3332      	adds	r3, #50	; 0x32
 800afbc:	4a2b      	ldr	r2, [pc, #172]	; (800b06c <UART_SetConfig+0x2dc>)
 800afbe:	fba2 2303 	umull	r2, r3, r2, r3
 800afc2:	095b      	lsrs	r3, r3, #5
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afca:	441e      	add	r6, r3
 800afcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afd0:	4618      	mov	r0, r3
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	1894      	adds	r4, r2, r2
 800afdc:	66bc      	str	r4, [r7, #104]	; 0x68
 800afde:	415b      	adcs	r3, r3
 800afe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afe2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800afe6:	1812      	adds	r2, r2, r0
 800afe8:	eb41 0303 	adc.w	r3, r1, r3
 800afec:	f04f 0400 	mov.w	r4, #0
 800aff0:	f04f 0500 	mov.w	r5, #0
 800aff4:	00dd      	lsls	r5, r3, #3
 800aff6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800affa:	00d4      	lsls	r4, r2, #3
 800affc:	4622      	mov	r2, r4
 800affe:	462b      	mov	r3, r5
 800b000:	1814      	adds	r4, r2, r0
 800b002:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b006:	414b      	adcs	r3, r1
 800b008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	461a      	mov	r2, r3
 800b014:	f04f 0300 	mov.w	r3, #0
 800b018:	1891      	adds	r1, r2, r2
 800b01a:	6639      	str	r1, [r7, #96]	; 0x60
 800b01c:	415b      	adcs	r3, r3
 800b01e:	667b      	str	r3, [r7, #100]	; 0x64
 800b020:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b024:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b028:	f7f5 fde6 	bl	8000bf8 <__aeabi_uldivmod>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4b0e      	ldr	r3, [pc, #56]	; (800b06c <UART_SetConfig+0x2dc>)
 800b032:	fba3 1302 	umull	r1, r3, r3, r2
 800b036:	095b      	lsrs	r3, r3, #5
 800b038:	2164      	movs	r1, #100	; 0x64
 800b03a:	fb01 f303 	mul.w	r3, r1, r3
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	3332      	adds	r3, #50	; 0x32
 800b044:	4a09      	ldr	r2, [pc, #36]	; (800b06c <UART_SetConfig+0x2dc>)
 800b046:	fba2 2303 	umull	r2, r3, r2, r3
 800b04a:	095b      	lsrs	r3, r3, #5
 800b04c:	f003 0207 	and.w	r2, r3, #7
 800b050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4432      	add	r2, r6
 800b058:	609a      	str	r2, [r3, #8]
 800b05a:	e277      	b.n	800b54c <UART_SetConfig+0x7bc>
 800b05c:	00a037a0 	.word	0x00a037a0
 800b060:	0800bed8 	.word	0x0800bed8
 800b064:	40011000 	.word	0x40011000
 800b068:	40011400 	.word	0x40011400
 800b06c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b070:	f7fc feb6 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 800b074:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b07c:	461c      	mov	r4, r3
 800b07e:	f04f 0500 	mov.w	r5, #0
 800b082:	4622      	mov	r2, r4
 800b084:	462b      	mov	r3, r5
 800b086:	1891      	adds	r1, r2, r2
 800b088:	65b9      	str	r1, [r7, #88]	; 0x58
 800b08a:	415b      	adcs	r3, r3
 800b08c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b08e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b092:	1912      	adds	r2, r2, r4
 800b094:	eb45 0303 	adc.w	r3, r5, r3
 800b098:	f04f 0000 	mov.w	r0, #0
 800b09c:	f04f 0100 	mov.w	r1, #0
 800b0a0:	00d9      	lsls	r1, r3, #3
 800b0a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b0a6:	00d0      	lsls	r0, r2, #3
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	1911      	adds	r1, r2, r4
 800b0ae:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b0b2:	416b      	adcs	r3, r5
 800b0b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f04f 0300 	mov.w	r3, #0
 800b0c4:	1891      	adds	r1, r2, r2
 800b0c6:	6539      	str	r1, [r7, #80]	; 0x50
 800b0c8:	415b      	adcs	r3, r3
 800b0ca:	657b      	str	r3, [r7, #84]	; 0x54
 800b0cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b0d0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b0d4:	f7f5 fd90 	bl	8000bf8 <__aeabi_uldivmod>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4bb3      	ldr	r3, [pc, #716]	; (800b3ac <UART_SetConfig+0x61c>)
 800b0de:	fba3 2302 	umull	r2, r3, r3, r2
 800b0e2:	095b      	lsrs	r3, r3, #5
 800b0e4:	011e      	lsls	r6, r3, #4
 800b0e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	f04f 0500 	mov.w	r5, #0
 800b0f0:	4622      	mov	r2, r4
 800b0f2:	462b      	mov	r3, r5
 800b0f4:	1891      	adds	r1, r2, r2
 800b0f6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0f8:	415b      	adcs	r3, r3
 800b0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b100:	1912      	adds	r2, r2, r4
 800b102:	eb45 0303 	adc.w	r3, r5, r3
 800b106:	f04f 0000 	mov.w	r0, #0
 800b10a:	f04f 0100 	mov.w	r1, #0
 800b10e:	00d9      	lsls	r1, r3, #3
 800b110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b114:	00d0      	lsls	r0, r2, #3
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	1911      	adds	r1, r2, r4
 800b11c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b120:	416b      	adcs	r3, r5
 800b122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	461a      	mov	r2, r3
 800b12e:	f04f 0300 	mov.w	r3, #0
 800b132:	1891      	adds	r1, r2, r2
 800b134:	6439      	str	r1, [r7, #64]	; 0x40
 800b136:	415b      	adcs	r3, r3
 800b138:	647b      	str	r3, [r7, #68]	; 0x44
 800b13a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b13e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b142:	f7f5 fd59 	bl	8000bf8 <__aeabi_uldivmod>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4b98      	ldr	r3, [pc, #608]	; (800b3ac <UART_SetConfig+0x61c>)
 800b14c:	fba3 1302 	umull	r1, r3, r3, r2
 800b150:	095b      	lsrs	r3, r3, #5
 800b152:	2164      	movs	r1, #100	; 0x64
 800b154:	fb01 f303 	mul.w	r3, r1, r3
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	3332      	adds	r3, #50	; 0x32
 800b15e:	4a93      	ldr	r2, [pc, #588]	; (800b3ac <UART_SetConfig+0x61c>)
 800b160:	fba2 2303 	umull	r2, r3, r2, r3
 800b164:	095b      	lsrs	r3, r3, #5
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b16c:	441e      	add	r6, r3
 800b16e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b172:	4618      	mov	r0, r3
 800b174:	f04f 0100 	mov.w	r1, #0
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	1894      	adds	r4, r2, r2
 800b17e:	63bc      	str	r4, [r7, #56]	; 0x38
 800b180:	415b      	adcs	r3, r3
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b188:	1812      	adds	r2, r2, r0
 800b18a:	eb41 0303 	adc.w	r3, r1, r3
 800b18e:	f04f 0400 	mov.w	r4, #0
 800b192:	f04f 0500 	mov.w	r5, #0
 800b196:	00dd      	lsls	r5, r3, #3
 800b198:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b19c:	00d4      	lsls	r4, r2, #3
 800b19e:	4622      	mov	r2, r4
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	1814      	adds	r4, r2, r0
 800b1a4:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800b1a8:	414b      	adcs	r3, r1
 800b1aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	f04f 0300 	mov.w	r3, #0
 800b1ba:	1891      	adds	r1, r2, r2
 800b1bc:	6339      	str	r1, [r7, #48]	; 0x30
 800b1be:	415b      	adcs	r3, r3
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b1c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b1c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1ca:	f7f5 fd15 	bl	8000bf8 <__aeabi_uldivmod>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4b76      	ldr	r3, [pc, #472]	; (800b3ac <UART_SetConfig+0x61c>)
 800b1d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	2164      	movs	r1, #100	; 0x64
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	3332      	adds	r3, #50	; 0x32
 800b1e6:	4a71      	ldr	r2, [pc, #452]	; (800b3ac <UART_SetConfig+0x61c>)
 800b1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ec:	095b      	lsrs	r3, r3, #5
 800b1ee:	f003 0207 	and.w	r2, r3, #7
 800b1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4432      	add	r2, r6
 800b1fa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b1fc:	e1a6      	b.n	800b54c <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	4b6a      	ldr	r3, [pc, #424]	; (800b3b0 <UART_SetConfig+0x620>)
 800b206:	429a      	cmp	r2, r3
 800b208:	d006      	beq.n	800b218 <UART_SetConfig+0x488>
 800b20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	4b68      	ldr	r3, [pc, #416]	; (800b3b4 <UART_SetConfig+0x624>)
 800b212:	429a      	cmp	r2, r3
 800b214:	f040 80d0 	bne.w	800b3b8 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b218:	f7fc fdf6 	bl	8007e08 <HAL_RCC_GetPCLK2Freq>
 800b21c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b220:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b224:	461c      	mov	r4, r3
 800b226:	f04f 0500 	mov.w	r5, #0
 800b22a:	4622      	mov	r2, r4
 800b22c:	462b      	mov	r3, r5
 800b22e:	1891      	adds	r1, r2, r2
 800b230:	62b9      	str	r1, [r7, #40]	; 0x28
 800b232:	415b      	adcs	r3, r3
 800b234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b23a:	1912      	adds	r2, r2, r4
 800b23c:	eb45 0303 	adc.w	r3, r5, r3
 800b240:	f04f 0000 	mov.w	r0, #0
 800b244:	f04f 0100 	mov.w	r1, #0
 800b248:	00d9      	lsls	r1, r3, #3
 800b24a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b24e:	00d0      	lsls	r0, r2, #3
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	eb12 0a04 	adds.w	sl, r2, r4
 800b258:	eb43 0b05 	adc.w	fp, r3, r5
 800b25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4618      	mov	r0, r3
 800b264:	f04f 0100 	mov.w	r1, #0
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	f04f 0300 	mov.w	r3, #0
 800b270:	008b      	lsls	r3, r1, #2
 800b272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b276:	0082      	lsls	r2, r0, #2
 800b278:	4650      	mov	r0, sl
 800b27a:	4659      	mov	r1, fp
 800b27c:	f7f5 fcbc 	bl	8000bf8 <__aeabi_uldivmod>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	4b49      	ldr	r3, [pc, #292]	; (800b3ac <UART_SetConfig+0x61c>)
 800b286:	fba3 2302 	umull	r2, r3, r3, r2
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	011e      	lsls	r6, r3, #4
 800b28e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b292:	4618      	mov	r0, r3
 800b294:	f04f 0100 	mov.w	r1, #0
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	1894      	adds	r4, r2, r2
 800b29e:	623c      	str	r4, [r7, #32]
 800b2a0:	415b      	adcs	r3, r3
 800b2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b2a8:	1812      	adds	r2, r2, r0
 800b2aa:	eb41 0303 	adc.w	r3, r1, r3
 800b2ae:	f04f 0400 	mov.w	r4, #0
 800b2b2:	f04f 0500 	mov.w	r5, #0
 800b2b6:	00dd      	lsls	r5, r3, #3
 800b2b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b2bc:	00d4      	lsls	r4, r2, #3
 800b2be:	4622      	mov	r2, r4
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	1814      	adds	r4, r2, r0
 800b2c4:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800b2c8:	414b      	adcs	r3, r1
 800b2ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f04f 0100 	mov.w	r1, #0
 800b2da:	f04f 0200 	mov.w	r2, #0
 800b2de:	f04f 0300 	mov.w	r3, #0
 800b2e2:	008b      	lsls	r3, r1, #2
 800b2e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b2e8:	0082      	lsls	r2, r0, #2
 800b2ea:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800b2ee:	f7f5 fc83 	bl	8000bf8 <__aeabi_uldivmod>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4b2d      	ldr	r3, [pc, #180]	; (800b3ac <UART_SetConfig+0x61c>)
 800b2f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b2fc:	095b      	lsrs	r3, r3, #5
 800b2fe:	2164      	movs	r1, #100	; 0x64
 800b300:	fb01 f303 	mul.w	r3, r1, r3
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	3332      	adds	r3, #50	; 0x32
 800b30a:	4a28      	ldr	r2, [pc, #160]	; (800b3ac <UART_SetConfig+0x61c>)
 800b30c:	fba2 2303 	umull	r2, r3, r2, r3
 800b310:	095b      	lsrs	r3, r3, #5
 800b312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b316:	441e      	add	r6, r3
 800b318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b31c:	4618      	mov	r0, r3
 800b31e:	f04f 0100 	mov.w	r1, #0
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	1894      	adds	r4, r2, r2
 800b328:	61bc      	str	r4, [r7, #24]
 800b32a:	415b      	adcs	r3, r3
 800b32c:	61fb      	str	r3, [r7, #28]
 800b32e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b332:	1812      	adds	r2, r2, r0
 800b334:	eb41 0303 	adc.w	r3, r1, r3
 800b338:	f04f 0400 	mov.w	r4, #0
 800b33c:	f04f 0500 	mov.w	r5, #0
 800b340:	00dd      	lsls	r5, r3, #3
 800b342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b346:	00d4      	lsls	r4, r2, #3
 800b348:	4622      	mov	r2, r4
 800b34a:	462b      	mov	r3, r5
 800b34c:	1814      	adds	r4, r2, r0
 800b34e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800b352:	414b      	adcs	r3, r1
 800b354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4618      	mov	r0, r3
 800b360:	f04f 0100 	mov.w	r1, #0
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	f04f 0300 	mov.w	r3, #0
 800b36c:	008b      	lsls	r3, r1, #2
 800b36e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b372:	0082      	lsls	r2, r0, #2
 800b374:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800b378:	f7f5 fc3e 	bl	8000bf8 <__aeabi_uldivmod>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <UART_SetConfig+0x61c>)
 800b382:	fba3 1302 	umull	r1, r3, r3, r2
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	2164      	movs	r1, #100	; 0x64
 800b38a:	fb01 f303 	mul.w	r3, r1, r3
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	3332      	adds	r3, #50	; 0x32
 800b394:	4a05      	ldr	r2, [pc, #20]	; (800b3ac <UART_SetConfig+0x61c>)
 800b396:	fba2 2303 	umull	r2, r3, r2, r3
 800b39a:	095b      	lsrs	r3, r3, #5
 800b39c:	f003 020f 	and.w	r2, r3, #15
 800b3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4432      	add	r2, r6
 800b3a8:	609a      	str	r2, [r3, #8]
 800b3aa:	e0cf      	b.n	800b54c <UART_SetConfig+0x7bc>
 800b3ac:	51eb851f 	.word	0x51eb851f
 800b3b0:	40011000 	.word	0x40011000
 800b3b4:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3b8:	f7fc fd12 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 800b3bc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3c4:	461c      	mov	r4, r3
 800b3c6:	f04f 0500 	mov.w	r5, #0
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	462b      	mov	r3, r5
 800b3ce:	1891      	adds	r1, r2, r2
 800b3d0:	6139      	str	r1, [r7, #16]
 800b3d2:	415b      	adcs	r3, r3
 800b3d4:	617b      	str	r3, [r7, #20]
 800b3d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b3da:	1912      	adds	r2, r2, r4
 800b3dc:	eb45 0303 	adc.w	r3, r5, r3
 800b3e0:	f04f 0000 	mov.w	r0, #0
 800b3e4:	f04f 0100 	mov.w	r1, #0
 800b3e8:	00d9      	lsls	r1, r3, #3
 800b3ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3ee:	00d0      	lsls	r0, r2, #3
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	eb12 0804 	adds.w	r8, r2, r4
 800b3f8:	eb43 0905 	adc.w	r9, r3, r5
 800b3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	4618      	mov	r0, r3
 800b404:	f04f 0100 	mov.w	r1, #0
 800b408:	f04f 0200 	mov.w	r2, #0
 800b40c:	f04f 0300 	mov.w	r3, #0
 800b410:	008b      	lsls	r3, r1, #2
 800b412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b416:	0082      	lsls	r2, r0, #2
 800b418:	4640      	mov	r0, r8
 800b41a:	4649      	mov	r1, r9
 800b41c:	f7f5 fbec 	bl	8000bf8 <__aeabi_uldivmod>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4b4c      	ldr	r3, [pc, #304]	; (800b558 <UART_SetConfig+0x7c8>)
 800b426:	fba3 2302 	umull	r2, r3, r3, r2
 800b42a:	095b      	lsrs	r3, r3, #5
 800b42c:	011e      	lsls	r6, r3, #4
 800b42e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b432:	4618      	mov	r0, r3
 800b434:	f04f 0100 	mov.w	r1, #0
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	1894      	adds	r4, r2, r2
 800b43e:	60bc      	str	r4, [r7, #8]
 800b440:	415b      	adcs	r3, r3
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b448:	1812      	adds	r2, r2, r0
 800b44a:	eb41 0303 	adc.w	r3, r1, r3
 800b44e:	f04f 0400 	mov.w	r4, #0
 800b452:	f04f 0500 	mov.w	r5, #0
 800b456:	00dd      	lsls	r5, r3, #3
 800b458:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b45c:	00d4      	lsls	r4, r2, #3
 800b45e:	4622      	mov	r2, r4
 800b460:	462b      	mov	r3, r5
 800b462:	1814      	adds	r4, r2, r0
 800b464:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b468:	414b      	adcs	r3, r1
 800b46a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f04f 0100 	mov.w	r1, #0
 800b47a:	f04f 0200 	mov.w	r2, #0
 800b47e:	f04f 0300 	mov.w	r3, #0
 800b482:	008b      	lsls	r3, r1, #2
 800b484:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b488:	0082      	lsls	r2, r0, #2
 800b48a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b48e:	f7f5 fbb3 	bl	8000bf8 <__aeabi_uldivmod>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4b30      	ldr	r3, [pc, #192]	; (800b558 <UART_SetConfig+0x7c8>)
 800b498:	fba3 1302 	umull	r1, r3, r3, r2
 800b49c:	095b      	lsrs	r3, r3, #5
 800b49e:	2164      	movs	r1, #100	; 0x64
 800b4a0:	fb01 f303 	mul.w	r3, r1, r3
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	011b      	lsls	r3, r3, #4
 800b4a8:	3332      	adds	r3, #50	; 0x32
 800b4aa:	4a2b      	ldr	r2, [pc, #172]	; (800b558 <UART_SetConfig+0x7c8>)
 800b4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b0:	095b      	lsrs	r3, r3, #5
 800b4b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4b6:	441e      	add	r6, r3
 800b4b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f04f 0100 	mov.w	r1, #0
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	1894      	adds	r4, r2, r2
 800b4c8:	603c      	str	r4, [r7, #0]
 800b4ca:	415b      	adcs	r3, r3
 800b4cc:	607b      	str	r3, [r7, #4]
 800b4ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4d2:	1812      	adds	r2, r2, r0
 800b4d4:	eb41 0303 	adc.w	r3, r1, r3
 800b4d8:	f04f 0400 	mov.w	r4, #0
 800b4dc:	f04f 0500 	mov.w	r5, #0
 800b4e0:	00dd      	lsls	r5, r3, #3
 800b4e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b4e6:	00d4      	lsls	r4, r2, #3
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	1814      	adds	r4, r2, r0
 800b4ee:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b4f2:	414b      	adcs	r3, r1
 800b4f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f04f 0100 	mov.w	r1, #0
 800b504:	f04f 0200 	mov.w	r2, #0
 800b508:	f04f 0300 	mov.w	r3, #0
 800b50c:	008b      	lsls	r3, r1, #2
 800b50e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b512:	0082      	lsls	r2, r0, #2
 800b514:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b518:	f7f5 fb6e 	bl	8000bf8 <__aeabi_uldivmod>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <UART_SetConfig+0x7c8>)
 800b522:	fba3 1302 	umull	r1, r3, r3, r2
 800b526:	095b      	lsrs	r3, r3, #5
 800b528:	2164      	movs	r1, #100	; 0x64
 800b52a:	fb01 f303 	mul.w	r3, r1, r3
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	011b      	lsls	r3, r3, #4
 800b532:	3332      	adds	r3, #50	; 0x32
 800b534:	4a08      	ldr	r2, [pc, #32]	; (800b558 <UART_SetConfig+0x7c8>)
 800b536:	fba2 2303 	umull	r2, r3, r2, r3
 800b53a:	095b      	lsrs	r3, r3, #5
 800b53c:	f003 020f 	and.w	r2, r3, #15
 800b540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4432      	add	r2, r6
 800b548:	609a      	str	r2, [r3, #8]
}
 800b54a:	e7ff      	b.n	800b54c <UART_SetConfig+0x7bc>
 800b54c:	bf00      	nop
 800b54e:	37f4      	adds	r7, #244	; 0xf4
 800b550:	46bd      	mov	sp, r7
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	bf00      	nop
 800b558:	51eb851f 	.word	0x51eb851f

0800b55c <__errno>:
 800b55c:	4b01      	ldr	r3, [pc, #4]	; (800b564 <__errno+0x8>)
 800b55e:	6818      	ldr	r0, [r3, #0]
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	2000020c 	.word	0x2000020c

0800b568 <__libc_init_array>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	4d0d      	ldr	r5, [pc, #52]	; (800b5a0 <__libc_init_array+0x38>)
 800b56c:	4c0d      	ldr	r4, [pc, #52]	; (800b5a4 <__libc_init_array+0x3c>)
 800b56e:	1b64      	subs	r4, r4, r5
 800b570:	10a4      	asrs	r4, r4, #2
 800b572:	2600      	movs	r6, #0
 800b574:	42a6      	cmp	r6, r4
 800b576:	d109      	bne.n	800b58c <__libc_init_array+0x24>
 800b578:	4d0b      	ldr	r5, [pc, #44]	; (800b5a8 <__libc_init_array+0x40>)
 800b57a:	4c0c      	ldr	r4, [pc, #48]	; (800b5ac <__libc_init_array+0x44>)
 800b57c:	f000 fb7e 	bl	800bc7c <_init>
 800b580:	1b64      	subs	r4, r4, r5
 800b582:	10a4      	asrs	r4, r4, #2
 800b584:	2600      	movs	r6, #0
 800b586:	42a6      	cmp	r6, r4
 800b588:	d105      	bne.n	800b596 <__libc_init_array+0x2e>
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b590:	4798      	blx	r3
 800b592:	3601      	adds	r6, #1
 800b594:	e7ee      	b.n	800b574 <__libc_init_array+0xc>
 800b596:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59a:	4798      	blx	r3
 800b59c:	3601      	adds	r6, #1
 800b59e:	e7f2      	b.n	800b586 <__libc_init_array+0x1e>
 800b5a0:	0800bfe0 	.word	0x0800bfe0
 800b5a4:	0800bfe0 	.word	0x0800bfe0
 800b5a8:	0800bfe0 	.word	0x0800bfe0
 800b5ac:	0800bfe4 	.word	0x0800bfe4

0800b5b0 <memset>:
 800b5b0:	4402      	add	r2, r0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d100      	bne.n	800b5ba <memset+0xa>
 800b5b8:	4770      	bx	lr
 800b5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b5be:	e7f9      	b.n	800b5b4 <memset+0x4>

0800b5c0 <atan>:
 800b5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	ec55 4b10 	vmov	r4, r5, d0
 800b5c8:	4bc3      	ldr	r3, [pc, #780]	; (800b8d8 <atan+0x318>)
 800b5ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5ce:	429e      	cmp	r6, r3
 800b5d0:	46ab      	mov	fp, r5
 800b5d2:	dd18      	ble.n	800b606 <atan+0x46>
 800b5d4:	4bc1      	ldr	r3, [pc, #772]	; (800b8dc <atan+0x31c>)
 800b5d6:	429e      	cmp	r6, r3
 800b5d8:	dc01      	bgt.n	800b5de <atan+0x1e>
 800b5da:	d109      	bne.n	800b5f0 <atan+0x30>
 800b5dc:	b144      	cbz	r4, 800b5f0 <atan+0x30>
 800b5de:	4622      	mov	r2, r4
 800b5e0:	462b      	mov	r3, r5
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7f4 fe09 	bl	80001fc <__adddf3>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	460d      	mov	r5, r1
 800b5ee:	e006      	b.n	800b5fe <atan+0x3e>
 800b5f0:	f1bb 0f00 	cmp.w	fp, #0
 800b5f4:	f300 8131 	bgt.w	800b85a <atan+0x29a>
 800b5f8:	a59b      	add	r5, pc, #620	; (adr r5, 800b868 <atan+0x2a8>)
 800b5fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b5fe:	ec45 4b10 	vmov	d0, r4, r5
 800b602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	4bb6      	ldr	r3, [pc, #728]	; (800b8e0 <atan+0x320>)
 800b608:	429e      	cmp	r6, r3
 800b60a:	dc14      	bgt.n	800b636 <atan+0x76>
 800b60c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b610:	429e      	cmp	r6, r3
 800b612:	dc0d      	bgt.n	800b630 <atan+0x70>
 800b614:	a396      	add	r3, pc, #600	; (adr r3, 800b870 <atan+0x2b0>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	ee10 0a10 	vmov	r0, s0
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f4 fdec 	bl	80001fc <__adddf3>
 800b624:	4baf      	ldr	r3, [pc, #700]	; (800b8e4 <atan+0x324>)
 800b626:	2200      	movs	r2, #0
 800b628:	f7f5 fa2e 	bl	8000a88 <__aeabi_dcmpgt>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d1e6      	bne.n	800b5fe <atan+0x3e>
 800b630:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b634:	e02b      	b.n	800b68e <atan+0xce>
 800b636:	f000 f963 	bl	800b900 <fabs>
 800b63a:	4bab      	ldr	r3, [pc, #684]	; (800b8e8 <atan+0x328>)
 800b63c:	429e      	cmp	r6, r3
 800b63e:	ec55 4b10 	vmov	r4, r5, d0
 800b642:	f300 80bf 	bgt.w	800b7c4 <atan+0x204>
 800b646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b64a:	429e      	cmp	r6, r3
 800b64c:	f300 80a0 	bgt.w	800b790 <atan+0x1d0>
 800b650:	ee10 2a10 	vmov	r2, s0
 800b654:	ee10 0a10 	vmov	r0, s0
 800b658:	462b      	mov	r3, r5
 800b65a:	4629      	mov	r1, r5
 800b65c:	f7f4 fdce 	bl	80001fc <__adddf3>
 800b660:	4ba0      	ldr	r3, [pc, #640]	; (800b8e4 <atan+0x324>)
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 fdc8 	bl	80001f8 <__aeabi_dsub>
 800b668:	2200      	movs	r2, #0
 800b66a:	4606      	mov	r6, r0
 800b66c:	460f      	mov	r7, r1
 800b66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f7f4 fdc1 	bl	80001fc <__adddf3>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f5 f89b 	bl	80007bc <__aeabi_ddiv>
 800b686:	f04f 0a00 	mov.w	sl, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	460d      	mov	r5, r1
 800b68e:	4622      	mov	r2, r4
 800b690:	462b      	mov	r3, r5
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 ff67 	bl	8000568 <__aeabi_dmul>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4680      	mov	r8, r0
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	f7f4 ff61 	bl	8000568 <__aeabi_dmul>
 800b6a6:	a374      	add	r3, pc, #464	; (adr r3, 800b878 <atan+0x2b8>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	f7f4 ff5a 	bl	8000568 <__aeabi_dmul>
 800b6b4:	a372      	add	r3, pc, #456	; (adr r3, 800b880 <atan+0x2c0>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fd9f 	bl	80001fc <__adddf3>
 800b6be:	4632      	mov	r2, r6
 800b6c0:	463b      	mov	r3, r7
 800b6c2:	f7f4 ff51 	bl	8000568 <__aeabi_dmul>
 800b6c6:	a370      	add	r3, pc, #448	; (adr r3, 800b888 <atan+0x2c8>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fd96 	bl	80001fc <__adddf3>
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	463b      	mov	r3, r7
 800b6d4:	f7f4 ff48 	bl	8000568 <__aeabi_dmul>
 800b6d8:	a36d      	add	r3, pc, #436	; (adr r3, 800b890 <atan+0x2d0>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 fd8d 	bl	80001fc <__adddf3>
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	463b      	mov	r3, r7
 800b6e6:	f7f4 ff3f 	bl	8000568 <__aeabi_dmul>
 800b6ea:	a36b      	add	r3, pc, #428	; (adr r3, 800b898 <atan+0x2d8>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fd84 	bl	80001fc <__adddf3>
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	f7f4 ff36 	bl	8000568 <__aeabi_dmul>
 800b6fc:	a368      	add	r3, pc, #416	; (adr r3, 800b8a0 <atan+0x2e0>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f7f4 fd7b 	bl	80001fc <__adddf3>
 800b706:	4642      	mov	r2, r8
 800b708:	464b      	mov	r3, r9
 800b70a:	f7f4 ff2d 	bl	8000568 <__aeabi_dmul>
 800b70e:	a366      	add	r3, pc, #408	; (adr r3, 800b8a8 <atan+0x2e8>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7f4 ff24 	bl	8000568 <__aeabi_dmul>
 800b720:	a363      	add	r3, pc, #396	; (adr r3, 800b8b0 <atan+0x2f0>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fd67 	bl	80001f8 <__aeabi_dsub>
 800b72a:	4632      	mov	r2, r6
 800b72c:	463b      	mov	r3, r7
 800b72e:	f7f4 ff1b 	bl	8000568 <__aeabi_dmul>
 800b732:	a361      	add	r3, pc, #388	; (adr r3, 800b8b8 <atan+0x2f8>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	f7f4 fd5e 	bl	80001f8 <__aeabi_dsub>
 800b73c:	4632      	mov	r2, r6
 800b73e:	463b      	mov	r3, r7
 800b740:	f7f4 ff12 	bl	8000568 <__aeabi_dmul>
 800b744:	a35e      	add	r3, pc, #376	; (adr r3, 800b8c0 <atan+0x300>)
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	f7f4 fd55 	bl	80001f8 <__aeabi_dsub>
 800b74e:	4632      	mov	r2, r6
 800b750:	463b      	mov	r3, r7
 800b752:	f7f4 ff09 	bl	8000568 <__aeabi_dmul>
 800b756:	a35c      	add	r3, pc, #368	; (adr r3, 800b8c8 <atan+0x308>)
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f7f4 fd4c 	bl	80001f8 <__aeabi_dsub>
 800b760:	4632      	mov	r2, r6
 800b762:	463b      	mov	r3, r7
 800b764:	f7f4 ff00 	bl	8000568 <__aeabi_dmul>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4640      	mov	r0, r8
 800b76e:	4649      	mov	r1, r9
 800b770:	f7f4 fd44 	bl	80001fc <__adddf3>
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	f7f4 fef6 	bl	8000568 <__aeabi_dmul>
 800b77c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	d14b      	bne.n	800b81e <atan+0x25e>
 800b786:	4620      	mov	r0, r4
 800b788:	4629      	mov	r1, r5
 800b78a:	f7f4 fd35 	bl	80001f8 <__aeabi_dsub>
 800b78e:	e72c      	b.n	800b5ea <atan+0x2a>
 800b790:	ee10 0a10 	vmov	r0, s0
 800b794:	4b53      	ldr	r3, [pc, #332]	; (800b8e4 <atan+0x324>)
 800b796:	2200      	movs	r2, #0
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 fd2d 	bl	80001f8 <__aeabi_dsub>
 800b79e:	4b51      	ldr	r3, [pc, #324]	; (800b8e4 <atan+0x324>)
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	460f      	mov	r7, r1
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f4 fd27 	bl	80001fc <__adddf3>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	f7f5 f801 	bl	80007bc <__aeabi_ddiv>
 800b7ba:	f04f 0a01 	mov.w	sl, #1
 800b7be:	4604      	mov	r4, r0
 800b7c0:	460d      	mov	r5, r1
 800b7c2:	e764      	b.n	800b68e <atan+0xce>
 800b7c4:	4b49      	ldr	r3, [pc, #292]	; (800b8ec <atan+0x32c>)
 800b7c6:	429e      	cmp	r6, r3
 800b7c8:	da1d      	bge.n	800b806 <atan+0x246>
 800b7ca:	ee10 0a10 	vmov	r0, s0
 800b7ce:	4b48      	ldr	r3, [pc, #288]	; (800b8f0 <atan+0x330>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f4 fd10 	bl	80001f8 <__aeabi_dsub>
 800b7d8:	4b45      	ldr	r3, [pc, #276]	; (800b8f0 <atan+0x330>)
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	f7f4 fec0 	bl	8000568 <__aeabi_dmul>
 800b7e8:	4b3e      	ldr	r3, [pc, #248]	; (800b8e4 <atan+0x324>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f7f4 fd06 	bl	80001fc <__adddf3>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f4 ffe0 	bl	80007bc <__aeabi_ddiv>
 800b7fc:	f04f 0a02 	mov.w	sl, #2
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	e743      	b.n	800b68e <atan+0xce>
 800b806:	462b      	mov	r3, r5
 800b808:	ee10 2a10 	vmov	r2, s0
 800b80c:	4939      	ldr	r1, [pc, #228]	; (800b8f4 <atan+0x334>)
 800b80e:	2000      	movs	r0, #0
 800b810:	f7f4 ffd4 	bl	80007bc <__aeabi_ddiv>
 800b814:	f04f 0a03 	mov.w	sl, #3
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	e737      	b.n	800b68e <atan+0xce>
 800b81e:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <atan+0x338>)
 800b820:	4e36      	ldr	r6, [pc, #216]	; (800b8fc <atan+0x33c>)
 800b822:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b826:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b82a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b82e:	f7f4 fce3 	bl	80001f8 <__aeabi_dsub>
 800b832:	4622      	mov	r2, r4
 800b834:	462b      	mov	r3, r5
 800b836:	f7f4 fcdf 	bl	80001f8 <__aeabi_dsub>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b842:	f7f4 fcd9 	bl	80001f8 <__aeabi_dsub>
 800b846:	f1bb 0f00 	cmp.w	fp, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	460d      	mov	r5, r1
 800b84e:	f6bf aed6 	bge.w	800b5fe <atan+0x3e>
 800b852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b856:	461d      	mov	r5, r3
 800b858:	e6d1      	b.n	800b5fe <atan+0x3e>
 800b85a:	a51d      	add	r5, pc, #116	; (adr r5, 800b8d0 <atan+0x310>)
 800b85c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b860:	e6cd      	b.n	800b5fe <atan+0x3e>
 800b862:	bf00      	nop
 800b864:	f3af 8000 	nop.w
 800b868:	54442d18 	.word	0x54442d18
 800b86c:	bff921fb 	.word	0xbff921fb
 800b870:	8800759c 	.word	0x8800759c
 800b874:	7e37e43c 	.word	0x7e37e43c
 800b878:	e322da11 	.word	0xe322da11
 800b87c:	3f90ad3a 	.word	0x3f90ad3a
 800b880:	24760deb 	.word	0x24760deb
 800b884:	3fa97b4b 	.word	0x3fa97b4b
 800b888:	a0d03d51 	.word	0xa0d03d51
 800b88c:	3fb10d66 	.word	0x3fb10d66
 800b890:	c54c206e 	.word	0xc54c206e
 800b894:	3fb745cd 	.word	0x3fb745cd
 800b898:	920083ff 	.word	0x920083ff
 800b89c:	3fc24924 	.word	0x3fc24924
 800b8a0:	5555550d 	.word	0x5555550d
 800b8a4:	3fd55555 	.word	0x3fd55555
 800b8a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8ac:	bfa2b444 	.word	0xbfa2b444
 800b8b0:	52defd9a 	.word	0x52defd9a
 800b8b4:	3fadde2d 	.word	0x3fadde2d
 800b8b8:	af749a6d 	.word	0xaf749a6d
 800b8bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8c0:	fe231671 	.word	0xfe231671
 800b8c4:	3fbc71c6 	.word	0x3fbc71c6
 800b8c8:	9998ebc4 	.word	0x9998ebc4
 800b8cc:	3fc99999 	.word	0x3fc99999
 800b8d0:	54442d18 	.word	0x54442d18
 800b8d4:	3ff921fb 	.word	0x3ff921fb
 800b8d8:	440fffff 	.word	0x440fffff
 800b8dc:	7ff00000 	.word	0x7ff00000
 800b8e0:	3fdbffff 	.word	0x3fdbffff
 800b8e4:	3ff00000 	.word	0x3ff00000
 800b8e8:	3ff2ffff 	.word	0x3ff2ffff
 800b8ec:	40038000 	.word	0x40038000
 800b8f0:	3ff80000 	.word	0x3ff80000
 800b8f4:	bff00000 	.word	0xbff00000
 800b8f8:	0800bf88 	.word	0x0800bf88
 800b8fc:	0800bf68 	.word	0x0800bf68

0800b900 <fabs>:
 800b900:	ec51 0b10 	vmov	r0, r1, d0
 800b904:	ee10 2a10 	vmov	r2, s0
 800b908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b90c:	ec43 2b10 	vmov	d0, r2, r3
 800b910:	4770      	bx	lr

0800b912 <atan2>:
 800b912:	f000 b835 	b.w	800b980 <__ieee754_atan2>
	...

0800b918 <sqrt>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	ed2d 8b02 	vpush	{d8}
 800b91e:	ec55 4b10 	vmov	r4, r5, d0
 800b922:	f000 f8f7 	bl	800bb14 <__ieee754_sqrt>
 800b926:	4b15      	ldr	r3, [pc, #84]	; (800b97c <sqrt+0x64>)
 800b928:	eeb0 8a40 	vmov.f32	s16, s0
 800b92c:	eef0 8a60 	vmov.f32	s17, s1
 800b930:	f993 3000 	ldrsb.w	r3, [r3]
 800b934:	3301      	adds	r3, #1
 800b936:	d019      	beq.n	800b96c <sqrt+0x54>
 800b938:	4622      	mov	r2, r4
 800b93a:	462b      	mov	r3, r5
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f5 f8ac 	bl	8000a9c <__aeabi_dcmpun>
 800b944:	b990      	cbnz	r0, 800b96c <sqrt+0x54>
 800b946:	2200      	movs	r2, #0
 800b948:	2300      	movs	r3, #0
 800b94a:	4620      	mov	r0, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	f7f5 f87d 	bl	8000a4c <__aeabi_dcmplt>
 800b952:	b158      	cbz	r0, 800b96c <sqrt+0x54>
 800b954:	f7ff fe02 	bl	800b55c <__errno>
 800b958:	2321      	movs	r3, #33	; 0x21
 800b95a:	6003      	str	r3, [r0, #0]
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	4610      	mov	r0, r2
 800b962:	4619      	mov	r1, r3
 800b964:	f7f4 ff2a 	bl	80007bc <__aeabi_ddiv>
 800b968:	ec41 0b18 	vmov	d8, r0, r1
 800b96c:	eeb0 0a48 	vmov.f32	s0, s16
 800b970:	eef0 0a68 	vmov.f32	s1, s17
 800b974:	ecbd 8b02 	vpop	{d8}
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	20000270 	.word	0x20000270

0800b980 <__ieee754_atan2>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	ec57 6b11 	vmov	r6, r7, d1
 800b988:	4273      	negs	r3, r6
 800b98a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800bb10 <__ieee754_atan2+0x190>
 800b98e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b992:	4333      	orrs	r3, r6
 800b994:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b998:	4573      	cmp	r3, lr
 800b99a:	ec51 0b10 	vmov	r0, r1, d0
 800b99e:	ee11 8a10 	vmov	r8, s2
 800b9a2:	d80a      	bhi.n	800b9ba <__ieee754_atan2+0x3a>
 800b9a4:	4244      	negs	r4, r0
 800b9a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9aa:	4304      	orrs	r4, r0
 800b9ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b9b0:	4574      	cmp	r4, lr
 800b9b2:	ee10 9a10 	vmov	r9, s0
 800b9b6:	468c      	mov	ip, r1
 800b9b8:	d907      	bls.n	800b9ca <__ieee754_atan2+0x4a>
 800b9ba:	4632      	mov	r2, r6
 800b9bc:	463b      	mov	r3, r7
 800b9be:	f7f4 fc1d 	bl	80001fc <__adddf3>
 800b9c2:	ec41 0b10 	vmov	d0, r0, r1
 800b9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b9ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9d2:	4334      	orrs	r4, r6
 800b9d4:	d103      	bne.n	800b9de <__ieee754_atan2+0x5e>
 800b9d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9da:	f7ff bdf1 	b.w	800b5c0 <atan>
 800b9de:	17bc      	asrs	r4, r7, #30
 800b9e0:	f004 0402 	and.w	r4, r4, #2
 800b9e4:	ea53 0909 	orrs.w	r9, r3, r9
 800b9e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b9ec:	d107      	bne.n	800b9fe <__ieee754_atan2+0x7e>
 800b9ee:	2c02      	cmp	r4, #2
 800b9f0:	d060      	beq.n	800bab4 <__ieee754_atan2+0x134>
 800b9f2:	2c03      	cmp	r4, #3
 800b9f4:	d1e5      	bne.n	800b9c2 <__ieee754_atan2+0x42>
 800b9f6:	a142      	add	r1, pc, #264	; (adr r1, 800bb00 <__ieee754_atan2+0x180>)
 800b9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9fc:	e7e1      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800b9fe:	ea52 0808 	orrs.w	r8, r2, r8
 800ba02:	d106      	bne.n	800ba12 <__ieee754_atan2+0x92>
 800ba04:	f1bc 0f00 	cmp.w	ip, #0
 800ba08:	da5f      	bge.n	800baca <__ieee754_atan2+0x14a>
 800ba0a:	a13f      	add	r1, pc, #252	; (adr r1, 800bb08 <__ieee754_atan2+0x188>)
 800ba0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba10:	e7d7      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800ba12:	4572      	cmp	r2, lr
 800ba14:	d10f      	bne.n	800ba36 <__ieee754_atan2+0xb6>
 800ba16:	4293      	cmp	r3, r2
 800ba18:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ba1c:	d107      	bne.n	800ba2e <__ieee754_atan2+0xae>
 800ba1e:	2c02      	cmp	r4, #2
 800ba20:	d84c      	bhi.n	800babc <__ieee754_atan2+0x13c>
 800ba22:	4b35      	ldr	r3, [pc, #212]	; (800baf8 <__ieee754_atan2+0x178>)
 800ba24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ba28:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ba2c:	e7c9      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800ba2e:	2c02      	cmp	r4, #2
 800ba30:	d848      	bhi.n	800bac4 <__ieee754_atan2+0x144>
 800ba32:	4b32      	ldr	r3, [pc, #200]	; (800bafc <__ieee754_atan2+0x17c>)
 800ba34:	e7f6      	b.n	800ba24 <__ieee754_atan2+0xa4>
 800ba36:	4573      	cmp	r3, lr
 800ba38:	d0e4      	beq.n	800ba04 <__ieee754_atan2+0x84>
 800ba3a:	1a9b      	subs	r3, r3, r2
 800ba3c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ba40:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba44:	da1e      	bge.n	800ba84 <__ieee754_atan2+0x104>
 800ba46:	2f00      	cmp	r7, #0
 800ba48:	da01      	bge.n	800ba4e <__ieee754_atan2+0xce>
 800ba4a:	323c      	adds	r2, #60	; 0x3c
 800ba4c:	db1e      	blt.n	800ba8c <__ieee754_atan2+0x10c>
 800ba4e:	4632      	mov	r2, r6
 800ba50:	463b      	mov	r3, r7
 800ba52:	f7f4 feb3 	bl	80007bc <__aeabi_ddiv>
 800ba56:	ec41 0b10 	vmov	d0, r0, r1
 800ba5a:	f7ff ff51 	bl	800b900 <fabs>
 800ba5e:	f7ff fdaf 	bl	800b5c0 <atan>
 800ba62:	ec51 0b10 	vmov	r0, r1, d0
 800ba66:	2c01      	cmp	r4, #1
 800ba68:	d013      	beq.n	800ba92 <__ieee754_atan2+0x112>
 800ba6a:	2c02      	cmp	r4, #2
 800ba6c:	d015      	beq.n	800ba9a <__ieee754_atan2+0x11a>
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	d0a7      	beq.n	800b9c2 <__ieee754_atan2+0x42>
 800ba72:	a319      	add	r3, pc, #100	; (adr r3, 800bad8 <__ieee754_atan2+0x158>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f7f4 fbbe 	bl	80001f8 <__aeabi_dsub>
 800ba7c:	a318      	add	r3, pc, #96	; (adr r3, 800bae0 <__ieee754_atan2+0x160>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	e014      	b.n	800baae <__ieee754_atan2+0x12e>
 800ba84:	a118      	add	r1, pc, #96	; (adr r1, 800bae8 <__ieee754_atan2+0x168>)
 800ba86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba8a:	e7ec      	b.n	800ba66 <__ieee754_atan2+0xe6>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	2100      	movs	r1, #0
 800ba90:	e7e9      	b.n	800ba66 <__ieee754_atan2+0xe6>
 800ba92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba96:	4619      	mov	r1, r3
 800ba98:	e793      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800ba9a:	a30f      	add	r3, pc, #60	; (adr r3, 800bad8 <__ieee754_atan2+0x158>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f4 fbaa 	bl	80001f8 <__aeabi_dsub>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	a10d      	add	r1, pc, #52	; (adr r1, 800bae0 <__ieee754_atan2+0x160>)
 800baaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baae:	f7f4 fba3 	bl	80001f8 <__aeabi_dsub>
 800bab2:	e786      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800bab4:	a10a      	add	r1, pc, #40	; (adr r1, 800bae0 <__ieee754_atan2+0x160>)
 800bab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baba:	e782      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800babc:	a10c      	add	r1, pc, #48	; (adr r1, 800baf0 <__ieee754_atan2+0x170>)
 800babe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac2:	e77e      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800bac4:	2000      	movs	r0, #0
 800bac6:	2100      	movs	r1, #0
 800bac8:	e77b      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800baca:	a107      	add	r1, pc, #28	; (adr r1, 800bae8 <__ieee754_atan2+0x168>)
 800bacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad0:	e777      	b.n	800b9c2 <__ieee754_atan2+0x42>
 800bad2:	bf00      	nop
 800bad4:	f3af 8000 	nop.w
 800bad8:	33145c07 	.word	0x33145c07
 800badc:	3ca1a626 	.word	0x3ca1a626
 800bae0:	54442d18 	.word	0x54442d18
 800bae4:	400921fb 	.word	0x400921fb
 800bae8:	54442d18 	.word	0x54442d18
 800baec:	3ff921fb 	.word	0x3ff921fb
 800baf0:	54442d18 	.word	0x54442d18
 800baf4:	3fe921fb 	.word	0x3fe921fb
 800baf8:	0800bfa8 	.word	0x0800bfa8
 800bafc:	0800bfc0 	.word	0x0800bfc0
 800bb00:	54442d18 	.word	0x54442d18
 800bb04:	c00921fb 	.word	0xc00921fb
 800bb08:	54442d18 	.word	0x54442d18
 800bb0c:	bff921fb 	.word	0xbff921fb
 800bb10:	7ff00000 	.word	0x7ff00000

0800bb14 <__ieee754_sqrt>:
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	ec55 4b10 	vmov	r4, r5, d0
 800bb1c:	4e56      	ldr	r6, [pc, #344]	; (800bc78 <__ieee754_sqrt+0x164>)
 800bb1e:	43ae      	bics	r6, r5
 800bb20:	ee10 0a10 	vmov	r0, s0
 800bb24:	ee10 3a10 	vmov	r3, s0
 800bb28:	4629      	mov	r1, r5
 800bb2a:	462a      	mov	r2, r5
 800bb2c:	d110      	bne.n	800bb50 <__ieee754_sqrt+0x3c>
 800bb2e:	ee10 2a10 	vmov	r2, s0
 800bb32:	462b      	mov	r3, r5
 800bb34:	f7f4 fd18 	bl	8000568 <__aeabi_dmul>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f7f4 fb5c 	bl	80001fc <__adddf3>
 800bb44:	4604      	mov	r4, r0
 800bb46:	460d      	mov	r5, r1
 800bb48:	ec45 4b10 	vmov	d0, r4, r5
 800bb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb50:	2d00      	cmp	r5, #0
 800bb52:	dc10      	bgt.n	800bb76 <__ieee754_sqrt+0x62>
 800bb54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb58:	4330      	orrs	r0, r6
 800bb5a:	d0f5      	beq.n	800bb48 <__ieee754_sqrt+0x34>
 800bb5c:	b15d      	cbz	r5, 800bb76 <__ieee754_sqrt+0x62>
 800bb5e:	ee10 2a10 	vmov	r2, s0
 800bb62:	462b      	mov	r3, r5
 800bb64:	ee10 0a10 	vmov	r0, s0
 800bb68:	f7f4 fb46 	bl	80001f8 <__aeabi_dsub>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	f7f4 fe24 	bl	80007bc <__aeabi_ddiv>
 800bb74:	e7e6      	b.n	800bb44 <__ieee754_sqrt+0x30>
 800bb76:	1509      	asrs	r1, r1, #20
 800bb78:	d076      	beq.n	800bc68 <__ieee754_sqrt+0x154>
 800bb7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bb7e:	07ce      	lsls	r6, r1, #31
 800bb80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bb84:	bf5e      	ittt	pl
 800bb86:	0fda      	lsrpl	r2, r3, #31
 800bb88:	005b      	lslpl	r3, r3, #1
 800bb8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bb8e:	0fda      	lsrs	r2, r3, #31
 800bb90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bb94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bb98:	2000      	movs	r0, #0
 800bb9a:	106d      	asrs	r5, r5, #1
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	f04f 0e16 	mov.w	lr, #22
 800bba2:	4684      	mov	ip, r0
 800bba4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bba8:	eb0c 0401 	add.w	r4, ip, r1
 800bbac:	4294      	cmp	r4, r2
 800bbae:	bfde      	ittt	le
 800bbb0:	1b12      	suble	r2, r2, r4
 800bbb2:	eb04 0c01 	addle.w	ip, r4, r1
 800bbb6:	1840      	addle	r0, r0, r1
 800bbb8:	0052      	lsls	r2, r2, #1
 800bbba:	f1be 0e01 	subs.w	lr, lr, #1
 800bbbe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bbc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bbc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bbca:	d1ed      	bne.n	800bba8 <__ieee754_sqrt+0x94>
 800bbcc:	4671      	mov	r1, lr
 800bbce:	2720      	movs	r7, #32
 800bbd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bbd4:	4562      	cmp	r2, ip
 800bbd6:	eb04 060e 	add.w	r6, r4, lr
 800bbda:	dc02      	bgt.n	800bbe2 <__ieee754_sqrt+0xce>
 800bbdc:	d113      	bne.n	800bc06 <__ieee754_sqrt+0xf2>
 800bbde:	429e      	cmp	r6, r3
 800bbe0:	d811      	bhi.n	800bc06 <__ieee754_sqrt+0xf2>
 800bbe2:	2e00      	cmp	r6, #0
 800bbe4:	eb06 0e04 	add.w	lr, r6, r4
 800bbe8:	da43      	bge.n	800bc72 <__ieee754_sqrt+0x15e>
 800bbea:	f1be 0f00 	cmp.w	lr, #0
 800bbee:	db40      	blt.n	800bc72 <__ieee754_sqrt+0x15e>
 800bbf0:	f10c 0801 	add.w	r8, ip, #1
 800bbf4:	eba2 020c 	sub.w	r2, r2, ip
 800bbf8:	429e      	cmp	r6, r3
 800bbfa:	bf88      	it	hi
 800bbfc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800bc00:	1b9b      	subs	r3, r3, r6
 800bc02:	4421      	add	r1, r4
 800bc04:	46c4      	mov	ip, r8
 800bc06:	0052      	lsls	r2, r2, #1
 800bc08:	3f01      	subs	r7, #1
 800bc0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bc0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bc12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc16:	d1dd      	bne.n	800bbd4 <__ieee754_sqrt+0xc0>
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	d006      	beq.n	800bc2a <__ieee754_sqrt+0x116>
 800bc1c:	1c4c      	adds	r4, r1, #1
 800bc1e:	bf13      	iteet	ne
 800bc20:	3101      	addne	r1, #1
 800bc22:	3001      	addeq	r0, #1
 800bc24:	4639      	moveq	r1, r7
 800bc26:	f021 0101 	bicne.w	r1, r1, #1
 800bc2a:	1043      	asrs	r3, r0, #1
 800bc2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bc30:	0849      	lsrs	r1, r1, #1
 800bc32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bc36:	07c2      	lsls	r2, r0, #31
 800bc38:	bf48      	it	mi
 800bc3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bc3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bc42:	460c      	mov	r4, r1
 800bc44:	463d      	mov	r5, r7
 800bc46:	e77f      	b.n	800bb48 <__ieee754_sqrt+0x34>
 800bc48:	0ada      	lsrs	r2, r3, #11
 800bc4a:	3815      	subs	r0, #21
 800bc4c:	055b      	lsls	r3, r3, #21
 800bc4e:	2a00      	cmp	r2, #0
 800bc50:	d0fa      	beq.n	800bc48 <__ieee754_sqrt+0x134>
 800bc52:	02d7      	lsls	r7, r2, #11
 800bc54:	d50a      	bpl.n	800bc6c <__ieee754_sqrt+0x158>
 800bc56:	f1c1 0420 	rsb	r4, r1, #32
 800bc5a:	fa23 f404 	lsr.w	r4, r3, r4
 800bc5e:	1e4d      	subs	r5, r1, #1
 800bc60:	408b      	lsls	r3, r1
 800bc62:	4322      	orrs	r2, r4
 800bc64:	1b41      	subs	r1, r0, r5
 800bc66:	e788      	b.n	800bb7a <__ieee754_sqrt+0x66>
 800bc68:	4608      	mov	r0, r1
 800bc6a:	e7f0      	b.n	800bc4e <__ieee754_sqrt+0x13a>
 800bc6c:	0052      	lsls	r2, r2, #1
 800bc6e:	3101      	adds	r1, #1
 800bc70:	e7ef      	b.n	800bc52 <__ieee754_sqrt+0x13e>
 800bc72:	46e0      	mov	r8, ip
 800bc74:	e7be      	b.n	800bbf4 <__ieee754_sqrt+0xe0>
 800bc76:	bf00      	nop
 800bc78:	7ff00000 	.word	0x7ff00000

0800bc7c <_init>:
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	bf00      	nop
 800bc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc82:	bc08      	pop	{r3}
 800bc84:	469e      	mov	lr, r3
 800bc86:	4770      	bx	lr

0800bc88 <_fini>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr
