
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800bd58  0800bd58  0001bd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf58  0800bf58  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf58  0800bf58  0001bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf60  0800bf60  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf60  0800bf60  0001bf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf64  0800bf64  0001bf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800bf68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  20000170  0800c0d8  00020170  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  0800c0d8  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020234  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000419a  00000000  00000000  000403d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  00045bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027829  00000000  00000000  00047060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dab0  00000000  00000000  0006e889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3a47  00000000  00000000  0008c339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fd80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e8  00000000  00000000  0016fdd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bd3c 	.word	0x0800bd3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	0800bd3c 	.word	0x0800bd3c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fd07 	bl	8004964 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 fcf2 	bl	8004964 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 fc59 	bl	8004964 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	pid->iterm = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <MotorInit>:
 * param [targetNumber]	1 or 2, or a Simplified Serial character like '1' or '2'.
 * return		None.
 */
static void writeSabertoothGetCommand(Sabertooth_Handler *st_handler, uint8_t getType, uint8_t targetType, uint8_t targetNumber);

void MotorInit(Sabertooth_Handler* st_handler, uint8_t address, UART_HandleTypeDef* huart){
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	460b      	mov	r3, r1
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	72fb      	strb	r3, [r7, #11]
	st_handler->address = address;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	7afa      	ldrb	r2, [r7, #11]
 80013f2:	701a      	strb	r2, [r3, #0]
	st_handler->huart = huart;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	605a      	str	r2, [r3, #4]
	st_handler->motor1.battery = 0;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	815a      	strh	r2, [r3, #10]
	st_handler->motor1.duty_cycle = 0;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	811a      	strh	r2, [r3, #8]
	st_handler->motor1.current = 0;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	819a      	strh	r2, [r3, #12]
	st_handler->motor1.temp = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	81da      	strh	r2, [r3, #14]
	st_handler->motor2.battery = 0;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	825a      	strh	r2, [r3, #18]
	st_handler->motor2.duty_cycle = 0;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	821a      	strh	r2, [r3, #16]
	st_handler->motor2.current = 0;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	829a      	strh	r2, [r3, #20]
	st_handler->motor2.temp = 0;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	82da      	strh	r2, [r3, #22]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <MotorThrottle>:


void MotorThrottle(Sabertooth_Handler *st_handler, uint8_t motor, int16_t power) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af02      	add	r7, sp, #8
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
 8001444:	4613      	mov	r3, r2
 8001446:	803b      	strh	r3, [r7, #0]
	if (motor < 1 || motor > 2)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01c      	beq.n	8001488 <MotorThrottle+0x50>
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d819      	bhi.n	8001488 <MotorThrottle+0x50>
		return;
	clamp(power, MIN_ALLOWABLE_VALUE, MAX_ALLOWABLE_VALUE);
 8001454:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001458:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <MotorThrottle+0x58>)
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f94c 	bl	80016fc <clamp>
	uint8_t target_number = (motor == 1) ? TARGET_1 : TARGET_2;
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <MotorThrottle+0x36>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <MotorThrottle+0x38>
 800146e:	2302      	movs	r3, #2
 8001470:	73fb      	strb	r3, [r7, #15]
	writeSabertoothSetCommand(st_handler, SET_VALUE, TYPE_MOTOR, target_number, power);
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	224d      	movs	r2, #77	; 0x4d
 800147e:	2100      	movs	r1, #0
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f9d5 	bl	8001830 <writeSabertoothSetCommand>
 8001486:	e000      	b.n	800148a <MotorThrottle+0x52>
		return;
 8001488:	bf00      	nop
}
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	fffff801 	.word	0xfffff801

08001494 <MotorShutdown>:
void MotorStop(Sabertooth_Handler *st_handler) {
	MotorThrottle(st_handler, TARGET_1, 0);
	MotorThrottle(st_handler, TARGET_2, 0);
}

void MotorShutdown(Sabertooth_Handler *st_handler) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
	writeSabertoothSetCommand(st_handler, SET_SHUTDOWN, TYPE_MOTOR, TARGET_BOTH, MOTOR_SHUTDOWN);
 800149c:	2301      	movs	r3, #1
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	232a      	movs	r3, #42	; 0x2a
 80014a2:	224d      	movs	r2, #77	; 0x4d
 80014a4:	2120      	movs	r1, #32
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f9c2 	bl	8001830 <writeSabertoothSetCommand>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MotorProcessReply>:
		return;
	uint8_t target_number = (motor == 1) ? TARGET_1 : TARGET_2;
	writeSabertoothGetCommand(st_handler, GET_DUTY_CYCLE, TYPE_MOTOR, target_number);
}

void MotorProcessReply(Sabertooth_Handler *st_handler, uint8_t *receive_buf, uint8_t size) {
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	4613      	mov	r3, r2
 80014c0:	71fb      	strb	r3, [r7, #7]
	//make sure the byte is have the right reply number
	if (receive_buf[IDX_COMMAND] != SABERTOOTH_REPLY)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b49      	cmp	r3, #73	; 0x49
 80014ca:	f040 810b 	bne.w	80016e4 <MotorProcessReply+0x230>
		return;
	//Checksum to make sure data receive is in the corrent form
	uint8_t dataChecksum = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	77fb      	strb	r3, [r7, #31]
	dataChecksum = (receive_buf[IDX_ADDRESS] + receive_buf[IDX_COMMAND] + receive_buf[IDX_COMMAND_VALUE]) & 127;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3301      	adds	r3, #1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3302      	adds	r3, #2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ee:	77fb      	strb	r3, [r7, #31]
	if (dataChecksum != receive_buf[IDX_CHECKSUM_1])
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3303      	adds	r3, #3
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	7ffa      	ldrb	r2, [r7, #31]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 80f5 	bne.w	80016e8 <MotorProcessReply+0x234>
		return;
	dataChecksum = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	77fb      	strb	r3, [r7, #31]
	for (int i = 4; i < size - 1; i++)
 8001502:	2304      	movs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	e009      	b.n	800151c <MotorProcessReply+0x68>
		dataChecksum += receive_buf[i];
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	4413      	add	r3, r2
 8001514:	77fb      	strb	r3, [r7, #31]
	for (int i = 4; i < size - 1; i++)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3301      	adds	r3, #1
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	3b01      	subs	r3, #1
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf0      	blt.n	8001508 <MotorProcessReply+0x54>
	dataChecksum &= 127;
 8001526:	7ffb      	ldrb	r3, [r7, #31]
 8001528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152c:	77fb      	strb	r3, [r7, #31]
	if (dataChecksum != receive_buf[IDX_CHECKSUM_2(SABERTOOTH_REPLY)])
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3308      	adds	r3, #8
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	7ffa      	ldrb	r2, [r7, #31]
 8001536:	429a      	cmp	r2, r3
 8001538:	f040 80d8 	bne.w	80016ec <MotorProcessReply+0x238>
		return;

	int16_t reply_value = (receive_buf[IDX_VALUE_LOW] & 0x7F) + ((receive_buf[IDX_VALUE_HIGH] & 0x7F) << 7);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3304      	adds	r3, #4
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b21b      	sxth	r3, r3
 8001544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001548:	b21a      	sxth	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3305      	adds	r3, #5
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	01db      	lsls	r3, r3, #7
 8001552:	b21b      	sxth	r3, r3
 8001554:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	827b      	strh	r3, [r7, #18]

	//Create a pointer to hold the motor handler
	Sabertooth_Motor_Handler* pMotor;
	if ((receive_buf[IDX_TARGET_TYPE(SABERTOOTH_REPLY)] == TYPE_MOTOR ) && (receive_buf[IDX_TARGET_ID(SABERTOOTH_REPLY)] == TARGET_1))
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3306      	adds	r3, #6
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b4d      	cmp	r3, #77	; 0x4d
 8001566:	d107      	bne.n	8001578 <MotorProcessReply+0xc4>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3307      	adds	r3, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <MotorProcessReply+0xc4>
		pMotor = &(st_handler->motor1);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3308      	adds	r3, #8
 8001576:	617b      	str	r3, [r7, #20]
	if ((receive_buf[IDX_TARGET_TYPE(SABERTOOTH_REPLY)] == TYPE_MOTOR ) && (receive_buf[IDX_TARGET_ID(SABERTOOTH_REPLY)] == TARGET_2))
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	3306      	adds	r3, #6
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b4d      	cmp	r3, #77	; 0x4d
 8001580:	d107      	bne.n	8001592 <MotorProcessReply+0xde>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3307      	adds	r3, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d102      	bne.n	8001592 <MotorProcessReply+0xde>
		pMotor = &(st_handler->motor2);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3310      	adds	r3, #16
 8001590:	617b      	str	r3, [r7, #20]

	//Check reply from which command
	switch (receive_buf[IDX_COMMAND_VALUE]) {
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3302      	adds	r3, #2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b31      	cmp	r3, #49	; 0x31
 800159a:	f200 80a9 	bhi.w	80016f0 <MotorProcessReply+0x23c>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <MotorProcessReply+0xf0>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	080016c7 	.word	0x080016c7
 80015a8:	080016c7 	.word	0x080016c7
 80015ac:	080016f1 	.word	0x080016f1
 80015b0:	080016f1 	.word	0x080016f1
 80015b4:	080016f1 	.word	0x080016f1
 80015b8:	080016f1 	.word	0x080016f1
 80015bc:	080016f1 	.word	0x080016f1
 80015c0:	080016f1 	.word	0x080016f1
 80015c4:	080016f1 	.word	0x080016f1
 80015c8:	080016f1 	.word	0x080016f1
 80015cc:	080016f1 	.word	0x080016f1
 80015d0:	080016f1 	.word	0x080016f1
 80015d4:	080016f1 	.word	0x080016f1
 80015d8:	080016f1 	.word	0x080016f1
 80015dc:	080016f1 	.word	0x080016f1
 80015e0:	080016f1 	.word	0x080016f1
 80015e4:	0800166d 	.word	0x0800166d
 80015e8:	0800166d 	.word	0x0800166d
 80015ec:	080016f1 	.word	0x080016f1
 80015f0:	080016f1 	.word	0x080016f1
 80015f4:	080016f1 	.word	0x080016f1
 80015f8:	080016f1 	.word	0x080016f1
 80015fc:	080016f1 	.word	0x080016f1
 8001600:	080016f1 	.word	0x080016f1
 8001604:	080016f1 	.word	0x080016f1
 8001608:	080016f1 	.word	0x080016f1
 800160c:	080016f1 	.word	0x080016f1
 8001610:	080016f1 	.word	0x080016f1
 8001614:	080016f1 	.word	0x080016f1
 8001618:	080016f1 	.word	0x080016f1
 800161c:	080016f1 	.word	0x080016f1
 8001620:	080016f1 	.word	0x080016f1
 8001624:	0800168b 	.word	0x0800168b
 8001628:	0800168b 	.word	0x0800168b
 800162c:	080016f1 	.word	0x080016f1
 8001630:	080016f1 	.word	0x080016f1
 8001634:	080016f1 	.word	0x080016f1
 8001638:	080016f1 	.word	0x080016f1
 800163c:	080016f1 	.word	0x080016f1
 8001640:	080016f1 	.word	0x080016f1
 8001644:	080016f1 	.word	0x080016f1
 8001648:	080016f1 	.word	0x080016f1
 800164c:	080016f1 	.word	0x080016f1
 8001650:	080016f1 	.word	0x080016f1
 8001654:	080016f1 	.word	0x080016f1
 8001658:	080016f1 	.word	0x080016f1
 800165c:	080016f1 	.word	0x080016f1
 8001660:	080016f1 	.word	0x080016f1
 8001664:	080016a9 	.word	0x080016a9
 8001668:	080016a9 	.word	0x080016a9
		case GET_BATTERY:
		case GET_BATTERY + 1:
			pMotor->battery = (receive_buf[IDX_COMMAND_VALUE] == GET_BATTERY) ? reply_value : -reply_value;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3302      	adds	r3, #2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b10      	cmp	r3, #16
 8001674:	d004      	beq.n	8001680 <MotorProcessReply+0x1cc>
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	425b      	negs	r3, r3
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	e001      	b.n	8001684 <MotorProcessReply+0x1d0>
 8001680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	8053      	strh	r3, [r2, #2]
			break;
 8001688:	e033      	b.n	80016f2 <MotorProcessReply+0x23e>
		case GET_CURRENT:
		case GET_CURRENT + 1:
			pMotor->current = (receive_buf[IDX_COMMAND_VALUE] == GET_CURRENT) ? reply_value : -reply_value;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3302      	adds	r3, #2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b20      	cmp	r3, #32
 8001692:	d004      	beq.n	800169e <MotorProcessReply+0x1ea>
 8001694:	8a7b      	ldrh	r3, [r7, #18]
 8001696:	425b      	negs	r3, r3
 8001698:	b29b      	uxth	r3, r3
 800169a:	b21b      	sxth	r3, r3
 800169c:	e001      	b.n	80016a2 <MotorProcessReply+0x1ee>
 800169e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	8093      	strh	r3, [r2, #4]
			break;
 80016a6:	e024      	b.n	80016f2 <MotorProcessReply+0x23e>
		case GET_TEMP:
		case GET_TEMP + 1:
			pMotor->temp = (receive_buf[IDX_COMMAND_VALUE] == GET_TEMP) ? reply_value : -reply_value;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3302      	adds	r3, #2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b30      	cmp	r3, #48	; 0x30
 80016b0:	d004      	beq.n	80016bc <MotorProcessReply+0x208>
 80016b2:	8a7b      	ldrh	r3, [r7, #18]
 80016b4:	425b      	negs	r3, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	e001      	b.n	80016c0 <MotorProcessReply+0x20c>
 80016bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	80d3      	strh	r3, [r2, #6]
			break;
 80016c4:	e015      	b.n	80016f2 <MotorProcessReply+0x23e>
		case GET_DUTY_CYCLE:
		case GET_DUTY_CYCLE + 1:
			pMotor->temp = (receive_buf[IDX_COMMAND_VALUE] == GET_TEMP) ? reply_value : -reply_value;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3302      	adds	r3, #2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b30      	cmp	r3, #48	; 0x30
 80016ce:	d004      	beq.n	80016da <MotorProcessReply+0x226>
 80016d0:	8a7b      	ldrh	r3, [r7, #18]
 80016d2:	425b      	negs	r3, r3
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	e001      	b.n	80016de <MotorProcessReply+0x22a>
 80016da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	80d3      	strh	r3, [r2, #6]
			break;
 80016e2:	e006      	b.n	80016f2 <MotorProcessReply+0x23e>
		return;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <MotorProcessReply+0x23e>
		return;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <MotorProcessReply+0x23e>
		return;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <MotorProcessReply+0x23e>
		default:
			return;
 80016f0:	bf00      	nop
		}
}
 80016f2:	3724      	adds	r7, #36	; 0x24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <clamp>:


static int clamp(int x, int min, int max) {
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	return MIN(MAX(min, x), max);
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	bfb8      	it	lt
 8001710:	461a      	movlt	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4293      	cmp	r3, r2
 8001716:	bfa8      	it	ge
 8001718:	4613      	movge	r3, r2
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <writeSabertoothCommand>:

static void writeSabertoothCommand(Sabertooth_Handler *st_handler, uint8_t command, uint8_t value, const uint8_t *data, uint8_t length) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	72fb      	strb	r3, [r7, #11]
 8001736:	4613      	mov	r3, r2
 8001738:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint8_t dataChecksum;
	send_buf[IDX_ADDRESS] = st_handler->address;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <writeSabertoothCommand+0x100>)
 8001740:	701a      	strb	r2, [r3, #0]
	send_buf[IDX_COMMAND] = command;
 8001742:	4a39      	ldr	r2, [pc, #228]	; (8001828 <writeSabertoothCommand+0x100>)
 8001744:	7afb      	ldrb	r3, [r7, #11]
 8001746:	7053      	strb	r3, [r2, #1]
	send_buf[IDX_COMMAND_VALUE] = value;
 8001748:	4a37      	ldr	r2, [pc, #220]	; (8001828 <writeSabertoothCommand+0x100>)
 800174a:	7abb      	ldrb	r3, [r7, #10]
 800174c:	7093      	strb	r3, [r2, #2]
	send_buf[IDX_CHECKSUM_1] = (st_handler->address + command + value) & 127;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	4413      	add	r3, r2
 8001756:	b2da      	uxtb	r2, r3
 8001758:	7abb      	ldrb	r3, [r7, #10]
 800175a:	4413      	add	r3, r2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <writeSabertoothCommand+0x100>)
 8001766:	70da      	strb	r2, [r3, #3]
	if (length == 0) {
 8001768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d057      	beq.n	8001820 <writeSabertoothCommand+0xf8>
		return;
	}

	dataChecksum = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < length; i++) {
 8001774:	2300      	movs	r3, #0
 8001776:	75fb      	strb	r3, [r7, #23]
 8001778:	e011      	b.n	800179e <writeSabertoothCommand+0x76>
		send_buf[4 + i] = data[i];
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	441a      	add	r2, r3
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	3304      	adds	r3, #4
 8001784:	7811      	ldrb	r1, [r2, #0]
 8001786:	4a28      	ldr	r2, [pc, #160]	; (8001828 <writeSabertoothCommand+0x100>)
 8001788:	54d1      	strb	r1, [r2, r3]
		dataChecksum += data[i];
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	7dbb      	ldrb	r3, [r7, #22]
 8001794:	4413      	add	r3, r2
 8001796:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < length; i++) {
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	3301      	adds	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
 800179e:	7dfa      	ldrb	r2, [r7, #23]
 80017a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3e8      	bcc.n	800177a <writeSabertoothCommand+0x52>
	}
	send_buf[IDX_CHECKSUM_2(command)] = dataChecksum & 127;
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	2b28      	cmp	r3, #40	; 0x28
 80017ac:	d002      	beq.n	80017b4 <writeSabertoothCommand+0x8c>
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	2b49      	cmp	r3, #73	; 0x49
 80017b2:	d101      	bne.n	80017b8 <writeSabertoothCommand+0x90>
 80017b4:	2308      	movs	r3, #8
 80017b6:	e000      	b.n	80017ba <writeSabertoothCommand+0x92>
 80017b8:	2306      	movs	r3, #6
 80017ba:	7dba      	ldrb	r2, [r7, #22]
 80017bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017c0:	b2d1      	uxtb	r1, r2
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <writeSabertoothCommand+0x100>)
 80017c4:	54d1      	strb	r1, [r2, r3]
	if (command == SABERTOOTH_SET) {
 80017c6:	7afb      	ldrb	r3, [r7, #11]
 80017c8:	2b28      	cmp	r3, #40	; 0x28
 80017ca:	d107      	bne.n	80017dc <writeSabertoothCommand+0xb4>
		HAL_UART_Transmit(st_handler->huart, send_buf, SEND_BUF_SIZE_SET,1);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6858      	ldr	r0, [r3, #4]
 80017d0:	2301      	movs	r3, #1
 80017d2:	2209      	movs	r2, #9
 80017d4:	4914      	ldr	r1, [pc, #80]	; (8001828 <writeSabertoothCommand+0x100>)
 80017d6:	f007 fd96 	bl	8009306 <HAL_UART_Transmit>
 80017da:	e022      	b.n	8001822 <writeSabertoothCommand+0xfa>
	} else if (command == SABERTOOTH_GET) {
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	2b29      	cmp	r3, #41	; 0x29
 80017e0:	d11f      	bne.n	8001822 <writeSabertoothCommand+0xfa>
		HAL_UART_Transmit(st_handler->huart, send_buf, SEND_BUF_SIZE_GET,1);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6858      	ldr	r0, [r3, #4]
 80017e6:	2301      	movs	r3, #1
 80017e8:	2207      	movs	r2, #7
 80017ea:	490f      	ldr	r1, [pc, #60]	; (8001828 <writeSabertoothCommand+0x100>)
 80017ec:	f007 fd8b 	bl	8009306 <HAL_UART_Transmit>
		uint32_t t = HAL_GetTick();
 80017f0:	f003 f8b8 	bl	8004964 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]
		while(HAL_UART_Receive_DMA(st_handler->huart, motor_receive_buf, 9) != HAL_OK
 80017f6:	bf00      	nop
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2209      	movs	r2, #9
 80017fe:	490b      	ldr	r1, [pc, #44]	; (800182c <writeSabertoothCommand+0x104>)
 8001800:	4618      	mov	r0, r3
 8001802:	f007 fe12 	bl	800942a <HAL_UART_Receive_DMA>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f5      	bne.n	80017f8 <writeSabertoothCommand+0xd0>
				|| HAL_GetTick() - t > 5000);
 800180c:	f003 f8aa 	bl	8004964 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d8ec      	bhi.n	80017f8 <writeSabertoothCommand+0xd0>
 800181e:	e000      	b.n	8001822 <writeSabertoothCommand+0xfa>
		return;
 8001820:	bf00      	nop

	}
}
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000018c 	.word	0x2000018c
 800182c:	20000504 	.word	0x20000504

08001830 <writeSabertoothSetCommand>:

static void writeSabertoothSetCommand(Sabertooth_Handler *st_handler, uint8_t setType, uint8_t targetType, uint8_t targetNumber, int16_t value) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af02      	add	r7, sp, #8
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	70fb      	strb	r3, [r7, #3]
 8001842:	460b      	mov	r3, r1
 8001844:	70bb      	strb	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
	uint8_t data[4];
	data[2] = targetType;
 800184a:	78bb      	ldrb	r3, [r7, #2]
 800184c:	73bb      	strb	r3, [r7, #14]
	data[3] = targetNumber;
 800184e:	787b      	ldrb	r3, [r7, #1]
 8001850:	73fb      	strb	r3, [r7, #15]
	if (value < 0) {
 8001852:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da1e      	bge.n	8001898 <writeSabertoothSetCommand+0x68>
		value = -value;
 800185a:	8b3b      	ldrh	r3, [r7, #24]
 800185c:	425b      	negs	r3, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	833b      	strh	r3, [r7, #24]
		data[0] = (uint8_t) ((value >> 0) & 127);
 8001862:	8b3b      	ldrh	r3, [r7, #24]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800186a:	b2db      	uxtb	r3, r3
 800186c:	733b      	strb	r3, [r7, #12]
		data[1] = (uint8_t) ((value >> 7) & 127);
 800186e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001872:	11db      	asrs	r3, r3, #7
 8001874:	b21b      	sxth	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800187c:	b2db      	uxtb	r3, r3
 800187e:	737b      	strb	r3, [r7, #13]
		return writeSabertoothCommand(st_handler, SABERTOOTH_SET, setType + 1, data, sizeof(data));
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	2104      	movs	r1, #4
 800188c:	9100      	str	r1, [sp, #0]
 800188e:	2128      	movs	r1, #40	; 0x28
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff49 	bl	8001728 <writeSabertoothCommand>
 8001896:	e017      	b.n	80018c8 <writeSabertoothSetCommand+0x98>
	} else {
		data[0] = (uint8_t) ((value >> 0) & 127);
 8001898:	8b3b      	ldrh	r3, [r7, #24]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	733b      	strb	r3, [r7, #12]
		data[1] = (uint8_t) ((value >> 7) & 127);
 80018a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018a8:	11db      	asrs	r3, r3, #7
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	737b      	strb	r3, [r7, #13]
		return writeSabertoothCommand(st_handler, SABERTOOTH_SET, setType, data, sizeof(data));
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	2104      	movs	r1, #4
 80018be:	9100      	str	r1, [sp, #0]
 80018c0:	2128      	movs	r1, #40	; 0x28
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff30 	bl	8001728 <writeSabertoothCommand>
	}
}
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4808      	ldr	r0, [pc, #32]	; (80018fc <hubMotor_Init+0x2c>)
 80018dc:	f004 fdc8 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <hubMotor_Init+0x2c>)
 80018e8:	f004 fdc2 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <hubMotor_Init+0x2c>)
 80018f4:	f004 fdbc 	bl	8006470 <HAL_GPIO_WritePin>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020c00 	.word	0x40020c00

08001900 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	ed87 0a01 	vstr	s0, [r7, #4]
 800190a:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fdd2 	bl	80004b8 <__aeabi_f2d>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <send_HubMotor+0x1a8>)
 800191a:	f7fe fe25 	bl	8000568 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	a35e      	add	r3, pc, #376	; (adr r3, 8001aa0 <send_HubMotor+0x1a0>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe ff46 	bl	80007bc <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f8c6 	bl	8000ac8 <__aeabi_d2iz>
 800193c:	4603      	mov	r3, r0
 800193e:	b21b      	sxth	r3, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	425b      	negs	r3, r3
 8001944:	b29b      	uxth	r3, r3
 8001946:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001948:	6838      	ldr	r0, [r7, #0]
 800194a:	f7fe fdb5 	bl	80004b8 <__aeabi_f2d>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <send_HubMotor+0x1a8>)
 8001954:	f7fe fe08 	bl	8000568 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	a34f      	add	r3, pc, #316	; (adr r3, 8001aa0 <send_HubMotor+0x1a0>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe ff29 	bl	80007bc <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8a9 	bl	8000ac8 <__aeabi_d2iz>
 8001976:	4603      	mov	r3, r0
 8001978:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 800197a:	23aa      	movs	r3, #170	; 0xaa
 800197c:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 800197e:	23a4      	movs	r3, #164	; 0xa4
 8001980:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 8001982:	230e      	movs	r3, #14
 8001984:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 8001992:	23c8      	movs	r3, #200	; 0xc8
 8001994:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 8001996:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	b29b      	uxth	r3, r3
 800199c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80019a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 80019a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019aa:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80019ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80019b0:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 80019b2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80019b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80019b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80019c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80019c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019cc:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80019ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019d2:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80019d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80019d8:	121b      	asrs	r3, r3, #8
 80019da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80019de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80019e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019e8:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80019ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ee:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80019f0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80019f4:	121b      	asrs	r3, r3, #8
 80019f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80019fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019fc:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 8001a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a04:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001a06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a0a:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	7b7b      	ldrb	r3, [r7, #13]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4413      	add	r3, r2
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001a28:	7c3b      	ldrb	r3, [r7, #16]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	7c7b      	ldrb	r3, [r7, #17]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	7cbb      	ldrb	r3, [r7, #18]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	7d3b      	ldrb	r3, [r7, #20]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	7d7b      	ldrb	r3, [r7, #21]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001a58:	7dbb      	ldrb	r3, [r7, #22]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	7e3b      	ldrb	r3, [r7, #24]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001a70:	7e7b      	ldrb	r3, [r7, #25]
 8001a72:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001a74:	4413      	add	r3, r2
 8001a76:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001a78:	8bfb      	ldrh	r3, [r7, #30]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 8001a7e:	f107 010c 	add.w	r1, r7, #12
 8001a82:	230a      	movs	r3, #10
 8001a84:	220f      	movs	r2, #15
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <send_HubMotor+0x1ac>)
 8001a88:	f007 fc3d 	bl	8009306 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <send_HubMotor+0x1b0>)
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <send_HubMotor+0x1ac>)
 8001a92:	f007 fcca 	bl	800942a <HAL_UART_Receive_DMA>
}
 8001a96:	bf00      	nop
 8001a98:	3730      	adds	r7, #48	; 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	54442d18 	.word	0x54442d18
 8001aa4:	401921fb 	.word	0x401921fb
 8001aa8:	40b00000 	.word	0x40b00000
 8001aac:	20000704 	.word	0x20000704
 8001ab0:	20000510 	.word	0x20000510

08001ab4 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2110      	movs	r1, #16
 8001abc:	481c      	ldr	r0, [pc, #112]	; (8001b30 <ADC_Init+0x7c>)
 8001abe:	f004 fcd7 	bl	8006470 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	481b      	ldr	r0, [pc, #108]	; (8001b34 <ADC_Init+0x80>)
 8001ac8:	f004 fcd2 	bl	8006470 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 8001acc:	2200      	movs	r2, #0
 8001ace:	2110      	movs	r1, #16
 8001ad0:	4818      	ldr	r0, [pc, #96]	; (8001b34 <ADC_Init+0x80>)
 8001ad2:	f004 fccd 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f002 ff50 	bl	800497c <HAL_Delay>
	AD7606_RST_HIGH;
 8001adc:	2201      	movs	r2, #1
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4814      	ldr	r0, [pc, #80]	; (8001b34 <ADC_Init+0x80>)
 8001ae2:	f004 fcc5 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f002 ff48 	bl	800497c <HAL_Delay>
	AD7606_RST_LOW;
 8001aec:	2200      	movs	r2, #0
 8001aee:	2110      	movs	r1, #16
 8001af0:	4810      	ldr	r0, [pc, #64]	; (8001b34 <ADC_Init+0x80>)
 8001af2:	f004 fcbd 	bl	8006470 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001af6:	2200      	movs	r2, #0
 8001af8:	2101      	movs	r1, #1
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <ADC_Init+0x80>)
 8001afc:	f004 fcb8 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f002 ff3b 	bl	800497c <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2102      	movs	r1, #2
 8001b0a:	480a      	ldr	r0, [pc, #40]	; (8001b34 <ADC_Init+0x80>)
 8001b0c:	f004 fcb0 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2104      	movs	r1, #4
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <ADC_Init+0x80>)
 8001b16:	f004 fcab 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <ADC_Init+0x80>)
 8001b20:	f004 fca6 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f002 ff29 	bl	800497c <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800

08001b38 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <ADC_DataRequest+0x1c>)
 8001b42:	f004 fc95 	bl	8006470 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001b46:	2201      	movs	r2, #1
 8001b48:	2120      	movs	r1, #32
 8001b4a:	4802      	ldr	r0, [pc, #8]	; (8001b54 <ADC_DataRequest+0x1c>)
 8001b4c:	f004 fc90 	bl	8006470 <HAL_GPIO_WritePin>
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40020800 	.word	0x40020800

08001b58 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001b60:	2200      	movs	r2, #0
 8001b62:	2110      	movs	r1, #16
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <ADC_Read+0x30>)
 8001b66:	f004 fc83 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <ADC_Read+0x34>)
 8001b72:	f005 fbba 	bl	80072ea <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001b76:	2201      	movs	r2, #1
 8001b78:	2110      	movs	r1, #16
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <ADC_Read+0x30>)
 8001b7c:	f004 fc78 	bl	8006470 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	20000214 	.word	0x20000214

08001b90 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f808 	bl	8001bb0 <enableMotor>
	brakeMotor(motor, 0);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f828 	bl	8001bf8 <brakeMotor>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f004 fc52 	bl	8006470 <HAL_GPIO_WritePin>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	461a      	mov	r2, r3
 8001be2:	2108      	movs	r1, #8
 8001be4:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <emBrakeMotor+0x20>)
 8001be6:	f004 fc43 	bl	8006470 <HAL_GPIO_WritePin>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020c00 	.word	0x40020c00

08001bf8 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69d8      	ldr	r0, [r3, #28]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8c1b      	ldrh	r3, [r3, #32]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f004 fc2e 	bl	8006470 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8b1b      	ldrh	r3, [r3, #24]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f006 f8b6 	bl	8007d90 <HAL_TIM_PWM_Stop>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	4619      	mov	r1, r3
 8001c44:	f004 fc14 	bl	8006470 <HAL_GPIO_WritePin>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 8001c62:	edd7 7a00 	vldr	s15, [r7]
 8001c66:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001d98 <setMotorSpeed+0x148>
 8001c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	dd01      	ble.n	8001c78 <setMotorSpeed+0x28>
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <setMotorSpeed+0x14c>)
 8001c76:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	f7fe fc1d 	bl	80004b8 <__aeabi_f2d>
 8001c7e:	a340      	add	r3, pc, #256	; (adr r3, 8001d80 <setMotorSpeed+0x130>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fab8 	bl	80001f8 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	a33d      	add	r3, pc, #244	; (adr r3, 8001d88 <setMotorSpeed+0x138>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fd91 	bl	80007bc <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ff39 	bl	8000b18 <__aeabi_d2uiz>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7fe fbfe 	bl	80004b8 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	a133      	add	r1, pc, #204	; (adr r1, 8001d90 <setMotorSpeed+0x140>)
 8001cc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cc6:	f7fe fd79 	bl	80007bc <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe fef9 	bl	8000ac8 <__aeabi_d2iz>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 8001cde:	8a7b      	ldrh	r3, [r7, #18]
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001ce6:	edd7 7a00 	vldr	s15, [r7]
 8001cea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	d503      	bpl.n	8001d00 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff7c 	bl	8001bf8 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	8a7a      	ldrh	r2, [r7, #18]
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8b1b      	ldrh	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d1c:	e01c      	b.n	8001d58 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8b1b      	ldrh	r3, [r3, #24]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d105      	bne.n	8001d32 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d30:	e012      	b.n	8001d58 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8b1b      	ldrh	r3, [r3, #24]
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d105      	bne.n	8001d46 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d44:	e008      	b.n	8001d58 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8b1b      	ldrh	r3, [r3, #24]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d104      	bne.n	8001d58 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8b1b      	ldrh	r3, [r3, #24]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f005 ff4c 	bl	8007c00 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w
 8001d80:	bfb15b57 	.word	0xbfb15b57
 8001d84:	3fd09eec 	.word	0x3fd09eec
 8001d88:	1172ef0b 	.word	0x1172ef0b
 8001d8c:	3f9989df 	.word	0x3f9989df
 8001d90:	00000000 	.word	0x00000000
 8001d94:	412e8480 	.word	0x412e8480
 8001d98:	42c80000 	.word	0x42c80000
 8001d9c:	42c80000 	.word	0x42c80000

08001da0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d129      	bne.n	8001e0a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 8001db6:	edd7 7a00 	vldr	s15, [r7]
 8001dba:	eef0 7ae7 	vabs.f32	s15, s15
 8001dbe:	ee17 0a90 	vmov	r0, s15
 8001dc2:	f7fe fb79 	bl	80004b8 <__aeabi_f2d>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	460d      	mov	r5, r1
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7fe fb74 	bl	80004b8 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	f7fe fcf0 	bl	80007bc <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f7fe fe42 	bl	8000a74 <__aeabi_dcmpge>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001df6:	2100      	movs	r1, #0
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff17 	bl	8001c2c <setMotorDir>
 8001dfe:	e032      	b.n	8001e66 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001e00:	2101      	movs	r1, #1
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff12 	bl	8001c2c <setMotorDir>
 8001e08:	e02d      	b.n	8001e66 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d128      	bne.n	8001e66 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001e14:	edd7 7a00 	vldr	s15, [r7]
 8001e18:	eef0 7ae7 	vabs.f32	s15, s15
 8001e1c:	ee17 0a90 	vmov	r0, s15
 8001e20:	f7fe fb4a 	bl	80004b8 <__aeabi_f2d>
 8001e24:	4604      	mov	r4, r0
 8001e26:	460d      	mov	r5, r1
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	f7fe fb45 	bl	80004b8 <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4620      	mov	r0, r4
 8001e34:	4629      	mov	r1, r5
 8001e36:	f7fe fcc1 	bl	80007bc <__aeabi_ddiv>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f7fe fe13 	bl	8000a74 <__aeabi_dcmpge>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001e54:	2101      	movs	r1, #1
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fee8 	bl	8001c2c <setMotorDir>
 8001e5c:	e003      	b.n	8001e66 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fee3 	bl	8001c2c <setMotorDir>
    }

    HAL_Delay(50);
 8001e66:	2032      	movs	r0, #50	; 0x32
 8001e68:	f002 fd88 	bl	800497c <HAL_Delay>
    brakeMotor(motor, 0);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fec2 	bl	8001bf8 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001e74:	edd7 7a00 	vldr	s15, [r7]
 8001e78:	eef0 7ae7 	vabs.f32	s15, s15
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fee5 	bl	8001c50 <setMotorSpeed>

}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}

08001e8e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f004 facc 	bl	8006440 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	799a      	ldrb	r2, [r3, #6]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	79db      	ldrb	r3, [r3, #7]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d004      	beq.n	8001ec6 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001ebc:	f002 fd52 	bl	8004964 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001ec6:	f002 fd4d 	bl	8004964 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d209      	bcs.n	8001eec <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	799a      	ldrb	r2, [r3, #6]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7a1b      	ldrb	r3, [r3, #8]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e004      	b.n	8001ef6 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	799a      	ldrb	r2, [r3, #6]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <MX_CAN1_Init+0xcc>)
 8001f0a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f0e:	2209      	movs	r2, #9
 8001f10:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f12:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f52:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f54:	f002 fd36 	bl	80049c4 <HAL_CAN_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001f5e:	f001 fe6d 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001f82:	2301      	movs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001f90:	f002 fe14 	bl	8004bbc <HAL_CAN_ConfigFilter>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_CAN1_Init+0x9e>
				Error_Handler();
 8001f9a:	f001 fe4f 	bl	8003c3c <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001fa2:	f003 f91c 	bl	80051de <HAL_CAN_ActivateNotification>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001fac:	f001 fe46 	bl	8003c3c <Error_Handler>
 8001fb0:	e007      	b.n	8001fc2 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <MX_CAN1_Init+0xc8>)
 8001fb4:	f002 fee2 	bl	8004d7c <HAL_CAN_Start>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001fbe:	f001 fe3d 	bl	8003c3c <Error_Handler>


  /* USER CODE END CAN1_Init 2 */

}
 8001fc2:	3728      	adds	r7, #40	; 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000026c 	.word	0x2000026c
 8001fcc:	40006400 	.word	0x40006400

08001fd0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_CAN_MspInit+0x94>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d133      	bne.n	800205a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_CAN_MspInit+0x98>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_CAN_MspInit+0x98>)
 8001ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_CAN_MspInit+0x98>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_CAN_MspInit+0x98>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_CAN_MspInit+0x98>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_CAN_MspInit+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800202a:	2303      	movs	r3, #3
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800203a:	2309      	movs	r3, #9
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_CAN_MspInit+0x9c>)
 8002046:	f004 f84f 	bl	80060e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	2014      	movs	r0, #20
 8002050:	f003 fbf5 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002054:	2014      	movs	r0, #20
 8002056:	f003 fc0e 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40006400 	.word	0x40006400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020c00 	.word	0x40020c00

08002070 <differentialDriveInit>:
 *
 * @return            - None
 *
 * @Note              -
 */
void differentialDriveInit(differentialDrive_Handler* dd_handler, uint32_t frequency ){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	dd_handler->m_leftMotor = 0;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
	dd_handler->m_rightMotor = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
	dd_handler->m_fPivYLimit = 0.2 * COMPUTERANGE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002090:	609a      	str	r2, [r3, #8]
	dd_handler->frequency = frequency;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
	memset(&dd_handler->left_motor_state, 0, sizeof(dd_handler->left_motor_state));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	330c      	adds	r3, #12
 800209c:	221c      	movs	r2, #28
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f008 fa5f 	bl	800a564 <memset>
	memset(&dd_handler->right_motor_state, 0, sizeof(dd_handler->right_motor_state));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3328      	adds	r3, #40	; 0x28
 80020aa:	221c      	movs	r2, #28
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f008 fa58 	bl	800a564 <memset>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_DMA_Init+0x88>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <MX_DMA_Init+0x88>)
 80020cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <MX_DMA_Init+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_DMA_Init+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <MX_DMA_Init+0x88>)
 80020e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_DMA_Init+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	200c      	movs	r0, #12
 8002100:	f003 fb9d 	bl	800583e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002104:	200c      	movs	r0, #12
 8002106:	f003 fbb6 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	200e      	movs	r0, #14
 8002110:	f003 fb95 	bl	800583e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002114:	200e      	movs	r0, #14
 8002116:	f003 fbae 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2039      	movs	r0, #57	; 0x39
 8002120:	f003 fb8d 	bl	800583e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002124:	2039      	movs	r0, #57	; 0x39
 8002126:	f003 fba6 	bl	8005876 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2045      	movs	r0, #69	; 0x45
 8002130:	f003 fb85 	bl	800583e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002134:	2045      	movs	r0, #69	; 0x45
 8002136:	f003 fb9e 	bl	8005876 <HAL_NVIC_EnableIRQ>

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <ENCODER_Init+0x24>)
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <ENCODER_Init+0x28>)
 8002150:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <ENCODER_Init+0x2c>)
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <ENCODER_Init+0x28>)
 8002156:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8002158:	2101      	movs	r1, #1
 800215a:	4804      	ldr	r0, [pc, #16]	; (800216c <ENCODER_Init+0x24>)
 800215c:	f000 f83f 	bl	80021de <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8002160:	2102      	movs	r1, #2
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <ENCODER_Init+0x2c>)
 8002164:	f000 f83b 	bl	80021de <ENCODER_Set_TxHeader>

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000314 	.word	0x20000314
 8002170:	2000026c 	.word	0x2000026c
 8002174:	200002bc 	.word	0x200002bc

08002178 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	785a      	ldrb	r2, [r3, #1]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	789a      	ldrb	r2, [r3, #2]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	78da      	ldrb	r2, [r3, #3]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	791a      	ldrb	r2, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	795a      	ldrb	r2, [r3, #5]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	799a      	ldrb	r2, [r3, #6]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	79da      	ldrb	r2, [r3, #7]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2204      	movs	r2, #4
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0120 	add.w	r1, r3, #32
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3338      	adds	r3, #56	; 0x38
 800225e:	f002 fdd1 	bl	8004e04 <HAL_CAN_AddTxMessage>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffd1 	bl	800221a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	441a      	add	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	4413      	add	r3, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	4b82      	ldr	r3, [pc, #520]	; (80024f8 <MX_GPIO_Init+0x224>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a81      	ldr	r2, [pc, #516]	; (80024f8 <MX_GPIO_Init+0x224>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b7f      	ldr	r3, [pc, #508]	; (80024f8 <MX_GPIO_Init+0x224>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <MX_GPIO_Init+0x224>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a73      	ldr	r2, [pc, #460]	; (80024f8 <MX_GPIO_Init+0x224>)
 800232c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b71      	ldr	r3, [pc, #452]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a6c      	ldr	r2, [pc, #432]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <MX_GPIO_Init+0x224>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <MX_GPIO_Init+0x224>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <MX_GPIO_Init+0x224>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8002392:	2200      	movs	r2, #0
 8002394:	213f      	movs	r1, #63	; 0x3f
 8002396:	4859      	ldr	r0, [pc, #356]	; (80024fc <MX_GPIO_Init+0x228>)
 8002398:	f004 f86a 	bl	8006470 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 800239c:	2200      	movs	r2, #0
 800239e:	2110      	movs	r1, #16
 80023a0:	4857      	ldr	r0, [pc, #348]	; (8002500 <MX_GPIO_Init+0x22c>)
 80023a2:	f004 f865 	bl	8006470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80023a6:	2200      	movs	r2, #0
 80023a8:	219b      	movs	r1, #155	; 0x9b
 80023aa:	4856      	ldr	r0, [pc, #344]	; (8002504 <MX_GPIO_Init+0x230>)
 80023ac:	f004 f860 	bl	8006470 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 80023b6:	4854      	ldr	r0, [pc, #336]	; (8002508 <MX_GPIO_Init+0x234>)
 80023b8:	f004 f85a 	bl	8006470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 80023bc:	2200      	movs	r2, #0
 80023be:	f64e 4108 	movw	r1, #60424	; 0xec08
 80023c2:	4852      	ldr	r0, [pc, #328]	; (800250c <MX_GPIO_Init+0x238>)
 80023c4:	f004 f854 	bl	8006470 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 80023c8:	2307      	movs	r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023d0:	2302      	movs	r3, #2
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	4619      	mov	r1, r3
 80023da:	484b      	ldr	r0, [pc, #300]	; (8002508 <MX_GPIO_Init+0x234>)
 80023dc:	f003 fe84 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 80023e0:	f248 1378 	movw	r3, #33144	; 0x8178
 80023e4:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ee:	f107 031c 	add.w	r3, r7, #28
 80023f2:	4619      	mov	r1, r3
 80023f4:	4844      	ldr	r0, [pc, #272]	; (8002508 <MX_GPIO_Init+0x234>)
 80023f6:	f003 fe77 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 80023fa:	233f      	movs	r3, #63	; 0x3f
 80023fc:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	2301      	movs	r3, #1
 8002400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002402:	2301      	movs	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	483a      	ldr	r0, [pc, #232]	; (80024fc <MX_GPIO_Init+0x228>)
 8002412:	f003 fe69 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8002416:	2310      	movs	r3, #16
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241e:	2301      	movs	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4834      	ldr	r0, [pc, #208]	; (8002500 <MX_GPIO_Init+0x22c>)
 800242e:	f003 fe5b 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002436:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800243a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	482e      	ldr	r0, [pc, #184]	; (8002500 <MX_GPIO_Init+0x22c>)
 8002448:	f003 fe4e 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 800244c:	239b      	movs	r3, #155	; 0x9b
 800244e:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	2301      	movs	r3, #1
 8002452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002454:	2301      	movs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	4828      	ldr	r0, [pc, #160]	; (8002504 <MX_GPIO_Init+0x230>)
 8002464:	f003 fe40 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8002468:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 800246c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002472:	2301      	movs	r3, #1
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4821      	ldr	r0, [pc, #132]	; (8002508 <MX_GPIO_Init+0x234>)
 8002482:	f003 fe31 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8002486:	f64e 4308 	movw	r3, #60424	; 0xec08
 800248a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248c:	2301      	movs	r3, #1
 800248e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	481b      	ldr	r0, [pc, #108]	; (800250c <MX_GPIO_Init+0x238>)
 80024a0:	f003 fe22 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4619      	mov	r1, r3
 80024b8:	4814      	ldr	r0, [pc, #80]	; (800250c <MX_GPIO_Init+0x238>)
 80024ba:	f003 fe15 	bl	80060e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024be:	2320      	movs	r3, #32
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80024ce:	2309      	movs	r3, #9
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4619      	mov	r1, r3
 80024d8:	480a      	ldr	r0, [pc, #40]	; (8002504 <MX_GPIO_Init+0x230>)
 80024da:	f003 fe05 	bl	80060e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2017      	movs	r0, #23
 80024e4:	f003 f9ab 	bl	800583e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024e8:	2017      	movs	r0, #23
 80024ea:	f003 f9c4 	bl	8005876 <HAL_NVIC_EnableIRQ>

}
 80024ee:	bf00      	nop
 80024f0:	3730      	adds	r7, #48	; 0x30
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40021000 	.word	0x40021000
 800250c:	40020c00 	.word	0x40020c00

08002510 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_I2C1_Init+0x74>)
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <MX_I2C1_Init+0x78>)
 8002518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_I2C1_Init+0x74>)
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <MX_I2C1_Init+0x7c>)
 800251e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_I2C1_Init+0x74>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_I2C1_Init+0x74>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_I2C1_Init+0x74>)
 800252e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002532:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <MX_I2C1_Init+0x74>)
 8002536:	2200      	movs	r2, #0
 8002538:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_I2C1_Init+0x74>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <MX_I2C1_Init+0x74>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <MX_I2C1_Init+0x74>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_I2C1_Init+0x74>)
 800254e:	f003 ffc1 	bl	80064d4 <HAL_I2C_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002558:	f001 fb70 	bl	8003c3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800255c:	2100      	movs	r1, #0
 800255e:	4809      	ldr	r0, [pc, #36]	; (8002584 <MX_I2C1_Init+0x74>)
 8002560:	f004 f8fc 	bl	800675c <HAL_I2CEx_ConfigAnalogFilter>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800256a:	f001 fb67 	bl	8003c3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <MX_I2C1_Init+0x74>)
 8002572:	f004 f92f 	bl	80067d4 <HAL_I2CEx_ConfigDigitalFilter>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800257c:	f001 fb5e 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000036c 	.word	0x2000036c
 8002588:	40005400 	.word	0x40005400
 800258c:	00061a80 	.word	0x00061a80

08002590 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_I2C_MspInit+0x84>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d12c      	bne.n	800260c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_I2C_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a17      	ldr	r2, [pc, #92]	; (8002618 <HAL_I2C_MspInit+0x88>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_I2C_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 80025ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d4:	2312      	movs	r3, #18
 80025d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d8:	2301      	movs	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e0:	2304      	movs	r3, #4
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	480c      	ldr	r0, [pc, #48]	; (800261c <HAL_I2C_MspInit+0x8c>)
 80025ec:	f003 fd7c 	bl	80060e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_I2C_MspInit+0x88>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_I2C_MspInit+0x88>)
 80025fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_I2C_MspInit+0x88>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40005400 	.word	0x40005400
 8002618:	40023800 	.word	0x40023800
 800261c:	40020400 	.word	0x40020400

08002620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002626:	f002 f937 	bl	8004898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262a:	f000 fd75 	bl	8003118 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 800262e:	f004 fd9f 	bl	8007170 <HAL_RCC_GetHCLKFreq>
 8002632:	4603      	mov	r3, r0
 8002634:	4ac1      	ldr	r2, [pc, #772]	; (800293c <main+0x31c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	099b      	lsrs	r3, r3, #6
 800263c:	4618      	mov	r0, r3
 800263e:	f003 f928 	bl	8005892 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002642:	2004      	movs	r0, #4
 8002644:	f003 f932 	bl	80058ac <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002650:	f003 f8f5 	bl	800583e <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002654:	f7ff fe3e 	bl	80022d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002658:	f7ff fd30 	bl	80020bc <MX_DMA_Init>
  MX_I2C1_Init();
 800265c:	f7ff ff58 	bl	8002510 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002660:	f001 fc64 	bl	8003f2c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002664:	f001 fd02 	bl	800406c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002668:	f001 ff40 	bl	80044ec <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800266c:	f001 fd72 	bl	8004154 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002670:	f001 fdbe 	bl	80041f0 <MX_TIM8_Init>
  MX_CAN1_Init();
 8002674:	f7ff fc44 	bl	8001f00 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002678:	f001 faf6 	bl	8003c68 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800267c:	f001 ff60 	bl	8004540 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	ADC_Init();
 8002680:	f7ff fa18 	bl	8001ab4 <ADC_Init>
	ADC_DataRequest();
 8002684:	f7ff fa58 	bl	8001b38 <ADC_DataRequest>
	ENCODER_Init();
 8002688:	f7ff fd5e 	bl	8002148 <ENCODER_Init>
	differentialDriveInit(&differential_drive_handler, FREQUENCY);
 800268c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002690:	48ab      	ldr	r0, [pc, #684]	; (8002940 <main+0x320>)
 8002692:	f7ff fced 	bl	8002070 <differentialDriveInit>
	MotorInit(&sabertooth_handler, 128, &huart6);
 8002696:	4aab      	ldr	r2, [pc, #684]	; (8002944 <main+0x324>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	48ab      	ldr	r0, [pc, #684]	; (8002948 <main+0x328>)
 800269c:	f7fe fea0 	bl	80013e0 <MotorInit>
//			Error_Handler();
//	}


//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 80026a0:	48aa      	ldr	r0, [pc, #680]	; (800294c <main+0x32c>)
 80026a2:	f7ff fa75 	bl	8001b90 <bd25l_Init>
	bd25l_Init(&backMotor);
 80026a6:	48aa      	ldr	r0, [pc, #680]	; (8002950 <main+0x330>)
 80026a8:	f7ff fa72 	bl	8001b90 <bd25l_Init>
	runMotor(&rearMotor, 0);
 80026ac:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8002954 <main+0x334>
 80026b0:	48a6      	ldr	r0, [pc, #664]	; (800294c <main+0x32c>)
 80026b2:	f7ff fb75 	bl	8001da0 <runMotor>
	runMotor(&backMotor, 0);
 80026b6:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8002954 <main+0x334>
 80026ba:	48a5      	ldr	r0, [pc, #660]	; (8002950 <main+0x330>)
 80026bc:	f7ff fb70 	bl	8001da0 <runMotor>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 80026c0:	210c      	movs	r1, #12
 80026c2:	48a5      	ldr	r0, [pc, #660]	; (8002958 <main+0x338>)
 80026c4:	f005 fc2e 	bl	8007f24 <HAL_TIM_IC_Start_IT>
	emBrakeMotor(0);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff fa83 	bl	8001bd4 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 80026ce:	f7ff f8ff 	bl	80018d0 <hubMotor_Init>
	send_HubMotor(0, 0);
 80026d2:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8002954 <main+0x334>
 80026d6:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8002954 <main+0x334>
 80026da:	f7ff f911 	bl	8001900 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80026de:	4b9f      	ldr	r3, [pc, #636]	; (800295c <main+0x33c>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	4b9e      	ldr	r3, [pc, #632]	; (8002960 <main+0x340>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	4b9e      	ldr	r3, [pc, #632]	; (8002964 <main+0x344>)
 80026ec:	edd3 6a00 	vldr	s13, [r3]
 80026f0:	eeb0 1a66 	vmov.f32	s2, s13
 80026f4:	eef0 0a47 	vmov.f32	s1, s14
 80026f8:	eeb0 0a67 	vmov.f32	s0, s15
 80026fc:	4b9a      	ldr	r3, [pc, #616]	; (8002968 <main+0x348>)
 80026fe:	4a9b      	ldr	r2, [pc, #620]	; (800296c <main+0x34c>)
 8002700:	499b      	ldr	r1, [pc, #620]	; (8002970 <main+0x350>)
 8002702:	489c      	ldr	r0, [pc, #624]	; (8002974 <main+0x354>)
 8002704:	f7fe fbf4 	bl	8000ef0 <pid_create>
 8002708:	4603      	mov	r3, r0
 800270a:	4a9b      	ldr	r2, [pc, #620]	; (8002978 <main+0x358>)
 800270c:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -80, 80);
 800270e:	4b9a      	ldr	r3, [pc, #616]	; (8002978 <main+0x358>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800297c <main+0x35c>
 8002716:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8002980 <main+0x360>
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fd74 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 8002720:	4b95      	ldr	r3, [pc, #596]	; (8002978 <main+0x358>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fd3a 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 800272c:	4b92      	ldr	r3, [pc, #584]	; (8002978 <main+0x358>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fdce 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002736:	4b93      	ldr	r3, [pc, #588]	; (8002984 <main+0x364>)
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <main+0x368>)
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	4b92      	ldr	r3, [pc, #584]	; (800298c <main+0x36c>)
 8002744:	edd3 6a00 	vldr	s13, [r3]
 8002748:	eeb0 1a66 	vmov.f32	s2, s13
 800274c:	eef0 0a47 	vmov.f32	s1, s14
 8002750:	eeb0 0a67 	vmov.f32	s0, s15
 8002754:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <main+0x370>)
 8002756:	4a8f      	ldr	r2, [pc, #572]	; (8002994 <main+0x374>)
 8002758:	498f      	ldr	r1, [pc, #572]	; (8002998 <main+0x378>)
 800275a:	4890      	ldr	r0, [pc, #576]	; (800299c <main+0x37c>)
 800275c:	f7fe fbc8 	bl	8000ef0 <pid_create>
 8002760:	4603      	mov	r3, r0
 8002762:	4a8f      	ldr	r2, [pc, #572]	; (80029a0 <main+0x380>)
 8002764:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -80, 80);
 8002766:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <main+0x380>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	eddf 0a84 	vldr	s1, [pc, #528]	; 800297c <main+0x35c>
 800276e:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002980 <main+0x360>
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fd48 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002778:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <main+0x380>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fd0e 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 8002784:	4b86      	ldr	r3, [pc, #536]	; (80029a0 <main+0x380>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fda2 	bl	80012d2 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800278e:	f002 f8e9 	bl	8004964 <HAL_GetTick>
 8002792:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8002794:	4883      	ldr	r0, [pc, #524]	; (80029a4 <main+0x384>)
 8002796:	f7ff fd68 	bl	800226a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800279a:	4883      	ldr	r0, [pc, #524]	; (80029a8 <main+0x388>)
 800279c:	f7ff fd65 	bl	800226a <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 80027a0:	4b82      	ldr	r3, [pc, #520]	; (80029ac <main+0x38c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff fa14 	bl	8001bd4 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 80027ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027b0:	f002 f8e4 	bl	800497c <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 80027b4:	f002 f8d6 	bl	8004964 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4293      	cmp	r3, r2
 80027be:	d0f9      	beq.n	80027b4 <main+0x194>
		{
			ADC_DataRequest();
 80027c0:	f7ff f9ba 	bl	8001b38 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 80027c4:	4877      	ldr	r0, [pc, #476]	; (80029a4 <main+0x384>)
 80027c6:	f7ff fd28 	bl	800221a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 80027ca:	4877      	ldr	r0, [pc, #476]	; (80029a8 <main+0x388>)
 80027cc:	f7ff fd25 	bl	800221a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 80027d0:	211e      	movs	r1, #30
 80027d2:	4877      	ldr	r0, [pc, #476]	; (80029b0 <main+0x390>)
 80027d4:	f7ff fb5b 	bl	8001e8e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80027d8:	211e      	movs	r1, #30
 80027da:	4876      	ldr	r0, [pc, #472]	; (80029b4 <main+0x394>)
 80027dc:	f7ff fb57 	bl	8001e8e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80027e0:	211e      	movs	r1, #30
 80027e2:	4875      	ldr	r0, [pc, #468]	; (80029b8 <main+0x398>)
 80027e4:	f7ff fb53 	bl	8001e8e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80027e8:	2105      	movs	r1, #5
 80027ea:	4874      	ldr	r0, [pc, #464]	; (80029bc <main+0x39c>)
 80027ec:	f7ff fb4f 	bl	8001e8e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80027f0:	2105      	movs	r1, #5
 80027f2:	4873      	ldr	r0, [pc, #460]	; (80029c0 <main+0x3a0>)
 80027f4:	f7ff fb4b 	bl	8001e8e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80027f8:	2105      	movs	r1, #5
 80027fa:	4872      	ldr	r0, [pc, #456]	; (80029c4 <main+0x3a4>)
 80027fc:	f7ff fb47 	bl	8001e8e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8002800:	2105      	movs	r1, #5
 8002802:	4871      	ldr	r0, [pc, #452]	; (80029c8 <main+0x3a8>)
 8002804:	f7ff fb43 	bl	8001e8e <GPIO_Digital_Filtered_Input>
			 *	1. Climbing wheel extension.
			 *	2. Wheelchair lifting/dropping
			 *	3. Climbing wheel retraction
			 *-------------------------------------------------------------------*/
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if ((button3.state == 1 || button_prev_state == 1)
 8002808:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <main+0x398>)
 800280a:	7a1b      	ldrb	r3, [r3, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d003      	beq.n	8002818 <main+0x1f8>
 8002810:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <main+0x3ac>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d038      	beq.n	800288a <main+0x26a>
					&& climb_first_iteration == true)
 8002818:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <main+0x3b0>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d034      	beq.n	800288a <main+0x26a>
			{
				button_prev_state = 1;
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <main+0x3ac>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
				if (abs(encoderFront.signed_encoder_pos) >= 50
 8002826:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <main+0x388>)
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	bfb8      	it	lt
 800282e:	425b      	neglt	r3, r3
 8002830:	2b31      	cmp	r3, #49	; 0x31
 8002832:	dc06      	bgt.n	8002842 <main+0x222>
						|| abs(encoderBack.signed_encoder_pos) >= 50)
 8002834:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <main+0x384>)
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	2b00      	cmp	r3, #0
 800283a:	bfb8      	it	lt
 800283c:	425b      	neglt	r3, r3
 800283e:	2b31      	cmp	r3, #49	; 0x31
 8002840:	dd0f      	ble.n	8002862 <main+0x242>
				{
					goto_pos(0, frontClimb_pid);
 8002842:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <main+0x358>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	2000      	movs	r0, #0
 800284a:	f000 ffbd 	bl	80037c8 <goto_pos>
					goto_pos(0, backClimb_pid);
 800284e:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <main+0x380>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	2000      	movs	r0, #0
 8002856:	f000 ffb7 	bl	80037c8 <goto_pos>
					lifting_mode = EMPTY;
 800285a:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <main+0x3b4>)
 800285c:	2205      	movs	r2, #5
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e013      	b.n	800288a <main+0x26a>
				}
				else
				{
					runMotor(&rearMotor, 0);
 8002862:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8002954 <main+0x334>
 8002866:	4839      	ldr	r0, [pc, #228]	; (800294c <main+0x32c>)
 8002868:	f7ff fa9a 	bl	8001da0 <runMotor>
					runMotor(&backMotor, 0);
 800286c:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8002954 <main+0x334>
 8002870:	4837      	ldr	r0, [pc, #220]	; (8002950 <main+0x330>)
 8002872:	f7ff fa95 	bl	8001da0 <runMotor>
					lifting_mode = LANDING;
 8002876:	4b57      	ldr	r3, [pc, #348]	; (80029d4 <main+0x3b4>)
 8002878:	2204      	movs	r2, #4
 800287a:	701a      	strb	r2, [r3, #0]
					button_prev_state = 0;
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <main+0x3ac>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002886:	f002 f879 	bl	800497c <HAL_Delay>

				}
			}

			if (front_touchdown == false && back_touchdown == false
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <main+0x3b8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8101 	beq.w	8002a9c <main+0x47c>
 800289a:	4b50      	ldr	r3, [pc, #320]	; (80029dc <main+0x3bc>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f083 0301 	eor.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80f9 	beq.w	8002a9c <main+0x47c>
					&& lifting_mode == LANDING)
 80028aa:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <main+0x3b4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	f040 80f4 	bne.w	8002a9c <main+0x47c>
			{
				//Stop the base wheel completely
				MotorThrottle(&sabertooth_handler, 1, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2101      	movs	r1, #1
 80028b8:	4823      	ldr	r0, [pc, #140]	; (8002948 <main+0x328>)
 80028ba:	f7fe fdbd 	bl	8001438 <MotorThrottle>
				MotorThrottle(&sabertooth_handler, 2, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2102      	movs	r1, #2
 80028c2:	4821      	ldr	r0, [pc, #132]	; (8002948 <main+0x328>)
 80028c4:	f7fe fdb8 	bl	8001438 <MotorThrottle>

				//Disengage the motor brake
				emBrakeMotor(1);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f7ff f983 	bl	8001bd4 <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 80028ce:	e0c3      	b.n	8002a58 <main+0x438>
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 80028d0:	2105      	movs	r1, #5
 80028d2:	483a      	ldr	r0, [pc, #232]	; (80029bc <main+0x39c>)
 80028d4:	f7ff fadb 	bl	8001e8e <GPIO_Digital_Filtered_Input>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <main+0x2cc>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 80028de:	2105      	movs	r1, #5
 80028e0:	4837      	ldr	r0, [pc, #220]	; (80029c0 <main+0x3a0>)
 80028e2:	f7ff fad4 	bl	8001e8e <GPIO_Digital_Filtered_Input>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <main+0x2d2>
						front_touchdown = 1;
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <main+0x3b8>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 80028f2:	2105      	movs	r1, #5
 80028f4:	4833      	ldr	r0, [pc, #204]	; (80029c4 <main+0x3a4>)
 80028f6:	f7ff faca 	bl	8001e8e <GPIO_Digital_Filtered_Input>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <main+0x2ee>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 8002900:	2105      	movs	r1, #5
 8002902:	4831      	ldr	r0, [pc, #196]	; (80029c8 <main+0x3a8>)
 8002904:	f7ff fac3 	bl	8001e8e <GPIO_Digital_Filtered_Input>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <main+0x2f4>
						back_touchdown = 1;
 800290e:	4b33      	ldr	r3, [pc, #204]	; (80029dc <main+0x3bc>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <main+0x3bc>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	f083 0301 	eor.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d05e      	beq.n	80029e0 <main+0x3c0>
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <main+0x3b8>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d05a      	beq.n	80029e0 <main+0x3c0>
							&& lifting_mode == LANDING)
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <main+0x3b4>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b04      	cmp	r3, #4
 8002930:	d156      	bne.n	80029e0 <main+0x3c0>
						lifting_mode = CLIMB_UP;
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <main+0x3b4>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e064      	b.n	8002a04 <main+0x3e4>
 800293a:	bf00      	nop
 800293c:	10624dd3 	.word	0x10624dd3
 8002940:	20000488 	.word	0x20000488
 8002944:	20000808 	.word	0x20000808
 8002948:	200003c0 	.word	0x200003c0
 800294c:	20000000 	.word	0x20000000
 8002950:	20000034 	.word	0x20000034
 8002954:	00000000 	.word	0x00000000
 8002958:	20000524 	.word	0x20000524
 800295c:	200000dc 	.word	0x200000dc
 8002960:	200000e0 	.word	0x200000e0
 8002964:	200000e4 	.word	0x200000e4
 8002968:	200001b8 	.word	0x200001b8
 800296c:	200001b4 	.word	0x200001b4
 8002970:	200001b0 	.word	0x200001b0
 8002974:	200004d0 	.word	0x200004d0
 8002978:	20000484 	.word	0x20000484
 800297c:	42a00000 	.word	0x42a00000
 8002980:	c2a00000 	.word	0xc2a00000
 8002984:	200000e8 	.word	0x200000e8
 8002988:	200000ec 	.word	0x200000ec
 800298c:	200000f0 	.word	0x200000f0
 8002990:	200001c4 	.word	0x200001c4
 8002994:	200001c0 	.word	0x200001c0
 8002998:	200001bc 	.word	0x200001bc
 800299c:	20000440 	.word	0x20000440
 80029a0:	20000520 	.word	0x20000520
 80029a4:	20000314 	.word	0x20000314
 80029a8:	200002bc 	.word	0x200002bc
 80029ac:	200001e0 	.word	0x200001e0
 80029b0:	200000a8 	.word	0x200000a8
 80029b4:	200000b8 	.word	0x200000b8
 80029b8:	200000c8 	.word	0x200000c8
 80029bc:	20000068 	.word	0x20000068
 80029c0:	20000078 	.word	0x20000078
 80029c4:	20000088 	.word	0x20000088
 80029c8:	20000098 	.word	0x20000098
 80029cc:	200001a6 	.word	0x200001a6
 80029d0:	200000d9 	.word	0x200000d9
 80029d4:	200000d8 	.word	0x200000d8
 80029d8:	200001a4 	.word	0x200001a4
 80029dc:	200001a5 	.word	0x200001a5
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0
 80029e0:	4bc3      	ldr	r3, [pc, #780]	; (8002cf0 <main+0x6d0>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <main+0x3e4>
 80029e8:	4bc2      	ldr	r3, [pc, #776]	; (8002cf4 <main+0x6d4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	f083 0301 	eor.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <main+0x3e4>
							&& lifting_mode == LANDING)
 80029f6:	4bc0      	ldr	r3, [pc, #768]	; (8002cf8 <main+0x6d8>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d102      	bne.n	8002a04 <main+0x3e4>
						lifting_mode = CLIMB_DOWN;
 80029fe:	4bbe      	ldr	r3, [pc, #760]	; (8002cf8 <main+0x6d8>)
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]

					ENCODER_Read(&encoderBack);
 8002a04:	48bd      	ldr	r0, [pc, #756]	; (8002cfc <main+0x6dc>)
 8002a06:	f7ff fc08 	bl	800221a <ENCODER_Read>
					ENCODER_Read(&encoderFront);
 8002a0a:	48bd      	ldr	r0, [pc, #756]	; (8002d00 <main+0x6e0>)
 8002a0c:	f7ff fc05 	bl	800221a <ENCODER_Read>

					if (back_touchdown == false)
 8002a10:	4bb7      	ldr	r3, [pc, #732]	; (8002cf0 <main+0x6d0>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <main+0x40a>
						runMotor(&backMotor, 30);
 8002a1e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002a22:	48b8      	ldr	r0, [pc, #736]	; (8002d04 <main+0x6e4>)
 8002a24:	f7ff f9bc 	bl	8001da0 <runMotor>
 8002a28:	e004      	b.n	8002a34 <main+0x414>
					else
						runMotor(&backMotor, 0);
 8002a2a:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8002d08 <main+0x6e8>
 8002a2e:	48b5      	ldr	r0, [pc, #724]	; (8002d04 <main+0x6e4>)
 8002a30:	f7ff f9b6 	bl	8001da0 <runMotor>

					if (front_touchdown == false)
 8002a34:	4baf      	ldr	r3, [pc, #700]	; (8002cf4 <main+0x6d4>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <main+0x42e>
						runMotor(&rearMotor, 30);
 8002a42:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002a46:	48b1      	ldr	r0, [pc, #708]	; (8002d0c <main+0x6ec>)
 8002a48:	f7ff f9aa 	bl	8001da0 <runMotor>
 8002a4c:	e004      	b.n	8002a58 <main+0x438>
					else
						runMotor(&rearMotor, 0);
 8002a4e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8002d08 <main+0x6e8>
 8002a52:	48ae      	ldr	r0, [pc, #696]	; (8002d0c <main+0x6ec>)
 8002a54:	f7ff f9a4 	bl	8001da0 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 8002a58:	4ba6      	ldr	r3, [pc, #664]	; (8002cf4 <main+0x6d4>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f47f af34 	bne.w	80028d0 <main+0x2b0>
 8002a68:	4ba1      	ldr	r3, [pc, #644]	; (8002cf0 <main+0x6d0>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f083 0301 	eor.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f47f af2c 	bne.w	80028d0 <main+0x2b0>

				}
				runMotor(&rearMotor, 0);
 8002a78:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8002d08 <main+0x6e8>
 8002a7c:	48a3      	ldr	r0, [pc, #652]	; (8002d0c <main+0x6ec>)
 8002a7e:	f7ff f98f 	bl	8001da0 <runMotor>
				runMotor(&backMotor, 0);
 8002a82:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8002d08 <main+0x6e8>
 8002a86:	489f      	ldr	r0, [pc, #636]	; (8002d04 <main+0x6e4>)
 8002a88:	f7ff f98a 	bl	8001da0 <runMotor>
				emBrakeMotor(0);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7ff f8a1 	bl	8001bd4 <emBrakeMotor>
				HAL_Delay(500);
 8002a92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a96:	f001 ff71 	bl	800497c <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 8002a9a:	e331      	b.n	8003100 <main+0xae0>
			}
			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 8002a9c:	4b96      	ldr	r3, [pc, #600]	; (8002cf8 <main+0x6d8>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11a      	bne.n	8002ada <main+0x4ba>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	4899      	ldr	r0, [pc, #612]	; (8002d10 <main+0x6f0>)
 8002aaa:	f003 fce1 	bl	8006470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	4897      	ldr	r0, [pc, #604]	; (8002d10 <main+0x6f0>)
 8002ab4:	f003 fcdc 	bl	8006470 <HAL_GPIO_WritePin>
//				wheel_Control(&baseWheelSpeed);
//				baseMotorCommand();
				front_touchdown = false;
 8002ab8:	4b8e      	ldr	r3, [pc, #568]	; (8002cf4 <main+0x6d4>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 8002abe:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <main+0x6d0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 8002ac4:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <main+0x6f4>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
				speed[FRONT_INDEX] = 0;
 8002aca:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <main+0x6f8>)
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
				speed[BACK_INDEX] = 0;
 8002ad2:	4b91      	ldr	r3, [pc, #580]	; (8002d18 <main+0x6f8>)
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
			}
			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 8002ada:	4b87      	ldr	r3, [pc, #540]	; (8002cf8 <main+0x6d8>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	f040 818d 	bne.w	8002dfe <main+0x7de>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2108      	movs	r1, #8
 8002ae8:	4889      	ldr	r0, [pc, #548]	; (8002d10 <main+0x6f0>)
 8002aea:	f003 fcc1 	bl	8006470 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <main+0x6f4>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8139 	beq.w	8002d6a <main+0x74a>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <main+0x6fc>)
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fcdc 	bl	80004b8 <__aeabi_f2d>
 8002b00:	4604      	mov	r4, r0
 8002b02:	460d      	mov	r5, r1
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <main+0x6e0>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fcd5 	bl	80004b8 <__aeabi_f2d>
 8002b0e:	a370      	add	r3, pc, #448	; (adr r3, 8002cd0 <main+0x6b0>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f7fd fd28 	bl	8000568 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <main+0x700>)
 8002b26:	f7fd fe49 	bl	80007bc <__aeabi_ddiv>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	ec43 2b17 	vmov	d7, r2, r3
 8002b32:	eeb0 0a47 	vmov.f32	s0, s14
 8002b36:	eef0 0a67 	vmov.f32	s1, s15
 8002b3a:	f007 fd1d 	bl	800a578 <cos>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fd0f 	bl	8000568 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	4b74      	ldr	r3, [pc, #464]	; (8002d24 <main+0x704>)
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fcaf 	bl	80004b8 <__aeabi_f2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fb4b 	bl	80001fc <__adddf3>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <main+0x708>)
 8002b74:	f7fd fb40 	bl	80001f8 <__aeabi_dsub>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fd ffea 	bl	8000b58 <__aeabi_d2f>
 8002b84:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 8002b86:	4a69      	ldr	r2, [pc, #420]	; (8002d2c <main+0x70c>)
 8002b88:	6013      	str	r3, [r2, #0]
					curb_height += 0.015; //Small error correction 10%
 8002b8a:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <main+0x70c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fc92 	bl	80004b8 <__aeabi_f2d>
 8002b94:	a350      	add	r3, pc, #320	; (adr r3, 8002cd8 <main+0x6b8>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fb2f 	bl	80001fc <__adddf3>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fd ffd7 	bl	8000b58 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <main+0x70c>)
 8002bae:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 8002bb0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002d30 <main+0x710>
 8002bb4:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <main+0x70c>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbe:	ee17 0a90 	vmov	r0, s15
 8002bc2:	f7fd fc79 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 8002bc6:	a346      	add	r3, pc, #280	; (adr r3, 8002ce0 <main+0x6c0>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fb14 	bl	80001f8 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7fd ffbe 	bl	8000b58 <__aeabi_d2f>
 8002bdc:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 8002bde:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <main+0x714>)
 8002be0:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <main+0x714>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	eef1 7a67 	vneg.f32	s15, s15
 8002bec:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002d38 <main+0x718>
 8002bf0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bf4:	ee16 0a90 	vmov	r0, s13
 8002bf8:	f7fd fc5e 	bl	80004b8 <__aeabi_f2d>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	ec43 2b10 	vmov	d0, r2, r3
 8002c04:	f007 fd68 	bl	800a6d8 <acos>
 8002c08:	ec53 2b10 	vmov	r2, r3, d0
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fd ffa2 	bl	8000b58 <__aeabi_d2f>
 8002c14:	ee07 0a10 	vmov	s14, r0
 8002c18:	eddf 7a48 	vldr	s15, [pc, #288]	; 8002d3c <main+0x71c>
 8002c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c20:	ee17 0a90 	vmov	r0, s15
 8002c24:	f7fd fc48 	bl	80004b8 <__aeabi_f2d>
 8002c28:	a329      	add	r3, pc, #164	; (adr r3, 8002cd0 <main+0x6b0>)
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f7fd fdc5 	bl	80007bc <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <main+0x720>)
 8002c40:	f7fd fada 	bl	80001f8 <__aeabi_dsub>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ff84 	bl	8000b58 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
					back_lifting_angle =
 8002c52:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <main+0x724>)
 8002c54:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <main+0x724>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc2c 	bl	80004b8 <__aeabi_f2d>
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <main+0x728>)
 8002c66:	f7fd fda9 	bl	80007bc <__aeabi_ddiv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	4b35      	ldr	r3, [pc, #212]	; (8002d4c <main+0x72c>)
 8002c78:	f7fd fc76 	bl	8000568 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff20 	bl	8000ac8 <__aeabi_d2iz>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <main+0x730>)
 8002c8c:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <main+0x724>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	eef4 7a67 	vcmp.f32	s15, s15
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d613      	bvs.n	8002cc6 <main+0x6a6>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <main+0x730>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d20c      	bcs.n	8002cc6 <main+0x6a6>
								|| curb_height <= 0.05 )
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <main+0x70c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc01 	bl	80004b8 <__aeabi_f2d>
 8002cb6:	a30c      	add	r3, pc, #48	; (adr r3, 8002ce8 <main+0x6c8>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fed0 	bl	8000a60 <__aeabi_dcmple>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d046      	beq.n	8002d54 <main+0x734>
					{
						lifting_mode = RETRACTION;
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <main+0x6d8>)
 8002cc8:	2203      	movs	r2, #3
 8002cca:	701a      	strb	r2, [r3, #0]
						continue;
 8002ccc:	e218      	b.n	8003100 <main+0xae0>
 8002cce:	bf00      	nop
 8002cd0:	54442d18 	.word	0x54442d18
 8002cd4:	400921fb 	.word	0x400921fb
 8002cd8:	eb851eb8 	.word	0xeb851eb8
 8002cdc:	3f8eb851 	.word	0x3f8eb851
 8002ce0:	916872b0 	.word	0x916872b0
 8002ce4:	3faf7ced 	.word	0x3faf7ced
 8002ce8:	9999999a 	.word	0x9999999a
 8002cec:	3fa99999 	.word	0x3fa99999
 8002cf0:	200001a5 	.word	0x200001a5
 8002cf4:	200001a4 	.word	0x200001a4
 8002cf8:	200000d8 	.word	0x200000d8
 8002cfc:	20000314 	.word	0x20000314
 8002d00:	200002bc 	.word	0x200002bc
 8002d04:	20000034 	.word	0x20000034
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	200000d9 	.word	0x200000d9
 8002d18:	200001a8 	.word	0x200001a8
 8002d1c:	3eb2b021 	.word	0x3eb2b021
 8002d20:	40668000 	.word	0x40668000
 8002d24:	3e19999a 	.word	0x3e19999a
 8002d28:	3fb00000 	.word	0x3fb00000
 8002d2c:	200001c8 	.word	0x200001c8
 8002d30:	3e19999a 	.word	0x3e19999a
 8002d34:	200001d0 	.word	0x200001d0
 8002d38:	3eb2b021 	.word	0x3eb2b021
 8002d3c:	43340000 	.word	0x43340000
 8002d40:	403e0000 	.word	0x403e0000
 8002d44:	200001d4 	.word	0x200001d4
 8002d48:	40768000 	.word	0x40768000
 8002d4c:	40c00000 	.word	0x40c00000
 8002d50:	200001d8 	.word	0x200001d8
					}
					speed[BACK_INDEX] = 0;
 8002d54:	4baa      	ldr	r3, [pc, #680]	; (8003000 <main+0x9e0>)
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002d5c:	4ba8      	ldr	r3, [pc, #672]	; (8003000 <main+0x9e0>)
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
					climb_first_iteration = false;
 8002d64:	4ba7      	ldr	r3, [pc, #668]	; (8003004 <main+0x9e4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
				}
				//Mathematical Model
				//Start Climbing process
				if (finish_climbing_flag == false){
 8002d6a:	4ba7      	ldr	r3, [pc, #668]	; (8003008 <main+0x9e8>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d011      	beq.n	8002d9c <main+0x77c>
					if(!in_climb_process(MAX_FRONT_CLIMBING_ENC,back_encoder_input))
 8002d78:	f240 739e 	movw	r3, #1950	; 0x79e
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4ba3      	ldr	r3, [pc, #652]	; (800300c <main+0x9ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4619      	mov	r1, r3
 8002d84:	4610      	mov	r0, r2
 8002d86:	f000 fe37 	bl	80039f8 <in_climb_process>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <main+0x77c>
						finish_climbing_flag = true;
 8002d96:	4b9c      	ldr	r3, [pc, #624]	; (8003008 <main+0x9e8>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
				}

				if (finish_climbing_flag == true){
 8002d9c:	4b9a      	ldr	r3, [pc, #616]	; (8003008 <main+0x9e8>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 809b 	beq.w	8002edc <main+0x8bc>
					emBrakeMotor(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe ff14 	bl	8001bd4 <emBrakeMotor>
					if(!(climbingForward(forward_distance+0.03)))
 8002dac:	4b98      	ldr	r3, [pc, #608]	; (8003010 <main+0x9f0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fb81 	bl	80004b8 <__aeabi_f2d>
 8002db6:	a38e      	add	r3, pc, #568	; (adr r3, 8002ff0 <main+0x9d0>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fa1e 	bl	80001fc <__adddf3>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fd fec6 	bl	8000b58 <__aeabi_d2f>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	ee00 3a10 	vmov	s0, r3
 8002dd2:	f000 fc0d 	bl	80035f0 <climbingForward>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d07c      	beq.n	8002edc <main+0x8bc>
					{
						emBrakeMotor(1);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fe fef6 	bl	8001bd4 <emBrakeMotor>
						finish_climbing_flag = false;
 8002de8:	4b87      	ldr	r3, [pc, #540]	; (8003008 <main+0x9e8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <main+0x9f4>)
 8002df0:	2203      	movs	r2, #3
 8002df2:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8002df4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002df8:	f001 fdc0 	bl	800497c <HAL_Delay>
 8002dfc:	e06e      	b.n	8002edc <main+0x8bc>
					}
				}
			}

			else if (lifting_mode == CLIMB_DOWN)
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <main+0x9f4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d16a      	bne.n	8002edc <main+0x8bc>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002e06:	2201      	movs	r2, #1
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4883      	ldr	r0, [pc, #524]	; (8003018 <main+0x9f8>)
 8002e0c:	f003 fb30 	bl	8006470 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002e10:	4b7c      	ldr	r3, [pc, #496]	; (8003004 <main+0x9e4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d028      	beq.n	8002e6a <main+0x84a>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 8002e18:	4b80      	ldr	r3, [pc, #512]	; (800301c <main+0x9fc>)
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 5.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb29 	bl	8000474 <__aeabi_ui2d>
 8002e22:	a375      	add	r3, pc, #468	; (adr r3, 8002ff8 <main+0x9d8>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd f9e8 	bl	80001fc <__adddf3>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f7fd fe48 	bl	8000ac8 <__aeabi_d2iz>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4a79      	ldr	r2, [pc, #484]	; (8003020 <main+0xa00>)
 8002e3c:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC )
 8002e3e:	4b78      	ldr	r3, [pc, #480]	; (8003020 <main+0xa00>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f640 431c 	movw	r3, #3100	; 0xc1c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d903      	bls.n	8002e54 <main+0x834>
					{
						lifting_mode = RETRACTION;
 8002e4c:	4b71      	ldr	r3, [pc, #452]	; (8003014 <main+0x9f4>)
 8002e4e:	2203      	movs	r2, #3
 8002e50:	701a      	strb	r2, [r3, #0]
						continue;
 8002e52:	e155      	b.n	8003100 <main+0xae0>
					}
					climb_first_iteration = false;
 8002e54:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <main+0x9e4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]

					speed[BACK_INDEX] = 0;
 8002e5a:	4b69      	ldr	r3, [pc, #420]	; (8003000 <main+0x9e0>)
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002e62:	4b67      	ldr	r3, [pc, #412]	; (8003000 <main+0x9e0>)
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
				}

				//Start Climbing process
				if (finish_climbing_flag == false){
 8002e6a:	4b67      	ldr	r3, [pc, #412]	; (8003008 <main+0x9e8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <main+0x87a>
					if(!in_climb_process(front_climbDown_enc,MAX_BACK_CLIMBING_ENC))
 8002e78:	4b69      	ldr	r3, [pc, #420]	; (8003020 <main+0xa00>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f240 723a 	movw	r2, #1850	; 0x73a
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fdb8 	bl	80039f8 <in_climb_process>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <main+0x87a>
						finish_climbing_flag = true;
 8002e94:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <main+0x9e8>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
				}

				if (finish_climbing_flag == true){
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <main+0x9e8>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01c      	beq.n	8002edc <main+0x8bc>
					emBrakeMotor(0);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe fe96 	bl	8001bd4 <emBrakeMotor>
					if(!(climbingForward(forward_distance)))
 8002ea8:	4b59      	ldr	r3, [pc, #356]	; (8003010 <main+0x9f0>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb2:	f000 fb9d 	bl	80035f0 <climbingForward>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <main+0x8bc>
					{
						emBrakeMotor(1);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7fe fe86 	bl	8001bd4 <emBrakeMotor>
						finish_climbing_flag = false;
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	; (8003008 <main+0x9e8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002ece:	4b51      	ldr	r3, [pc, #324]	; (8003014 <main+0x9f4>)
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8002ed4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ed8:	f001 fd50 	bl	800497c <HAL_Delay>
					}
				}
			}
			if (lifting_mode == RETRACTION)
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <main+0x9f4>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d148      	bne.n	8002f76 <main+0x956>
			{

				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	2108      	movs	r1, #8
 8002ee8:	484b      	ldr	r0, [pc, #300]	; (8003018 <main+0x9f8>)
 8002eea:	f003 fac1 	bl	8006470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2110      	movs	r1, #16
 8002ef2:	4849      	ldr	r0, [pc, #292]	; (8003018 <main+0x9f8>)
 8002ef4:	f003 fabc 	bl	8006470 <HAL_GPIO_WritePin>
				//retraction process
				if (abs(encoderBack.encoder_pos- (MIN_BACK_ALLOWABLE_ENC)) > 30
 8002ef8:	4b4a      	ldr	r3, [pc, #296]	; (8003024 <main+0xa04>)
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bfb8      	it	lt
 8002f06:	425b      	neglt	r3, r3
 8002f08:	2b1e      	cmp	r3, #30
 8002f0a:	dc09      	bgt.n	8002f20 <main+0x900>
						|| abs(encoderFront.encoder_pos - (MIN_FRONT_ALLOWABLE_ENC))
 8002f0c:	4b43      	ldr	r3, [pc, #268]	; (800301c <main+0x9fc>)
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bfb8      	it	lt
 8002f1a:	425b      	neglt	r3, r3
 8002f1c:	2b1e      	cmp	r3, #30
 8002f1e:	dd25      	ble.n	8002f6c <main+0x94c>
								> 30)
				{
					goto_pos(MIN_BACK_ALLOWABLE_ENC, backClimb_pid);
 8002f20:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b40      	ldr	r3, [pc, #256]	; (8003028 <main+0xa08>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 fc4b 	bl	80037c8 <goto_pos>
					goto_pos(MIN_FRONT_ALLOWABLE_ENC, frontClimb_pid);
 8002f32:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b3c      	ldr	r3, [pc, #240]	; (800302c <main+0xa0c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fc42 	bl	80037c8 <goto_pos>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002f44:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <main+0x9e0>)
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f52:	d10f      	bne.n	8002f74 <main+0x954>
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <main+0x9e0>)
 8002f56:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	d107      	bne.n	8002f74 <main+0x954>
						lifting_mode = NORMAL;
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <main+0x9f4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002f6a:	e003      	b.n	8002f74 <main+0x954>
				}
				else
				{

					lifting_mode = NORMAL;
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <main+0x9f4>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e000      	b.n	8002f76 <main+0x956>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002f74:	bf00      	nop

			}

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <main+0x9e0>)
 8002f78:	edd3 7a00 	vldr	s15, [r3]
 8002f7c:	eef0 7ae7 	vabs.f32	s15, s15
 8002f80:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d503      	bpl.n	8002f96 <main+0x976>
				speed[FRONT_INDEX] = 0;
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <main+0x9e0>)
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <main+0x9e0>)
 8002f98:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f9c:	eef0 7ae7 	vabs.f32	s15, s15
 8002fa0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fac:	d503      	bpl.n	8002fb6 <main+0x996>
				speed[BACK_INDEX] = 0;
 8002fae:	4b14      	ldr	r3, [pc, #80]	; (8003000 <main+0x9e0>)
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <main+0x9fc>)
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fba:	f242 3333 	movw	r3, #9011	; 0x2333
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d235      	bcs.n	8003030 <main+0xa10>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <main+0x9fc>)
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d941      	bls.n	8003054 <main+0xa34>
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <main+0x9e0>)
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	dd39      	ble.n	8003054 <main+0xa34>
					speed[FRONT_INDEX] = 0;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <main+0x9e0>)
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e034      	b.n	8003054 <main+0xa34>
 8002fea:	bf00      	nop
 8002fec:	f3af 8000 	nop.w
 8002ff0:	eb851eb8 	.word	0xeb851eb8
 8002ff4:	3f9eb851 	.word	0x3f9eb851
 8002ff8:	9f49f4a0 	.word	0x9f49f4a0
 8002ffc:	405f49f4 	.word	0x405f49f4
 8003000:	200001a8 	.word	0x200001a8
 8003004:	200000d9 	.word	0x200000d9
 8003008:	200001dc 	.word	0x200001dc
 800300c:	200001d8 	.word	0x200001d8
 8003010:	200000f4 	.word	0x200000f4
 8003014:	200000d8 	.word	0x200000d8
 8003018:	40020400 	.word	0x40020400
 800301c:	200002bc 	.word	0x200002bc
 8003020:	200001cc 	.word	0x200001cc
 8003024:	20000314 	.word	0x20000314
 8003028:	20000520 	.word	0x20000520
 800302c:	20000484 	.word	0x20000484
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 8003030:	4b34      	ldr	r3, [pc, #208]	; (8003104 <main+0xae4>)
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8003038:	4293      	cmp	r3, r2
 800303a:	d20b      	bcs.n	8003054 <main+0xa34>
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <main+0xae8>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d503      	bpl.n	8003054 <main+0xa34>
					speed[FRONT_INDEX] = 0;
 800304c:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <main+0xae8>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8003054:	4b2d      	ldr	r3, [pc, #180]	; (800310c <main+0xaec>)
 8003056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	429a      	cmp	r2, r3
 8003060:	d212      	bcs.n	8003088 <main+0xa68>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8003062:	4b2a      	ldr	r3, [pc, #168]	; (800310c <main+0xaec>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800306a:	4293      	cmp	r3, r2
 800306c:	d91e      	bls.n	80030ac <main+0xa8c>
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <main+0xae8>)
 8003070:	edd3 7a01 	vldr	s15, [r3, #4]
 8003074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	dd16      	ble.n	80030ac <main+0xa8c>
					speed[BACK_INDEX] = 0;
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <main+0xae8>)
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	e011      	b.n	80030ac <main+0xa8c>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <main+0xaec>)
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8003090:	4293      	cmp	r3, r2
 8003092:	d20b      	bcs.n	80030ac <main+0xa8c>
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <main+0xae8>)
 8003096:	edd3 7a01 	vldr	s15, [r3, #4]
 800309a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800309e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a2:	d503      	bpl.n	80030ac <main+0xa8c>
					speed[BACK_INDEX] = 0;
 80030a4:	4b18      	ldr	r3, [pc, #96]	; (8003108 <main+0xae8>)
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 80030ac:	4b16      	ldr	r3, [pc, #88]	; (8003108 <main+0xae8>)
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	4816      	ldr	r0, [pc, #88]	; (8003110 <main+0xaf0>)
 80030b8:	f7fe fe72 	bl	8001da0 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <main+0xae8>)
 80030be:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c2:	eeb0 0a67 	vmov.f32	s0, s15
 80030c6:	4813      	ldr	r0, [pc, #76]	; (8003114 <main+0xaf4>)
 80030c8:	f7fe fe6a 	bl	8001da0 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <main+0xae8>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	d10b      	bne.n	80030f4 <main+0xad4>
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <main+0xae8>)
 80030de:	edd3 7a01 	vldr	s15, [r3, #4]
 80030e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	d103      	bne.n	80030f4 <main+0xad4>
				emBrakeMotor(0);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fe fd71 	bl	8001bd4 <emBrakeMotor>
 80030f2:	e002      	b.n	80030fa <main+0xada>
			else
				emBrakeMotor(1);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fe fd6d 	bl	8001bd4 <emBrakeMotor>

			prev_time = HAL_GetTick();
 80030fa:	f001 fc33 	bl	8004964 <HAL_GetTick>
 80030fe:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8003100:	f7ff bb58 	b.w	80027b4 <main+0x194>
 8003104:	200002bc 	.word	0x200002bc
 8003108:	200001a8 	.word	0x200001a8
 800310c:	20000314 	.word	0x20000314
 8003110:	20000000 	.word	0x20000000
 8003114:	20000034 	.word	0x20000034

08003118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b094      	sub	sp, #80	; 0x50
 800311c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800311e:	f107 0320 	add.w	r3, r7, #32
 8003122:	2230      	movs	r2, #48	; 0x30
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f007 fa1c 	bl	800a564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <SystemClock_Config+0xd8>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <SystemClock_Config+0xd8>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6413      	str	r3, [r2, #64]	; 0x40
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <SystemClock_Config+0xd8>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003158:	2300      	movs	r3, #0
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <SystemClock_Config+0xdc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <SystemClock_Config+0xdc>)
 8003162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <SystemClock_Config+0xdc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003174:	2301      	movs	r3, #1
 8003176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317e:	2302      	movs	r3, #2
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003188:	2308      	movs	r3, #8
 800318a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800318c:	23b4      	movs	r3, #180	; 0xb4
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003190:	2302      	movs	r3, #2
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003194:	2304      	movs	r3, #4
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fba9 	bl	80068f4 <HAL_RCC_OscConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031a8:	f000 fd48 	bl	8003c3c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031ac:	f003 fb52 	bl	8006854 <HAL_PWREx_EnableOverDrive>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80031b6:	f000 fd41 	bl	8003c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ba:	230f      	movs	r3, #15
 80031bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031be:	2302      	movs	r3, #2
 80031c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031d2:	f107 030c 	add.w	r3, r7, #12
 80031d6:	2105      	movs	r1, #5
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fe03 	bl	8006de4 <HAL_RCC_ClockConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80031e4:	f000 fd2a 	bl	8003c3c <Error_Handler>
  }
}
 80031e8:	bf00      	nop
 80031ea:	3750      	adds	r7, #80	; 0x50
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000

080031f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d11c      	bne.n	8003242 <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8003208:	f001 fbac 	bl	8004964 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_GPIO_EXTI_Callback+0x58>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d916      	bls.n	8003246 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8003218:	480e      	ldr	r0, [pc, #56]	; (8003254 <HAL_GPIO_EXTI_Callback+0x5c>)
 800321a:	f7fe fc9d 	bl	8001b58 <ADC_Read>
			raw_hJoystick.x = adc_rawData[2];
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_GPIO_EXTI_Callback+0x60>)
 8003228:	601a      	str	r2, [r3, #0]
			raw_hJoystick.y = adc_rawData[1];
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_GPIO_EXTI_Callback+0x5c>)
 800322c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003230:	461a      	mov	r2, r3
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_GPIO_EXTI_Callback+0x60>)
 8003234:	605a      	str	r2, [r3, #4]

			prev_adc_time = HAL_GetTick();
 8003236:	f001 fb95 	bl	8004964 <HAL_GetTick>
 800323a:	4603      	mov	r3, r0
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <HAL_GPIO_EXTI_Callback+0x58>)
 800323e:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8003240:	e001      	b.n	8003246 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8003242:	bf00      	nop
 8003244:	e000      	b.n	8003248 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8003246:	bf00      	nop
	}
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000198 	.word	0x20000198
 8003254:	20000474 	.word	0x20000474
 8003258:	2000019c 	.word	0x2000019c

0800325c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a43      	ldr	r2, [pc, #268]	; (8003378 <HAL_UART_RxCpltCallback+0x11c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d175      	bne.n	800335a <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b41      	ldr	r3, [pc, #260]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	b29b      	uxth	r3, r3
 800327a:	4413      	add	r3, r2
 800327c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003280:	789b      	ldrb	r3, [r3, #2]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4413      	add	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	4b3c      	ldr	r3, [pc, #240]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800328a:	78db      	ldrb	r3, [r3, #3]
 800328c:	b29b      	uxth	r3, r3
 800328e:	4413      	add	r3, r2
 8003290:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8003292:	4b3a      	ldr	r3, [pc, #232]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	b29b      	uxth	r3, r3
 8003298:	4413      	add	r3, r2
 800329a:	b29a      	uxth	r2, r3
 800329c:	4b37      	ldr	r3, [pc, #220]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800329e:	795b      	ldrb	r3, [r3, #5]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032a8:	799b      	ldrb	r3, [r3, #6]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b32      	ldr	r3, [pc, #200]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032b2:	79db      	ldrb	r3, [r3, #7]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032bc:	7a1b      	ldrb	r3, [r3, #8]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032c6:	7a5b      	ldrb	r3, [r3, #9]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032d0:	7a9b      	ldrb	r3, [r3, #10]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032da:	7adb      	ldrb	r3, [r3, #11]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4413      	add	r3, r2
 80032e0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032e4:	7b1b      	ldrb	r3, [r3, #12]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032ee:	7b5b      	ldrb	r3, [r3, #13]
 80032f0:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 80032f2:	4413      	add	r3, r2
 80032f4:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b20      	ldr	r3, [pc, #128]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 80032fc:	7b9b      	ldrb	r3, [r3, #14]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d12b      	bne.n	800335a <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2baa      	cmp	r3, #170	; 0xaa
 8003308:	d127      	bne.n	800335a <HAL_UART_RxCpltCallback+0xfe>
 800330a:	4b1c      	ldr	r3, [pc, #112]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800330c:	785b      	ldrb	r3, [r3, #1]
 800330e:	2ba4      	cmp	r3, #164	; 0xa4
 8003310:	d123      	bne.n	800335a <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003314:	78db      	ldrb	r3, [r3, #3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11f      	bne.n	800335a <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 800331a:	4b18      	ldr	r3, [pc, #96]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800331c:	7a5b      	ldrb	r3, [r3, #9]
 800331e:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003322:	7a1b      	ldrb	r3, [r3, #8]
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	441a      	add	r2, r3
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800332a:	79db      	ldrb	r3, [r3, #7]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8003330:	4a12      	ldr	r2, [pc, #72]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003332:	7992      	ldrb	r2, [r2, #6]
 8003334:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_UART_RxCpltCallback+0x124>)
 8003338:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800333c:	7b5b      	ldrb	r3, [r3, #13]
 800333e:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003342:	7b1b      	ldrb	r3, [r3, #12]
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	441a      	add	r2, r3
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 800334a:	7adb      	ldrb	r3, [r3, #11]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_UART_RxCpltCallback+0x120>)
 8003352:	7a92      	ldrb	r2, [r2, #10]
 8003354:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_UART_RxCpltCallback+0x124>)
 8003358:	6053      	str	r3, [r2, #4]
			}
		}
	}
	//Sabertooth Callback
	if (huart->Instance == USART6)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_UART_RxCpltCallback+0x128>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d104      	bne.n	800336e <HAL_UART_RxCpltCallback+0x112>
	{
		MotorProcessReply(&sabertooth_handler, motor_receive_buf, sizeof(motor_receive_buf));
 8003364:	2209      	movs	r2, #9
 8003366:	4908      	ldr	r1, [pc, #32]	; (8003388 <HAL_UART_RxCpltCallback+0x12c>)
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <HAL_UART_RxCpltCallback+0x130>)
 800336a:	f7fe f8a3 	bl	80014b4 <MotorProcessReply>
	}

}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40004800 	.word	0x40004800
 800337c:	20000510 	.word	0x20000510
 8003380:	200003d8 	.word	0x200003d8
 8003384:	40011400 	.word	0x40011400
 8003388:	20000504 	.word	0x20000504
 800338c:	200003c0 	.word	0x200003c0

08003390 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a8d      	ldr	r2, [pc, #564]	; (80035d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f040 810b 	bne.w	80035b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	4a8b      	ldr	r2, [pc, #556]	; (80035d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 fe05 	bl	8004fba <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 80033b0:	7a7b      	ldrb	r3, [r7, #9]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d150      	bne.n	8003458 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4987      	ldr	r1, [pc, #540]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fedb 	bl	8002178 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 80033c2:	4885      	ldr	r0, [pc, #532]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80033c4:	f7fe ff51 	bl	800226a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 80033c8:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 80033cc:	425b      	negs	r3, r3
 80033ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 80033d2:	4a81      	ldr	r2, [pc, #516]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80033d6:	4b80      	ldr	r3, [pc, #512]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 80033e2:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80035dc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 80033e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80035e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 80033ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f2:	ee17 0a90 	vmov	r0, s15
 80033f6:	f7fd f85f 	bl	80004b8 <__aeabi_f2d>
 80033fa:	a371      	add	r3, pc, #452	; (adr r3, 80035c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fc fefc 	bl	80001fc <__adddf3>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f7fd fba4 	bl	8000b58 <__aeabi_d2f>
 8003410:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8003412:	4a71      	ldr	r2, [pc, #452]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003418:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800341c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80035e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8003420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	dd09      	ble.n	800343e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 800342a:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800342c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003430:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80035e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8003434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003438:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800343a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 800343e:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003446:	4293      	cmp	r3, r2
 8003448:	d306      	bcc.n	8003458 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 800344e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003452:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8003454:	4b60      	ldr	r3, [pc, #384]	; (80035d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003456:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8003458:	7a7b      	ldrb	r3, [r7, #9]
 800345a:	2b02      	cmp	r3, #2
 800345c:	f040 80ac 	bne.w	80035b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	495f      	ldr	r1, [pc, #380]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fe86 	bl	8002178 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 800346c:	485d      	ldr	r0, [pc, #372]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800346e:	f7fe fefc 	bl	800226a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8003472:	4b5c      	ldr	r3, [pc, #368]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 800347a:	f247 522f 	movw	r2, #29999	; 0x752f
 800347e:	4293      	cmp	r3, r2
 8003480:	d839      	bhi.n	80034f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8003482:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 800348a:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	0b5b      	lsrs	r3, r3, #13
 8003492:	f242 3133 	movw	r1, #9011	; 0x2333
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800349c:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800349e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	ee17 0a90 	vmov	r0, s15
 80034b0:	f7fd f802 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 80034b4:	a344      	add	r3, pc, #272	; (adr r3, 80035c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f7fd f97f 	bl	80007bc <__aeabi_ddiv>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	4b48      	ldr	r3, [pc, #288]	; (80035ec <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80034cc:	f7fd f84c 	bl	8000568 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	a339      	add	r3, pc, #228	; (adr r3, 80035c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fc fe8d 	bl	80001fc <__adddf3>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7fd fb35 	bl	8000b58 <__aeabi_d2f>
 80034ee:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80034f0:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80034f2:	6413      	str	r3, [r2, #64]	; 0x40
 80034f4:	e047      	b.n	8003586 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc ffba 	bl	8000474 <__aeabi_ui2d>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	a130      	add	r1, pc, #192	; (adr r1, 80035c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800350a:	f7fc fe75 	bl	80001f8 <__aeabi_dsub>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f7fd faff 	bl	8000b18 <__aeabi_d2uiz>
 800351a:	4603      	mov	r3, r0
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800351e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003520:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352c:	ee17 0a90 	vmov	r0, s15
 8003530:	f7fc ffc2 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8003534:	a324      	add	r3, pc, #144	; (adr r3, 80035c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f7fd f93f 	bl	80007bc <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800354c:	f7fd f80c 	bl	8000568 <__aeabi_dmul>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	a319      	add	r3, pc, #100	; (adr r3, 80035c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f7fc fe4d 	bl	80001fc <__adddf3>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8003570:	f7fc fe42 	bl	80001f8 <__aeabi_dsub>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f7fd faec 	bl	8000b58 <__aeabi_d2f>
 8003580:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003582:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 8003586:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f640 421c 	movw	r2, #3100	; 0xc1c
 800358e:	4293      	cmp	r3, r2
 8003590:	d312      	bcc.n	80035b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ff6c 	bl	8000474 <__aeabi_ui2d>
 800359c:	a30a      	add	r3, pc, #40	; (adr r3, 80035c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fc fe29 	bl	80001f8 <__aeabi_dsub>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd fa8b 	bl	8000ac8 <__aeabi_d2iz>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80035b6:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	d0e56042 	.word	0xd0e56042
 80035c4:	40424b22 	.word	0x40424b22
 80035c8:	9999999a 	.word	0x9999999a
 80035cc:	40c19999 	.word	0x40c19999
 80035d0:	2000026c 	.word	0x2000026c
 80035d4:	200001e4 	.word	0x200001e4
 80035d8:	20000314 	.word	0x20000314
 80035dc:	46000000 	.word	0x46000000
 80035e0:	43b40000 	.word	0x43b40000
 80035e4:	200002bc 	.word	0x200002bc
 80035e8:	e8bb8111 	.word	0xe8bb8111
 80035ec:	40768000 	.word	0x40768000

080035f0 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 80035f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint32_t prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 80035fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	db02      	blt.n	8003610 <climbingForward+0x20>
 800360a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800360e:	e000      	b.n	8003612 <climbingForward+0x22>
 8003610:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <climbingForward+0x1b0>)
 8003612:	617b      	str	r3, [r7, #20]

	if (first_loop)
 8003614:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <climbingForward+0x1b4>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <climbingForward+0x4a>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 800361c:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <climbingForward+0x1b8>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a62      	ldr	r2, [pc, #392]	; (80037ac <climbingForward+0x1bc>)
 8003622:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 8003624:	f001 f99e 	bl	8004964 <HAL_GetTick>
 8003628:	4603      	mov	r3, r0
 800362a:	4a61      	ldr	r2, [pc, #388]	; (80037b0 <climbingForward+0x1c0>)
 800362c:	6013      	str	r3, [r2, #0]
		first_loop = false;
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <climbingForward+0x1b4>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 8003634:	4a5f      	ldr	r2, [pc, #380]	; (80037b4 <climbingForward+0x1c4>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 800363a:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <climbingForward+0x1c4>)
 800363c:	ed93 7a00 	vldr	s14, [r3]
 8003640:	edd7 6a01 	vldr	s13, [r7, #4]
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	f2c0 808f 	blt.w	8003772 <climbingForward+0x182>
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <climbingForward+0x1b4>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	f083 0301 	eor.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8087 	beq.w	8003772 <climbingForward+0x182>
	{
		send_HubMotor(rps, rps);
 8003664:	edd7 0a05 	vldr	s1, [r7, #20]
 8003668:	ed97 0a05 	vldr	s0, [r7, #20]
 800366c:	f7fe f948 	bl	8001900 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 8003670:	f001 f978 	bl	8004964 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	4b4e      	ldr	r3, [pc, #312]	; (80037b0 <climbingForward+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d976      	bls.n	800376e <climbingForward+0x17e>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 8003680:	f001 f970 	bl	8004964 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <climbingForward+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003694:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037b8 <climbingForward+0x1c8>
 8003698:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800369c:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <climbingForward+0x1b8>)
 80036a2:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 80036a4:	4b41      	ldr	r3, [pc, #260]	; (80037ac <climbingForward+0x1bc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 80036b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80036b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036be:	ee17 0a90 	vmov	r0, s15
 80036c2:	f7fc fef9 	bl	80004b8 <__aeabi_f2d>
 80036c6:	a332      	add	r3, pc, #200	; (adr r3, 8003790 <climbingForward+0x1a0>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc ff4c 	bl	8000568 <__aeabi_dmul>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <climbingForward+0x1cc>)
 80036de:	f7fd f86d 	bl	80007bc <__aeabi_ddiv>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7fd fa35 	bl	8000b58 <__aeabi_d2f>
 80036ee:	4603      	mov	r3, r0
 80036f0:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 80036f2:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <climbingForward+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fede 	bl	80004b8 <__aeabi_f2d>
 80036fc:	4604      	mov	r4, r0
 80036fe:	460d      	mov	r5, r1
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7fc fed9 	bl	80004b8 <__aeabi_f2d>
 8003706:	a324      	add	r3, pc, #144	; (adr r3, 8003798 <climbingForward+0x1a8>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f7fc ff2c 	bl	8000568 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4690      	mov	r8, r2
 8003716:	4699      	mov	r9, r3
 8003718:	6938      	ldr	r0, [r7, #16]
 800371a:	f7fc fecd 	bl	80004b8 <__aeabi_f2d>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4640      	mov	r0, r8
 8003724:	4649      	mov	r1, r9
 8003726:	f7fc ff1f 	bl	8000568 <__aeabi_dmul>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800373a:	f7fd f83f 	bl	80007bc <__aeabi_ddiv>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4620      	mov	r0, r4
 8003744:	4629      	mov	r1, r5
 8003746:	f7fc fd57 	bl	80001f8 <__aeabi_dsub>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	f7fd fa01 	bl	8000b58 <__aeabi_d2f>
 8003756:	4603      	mov	r3, r0
 8003758:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <climbingForward+0x1c4>)
 800375a:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 800375c:	f001 f902 	bl	8004964 <HAL_GetTick>
 8003760:	4603      	mov	r3, r0
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <climbingForward+0x1c0>)
 8003764:	6013      	str	r3, [r2, #0]
//					dist_remaining = 0;
//				}
//			}
//			else
//				stationary_tick = HAL_GetTick();
			prev_enc = hub_encoder_feedback.encoder_2;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <climbingForward+0x1b8>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <climbingForward+0x1bc>)
 800376c:	6013      	str	r3, [r2, #0]

		}
		return true;
 800376e:	2301      	movs	r3, #1
 8003770:	e009      	b.n	8003786 <climbingForward+0x196>
	}
	else
	{
		first_loop = true;
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <climbingForward+0x1b4>)
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 8003778:	eddf 0a11 	vldr	s1, [pc, #68]	; 80037c0 <climbingForward+0x1d0>
 800377c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80037c0 <climbingForward+0x1d0>
 8003780:	f7fe f8be 	bl	8001900 <send_HubMotor>
		return false;
 8003784:	2300      	movs	r3, #0
	}
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003790:	54442d18 	.word	0x54442d18
 8003794:	400921fb 	.word	0x400921fb
 8003798:	916872b0 	.word	0x916872b0
 800379c:	3fbf7ced 	.word	0x3fbf7ced
 80037a0:	bf800000 	.word	0xbf800000
 80037a4:	200000f8 	.word	0x200000f8
 80037a8:	200003d8 	.word	0x200003d8
 80037ac:	20000200 	.word	0x20000200
 80037b0:	20000204 	.word	0x20000204
 80037b4:	20000208 	.word	0x20000208
 80037b8:	447a0000 	.word	0x447a0000
 80037bc:	40b00000 	.word	0x40b00000
	...

080037c8 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 80037c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;
	ENCODER_Read(&encoderBack);
 80037d4:	487c      	ldr	r0, [pc, #496]	; (80039c8 <goto_pos+0x200>)
 80037d6:	f7fe fd20 	bl	800221a <ENCODER_Read>
	ENCODER_Read(&encoderFront);
 80037da:	487c      	ldr	r0, [pc, #496]	; (80039cc <goto_pos+0x204>)
 80037dc:	f7fe fd1d 	bl	800221a <ENCODER_Read>
	if (pid_t == frontClimb_pid)
 80037e0:	4b7b      	ldr	r3, [pc, #492]	; (80039d0 <goto_pos+0x208>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d17b      	bne.n	80038e2 <goto_pos+0x11a>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 80037ea:	4b78      	ldr	r3, [pc, #480]	; (80039cc <goto_pos+0x204>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 80037f0:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <goto_pos+0x208>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fbbd 	bl	8000f74 <pid_need_compute>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d06e      	beq.n	80038de <goto_pos+0x116>
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fe44 	bl	8000494 <__aeabi_i2d>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4690      	mov	r8, r2
 8003812:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	4b6e      	ldr	r3, [pc, #440]	; (80039d4 <goto_pos+0x20c>)
 800381c:	4640      	mov	r0, r8
 800381e:	4649      	mov	r1, r9
 8003820:	f7fd f932 	bl	8000a88 <__aeabi_dcmpgt>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d059      	beq.n	80038de <goto_pos+0x116>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003830:	4293      	cmp	r3, r2
 8003832:	d90f      	bls.n	8003854 <goto_pos+0x8c>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7fc fe2d 	bl	8000494 <__aeabi_i2d>
 800383a:	a361      	add	r3, pc, #388	; (adr r3, 80039c0 <goto_pos+0x1f8>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fc fcda 	bl	80001f8 <__aeabi_dsub>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f7fd f93c 	bl	8000ac8 <__aeabi_d2iz>
 8003850:	4603      	mov	r3, r0
 8003852:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f640 421c 	movw	r2, #3100	; 0xc1c
 800385a:	4293      	cmp	r3, r2
 800385c:	d30f      	bcc.n	800387e <goto_pos+0xb6>
				enc -= 4096 * FRONT_GEAR_RATIO;
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fc fe18 	bl	8000494 <__aeabi_i2d>
 8003864:	a356      	add	r3, pc, #344	; (adr r3, 80039c0 <goto_pos+0x1f8>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fcc5 	bl	80001f8 <__aeabi_dsub>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	f7fd f927 	bl	8000ac8 <__aeabi_d2iz>
 800387a:	4603      	mov	r3, r0
 800387c:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <goto_pos+0x210>)
 800388a:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003898:	4b50      	ldr	r3, [pc, #320]	; (80039dc <goto_pos+0x214>)
 800389a:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 800389e:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <goto_pos+0x208>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fb7b 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 80038a8:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <goto_pos+0x218>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a4d      	ldr	r2, [pc, #308]	; (80039e4 <goto_pos+0x21c>)
 80038ae:	6013      	str	r3, [r2, #0]
			if(fabs(speed[FRONT_INDEX]) < 5)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <goto_pos+0x21c>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	eef0 7ae7 	vabs.f32	s15, s15
 80038ba:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80038be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	d508      	bpl.n	80038da <goto_pos+0x112>
			{
				speed[FRONT_INDEX] = 0;
 80038c8:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <goto_pos+0x21c>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 80038d0:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <goto_pos+0x208>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fd75 	bl	80013c4 <pid_reset>
			}

			return true;
 80038da:	2301      	movs	r3, #1
 80038dc:	e06b      	b.n	80039b6 <goto_pos+0x1ee>
		}
		else
		{
//			speed[FRONT_INDEX] = 0;

			return false;
 80038de:	2300      	movs	r3, #0
 80038e0:	e069      	b.n	80039b6 <goto_pos+0x1ee>
		}
	}
	else if (pid_t == backClimb_pid)
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <goto_pos+0x220>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d163      	bne.n	80039b4 <goto_pos+0x1ec>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <goto_pos+0x200>)
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <goto_pos+0x220>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fb3c 	bl	8000f74 <pid_need_compute>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d056      	beq.n	80039b0 <goto_pos+0x1e8>
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	4618      	mov	r0, r3
 800390a:	f7fc fdc3 	bl	8000494 <__aeabi_i2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4614      	mov	r4, r2
 8003914:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <goto_pos+0x20c>)
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f7fd f8b1 	bl	8000a88 <__aeabi_dcmpgt>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d041      	beq.n	80039b0 <goto_pos+0x1e8>
		{
			// Read process feedback
			//following code is causing back turn
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003932:	4293      	cmp	r3, r2
 8003934:	d903      	bls.n	800393e <goto_pos+0x176>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800393c:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003944:	4293      	cmp	r3, r2
 8003946:	d303      	bcc.n	8003950 <goto_pos+0x188>
				enc -= 4096 * BACK_GEAR_RATIO;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800394e:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <goto_pos+0x224>)
 800395c:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <goto_pos+0x228>)
 800396c:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <goto_pos+0x220>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fb12 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <goto_pos+0x22c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <goto_pos+0x21c>)
 8003980:	6053      	str	r3, [r2, #4]
			if(fabs(speed[BACK_INDEX]) < 5)
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <goto_pos+0x21c>)
 8003984:	edd3 7a01 	vldr	s15, [r3, #4]
 8003988:	eef0 7ae7 	vabs.f32	s15, s15
 800398c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	d508      	bpl.n	80039ac <goto_pos+0x1e4>
			{
				speed[BACK_INDEX] = 0;
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <goto_pos+0x21c>)
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	605a      	str	r2, [r3, #4]
				pid_reset(backClimb_pid);
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <goto_pos+0x220>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fd0c 	bl	80013c4 <pid_reset>
			}
			return true;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e002      	b.n	80039b6 <goto_pos+0x1ee>
		else
		{
//			speed[BACK_INDEX] = 0;
//			if(fabs(speed[BACK_INDEX]) < 5)
//				pid_reset(backClimb_pid);
			return false;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <goto_pos+0x1ee>
		}
	}
	return false;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039c0:	9999999a 	.word	0x9999999a
 80039c4:	40c19999 	.word	0x40c19999
 80039c8:	20000314 	.word	0x20000314
 80039cc:	200002bc 	.word	0x200002bc
 80039d0:	20000484 	.word	0x20000484
 80039d4:	40140000 	.word	0x40140000
 80039d8:	200001b8 	.word	0x200001b8
 80039dc:	200001b0 	.word	0x200001b0
 80039e0:	200001b4 	.word	0x200001b4
 80039e4:	200001a8 	.word	0x200001a8
 80039e8:	20000520 	.word	0x20000520
 80039ec:	200001c4 	.word	0x200001c4
 80039f0:	200001bc 	.word	0x200001bc
 80039f4:	200001c0 	.word	0x200001c0

080039f8 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc)
{
 80039f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]

	if (first_loop)
 8003a0a:	4b81      	ldr	r3, [pc, #516]	; (8003c10 <in_climb_process+0x218>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 8003a12:	4b80      	ldr	r3, [pc, #512]	; (8003c14 <in_climb_process+0x21c>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a80      	ldr	r2, [pc, #512]	; (8003c18 <in_climb_process+0x220>)
 8003a18:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003a1a:	f000 ffa3 	bl	8004964 <HAL_GetTick>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4a7e      	ldr	r2, [pc, #504]	; (8003c1c <in_climb_process+0x224>)
 8003a22:	6013      	str	r3, [r2, #0]
		first_loop = false;
 8003a24:	4b7a      	ldr	r3, [pc, #488]	; (8003c10 <in_climb_process+0x218>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 8003a2a:	4b7d      	ldr	r3, [pc, #500]	; (8003c20 <in_climb_process+0x228>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fec9 	bl	80037c8 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 8003a36:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <in_climb_process+0x22c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6838      	ldr	r0, [r7, #0]
 8003a3e:	f7ff fec3 	bl	80037c8 <goto_pos>

	if (fabs(speed[FRONT_INDEX]) >= 5 || fabs(speed[BACK_INDEX]) >= 5)
 8003a42:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <in_climb_process+0x230>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	eef0 7ae7 	vabs.f32	s15, s15
 8003a4c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	da0b      	bge.n	8003a72 <in_climb_process+0x7a>
 8003a5a:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <in_climb_process+0x230>)
 8003a5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a60:	eef0 7ae7 	vabs.f32	s15, s15
 8003a64:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a70:	db02      	blt.n	8003a78 <in_climb_process+0x80>
		is_lifting = true;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
 8003a76:	e001      	b.n	8003a7c <in_climb_process+0x84>
	else
		is_lifting = false;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 809d 	beq.w	8003bbe <in_climb_process+0x1c6>
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <in_climb_process+0x230>)
 8003a86:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a92:	f000 8094 	beq.w	8003bbe <in_climb_process+0x1c6>
	{
		double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 8003a96:	f000 ff65 	bl	8004964 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <in_climb_process+0x224>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003c2c <in_climb_process+0x234>
 8003aae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ab2:	ee16 0a90 	vmov	r0, s13
 8003ab6:	f7fc fcff 	bl	80004b8 <__aeabi_f2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg)))
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <in_climb_process+0x238>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc fcf7 	bl	80004b8 <__aeabi_f2d>
 8003aca:	4604      	mov	r4, r0
 8003acc:	460d      	mov	r5, r1
 8003ace:	4b52      	ldr	r3, [pc, #328]	; (8003c18 <in_climb_process+0x220>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fc fcf0 	bl	80004b8 <__aeabi_f2d>
 8003ad8:	a349      	add	r3, pc, #292	; (adr r3, 8003c00 <in_climb_process+0x208>)
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	f7fc fd43 	bl	8000568 <__aeabi_dmul>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <in_climb_process+0x23c>)
 8003af0:	f7fc fe64 	bl	80007bc <__aeabi_ddiv>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	ec43 2b17 	vmov	d7, r2, r3
 8003afc:	eeb0 0a47 	vmov.f32	s0, s14
 8003b00:	eef0 0a67 	vmov.f32	s1, s15
 8003b04:	f006 fd94 	bl	800a630 <sin>
 8003b08:	ec59 8b10 	vmov	r8, r9, d0
 8003b0c:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <in_climb_process+0x21c>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fc fcd1 	bl	80004b8 <__aeabi_f2d>
 8003b16:	a33a      	add	r3, pc, #232	; (adr r3, 8003c00 <in_climb_process+0x208>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fd24 	bl	8000568 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <in_climb_process+0x23c>)
 8003b2e:	f7fc fe45 	bl	80007bc <__aeabi_ddiv>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	ec43 2b17 	vmov	d7, r2, r3
 8003b3a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b3e:	eef0 0a67 	vmov.f32	s1, s15
 8003b42:	f006 fd75 	bl	800a630 <sin>
 8003b46:	ec53 2b10 	vmov	r2, r3, d0
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	f7fc fb53 	bl	80001f8 <__aeabi_dsub>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4620      	mov	r0, r4
 8003b58:	4629      	mov	r1, r5
 8003b5a:	f7fc fd05 	bl	8000568 <__aeabi_dmul>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
				/ dt; //unit: m/s,
 8003b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b6a:	f7fc fe27 	bl	80007bc <__aeabi_ddiv>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7fc ffef 	bl	8000b58 <__aeabi_d2f>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 8003b7e:	6938      	ldr	r0, [r7, #16]
 8003b80:	f7fc fc9a 	bl	80004b8 <__aeabi_f2d>
 8003b84:	a320      	add	r3, pc, #128	; (adr r3, 8003c08 <in_climb_process+0x210>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f7fc fe17 	bl	80007bc <__aeabi_ddiv>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fc ffdf 	bl	8000b58 <__aeabi_d2f>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 8003b9e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003ba2:	ed97 0a04 	vldr	s0, [r7, #16]
 8003ba6:	f7fd feab 	bl	8001900 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <in_climb_process+0x21c>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <in_climb_process+0x220>)
 8003bb0:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003bb2:	f000 fed7 	bl	8004964 <HAL_GetTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <in_climb_process+0x224>)
 8003bba:	6013      	str	r3, [r2, #0]
	{
 8003bbc:	e010      	b.n	8003be0 <in_climb_process+0x1e8>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <in_climb_process+0x1e8>
 8003bc4:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <in_climb_process+0x230>)
 8003bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	d105      	bne.n	8003be0 <in_climb_process+0x1e8>
		send_HubMotor(0, 0);
 8003bd4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003c38 <in_climb_process+0x240>
 8003bd8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003c38 <in_climb_process+0x240>
 8003bdc:	f7fd fe90 	bl	8001900 <send_HubMotor>

	if (!is_lifting)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <in_climb_process+0x1fa>
		first_loop = true;
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <in_climb_process+0x218>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]

}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bfe:	bf00      	nop
 8003c00:	54442d18 	.word	0x54442d18
 8003c04:	400921fb 	.word	0x400921fb
 8003c08:	916872b0 	.word	0x916872b0
 8003c0c:	3faf7ced 	.word	0x3faf7ced
 8003c10:	200000f9 	.word	0x200000f9
 8003c14:	20000314 	.word	0x20000314
 8003c18:	2000020c 	.word	0x2000020c
 8003c1c:	20000210 	.word	0x20000210
 8003c20:	20000484 	.word	0x20000484
 8003c24:	20000520 	.word	0x20000520
 8003c28:	200001a8 	.word	0x200001a8
 8003c2c:	447a0000 	.word	0x447a0000
 8003c30:	3eb2b021 	.word	0x3eb2b021
 8003c34:	40668000 	.word	0x40668000
 8003c38:	00000000 	.word	0x00000000

08003c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	MotorShutdown(&sabertooth_handler);
 8003c40:	4806      	ldr	r0, [pc, #24]	; (8003c5c <Error_Handler+0x20>)
 8003c42:	f7fd fc27 	bl	8001494 <MotorShutdown>
	brakeMotor(&rearMotor, 1);
 8003c46:	2101      	movs	r1, #1
 8003c48:	4805      	ldr	r0, [pc, #20]	; (8003c60 <Error_Handler+0x24>)
 8003c4a:	f7fd ffd5 	bl	8001bf8 <brakeMotor>
	brakeMotor(&backMotor, 1);
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4804      	ldr	r0, [pc, #16]	; (8003c64 <Error_Handler+0x28>)
 8003c52:	f7fd ffd1 	bl	8001bf8 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200003c0 	.word	0x200003c0
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000034 	.word	0x20000034

08003c68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c6e:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <MX_SPI1_Init+0x6c>)
 8003c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c72:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c80:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003ca0:	2228      	movs	r2, #40	; 0x28
 8003ca2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003cb8:	220a      	movs	r2, #10
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cbc:	4804      	ldr	r0, [pc, #16]	; (8003cd0 <MX_SPI1_Init+0x68>)
 8003cbe:	f003 fa8b 	bl	80071d8 <HAL_SPI_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003cc8:	f7ff ffb8 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000214 	.word	0x20000214
 8003cd4:	40013000 	.word	0x40013000

08003cd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_SPI_MspInit+0x84>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d12b      	bne.n	8003d52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_SPI_MspInit+0x88>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <HAL_SPI_MspInit+0x88>)
 8003d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d08:	6453      	str	r3, [r2, #68]	; 0x44
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_SPI_MspInit+0x88>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_SPI_MspInit+0x88>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <HAL_SPI_MspInit+0x88>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6313      	str	r3, [r2, #48]	; 0x30
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_SPI_MspInit+0x88>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003d32:	2360      	movs	r3, #96	; 0x60
 8003d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d42:	2305      	movs	r3, #5
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4805      	ldr	r0, [pc, #20]	; (8003d64 <HAL_SPI_MspInit+0x8c>)
 8003d4e:	f002 f9cb 	bl	80060e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d52:	bf00      	nop
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40013000 	.word	0x40013000
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020000 	.word	0x40020000

08003d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_MspInit+0x4c>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <HAL_MspInit+0x4c>)
 8003d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_MspInit+0x4c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_MspInit+0x4c>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <HAL_MspInit+0x4c>)
 8003d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d98:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_MspInit+0x4c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dca:	e7fe      	b.n	8003dca <HardFault_Handler+0x4>

08003dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <MemManage_Handler+0x4>

08003dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dd6:	e7fe      	b.n	8003dd6 <BusFault_Handler+0x4>

08003dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <UsageFault_Handler+0x4>

08003dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e0c:	f000 fd96 	bl	800493c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e18:	4802      	ldr	r0, [pc, #8]	; (8003e24 <DMA1_Stream1_IRQHandler+0x10>)
 8003e1a:	f001 fefb 	bl	8005c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200006a4 	.word	0x200006a4

08003e28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <DMA1_Stream3_IRQHandler+0x10>)
 8003e2e:	f001 fef1 	bl	8005c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000748 	.word	0x20000748

08003e3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <CAN1_RX0_IRQHandler+0x10>)
 8003e42:	f001 f9f2 	bl	800522a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000026c 	.word	0x2000026c

08003e50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e54:	2080      	movs	r0, #128	; 0x80
 8003e56:	f002 fb25 	bl	80064a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <USART3_IRQHandler+0x10>)
 8003e66:	f005 fb11 	bl	800948c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000704 	.word	0x20000704

08003e74 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003e7a:	f004 f97b 	bl	8008174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000524 	.word	0x20000524

08003e88 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003e8e:	f004 f971 	bl	8008174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000524 	.word	0x20000524

08003e9c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003ea2:	f004 f967 	bl	8008174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000524 	.word	0x20000524

08003eb0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <TIM8_CC_IRQHandler+0x10>)
 8003eb6:	f004 f95d 	bl	8008174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000524 	.word	0x20000524

08003ec4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <DMA2_Stream1_IRQHandler+0x10>)
 8003eca:	f001 fea3 	bl	8005c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000644 	.word	0x20000644

08003ed8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <DMA2_Stream6_IRQHandler+0x10>)
 8003ede:	f001 fe99 	bl	8005c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200007a8 	.word	0x200007a8

08003eec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <USART6_IRQHandler+0x10>)
 8003ef2:	f005 facb 	bl	800948c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000808 	.word	0x20000808

08003f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <SystemInit+0x28>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <SystemInit+0x28>)
 8003f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f14:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <SystemInit+0x28>)
 8003f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f1a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b096      	sub	sp, #88	; 0x58
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	615a      	str	r2, [r3, #20]
 8003f5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	2220      	movs	r2, #32
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f006 fafd 	bl	800a564 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f6c:	4a3e      	ldr	r2, [pc, #248]	; (8004068 <MX_TIM1_Init+0x13c>)
 8003f6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003f70:	4b3c      	ldr	r3, [pc, #240]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f72:	22b3      	movs	r2, #179	; 0xb3
 8003f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f7e:	2263      	movs	r2, #99	; 0x63
 8003f80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8e:	4b35      	ldr	r3, [pc, #212]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f94:	4833      	ldr	r0, [pc, #204]	; (8004064 <MX_TIM1_Init+0x138>)
 8003f96:	f003 fd8b 	bl	8007ab0 <HAL_TIM_Base_Init>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003fa0:	f7ff fe4c 	bl	8003c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003faa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fae:	4619      	mov	r1, r3
 8003fb0:	482c      	ldr	r0, [pc, #176]	; (8004064 <MX_TIM1_Init+0x138>)
 8003fb2:	f004 fb45 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003fbc:	f7ff fe3e 	bl	8003c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fc0:	4828      	ldr	r0, [pc, #160]	; (8004064 <MX_TIM1_Init+0x138>)
 8003fc2:	f003 fdc4 	bl	8007b4e <HAL_TIM_PWM_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003fcc:	f7ff fe36 	bl	8003c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4821      	ldr	r0, [pc, #132]	; (8004064 <MX_TIM1_Init+0x138>)
 8003fe0:	f005 f862 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003fea:	f7ff fe27 	bl	8003c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fee:	2360      	movs	r3, #96	; 0x60
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004002:	2300      	movs	r3, #0
 8004004:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800400a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800400e:	2204      	movs	r2, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4814      	ldr	r0, [pc, #80]	; (8004064 <MX_TIM1_Init+0x138>)
 8004014:	f004 fa52 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800401e:	f7ff fe0d 	bl	8003c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800403a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4807      	ldr	r0, [pc, #28]	; (8004064 <MX_TIM1_Init+0x138>)
 8004046:	f005 f8ab 	bl	80091a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004050:	f7ff fdf4 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004054:	4803      	ldr	r0, [pc, #12]	; (8004064 <MX_TIM1_Init+0x138>)
 8004056:	f000 f9e7 	bl	8004428 <HAL_TIM_MspPostInit>

}
 800405a:	bf00      	nop
 800405c:	3758      	adds	r7, #88	; 0x58
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200005b4 	.word	0x200005b4
 8004068:	40010000 	.word	0x40010000

0800406c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08e      	sub	sp, #56	; 0x38
 8004070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004080:	f107 0320 	add.w	r3, r7, #32
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
 8004098:	615a      	str	r2, [r3, #20]
 800409a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800409c:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <MX_TIM2_Init+0xe4>)
 800409e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80040a4:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040a6:	2259      	movs	r2, #89	; 0x59
 80040a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040aa:	4b29      	ldr	r3, [pc, #164]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040b2:	2263      	movs	r2, #99	; 0x63
 80040b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b6:	4b26      	ldr	r3, [pc, #152]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040bc:	4b24      	ldr	r3, [pc, #144]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040c2:	4823      	ldr	r0, [pc, #140]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040c4:	f003 fcf4 	bl	8007ab0 <HAL_TIM_Base_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80040ce:	f7ff fdb5 	bl	8003c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80040d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040dc:	4619      	mov	r1, r3
 80040de:	481c      	ldr	r0, [pc, #112]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040e0:	f004 faae 	bl	8008640 <HAL_TIM_ConfigClockSource>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80040ea:	f7ff fda7 	bl	8003c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80040ee:	4818      	ldr	r0, [pc, #96]	; (8004150 <MX_TIM2_Init+0xe4>)
 80040f0:	f003 fd2d 	bl	8007b4e <HAL_TIM_PWM_Init>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80040fa:	f7ff fd9f 	bl	8003c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004106:	f107 0320 	add.w	r3, r7, #32
 800410a:	4619      	mov	r1, r3
 800410c:	4810      	ldr	r0, [pc, #64]	; (8004150 <MX_TIM2_Init+0xe4>)
 800410e:	f004 ffcb 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8004118:	f7ff fd90 	bl	8003c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800411c:	2360      	movs	r3, #96	; 0x60
 800411e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	2208      	movs	r2, #8
 8004130:	4619      	mov	r1, r3
 8004132:	4807      	ldr	r0, [pc, #28]	; (8004150 <MX_TIM2_Init+0xe4>)
 8004134:	f004 f9c2 	bl	80084bc <HAL_TIM_PWM_ConfigChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800413e:	f7ff fd7d 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004142:	4803      	ldr	r0, [pc, #12]	; (8004150 <MX_TIM2_Init+0xe4>)
 8004144:	f000 f970 	bl	8004428 <HAL_TIM_MspPostInit>

}
 8004148:	bf00      	nop
 800414a:	3738      	adds	r7, #56	; 0x38
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	200005fc 	.word	0x200005fc

08004154 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415a:	f107 0308 	add.w	r3, r7, #8
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004168:	463b      	mov	r3, r7
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <MX_TIM3_Init+0x94>)
 8004172:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <MX_TIM3_Init+0x98>)
 8004174:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8004176:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <MX_TIM3_Init+0x94>)
 8004178:	2259      	movs	r2, #89	; 0x59
 800417a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <MX_TIM3_Init+0x94>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <MX_TIM3_Init+0x94>)
 8004184:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004188:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <MX_TIM3_Init+0x94>)
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <MX_TIM3_Init+0x94>)
 8004192:	2200      	movs	r2, #0
 8004194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004196:	4814      	ldr	r0, [pc, #80]	; (80041e8 <MX_TIM3_Init+0x94>)
 8004198:	f003 fc8a 	bl	8007ab0 <HAL_TIM_Base_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80041a2:	f7ff fd4b 	bl	8003c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041ac:	f107 0308 	add.w	r3, r7, #8
 80041b0:	4619      	mov	r1, r3
 80041b2:	480d      	ldr	r0, [pc, #52]	; (80041e8 <MX_TIM3_Init+0x94>)
 80041b4:	f004 fa44 	bl	8008640 <HAL_TIM_ConfigClockSource>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80041be:	f7ff fd3d 	bl	8003c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041ca:	463b      	mov	r3, r7
 80041cc:	4619      	mov	r1, r3
 80041ce:	4806      	ldr	r0, [pc, #24]	; (80041e8 <MX_TIM3_Init+0x94>)
 80041d0:	f004 ff6a 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80041da:	f7ff fd2f 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80041de:	bf00      	nop
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000056c 	.word	0x2000056c
 80041ec:	40000400 	.word	0x40000400

080041f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041f6:	f107 0318 	add.w	r3, r7, #24
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004204:	f107 0310 	add.w	r3, r7, #16
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800420e:	463b      	mov	r3, r7
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800421a:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <MX_TIM8_Init+0xe0>)
 800421c:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <MX_TIM8_Init+0xe4>)
 800421e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004222:	2259      	movs	r2, #89	; 0x59
 8004224:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <MX_TIM8_Init+0xe0>)
 800422e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004232:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800423a:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <MX_TIM8_Init+0xe0>)
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004242:	2200      	movs	r2, #0
 8004244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004246:	4822      	ldr	r0, [pc, #136]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004248:	f003 fc32 	bl	8007ab0 <HAL_TIM_Base_Init>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8004252:	f7ff fcf3 	bl	8003c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800425a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800425c:	f107 0318 	add.w	r3, r7, #24
 8004260:	4619      	mov	r1, r3
 8004262:	481b      	ldr	r0, [pc, #108]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004264:	f004 f9ec 	bl	8008640 <HAL_TIM_ConfigClockSource>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800426e:	f7ff fce5 	bl	8003c3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8004272:	4817      	ldr	r0, [pc, #92]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004274:	f003 fdfc 	bl	8007e70 <HAL_TIM_IC_Init>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800427e:	f7ff fcdd 	bl	8003c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800428a:	f107 0310 	add.w	r3, r7, #16
 800428e:	4619      	mov	r1, r3
 8004290:	480f      	ldr	r0, [pc, #60]	; (80042d0 <MX_TIM8_Init+0xe0>)
 8004292:	f004 ff09 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 800429c:	f7ff fcce 	bl	8003c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80042a0:	2300      	movs	r3, #0
 80042a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80042a4:	2301      	movs	r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80042b0:	463b      	mov	r3, r7
 80042b2:	220c      	movs	r2, #12
 80042b4:	4619      	mov	r1, r3
 80042b6:	4806      	ldr	r0, [pc, #24]	; (80042d0 <MX_TIM8_Init+0xe0>)
 80042b8:	f004 f864 	bl	8008384 <HAL_TIM_IC_ConfigChannel>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80042c2:	f7ff fcbb 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80042c6:	bf00      	nop
 80042c8:	3728      	adds	r7, #40	; 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000524 	.word	0x20000524
 80042d4:	40010400 	.word	0x40010400

080042d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 031c 	add.w	r3, r7, #28
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a47      	ldr	r2, [pc, #284]	; (8004414 <HAL_TIM_Base_MspInit+0x13c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	4b46      	ldr	r3, [pc, #280]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	4a45      	ldr	r2, [pc, #276]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6453      	str	r3, [r2, #68]	; 0x44
 800430a:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	61bb      	str	r3, [r7, #24]
 8004314:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004316:	e079      	b.n	800440c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6413      	str	r3, [r2, #64]	; 0x40
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]
}
 800433e:	e065      	b.n	800440c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a35      	ldr	r2, [pc, #212]	; (800441c <HAL_TIM_Base_MspInit+0x144>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10e      	bne.n	8004368 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	4a31      	ldr	r2, [pc, #196]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6413      	str	r3, [r2, #64]	; 0x40
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	693b      	ldr	r3, [r7, #16]
}
 8004366:	e051      	b.n	800440c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <HAL_TIM_Base_MspInit+0x148>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d14c      	bne.n	800440c <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	4a27      	ldr	r2, [pc, #156]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 800437c:	f043 0302 	orr.w	r3, r3, #2
 8004380:	6453      	str	r3, [r2, #68]	; 0x44
 8004382:	4b25      	ldr	r3, [pc, #148]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	4a20      	ldr	r2, [pc, #128]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6313      	str	r3, [r2, #48]	; 0x30
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <HAL_TIM_Base_MspInit+0x140>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	2302      	movs	r3, #2
 80043b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043bc:	2303      	movs	r3, #3
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c0:	f107 031c 	add.w	r3, r7, #28
 80043c4:	4619      	mov	r1, r3
 80043c6:	4817      	ldr	r0, [pc, #92]	; (8004424 <HAL_TIM_Base_MspInit+0x14c>)
 80043c8:	f001 fe8e 	bl	80060e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2100      	movs	r1, #0
 80043d0:	202b      	movs	r0, #43	; 0x2b
 80043d2:	f001 fa34 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80043d6:	202b      	movs	r0, #43	; 0x2b
 80043d8:	f001 fa4d 	bl	8005876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80043dc:	2200      	movs	r2, #0
 80043de:	2100      	movs	r1, #0
 80043e0:	202c      	movs	r0, #44	; 0x2c
 80043e2:	f001 fa2c 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80043e6:	202c      	movs	r0, #44	; 0x2c
 80043e8:	f001 fa45 	bl	8005876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80043ec:	2200      	movs	r2, #0
 80043ee:	2100      	movs	r1, #0
 80043f0:	202d      	movs	r0, #45	; 0x2d
 80043f2:	f001 fa24 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80043f6:	202d      	movs	r0, #45	; 0x2d
 80043f8:	f001 fa3d 	bl	8005876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80043fc:	2200      	movs	r2, #0
 80043fe:	2100      	movs	r1, #0
 8004400:	202e      	movs	r0, #46	; 0x2e
 8004402:	f001 fa1c 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004406:	202e      	movs	r0, #46	; 0x2e
 8004408:	f001 fa35 	bl	8005876 <HAL_NVIC_EnableIRQ>
}
 800440c:	bf00      	nop
 800440e:	3730      	adds	r7, #48	; 0x30
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40010000 	.word	0x40010000
 8004418:	40023800 	.word	0x40023800
 800441c:	40000400 	.word	0x40000400
 8004420:	40010400 	.word	0x40010400
 8004424:	40020800 	.word	0x40020800

08004428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004430:	f107 0314 	add.w	r3, r7, #20
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a25      	ldr	r2, [pc, #148]	; (80044dc <HAL_TIM_MspPostInit+0xb4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d11f      	bne.n	800448a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <HAL_TIM_MspPostInit+0xb8>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_TIM_MspPostInit+0xb8>)
 8004454:	f043 0310 	orr.w	r3, r3, #16
 8004458:	6313      	str	r3, [r2, #48]	; 0x30
 800445a:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <HAL_TIM_MspPostInit+0xb8>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8004466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800446a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	2300      	movs	r3, #0
 8004476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004478:	2301      	movs	r3, #1
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	4619      	mov	r1, r3
 8004482:	4818      	ldr	r0, [pc, #96]	; (80044e4 <HAL_TIM_MspPostInit+0xbc>)
 8004484:	f001 fe30 	bl	80060e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004488:	e023      	b.n	80044d2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d11e      	bne.n	80044d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_TIM_MspPostInit+0xb8>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <HAL_TIM_MspPostInit+0xb8>)
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	6313      	str	r3, [r2, #48]	; 0x30
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_TIM_MspPostInit+0xb8>)
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 80044b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b6:	2302      	movs	r3, #2
 80044b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044c2:	2301      	movs	r3, #1
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80044c6:	f107 0314 	add.w	r3, r7, #20
 80044ca:	4619      	mov	r1, r3
 80044cc:	4806      	ldr	r0, [pc, #24]	; (80044e8 <HAL_TIM_MspPostInit+0xc0>)
 80044ce:	f001 fe0b 	bl	80060e8 <HAL_GPIO_Init>
}
 80044d2:	bf00      	nop
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40020400 	.word	0x40020400

080044ec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <MX_USART3_UART_Init+0x50>)
 80044f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 80044f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 8004512:	220c      	movs	r2, #12
 8004514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 8004518:	2200      	movs	r2, #0
 800451a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004522:	4805      	ldr	r0, [pc, #20]	; (8004538 <MX_USART3_UART_Init+0x4c>)
 8004524:	f004 fea2 	bl	800926c <HAL_UART_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800452e:	f7ff fb85 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000704 	.word	0x20000704
 800453c:	40004800 	.word	0x40004800

08004540 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <MX_USART6_UART_Init+0x4c>)
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <MX_USART6_UART_Init+0x50>)
 8004548:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <MX_USART6_UART_Init+0x4c>)
 800454c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004550:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <MX_USART6_UART_Init+0x4c>)
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <MX_USART6_UART_Init+0x4c>)
 800455a:	2200      	movs	r2, #0
 800455c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800455e:	4b0b      	ldr	r3, [pc, #44]	; (800458c <MX_USART6_UART_Init+0x4c>)
 8004560:	2200      	movs	r2, #0
 8004562:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <MX_USART6_UART_Init+0x4c>)
 8004566:	220c      	movs	r2, #12
 8004568:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <MX_USART6_UART_Init+0x4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <MX_USART6_UART_Init+0x4c>)
 8004572:	2200      	movs	r2, #0
 8004574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004576:	4805      	ldr	r0, [pc, #20]	; (800458c <MX_USART6_UART_Init+0x4c>)
 8004578:	f004 fe78 	bl	800926c <HAL_UART_Init>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004582:	f7ff fb5b 	bl	8003c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000808 	.word	0x20000808
 8004590:	40011400 	.word	0x40011400

08004594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459c:	f107 031c 	add.w	r3, r7, #28
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a97      	ldr	r2, [pc, #604]	; (8004810 <HAL_UART_MspInit+0x27c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f040 8092 	bne.w	80046dc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	4b95      	ldr	r3, [pc, #596]	; (8004814 <HAL_UART_MspInit+0x280>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a94      	ldr	r2, [pc, #592]	; (8004814 <HAL_UART_MspInit+0x280>)
 80045c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b92      	ldr	r3, [pc, #584]	; (8004814 <HAL_UART_MspInit+0x280>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	4b8e      	ldr	r3, [pc, #568]	; (8004814 <HAL_UART_MspInit+0x280>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4a8d      	ldr	r2, [pc, #564]	; (8004814 <HAL_UART_MspInit+0x280>)
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	4b8b      	ldr	r3, [pc, #556]	; (8004814 <HAL_UART_MspInit+0x280>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80045f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fe:	2303      	movs	r3, #3
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004602:	2307      	movs	r3, #7
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004606:	f107 031c 	add.w	r3, r7, #28
 800460a:	4619      	mov	r1, r3
 800460c:	4882      	ldr	r0, [pc, #520]	; (8004818 <HAL_UART_MspInit+0x284>)
 800460e:	f001 fd6b 	bl	80060e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004612:	4b82      	ldr	r3, [pc, #520]	; (800481c <HAL_UART_MspInit+0x288>)
 8004614:	4a82      	ldr	r2, [pc, #520]	; (8004820 <HAL_UART_MspInit+0x28c>)
 8004616:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004618:	4b80      	ldr	r3, [pc, #512]	; (800481c <HAL_UART_MspInit+0x288>)
 800461a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800461e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004620:	4b7e      	ldr	r3, [pc, #504]	; (800481c <HAL_UART_MspInit+0x288>)
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004626:	4b7d      	ldr	r3, [pc, #500]	; (800481c <HAL_UART_MspInit+0x288>)
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800462c:	4b7b      	ldr	r3, [pc, #492]	; (800481c <HAL_UART_MspInit+0x288>)
 800462e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004632:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004634:	4b79      	ldr	r3, [pc, #484]	; (800481c <HAL_UART_MspInit+0x288>)
 8004636:	2200      	movs	r2, #0
 8004638:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800463a:	4b78      	ldr	r3, [pc, #480]	; (800481c <HAL_UART_MspInit+0x288>)
 800463c:	2200      	movs	r2, #0
 800463e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004640:	4b76      	ldr	r3, [pc, #472]	; (800481c <HAL_UART_MspInit+0x288>)
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004646:	4b75      	ldr	r3, [pc, #468]	; (800481c <HAL_UART_MspInit+0x288>)
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800464c:	4b73      	ldr	r3, [pc, #460]	; (800481c <HAL_UART_MspInit+0x288>)
 800464e:	2200      	movs	r2, #0
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004652:	4872      	ldr	r0, [pc, #456]	; (800481c <HAL_UART_MspInit+0x288>)
 8004654:	f001 f946 	bl	80058e4 <HAL_DMA_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800465e:	f7ff faed 	bl	8003c3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a6d      	ldr	r2, [pc, #436]	; (800481c <HAL_UART_MspInit+0x288>)
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
 8004668:	4a6c      	ldr	r2, [pc, #432]	; (800481c <HAL_UART_MspInit+0x288>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_UART_MspInit+0x290>)
 8004670:	4a6d      	ldr	r2, [pc, #436]	; (8004828 <HAL_UART_MspInit+0x294>)
 8004672:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004674:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <HAL_UART_MspInit+0x290>)
 8004676:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800467a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800467c:	4b69      	ldr	r3, [pc, #420]	; (8004824 <HAL_UART_MspInit+0x290>)
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004682:	4b68      	ldr	r3, [pc, #416]	; (8004824 <HAL_UART_MspInit+0x290>)
 8004684:	2200      	movs	r2, #0
 8004686:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_UART_MspInit+0x290>)
 800468a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800468e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004690:	4b64      	ldr	r3, [pc, #400]	; (8004824 <HAL_UART_MspInit+0x290>)
 8004692:	2200      	movs	r2, #0
 8004694:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004696:	4b63      	ldr	r3, [pc, #396]	; (8004824 <HAL_UART_MspInit+0x290>)
 8004698:	2200      	movs	r2, #0
 800469a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800469c:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_UART_MspInit+0x290>)
 800469e:	2200      	movs	r2, #0
 80046a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046a2:	4b60      	ldr	r3, [pc, #384]	; (8004824 <HAL_UART_MspInit+0x290>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046a8:	4b5e      	ldr	r3, [pc, #376]	; (8004824 <HAL_UART_MspInit+0x290>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80046ae:	485d      	ldr	r0, [pc, #372]	; (8004824 <HAL_UART_MspInit+0x290>)
 80046b0:	f001 f918 	bl	80058e4 <HAL_DMA_Init>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80046ba:	f7ff fabf 	bl	8003c3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a58      	ldr	r2, [pc, #352]	; (8004824 <HAL_UART_MspInit+0x290>)
 80046c2:	635a      	str	r2, [r3, #52]	; 0x34
 80046c4:	4a57      	ldr	r2, [pc, #348]	; (8004824 <HAL_UART_MspInit+0x290>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	2027      	movs	r0, #39	; 0x27
 80046d0:	f001 f8b5 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046d4:	2027      	movs	r0, #39	; 0x27
 80046d6:	f001 f8ce 	bl	8005876 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046da:	e095      	b.n	8004808 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART6)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a52      	ldr	r2, [pc, #328]	; (800482c <HAL_UART_MspInit+0x298>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	f040 8090 	bne.w	8004808 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART6_CLK_ENABLE();
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_UART_MspInit+0x280>)
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	4a48      	ldr	r2, [pc, #288]	; (8004814 <HAL_UART_MspInit+0x280>)
 80046f2:	f043 0320 	orr.w	r3, r3, #32
 80046f6:	6453      	str	r3, [r2, #68]	; 0x44
 80046f8:	4b46      	ldr	r3, [pc, #280]	; (8004814 <HAL_UART_MspInit+0x280>)
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <HAL_UART_MspInit+0x280>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4a41      	ldr	r2, [pc, #260]	; (8004814 <HAL_UART_MspInit+0x280>)
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	6313      	str	r3, [r2, #48]	; 0x30
 8004714:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_UART_MspInit+0x280>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004720:	23c0      	movs	r3, #192	; 0xc0
 8004722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800472c:	2303      	movs	r3, #3
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004730:	2308      	movs	r3, #8
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004734:	f107 031c 	add.w	r3, r7, #28
 8004738:	4619      	mov	r1, r3
 800473a:	483d      	ldr	r0, [pc, #244]	; (8004830 <HAL_UART_MspInit+0x29c>)
 800473c:	f001 fcd4 	bl	80060e8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004740:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004742:	4a3d      	ldr	r2, [pc, #244]	; (8004838 <HAL_UART_MspInit+0x2a4>)
 8004744:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004746:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004748:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800474c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800474e:	4b39      	ldr	r3, [pc, #228]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004754:	4b37      	ldr	r3, [pc, #220]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004756:	2200      	movs	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 800475c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004760:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004764:	2200      	movs	r2, #0
 8004766:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004768:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 800476a:	2200      	movs	r2, #0
 800476c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800476e:	4b31      	ldr	r3, [pc, #196]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004770:	2200      	movs	r2, #0
 8004772:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004776:	2200      	movs	r2, #0
 8004778:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800477a:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 800477c:	2200      	movs	r2, #0
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004780:	482c      	ldr	r0, [pc, #176]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004782:	f001 f8af 	bl	80058e4 <HAL_DMA_Init>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800478c:	f7ff fa56 	bl	8003c3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
 8004796:	4a27      	ldr	r2, [pc, #156]	; (8004834 <HAL_UART_MspInit+0x2a0>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_UART_MspInit+0x2a8>)
 800479e:	4a28      	ldr	r2, [pc, #160]	; (8004840 <HAL_UART_MspInit+0x2ac>)
 80047a0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80047a2:	4b26      	ldr	r3, [pc, #152]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047a4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80047a8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047ac:	2240      	movs	r2, #64	; 0x40
 80047ae:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047b6:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047bc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047d0:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047d8:	2200      	movs	r2, #0
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80047dc:	4817      	ldr	r0, [pc, #92]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047de:	f001 f881 	bl	80058e4 <HAL_DMA_Init>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_UART_MspInit+0x258>
      Error_Handler();
 80047e8:	f7ff fa28 	bl	8003c3c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a13      	ldr	r2, [pc, #76]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34
 80047f2:	4a12      	ldr	r2, [pc, #72]	; (800483c <HAL_UART_MspInit+0x2a8>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80047f8:	2200      	movs	r2, #0
 80047fa:	2100      	movs	r1, #0
 80047fc:	2047      	movs	r0, #71	; 0x47
 80047fe:	f001 f81e 	bl	800583e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004802:	2047      	movs	r0, #71	; 0x47
 8004804:	f001 f837 	bl	8005876 <HAL_NVIC_EnableIRQ>
}
 8004808:	bf00      	nop
 800480a:	3730      	adds	r7, #48	; 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40004800 	.word	0x40004800
 8004814:	40023800 	.word	0x40023800
 8004818:	40020c00 	.word	0x40020c00
 800481c:	200006a4 	.word	0x200006a4
 8004820:	40026028 	.word	0x40026028
 8004824:	20000748 	.word	0x20000748
 8004828:	40026058 	.word	0x40026058
 800482c:	40011400 	.word	0x40011400
 8004830:	40020800 	.word	0x40020800
 8004834:	20000644 	.word	0x20000644
 8004838:	40026428 	.word	0x40026428
 800483c:	200007a8 	.word	0x200007a8
 8004840:	400264a0 	.word	0x400264a0

08004844 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800487c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800484a:	e003      	b.n	8004854 <LoopCopyDataInit>

0800484c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800484e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004852:	3104      	adds	r1, #4

08004854 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004854:	480b      	ldr	r0, [pc, #44]	; (8004884 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800485a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800485c:	d3f6      	bcc.n	800484c <CopyDataInit>
  ldr  r2, =_sbss
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004860:	e002      	b.n	8004868 <LoopFillZerobss>

08004862 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004862:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004864:	f842 3b04 	str.w	r3, [r2], #4

08004868 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800486a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800486c:	d3f9      	bcc.n	8004862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800486e:	f7ff fb47 	bl	8003f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004872:	f005 fe53 	bl	800a51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004876:	f7fd fed3 	bl	8002620 <main>
  bx  lr    
 800487a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800487c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004880:	0800bf68 	.word	0x0800bf68
  ldr  r0, =_sdata
 8004884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004888:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 800488c:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 8004890:	20000850 	.word	0x20000850

08004894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004894:	e7fe      	b.n	8004894 <ADC_IRQHandler>
	...

08004898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <HAL_Init+0x40>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <HAL_Init+0x40>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_Init+0x40>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_Init+0x40>)
 80048ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048b4:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <HAL_Init+0x40>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <HAL_Init+0x40>)
 80048ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048c0:	2003      	movs	r0, #3
 80048c2:	f000 ffb1 	bl	8005828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048c6:	2000      	movs	r0, #0
 80048c8:	f000 f808 	bl	80048dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048cc:	f7ff fa4c 	bl	8003d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00

080048dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_InitTick+0x54>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_InitTick+0x58>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 ffc9 	bl	8005892 <HAL_SYSTICK_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e00e      	b.n	8004928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b0f      	cmp	r3, #15
 800490e:	d80a      	bhi.n	8004926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004910:	2200      	movs	r2, #0
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004918:	f000 ff91 	bl	800583e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800491c:	4a06      	ldr	r2, [pc, #24]	; (8004938 <HAL_InitTick+0x5c>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200000fc 	.word	0x200000fc
 8004934:	20000104 	.word	0x20000104
 8004938:	20000100 	.word	0x20000100

0800493c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_IncTick+0x20>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_IncTick+0x24>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4413      	add	r3, r2
 800494c:	4a04      	ldr	r2, [pc, #16]	; (8004960 <HAL_IncTick+0x24>)
 800494e:	6013      	str	r3, [r2, #0]
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000104 	.word	0x20000104
 8004960:	2000084c 	.word	0x2000084c

08004964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return uwTick;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_GetTick+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	2000084c 	.word	0x2000084c

0800497c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004984:	f7ff ffee 	bl	8004964 <HAL_GetTick>
 8004988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d005      	beq.n	80049a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <HAL_Delay+0x44>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049a2:	bf00      	nop
 80049a4:	f7ff ffde 	bl	8004964 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d8f7      	bhi.n	80049a4 <HAL_Delay+0x28>
  {
  }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000104 	.word	0x20000104

080049c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0ed      	b.n	8004bb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd faf4 	bl	8001fd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f8:	f7ff ffb4 	bl	8004964 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049fe:	e012      	b.n	8004a26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a00:	f7ff ffb0 	bl	8004964 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b0a      	cmp	r3, #10
 8004a0c:	d90b      	bls.n	8004a26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2205      	movs	r2, #5
 8004a1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0c5      	b.n	8004bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0e5      	beq.n	8004a00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0202 	bic.w	r2, r2, #2
 8004a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a44:	f7ff ff8e 	bl	8004964 <HAL_GetTick>
 8004a48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a4a:	e012      	b.n	8004a72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a4c:	f7ff ff8a 	bl	8004964 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b0a      	cmp	r3, #10
 8004a58:	d90b      	bls.n	8004a72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2205      	movs	r2, #5
 8004a6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e09f      	b.n	8004bb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	7e1b      	ldrb	r3, [r3, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e007      	b.n	8004aaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	7e5b      	ldrb	r3, [r3, #25]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e007      	b.n	8004ad4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7e9b      	ldrb	r3, [r3, #26]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d108      	bne.n	8004aee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0220 	orr.w	r2, r2, #32
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e007      	b.n	8004afe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0220 	bic.w	r2, r2, #32
 8004afc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7edb      	ldrb	r3, [r3, #27]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d108      	bne.n	8004b18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0210 	bic.w	r2, r2, #16
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e007      	b.n	8004b28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0210 	orr.w	r2, r2, #16
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7f1b      	ldrb	r3, [r3, #28]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d108      	bne.n	8004b42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e007      	b.n	8004b52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0208 	bic.w	r2, r2, #8
 8004b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7f5b      	ldrb	r3, [r3, #29]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d108      	bne.n	8004b6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0204 	orr.w	r2, r2, #4
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e007      	b.n	8004b7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	ea42 0103 	orr.w	r1, r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d003      	beq.n	8004be2 <HAL_CAN_ConfigFilter+0x26>
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f040 80be 	bne.w	8004d5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004be2:	4b65      	ldr	r3, [pc, #404]	; (8004d78 <HAL_CAN_ConfigFilter+0x1bc>)
 8004be4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	431a      	orrs	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	401a      	ands	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d123      	bne.n	8004c8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3248      	adds	r2, #72	; 0x48
 8004c6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	3348      	adds	r3, #72	; 0x48
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	440b      	add	r3, r1
 8004c8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d122      	bne.n	8004cda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	3248      	adds	r2, #72	; 0x48
 8004cba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	3348      	adds	r3, #72	; 0x48
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	440b      	add	r3, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	401a      	ands	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004cf4:	e007      	b.n	8004d06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	401a      	ands	r2, r3
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004d20:	e007      	b.n	8004d32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d107      	bne.n	8004d4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d50:	f023 0201 	bic.w	r2, r3, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e006      	b.n	8004d6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
  }
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40006400 	.word	0x40006400

08004d7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d12e      	bne.n	8004dee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004da8:	f7ff fddc 	bl	8004964 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004dae:	e012      	b.n	8004dd6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004db0:	f7ff fdd8 	bl	8004964 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b0a      	cmp	r3, #10
 8004dbc:	d90b      	bls.n	8004dd6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2205      	movs	r2, #5
 8004dce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e012      	b.n	8004dfc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e006      	b.n	8004dfc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d003      	beq.n	8004e30 <HAL_CAN_AddTxMessage+0x2c>
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f040 80b8 	bne.w	8004fa0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d105      	bne.n	8004e50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80a0 	beq.w	8004f90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	0e1b      	lsrs	r3, r3, #24
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d907      	bls.n	8004e70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e09e      	b.n	8004fae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e70:	2201      	movs	r2, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	409a      	lsls	r2, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	6809      	ldr	r1, [r1, #0]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3318      	adds	r3, #24
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	440b      	add	r3, r1
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e00f      	b.n	8004ebe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ea8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004eb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3318      	adds	r3, #24
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	440b      	add	r3, r1
 8004ebc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	3318      	adds	r3, #24
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	440b      	add	r3, r1
 8004ece:	3304      	adds	r3, #4
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	7d1b      	ldrb	r3, [r3, #20]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d111      	bne.n	8004efe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3318      	adds	r3, #24
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	440b      	add	r3, r1
 8004efa:	3304      	adds	r3, #4
 8004efc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3307      	adds	r3, #7
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	061a      	lsls	r2, r3, #24
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3306      	adds	r3, #6
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3305      	adds	r3, #5
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	3204      	adds	r2, #4
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	4610      	mov	r0, r2
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	6811      	ldr	r1, [r2, #0]
 8004f26:	ea43 0200 	orr.w	r2, r3, r0
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	440b      	add	r3, r1
 8004f30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004f34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	061a      	lsls	r2, r3, #24
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3302      	adds	r3, #2
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	4313      	orrs	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	4610      	mov	r0, r2
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	6811      	ldr	r1, [r2, #0]
 8004f5c:	ea43 0200 	orr.w	r2, r3, r0
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	440b      	add	r3, r1
 8004f66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3318      	adds	r3, #24
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4413      	add	r3, r2
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	6811      	ldr	r1, [r2, #0]
 8004f7e:	f043 0201 	orr.w	r2, r3, #1
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3318      	adds	r3, #24
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	440b      	add	r3, r1
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e00e      	b.n	8004fae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e006      	b.n	8004fae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3724      	adds	r7, #36	; 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d003      	beq.n	8004fde <HAL_CAN_GetRxMessage+0x24>
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	f040 80f3 	bne.w	80051c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10e      	bne.n	8005002 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d116      	bne.n	8005020 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0e7      	b.n	80051d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0d8      	b.n	80051d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	331b      	adds	r3, #27
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	4413      	add	r3, r2
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0204 	and.w	r2, r3, #4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10c      	bne.n	8005058 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	331b      	adds	r3, #27
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	4413      	add	r3, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	0d5b      	lsrs	r3, r3, #21
 800504e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e00b      	b.n	8005070 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	331b      	adds	r3, #27
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	4413      	add	r3, r2
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	331b      	adds	r3, #27
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	4413      	add	r3, r2
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0202 	and.w	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	331b      	adds	r3, #27
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	4413      	add	r3, r2
 8005092:	3304      	adds	r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 020f 	and.w	r2, r3, #15
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	331b      	adds	r3, #27
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	4413      	add	r3, r2
 80050aa:	3304      	adds	r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	0a1b      	lsrs	r3, r3, #8
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	331b      	adds	r3, #27
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	4413      	add	r3, r2
 80050c2:	3304      	adds	r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	0a1a      	lsrs	r2, r3, #8
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	4413      	add	r3, r2
 8005108:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	0c1a      	lsrs	r2, r3, #16
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3302      	adds	r3, #2
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0e1a      	lsrs	r2, r3, #24
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3303      	adds	r3, #3
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	4413      	add	r3, r2
 800513c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	3304      	adds	r3, #4
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	4413      	add	r3, r2
 8005154:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	0a1a      	lsrs	r2, r3, #8
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	3305      	adds	r3, #5
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	4413      	add	r3, r2
 800516e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0c1a      	lsrs	r2, r3, #16
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	3306      	adds	r3, #6
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	4413      	add	r3, r2
 8005188:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	0e1a      	lsrs	r2, r3, #24
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	3307      	adds	r3, #7
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0220 	orr.w	r2, r2, #32
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	e007      	b.n	80051c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0220 	orr.w	r2, r2, #32
 80051be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e006      	b.n	80051d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d002      	beq.n	80051fc <HAL_CAN_ActivateNotification+0x1e>
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d109      	bne.n	8005210 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6959      	ldr	r1, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	e006      	b.n	800521e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b08a      	sub	sp, #40	; 0x28
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d07c      	beq.n	800536a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d023      	beq.n	80052c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2201      	movs	r2, #1
 8005280:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f983 	bl	8005598 <HAL_CAN_TxMailbox0CompleteCallback>
 8005292:	e016      	b.n	80052c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d004      	beq.n	80052a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	e00c      	b.n	80052c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ba:	e002      	b.n	80052c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f989 	bl	80055d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d024      	beq.n	8005316 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f963 	bl	80055ac <HAL_CAN_TxMailbox1CompleteCallback>
 80052e6:	e016      	b.n	8005316 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
 80052fa:	e00c      	b.n	8005316 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
 800530e:	e002      	b.n	8005316 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f969 	bl	80055e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d024      	beq.n	800536a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005328:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f943 	bl	80055c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800533a:	e016      	b.n	800536a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	e00c      	b.n	800536a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	e002      	b.n	800536a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f949 	bl	80055fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005384:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2210      	movs	r2, #16
 800538c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2208      	movs	r2, #8
 80053a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f930 	bl	8005610 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fd ffe1 	bl	8003390 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2210      	movs	r2, #16
 80053f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2208      	movs	r2, #8
 800540c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f912 	bl	8005638 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8f9 	bl	8005624 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8fc 	bl	800564c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d006      	beq.n	8005476 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2208      	movs	r2, #8
 800546e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8f5 	bl	8005660 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d07b      	beq.n	8005578 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d072      	beq.n	8005570 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f043 0302 	orr.w	r3, r3, #2
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d043      	beq.n	8005570 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d03e      	beq.n	8005570 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d02b      	beq.n	8005554 <HAL_CAN_IRQHandler+0x32a>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d82e      	bhi.n	800555e <HAL_CAN_IRQHandler+0x334>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d022      	beq.n	800554a <HAL_CAN_IRQHandler+0x320>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d82a      	bhi.n	800555e <HAL_CAN_IRQHandler+0x334>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d019      	beq.n	8005540 <HAL_CAN_IRQHandler+0x316>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d826      	bhi.n	800555e <HAL_CAN_IRQHandler+0x334>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d010      	beq.n	8005536 <HAL_CAN_IRQHandler+0x30c>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d822      	bhi.n	800555e <HAL_CAN_IRQHandler+0x334>
 8005518:	2b10      	cmp	r3, #16
 800551a:	d002      	beq.n	8005522 <HAL_CAN_IRQHandler+0x2f8>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d005      	beq.n	800552c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005520:	e01d      	b.n	800555e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	f043 0308 	orr.w	r3, r3, #8
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800552a:	e019      	b.n	8005560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	f043 0310 	orr.w	r3, r3, #16
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005534:	e014      	b.n	8005560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	f043 0320 	orr.w	r3, r3, #32
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800553e:	e00f      	b.n	8005560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005548:	e00a      	b.n	8005560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005552:	e005      	b.n	8005560 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800555c:	e000      	b.n	8005560 <HAL_CAN_IRQHandler+0x336>
            break;
 800555e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800556e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2204      	movs	r2, #4
 8005576:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f872 	bl	8005674 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005590:	bf00      	nop
 8005592:	3728      	adds	r7, #40	; 0x28
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <__NVIC_SetPriorityGrouping+0x44>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056a4:	4013      	ands	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ba:	4a04      	ldr	r2, [pc, #16]	; (80056cc <__NVIC_SetPriorityGrouping+0x44>)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	60d3      	str	r3, [r2, #12]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <__NVIC_GetPriorityGrouping+0x18>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	f003 0307 	and.w	r3, r3, #7
}
 80056de:	4618      	mov	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	db0b      	blt.n	8005716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	f003 021f 	and.w	r2, r3, #31
 8005704:	4907      	ldr	r1, [pc, #28]	; (8005724 <__NVIC_EnableIRQ+0x38>)
 8005706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	2001      	movs	r0, #1
 800570e:	fa00 f202 	lsl.w	r2, r0, r2
 8005712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	e000e100 	.word	0xe000e100

08005728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005738:	2b00      	cmp	r3, #0
 800573a:	db0a      	blt.n	8005752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	b2da      	uxtb	r2, r3
 8005740:	490c      	ldr	r1, [pc, #48]	; (8005774 <__NVIC_SetPriority+0x4c>)
 8005742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	440b      	add	r3, r1
 800574c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005750:	e00a      	b.n	8005768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4908      	ldr	r1, [pc, #32]	; (8005778 <__NVIC_SetPriority+0x50>)
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	3b04      	subs	r3, #4
 8005760:	0112      	lsls	r2, r2, #4
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	440b      	add	r3, r1
 8005766:	761a      	strb	r2, [r3, #24]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	e000e100 	.word	0xe000e100
 8005778:	e000ed00 	.word	0xe000ed00

0800577c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800577c:	b480      	push	{r7}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f1c3 0307 	rsb	r3, r3, #7
 8005796:	2b04      	cmp	r3, #4
 8005798:	bf28      	it	cs
 800579a:	2304      	movcs	r3, #4
 800579c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3304      	adds	r3, #4
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d902      	bls.n	80057ac <NVIC_EncodePriority+0x30>
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3b03      	subs	r3, #3
 80057aa:	e000      	b.n	80057ae <NVIC_EncodePriority+0x32>
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43da      	mvns	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	401a      	ands	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	43d9      	mvns	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d4:	4313      	orrs	r3, r2
         );
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3724      	adds	r7, #36	; 0x24
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057f4:	d301      	bcc.n	80057fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057f6:	2301      	movs	r3, #1
 80057f8:	e00f      	b.n	800581a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057fa:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <SysTick_Config+0x40>)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3b01      	subs	r3, #1
 8005800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005802:	210f      	movs	r1, #15
 8005804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005808:	f7ff ff8e 	bl	8005728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <SysTick_Config+0x40>)
 800580e:	2200      	movs	r2, #0
 8005810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <SysTick_Config+0x40>)
 8005814:	2207      	movs	r2, #7
 8005816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	e000e010 	.word	0xe000e010

08005828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff29 	bl	8005688 <__NVIC_SetPriorityGrouping>
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800583e:	b580      	push	{r7, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
 8005844:	4603      	mov	r3, r0
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005850:	f7ff ff3e 	bl	80056d0 <__NVIC_GetPriorityGrouping>
 8005854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	6978      	ldr	r0, [r7, #20]
 800585c:	f7ff ff8e 	bl	800577c <NVIC_EncodePriority>
 8005860:	4602      	mov	r2, r0
 8005862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff ff5d 	bl	8005728 <__NVIC_SetPriority>
}
 800586e:	bf00      	nop
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	4603      	mov	r3, r0
 800587e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ff31 	bl	80056ec <__NVIC_EnableIRQ>
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff ffa2 	bl	80057e4 <SysTick_Config>
 80058a0:	4603      	mov	r3, r0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d106      	bne.n	80058c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a08      	ldr	r2, [pc, #32]	; (80058e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80058c6:	e005      	b.n	80058d4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80058ce:	f023 0304 	bic.w	r3, r3, #4
 80058d2:	6013      	str	r3, [r2, #0]
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	e000e010 	.word	0xe000e010

080058e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058f0:	f7ff f838 	bl	8004964 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e099      	b.n	8005a34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005920:	e00f      	b.n	8005942 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005922:	f7ff f81f 	bl	8004964 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b05      	cmp	r3, #5
 800592e:	d908      	bls.n	8005942 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2203      	movs	r2, #3
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e078      	b.n	8005a34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e8      	bne.n	8005922 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <HAL_DMA_Init+0x158>)
 800595c:	4013      	ands	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800596e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800597a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b04      	cmp	r3, #4
 800599a:	d107      	bne.n	80059ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	4313      	orrs	r3, r2
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0307 	bic.w	r3, r3, #7
 80059c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d117      	bne.n	8005a06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb01 	bl	8005ff0 <DMA_CheckFifoParam>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2240      	movs	r2, #64	; 0x40
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a02:	2301      	movs	r3, #1
 8005a04:	e016      	b.n	8005a34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fab8 	bl	8005f84 <DMA_CalcBaseAndBitshift>
 8005a14:	4603      	mov	r3, r0
 8005a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1c:	223f      	movs	r2, #63	; 0x3f
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	f010803f 	.word	0xf010803f

08005a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_DMA_Start_IT+0x26>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e040      	b.n	8005ae8 <HAL_DMA_Start_IT+0xa8>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d12f      	bne.n	8005ada <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa4a 	bl	8005f28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a98:	223f      	movs	r2, #63	; 0x3f
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0216 	orr.w	r2, r2, #22
 8005aae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0208 	orr.w	r2, r2, #8
 8005ac6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e005      	b.n	8005ae6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005afe:	f7fe ff31 	bl	8004964 <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d008      	beq.n	8005b22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2280      	movs	r2, #128	; 0x80
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e052      	b.n	8005bc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0216 	bic.w	r2, r2, #22
 8005b30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <HAL_DMA_Abort+0x62>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0208 	bic.w	r2, r2, #8
 8005b60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b72:	e013      	b.n	8005b9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b74:	f7fe fef6 	bl	8004964 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d90c      	bls.n	8005b9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e015      	b.n	8005bc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e4      	bne.n	8005b74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	223f      	movs	r2, #63	; 0x3f
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d004      	beq.n	8005bee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e00c      	b.n	8005c08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2205      	movs	r2, #5
 8005bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0201 	bic.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c20:	4b92      	ldr	r3, [pc, #584]	; (8005e6c <HAL_DMA_IRQHandler+0x258>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a92      	ldr	r2, [pc, #584]	; (8005e70 <HAL_DMA_IRQHandler+0x25c>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	0a9b      	lsrs	r3, r3, #10
 8005c2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	2208      	movs	r2, #8
 8005c40:	409a      	lsls	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01a      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d013      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0204 	bic.w	r2, r2, #4
 8005c66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	f043 0201 	orr.w	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c84:	2201      	movs	r2, #1
 8005c86:	409a      	lsls	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	f043 0202 	orr.w	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cba:	2204      	movs	r2, #4
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d012      	beq.n	8005cec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd8:	2204      	movs	r2, #4
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f043 0204 	orr.w	r2, r3, #4
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d043      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d03c      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0e:	2210      	movs	r2, #16
 8005d10:	409a      	lsls	r2, r3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d018      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d108      	bne.n	8005d44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d024      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
 8005d42:	e01f      	b.n	8005d84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01b      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
 8005d54:	e016      	b.n	8005d84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0208 	bic.w	r2, r2, #8
 8005d72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d88:	2220      	movs	r2, #32
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 808e 	beq.w	8005eb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8086 	beq.w	8005eb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005daa:	2220      	movs	r2, #32
 8005dac:	409a      	lsls	r2, r3
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d136      	bne.n	8005e2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0216 	bic.w	r2, r2, #22
 8005dcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ddc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <HAL_DMA_IRQHandler+0x1da>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0208 	bic.w	r2, r2, #8
 8005dfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e02:	223f      	movs	r2, #63	; 0x3f
 8005e04:	409a      	lsls	r2, r3
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d07d      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
        }
        return;
 8005e2a:	e078      	b.n	8005f1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01c      	beq.n	8005e74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d108      	bne.n	8005e5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d030      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
 8005e58:	e02b      	b.n	8005eb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d027      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	e022      	b.n	8005eb2 <HAL_DMA_IRQHandler+0x29e>
 8005e6c:	200000fc 	.word	0x200000fc
 8005e70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10f      	bne.n	8005ea2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0210 	bic.w	r2, r2, #16
 8005e90:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d032      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d022      	beq.n	8005f0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2205      	movs	r2, #5
 8005eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0201 	bic.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d307      	bcc.n	8005efa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f2      	bne.n	8005ede <HAL_DMA_IRQHandler+0x2ca>
 8005ef8:	e000      	b.n	8005efc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005efa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	e000      	b.n	8005f20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f1e:	bf00      	nop
    }
  }
}
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop

08005f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d108      	bne.n	8005f68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f66:	e007      	b.n	8005f78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	3b10      	subs	r3, #16
 8005f94:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	091b      	lsrs	r3, r3, #4
 8005f9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <DMA_CalcBaseAndBitshift+0x68>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d909      	bls.n	8005fc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	659a      	str	r2, [r3, #88]	; 0x58
 8005fc4:	e007      	b.n	8005fd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005fce:	f023 0303 	bic.w	r3, r3, #3
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	aaaaaaab 	.word	0xaaaaaaab
 8005fec:	0800bd70 	.word	0x0800bd70

08005ff0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d11f      	bne.n	800604a <DMA_CheckFifoParam+0x5a>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d856      	bhi.n	80060be <DMA_CheckFifoParam+0xce>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <DMA_CheckFifoParam+0x28>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006029 	.word	0x08006029
 800601c:	0800603b 	.word	0x0800603b
 8006020:	08006029 	.word	0x08006029
 8006024:	080060bf 	.word	0x080060bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d046      	beq.n	80060c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006038:	e043      	b.n	80060c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006042:	d140      	bne.n	80060c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006048:	e03d      	b.n	80060c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006052:	d121      	bne.n	8006098 <DMA_CheckFifoParam+0xa8>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b03      	cmp	r3, #3
 8006058:	d837      	bhi.n	80060ca <DMA_CheckFifoParam+0xda>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <DMA_CheckFifoParam+0x70>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006071 	.word	0x08006071
 8006064:	08006077 	.word	0x08006077
 8006068:	08006071 	.word	0x08006071
 800606c:	08006089 	.word	0x08006089
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e030      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d025      	beq.n	80060ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006086:	e022      	b.n	80060ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006090:	d11f      	bne.n	80060d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006096:	e01c      	b.n	80060d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d903      	bls.n	80060a6 <DMA_CheckFifoParam+0xb6>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060a4:	e018      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
      break;
 80060aa:	e015      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      break;
 80060bc:	e00b      	b.n	80060d6 <DMA_CheckFifoParam+0xe6>
      break;
 80060be:	bf00      	nop
 80060c0:	e00a      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      break;
 80060c2:	bf00      	nop
 80060c4:	e008      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      break;
 80060c6:	bf00      	nop
 80060c8:	e006      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      break;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
      break;
 80060d6:	bf00      	nop
    }
  } 
  
  return status; 
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop

080060e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b089      	sub	sp, #36	; 0x24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	e177      	b.n	80063f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006104:	2201      	movs	r2, #1
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	f040 8166 	bne.w	80063ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d005      	beq.n	800613a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006136:	2b02      	cmp	r3, #2
 8006138:	d130      	bne.n	800619c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	2203      	movs	r2, #3
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4313      	orrs	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006170:	2201      	movs	r2, #1
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 0201 	and.w	r2, r3, #1
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d017      	beq.n	80061d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	2203      	movs	r2, #3
 80061b4:	fa02 f303 	lsl.w	r3, r2, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4013      	ands	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0303 	and.w	r3, r3, #3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d123      	bne.n	800622c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	08da      	lsrs	r2, r3, #3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3208      	adds	r2, #8
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	220f      	movs	r2, #15
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	08da      	lsrs	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3208      	adds	r2, #8
 8006226:	69b9      	ldr	r1, [r7, #24]
 8006228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	2203      	movs	r2, #3
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	43db      	mvns	r3, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4013      	ands	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 0203 	and.w	r2, r3, #3
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80c0 	beq.w	80063ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	4b66      	ldr	r3, [pc, #408]	; (800640c <HAL_GPIO_Init+0x324>)
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	4a65      	ldr	r2, [pc, #404]	; (800640c <HAL_GPIO_Init+0x324>)
 8006278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800627c:	6453      	str	r3, [r2, #68]	; 0x44
 800627e:	4b63      	ldr	r3, [pc, #396]	; (800640c <HAL_GPIO_Init+0x324>)
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800628a:	4a61      	ldr	r2, [pc, #388]	; (8006410 <HAL_GPIO_Init+0x328>)
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	3302      	adds	r3, #2
 8006292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	220f      	movs	r2, #15
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	4013      	ands	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a58      	ldr	r2, [pc, #352]	; (8006414 <HAL_GPIO_Init+0x32c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d037      	beq.n	8006326 <HAL_GPIO_Init+0x23e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_GPIO_Init+0x330>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d031      	beq.n	8006322 <HAL_GPIO_Init+0x23a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a56      	ldr	r2, [pc, #344]	; (800641c <HAL_GPIO_Init+0x334>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02b      	beq.n	800631e <HAL_GPIO_Init+0x236>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a55      	ldr	r2, [pc, #340]	; (8006420 <HAL_GPIO_Init+0x338>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d025      	beq.n	800631a <HAL_GPIO_Init+0x232>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a54      	ldr	r2, [pc, #336]	; (8006424 <HAL_GPIO_Init+0x33c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01f      	beq.n	8006316 <HAL_GPIO_Init+0x22e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a53      	ldr	r2, [pc, #332]	; (8006428 <HAL_GPIO_Init+0x340>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d019      	beq.n	8006312 <HAL_GPIO_Init+0x22a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a52      	ldr	r2, [pc, #328]	; (800642c <HAL_GPIO_Init+0x344>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_GPIO_Init+0x226>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a51      	ldr	r2, [pc, #324]	; (8006430 <HAL_GPIO_Init+0x348>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00d      	beq.n	800630a <HAL_GPIO_Init+0x222>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a50      	ldr	r2, [pc, #320]	; (8006434 <HAL_GPIO_Init+0x34c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <HAL_GPIO_Init+0x21e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a4f      	ldr	r2, [pc, #316]	; (8006438 <HAL_GPIO_Init+0x350>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d101      	bne.n	8006302 <HAL_GPIO_Init+0x21a>
 80062fe:	2309      	movs	r3, #9
 8006300:	e012      	b.n	8006328 <HAL_GPIO_Init+0x240>
 8006302:	230a      	movs	r3, #10
 8006304:	e010      	b.n	8006328 <HAL_GPIO_Init+0x240>
 8006306:	2308      	movs	r3, #8
 8006308:	e00e      	b.n	8006328 <HAL_GPIO_Init+0x240>
 800630a:	2307      	movs	r3, #7
 800630c:	e00c      	b.n	8006328 <HAL_GPIO_Init+0x240>
 800630e:	2306      	movs	r3, #6
 8006310:	e00a      	b.n	8006328 <HAL_GPIO_Init+0x240>
 8006312:	2305      	movs	r3, #5
 8006314:	e008      	b.n	8006328 <HAL_GPIO_Init+0x240>
 8006316:	2304      	movs	r3, #4
 8006318:	e006      	b.n	8006328 <HAL_GPIO_Init+0x240>
 800631a:	2303      	movs	r3, #3
 800631c:	e004      	b.n	8006328 <HAL_GPIO_Init+0x240>
 800631e:	2302      	movs	r3, #2
 8006320:	e002      	b.n	8006328 <HAL_GPIO_Init+0x240>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_GPIO_Init+0x240>
 8006326:	2300      	movs	r3, #0
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	f002 0203 	and.w	r2, r2, #3
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	4093      	lsls	r3, r2
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006338:	4935      	ldr	r1, [pc, #212]	; (8006410 <HAL_GPIO_Init+0x328>)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	089b      	lsrs	r3, r3, #2
 800633e:	3302      	adds	r3, #2
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006346:	4b3d      	ldr	r3, [pc, #244]	; (800643c <HAL_GPIO_Init+0x354>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800636a:	4a34      	ldr	r2, [pc, #208]	; (800643c <HAL_GPIO_Init+0x354>)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006370:	4b32      	ldr	r3, [pc, #200]	; (800643c <HAL_GPIO_Init+0x354>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	43db      	mvns	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <HAL_GPIO_Init+0x354>)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800639a:	4b28      	ldr	r3, [pc, #160]	; (800643c <HAL_GPIO_Init+0x354>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063be:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_GPIO_Init+0x354>)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063c4:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_GPIO_Init+0x354>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4013      	ands	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063e8:	4a14      	ldr	r2, [pc, #80]	; (800643c <HAL_GPIO_Init+0x354>)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	3301      	adds	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	f67f ae84 	bls.w	8006104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	3724      	adds	r7, #36	; 0x24
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40023800 	.word	0x40023800
 8006410:	40013800 	.word	0x40013800
 8006414:	40020000 	.word	0x40020000
 8006418:	40020400 	.word	0x40020400
 800641c:	40020800 	.word	0x40020800
 8006420:	40020c00 	.word	0x40020c00
 8006424:	40021000 	.word	0x40021000
 8006428:	40021400 	.word	0x40021400
 800642c:	40021800 	.word	0x40021800
 8006430:	40021c00 	.word	0x40021c00
 8006434:	40022000 	.word	0x40022000
 8006438:	40022400 	.word	0x40022400
 800643c:	40013c00 	.word	0x40013c00

08006440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	887b      	ldrh	r3, [r7, #2]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
 800645c:	e001      	b.n	8006462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
 800647c:	4613      	mov	r3, r2
 800647e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006480:	787b      	ldrb	r3, [r7, #1]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006486:	887a      	ldrh	r2, [r7, #2]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800648c:	e003      	b.n	8006496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800648e:	887b      	ldrh	r3, [r7, #2]
 8006490:	041a      	lsls	r2, r3, #16
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	619a      	str	r2, [r3, #24]
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d006      	beq.n	80064c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064ba:	4a05      	ldr	r2, [pc, #20]	; (80064d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fc fe98 	bl	80031f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40013c00 	.word	0x40013c00

080064d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e12b      	b.n	800673e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc f848 	bl	8002590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	; 0x24
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006538:	f000 fe26 	bl	8007188 <HAL_RCC_GetPCLK1Freq>
 800653c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4a81      	ldr	r2, [pc, #516]	; (8006748 <HAL_I2C_Init+0x274>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d807      	bhi.n	8006558 <HAL_I2C_Init+0x84>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a80      	ldr	r2, [pc, #512]	; (800674c <HAL_I2C_Init+0x278>)
 800654c:	4293      	cmp	r3, r2
 800654e:	bf94      	ite	ls
 8006550:	2301      	movls	r3, #1
 8006552:	2300      	movhi	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e006      	b.n	8006566 <HAL_I2C_Init+0x92>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a7d      	ldr	r2, [pc, #500]	; (8006750 <HAL_I2C_Init+0x27c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	bf94      	ite	ls
 8006560:	2301      	movls	r3, #1
 8006562:	2300      	movhi	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e0e7      	b.n	800673e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a78      	ldr	r2, [pc, #480]	; (8006754 <HAL_I2C_Init+0x280>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	0c9b      	lsrs	r3, r3, #18
 8006578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a6a      	ldr	r2, [pc, #424]	; (8006748 <HAL_I2C_Init+0x274>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d802      	bhi.n	80065a8 <HAL_I2C_Init+0xd4>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3301      	adds	r3, #1
 80065a6:	e009      	b.n	80065bc <HAL_I2C_Init+0xe8>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	4a69      	ldr	r2, [pc, #420]	; (8006758 <HAL_I2C_Init+0x284>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	099b      	lsrs	r3, r3, #6
 80065ba:	3301      	adds	r3, #1
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	495c      	ldr	r1, [pc, #368]	; (8006748 <HAL_I2C_Init+0x274>)
 80065d8:	428b      	cmp	r3, r1
 80065da:	d819      	bhi.n	8006610 <HAL_I2C_Init+0x13c>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	1e59      	subs	r1, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065f0:	400b      	ands	r3, r1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_I2C_Init+0x138>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1e59      	subs	r1, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	fbb1 f3f3 	udiv	r3, r1, r3
 8006604:	3301      	adds	r3, #1
 8006606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660a:	e051      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 800660c:	2304      	movs	r3, #4
 800660e:	e04f      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d111      	bne.n	800663c <HAL_I2C_Init+0x168>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1e58      	subs	r0, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	440b      	add	r3, r1
 8006626:	fbb0 f3f3 	udiv	r3, r0, r3
 800662a:	3301      	adds	r3, #1
 800662c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	e012      	b.n	8006662 <HAL_I2C_Init+0x18e>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	1e58      	subs	r0, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6859      	ldr	r1, [r3, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	0099      	lsls	r1, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006652:	3301      	adds	r3, #1
 8006654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf0c      	ite	eq
 800665c:	2301      	moveq	r3, #1
 800665e:	2300      	movne	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Init+0x196>
 8006666:	2301      	movs	r3, #1
 8006668:	e022      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10e      	bne.n	8006690 <HAL_I2C_Init+0x1bc>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1e58      	subs	r0, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	440b      	add	r3, r1
 8006680:	fbb0 f3f3 	udiv	r3, r0, r3
 8006684:	3301      	adds	r3, #1
 8006686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668e:	e00f      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1e58      	subs	r0, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	0099      	lsls	r1, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a6:	3301      	adds	r3, #1
 80066a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	6809      	ldr	r1, [r1, #0]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6911      	ldr	r1, [r2, #16]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68d2      	ldr	r2, [r2, #12]
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	000186a0 	.word	0x000186a0
 800674c:	001e847f 	.word	0x001e847f
 8006750:	003d08ff 	.word	0x003d08ff
 8006754:	431bde83 	.word	0x431bde83
 8006758:	10624dd3 	.word	0x10624dd3

0800675c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b20      	cmp	r3, #32
 8006770:	d129      	bne.n	80067c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2224      	movs	r2, #36	; 0x24
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0210 	bic.w	r2, r2, #16
 8006798:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d12a      	bne.n	8006844 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2224      	movs	r2, #36	; 0x24
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800680e:	89fb      	ldrh	r3, [r7, #14]
 8006810:	f023 030f 	bic.w	r3, r3, #15
 8006814:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	b29a      	uxth	r2, r3
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	4313      	orrs	r3, r2
 800681e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	89fa      	ldrh	r2, [r7, #14]
 8006826:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686c:	6413      	str	r3, [r2, #64]	; 0x40
 800686e:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800687c:	2201      	movs	r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7fe f870 	bl	8004964 <HAL_GetTick>
 8006884:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006886:	e009      	b.n	800689c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006888:	f7fe f86c 	bl	8004964 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006896:	d901      	bls.n	800689c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e01f      	b.n	80068dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800689c:	4b13      	ldr	r3, [pc, #76]	; (80068ec <HAL_PWREx_EnableOverDrive+0x98>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d1ee      	bne.n	8006888 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068aa:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068b0:	f7fe f858 	bl	8004964 <HAL_GetTick>
 80068b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068b6:	e009      	b.n	80068cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068b8:	f7fe f854 	bl	8004964 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068c6:	d901      	bls.n	80068cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e007      	b.n	80068dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <HAL_PWREx_EnableOverDrive+0x98>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d8:	d1ee      	bne.n	80068b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40023800 	.word	0x40023800
 80068e8:	420e0040 	.word	0x420e0040
 80068ec:	40007000 	.word	0x40007000
 80068f0:	420e0044 	.word	0x420e0044

080068f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e264      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d075      	beq.n	80069fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006912:	4ba3      	ldr	r3, [pc, #652]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 030c 	and.w	r3, r3, #12
 800691a:	2b04      	cmp	r3, #4
 800691c:	d00c      	beq.n	8006938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800691e:	4ba0      	ldr	r3, [pc, #640]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006926:	2b08      	cmp	r3, #8
 8006928:	d112      	bne.n	8006950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800692a:	4b9d      	ldr	r3, [pc, #628]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006936:	d10b      	bne.n	8006950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006938:	4b99      	ldr	r3, [pc, #612]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d05b      	beq.n	80069fc <HAL_RCC_OscConfig+0x108>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d157      	bne.n	80069fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e23f      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006958:	d106      	bne.n	8006968 <HAL_RCC_OscConfig+0x74>
 800695a:	4b91      	ldr	r3, [pc, #580]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a90      	ldr	r2, [pc, #576]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e01d      	b.n	80069a4 <HAL_RCC_OscConfig+0xb0>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006970:	d10c      	bne.n	800698c <HAL_RCC_OscConfig+0x98>
 8006972:	4b8b      	ldr	r3, [pc, #556]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a8a      	ldr	r2, [pc, #552]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a87      	ldr	r2, [pc, #540]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e00b      	b.n	80069a4 <HAL_RCC_OscConfig+0xb0>
 800698c:	4b84      	ldr	r3, [pc, #528]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a83      	ldr	r2, [pc, #524]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b81      	ldr	r3, [pc, #516]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a80      	ldr	r2, [pc, #512]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 800699e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d013      	beq.n	80069d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ac:	f7fd ffda 	bl	8004964 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b4:	f7fd ffd6 	bl	8004964 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b64      	cmp	r3, #100	; 0x64
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e204      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	4b76      	ldr	r3, [pc, #472]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCC_OscConfig+0xc0>
 80069d2:	e014      	b.n	80069fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d4:	f7fd ffc6 	bl	8004964 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069dc:	f7fd ffc2 	bl	8004964 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b64      	cmp	r3, #100	; 0x64
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e1f0      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ee:	4b6c      	ldr	r3, [pc, #432]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0xe8>
 80069fa:	e000      	b.n	80069fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d063      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a0a:	4b65      	ldr	r3, [pc, #404]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a16:	4b62      	ldr	r3, [pc, #392]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d11c      	bne.n	8006a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a22:	4b5f      	ldr	r3, [pc, #380]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d116      	bne.n	8006a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a2e:	4b5c      	ldr	r3, [pc, #368]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <HAL_RCC_OscConfig+0x152>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d001      	beq.n	8006a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e1c4      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a46:	4b56      	ldr	r3, [pc, #344]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4952      	ldr	r1, [pc, #328]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a5a:	e03a      	b.n	8006ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d020      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a64:	4b4f      	ldr	r3, [pc, #316]	; (8006ba4 <HAL_RCC_OscConfig+0x2b0>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6a:	f7fd ff7b 	bl	8004964 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a72:	f7fd ff77 	bl	8004964 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e1a5      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a84:	4b46      	ldr	r3, [pc, #280]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a90:	4b43      	ldr	r3, [pc, #268]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	4940      	ldr	r1, [pc, #256]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	600b      	str	r3, [r1, #0]
 8006aa4:	e015      	b.n	8006ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa6:	4b3f      	ldr	r3, [pc, #252]	; (8006ba4 <HAL_RCC_OscConfig+0x2b0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aac:	f7fd ff5a 	bl	8004964 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab4:	f7fd ff56 	bl	8004964 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e184      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac6:	4b36      	ldr	r3, [pc, #216]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d030      	beq.n	8006b40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae6:	4b30      	ldr	r3, [pc, #192]	; (8006ba8 <HAL_RCC_OscConfig+0x2b4>)
 8006ae8:	2201      	movs	r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fd ff3a 	bl	8004964 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006af4:	f7fd ff36 	bl	8004964 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e164      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b06:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x200>
 8006b12:	e015      	b.n	8006b40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <HAL_RCC_OscConfig+0x2b4>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1a:	f7fd ff23 	bl	8004964 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b22:	f7fd ff1f 	bl	8004964 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e14d      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f0      	bne.n	8006b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80a0 	beq.w	8006c8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10f      	bne.n	8006b7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_RCC_OscConfig+0x2b8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d121      	bne.n	8006bce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b8a:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_RCC_OscConfig+0x2b8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a07      	ldr	r2, [pc, #28]	; (8006bac <HAL_RCC_OscConfig+0x2b8>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b96:	f7fd fee5 	bl	8004964 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b9c:	e011      	b.n	8006bc2 <HAL_RCC_OscConfig+0x2ce>
 8006b9e:	bf00      	nop
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	42470000 	.word	0x42470000
 8006ba8:	42470e80 	.word	0x42470e80
 8006bac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb0:	f7fd fed8 	bl	8004964 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e106      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc2:	4b85      	ldr	r3, [pc, #532]	; (8006dd8 <HAL_RCC_OscConfig+0x4e4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d106      	bne.n	8006be4 <HAL_RCC_OscConfig+0x2f0>
 8006bd6:	4b81      	ldr	r3, [pc, #516]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	4a80      	ldr	r2, [pc, #512]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	6713      	str	r3, [r2, #112]	; 0x70
 8006be2:	e01c      	b.n	8006c1e <HAL_RCC_OscConfig+0x32a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d10c      	bne.n	8006c06 <HAL_RCC_OscConfig+0x312>
 8006bec:	4b7b      	ldr	r3, [pc, #492]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4a7a      	ldr	r2, [pc, #488]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006bf2:	f043 0304 	orr.w	r3, r3, #4
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	4b78      	ldr	r3, [pc, #480]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4a77      	ldr	r2, [pc, #476]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
 8006c04:	e00b      	b.n	8006c1e <HAL_RCC_OscConfig+0x32a>
 8006c06:	4b75      	ldr	r3, [pc, #468]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0a:	4a74      	ldr	r2, [pc, #464]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c0c:	f023 0301 	bic.w	r3, r3, #1
 8006c10:	6713      	str	r3, [r2, #112]	; 0x70
 8006c12:	4b72      	ldr	r3, [pc, #456]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	4a71      	ldr	r2, [pc, #452]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d015      	beq.n	8006c52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c26:	f7fd fe9d 	bl	8004964 <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	e00a      	b.n	8006c44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2e:	f7fd fe99 	bl	8004964 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0c5      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c44:	4b65      	ldr	r3, [pc, #404]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0ee      	beq.n	8006c2e <HAL_RCC_OscConfig+0x33a>
 8006c50:	e014      	b.n	8006c7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c52:	f7fd fe87 	bl	8004964 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c58:	e00a      	b.n	8006c70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c5a:	f7fd fe83 	bl	8004964 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e0af      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c70:	4b5a      	ldr	r3, [pc, #360]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1ee      	bne.n	8006c5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d105      	bne.n	8006c8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c82:	4b56      	ldr	r3, [pc, #344]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	4a55      	ldr	r2, [pc, #340]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 809b 	beq.w	8006dce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c98:	4b50      	ldr	r3, [pc, #320]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 030c 	and.w	r3, r3, #12
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d05c      	beq.n	8006d5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d141      	bne.n	8006d30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cac:	4b4c      	ldr	r3, [pc, #304]	; (8006de0 <HAL_RCC_OscConfig+0x4ec>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb2:	f7fd fe57 	bl	8004964 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cba:	f7fd fe53 	bl	8004964 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e081      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ccc:	4b43      	ldr	r3, [pc, #268]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	019b      	lsls	r3, r3, #6
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	085b      	lsrs	r3, r3, #1
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	061b      	lsls	r3, r3, #24
 8006cfc:	4937      	ldr	r1, [pc, #220]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d02:	4b37      	ldr	r3, [pc, #220]	; (8006de0 <HAL_RCC_OscConfig+0x4ec>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d08:	f7fd fe2c 	bl	8004964 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d10:	f7fd fe28 	bl	8004964 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e056      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0f0      	beq.n	8006d10 <HAL_RCC_OscConfig+0x41c>
 8006d2e:	e04e      	b.n	8006dce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d30:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <HAL_RCC_OscConfig+0x4ec>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d36:	f7fd fe15 	bl	8004964 <HAL_GetTick>
 8006d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d3c:	e008      	b.n	8006d50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d3e:	f7fd fe11 	bl	8004964 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e03f      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d50:	4b22      	ldr	r3, [pc, #136]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f0      	bne.n	8006d3e <HAL_RCC_OscConfig+0x44a>
 8006d5c:	e037      	b.n	8006dce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e032      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d6a:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <HAL_RCC_OscConfig+0x4e8>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d028      	beq.n	8006dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d121      	bne.n	8006dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d11a      	bne.n	8006dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006da0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d111      	bne.n	8006dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	3b01      	subs	r3, #1
 8006db4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d107      	bne.n	8006dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40007000 	.word	0x40007000
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	42470060 	.word	0x42470060

08006de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0cc      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006df8:	4b68      	ldr	r3, [pc, #416]	; (8006f9c <HAL_RCC_ClockConfig+0x1b8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d90c      	bls.n	8006e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e06:	4b65      	ldr	r3, [pc, #404]	; (8006f9c <HAL_RCC_ClockConfig+0x1b8>)
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0e:	4b63      	ldr	r3, [pc, #396]	; (8006f9c <HAL_RCC_ClockConfig+0x1b8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d001      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0b8      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d020      	beq.n	8006e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e38:	4b59      	ldr	r3, [pc, #356]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4a58      	ldr	r2, [pc, #352]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e50:	4b53      	ldr	r3, [pc, #332]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	4a52      	ldr	r2, [pc, #328]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e5c:	4b50      	ldr	r3, [pc, #320]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	494d      	ldr	r1, [pc, #308]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d044      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d107      	bne.n	8006e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e82:	4b47      	ldr	r3, [pc, #284]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d119      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e07f      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea2:	4b3f      	ldr	r3, [pc, #252]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e06f      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb2:	4b3b      	ldr	r3, [pc, #236]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e067      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ec2:	4b37      	ldr	r3, [pc, #220]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f023 0203 	bic.w	r2, r3, #3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4934      	ldr	r1, [pc, #208]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ed4:	f7fd fd46 	bl	8004964 <HAL_GetTick>
 8006ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006edc:	f7fd fd42 	bl	8004964 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e04f      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef2:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 020c 	and.w	r2, r3, #12
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d1eb      	bne.n	8006edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f04:	4b25      	ldr	r3, [pc, #148]	; (8006f9c <HAL_RCC_ClockConfig+0x1b8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d20c      	bcs.n	8006f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f12:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <HAL_RCC_ClockConfig+0x1b8>)
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1a:	4b20      	ldr	r3, [pc, #128]	; (8006f9c <HAL_RCC_ClockConfig+0x1b8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d001      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e032      	b.n	8006f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f38:	4b19      	ldr	r3, [pc, #100]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	4916      	ldr	r1, [pc, #88]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f56:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	490e      	ldr	r1, [pc, #56]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f6a:	f000 f821 	bl	8006fb0 <HAL_RCC_GetSysClockFreq>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	490a      	ldr	r1, [pc, #40]	; (8006fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8006f7c:	5ccb      	ldrb	r3, [r1, r3]
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <HAL_RCC_ClockConfig+0x1c8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fd fca6 	bl	80048dc <HAL_InitTick>

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40023c00 	.word	0x40023c00
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	0800bd58 	.word	0x0800bd58
 8006fa8:	200000fc 	.word	0x200000fc
 8006fac:	20000100 	.word	0x20000100

08006fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fc8:	4b67      	ldr	r3, [pc, #412]	; (8007168 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f003 030c 	and.w	r3, r3, #12
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d00d      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	f200 80bd 	bhi.w	8007154 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d003      	beq.n	8006fea <HAL_RCC_GetSysClockFreq+0x3a>
 8006fe2:	e0b7      	b.n	8007154 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fe4:	4b61      	ldr	r3, [pc, #388]	; (800716c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fe6:	60bb      	str	r3, [r7, #8]
       break;
 8006fe8:	e0b7      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fea:	4b60      	ldr	r3, [pc, #384]	; (800716c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fec:	60bb      	str	r3, [r7, #8]
      break;
 8006fee:	e0b4      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ff0:	4b5d      	ldr	r3, [pc, #372]	; (8007168 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ffa:	4b5b      	ldr	r3, [pc, #364]	; (8007168 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d04d      	beq.n	80070a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007006:	4b58      	ldr	r3, [pc, #352]	; (8007168 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	099b      	lsrs	r3, r3, #6
 800700c:	461a      	mov	r2, r3
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007016:	f04f 0100 	mov.w	r1, #0
 800701a:	ea02 0800 	and.w	r8, r2, r0
 800701e:	ea03 0901 	and.w	r9, r3, r1
 8007022:	4640      	mov	r0, r8
 8007024:	4649      	mov	r1, r9
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	014b      	lsls	r3, r1, #5
 8007030:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007034:	0142      	lsls	r2, r0, #5
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	ebb0 0008 	subs.w	r0, r0, r8
 800703e:	eb61 0109 	sbc.w	r1, r1, r9
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	018b      	lsls	r3, r1, #6
 800704c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007050:	0182      	lsls	r2, r0, #6
 8007052:	1a12      	subs	r2, r2, r0
 8007054:	eb63 0301 	sbc.w	r3, r3, r1
 8007058:	f04f 0000 	mov.w	r0, #0
 800705c:	f04f 0100 	mov.w	r1, #0
 8007060:	00d9      	lsls	r1, r3, #3
 8007062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007066:	00d0      	lsls	r0, r2, #3
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	eb12 0208 	adds.w	r2, r2, r8
 8007070:	eb43 0309 	adc.w	r3, r3, r9
 8007074:	f04f 0000 	mov.w	r0, #0
 8007078:	f04f 0100 	mov.w	r1, #0
 800707c:	0299      	lsls	r1, r3, #10
 800707e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007082:	0290      	lsls	r0, r2, #10
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4610      	mov	r0, r2
 800708a:	4619      	mov	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	461a      	mov	r2, r3
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	f7f9 fdb0 	bl	8000bf8 <__aeabi_uldivmod>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4613      	mov	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e04a      	b.n	8007138 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070a2:	4b31      	ldr	r3, [pc, #196]	; (8007168 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	461a      	mov	r2, r3
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070b2:	f04f 0100 	mov.w	r1, #0
 80070b6:	ea02 0400 	and.w	r4, r2, r0
 80070ba:	ea03 0501 	and.w	r5, r3, r1
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	014b      	lsls	r3, r1, #5
 80070cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070d0:	0142      	lsls	r2, r0, #5
 80070d2:	4610      	mov	r0, r2
 80070d4:	4619      	mov	r1, r3
 80070d6:	1b00      	subs	r0, r0, r4
 80070d8:	eb61 0105 	sbc.w	r1, r1, r5
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	018b      	lsls	r3, r1, #6
 80070e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070ea:	0182      	lsls	r2, r0, #6
 80070ec:	1a12      	subs	r2, r2, r0
 80070ee:	eb63 0301 	sbc.w	r3, r3, r1
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	00d9      	lsls	r1, r3, #3
 80070fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007100:	00d0      	lsls	r0, r2, #3
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	1912      	adds	r2, r2, r4
 8007108:	eb45 0303 	adc.w	r3, r5, r3
 800710c:	f04f 0000 	mov.w	r0, #0
 8007110:	f04f 0100 	mov.w	r1, #0
 8007114:	0299      	lsls	r1, r3, #10
 8007116:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800711a:	0290      	lsls	r0, r2, #10
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4610      	mov	r0, r2
 8007122:	4619      	mov	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	461a      	mov	r2, r3
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	f7f9 fd64 	bl	8000bf8 <__aeabi_uldivmod>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4613      	mov	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	3301      	adds	r3, #1
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	60bb      	str	r3, [r7, #8]
      break;
 8007152:	e002      	b.n	800715a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007156:	60bb      	str	r3, [r7, #8]
      break;
 8007158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800715a:	68bb      	ldr	r3, [r7, #8]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800
 800716c:	00f42400 	.word	0x00f42400

08007170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007174:	4b03      	ldr	r3, [pc, #12]	; (8007184 <HAL_RCC_GetHCLKFreq+0x14>)
 8007176:	681b      	ldr	r3, [r3, #0]
}
 8007178:	4618      	mov	r0, r3
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	200000fc 	.word	0x200000fc

08007188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800718c:	f7ff fff0 	bl	8007170 <HAL_RCC_GetHCLKFreq>
 8007190:	4602      	mov	r2, r0
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	0a9b      	lsrs	r3, r3, #10
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	4903      	ldr	r1, [pc, #12]	; (80071ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800719e:	5ccb      	ldrb	r3, [r1, r3]
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40023800 	.word	0x40023800
 80071ac:	0800bd68 	.word	0x0800bd68

080071b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071b4:	f7ff ffdc 	bl	8007170 <HAL_RCC_GetHCLKFreq>
 80071b8:	4602      	mov	r2, r0
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	0b5b      	lsrs	r3, r3, #13
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	4903      	ldr	r1, [pc, #12]	; (80071d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071c6:	5ccb      	ldrb	r3, [r1, r3]
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40023800 	.word	0x40023800
 80071d4:	0800bd68 	.word	0x0800bd68

080071d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e07b      	b.n	80072e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d108      	bne.n	8007204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071fa:	d009      	beq.n	8007210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	61da      	str	r2, [r3, #28]
 8007202:	e005      	b.n	8007210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fc fd54 	bl	8003cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007246:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	ea42 0103 	orr.w	r1, r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f003 0104 	and.w	r1, r3, #4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	f003 0210 	and.w	r2, r3, #16
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b088      	sub	sp, #32
 80072ee:	af02      	add	r7, sp, #8
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	603b      	str	r3, [r7, #0]
 80072f6:	4613      	mov	r3, r2
 80072f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007306:	d112      	bne.n	800732e <HAL_SPI_Receive+0x44>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10e      	bne.n	800732e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2204      	movs	r2, #4
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007318:	88fa      	ldrh	r2, [r7, #6]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4613      	mov	r3, r2
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 f8f1 	bl	800750c <HAL_SPI_TransmitReceive>
 800732a:	4603      	mov	r3, r0
 800732c:	e0ea      	b.n	8007504 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_SPI_Receive+0x52>
 8007338:	2302      	movs	r3, #2
 800733a:	e0e3      	b.n	8007504 <HAL_SPI_Receive+0x21a>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007344:	f7fd fb0e 	bl	8004964 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b01      	cmp	r3, #1
 8007354:	d002      	beq.n	800735c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007356:	2302      	movs	r3, #2
 8007358:	75fb      	strb	r3, [r7, #23]
    goto error;
 800735a:	e0ca      	b.n	80074f2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_SPI_Receive+0x7e>
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800736c:	e0c1      	b.n	80074f2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2204      	movs	r2, #4
 8007372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b4:	d10f      	bne.n	80073d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d007      	beq.n	80073f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d162      	bne.n	80074c2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073fc:	e02e      	b.n	800745c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d115      	bne.n	8007438 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f103 020c 	add.w	r2, r3, #12
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b29a      	uxth	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007436:	e011      	b.n	800745c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007438:	f7fd fa94 	bl	8004964 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d803      	bhi.n	8007450 <HAL_SPI_Receive+0x166>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744e:	d102      	bne.n	8007456 <HAL_SPI_Receive+0x16c>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	75fb      	strb	r3, [r7, #23]
          goto error;
 800745a:	e04a      	b.n	80074f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1cb      	bne.n	80073fe <HAL_SPI_Receive+0x114>
 8007466:	e031      	b.n	80074cc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d113      	bne.n	800749e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	b292      	uxth	r2, r2
 8007482:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	1c9a      	adds	r2, r3, #2
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800749c:	e011      	b.n	80074c2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800749e:	f7fd fa61 	bl	8004964 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d803      	bhi.n	80074b6 <HAL_SPI_Receive+0x1cc>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b4:	d102      	bne.n	80074bc <HAL_SPI_Receive+0x1d2>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d102      	bne.n	80074c2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074c0:	e017      	b.n	80074f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1cd      	bne.n	8007468 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa45 	bl	8007960 <SPI_EndRxTransaction>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
 80074ee:	e000      	b.n	80074f2 <HAL_SPI_Receive+0x208>
  }

error :
 80074f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800751a:	2301      	movs	r3, #1
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_SPI_TransmitReceive+0x26>
 800752e:	2302      	movs	r3, #2
 8007530:	e18a      	b.n	8007848 <HAL_SPI_TransmitReceive+0x33c>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800753a:	f7fd fa13 	bl	8004964 <HAL_GetTick>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007550:	887b      	ldrh	r3, [r7, #2]
 8007552:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007558:	2b01      	cmp	r3, #1
 800755a:	d00f      	beq.n	800757c <HAL_SPI_TransmitReceive+0x70>
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007562:	d107      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x68>
 800756c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007570:	2b04      	cmp	r3, #4
 8007572:	d003      	beq.n	800757c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007574:	2302      	movs	r3, #2
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800757a:	e15b      	b.n	8007834 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_SPI_TransmitReceive+0x82>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_SPI_TransmitReceive+0x82>
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007594:	e14e      	b.n	8007834 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d003      	beq.n	80075aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2205      	movs	r2, #5
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	887a      	ldrh	r2, [r7, #2]
 80075ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	887a      	ldrh	r2, [r7, #2]
 80075c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	887a      	ldrh	r2, [r7, #2]
 80075d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d007      	beq.n	80075fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007606:	d178      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x10a>
 8007610:	8b7b      	ldrh	r3, [r7, #26]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d166      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	881a      	ldrh	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	1c9a      	adds	r2, r3, #2
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800763a:	e053      	b.n	80076e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b02      	cmp	r3, #2
 8007648:	d11b      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x176>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d016      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x176>
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d113      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	1c9a      	adds	r2, r3, #2
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b01      	cmp	r3, #1
 800768e:	d119      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x1b8>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d014      	beq.n	80076c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	b292      	uxth	r2, r2
 80076a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	1c9a      	adds	r2, r3, #2
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076c4:	f7fd f94e 	bl	8004964 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d807      	bhi.n	80076e4 <HAL_SPI_TransmitReceive+0x1d8>
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076da:	d003      	beq.n	80076e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076e2:	e0a7      	b.n	8007834 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1a6      	bne.n	800763c <HAL_SPI_TransmitReceive+0x130>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1a1      	bne.n	800763c <HAL_SPI_TransmitReceive+0x130>
 80076f8:	e07c      	b.n	80077f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_SPI_TransmitReceive+0x1fc>
 8007702:	8b7b      	ldrh	r3, [r7, #26]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d16b      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	7812      	ldrb	r2, [r2, #0]
 8007714:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800772e:	e057      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b02      	cmp	r3, #2
 800773c:	d11c      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x26c>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d017      	beq.n	8007778 <HAL_SPI_TransmitReceive+0x26c>
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d114      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	7812      	ldrb	r2, [r2, #0]
 800775a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776a:	b29b      	uxth	r3, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d119      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x2ae>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d014      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077b6:	2301      	movs	r3, #1
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077ba:	f7fd f8d3 	bl	8004964 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d803      	bhi.n	80077d2 <HAL_SPI_TransmitReceive+0x2c6>
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d0:	d102      	bne.n	80077d8 <HAL_SPI_TransmitReceive+0x2cc>
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077de:	e029      	b.n	8007834 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1a2      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x224>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d19d      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f917 	bl	8007a2c <SPI_EndRxTxTransaction>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007810:	e010      	b.n	8007834 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	e000      	b.n	8007834 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007832:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007848:	4618      	mov	r0, r3
 800784a:	3730      	adds	r7, #48	; 0x30
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	4613      	mov	r3, r2
 800785e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007860:	f7fd f880 	bl	8004964 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	4413      	add	r3, r2
 800786e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007870:	f7fd f878 	bl	8004964 <HAL_GetTick>
 8007874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007876:	4b39      	ldr	r3, [pc, #228]	; (800795c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	015b      	lsls	r3, r3, #5
 800787c:	0d1b      	lsrs	r3, r3, #20
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007886:	e054      	b.n	8007932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788e:	d050      	beq.n	8007932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007890:	f7fd f868 	bl	8004964 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	429a      	cmp	r2, r3
 800789e:	d902      	bls.n	80078a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d13d      	bne.n	8007922 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078be:	d111      	bne.n	80078e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078c8:	d004      	beq.n	80078d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d2:	d107      	bne.n	80078e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ec:	d10f      	bne.n	800790e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800790c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e017      	b.n	8007952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	3b01      	subs	r3, #1
 8007930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4013      	ands	r3, r2
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	429a      	cmp	r2, r3
 8007940:	bf0c      	ite	eq
 8007942:	2301      	moveq	r3, #1
 8007944:	2300      	movne	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	429a      	cmp	r2, r3
 800794e:	d19b      	bne.n	8007888 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200000fc 	.word	0x200000fc

08007960 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007974:	d111      	bne.n	800799a <SPI_EndRxTransaction+0x3a>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800797e:	d004      	beq.n	800798a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007988:	d107      	bne.n	800799a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007998:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a2:	d12a      	bne.n	80079fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ac:	d012      	beq.n	80079d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2200      	movs	r2, #0
 80079b6:	2180      	movs	r1, #128	; 0x80
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff ff49 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d02d      	beq.n	8007a20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c8:	f043 0220 	orr.w	r2, r3, #32
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e026      	b.n	8007a22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2200      	movs	r2, #0
 80079dc:	2101      	movs	r1, #1
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f7ff ff36 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d01a      	beq.n	8007a20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	f043 0220 	orr.w	r2, r3, #32
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e013      	b.n	8007a22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	2101      	movs	r1, #1
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7ff ff23 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e000      	b.n	8007a22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a38:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <SPI_EndRxTxTransaction+0x7c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <SPI_EndRxTxTransaction+0x80>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	0d5b      	lsrs	r3, r3, #21
 8007a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a48:	fb02 f303 	mul.w	r3, r2, r3
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a56:	d112      	bne.n	8007a7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2180      	movs	r1, #128	; 0x80
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff fef4 	bl	8007850 <SPI_WaitFlagStateUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d016      	beq.n	8007a9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f043 0220 	orr.w	r2, r3, #32
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e00f      	b.n	8007a9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a94:	2b80      	cmp	r3, #128	; 0x80
 8007a96:	d0f2      	beq.n	8007a7e <SPI_EndRxTxTransaction+0x52>
 8007a98:	e000      	b.n	8007a9c <SPI_EndRxTxTransaction+0x70>
        break;
 8007a9a:	bf00      	nop
  }

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	200000fc 	.word	0x200000fc
 8007aac:	165e9f81 	.word	0x165e9f81

08007ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e041      	b.n	8007b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7fc fbfe 	bl	80042d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f000 fea0 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e041      	b.n	8007be4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f839 	bl	8007bec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f000 fe51 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d109      	bne.n	8007c24 <HAL_TIM_PWM_Start+0x24>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	bf14      	ite	ne
 8007c1c:	2301      	movne	r3, #1
 8007c1e:	2300      	moveq	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e022      	b.n	8007c6a <HAL_TIM_PWM_Start+0x6a>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d109      	bne.n	8007c3e <HAL_TIM_PWM_Start+0x3e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	e015      	b.n	8007c6a <HAL_TIM_PWM_Start+0x6a>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d109      	bne.n	8007c58 <HAL_TIM_PWM_Start+0x58>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	e008      	b.n	8007c6a <HAL_TIM_PWM_Start+0x6a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	bf14      	ite	ne
 8007c64:	2301      	movne	r3, #1
 8007c66:	2300      	moveq	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e07c      	b.n	8007d6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <HAL_TIM_PWM_Start+0x82>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c80:	e013      	b.n	8007caa <HAL_TIM_PWM_Start+0xaa>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d104      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x92>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c90:	e00b      	b.n	8007caa <HAL_TIM_PWM_Start+0xaa>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIM_PWM_Start+0xa2>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	e003      	b.n	8007caa <HAL_TIM_PWM_Start+0xaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f9d2 	bl	800905c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	; (8007d74 <HAL_TIM_PWM_Start+0x174>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_TIM_PWM_Start+0xcc>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2c      	ldr	r2, [pc, #176]	; (8007d78 <HAL_TIM_PWM_Start+0x178>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_PWM_Start+0xd0>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_TIM_PWM_Start+0xd2>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ce4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a22      	ldr	r2, [pc, #136]	; (8007d74 <HAL_TIM_PWM_Start+0x174>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d022      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d01d      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1f      	ldr	r2, [pc, #124]	; (8007d7c <HAL_TIM_PWM_Start+0x17c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d018      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1d      	ldr	r2, [pc, #116]	; (8007d80 <HAL_TIM_PWM_Start+0x180>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d013      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1c      	ldr	r2, [pc, #112]	; (8007d84 <HAL_TIM_PWM_Start+0x184>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00e      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <HAL_TIM_PWM_Start+0x178>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d009      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <HAL_TIM_PWM_Start+0x188>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d004      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x136>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a16      	ldr	r2, [pc, #88]	; (8007d8c <HAL_TIM_PWM_Start+0x18c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d111      	bne.n	8007d5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b06      	cmp	r3, #6
 8007d46:	d010      	beq.n	8007d6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	e007      	b.n	8007d6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0201 	orr.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40010400 	.word	0x40010400
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	40000800 	.word	0x40000800
 8007d84:	40000c00 	.word	0x40000c00
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40001800 	.word	0x40001800

08007d90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 f95a 	bl	800905c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2e      	ldr	r2, [pc, #184]	; (8007e68 <HAL_TIM_PWM_Stop+0xd8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_TIM_PWM_Stop+0x2c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2d      	ldr	r2, [pc, #180]	; (8007e6c <HAL_TIM_PWM_Stop+0xdc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d101      	bne.n	8007dc0 <HAL_TIM_PWM_Stop+0x30>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e000      	b.n	8007dc2 <HAL_TIM_PWM_Stop+0x32>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d017      	beq.n	8007df6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6a1a      	ldr	r2, [r3, #32]
 8007dcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10f      	bne.n	8007df6 <HAL_TIM_PWM_Stop+0x66>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6a1a      	ldr	r2, [r3, #32]
 8007ddc:	f240 4344 	movw	r3, #1092	; 0x444
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d107      	bne.n	8007df6 <HAL_TIM_PWM_Stop+0x66>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007df4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10f      	bne.n	8007e26 <HAL_TIM_PWM_Stop+0x96>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6a1a      	ldr	r2, [r3, #32]
 8007e0c:	f240 4344 	movw	r3, #1092	; 0x444
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <HAL_TIM_PWM_Stop+0x96>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0201 	bic.w	r2, r2, #1
 8007e24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Stop+0xa6>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e34:	e013      	b.n	8007e5e <HAL_TIM_PWM_Stop+0xce>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Stop+0xb6>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e44:	e00b      	b.n	8007e5e <HAL_TIM_PWM_Stop+0xce>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Stop+0xc6>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e54:	e003      	b.n	8007e5e <HAL_TIM_PWM_Stop+0xce>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40010400 	.word	0x40010400

08007e70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e041      	b.n	8007f06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f839 	bl	8007f0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f000 fcc0 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <HAL_TIM_IC_Start_IT+0x1e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	e013      	b.n	8007f6a <HAL_TIM_IC_Start_IT+0x46>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d104      	bne.n	8007f52 <HAL_TIM_IC_Start_IT+0x2e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	e00b      	b.n	8007f6a <HAL_TIM_IC_Start_IT+0x46>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d104      	bne.n	8007f62 <HAL_TIM_IC_Start_IT+0x3e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	e003      	b.n	8007f6a <HAL_TIM_IC_Start_IT+0x46>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <HAL_TIM_IC_Start_IT+0x58>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	e013      	b.n	8007fa4 <HAL_TIM_IC_Start_IT+0x80>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d104      	bne.n	8007f8c <HAL_TIM_IC_Start_IT+0x68>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	e00b      	b.n	8007fa4 <HAL_TIM_IC_Start_IT+0x80>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d104      	bne.n	8007f9c <HAL_TIM_IC_Start_IT+0x78>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	e003      	b.n	8007fa4 <HAL_TIM_IC_Start_IT+0x80>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d102      	bne.n	8007fb2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fac:	7b7b      	ldrb	r3, [r7, #13]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d001      	beq.n	8007fb6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0cc      	b.n	8008150 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <HAL_TIM_IC_Start_IT+0xa2>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc4:	e013      	b.n	8007fee <HAL_TIM_IC_Start_IT+0xca>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d104      	bne.n	8007fd6 <HAL_TIM_IC_Start_IT+0xb2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd4:	e00b      	b.n	8007fee <HAL_TIM_IC_Start_IT+0xca>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d104      	bne.n	8007fe6 <HAL_TIM_IC_Start_IT+0xc2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe4:	e003      	b.n	8007fee <HAL_TIM_IC_Start_IT+0xca>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_IC_Start_IT+0xda>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ffc:	e013      	b.n	8008026 <HAL_TIM_IC_Start_IT+0x102>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b04      	cmp	r3, #4
 8008002:	d104      	bne.n	800800e <HAL_TIM_IC_Start_IT+0xea>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800800c:	e00b      	b.n	8008026 <HAL_TIM_IC_Start_IT+0x102>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d104      	bne.n	800801e <HAL_TIM_IC_Start_IT+0xfa>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	e003      	b.n	8008026 <HAL_TIM_IC_Start_IT+0x102>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b0c      	cmp	r3, #12
 800802a:	d841      	bhi.n	80080b0 <HAL_TIM_IC_Start_IT+0x18c>
 800802c:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <HAL_TIM_IC_Start_IT+0x110>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	08008069 	.word	0x08008069
 8008038:	080080b1 	.word	0x080080b1
 800803c:	080080b1 	.word	0x080080b1
 8008040:	080080b1 	.word	0x080080b1
 8008044:	0800807b 	.word	0x0800807b
 8008048:	080080b1 	.word	0x080080b1
 800804c:	080080b1 	.word	0x080080b1
 8008050:	080080b1 	.word	0x080080b1
 8008054:	0800808d 	.word	0x0800808d
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080b1 	.word	0x080080b1
 8008060:	080080b1 	.word	0x080080b1
 8008064:	0800809f 	.word	0x0800809f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0202 	orr.w	r2, r2, #2
 8008076:	60da      	str	r2, [r3, #12]
      break;
 8008078:	e01d      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f042 0204 	orr.w	r2, r2, #4
 8008088:	60da      	str	r2, [r3, #12]
      break;
 800808a:	e014      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0208 	orr.w	r2, r2, #8
 800809a:	60da      	str	r2, [r3, #12]
      break;
 800809c:	e00b      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0210 	orr.w	r2, r2, #16
 80080ac:	60da      	str	r2, [r3, #12]
      break;
 80080ae:	e002      	b.n	80080b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
      break;
 80080b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d148      	bne.n	800814e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 ffc9 	bl	800905c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a22      	ldr	r2, [pc, #136]	; (8008158 <HAL_TIM_IC_Start_IT+0x234>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d022      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080dc:	d01d      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1e      	ldr	r2, [pc, #120]	; (800815c <HAL_TIM_IC_Start_IT+0x238>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d018      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <HAL_TIM_IC_Start_IT+0x23c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d013      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_TIM_IC_Start_IT+0x240>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00e      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a19      	ldr	r2, [pc, #100]	; (8008168 <HAL_TIM_IC_Start_IT+0x244>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d009      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a18      	ldr	r2, [pc, #96]	; (800816c <HAL_TIM_IC_Start_IT+0x248>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d004      	beq.n	800811a <HAL_TIM_IC_Start_IT+0x1f6>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a16      	ldr	r2, [pc, #88]	; (8008170 <HAL_TIM_IC_Start_IT+0x24c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d111      	bne.n	800813e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 0307 	and.w	r3, r3, #7
 8008124:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b06      	cmp	r3, #6
 800812a:	d010      	beq.n	800814e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813c:	e007      	b.n	800814e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0201 	orr.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40010400 	.word	0x40010400
 800816c:	40014000 	.word	0x40014000
 8008170:	40001800 	.word	0x40001800

08008174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b02      	cmp	r3, #2
 8008188:	d122      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b02      	cmp	r3, #2
 8008196:	d11b      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0202 	mvn.w	r2, #2
 80081a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fb1d 	bl	80087f6 <HAL_TIM_IC_CaptureCallback>
 80081bc:	e005      	b.n	80081ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb0f 	bl	80087e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fb20 	bl	800880a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d122      	bne.n	8008224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d11b      	bne.n	8008224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0204 	mvn.w	r2, #4
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 faf3 	bl	80087f6 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fae5 	bl	80087e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 faf6 	bl	800880a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b08      	cmp	r3, #8
 8008230:	d122      	bne.n	8008278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b08      	cmp	r3, #8
 800823e:	d11b      	bne.n	8008278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0208 	mvn.w	r2, #8
 8008248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2204      	movs	r2, #4
 800824e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fac9 	bl	80087f6 <HAL_TIM_IC_CaptureCallback>
 8008264:	e005      	b.n	8008272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fabb 	bl	80087e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 facc 	bl	800880a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0310 	and.w	r3, r3, #16
 8008282:	2b10      	cmp	r3, #16
 8008284:	d122      	bne.n	80082cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b10      	cmp	r3, #16
 8008292:	d11b      	bne.n	80082cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0210 	mvn.w	r2, #16
 800829c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2208      	movs	r2, #8
 80082a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa9f 	bl	80087f6 <HAL_TIM_IC_CaptureCallback>
 80082b8:	e005      	b.n	80082c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa91 	bl	80087e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 faa2 	bl	800880a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d10e      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d107      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0201 	mvn.w	r2, #1
 80082f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa6b 	bl	80087ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008302:	2b80      	cmp	r3, #128	; 0x80
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 ff9a 	bl	8009258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832e:	2b40      	cmp	r3, #64	; 0x40
 8008330:	d10e      	bne.n	8008350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b40      	cmp	r3, #64	; 0x40
 800833e:	d107      	bne.n	8008350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa67 	bl	800881e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b20      	cmp	r3, #32
 800835c:	d10e      	bne.n	800837c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b20      	cmp	r3, #32
 800836a:	d107      	bne.n	800837c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0220 	mvn.w	r2, #32
 8008374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 ff64 	bl	8009244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800839e:	2302      	movs	r3, #2
 80083a0:	e088      	b.n	80084b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11b      	bne.n	80083e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6819      	ldr	r1, [r3, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f000 fc88 	bl	8008cd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 020c 	bic.w	r2, r2, #12
 80083d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6999      	ldr	r1, [r3, #24]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	619a      	str	r2, [r3, #24]
 80083e6:	e060      	b.n	80084aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d11c      	bne.n	8008428 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	6819      	ldr	r1, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f000 fd0c 	bl	8008e1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699a      	ldr	r2, [r3, #24]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008410:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6999      	ldr	r1, [r3, #24]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	021a      	lsls	r2, r3, #8
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	619a      	str	r2, [r3, #24]
 8008426:	e040      	b.n	80084aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b08      	cmp	r3, #8
 800842c:	d11b      	bne.n	8008466 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6819      	ldr	r1, [r3, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f000 fd59 	bl	8008ef4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 020c 	bic.w	r2, r2, #12
 8008450:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69d9      	ldr	r1, [r3, #28]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	61da      	str	r2, [r3, #28]
 8008464:	e021      	b.n	80084aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b0c      	cmp	r3, #12
 800846a:	d11c      	bne.n	80084a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f000 fd76 	bl	8008f6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	69da      	ldr	r2, [r3, #28]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800848e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69d9      	ldr	r1, [r3, #28]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	021a      	lsls	r2, r3, #8
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	61da      	str	r2, [r3, #28]
 80084a4:	e001      	b.n	80084aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0ae      	b.n	8008638 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b0c      	cmp	r3, #12
 80084e6:	f200 809f 	bhi.w	8008628 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008525 	.word	0x08008525
 80084f4:	08008629 	.word	0x08008629
 80084f8:	08008629 	.word	0x08008629
 80084fc:	08008629 	.word	0x08008629
 8008500:	08008565 	.word	0x08008565
 8008504:	08008629 	.word	0x08008629
 8008508:	08008629 	.word	0x08008629
 800850c:	08008629 	.word	0x08008629
 8008510:	080085a7 	.word	0x080085a7
 8008514:	08008629 	.word	0x08008629
 8008518:	08008629 	.word	0x08008629
 800851c:	08008629 	.word	0x08008629
 8008520:	080085e7 	.word	0x080085e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fa22 	bl	8008974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0208 	orr.w	r2, r2, #8
 800853e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0204 	bic.w	r2, r2, #4
 800854e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6999      	ldr	r1, [r3, #24]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	619a      	str	r2, [r3, #24]
      break;
 8008562:	e064      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fa72 	bl	8008a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6999      	ldr	r1, [r3, #24]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	619a      	str	r2, [r3, #24]
      break;
 80085a4:	e043      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fac7 	bl	8008b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0208 	orr.w	r2, r2, #8
 80085c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69da      	ldr	r2, [r3, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0204 	bic.w	r2, r2, #4
 80085d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69d9      	ldr	r1, [r3, #28]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
      break;
 80085e4:	e023      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fb1b 	bl	8008c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69d9      	ldr	r1, [r3, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	021a      	lsls	r2, r3, #8
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	61da      	str	r2, [r3, #28]
      break;
 8008626:	e002      	b.n	800862e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
      break;
 800862c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_TIM_ConfigClockSource+0x1c>
 8008658:	2302      	movs	r3, #2
 800865a:	e0b4      	b.n	80087c6 <HAL_TIM_ConfigClockSource+0x186>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800867a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008694:	d03e      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0xd4>
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	f200 8087 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a2:	f000 8086 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x172>
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086aa:	d87f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b70      	cmp	r3, #112	; 0x70
 80086ae:	d01a      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0xa6>
 80086b0:	2b70      	cmp	r3, #112	; 0x70
 80086b2:	d87b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b60      	cmp	r3, #96	; 0x60
 80086b6:	d050      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x11a>
 80086b8:	2b60      	cmp	r3, #96	; 0x60
 80086ba:	d877      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b50      	cmp	r3, #80	; 0x50
 80086be:	d03c      	beq.n	800873a <HAL_TIM_ConfigClockSource+0xfa>
 80086c0:	2b50      	cmp	r3, #80	; 0x50
 80086c2:	d873      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d058      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x13a>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d86f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b30      	cmp	r3, #48	; 0x30
 80086ce:	d064      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086d0:	2b30      	cmp	r3, #48	; 0x30
 80086d2:	d86b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d060      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d867      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d05c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086e0:	2b10      	cmp	r3, #16
 80086e2:	d05a      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x15a>
 80086e4:	e062      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6899      	ldr	r1, [r3, #8]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f000 fc91 	bl	800901c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	609a      	str	r2, [r3, #8]
      break;
 8008712:	e04f      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f000 fc7a 	bl	800901c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008736:	609a      	str	r2, [r3, #8]
      break;
 8008738:	e03c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6859      	ldr	r1, [r3, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	461a      	mov	r2, r3
 8008748:	f000 fb38 	bl	8008dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2150      	movs	r1, #80	; 0x50
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fc47 	bl	8008fe6 <TIM_ITRx_SetConfig>
      break;
 8008758:	e02c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fb94 	bl	8008e94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2160      	movs	r1, #96	; 0x60
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fc37 	bl	8008fe6 <TIM_ITRx_SetConfig>
      break;
 8008778:	e01c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fb18 	bl	8008dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2140      	movs	r1, #64	; 0x40
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fc27 	bl	8008fe6 <TIM_ITRx_SetConfig>
      break;
 8008798:	e00c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f000 fc1e 	bl	8008fe6 <TIM_ITRx_SetConfig>
      break;
 80087aa:	e003      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
      break;
 80087b0:	e000      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087ea:	bf00      	nop
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
	...

08008834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a40      	ldr	r2, [pc, #256]	; (8008948 <TIM_Base_SetConfig+0x114>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d013      	beq.n	8008874 <TIM_Base_SetConfig+0x40>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008852:	d00f      	beq.n	8008874 <TIM_Base_SetConfig+0x40>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a3d      	ldr	r2, [pc, #244]	; (800894c <TIM_Base_SetConfig+0x118>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00b      	beq.n	8008874 <TIM_Base_SetConfig+0x40>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a3c      	ldr	r2, [pc, #240]	; (8008950 <TIM_Base_SetConfig+0x11c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d007      	beq.n	8008874 <TIM_Base_SetConfig+0x40>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a3b      	ldr	r2, [pc, #236]	; (8008954 <TIM_Base_SetConfig+0x120>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_Base_SetConfig+0x40>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a3a      	ldr	r2, [pc, #232]	; (8008958 <TIM_Base_SetConfig+0x124>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d108      	bne.n	8008886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a2f      	ldr	r2, [pc, #188]	; (8008948 <TIM_Base_SetConfig+0x114>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d02b      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008894:	d027      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a2c      	ldr	r2, [pc, #176]	; (800894c <TIM_Base_SetConfig+0x118>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d023      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a2b      	ldr	r2, [pc, #172]	; (8008950 <TIM_Base_SetConfig+0x11c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d01f      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a2a      	ldr	r2, [pc, #168]	; (8008954 <TIM_Base_SetConfig+0x120>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d01b      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a29      	ldr	r2, [pc, #164]	; (8008958 <TIM_Base_SetConfig+0x124>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d017      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a28      	ldr	r2, [pc, #160]	; (800895c <TIM_Base_SetConfig+0x128>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d013      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a27      	ldr	r2, [pc, #156]	; (8008960 <TIM_Base_SetConfig+0x12c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00f      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a26      	ldr	r2, [pc, #152]	; (8008964 <TIM_Base_SetConfig+0x130>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00b      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a25      	ldr	r2, [pc, #148]	; (8008968 <TIM_Base_SetConfig+0x134>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d007      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a24      	ldr	r2, [pc, #144]	; (800896c <TIM_Base_SetConfig+0x138>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d003      	beq.n	80088e6 <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a23      	ldr	r2, [pc, #140]	; (8008970 <TIM_Base_SetConfig+0x13c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d108      	bne.n	80088f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	689a      	ldr	r2, [r3, #8]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <TIM_Base_SetConfig+0x114>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_Base_SetConfig+0xf8>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a0c      	ldr	r2, [pc, #48]	; (8008958 <TIM_Base_SetConfig+0x124>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d103      	bne.n	8008934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	615a      	str	r2, [r3, #20]
}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40010000 	.word	0x40010000
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40010400 	.word	0x40010400
 800895c:	40014000 	.word	0x40014000
 8008960:	40014400 	.word	0x40014400
 8008964:	40014800 	.word	0x40014800
 8008968:	40001800 	.word	0x40001800
 800896c:	40001c00 	.word	0x40001c00
 8008970:	40002000 	.word	0x40002000

08008974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f023 0201 	bic.w	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0303 	bic.w	r3, r3, #3
 80089aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f023 0302 	bic.w	r3, r3, #2
 80089bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a20      	ldr	r2, [pc, #128]	; (8008a4c <TIM_OC1_SetConfig+0xd8>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC1_SetConfig+0x64>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a1f      	ldr	r2, [pc, #124]	; (8008a50 <TIM_OC1_SetConfig+0xdc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d10c      	bne.n	80089f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f023 0308 	bic.w	r3, r3, #8
 80089de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f023 0304 	bic.w	r3, r3, #4
 80089f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <TIM_OC1_SetConfig+0xd8>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d003      	beq.n	8008a02 <TIM_OC1_SetConfig+0x8e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a14      	ldr	r2, [pc, #80]	; (8008a50 <TIM_OC1_SetConfig+0xdc>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d111      	bne.n	8008a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	621a      	str	r2, [r3, #32]
}
 8008a40:	bf00      	nop
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	40010000 	.word	0x40010000
 8008a50:	40010400 	.word	0x40010400

08008a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	f023 0210 	bic.w	r2, r3, #16
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	021b      	lsls	r3, r3, #8
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0320 	bic.w	r3, r3, #32
 8008a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a22      	ldr	r2, [pc, #136]	; (8008b38 <TIM_OC2_SetConfig+0xe4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_OC2_SetConfig+0x68>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a21      	ldr	r2, [pc, #132]	; (8008b3c <TIM_OC2_SetConfig+0xe8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d10d      	bne.n	8008ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a17      	ldr	r2, [pc, #92]	; (8008b38 <TIM_OC2_SetConfig+0xe4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <TIM_OC2_SetConfig+0x94>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a16      	ldr	r2, [pc, #88]	; (8008b3c <TIM_OC2_SetConfig+0xe8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d113      	bne.n	8008b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	621a      	str	r2, [r3, #32]
}
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400

08008b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a21      	ldr	r2, [pc, #132]	; (8008c20 <TIM_OC3_SetConfig+0xe0>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d003      	beq.n	8008ba6 <TIM_OC3_SetConfig+0x66>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a20      	ldr	r2, [pc, #128]	; (8008c24 <TIM_OC3_SetConfig+0xe4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d10d      	bne.n	8008bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <TIM_OC3_SetConfig+0xe0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d003      	beq.n	8008bd2 <TIM_OC3_SetConfig+0x92>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a15      	ldr	r2, [pc, #84]	; (8008c24 <TIM_OC3_SetConfig+0xe4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d113      	bne.n	8008bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	621a      	str	r2, [r3, #32]
}
 8008c14:	bf00      	nop
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40010400 	.word	0x40010400

08008c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	031b      	lsls	r3, r3, #12
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <TIM_OC4_SetConfig+0xa4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d003      	beq.n	8008c90 <TIM_OC4_SetConfig+0x68>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a11      	ldr	r2, [pc, #68]	; (8008cd0 <TIM_OC4_SetConfig+0xa8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d109      	bne.n	8008ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	019b      	lsls	r3, r3, #6
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40010400 	.word	0x40010400

08008cd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f023 0201 	bic.w	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a28      	ldr	r2, [pc, #160]	; (8008da0 <TIM_TI1_SetConfig+0xcc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01b      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d08:	d017      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a25      	ldr	r2, [pc, #148]	; (8008da4 <TIM_TI1_SetConfig+0xd0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4a24      	ldr	r2, [pc, #144]	; (8008da8 <TIM_TI1_SetConfig+0xd4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00f      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4a23      	ldr	r2, [pc, #140]	; (8008dac <TIM_TI1_SetConfig+0xd8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00b      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4a22      	ldr	r2, [pc, #136]	; (8008db0 <TIM_TI1_SetConfig+0xdc>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d007      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4a21      	ldr	r2, [pc, #132]	; (8008db4 <TIM_TI1_SetConfig+0xe0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d003      	beq.n	8008d3a <TIM_TI1_SetConfig+0x66>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4a20      	ldr	r2, [pc, #128]	; (8008db8 <TIM_TI1_SetConfig+0xe4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d101      	bne.n	8008d3e <TIM_TI1_SetConfig+0x6a>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <TIM_TI1_SetConfig+0x6c>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d008      	beq.n	8008d56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0303 	bic.w	r3, r3, #3
 8008d4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e003      	b.n	8008d5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f043 0301 	orr.w	r3, r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f023 030a 	bic.w	r3, r3, #10
 8008d78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f003 030a 	and.w	r3, r3, #10
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	621a      	str	r2, [r3, #32]
}
 8008d92:	bf00      	nop
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	40010000 	.word	0x40010000
 8008da4:	40000400 	.word	0x40000400
 8008da8:	40000800 	.word	0x40000800
 8008dac:	40000c00 	.word	0x40000c00
 8008db0:	40010400 	.word	0x40010400
 8008db4:	40014000 	.word	0x40014000
 8008db8:	40001800 	.word	0x40001800

08008dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f023 0201 	bic.w	r2, r3, #1
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f023 030a 	bic.w	r3, r3, #10
 8008df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	621a      	str	r2, [r3, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b087      	sub	sp, #28
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
 8008e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	f023 0210 	bic.w	r2, r3, #16
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	031b      	lsls	r3, r3, #12
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	f023 0210 	bic.w	r2, r3, #16
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ebe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	031b      	lsls	r3, r3, #12
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	621a      	str	r2, [r3, #32]
}
 8008ee8:	bf00      	nop
 8008eea:	371c      	adds	r7, #28
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f023 0303 	bic.w	r3, r3, #3
 8008f20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008f44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	621a      	str	r2, [r3, #32]
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008faa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	031b      	lsls	r3, r3, #12
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	031b      	lsls	r3, r3, #12
 8008fc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4313      	orrs	r3, r2
 8009004:	f043 0307 	orr.w	r3, r3, #7
 8009008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	609a      	str	r2, [r3, #8]
}
 8009010:	bf00      	nop
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	021a      	lsls	r2, r3, #8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	431a      	orrs	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	4313      	orrs	r3, r2
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	4313      	orrs	r3, r2
 8009048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	609a      	str	r2, [r3, #8]
}
 8009050:	bf00      	nop
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	2201      	movs	r2, #1
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a1a      	ldr	r2, [r3, #32]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	43db      	mvns	r3, r3
 800907e:	401a      	ands	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	fa01 f303 	lsl.w	r3, r1, r3
 8009094:	431a      	orrs	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	621a      	str	r2, [r3, #32]
}
 800909a:	bf00      	nop
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090bc:	2302      	movs	r3, #2
 80090be:	e05a      	b.n	8009176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a21      	ldr	r2, [pc, #132]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d022      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800910c:	d01d      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1d      	ldr	r2, [pc, #116]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d018      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1b      	ldr	r2, [pc, #108]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a1a      	ldr	r2, [pc, #104]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00e      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a18      	ldr	r2, [pc, #96]	; (8009194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a17      	ldr	r2, [pc, #92]	; (8009198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a15      	ldr	r2, [pc, #84]	; (800919c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d10c      	bne.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	4313      	orrs	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	40010000 	.word	0x40010000
 8009188:	40000400 	.word	0x40000400
 800918c:	40000800 	.word	0x40000800
 8009190:	40000c00 	.word	0x40000c00
 8009194:	40010400 	.word	0x40010400
 8009198:	40014000 	.word	0x40014000
 800919c:	40001800 	.word	0x40001800

080091a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e03d      	b.n	8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e03f      	b.n	80092fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fb f97e 	bl	8004594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2224      	movs	r2, #36	; 0x24
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 ff65 	bl	800a180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695a      	ldr	r2, [r3, #20]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2220      	movs	r2, #32
 80092f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b08a      	sub	sp, #40	; 0x28
 800930a:	af02      	add	r7, sp, #8
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	60b9      	str	r1, [r7, #8]
 8009310:	603b      	str	r3, [r7, #0]
 8009312:	4613      	mov	r3, r2
 8009314:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b20      	cmp	r3, #32
 8009324:	d17c      	bne.n	8009420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <HAL_UART_Transmit+0x2c>
 800932c:	88fb      	ldrh	r3, [r7, #6]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e075      	b.n	8009422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_UART_Transmit+0x3e>
 8009340:	2302      	movs	r3, #2
 8009342:	e06e      	b.n	8009422 <HAL_UART_Transmit+0x11c>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2221      	movs	r2, #33	; 0x21
 8009356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800935a:	f7fb fb03 	bl	8004964 <HAL_GetTick>
 800935e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	88fa      	ldrh	r2, [r7, #6]
 8009364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	88fa      	ldrh	r2, [r7, #6]
 800936a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009374:	d108      	bne.n	8009388 <HAL_UART_Transmit+0x82>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d104      	bne.n	8009388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	e003      	b.n	8009390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800938c:	2300      	movs	r3, #0
 800938e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009398:	e02a      	b.n	80093f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2200      	movs	r2, #0
 80093a2:	2180      	movs	r1, #128	; 0x80
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 fc21 	bl	8009bec <UART_WaitOnFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e036      	b.n	8009422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	3302      	adds	r3, #2
 80093ce:	61bb      	str	r3, [r7, #24]
 80093d0:	e007      	b.n	80093e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	781a      	ldrb	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1cf      	bne.n	800939a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2200      	movs	r2, #0
 8009402:	2140      	movs	r1, #64	; 0x40
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fbf1 	bl	8009bec <UART_WaitOnFlagUntilTimeout>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e006      	b.n	8009422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	e000      	b.n	8009422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009420:	2302      	movs	r3, #2
  }
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	4613      	mov	r3, r2
 8009436:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b20      	cmp	r3, #32
 8009442:	d11d      	bne.n	8009480 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <HAL_UART_Receive_DMA+0x26>
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e016      	b.n	8009482 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800945a:	2b01      	cmp	r3, #1
 800945c:	d101      	bne.n	8009462 <HAL_UART_Receive_DMA+0x38>
 800945e:	2302      	movs	r3, #2
 8009460:	e00f      	b.n	8009482 <HAL_UART_Receive_DMA+0x58>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	461a      	mov	r2, r3
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fc26 	bl	8009cc8 <UART_Start_Receive_DMA>
 800947c:	4603      	mov	r3, r0
 800947e:	e000      	b.n	8009482 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009480:	2302      	movs	r3, #2
  }
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b0ba      	sub	sp, #232	; 0xe8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10f      	bne.n	80094f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d009      	beq.n	80094f2 <HAL_UART_IRQHandler+0x66>
 80094de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fd8d 	bl	800a00a <UART_Receive_IT>
      return;
 80094f0:	e256      	b.n	80099a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80094f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80de 	beq.w	80096b8 <HAL_UART_IRQHandler+0x22c>
 80094fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d106      	bne.n	8009516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800950c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 80d1 	beq.w	80096b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <HAL_UART_IRQHandler+0xae>
 8009522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952a:	2b00      	cmp	r3, #0
 800952c:	d005      	beq.n	800953a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f043 0201 	orr.w	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800953a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953e:	f003 0304 	and.w	r3, r3, #4
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00b      	beq.n	800955e <HAL_UART_IRQHandler+0xd2>
 8009546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d005      	beq.n	800955e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	f043 0202 	orr.w	r2, r3, #2
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800955e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00b      	beq.n	8009582 <HAL_UART_IRQHandler+0xf6>
 800956a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	f043 0204 	orr.w	r2, r3, #4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d011      	beq.n	80095b2 <HAL_UART_IRQHandler+0x126>
 800958e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800959a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f043 0208 	orr.w	r2, r3, #8
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 81ed 	beq.w	8009996 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d008      	beq.n	80095da <HAL_UART_IRQHandler+0x14e>
 80095c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fd18 	bl	800a00a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e4:	2b40      	cmp	r3, #64	; 0x40
 80095e6:	bf0c      	ite	eq
 80095e8:	2301      	moveq	r3, #1
 80095ea:	2300      	movne	r3, #0
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d103      	bne.n	8009606 <HAL_UART_IRQHandler+0x17a>
 80095fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d04f      	beq.n	80096a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fc20 	bl	8009e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b40      	cmp	r3, #64	; 0x40
 8009618:	d141      	bne.n	800969e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3314      	adds	r3, #20
 8009620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3314      	adds	r3, #20
 8009642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800964a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800965e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1d9      	bne.n	800961a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966a:	2b00      	cmp	r3, #0
 800966c:	d013      	beq.n	8009696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	4a7d      	ldr	r2, [pc, #500]	; (8009868 <HAL_UART_IRQHandler+0x3dc>)
 8009674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	4618      	mov	r0, r3
 800967c:	f7fc faa8 	bl	8005bd0 <HAL_DMA_Abort_IT>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d016      	beq.n	80096b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009694:	e00e      	b.n	80096b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f99a 	bl	80099d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800969c:	e00a      	b.n	80096b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f996 	bl	80099d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a4:	e006      	b.n	80096b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f992 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80096b2:	e170      	b.n	8009996 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b4:	bf00      	nop
    return;
 80096b6:	e16e      	b.n	8009996 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096bc:	2b01      	cmp	r3, #1
 80096be:	f040 814a 	bne.w	8009956 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c6:	f003 0310 	and.w	r3, r3, #16
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 8143 	beq.w	8009956 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 813c 	beq.w	8009956 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096de:	2300      	movs	r3, #0
 80096e0:	60bb      	str	r3, [r7, #8]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60bb      	str	r3, [r7, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	60bb      	str	r3, [r7, #8]
 80096f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fe:	2b40      	cmp	r3, #64	; 0x40
 8009700:	f040 80b4 	bne.w	800986c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8140 	beq.w	800999a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800971e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009722:	429a      	cmp	r2, r3
 8009724:	f080 8139 	bcs.w	800999a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800972e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973a:	f000 8088 	beq.w	800984e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800975c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	330c      	adds	r3, #12
 8009766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800976a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800976e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1d9      	bne.n	800973e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3314      	adds	r3, #20
 8009790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800979a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3314      	adds	r3, #20
 80097aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e1      	bne.n	800978a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3314      	adds	r3, #20
 80097cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3314      	adds	r3, #20
 80097e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e3      	bne.n	80097c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2220      	movs	r2, #32
 8009802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800981c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800981e:	f023 0310 	bic.w	r3, r3, #16
 8009822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009830:	65ba      	str	r2, [r7, #88]	; 0x58
 8009832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800983e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e3      	bne.n	800980c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	4618      	mov	r0, r3
 800984a:	f7fc f951 	bl	8005af0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009856:	b29b      	uxth	r3, r3
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	b29b      	uxth	r3, r3
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8c0 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009864:	e099      	b.n	800999a <HAL_UART_IRQHandler+0x50e>
 8009866:	bf00      	nop
 8009868:	08009f13 	.word	0x08009f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009874:	b29b      	uxth	r3, r3
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 808b 	beq.w	800999e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 8086 	beq.w	800999e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	330c      	adds	r3, #12
 8009898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	330c      	adds	r3, #12
 80098b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098b6:	647a      	str	r2, [r7, #68]	; 0x44
 80098b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e3      	bne.n	8009892 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3314      	adds	r3, #20
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	623b      	str	r3, [r7, #32]
   return(result);
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	f023 0301 	bic.w	r3, r3, #1
 80098e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3314      	adds	r3, #20
 80098ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098ee:	633a      	str	r2, [r7, #48]	; 0x30
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e3      	bne.n	80098ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2220      	movs	r2, #32
 8009906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	330c      	adds	r3, #12
 8009916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0310 	bic.w	r3, r3, #16
 8009926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	330c      	adds	r3, #12
 8009930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009934:	61fa      	str	r2, [r7, #28]
 8009936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	69b9      	ldr	r1, [r7, #24]
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	617b      	str	r3, [r7, #20]
   return(result);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e3      	bne.n	8009910 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f848 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009954:	e023      	b.n	800999e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <HAL_UART_IRQHandler+0x4ea>
 8009962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fae3 	bl	8009f3a <UART_Transmit_IT>
    return;
 8009974:	e014      	b.n	80099a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <HAL_UART_IRQHandler+0x514>
 8009982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	d008      	beq.n	80099a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fb23 	bl	8009fda <UART_EndTransmit_IT>
    return;
 8009994:	e004      	b.n	80099a0 <HAL_UART_IRQHandler+0x514>
    return;
 8009996:	bf00      	nop
 8009998:	e002      	b.n	80099a0 <HAL_UART_IRQHandler+0x514>
      return;
 800999a:	bf00      	nop
 800999c:	e000      	b.n	80099a0 <HAL_UART_IRQHandler+0x514>
      return;
 800999e:	bf00      	nop
  }
}
 80099a0:	37e8      	adds	r7, #232	; 0xe8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop

080099a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b09c      	sub	sp, #112	; 0x70
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d172      	bne.n	8009afe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	330c      	adds	r3, #12
 8009a24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009a40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e5      	bne.n	8009a1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3314      	adds	r3, #20
 8009a58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a64:	f023 0301 	bic.w	r3, r3, #1
 8009a68:	667b      	str	r3, [r7, #100]	; 0x64
 8009a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3314      	adds	r3, #20
 8009a70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a72:	647a      	str	r2, [r7, #68]	; 0x44
 8009a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e5      	bne.n	8009a52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3314      	adds	r3, #20
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	e853 3f00 	ldrex	r3, [r3]
 8009a94:	623b      	str	r3, [r7, #32]
   return(result);
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8009a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3314      	adds	r3, #20
 8009aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e5      	bne.n	8009a86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d119      	bne.n	8009afe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	330c      	adds	r3, #12
 8009ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f023 0310 	bic.w	r3, r3, #16
 8009ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009aea:	61fa      	str	r2, [r7, #28]
 8009aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	69b9      	ldr	r1, [r7, #24]
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	617b      	str	r3, [r7, #20]
   return(result);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e5      	bne.n	8009aca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d106      	bne.n	8009b14 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b0e:	f7ff ff69 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b12:	e002      	b.n	8009b1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009b14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b16:	f7f9 fba1 	bl	800325c <HAL_UART_RxCpltCallback>
}
 8009b1a:	bf00      	nop
 8009b1c:	3770      	adds	r7, #112	; 0x70
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d108      	bne.n	8009b4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b3c:	085b      	lsrs	r3, r3, #1
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4619      	mov	r1, r3
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff ff4e 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b48:	e002      	b.n	8009b50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff ff36 	bl	80099bc <HAL_UART_RxHalfCpltCallback>
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b74:	2b80      	cmp	r3, #128	; 0x80
 8009b76:	bf0c      	ite	eq
 8009b78:	2301      	moveq	r3, #1
 8009b7a:	2300      	movne	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b21      	cmp	r3, #33	; 0x21
 8009b8a:	d108      	bne.n	8009b9e <UART_DMAError+0x46>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2200      	movs	r2, #0
 8009b96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009b98:	68b8      	ldr	r0, [r7, #8]
 8009b9a:	f000 f92f 	bl	8009dfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	bf0c      	ite	eq
 8009bac:	2301      	moveq	r3, #1
 8009bae:	2300      	movne	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b22      	cmp	r3, #34	; 0x22
 8009bbe:	d108      	bne.n	8009bd2 <UART_DMAError+0x7a>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009bcc:	68b8      	ldr	r0, [r7, #8]
 8009bce:	f000 f93d 	bl	8009e4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd6:	f043 0210 	orr.w	r2, r3, #16
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bde:	68b8      	ldr	r0, [r7, #8]
 8009be0:	f7ff fef6 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b090      	sub	sp, #64	; 0x40
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bfc:	e050      	b.n	8009ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c04:	d04c      	beq.n	8009ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d007      	beq.n	8009c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c0c:	f7fa feaa 	bl	8004964 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d241      	bcs.n	8009ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	e853 3f00 	ldrex	r3, [r3]
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c3c:	637a      	str	r2, [r7, #52]	; 0x34
 8009c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c44:	e841 2300 	strex	r3, r2, [r1]
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1e5      	bne.n	8009c1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3314      	adds	r3, #20
 8009c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	e853 3f00 	ldrex	r3, [r3]
 8009c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f023 0301 	bic.w	r3, r3, #1
 8009c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3314      	adds	r3, #20
 8009c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c70:	623a      	str	r2, [r7, #32]
 8009c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	69f9      	ldr	r1, [r7, #28]
 8009c76:	6a3a      	ldr	r2, [r7, #32]
 8009c78:	e841 2300 	strex	r3, r2, [r1]
 8009c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e5      	bne.n	8009c50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e00f      	b.n	8009cc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	bf0c      	ite	eq
 8009cb0:	2301      	moveq	r3, #1
 8009cb2:	2300      	movne	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d09f      	beq.n	8009bfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3740      	adds	r7, #64	; 0x40
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b098      	sub	sp, #96	; 0x60
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	88fa      	ldrh	r2, [r7, #6]
 8009ce0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2222      	movs	r2, #34	; 0x22
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	4a3e      	ldr	r2, [pc, #248]	; (8009df0 <UART_Start_Receive_DMA+0x128>)
 8009cf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	4a3d      	ldr	r2, [pc, #244]	; (8009df4 <UART_Start_Receive_DMA+0x12c>)
 8009cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	4a3c      	ldr	r2, [pc, #240]	; (8009df8 <UART_Start_Receive_DMA+0x130>)
 8009d06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	f7fb fe8a 	bl	8005a40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	330c      	adds	r3, #12
 8009d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	330c      	adds	r3, #12
 8009d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e5      	bne.n	8009d4a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3314      	adds	r3, #20
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	e853 3f00 	ldrex	r3, [r3]
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	f043 0301 	orr.w	r3, r3, #1
 8009d94:	657b      	str	r3, [r7, #84]	; 0x54
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3314      	adds	r3, #20
 8009d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d9e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e5      	bne.n	8009d7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3314      	adds	r3, #20
 8009db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	e853 3f00 	ldrex	r3, [r3]
 8009dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3314      	adds	r3, #20
 8009dd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dd2:	627a      	str	r2, [r7, #36]	; 0x24
 8009dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd6:	6a39      	ldr	r1, [r7, #32]
 8009dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dda:	e841 2300 	strex	r3, r2, [r1]
 8009dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e5      	bne.n	8009db2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3760      	adds	r7, #96	; 0x60
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	080099fd 	.word	0x080099fd
 8009df4:	08009b23 	.word	0x08009b23
 8009df8:	08009b59 	.word	0x08009b59

08009dfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b089      	sub	sp, #36	; 0x24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	330c      	adds	r3, #12
 8009e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e1a:	61fb      	str	r3, [r7, #28]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	330c      	adds	r3, #12
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	61ba      	str	r2, [r7, #24]
 8009e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	613b      	str	r3, [r7, #16]
   return(result);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e5      	bne.n	8009e04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009e40:	bf00      	nop
 8009e42:	3724      	adds	r7, #36	; 0x24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b095      	sub	sp, #84	; 0x54
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	330c      	adds	r3, #12
 8009e5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5e:	e853 3f00 	ldrex	r3, [r3]
 8009e62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	330c      	adds	r3, #12
 8009e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e74:	643a      	str	r2, [r7, #64]	; 0x40
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e7c:	e841 2300 	strex	r3, r2, [r1]
 8009e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e5      	bne.n	8009e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3314      	adds	r3, #20
 8009e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	e853 3f00 	ldrex	r3, [r3]
 8009e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f023 0301 	bic.w	r3, r3, #1
 8009e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3314      	adds	r3, #20
 8009ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb0:	e841 2300 	strex	r3, r2, [r1]
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1e5      	bne.n	8009e88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d119      	bne.n	8009ef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f023 0310 	bic.w	r3, r3, #16
 8009eda:	647b      	str	r3, [r7, #68]	; 0x44
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ee4:	61ba      	str	r2, [r7, #24]
 8009ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6979      	ldr	r1, [r7, #20]
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e5      	bne.n	8009ec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f06:	bf00      	nop
 8009f08:	3754      	adds	r7, #84	; 0x54
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff fd4f 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f32:	bf00      	nop
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b21      	cmp	r3, #33	; 0x21
 8009f4c:	d13e      	bne.n	8009fcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f56:	d114      	bne.n	8009f82 <UART_Transmit_IT+0x48>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d110      	bne.n	8009f82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	1c9a      	adds	r2, r3, #2
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	621a      	str	r2, [r3, #32]
 8009f80:	e008      	b.n	8009f94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	1c59      	adds	r1, r3, #1
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6211      	str	r1, [r2, #32]
 8009f8c:	781a      	ldrb	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10f      	bne.n	8009fc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e000      	b.n	8009fce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009fcc:	2302      	movs	r3, #2
  }
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ff0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fcd4 	bl	80099a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b08c      	sub	sp, #48	; 0x30
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b22      	cmp	r3, #34	; 0x22
 800a01c:	f040 80ab 	bne.w	800a176 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a028:	d117      	bne.n	800a05a <UART_Receive_IT+0x50>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d113      	bne.n	800a05a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a048:	b29a      	uxth	r2, r3
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	1c9a      	adds	r2, r3, #2
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	629a      	str	r2, [r3, #40]	; 0x28
 800a058:	e026      	b.n	800a0a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06c:	d007      	beq.n	800a07e <UART_Receive_IT+0x74>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <UART_Receive_IT+0x82>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	b2da      	uxtb	r2, r3
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	e008      	b.n	800a09e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d15a      	bne.n	800a172 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0220 	bic.w	r2, r2, #32
 800a0ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	695a      	ldr	r2, [r3, #20]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0201 	bic.w	r2, r2, #1
 800a0ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d135      	bne.n	800a168 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	330c      	adds	r3, #12
 800a108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	613b      	str	r3, [r7, #16]
   return(result);
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f023 0310 	bic.w	r3, r3, #16
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a122:	623a      	str	r2, [r7, #32]
 800a124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	69f9      	ldr	r1, [r7, #28]
 800a128:	6a3a      	ldr	r2, [r7, #32]
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e5      	bne.n	800a102 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b10      	cmp	r3, #16
 800a142:	d10a      	bne.n	800a15a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a144:	2300      	movs	r3, #0
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fc3f 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
 800a166:	e002      	b.n	800a16e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7f9 f877 	bl	800325c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	e002      	b.n	800a178 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	e000      	b.n	800a178 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a176:	2302      	movs	r3, #2
  }
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3730      	adds	r7, #48	; 0x30
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	b09f      	sub	sp, #124	; 0x7c
 800a186:	af00      	add	r7, sp, #0
 800a188:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a18a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a196:	68d9      	ldr	r1, [r3, #12]
 800a198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	ea40 0301 	orr.w	r3, r0, r1
 800a1a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a1ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a1c4:	f021 010c 	bic.w	r1, r1, #12
 800a1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1de:	6999      	ldr	r1, [r3, #24]
 800a1e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	ea40 0301 	orr.w	r3, r0, r1
 800a1e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a1ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4bc5      	ldr	r3, [pc, #788]	; (800a504 <UART_SetConfig+0x384>)
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d004      	beq.n	800a1fe <UART_SetConfig+0x7e>
 800a1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	4bc3      	ldr	r3, [pc, #780]	; (800a508 <UART_SetConfig+0x388>)
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d103      	bne.n	800a206 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1fe:	f7fc ffd7 	bl	80071b0 <HAL_RCC_GetPCLK2Freq>
 800a202:	6778      	str	r0, [r7, #116]	; 0x74
 800a204:	e002      	b.n	800a20c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a206:	f7fc ffbf 	bl	8007188 <HAL_RCC_GetPCLK1Freq>
 800a20a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a20c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a214:	f040 80b6 	bne.w	800a384 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a21a:	461c      	mov	r4, r3
 800a21c:	f04f 0500 	mov.w	r5, #0
 800a220:	4622      	mov	r2, r4
 800a222:	462b      	mov	r3, r5
 800a224:	1891      	adds	r1, r2, r2
 800a226:	6439      	str	r1, [r7, #64]	; 0x40
 800a228:	415b      	adcs	r3, r3
 800a22a:	647b      	str	r3, [r7, #68]	; 0x44
 800a22c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a230:	1912      	adds	r2, r2, r4
 800a232:	eb45 0303 	adc.w	r3, r5, r3
 800a236:	f04f 0000 	mov.w	r0, #0
 800a23a:	f04f 0100 	mov.w	r1, #0
 800a23e:	00d9      	lsls	r1, r3, #3
 800a240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a244:	00d0      	lsls	r0, r2, #3
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	1911      	adds	r1, r2, r4
 800a24c:	6639      	str	r1, [r7, #96]	; 0x60
 800a24e:	416b      	adcs	r3, r5
 800a250:	667b      	str	r3, [r7, #100]	; 0x64
 800a252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	461a      	mov	r2, r3
 800a258:	f04f 0300 	mov.w	r3, #0
 800a25c:	1891      	adds	r1, r2, r2
 800a25e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a260:	415b      	adcs	r3, r3
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a268:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a26c:	f7f6 fcc4 	bl	8000bf8 <__aeabi_uldivmod>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4ba5      	ldr	r3, [pc, #660]	; (800a50c <UART_SetConfig+0x38c>)
 800a276:	fba3 2302 	umull	r2, r3, r3, r2
 800a27a:	095b      	lsrs	r3, r3, #5
 800a27c:	011e      	lsls	r6, r3, #4
 800a27e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a280:	461c      	mov	r4, r3
 800a282:	f04f 0500 	mov.w	r5, #0
 800a286:	4622      	mov	r2, r4
 800a288:	462b      	mov	r3, r5
 800a28a:	1891      	adds	r1, r2, r2
 800a28c:	6339      	str	r1, [r7, #48]	; 0x30
 800a28e:	415b      	adcs	r3, r3
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
 800a292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a296:	1912      	adds	r2, r2, r4
 800a298:	eb45 0303 	adc.w	r3, r5, r3
 800a29c:	f04f 0000 	mov.w	r0, #0
 800a2a0:	f04f 0100 	mov.w	r1, #0
 800a2a4:	00d9      	lsls	r1, r3, #3
 800a2a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a2aa:	00d0      	lsls	r0, r2, #3
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	1911      	adds	r1, r2, r4
 800a2b2:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2b4:	416b      	adcs	r3, r5
 800a2b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	f04f 0300 	mov.w	r3, #0
 800a2c2:	1891      	adds	r1, r2, r2
 800a2c4:	62b9      	str	r1, [r7, #40]	; 0x28
 800a2c6:	415b      	adcs	r3, r3
 800a2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a2ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a2d2:	f7f6 fc91 	bl	8000bf8 <__aeabi_uldivmod>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4b8c      	ldr	r3, [pc, #560]	; (800a50c <UART_SetConfig+0x38c>)
 800a2dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a2e0:	095b      	lsrs	r3, r3, #5
 800a2e2:	2164      	movs	r1, #100	; 0x64
 800a2e4:	fb01 f303 	mul.w	r3, r1, r3
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	00db      	lsls	r3, r3, #3
 800a2ec:	3332      	adds	r3, #50	; 0x32
 800a2ee:	4a87      	ldr	r2, [pc, #540]	; (800a50c <UART_SetConfig+0x38c>)
 800a2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f4:	095b      	lsrs	r3, r3, #5
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2fc:	441e      	add	r6, r3
 800a2fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a300:	4618      	mov	r0, r3
 800a302:	f04f 0100 	mov.w	r1, #0
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	1894      	adds	r4, r2, r2
 800a30c:	623c      	str	r4, [r7, #32]
 800a30e:	415b      	adcs	r3, r3
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
 800a312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a316:	1812      	adds	r2, r2, r0
 800a318:	eb41 0303 	adc.w	r3, r1, r3
 800a31c:	f04f 0400 	mov.w	r4, #0
 800a320:	f04f 0500 	mov.w	r5, #0
 800a324:	00dd      	lsls	r5, r3, #3
 800a326:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a32a:	00d4      	lsls	r4, r2, #3
 800a32c:	4622      	mov	r2, r4
 800a32e:	462b      	mov	r3, r5
 800a330:	1814      	adds	r4, r2, r0
 800a332:	653c      	str	r4, [r7, #80]	; 0x50
 800a334:	414b      	adcs	r3, r1
 800a336:	657b      	str	r3, [r7, #84]	; 0x54
 800a338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	461a      	mov	r2, r3
 800a33e:	f04f 0300 	mov.w	r3, #0
 800a342:	1891      	adds	r1, r2, r2
 800a344:	61b9      	str	r1, [r7, #24]
 800a346:	415b      	adcs	r3, r3
 800a348:	61fb      	str	r3, [r7, #28]
 800a34a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a34e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a352:	f7f6 fc51 	bl	8000bf8 <__aeabi_uldivmod>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4b6c      	ldr	r3, [pc, #432]	; (800a50c <UART_SetConfig+0x38c>)
 800a35c:	fba3 1302 	umull	r1, r3, r3, r2
 800a360:	095b      	lsrs	r3, r3, #5
 800a362:	2164      	movs	r1, #100	; 0x64
 800a364:	fb01 f303 	mul.w	r3, r1, r3
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	3332      	adds	r3, #50	; 0x32
 800a36e:	4a67      	ldr	r2, [pc, #412]	; (800a50c <UART_SetConfig+0x38c>)
 800a370:	fba2 2303 	umull	r2, r3, r2, r3
 800a374:	095b      	lsrs	r3, r3, #5
 800a376:	f003 0207 	and.w	r2, r3, #7
 800a37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4432      	add	r2, r6
 800a380:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a382:	e0b9      	b.n	800a4f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a386:	461c      	mov	r4, r3
 800a388:	f04f 0500 	mov.w	r5, #0
 800a38c:	4622      	mov	r2, r4
 800a38e:	462b      	mov	r3, r5
 800a390:	1891      	adds	r1, r2, r2
 800a392:	6139      	str	r1, [r7, #16]
 800a394:	415b      	adcs	r3, r3
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a39c:	1912      	adds	r2, r2, r4
 800a39e:	eb45 0303 	adc.w	r3, r5, r3
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	f04f 0100 	mov.w	r1, #0
 800a3aa:	00d9      	lsls	r1, r3, #3
 800a3ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a3b0:	00d0      	lsls	r0, r2, #3
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	eb12 0804 	adds.w	r8, r2, r4
 800a3ba:	eb43 0905 	adc.w	r9, r3, r5
 800a3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f04f 0100 	mov.w	r1, #0
 800a3c8:	f04f 0200 	mov.w	r2, #0
 800a3cc:	f04f 0300 	mov.w	r3, #0
 800a3d0:	008b      	lsls	r3, r1, #2
 800a3d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a3d6:	0082      	lsls	r2, r0, #2
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f6 fc0c 	bl	8000bf8 <__aeabi_uldivmod>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4b49      	ldr	r3, [pc, #292]	; (800a50c <UART_SetConfig+0x38c>)
 800a3e6:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	011e      	lsls	r6, r3, #4
 800a3ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f04f 0100 	mov.w	r1, #0
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	1894      	adds	r4, r2, r2
 800a3fc:	60bc      	str	r4, [r7, #8]
 800a3fe:	415b      	adcs	r3, r3
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a406:	1812      	adds	r2, r2, r0
 800a408:	eb41 0303 	adc.w	r3, r1, r3
 800a40c:	f04f 0400 	mov.w	r4, #0
 800a410:	f04f 0500 	mov.w	r5, #0
 800a414:	00dd      	lsls	r5, r3, #3
 800a416:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a41a:	00d4      	lsls	r4, r2, #3
 800a41c:	4622      	mov	r2, r4
 800a41e:	462b      	mov	r3, r5
 800a420:	1814      	adds	r4, r2, r0
 800a422:	64bc      	str	r4, [r7, #72]	; 0x48
 800a424:	414b      	adcs	r3, r1
 800a426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f04f 0100 	mov.w	r1, #0
 800a432:	f04f 0200 	mov.w	r2, #0
 800a436:	f04f 0300 	mov.w	r3, #0
 800a43a:	008b      	lsls	r3, r1, #2
 800a43c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a440:	0082      	lsls	r2, r0, #2
 800a442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a446:	f7f6 fbd7 	bl	8000bf8 <__aeabi_uldivmod>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4b2f      	ldr	r3, [pc, #188]	; (800a50c <UART_SetConfig+0x38c>)
 800a450:	fba3 1302 	umull	r1, r3, r3, r2
 800a454:	095b      	lsrs	r3, r3, #5
 800a456:	2164      	movs	r1, #100	; 0x64
 800a458:	fb01 f303 	mul.w	r3, r1, r3
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	3332      	adds	r3, #50	; 0x32
 800a462:	4a2a      	ldr	r2, [pc, #168]	; (800a50c <UART_SetConfig+0x38c>)
 800a464:	fba2 2303 	umull	r2, r3, r2, r3
 800a468:	095b      	lsrs	r3, r3, #5
 800a46a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a46e:	441e      	add	r6, r3
 800a470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a472:	4618      	mov	r0, r3
 800a474:	f04f 0100 	mov.w	r1, #0
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	1894      	adds	r4, r2, r2
 800a47e:	603c      	str	r4, [r7, #0]
 800a480:	415b      	adcs	r3, r3
 800a482:	607b      	str	r3, [r7, #4]
 800a484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a488:	1812      	adds	r2, r2, r0
 800a48a:	eb41 0303 	adc.w	r3, r1, r3
 800a48e:	f04f 0400 	mov.w	r4, #0
 800a492:	f04f 0500 	mov.w	r5, #0
 800a496:	00dd      	lsls	r5, r3, #3
 800a498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a49c:	00d4      	lsls	r4, r2, #3
 800a49e:	4622      	mov	r2, r4
 800a4a0:	462b      	mov	r3, r5
 800a4a2:	eb12 0a00 	adds.w	sl, r2, r0
 800a4a6:	eb43 0b01 	adc.w	fp, r3, r1
 800a4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f04f 0100 	mov.w	r1, #0
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	008b      	lsls	r3, r1, #2
 800a4be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a4c2:	0082      	lsls	r2, r0, #2
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	4659      	mov	r1, fp
 800a4c8:	f7f6 fb96 	bl	8000bf8 <__aeabi_uldivmod>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4b0e      	ldr	r3, [pc, #56]	; (800a50c <UART_SetConfig+0x38c>)
 800a4d2:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d6:	095b      	lsrs	r3, r3, #5
 800a4d8:	2164      	movs	r1, #100	; 0x64
 800a4da:	fb01 f303 	mul.w	r3, r1, r3
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	011b      	lsls	r3, r3, #4
 800a4e2:	3332      	adds	r3, #50	; 0x32
 800a4e4:	4a09      	ldr	r2, [pc, #36]	; (800a50c <UART_SetConfig+0x38c>)
 800a4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ea:	095b      	lsrs	r3, r3, #5
 800a4ec:	f003 020f 	and.w	r2, r3, #15
 800a4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4432      	add	r2, r6
 800a4f6:	609a      	str	r2, [r3, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	377c      	adds	r7, #124	; 0x7c
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a502:	bf00      	nop
 800a504:	40011000 	.word	0x40011000
 800a508:	40011400 	.word	0x40011400
 800a50c:	51eb851f 	.word	0x51eb851f

0800a510 <__errno>:
 800a510:	4b01      	ldr	r3, [pc, #4]	; (800a518 <__errno+0x8>)
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	20000108 	.word	0x20000108

0800a51c <__libc_init_array>:
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	4d0d      	ldr	r5, [pc, #52]	; (800a554 <__libc_init_array+0x38>)
 800a520:	4c0d      	ldr	r4, [pc, #52]	; (800a558 <__libc_init_array+0x3c>)
 800a522:	1b64      	subs	r4, r4, r5
 800a524:	10a4      	asrs	r4, r4, #2
 800a526:	2600      	movs	r6, #0
 800a528:	42a6      	cmp	r6, r4
 800a52a:	d109      	bne.n	800a540 <__libc_init_array+0x24>
 800a52c:	4d0b      	ldr	r5, [pc, #44]	; (800a55c <__libc_init_array+0x40>)
 800a52e:	4c0c      	ldr	r4, [pc, #48]	; (800a560 <__libc_init_array+0x44>)
 800a530:	f001 fc04 	bl	800bd3c <_init>
 800a534:	1b64      	subs	r4, r4, r5
 800a536:	10a4      	asrs	r4, r4, #2
 800a538:	2600      	movs	r6, #0
 800a53a:	42a6      	cmp	r6, r4
 800a53c:	d105      	bne.n	800a54a <__libc_init_array+0x2e>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}
 800a540:	f855 3b04 	ldr.w	r3, [r5], #4
 800a544:	4798      	blx	r3
 800a546:	3601      	adds	r6, #1
 800a548:	e7ee      	b.n	800a528 <__libc_init_array+0xc>
 800a54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54e:	4798      	blx	r3
 800a550:	3601      	adds	r6, #1
 800a552:	e7f2      	b.n	800a53a <__libc_init_array+0x1e>
 800a554:	0800bf60 	.word	0x0800bf60
 800a558:	0800bf60 	.word	0x0800bf60
 800a55c:	0800bf60 	.word	0x0800bf60
 800a560:	0800bf64 	.word	0x0800bf64

0800a564 <memset>:
 800a564:	4402      	add	r2, r0
 800a566:	4603      	mov	r3, r0
 800a568:	4293      	cmp	r3, r2
 800a56a:	d100      	bne.n	800a56e <memset+0xa>
 800a56c:	4770      	bx	lr
 800a56e:	f803 1b01 	strb.w	r1, [r3], #1
 800a572:	e7f9      	b.n	800a568 <memset+0x4>
 800a574:	0000      	movs	r0, r0
	...

0800a578 <cos>:
 800a578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57a:	ec53 2b10 	vmov	r2, r3, d0
 800a57e:	4824      	ldr	r0, [pc, #144]	; (800a610 <cos+0x98>)
 800a580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a584:	4281      	cmp	r1, r0
 800a586:	dc06      	bgt.n	800a596 <cos+0x1e>
 800a588:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a608 <cos+0x90>
 800a58c:	f000 fe00 	bl	800b190 <__kernel_cos>
 800a590:	ec51 0b10 	vmov	r0, r1, d0
 800a594:	e007      	b.n	800a5a6 <cos+0x2e>
 800a596:	481f      	ldr	r0, [pc, #124]	; (800a614 <cos+0x9c>)
 800a598:	4281      	cmp	r1, r0
 800a59a:	dd09      	ble.n	800a5b0 <cos+0x38>
 800a59c:	ee10 0a10 	vmov	r0, s0
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	f7f5 fe29 	bl	80001f8 <__aeabi_dsub>
 800a5a6:	ec41 0b10 	vmov	d0, r0, r1
 800a5aa:	b005      	add	sp, #20
 800a5ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5b0:	4668      	mov	r0, sp
 800a5b2:	f000 fb2d 	bl	800ac10 <__ieee754_rem_pio2>
 800a5b6:	f000 0003 	and.w	r0, r0, #3
 800a5ba:	2801      	cmp	r0, #1
 800a5bc:	d007      	beq.n	800a5ce <cos+0x56>
 800a5be:	2802      	cmp	r0, #2
 800a5c0:	d012      	beq.n	800a5e8 <cos+0x70>
 800a5c2:	b9c0      	cbnz	r0, 800a5f6 <cos+0x7e>
 800a5c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5c8:	ed9d 0b00 	vldr	d0, [sp]
 800a5cc:	e7de      	b.n	800a58c <cos+0x14>
 800a5ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5d2:	ed9d 0b00 	vldr	d0, [sp]
 800a5d6:	f001 f9e3 	bl	800b9a0 <__kernel_sin>
 800a5da:	ec53 2b10 	vmov	r2, r3, d0
 800a5de:	ee10 0a10 	vmov	r0, s0
 800a5e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a5e6:	e7de      	b.n	800a5a6 <cos+0x2e>
 800a5e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ec:	ed9d 0b00 	vldr	d0, [sp]
 800a5f0:	f000 fdce 	bl	800b190 <__kernel_cos>
 800a5f4:	e7f1      	b.n	800a5da <cos+0x62>
 800a5f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5fa:	ed9d 0b00 	vldr	d0, [sp]
 800a5fe:	2001      	movs	r0, #1
 800a600:	f001 f9ce 	bl	800b9a0 <__kernel_sin>
 800a604:	e7c4      	b.n	800a590 <cos+0x18>
 800a606:	bf00      	nop
	...
 800a610:	3fe921fb 	.word	0x3fe921fb
 800a614:	7fefffff 	.word	0x7fefffff

0800a618 <fabs>:
 800a618:	ec51 0b10 	vmov	r0, r1, d0
 800a61c:	ee10 2a10 	vmov	r2, s0
 800a620:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a624:	ec43 2b10 	vmov	d0, r2, r3
 800a628:	4770      	bx	lr
 800a62a:	0000      	movs	r0, r0
 800a62c:	0000      	movs	r0, r0
	...

0800a630 <sin>:
 800a630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a632:	ec53 2b10 	vmov	r2, r3, d0
 800a636:	4826      	ldr	r0, [pc, #152]	; (800a6d0 <sin+0xa0>)
 800a638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a63c:	4281      	cmp	r1, r0
 800a63e:	dc07      	bgt.n	800a650 <sin+0x20>
 800a640:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a6c8 <sin+0x98>
 800a644:	2000      	movs	r0, #0
 800a646:	f001 f9ab 	bl	800b9a0 <__kernel_sin>
 800a64a:	ec51 0b10 	vmov	r0, r1, d0
 800a64e:	e007      	b.n	800a660 <sin+0x30>
 800a650:	4820      	ldr	r0, [pc, #128]	; (800a6d4 <sin+0xa4>)
 800a652:	4281      	cmp	r1, r0
 800a654:	dd09      	ble.n	800a66a <sin+0x3a>
 800a656:	ee10 0a10 	vmov	r0, s0
 800a65a:	4619      	mov	r1, r3
 800a65c:	f7f5 fdcc 	bl	80001f8 <__aeabi_dsub>
 800a660:	ec41 0b10 	vmov	d0, r0, r1
 800a664:	b005      	add	sp, #20
 800a666:	f85d fb04 	ldr.w	pc, [sp], #4
 800a66a:	4668      	mov	r0, sp
 800a66c:	f000 fad0 	bl	800ac10 <__ieee754_rem_pio2>
 800a670:	f000 0003 	and.w	r0, r0, #3
 800a674:	2801      	cmp	r0, #1
 800a676:	d008      	beq.n	800a68a <sin+0x5a>
 800a678:	2802      	cmp	r0, #2
 800a67a:	d00d      	beq.n	800a698 <sin+0x68>
 800a67c:	b9d0      	cbnz	r0, 800a6b4 <sin+0x84>
 800a67e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a682:	ed9d 0b00 	vldr	d0, [sp]
 800a686:	2001      	movs	r0, #1
 800a688:	e7dd      	b.n	800a646 <sin+0x16>
 800a68a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a68e:	ed9d 0b00 	vldr	d0, [sp]
 800a692:	f000 fd7d 	bl	800b190 <__kernel_cos>
 800a696:	e7d8      	b.n	800a64a <sin+0x1a>
 800a698:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a69c:	ed9d 0b00 	vldr	d0, [sp]
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	f001 f97d 	bl	800b9a0 <__kernel_sin>
 800a6a6:	ec53 2b10 	vmov	r2, r3, d0
 800a6aa:	ee10 0a10 	vmov	r0, s0
 800a6ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6b2:	e7d5      	b.n	800a660 <sin+0x30>
 800a6b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6b8:	ed9d 0b00 	vldr	d0, [sp]
 800a6bc:	f000 fd68 	bl	800b190 <__kernel_cos>
 800a6c0:	e7f1      	b.n	800a6a6 <sin+0x76>
 800a6c2:	bf00      	nop
 800a6c4:	f3af 8000 	nop.w
	...
 800a6d0:	3fe921fb 	.word	0x3fe921fb
 800a6d4:	7fefffff 	.word	0x7fefffff

0800a6d8 <acos>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	ed2d 8b02 	vpush	{d8}
 800a6de:	ec55 4b10 	vmov	r4, r5, d0
 800a6e2:	f000 f835 	bl	800a750 <__ieee754_acos>
 800a6e6:	4b16      	ldr	r3, [pc, #88]	; (800a740 <acos+0x68>)
 800a6e8:	eeb0 8a40 	vmov.f32	s16, s0
 800a6ec:	eef0 8a60 	vmov.f32	s17, s1
 800a6f0:	f993 3000 	ldrsb.w	r3, [r3]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	d01c      	beq.n	800a732 <acos+0x5a>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f6 f9cc 	bl	8000a9c <__aeabi_dcmpun>
 800a704:	b9a8      	cbnz	r0, 800a732 <acos+0x5a>
 800a706:	ec45 4b10 	vmov	d0, r4, r5
 800a70a:	f7ff ff85 	bl	800a618 <fabs>
 800a70e:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <acos+0x6c>)
 800a710:	ec51 0b10 	vmov	r0, r1, d0
 800a714:	2200      	movs	r2, #0
 800a716:	f7f6 f9b7 	bl	8000a88 <__aeabi_dcmpgt>
 800a71a:	b150      	cbz	r0, 800a732 <acos+0x5a>
 800a71c:	f7ff fef8 	bl	800a510 <__errno>
 800a720:	ecbd 8b02 	vpop	{d8}
 800a724:	2321      	movs	r3, #33	; 0x21
 800a726:	6003      	str	r3, [r0, #0]
 800a728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72c:	4806      	ldr	r0, [pc, #24]	; (800a748 <acos+0x70>)
 800a72e:	f001 ba77 	b.w	800bc20 <nan>
 800a732:	eeb0 0a48 	vmov.f32	s0, s16
 800a736:	eef0 0a68 	vmov.f32	s1, s17
 800a73a:	ecbd 8b02 	vpop	{d8}
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	2000016c 	.word	0x2000016c
 800a744:	3ff00000 	.word	0x3ff00000
 800a748:	0800bd78 	.word	0x0800bd78
 800a74c:	00000000 	.word	0x00000000

0800a750 <__ieee754_acos>:
 800a750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	ec55 4b10 	vmov	r4, r5, d0
 800a758:	49b7      	ldr	r1, [pc, #732]	; (800aa38 <__ieee754_acos+0x2e8>)
 800a75a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a75e:	428b      	cmp	r3, r1
 800a760:	dd1b      	ble.n	800a79a <__ieee754_acos+0x4a>
 800a762:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a766:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a76a:	4323      	orrs	r3, r4
 800a76c:	d106      	bne.n	800a77c <__ieee754_acos+0x2c>
 800a76e:	2d00      	cmp	r5, #0
 800a770:	f300 8211 	bgt.w	800ab96 <__ieee754_acos+0x446>
 800a774:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a9d0 <__ieee754_acos+0x280>
 800a778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	ee10 2a10 	vmov	r2, s0
 800a780:	462b      	mov	r3, r5
 800a782:	ee10 0a10 	vmov	r0, s0
 800a786:	4629      	mov	r1, r5
 800a788:	f7f5 fd36 	bl	80001f8 <__aeabi_dsub>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	f7f6 f814 	bl	80007bc <__aeabi_ddiv>
 800a794:	ec41 0b10 	vmov	d0, r0, r1
 800a798:	e7ee      	b.n	800a778 <__ieee754_acos+0x28>
 800a79a:	49a8      	ldr	r1, [pc, #672]	; (800aa3c <__ieee754_acos+0x2ec>)
 800a79c:	428b      	cmp	r3, r1
 800a79e:	f300 8087 	bgt.w	800a8b0 <__ieee754_acos+0x160>
 800a7a2:	4aa7      	ldr	r2, [pc, #668]	; (800aa40 <__ieee754_acos+0x2f0>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	f340 81f9 	ble.w	800ab9c <__ieee754_acos+0x44c>
 800a7aa:	ee10 2a10 	vmov	r2, s0
 800a7ae:	ee10 0a10 	vmov	r0, s0
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f5 fed7 	bl	8000568 <__aeabi_dmul>
 800a7ba:	a387      	add	r3, pc, #540	; (adr r3, 800a9d8 <__ieee754_acos+0x288>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	460f      	mov	r7, r1
 800a7c4:	f7f5 fed0 	bl	8000568 <__aeabi_dmul>
 800a7c8:	a385      	add	r3, pc, #532	; (adr r3, 800a9e0 <__ieee754_acos+0x290>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 fd15 	bl	80001fc <__adddf3>
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	f7f5 fec7 	bl	8000568 <__aeabi_dmul>
 800a7da:	a383      	add	r3, pc, #524	; (adr r3, 800a9e8 <__ieee754_acos+0x298>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f7f5 fd0a 	bl	80001f8 <__aeabi_dsub>
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	f7f5 febe 	bl	8000568 <__aeabi_dmul>
 800a7ec:	a380      	add	r3, pc, #512	; (adr r3, 800a9f0 <__ieee754_acos+0x2a0>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fd03 	bl	80001fc <__adddf3>
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	463b      	mov	r3, r7
 800a7fa:	f7f5 feb5 	bl	8000568 <__aeabi_dmul>
 800a7fe:	a37e      	add	r3, pc, #504	; (adr r3, 800a9f8 <__ieee754_acos+0x2a8>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	f7f5 fcf8 	bl	80001f8 <__aeabi_dsub>
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	f7f5 feac 	bl	8000568 <__aeabi_dmul>
 800a810:	a37b      	add	r3, pc, #492	; (adr r3, 800aa00 <__ieee754_acos+0x2b0>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 fcf1 	bl	80001fc <__adddf3>
 800a81a:	4632      	mov	r2, r6
 800a81c:	463b      	mov	r3, r7
 800a81e:	f7f5 fea3 	bl	8000568 <__aeabi_dmul>
 800a822:	a379      	add	r3, pc, #484	; (adr r3, 800aa08 <__ieee754_acos+0x2b8>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fe9a 	bl	8000568 <__aeabi_dmul>
 800a834:	a376      	add	r3, pc, #472	; (adr r3, 800aa10 <__ieee754_acos+0x2c0>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fcdd 	bl	80001f8 <__aeabi_dsub>
 800a83e:	4632      	mov	r2, r6
 800a840:	463b      	mov	r3, r7
 800a842:	f7f5 fe91 	bl	8000568 <__aeabi_dmul>
 800a846:	a374      	add	r3, pc, #464	; (adr r3, 800aa18 <__ieee754_acos+0x2c8>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fcd6 	bl	80001fc <__adddf3>
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	f7f5 fe88 	bl	8000568 <__aeabi_dmul>
 800a858:	a371      	add	r3, pc, #452	; (adr r3, 800aa20 <__ieee754_acos+0x2d0>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 fccb 	bl	80001f8 <__aeabi_dsub>
 800a862:	4632      	mov	r2, r6
 800a864:	463b      	mov	r3, r7
 800a866:	f7f5 fe7f 	bl	8000568 <__aeabi_dmul>
 800a86a:	4b76      	ldr	r3, [pc, #472]	; (800aa44 <__ieee754_acos+0x2f4>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	f7f5 fcc5 	bl	80001fc <__adddf3>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	4640      	mov	r0, r8
 800a878:	4649      	mov	r1, r9
 800a87a:	f7f5 ff9f 	bl	80007bc <__aeabi_ddiv>
 800a87e:	4622      	mov	r2, r4
 800a880:	462b      	mov	r3, r5
 800a882:	f7f5 fe71 	bl	8000568 <__aeabi_dmul>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	a167      	add	r1, pc, #412	; (adr r1, 800aa28 <__ieee754_acos+0x2d8>)
 800a88c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a890:	f7f5 fcb2 	bl	80001f8 <__aeabi_dsub>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4620      	mov	r0, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	f7f5 fcac 	bl	80001f8 <__aeabi_dsub>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	a162      	add	r1, pc, #392	; (adr r1, 800aa30 <__ieee754_acos+0x2e0>)
 800a8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8aa:	f7f5 fca5 	bl	80001f8 <__aeabi_dsub>
 800a8ae:	e771      	b.n	800a794 <__ieee754_acos+0x44>
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	f280 80cb 	bge.w	800aa4c <__ieee754_acos+0x2fc>
 800a8b6:	ee10 0a10 	vmov	r0, s0
 800a8ba:	4b62      	ldr	r3, [pc, #392]	; (800aa44 <__ieee754_acos+0x2f4>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fc9c 	bl	80001fc <__adddf3>
 800a8c4:	4b60      	ldr	r3, [pc, #384]	; (800aa48 <__ieee754_acos+0x2f8>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f7f5 fe4e 	bl	8000568 <__aeabi_dmul>
 800a8cc:	a342      	add	r3, pc, #264	; (adr r3, 800a9d8 <__ieee754_acos+0x288>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	f7f5 fe47 	bl	8000568 <__aeabi_dmul>
 800a8da:	a341      	add	r3, pc, #260	; (adr r3, 800a9e0 <__ieee754_acos+0x290>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 fc8c 	bl	80001fc <__adddf3>
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	f7f5 fe3e 	bl	8000568 <__aeabi_dmul>
 800a8ec:	a33e      	add	r3, pc, #248	; (adr r3, 800a9e8 <__ieee754_acos+0x298>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f7f5 fc81 	bl	80001f8 <__aeabi_dsub>
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	f7f5 fe35 	bl	8000568 <__aeabi_dmul>
 800a8fe:	a33c      	add	r3, pc, #240	; (adr r3, 800a9f0 <__ieee754_acos+0x2a0>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	f7f5 fc7a 	bl	80001fc <__adddf3>
 800a908:	4622      	mov	r2, r4
 800a90a:	462b      	mov	r3, r5
 800a90c:	f7f5 fe2c 	bl	8000568 <__aeabi_dmul>
 800a910:	a339      	add	r3, pc, #228	; (adr r3, 800a9f8 <__ieee754_acos+0x2a8>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	f7f5 fc6f 	bl	80001f8 <__aeabi_dsub>
 800a91a:	4622      	mov	r2, r4
 800a91c:	462b      	mov	r3, r5
 800a91e:	f7f5 fe23 	bl	8000568 <__aeabi_dmul>
 800a922:	a337      	add	r3, pc, #220	; (adr r3, 800aa00 <__ieee754_acos+0x2b0>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f7f5 fc68 	bl	80001fc <__adddf3>
 800a92c:	4622      	mov	r2, r4
 800a92e:	462b      	mov	r3, r5
 800a930:	f7f5 fe1a 	bl	8000568 <__aeabi_dmul>
 800a934:	ec45 4b10 	vmov	d0, r4, r5
 800a938:	4680      	mov	r8, r0
 800a93a:	4689      	mov	r9, r1
 800a93c:	f000 fb72 	bl	800b024 <__ieee754_sqrt>
 800a940:	a331      	add	r3, pc, #196	; (adr r3, 800aa08 <__ieee754_acos+0x2b8>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	4620      	mov	r0, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	ec57 6b10 	vmov	r6, r7, d0
 800a94e:	f7f5 fe0b 	bl	8000568 <__aeabi_dmul>
 800a952:	a32f      	add	r3, pc, #188	; (adr r3, 800aa10 <__ieee754_acos+0x2c0>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f7f5 fc4e 	bl	80001f8 <__aeabi_dsub>
 800a95c:	4622      	mov	r2, r4
 800a95e:	462b      	mov	r3, r5
 800a960:	f7f5 fe02 	bl	8000568 <__aeabi_dmul>
 800a964:	a32c      	add	r3, pc, #176	; (adr r3, 800aa18 <__ieee754_acos+0x2c8>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fc47 	bl	80001fc <__adddf3>
 800a96e:	4622      	mov	r2, r4
 800a970:	462b      	mov	r3, r5
 800a972:	f7f5 fdf9 	bl	8000568 <__aeabi_dmul>
 800a976:	a32a      	add	r3, pc, #168	; (adr r3, 800aa20 <__ieee754_acos+0x2d0>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f5 fc3c 	bl	80001f8 <__aeabi_dsub>
 800a980:	4622      	mov	r2, r4
 800a982:	462b      	mov	r3, r5
 800a984:	f7f5 fdf0 	bl	8000568 <__aeabi_dmul>
 800a988:	4b2e      	ldr	r3, [pc, #184]	; (800aa44 <__ieee754_acos+0x2f4>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	f7f5 fc36 	bl	80001fc <__adddf3>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4640      	mov	r0, r8
 800a996:	4649      	mov	r1, r9
 800a998:	f7f5 ff10 	bl	80007bc <__aeabi_ddiv>
 800a99c:	4632      	mov	r2, r6
 800a99e:	463b      	mov	r3, r7
 800a9a0:	f7f5 fde2 	bl	8000568 <__aeabi_dmul>
 800a9a4:	a320      	add	r3, pc, #128	; (adr r3, 800aa28 <__ieee754_acos+0x2d8>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f7f5 fc25 	bl	80001f8 <__aeabi_dsub>
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	463b      	mov	r3, r7
 800a9b2:	f7f5 fc23 	bl	80001fc <__adddf3>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	f7f5 fc1f 	bl	80001fc <__adddf3>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	a103      	add	r1, pc, #12	; (adr r1, 800a9d0 <__ieee754_acos+0x280>)
 800a9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c8:	e76f      	b.n	800a8aa <__ieee754_acos+0x15a>
 800a9ca:	bf00      	nop
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	54442d18 	.word	0x54442d18
 800a9d4:	400921fb 	.word	0x400921fb
 800a9d8:	0dfdf709 	.word	0x0dfdf709
 800a9dc:	3f023de1 	.word	0x3f023de1
 800a9e0:	7501b288 	.word	0x7501b288
 800a9e4:	3f49efe0 	.word	0x3f49efe0
 800a9e8:	b5688f3b 	.word	0xb5688f3b
 800a9ec:	3fa48228 	.word	0x3fa48228
 800a9f0:	0e884455 	.word	0x0e884455
 800a9f4:	3fc9c155 	.word	0x3fc9c155
 800a9f8:	03eb6f7d 	.word	0x03eb6f7d
 800a9fc:	3fd4d612 	.word	0x3fd4d612
 800aa00:	55555555 	.word	0x55555555
 800aa04:	3fc55555 	.word	0x3fc55555
 800aa08:	b12e9282 	.word	0xb12e9282
 800aa0c:	3fb3b8c5 	.word	0x3fb3b8c5
 800aa10:	1b8d0159 	.word	0x1b8d0159
 800aa14:	3fe6066c 	.word	0x3fe6066c
 800aa18:	9c598ac8 	.word	0x9c598ac8
 800aa1c:	40002ae5 	.word	0x40002ae5
 800aa20:	1c8a2d4b 	.word	0x1c8a2d4b
 800aa24:	40033a27 	.word	0x40033a27
 800aa28:	33145c07 	.word	0x33145c07
 800aa2c:	3c91a626 	.word	0x3c91a626
 800aa30:	54442d18 	.word	0x54442d18
 800aa34:	3ff921fb 	.word	0x3ff921fb
 800aa38:	3fefffff 	.word	0x3fefffff
 800aa3c:	3fdfffff 	.word	0x3fdfffff
 800aa40:	3c600000 	.word	0x3c600000
 800aa44:	3ff00000 	.word	0x3ff00000
 800aa48:	3fe00000 	.word	0x3fe00000
 800aa4c:	ee10 2a10 	vmov	r2, s0
 800aa50:	462b      	mov	r3, r5
 800aa52:	496d      	ldr	r1, [pc, #436]	; (800ac08 <__ieee754_acos+0x4b8>)
 800aa54:	2000      	movs	r0, #0
 800aa56:	f7f5 fbcf 	bl	80001f8 <__aeabi_dsub>
 800aa5a:	4b6c      	ldr	r3, [pc, #432]	; (800ac0c <__ieee754_acos+0x4bc>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f7f5 fd83 	bl	8000568 <__aeabi_dmul>
 800aa62:	4604      	mov	r4, r0
 800aa64:	460d      	mov	r5, r1
 800aa66:	ec45 4b10 	vmov	d0, r4, r5
 800aa6a:	f000 fadb 	bl	800b024 <__ieee754_sqrt>
 800aa6e:	a34e      	add	r3, pc, #312	; (adr r3, 800aba8 <__ieee754_acos+0x458>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	4620      	mov	r0, r4
 800aa76:	4629      	mov	r1, r5
 800aa78:	ec59 8b10 	vmov	r8, r9, d0
 800aa7c:	f7f5 fd74 	bl	8000568 <__aeabi_dmul>
 800aa80:	a34b      	add	r3, pc, #300	; (adr r3, 800abb0 <__ieee754_acos+0x460>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f7f5 fbb9 	bl	80001fc <__adddf3>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	f7f5 fd6b 	bl	8000568 <__aeabi_dmul>
 800aa92:	a349      	add	r3, pc, #292	; (adr r3, 800abb8 <__ieee754_acos+0x468>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fbae 	bl	80001f8 <__aeabi_dsub>
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	462b      	mov	r3, r5
 800aaa0:	f7f5 fd62 	bl	8000568 <__aeabi_dmul>
 800aaa4:	a346      	add	r3, pc, #280	; (adr r3, 800abc0 <__ieee754_acos+0x470>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fba7 	bl	80001fc <__adddf3>
 800aaae:	4622      	mov	r2, r4
 800aab0:	462b      	mov	r3, r5
 800aab2:	f7f5 fd59 	bl	8000568 <__aeabi_dmul>
 800aab6:	a344      	add	r3, pc, #272	; (adr r3, 800abc8 <__ieee754_acos+0x478>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fb9c 	bl	80001f8 <__aeabi_dsub>
 800aac0:	4622      	mov	r2, r4
 800aac2:	462b      	mov	r3, r5
 800aac4:	f7f5 fd50 	bl	8000568 <__aeabi_dmul>
 800aac8:	a341      	add	r3, pc, #260	; (adr r3, 800abd0 <__ieee754_acos+0x480>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7f5 fb95 	bl	80001fc <__adddf3>
 800aad2:	4622      	mov	r2, r4
 800aad4:	462b      	mov	r3, r5
 800aad6:	f7f5 fd47 	bl	8000568 <__aeabi_dmul>
 800aada:	a33f      	add	r3, pc, #252	; (adr r3, 800abd8 <__ieee754_acos+0x488>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	4682      	mov	sl, r0
 800aae2:	468b      	mov	fp, r1
 800aae4:	4620      	mov	r0, r4
 800aae6:	4629      	mov	r1, r5
 800aae8:	f7f5 fd3e 	bl	8000568 <__aeabi_dmul>
 800aaec:	a33c      	add	r3, pc, #240	; (adr r3, 800abe0 <__ieee754_acos+0x490>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fb81 	bl	80001f8 <__aeabi_dsub>
 800aaf6:	4622      	mov	r2, r4
 800aaf8:	462b      	mov	r3, r5
 800aafa:	f7f5 fd35 	bl	8000568 <__aeabi_dmul>
 800aafe:	a33a      	add	r3, pc, #232	; (adr r3, 800abe8 <__ieee754_acos+0x498>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7f5 fb7a 	bl	80001fc <__adddf3>
 800ab08:	4622      	mov	r2, r4
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	f7f5 fd2c 	bl	8000568 <__aeabi_dmul>
 800ab10:	a337      	add	r3, pc, #220	; (adr r3, 800abf0 <__ieee754_acos+0x4a0>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fb6f 	bl	80001f8 <__aeabi_dsub>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fd23 	bl	8000568 <__aeabi_dmul>
 800ab22:	4b39      	ldr	r3, [pc, #228]	; (800ac08 <__ieee754_acos+0x4b8>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	f7f5 fb69 	bl	80001fc <__adddf3>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4659      	mov	r1, fp
 800ab32:	f7f5 fe43 	bl	80007bc <__aeabi_ddiv>
 800ab36:	4642      	mov	r2, r8
 800ab38:	464b      	mov	r3, r9
 800ab3a:	f7f5 fd15 	bl	8000568 <__aeabi_dmul>
 800ab3e:	2600      	movs	r6, #0
 800ab40:	4682      	mov	sl, r0
 800ab42:	468b      	mov	fp, r1
 800ab44:	4632      	mov	r2, r6
 800ab46:	464b      	mov	r3, r9
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fd0c 	bl	8000568 <__aeabi_dmul>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 fb4e 	bl	80001f8 <__aeabi_dsub>
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	4604      	mov	r4, r0
 800ab60:	460d      	mov	r5, r1
 800ab62:	464b      	mov	r3, r9
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 fb48 	bl	80001fc <__adddf3>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4620      	mov	r0, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7f5 fe22 	bl	80007bc <__aeabi_ddiv>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	4659      	mov	r1, fp
 800ab80:	f7f5 fb3c 	bl	80001fc <__adddf3>
 800ab84:	4632      	mov	r2, r6
 800ab86:	464b      	mov	r3, r9
 800ab88:	f7f5 fb38 	bl	80001fc <__adddf3>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	f7f5 fb34 	bl	80001fc <__adddf3>
 800ab94:	e5fe      	b.n	800a794 <__ieee754_acos+0x44>
 800ab96:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800abf8 <__ieee754_acos+0x4a8>
 800ab9a:	e5ed      	b.n	800a778 <__ieee754_acos+0x28>
 800ab9c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ac00 <__ieee754_acos+0x4b0>
 800aba0:	e5ea      	b.n	800a778 <__ieee754_acos+0x28>
 800aba2:	bf00      	nop
 800aba4:	f3af 8000 	nop.w
 800aba8:	0dfdf709 	.word	0x0dfdf709
 800abac:	3f023de1 	.word	0x3f023de1
 800abb0:	7501b288 	.word	0x7501b288
 800abb4:	3f49efe0 	.word	0x3f49efe0
 800abb8:	b5688f3b 	.word	0xb5688f3b
 800abbc:	3fa48228 	.word	0x3fa48228
 800abc0:	0e884455 	.word	0x0e884455
 800abc4:	3fc9c155 	.word	0x3fc9c155
 800abc8:	03eb6f7d 	.word	0x03eb6f7d
 800abcc:	3fd4d612 	.word	0x3fd4d612
 800abd0:	55555555 	.word	0x55555555
 800abd4:	3fc55555 	.word	0x3fc55555
 800abd8:	b12e9282 	.word	0xb12e9282
 800abdc:	3fb3b8c5 	.word	0x3fb3b8c5
 800abe0:	1b8d0159 	.word	0x1b8d0159
 800abe4:	3fe6066c 	.word	0x3fe6066c
 800abe8:	9c598ac8 	.word	0x9c598ac8
 800abec:	40002ae5 	.word	0x40002ae5
 800abf0:	1c8a2d4b 	.word	0x1c8a2d4b
 800abf4:	40033a27 	.word	0x40033a27
	...
 800ac00:	54442d18 	.word	0x54442d18
 800ac04:	3ff921fb 	.word	0x3ff921fb
 800ac08:	3ff00000 	.word	0x3ff00000
 800ac0c:	3fe00000 	.word	0x3fe00000

0800ac10 <__ieee754_rem_pio2>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	ed2d 8b02 	vpush	{d8}
 800ac18:	ec55 4b10 	vmov	r4, r5, d0
 800ac1c:	4bca      	ldr	r3, [pc, #808]	; (800af48 <__ieee754_rem_pio2+0x338>)
 800ac1e:	b08b      	sub	sp, #44	; 0x2c
 800ac20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ac24:	4598      	cmp	r8, r3
 800ac26:	4682      	mov	sl, r0
 800ac28:	9502      	str	r5, [sp, #8]
 800ac2a:	dc08      	bgt.n	800ac3e <__ieee754_rem_pio2+0x2e>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	ed80 0b00 	vstr	d0, [r0]
 800ac34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac38:	f04f 0b00 	mov.w	fp, #0
 800ac3c:	e028      	b.n	800ac90 <__ieee754_rem_pio2+0x80>
 800ac3e:	4bc3      	ldr	r3, [pc, #780]	; (800af4c <__ieee754_rem_pio2+0x33c>)
 800ac40:	4598      	cmp	r8, r3
 800ac42:	dc78      	bgt.n	800ad36 <__ieee754_rem_pio2+0x126>
 800ac44:	9b02      	ldr	r3, [sp, #8]
 800ac46:	4ec2      	ldr	r6, [pc, #776]	; (800af50 <__ieee754_rem_pio2+0x340>)
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	ee10 0a10 	vmov	r0, s0
 800ac4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800af10 <__ieee754_rem_pio2+0x300>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	4629      	mov	r1, r5
 800ac56:	dd39      	ble.n	800accc <__ieee754_rem_pio2+0xbc>
 800ac58:	f7f5 face 	bl	80001f8 <__aeabi_dsub>
 800ac5c:	45b0      	cmp	r8, r6
 800ac5e:	4604      	mov	r4, r0
 800ac60:	460d      	mov	r5, r1
 800ac62:	d01b      	beq.n	800ac9c <__ieee754_rem_pio2+0x8c>
 800ac64:	a3ac      	add	r3, pc, #688	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f7f5 fac5 	bl	80001f8 <__aeabi_dsub>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	e9ca 2300 	strd	r2, r3, [sl]
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fabd 	bl	80001f8 <__aeabi_dsub>
 800ac7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 fab8 	bl	80001f8 <__aeabi_dsub>
 800ac88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac8c:	f04f 0b01 	mov.w	fp, #1
 800ac90:	4658      	mov	r0, fp
 800ac92:	b00b      	add	sp, #44	; 0x2c
 800ac94:	ecbd 8b02 	vpop	{d8}
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800af20 <__ieee754_rem_pio2+0x310>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faa9 	bl	80001f8 <__aeabi_dsub>
 800aca6:	a3a0      	add	r3, pc, #640	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	4604      	mov	r4, r0
 800acae:	460d      	mov	r5, r1
 800acb0:	f7f5 faa2 	bl	80001f8 <__aeabi_dsub>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	e9ca 2300 	strd	r2, r3, [sl]
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fa9a 	bl	80001f8 <__aeabi_dsub>
 800acc4:	a398      	add	r3, pc, #608	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	e7db      	b.n	800ac84 <__ieee754_rem_pio2+0x74>
 800accc:	f7f5 fa96 	bl	80001fc <__adddf3>
 800acd0:	45b0      	cmp	r8, r6
 800acd2:	4604      	mov	r4, r0
 800acd4:	460d      	mov	r5, r1
 800acd6:	d016      	beq.n	800ad06 <__ieee754_rem_pio2+0xf6>
 800acd8:	a38f      	add	r3, pc, #572	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7f5 fa8d 	bl	80001fc <__adddf3>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	e9ca 2300 	strd	r2, r3, [sl]
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fa83 	bl	80001f8 <__aeabi_dsub>
 800acf2:	a389      	add	r3, pc, #548	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fa80 	bl	80001fc <__adddf3>
 800acfc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ad00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad04:	e7c4      	b.n	800ac90 <__ieee754_rem_pio2+0x80>
 800ad06:	a386      	add	r3, pc, #536	; (adr r3, 800af20 <__ieee754_rem_pio2+0x310>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fa76 	bl	80001fc <__adddf3>
 800ad10:	a385      	add	r3, pc, #532	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7f5 fa6f 	bl	80001fc <__adddf3>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9ca 2300 	strd	r2, r3, [sl]
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7f5 fa65 	bl	80001f8 <__aeabi_dsub>
 800ad2e:	a37e      	add	r3, pc, #504	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	e7e0      	b.n	800acf8 <__ieee754_rem_pio2+0xe8>
 800ad36:	4b87      	ldr	r3, [pc, #540]	; (800af54 <__ieee754_rem_pio2+0x344>)
 800ad38:	4598      	cmp	r8, r3
 800ad3a:	f300 80d9 	bgt.w	800aef0 <__ieee754_rem_pio2+0x2e0>
 800ad3e:	f7ff fc6b 	bl	800a618 <fabs>
 800ad42:	ec55 4b10 	vmov	r4, r5, d0
 800ad46:	ee10 0a10 	vmov	r0, s0
 800ad4a:	a379      	add	r3, pc, #484	; (adr r3, 800af30 <__ieee754_rem_pio2+0x320>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fc09 	bl	8000568 <__aeabi_dmul>
 800ad56:	4b80      	ldr	r3, [pc, #512]	; (800af58 <__ieee754_rem_pio2+0x348>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f7f5 fa4f 	bl	80001fc <__adddf3>
 800ad5e:	f7f5 feb3 	bl	8000ac8 <__aeabi_d2iz>
 800ad62:	4683      	mov	fp, r0
 800ad64:	f7f5 fb96 	bl	8000494 <__aeabi_i2d>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	ec43 2b18 	vmov	d8, r2, r3
 800ad70:	a367      	add	r3, pc, #412	; (adr r3, 800af10 <__ieee754_rem_pio2+0x300>)
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f7f5 fbf7 	bl	8000568 <__aeabi_dmul>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fa39 	bl	80001f8 <__aeabi_dsub>
 800ad86:	a364      	add	r3, pc, #400	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	ec51 0b18 	vmov	r0, r1, d8
 800ad94:	f7f5 fbe8 	bl	8000568 <__aeabi_dmul>
 800ad98:	f1bb 0f1f 	cmp.w	fp, #31
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	dc0d      	bgt.n	800adbe <__ieee754_rem_pio2+0x1ae>
 800ada2:	4b6e      	ldr	r3, [pc, #440]	; (800af5c <__ieee754_rem_pio2+0x34c>)
 800ada4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ada8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adac:	4543      	cmp	r3, r8
 800adae:	d006      	beq.n	800adbe <__ieee754_rem_pio2+0x1ae>
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fa1e 	bl	80001f8 <__aeabi_dsub>
 800adbc:	e00f      	b.n	800adde <__ieee754_rem_pio2+0x1ce>
 800adbe:	462b      	mov	r3, r5
 800adc0:	4622      	mov	r2, r4
 800adc2:	4630      	mov	r0, r6
 800adc4:	4639      	mov	r1, r7
 800adc6:	f7f5 fa17 	bl	80001f8 <__aeabi_dsub>
 800adca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800add4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800add8:	f1b8 0f10 	cmp.w	r8, #16
 800addc:	dc02      	bgt.n	800ade4 <__ieee754_rem_pio2+0x1d4>
 800adde:	e9ca 0100 	strd	r0, r1, [sl]
 800ade2:	e039      	b.n	800ae58 <__ieee754_rem_pio2+0x248>
 800ade4:	a34e      	add	r3, pc, #312	; (adr r3, 800af20 <__ieee754_rem_pio2+0x310>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	ec51 0b18 	vmov	r0, r1, d8
 800adee:	f7f5 fbbb 	bl	8000568 <__aeabi_dmul>
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4630      	mov	r0, r6
 800adfc:	4639      	mov	r1, r7
 800adfe:	f7f5 f9fb 	bl	80001f8 <__aeabi_dsub>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4680      	mov	r8, r0
 800ae08:	4689      	mov	r9, r1
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	f7f5 f9f3 	bl	80001f8 <__aeabi_dsub>
 800ae12:	4622      	mov	r2, r4
 800ae14:	462b      	mov	r3, r5
 800ae16:	f7f5 f9ef 	bl	80001f8 <__aeabi_dsub>
 800ae1a:	a343      	add	r3, pc, #268	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	ec51 0b18 	vmov	r0, r1, d8
 800ae28:	f7f5 fb9e 	bl	8000568 <__aeabi_dmul>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	f7f5 f9e2 	bl	80001f8 <__aeabi_dsub>
 800ae34:	4602      	mov	r2, r0
 800ae36:	460b      	mov	r3, r1
 800ae38:	4604      	mov	r4, r0
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	4649      	mov	r1, r9
 800ae40:	f7f5 f9da 	bl	80001f8 <__aeabi_dsub>
 800ae44:	9a03      	ldr	r2, [sp, #12]
 800ae46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b31      	cmp	r3, #49	; 0x31
 800ae4e:	dc24      	bgt.n	800ae9a <__ieee754_rem_pio2+0x28a>
 800ae50:	e9ca 0100 	strd	r0, r1, [sl]
 800ae54:	4646      	mov	r6, r8
 800ae56:	464f      	mov	r7, r9
 800ae58:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4642      	mov	r2, r8
 800ae60:	464b      	mov	r3, r9
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 f9c8 	bl	80001f8 <__aeabi_dsub>
 800ae68:	462b      	mov	r3, r5
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	f7f5 f9c4 	bl	80001f8 <__aeabi_dsub>
 800ae70:	9b02      	ldr	r3, [sp, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae78:	f6bf af0a 	bge.w	800ac90 <__ieee754_rem_pio2+0x80>
 800ae7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae80:	f8ca 3004 	str.w	r3, [sl, #4]
 800ae84:	f8ca 8000 	str.w	r8, [sl]
 800ae88:	f8ca 0008 	str.w	r0, [sl, #8]
 800ae8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae90:	f8ca 300c 	str.w	r3, [sl, #12]
 800ae94:	f1cb 0b00 	rsb	fp, fp, #0
 800ae98:	e6fa      	b.n	800ac90 <__ieee754_rem_pio2+0x80>
 800ae9a:	a327      	add	r3, pc, #156	; (adr r3, 800af38 <__ieee754_rem_pio2+0x328>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	ec51 0b18 	vmov	r0, r1, d8
 800aea4:	f7f5 fb60 	bl	8000568 <__aeabi_dmul>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7f5 f9a0 	bl	80001f8 <__aeabi_dsub>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	4640      	mov	r0, r8
 800aec2:	4649      	mov	r1, r9
 800aec4:	f7f5 f998 	bl	80001f8 <__aeabi_dsub>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	f7f5 f994 	bl	80001f8 <__aeabi_dsub>
 800aed0:	a31b      	add	r3, pc, #108	; (adr r3, 800af40 <__ieee754_rem_pio2+0x330>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	ec51 0b18 	vmov	r0, r1, d8
 800aede:	f7f5 fb43 	bl	8000568 <__aeabi_dmul>
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 f987 	bl	80001f8 <__aeabi_dsub>
 800aeea:	4604      	mov	r4, r0
 800aeec:	460d      	mov	r5, r1
 800aeee:	e75f      	b.n	800adb0 <__ieee754_rem_pio2+0x1a0>
 800aef0:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <__ieee754_rem_pio2+0x350>)
 800aef2:	4598      	cmp	r8, r3
 800aef4:	dd36      	ble.n	800af64 <__ieee754_rem_pio2+0x354>
 800aef6:	ee10 2a10 	vmov	r2, s0
 800aefa:	462b      	mov	r3, r5
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	f7f5 f97a 	bl	80001f8 <__aeabi_dsub>
 800af04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af08:	e9ca 0100 	strd	r0, r1, [sl]
 800af0c:	e694      	b.n	800ac38 <__ieee754_rem_pio2+0x28>
 800af0e:	bf00      	nop
 800af10:	54400000 	.word	0x54400000
 800af14:	3ff921fb 	.word	0x3ff921fb
 800af18:	1a626331 	.word	0x1a626331
 800af1c:	3dd0b461 	.word	0x3dd0b461
 800af20:	1a600000 	.word	0x1a600000
 800af24:	3dd0b461 	.word	0x3dd0b461
 800af28:	2e037073 	.word	0x2e037073
 800af2c:	3ba3198a 	.word	0x3ba3198a
 800af30:	6dc9c883 	.word	0x6dc9c883
 800af34:	3fe45f30 	.word	0x3fe45f30
 800af38:	2e000000 	.word	0x2e000000
 800af3c:	3ba3198a 	.word	0x3ba3198a
 800af40:	252049c1 	.word	0x252049c1
 800af44:	397b839a 	.word	0x397b839a
 800af48:	3fe921fb 	.word	0x3fe921fb
 800af4c:	4002d97b 	.word	0x4002d97b
 800af50:	3ff921fb 	.word	0x3ff921fb
 800af54:	413921fb 	.word	0x413921fb
 800af58:	3fe00000 	.word	0x3fe00000
 800af5c:	0800bd7c 	.word	0x0800bd7c
 800af60:	7fefffff 	.word	0x7fefffff
 800af64:	ea4f 5428 	mov.w	r4, r8, asr #20
 800af68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800af6c:	ee10 0a10 	vmov	r0, s0
 800af70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800af74:	ee10 6a10 	vmov	r6, s0
 800af78:	460f      	mov	r7, r1
 800af7a:	f7f5 fda5 	bl	8000ac8 <__aeabi_d2iz>
 800af7e:	f7f5 fa89 	bl	8000494 <__aeabi_i2d>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af8e:	f7f5 f933 	bl	80001f8 <__aeabi_dsub>
 800af92:	4b22      	ldr	r3, [pc, #136]	; (800b01c <__ieee754_rem_pio2+0x40c>)
 800af94:	2200      	movs	r2, #0
 800af96:	f7f5 fae7 	bl	8000568 <__aeabi_dmul>
 800af9a:	460f      	mov	r7, r1
 800af9c:	4606      	mov	r6, r0
 800af9e:	f7f5 fd93 	bl	8000ac8 <__aeabi_d2iz>
 800afa2:	f7f5 fa77 	bl	8000494 <__aeabi_i2d>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4630      	mov	r0, r6
 800afac:	4639      	mov	r1, r7
 800afae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afb2:	f7f5 f921 	bl	80001f8 <__aeabi_dsub>
 800afb6:	4b19      	ldr	r3, [pc, #100]	; (800b01c <__ieee754_rem_pio2+0x40c>)
 800afb8:	2200      	movs	r2, #0
 800afba:	f7f5 fad5 	bl	8000568 <__aeabi_dmul>
 800afbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afc2:	ad04      	add	r5, sp, #16
 800afc4:	f04f 0803 	mov.w	r8, #3
 800afc8:	46a9      	mov	r9, r5
 800afca:	2600      	movs	r6, #0
 800afcc:	2700      	movs	r7, #0
 800afce:	4632      	mov	r2, r6
 800afd0:	463b      	mov	r3, r7
 800afd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800afd6:	46c3      	mov	fp, r8
 800afd8:	3d08      	subs	r5, #8
 800afda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800afde:	f7f5 fd2b 	bl	8000a38 <__aeabi_dcmpeq>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d1f3      	bne.n	800afce <__ieee754_rem_pio2+0x3be>
 800afe6:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <__ieee754_rem_pio2+0x410>)
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	2302      	movs	r3, #2
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4622      	mov	r2, r4
 800aff0:	465b      	mov	r3, fp
 800aff2:	4651      	mov	r1, sl
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 f993 	bl	800b320 <__kernel_rem_pio2>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	4683      	mov	fp, r0
 800b000:	f6bf ae46 	bge.w	800ac90 <__ieee754_rem_pio2+0x80>
 800b004:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b008:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b00c:	f8ca 3004 	str.w	r3, [sl, #4]
 800b010:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b018:	e73a      	b.n	800ae90 <__ieee754_rem_pio2+0x280>
 800b01a:	bf00      	nop
 800b01c:	41700000 	.word	0x41700000
 800b020:	0800bdfc 	.word	0x0800bdfc

0800b024 <__ieee754_sqrt>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	ec55 4b10 	vmov	r4, r5, d0
 800b02c:	4e56      	ldr	r6, [pc, #344]	; (800b188 <__ieee754_sqrt+0x164>)
 800b02e:	43ae      	bics	r6, r5
 800b030:	ee10 0a10 	vmov	r0, s0
 800b034:	ee10 3a10 	vmov	r3, s0
 800b038:	4629      	mov	r1, r5
 800b03a:	462a      	mov	r2, r5
 800b03c:	d110      	bne.n	800b060 <__ieee754_sqrt+0x3c>
 800b03e:	ee10 2a10 	vmov	r2, s0
 800b042:	462b      	mov	r3, r5
 800b044:	f7f5 fa90 	bl	8000568 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 f8d4 	bl	80001fc <__adddf3>
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	ec45 4b10 	vmov	d0, r4, r5
 800b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b060:	2d00      	cmp	r5, #0
 800b062:	dc10      	bgt.n	800b086 <__ieee754_sqrt+0x62>
 800b064:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b068:	4330      	orrs	r0, r6
 800b06a:	d0f5      	beq.n	800b058 <__ieee754_sqrt+0x34>
 800b06c:	b15d      	cbz	r5, 800b086 <__ieee754_sqrt+0x62>
 800b06e:	ee10 2a10 	vmov	r2, s0
 800b072:	462b      	mov	r3, r5
 800b074:	ee10 0a10 	vmov	r0, s0
 800b078:	f7f5 f8be 	bl	80001f8 <__aeabi_dsub>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	f7f5 fb9c 	bl	80007bc <__aeabi_ddiv>
 800b084:	e7e6      	b.n	800b054 <__ieee754_sqrt+0x30>
 800b086:	1509      	asrs	r1, r1, #20
 800b088:	d076      	beq.n	800b178 <__ieee754_sqrt+0x154>
 800b08a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b08e:	07ce      	lsls	r6, r1, #31
 800b090:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b094:	bf5e      	ittt	pl
 800b096:	0fda      	lsrpl	r2, r3, #31
 800b098:	005b      	lslpl	r3, r3, #1
 800b09a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b09e:	0fda      	lsrs	r2, r3, #31
 800b0a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b0a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	106d      	asrs	r5, r5, #1
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	f04f 0e16 	mov.w	lr, #22
 800b0b2:	4684      	mov	ip, r0
 800b0b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0b8:	eb0c 0401 	add.w	r4, ip, r1
 800b0bc:	4294      	cmp	r4, r2
 800b0be:	bfde      	ittt	le
 800b0c0:	1b12      	suble	r2, r2, r4
 800b0c2:	eb04 0c01 	addle.w	ip, r4, r1
 800b0c6:	1840      	addle	r0, r0, r1
 800b0c8:	0052      	lsls	r2, r2, #1
 800b0ca:	f1be 0e01 	subs.w	lr, lr, #1
 800b0ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b0d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b0d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0da:	d1ed      	bne.n	800b0b8 <__ieee754_sqrt+0x94>
 800b0dc:	4671      	mov	r1, lr
 800b0de:	2720      	movs	r7, #32
 800b0e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b0e4:	4562      	cmp	r2, ip
 800b0e6:	eb04 060e 	add.w	r6, r4, lr
 800b0ea:	dc02      	bgt.n	800b0f2 <__ieee754_sqrt+0xce>
 800b0ec:	d113      	bne.n	800b116 <__ieee754_sqrt+0xf2>
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	d811      	bhi.n	800b116 <__ieee754_sqrt+0xf2>
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	eb06 0e04 	add.w	lr, r6, r4
 800b0f8:	da43      	bge.n	800b182 <__ieee754_sqrt+0x15e>
 800b0fa:	f1be 0f00 	cmp.w	lr, #0
 800b0fe:	db40      	blt.n	800b182 <__ieee754_sqrt+0x15e>
 800b100:	f10c 0801 	add.w	r8, ip, #1
 800b104:	eba2 020c 	sub.w	r2, r2, ip
 800b108:	429e      	cmp	r6, r3
 800b10a:	bf88      	it	hi
 800b10c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b110:	1b9b      	subs	r3, r3, r6
 800b112:	4421      	add	r1, r4
 800b114:	46c4      	mov	ip, r8
 800b116:	0052      	lsls	r2, r2, #1
 800b118:	3f01      	subs	r7, #1
 800b11a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b11e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b122:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b126:	d1dd      	bne.n	800b0e4 <__ieee754_sqrt+0xc0>
 800b128:	4313      	orrs	r3, r2
 800b12a:	d006      	beq.n	800b13a <__ieee754_sqrt+0x116>
 800b12c:	1c4c      	adds	r4, r1, #1
 800b12e:	bf13      	iteet	ne
 800b130:	3101      	addne	r1, #1
 800b132:	3001      	addeq	r0, #1
 800b134:	4639      	moveq	r1, r7
 800b136:	f021 0101 	bicne.w	r1, r1, #1
 800b13a:	1043      	asrs	r3, r0, #1
 800b13c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b140:	0849      	lsrs	r1, r1, #1
 800b142:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b146:	07c2      	lsls	r2, r0, #31
 800b148:	bf48      	it	mi
 800b14a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b14e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b152:	460c      	mov	r4, r1
 800b154:	463d      	mov	r5, r7
 800b156:	e77f      	b.n	800b058 <__ieee754_sqrt+0x34>
 800b158:	0ada      	lsrs	r2, r3, #11
 800b15a:	3815      	subs	r0, #21
 800b15c:	055b      	lsls	r3, r3, #21
 800b15e:	2a00      	cmp	r2, #0
 800b160:	d0fa      	beq.n	800b158 <__ieee754_sqrt+0x134>
 800b162:	02d7      	lsls	r7, r2, #11
 800b164:	d50a      	bpl.n	800b17c <__ieee754_sqrt+0x158>
 800b166:	f1c1 0420 	rsb	r4, r1, #32
 800b16a:	fa23 f404 	lsr.w	r4, r3, r4
 800b16e:	1e4d      	subs	r5, r1, #1
 800b170:	408b      	lsls	r3, r1
 800b172:	4322      	orrs	r2, r4
 800b174:	1b41      	subs	r1, r0, r5
 800b176:	e788      	b.n	800b08a <__ieee754_sqrt+0x66>
 800b178:	4608      	mov	r0, r1
 800b17a:	e7f0      	b.n	800b15e <__ieee754_sqrt+0x13a>
 800b17c:	0052      	lsls	r2, r2, #1
 800b17e:	3101      	adds	r1, #1
 800b180:	e7ef      	b.n	800b162 <__ieee754_sqrt+0x13e>
 800b182:	46e0      	mov	r8, ip
 800b184:	e7be      	b.n	800b104 <__ieee754_sqrt+0xe0>
 800b186:	bf00      	nop
 800b188:	7ff00000 	.word	0x7ff00000
 800b18c:	00000000 	.word	0x00000000

0800b190 <__kernel_cos>:
 800b190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	ec57 6b10 	vmov	r6, r7, d0
 800b198:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b19c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b1a0:	ed8d 1b00 	vstr	d1, [sp]
 800b1a4:	da07      	bge.n	800b1b6 <__kernel_cos+0x26>
 800b1a6:	ee10 0a10 	vmov	r0, s0
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fc8c 	bl	8000ac8 <__aeabi_d2iz>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	f000 8088 	beq.w	800b2c6 <__kernel_cos+0x136>
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	463b      	mov	r3, r7
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	4639      	mov	r1, r7
 800b1be:	f7f5 f9d3 	bl	8000568 <__aeabi_dmul>
 800b1c2:	4b51      	ldr	r3, [pc, #324]	; (800b308 <__kernel_cos+0x178>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	f7f5 f9cd 	bl	8000568 <__aeabi_dmul>
 800b1ce:	a340      	add	r3, pc, #256	; (adr r3, 800b2d0 <__kernel_cos+0x140>)
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	468b      	mov	fp, r1
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 f9c4 	bl	8000568 <__aeabi_dmul>
 800b1e0:	a33d      	add	r3, pc, #244	; (adr r3, 800b2d8 <__kernel_cos+0x148>)
 800b1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e6:	f7f5 f809 	bl	80001fc <__adddf3>
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	462b      	mov	r3, r5
 800b1ee:	f7f5 f9bb 	bl	8000568 <__aeabi_dmul>
 800b1f2:	a33b      	add	r3, pc, #236	; (adr r3, 800b2e0 <__kernel_cos+0x150>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	f7f4 fffe 	bl	80001f8 <__aeabi_dsub>
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	462b      	mov	r3, r5
 800b200:	f7f5 f9b2 	bl	8000568 <__aeabi_dmul>
 800b204:	a338      	add	r3, pc, #224	; (adr r3, 800b2e8 <__kernel_cos+0x158>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f7f4 fff7 	bl	80001fc <__adddf3>
 800b20e:	4622      	mov	r2, r4
 800b210:	462b      	mov	r3, r5
 800b212:	f7f5 f9a9 	bl	8000568 <__aeabi_dmul>
 800b216:	a336      	add	r3, pc, #216	; (adr r3, 800b2f0 <__kernel_cos+0x160>)
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	f7f4 ffec 	bl	80001f8 <__aeabi_dsub>
 800b220:	4622      	mov	r2, r4
 800b222:	462b      	mov	r3, r5
 800b224:	f7f5 f9a0 	bl	8000568 <__aeabi_dmul>
 800b228:	a333      	add	r3, pc, #204	; (adr r3, 800b2f8 <__kernel_cos+0x168>)
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	f7f4 ffe5 	bl	80001fc <__adddf3>
 800b232:	4622      	mov	r2, r4
 800b234:	462b      	mov	r3, r5
 800b236:	f7f5 f997 	bl	8000568 <__aeabi_dmul>
 800b23a:	4622      	mov	r2, r4
 800b23c:	462b      	mov	r3, r5
 800b23e:	f7f5 f993 	bl	8000568 <__aeabi_dmul>
 800b242:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b246:	4604      	mov	r4, r0
 800b248:	460d      	mov	r5, r1
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	f7f5 f98b 	bl	8000568 <__aeabi_dmul>
 800b252:	460b      	mov	r3, r1
 800b254:	4602      	mov	r2, r0
 800b256:	4629      	mov	r1, r5
 800b258:	4620      	mov	r0, r4
 800b25a:	f7f4 ffcd 	bl	80001f8 <__aeabi_dsub>
 800b25e:	4b2b      	ldr	r3, [pc, #172]	; (800b30c <__kernel_cos+0x17c>)
 800b260:	4598      	cmp	r8, r3
 800b262:	4606      	mov	r6, r0
 800b264:	460f      	mov	r7, r1
 800b266:	dc10      	bgt.n	800b28a <__kernel_cos+0xfa>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4650      	mov	r0, sl
 800b26e:	4659      	mov	r1, fp
 800b270:	f7f4 ffc2 	bl	80001f8 <__aeabi_dsub>
 800b274:	460b      	mov	r3, r1
 800b276:	4926      	ldr	r1, [pc, #152]	; (800b310 <__kernel_cos+0x180>)
 800b278:	4602      	mov	r2, r0
 800b27a:	2000      	movs	r0, #0
 800b27c:	f7f4 ffbc 	bl	80001f8 <__aeabi_dsub>
 800b280:	ec41 0b10 	vmov	d0, r0, r1
 800b284:	b003      	add	sp, #12
 800b286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28a:	4b22      	ldr	r3, [pc, #136]	; (800b314 <__kernel_cos+0x184>)
 800b28c:	4920      	ldr	r1, [pc, #128]	; (800b310 <__kernel_cos+0x180>)
 800b28e:	4598      	cmp	r8, r3
 800b290:	bfcc      	ite	gt
 800b292:	4d21      	ldrgt	r5, [pc, #132]	; (800b318 <__kernel_cos+0x188>)
 800b294:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b298:	2400      	movs	r4, #0
 800b29a:	4622      	mov	r2, r4
 800b29c:	462b      	mov	r3, r5
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f7f4 ffaa 	bl	80001f8 <__aeabi_dsub>
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	4689      	mov	r9, r1
 800b2aa:	462b      	mov	r3, r5
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	f7f4 ffa2 	bl	80001f8 <__aeabi_dsub>
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	f7f4 ff9e 	bl	80001f8 <__aeabi_dsub>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	e7da      	b.n	800b27c <__kernel_cos+0xec>
 800b2c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b300 <__kernel_cos+0x170>
 800b2ca:	e7db      	b.n	800b284 <__kernel_cos+0xf4>
 800b2cc:	f3af 8000 	nop.w
 800b2d0:	be8838d4 	.word	0xbe8838d4
 800b2d4:	bda8fae9 	.word	0xbda8fae9
 800b2d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b2dc:	3e21ee9e 	.word	0x3e21ee9e
 800b2e0:	809c52ad 	.word	0x809c52ad
 800b2e4:	3e927e4f 	.word	0x3e927e4f
 800b2e8:	19cb1590 	.word	0x19cb1590
 800b2ec:	3efa01a0 	.word	0x3efa01a0
 800b2f0:	16c15177 	.word	0x16c15177
 800b2f4:	3f56c16c 	.word	0x3f56c16c
 800b2f8:	5555554c 	.word	0x5555554c
 800b2fc:	3fa55555 	.word	0x3fa55555
 800b300:	00000000 	.word	0x00000000
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	3fe00000 	.word	0x3fe00000
 800b30c:	3fd33332 	.word	0x3fd33332
 800b310:	3ff00000 	.word	0x3ff00000
 800b314:	3fe90000 	.word	0x3fe90000
 800b318:	3fd20000 	.word	0x3fd20000
 800b31c:	00000000 	.word	0x00000000

0800b320 <__kernel_rem_pio2>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	ed2d 8b02 	vpush	{d8}
 800b328:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b32c:	f112 0f14 	cmn.w	r2, #20
 800b330:	9308      	str	r3, [sp, #32]
 800b332:	9101      	str	r1, [sp, #4]
 800b334:	4bc6      	ldr	r3, [pc, #792]	; (800b650 <__kernel_rem_pio2+0x330>)
 800b336:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b338:	9009      	str	r0, [sp, #36]	; 0x24
 800b33a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b346:	bfa8      	it	ge
 800b348:	1ed4      	subge	r4, r2, #3
 800b34a:	9306      	str	r3, [sp, #24]
 800b34c:	bfb2      	itee	lt
 800b34e:	2400      	movlt	r4, #0
 800b350:	2318      	movge	r3, #24
 800b352:	fb94 f4f3 	sdivge	r4, r4, r3
 800b356:	f06f 0317 	mvn.w	r3, #23
 800b35a:	fb04 3303 	mla	r3, r4, r3, r3
 800b35e:	eb03 0a02 	add.w	sl, r3, r2
 800b362:	9b04      	ldr	r3, [sp, #16]
 800b364:	9a06      	ldr	r2, [sp, #24]
 800b366:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b640 <__kernel_rem_pio2+0x320>
 800b36a:	eb03 0802 	add.w	r8, r3, r2
 800b36e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b370:	1aa7      	subs	r7, r4, r2
 800b372:	ae20      	add	r6, sp, #128	; 0x80
 800b374:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b378:	2500      	movs	r5, #0
 800b37a:	4545      	cmp	r5, r8
 800b37c:	dd18      	ble.n	800b3b0 <__kernel_rem_pio2+0x90>
 800b37e:	9b08      	ldr	r3, [sp, #32]
 800b380:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b384:	aa20      	add	r2, sp, #128	; 0x80
 800b386:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b640 <__kernel_rem_pio2+0x320>
 800b38a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b38e:	f1c3 0301 	rsb	r3, r3, #1
 800b392:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b396:	9307      	str	r3, [sp, #28]
 800b398:	9b07      	ldr	r3, [sp, #28]
 800b39a:	9a04      	ldr	r2, [sp, #16]
 800b39c:	4443      	add	r3, r8
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	db2f      	blt.n	800b402 <__kernel_rem_pio2+0xe2>
 800b3a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b3a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b3aa:	462f      	mov	r7, r5
 800b3ac:	2600      	movs	r6, #0
 800b3ae:	e01b      	b.n	800b3e8 <__kernel_rem_pio2+0xc8>
 800b3b0:	42ef      	cmn	r7, r5
 800b3b2:	d407      	bmi.n	800b3c4 <__kernel_rem_pio2+0xa4>
 800b3b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b3b8:	f7f5 f86c 	bl	8000494 <__aeabi_i2d>
 800b3bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b3c0:	3501      	adds	r5, #1
 800b3c2:	e7da      	b.n	800b37a <__kernel_rem_pio2+0x5a>
 800b3c4:	ec51 0b18 	vmov	r0, r1, d8
 800b3c8:	e7f8      	b.n	800b3bc <__kernel_rem_pio2+0x9c>
 800b3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b3d2:	f7f5 f8c9 	bl	8000568 <__aeabi_dmul>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3de:	f7f4 ff0d 	bl	80001fc <__adddf3>
 800b3e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e6:	3601      	adds	r6, #1
 800b3e8:	9b06      	ldr	r3, [sp, #24]
 800b3ea:	429e      	cmp	r6, r3
 800b3ec:	f1a7 0708 	sub.w	r7, r7, #8
 800b3f0:	ddeb      	ble.n	800b3ca <__kernel_rem_pio2+0xaa>
 800b3f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3f6:	3508      	adds	r5, #8
 800b3f8:	ecab 7b02 	vstmia	fp!, {d7}
 800b3fc:	f108 0801 	add.w	r8, r8, #1
 800b400:	e7ca      	b.n	800b398 <__kernel_rem_pio2+0x78>
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	aa0c      	add	r2, sp, #48	; 0x30
 800b406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b40a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b40c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b40e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b412:	9c04      	ldr	r4, [sp, #16]
 800b414:	930a      	str	r3, [sp, #40]	; 0x28
 800b416:	ab98      	add	r3, sp, #608	; 0x260
 800b418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b41c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b420:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b424:	f8cd b008 	str.w	fp, [sp, #8]
 800b428:	4625      	mov	r5, r4
 800b42a:	2d00      	cmp	r5, #0
 800b42c:	dc78      	bgt.n	800b520 <__kernel_rem_pio2+0x200>
 800b42e:	ec47 6b10 	vmov	d0, r6, r7
 800b432:	4650      	mov	r0, sl
 800b434:	f000 fbfc 	bl	800bc30 <scalbn>
 800b438:	ec57 6b10 	vmov	r6, r7, d0
 800b43c:	2200      	movs	r2, #0
 800b43e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b442:	ee10 0a10 	vmov	r0, s0
 800b446:	4639      	mov	r1, r7
 800b448:	f7f5 f88e 	bl	8000568 <__aeabi_dmul>
 800b44c:	ec41 0b10 	vmov	d0, r0, r1
 800b450:	f000 fb66 	bl	800bb20 <floor>
 800b454:	4b7f      	ldr	r3, [pc, #508]	; (800b654 <__kernel_rem_pio2+0x334>)
 800b456:	ec51 0b10 	vmov	r0, r1, d0
 800b45a:	2200      	movs	r2, #0
 800b45c:	f7f5 f884 	bl	8000568 <__aeabi_dmul>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f4 fec6 	bl	80001f8 <__aeabi_dsub>
 800b46c:	460f      	mov	r7, r1
 800b46e:	4606      	mov	r6, r0
 800b470:	f7f5 fb2a 	bl	8000ac8 <__aeabi_d2iz>
 800b474:	9007      	str	r0, [sp, #28]
 800b476:	f7f5 f80d 	bl	8000494 <__aeabi_i2d>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f4 feb9 	bl	80001f8 <__aeabi_dsub>
 800b486:	f1ba 0f00 	cmp.w	sl, #0
 800b48a:	4606      	mov	r6, r0
 800b48c:	460f      	mov	r7, r1
 800b48e:	dd70      	ble.n	800b572 <__kernel_rem_pio2+0x252>
 800b490:	1e62      	subs	r2, r4, #1
 800b492:	ab0c      	add	r3, sp, #48	; 0x30
 800b494:	9d07      	ldr	r5, [sp, #28]
 800b496:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b49a:	f1ca 0118 	rsb	r1, sl, #24
 800b49e:	fa40 f301 	asr.w	r3, r0, r1
 800b4a2:	441d      	add	r5, r3
 800b4a4:	408b      	lsls	r3, r1
 800b4a6:	1ac0      	subs	r0, r0, r3
 800b4a8:	ab0c      	add	r3, sp, #48	; 0x30
 800b4aa:	9507      	str	r5, [sp, #28]
 800b4ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b4b0:	f1ca 0317 	rsb	r3, sl, #23
 800b4b4:	fa40 f303 	asr.w	r3, r0, r3
 800b4b8:	9302      	str	r3, [sp, #8]
 800b4ba:	9b02      	ldr	r3, [sp, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dd66      	ble.n	800b58e <__kernel_rem_pio2+0x26e>
 800b4c0:	9b07      	ldr	r3, [sp, #28]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	9307      	str	r3, [sp, #28]
 800b4c8:	4615      	mov	r5, r2
 800b4ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b4ce:	4294      	cmp	r4, r2
 800b4d0:	f300 8099 	bgt.w	800b606 <__kernel_rem_pio2+0x2e6>
 800b4d4:	f1ba 0f00 	cmp.w	sl, #0
 800b4d8:	dd07      	ble.n	800b4ea <__kernel_rem_pio2+0x1ca>
 800b4da:	f1ba 0f01 	cmp.w	sl, #1
 800b4de:	f000 80a5 	beq.w	800b62c <__kernel_rem_pio2+0x30c>
 800b4e2:	f1ba 0f02 	cmp.w	sl, #2
 800b4e6:	f000 80c1 	beq.w	800b66c <__kernel_rem_pio2+0x34c>
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d14e      	bne.n	800b58e <__kernel_rem_pio2+0x26e>
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	4958      	ldr	r1, [pc, #352]	; (800b658 <__kernel_rem_pio2+0x338>)
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f7f4 fe7e 	bl	80001f8 <__aeabi_dsub>
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	2d00      	cmp	r5, #0
 800b502:	d044      	beq.n	800b58e <__kernel_rem_pio2+0x26e>
 800b504:	4650      	mov	r0, sl
 800b506:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b648 <__kernel_rem_pio2+0x328>
 800b50a:	f000 fb91 	bl	800bc30 <scalbn>
 800b50e:	4630      	mov	r0, r6
 800b510:	4639      	mov	r1, r7
 800b512:	ec53 2b10 	vmov	r2, r3, d0
 800b516:	f7f4 fe6f 	bl	80001f8 <__aeabi_dsub>
 800b51a:	4606      	mov	r6, r0
 800b51c:	460f      	mov	r7, r1
 800b51e:	e036      	b.n	800b58e <__kernel_rem_pio2+0x26e>
 800b520:	4b4e      	ldr	r3, [pc, #312]	; (800b65c <__kernel_rem_pio2+0x33c>)
 800b522:	2200      	movs	r2, #0
 800b524:	4630      	mov	r0, r6
 800b526:	4639      	mov	r1, r7
 800b528:	f7f5 f81e 	bl	8000568 <__aeabi_dmul>
 800b52c:	f7f5 facc 	bl	8000ac8 <__aeabi_d2iz>
 800b530:	f7f4 ffb0 	bl	8000494 <__aeabi_i2d>
 800b534:	4b4a      	ldr	r3, [pc, #296]	; (800b660 <__kernel_rem_pio2+0x340>)
 800b536:	2200      	movs	r2, #0
 800b538:	4680      	mov	r8, r0
 800b53a:	4689      	mov	r9, r1
 800b53c:	f7f5 f814 	bl	8000568 <__aeabi_dmul>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4630      	mov	r0, r6
 800b546:	4639      	mov	r1, r7
 800b548:	f7f4 fe56 	bl	80001f8 <__aeabi_dsub>
 800b54c:	f7f5 fabc 	bl	8000ac8 <__aeabi_d2iz>
 800b550:	9b02      	ldr	r3, [sp, #8]
 800b552:	f843 0b04 	str.w	r0, [r3], #4
 800b556:	3d01      	subs	r5, #1
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b55c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	4640      	mov	r0, r8
 800b566:	4649      	mov	r1, r9
 800b568:	f7f4 fe48 	bl	80001fc <__adddf3>
 800b56c:	4606      	mov	r6, r0
 800b56e:	460f      	mov	r7, r1
 800b570:	e75b      	b.n	800b42a <__kernel_rem_pio2+0x10a>
 800b572:	d105      	bne.n	800b580 <__kernel_rem_pio2+0x260>
 800b574:	1e63      	subs	r3, r4, #1
 800b576:	aa0c      	add	r2, sp, #48	; 0x30
 800b578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b57c:	15c3      	asrs	r3, r0, #23
 800b57e:	e79b      	b.n	800b4b8 <__kernel_rem_pio2+0x198>
 800b580:	4b38      	ldr	r3, [pc, #224]	; (800b664 <__kernel_rem_pio2+0x344>)
 800b582:	2200      	movs	r2, #0
 800b584:	f7f5 fa76 	bl	8000a74 <__aeabi_dcmpge>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d139      	bne.n	800b600 <__kernel_rem_pio2+0x2e0>
 800b58c:	9002      	str	r0, [sp, #8]
 800b58e:	2200      	movs	r2, #0
 800b590:	2300      	movs	r3, #0
 800b592:	4630      	mov	r0, r6
 800b594:	4639      	mov	r1, r7
 800b596:	f7f5 fa4f 	bl	8000a38 <__aeabi_dcmpeq>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f000 80b4 	beq.w	800b708 <__kernel_rem_pio2+0x3e8>
 800b5a0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	9904      	ldr	r1, [sp, #16]
 800b5aa:	428b      	cmp	r3, r1
 800b5ac:	da65      	bge.n	800b67a <__kernel_rem_pio2+0x35a>
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d07b      	beq.n	800b6aa <__kernel_rem_pio2+0x38a>
 800b5b2:	ab0c      	add	r3, sp, #48	; 0x30
 800b5b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b5b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 80a0 	beq.w	800b702 <__kernel_rem_pio2+0x3e2>
 800b5c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b648 <__kernel_rem_pio2+0x328>
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	f000 fb32 	bl	800bc30 <scalbn>
 800b5cc:	4f23      	ldr	r7, [pc, #140]	; (800b65c <__kernel_rem_pio2+0x33c>)
 800b5ce:	ec55 4b10 	vmov	r4, r5, d0
 800b5d2:	46d8      	mov	r8, fp
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	f1b8 0f00 	cmp.w	r8, #0
 800b5da:	f280 80cf 	bge.w	800b77c <__kernel_rem_pio2+0x45c>
 800b5de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b640 <__kernel_rem_pio2+0x320>
 800b5e2:	465f      	mov	r7, fp
 800b5e4:	f04f 0800 	mov.w	r8, #0
 800b5e8:	2f00      	cmp	r7, #0
 800b5ea:	f2c0 80fd 	blt.w	800b7e8 <__kernel_rem_pio2+0x4c8>
 800b5ee:	ab70      	add	r3, sp, #448	; 0x1c0
 800b5f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b668 <__kernel_rem_pio2+0x348>
 800b5f4:	ec55 4b18 	vmov	r4, r5, d8
 800b5f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b5fc:	2600      	movs	r6, #0
 800b5fe:	e0e5      	b.n	800b7cc <__kernel_rem_pio2+0x4ac>
 800b600:	2302      	movs	r3, #2
 800b602:	9302      	str	r3, [sp, #8]
 800b604:	e75c      	b.n	800b4c0 <__kernel_rem_pio2+0x1a0>
 800b606:	f8db 3000 	ldr.w	r3, [fp]
 800b60a:	b955      	cbnz	r5, 800b622 <__kernel_rem_pio2+0x302>
 800b60c:	b123      	cbz	r3, 800b618 <__kernel_rem_pio2+0x2f8>
 800b60e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b612:	f8cb 3000 	str.w	r3, [fp]
 800b616:	2301      	movs	r3, #1
 800b618:	3201      	adds	r2, #1
 800b61a:	f10b 0b04 	add.w	fp, fp, #4
 800b61e:	461d      	mov	r5, r3
 800b620:	e755      	b.n	800b4ce <__kernel_rem_pio2+0x1ae>
 800b622:	1acb      	subs	r3, r1, r3
 800b624:	f8cb 3000 	str.w	r3, [fp]
 800b628:	462b      	mov	r3, r5
 800b62a:	e7f5      	b.n	800b618 <__kernel_rem_pio2+0x2f8>
 800b62c:	1e62      	subs	r2, r4, #1
 800b62e:	ab0c      	add	r3, sp, #48	; 0x30
 800b630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b634:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b638:	a90c      	add	r1, sp, #48	; 0x30
 800b63a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b63e:	e754      	b.n	800b4ea <__kernel_rem_pio2+0x1ca>
	...
 800b64c:	3ff00000 	.word	0x3ff00000
 800b650:	0800bf48 	.word	0x0800bf48
 800b654:	40200000 	.word	0x40200000
 800b658:	3ff00000 	.word	0x3ff00000
 800b65c:	3e700000 	.word	0x3e700000
 800b660:	41700000 	.word	0x41700000
 800b664:	3fe00000 	.word	0x3fe00000
 800b668:	0800bf08 	.word	0x0800bf08
 800b66c:	1e62      	subs	r2, r4, #1
 800b66e:	ab0c      	add	r3, sp, #48	; 0x30
 800b670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b674:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b678:	e7de      	b.n	800b638 <__kernel_rem_pio2+0x318>
 800b67a:	a90c      	add	r1, sp, #48	; 0x30
 800b67c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b680:	3b01      	subs	r3, #1
 800b682:	430a      	orrs	r2, r1
 800b684:	e790      	b.n	800b5a8 <__kernel_rem_pio2+0x288>
 800b686:	3301      	adds	r3, #1
 800b688:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b68c:	2900      	cmp	r1, #0
 800b68e:	d0fa      	beq.n	800b686 <__kernel_rem_pio2+0x366>
 800b690:	9a08      	ldr	r2, [sp, #32]
 800b692:	18e3      	adds	r3, r4, r3
 800b694:	18a6      	adds	r6, r4, r2
 800b696:	aa20      	add	r2, sp, #128	; 0x80
 800b698:	1c65      	adds	r5, r4, #1
 800b69a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	9b02      	ldr	r3, [sp, #8]
 800b6a2:	42ab      	cmp	r3, r5
 800b6a4:	da04      	bge.n	800b6b0 <__kernel_rem_pio2+0x390>
 800b6a6:	461c      	mov	r4, r3
 800b6a8:	e6b5      	b.n	800b416 <__kernel_rem_pio2+0xf6>
 800b6aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e7eb      	b.n	800b688 <__kernel_rem_pio2+0x368>
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6b6:	f7f4 feed 	bl	8000494 <__aeabi_i2d>
 800b6ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c0:	46b3      	mov	fp, r6
 800b6c2:	461c      	mov	r4, r3
 800b6c4:	2700      	movs	r7, #0
 800b6c6:	f04f 0800 	mov.w	r8, #0
 800b6ca:	f04f 0900 	mov.w	r9, #0
 800b6ce:	9b06      	ldr	r3, [sp, #24]
 800b6d0:	429f      	cmp	r7, r3
 800b6d2:	dd06      	ble.n	800b6e2 <__kernel_rem_pio2+0x3c2>
 800b6d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800b6d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b6da:	e9c3 8900 	strd	r8, r9, [r3]
 800b6de:	3501      	adds	r5, #1
 800b6e0:	e7de      	b.n	800b6a0 <__kernel_rem_pio2+0x380>
 800b6e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b6e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b6ea:	f7f4 ff3d 	bl	8000568 <__aeabi_dmul>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 fd81 	bl	80001fc <__adddf3>
 800b6fa:	3701      	adds	r7, #1
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	4689      	mov	r9, r1
 800b700:	e7e5      	b.n	800b6ce <__kernel_rem_pio2+0x3ae>
 800b702:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b706:	e754      	b.n	800b5b2 <__kernel_rem_pio2+0x292>
 800b708:	ec47 6b10 	vmov	d0, r6, r7
 800b70c:	f1ca 0000 	rsb	r0, sl, #0
 800b710:	f000 fa8e 	bl	800bc30 <scalbn>
 800b714:	ec57 6b10 	vmov	r6, r7, d0
 800b718:	4b9f      	ldr	r3, [pc, #636]	; (800b998 <__kernel_rem_pio2+0x678>)
 800b71a:	ee10 0a10 	vmov	r0, s0
 800b71e:	2200      	movs	r2, #0
 800b720:	4639      	mov	r1, r7
 800b722:	f7f5 f9a7 	bl	8000a74 <__aeabi_dcmpge>
 800b726:	b300      	cbz	r0, 800b76a <__kernel_rem_pio2+0x44a>
 800b728:	4b9c      	ldr	r3, [pc, #624]	; (800b99c <__kernel_rem_pio2+0x67c>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f4 ff1a 	bl	8000568 <__aeabi_dmul>
 800b734:	f7f5 f9c8 	bl	8000ac8 <__aeabi_d2iz>
 800b738:	4605      	mov	r5, r0
 800b73a:	f7f4 feab 	bl	8000494 <__aeabi_i2d>
 800b73e:	4b96      	ldr	r3, [pc, #600]	; (800b998 <__kernel_rem_pio2+0x678>)
 800b740:	2200      	movs	r2, #0
 800b742:	f7f4 ff11 	bl	8000568 <__aeabi_dmul>
 800b746:	460b      	mov	r3, r1
 800b748:	4602      	mov	r2, r0
 800b74a:	4639      	mov	r1, r7
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7f4 fd53 	bl	80001f8 <__aeabi_dsub>
 800b752:	f7f5 f9b9 	bl	8000ac8 <__aeabi_d2iz>
 800b756:	f104 0b01 	add.w	fp, r4, #1
 800b75a:	ab0c      	add	r3, sp, #48	; 0x30
 800b75c:	f10a 0a18 	add.w	sl, sl, #24
 800b760:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b764:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b768:	e72b      	b.n	800b5c2 <__kernel_rem_pio2+0x2a2>
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7f5 f9ab 	bl	8000ac8 <__aeabi_d2iz>
 800b772:	ab0c      	add	r3, sp, #48	; 0x30
 800b774:	46a3      	mov	fp, r4
 800b776:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b77a:	e722      	b.n	800b5c2 <__kernel_rem_pio2+0x2a2>
 800b77c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b77e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b782:	ab0c      	add	r3, sp, #48	; 0x30
 800b784:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b788:	f7f4 fe84 	bl	8000494 <__aeabi_i2d>
 800b78c:	4622      	mov	r2, r4
 800b78e:	462b      	mov	r3, r5
 800b790:	f7f4 feea 	bl	8000568 <__aeabi_dmul>
 800b794:	4632      	mov	r2, r6
 800b796:	e9c9 0100 	strd	r0, r1, [r9]
 800b79a:	463b      	mov	r3, r7
 800b79c:	4620      	mov	r0, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7f4 fee2 	bl	8000568 <__aeabi_dmul>
 800b7a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	e713      	b.n	800b5d6 <__kernel_rem_pio2+0x2b6>
 800b7ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b7b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b7b6:	f7f4 fed7 	bl	8000568 <__aeabi_dmul>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f4 fd1b 	bl	80001fc <__adddf3>
 800b7c6:	3601      	adds	r6, #1
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	9b04      	ldr	r3, [sp, #16]
 800b7ce:	429e      	cmp	r6, r3
 800b7d0:	dc01      	bgt.n	800b7d6 <__kernel_rem_pio2+0x4b6>
 800b7d2:	45b0      	cmp	r8, r6
 800b7d4:	daeb      	bge.n	800b7ae <__kernel_rem_pio2+0x48e>
 800b7d6:	ab48      	add	r3, sp, #288	; 0x120
 800b7d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b7dc:	e9c3 4500 	strd	r4, r5, [r3]
 800b7e0:	3f01      	subs	r7, #1
 800b7e2:	f108 0801 	add.w	r8, r8, #1
 800b7e6:	e6ff      	b.n	800b5e8 <__kernel_rem_pio2+0x2c8>
 800b7e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	dc0b      	bgt.n	800b806 <__kernel_rem_pio2+0x4e6>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	dc6e      	bgt.n	800b8d0 <__kernel_rem_pio2+0x5b0>
 800b7f2:	d045      	beq.n	800b880 <__kernel_rem_pio2+0x560>
 800b7f4:	9b07      	ldr	r3, [sp, #28]
 800b7f6:	f003 0007 	and.w	r0, r3, #7
 800b7fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b7fe:	ecbd 8b02 	vpop	{d8}
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d1f3      	bne.n	800b7f4 <__kernel_rem_pio2+0x4d4>
 800b80c:	ab48      	add	r3, sp, #288	; 0x120
 800b80e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b812:	46d0      	mov	r8, sl
 800b814:	46d9      	mov	r9, fp
 800b816:	f1b9 0f00 	cmp.w	r9, #0
 800b81a:	f1a8 0808 	sub.w	r8, r8, #8
 800b81e:	dc64      	bgt.n	800b8ea <__kernel_rem_pio2+0x5ca>
 800b820:	465c      	mov	r4, fp
 800b822:	2c01      	cmp	r4, #1
 800b824:	f1aa 0a08 	sub.w	sl, sl, #8
 800b828:	dc7e      	bgt.n	800b928 <__kernel_rem_pio2+0x608>
 800b82a:	2000      	movs	r0, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	f1bb 0f01 	cmp.w	fp, #1
 800b832:	f300 8097 	bgt.w	800b964 <__kernel_rem_pio2+0x644>
 800b836:	9b02      	ldr	r3, [sp, #8]
 800b838:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b83c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 8099 	bne.w	800b978 <__kernel_rem_pio2+0x658>
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	e9c3 5600 	strd	r5, r6, [r3]
 800b84c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b850:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b854:	e7ce      	b.n	800b7f4 <__kernel_rem_pio2+0x4d4>
 800b856:	ab48      	add	r3, sp, #288	; 0x120
 800b858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7f4 fccc 	bl	80001fc <__adddf3>
 800b864:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b868:	f1bb 0f00 	cmp.w	fp, #0
 800b86c:	daf3      	bge.n	800b856 <__kernel_rem_pio2+0x536>
 800b86e:	9b02      	ldr	r3, [sp, #8]
 800b870:	b113      	cbz	r3, 800b878 <__kernel_rem_pio2+0x558>
 800b872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b876:	4619      	mov	r1, r3
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	e9c3 0100 	strd	r0, r1, [r3]
 800b87e:	e7b9      	b.n	800b7f4 <__kernel_rem_pio2+0x4d4>
 800b880:	2000      	movs	r0, #0
 800b882:	2100      	movs	r1, #0
 800b884:	e7f0      	b.n	800b868 <__kernel_rem_pio2+0x548>
 800b886:	ab48      	add	r3, sp, #288	; 0x120
 800b888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fcb4 	bl	80001fc <__adddf3>
 800b894:	3c01      	subs	r4, #1
 800b896:	2c00      	cmp	r4, #0
 800b898:	daf5      	bge.n	800b886 <__kernel_rem_pio2+0x566>
 800b89a:	9b02      	ldr	r3, [sp, #8]
 800b89c:	b1e3      	cbz	r3, 800b8d8 <__kernel_rem_pio2+0x5b8>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8a4:	9c01      	ldr	r4, [sp, #4]
 800b8a6:	e9c4 2300 	strd	r2, r3, [r4]
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b8b2:	f7f4 fca1 	bl	80001f8 <__aeabi_dsub>
 800b8b6:	ad4a      	add	r5, sp, #296	; 0x128
 800b8b8:	2401      	movs	r4, #1
 800b8ba:	45a3      	cmp	fp, r4
 800b8bc:	da0f      	bge.n	800b8de <__kernel_rem_pio2+0x5be>
 800b8be:	9b02      	ldr	r3, [sp, #8]
 800b8c0:	b113      	cbz	r3, 800b8c8 <__kernel_rem_pio2+0x5a8>
 800b8c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	9b01      	ldr	r3, [sp, #4]
 800b8ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b8ce:	e791      	b.n	800b7f4 <__kernel_rem_pio2+0x4d4>
 800b8d0:	465c      	mov	r4, fp
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	e7de      	b.n	800b896 <__kernel_rem_pio2+0x576>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	e7e2      	b.n	800b8a4 <__kernel_rem_pio2+0x584>
 800b8de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b8e2:	f7f4 fc8b 	bl	80001fc <__adddf3>
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	e7e7      	b.n	800b8ba <__kernel_rem_pio2+0x59a>
 800b8ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b8ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	4632      	mov	r2, r6
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	f7f4 fc7f 	bl	80001fc <__adddf3>
 800b8fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4620      	mov	r0, r4
 800b908:	4629      	mov	r1, r5
 800b90a:	f7f4 fc75 	bl	80001f8 <__aeabi_dsub>
 800b90e:	4632      	mov	r2, r6
 800b910:	463b      	mov	r3, r7
 800b912:	f7f4 fc73 	bl	80001fc <__adddf3>
 800b916:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b91a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b91e:	ed88 7b00 	vstr	d7, [r8]
 800b922:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b926:	e776      	b.n	800b816 <__kernel_rem_pio2+0x4f6>
 800b928:	e9da 8900 	ldrd	r8, r9, [sl]
 800b92c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b930:	4640      	mov	r0, r8
 800b932:	4632      	mov	r2, r6
 800b934:	463b      	mov	r3, r7
 800b936:	4649      	mov	r1, r9
 800b938:	f7f4 fc60 	bl	80001fc <__adddf3>
 800b93c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4640      	mov	r0, r8
 800b946:	4649      	mov	r1, r9
 800b948:	f7f4 fc56 	bl	80001f8 <__aeabi_dsub>
 800b94c:	4632      	mov	r2, r6
 800b94e:	463b      	mov	r3, r7
 800b950:	f7f4 fc54 	bl	80001fc <__adddf3>
 800b954:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b958:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b95c:	ed8a 7b00 	vstr	d7, [sl]
 800b960:	3c01      	subs	r4, #1
 800b962:	e75e      	b.n	800b822 <__kernel_rem_pio2+0x502>
 800b964:	ab48      	add	r3, sp, #288	; 0x120
 800b966:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f7f4 fc45 	bl	80001fc <__adddf3>
 800b972:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b976:	e75a      	b.n	800b82e <__kernel_rem_pio2+0x50e>
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	9a01      	ldr	r2, [sp, #4]
 800b97c:	601d      	str	r5, [r3, #0]
 800b97e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b982:	605c      	str	r4, [r3, #4]
 800b984:	609f      	str	r7, [r3, #8]
 800b986:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b98a:	60d3      	str	r3, [r2, #12]
 800b98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b990:	6110      	str	r0, [r2, #16]
 800b992:	6153      	str	r3, [r2, #20]
 800b994:	e72e      	b.n	800b7f4 <__kernel_rem_pio2+0x4d4>
 800b996:	bf00      	nop
 800b998:	41700000 	.word	0x41700000
 800b99c:	3e700000 	.word	0x3e700000

0800b9a0 <__kernel_sin>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	ed2d 8b04 	vpush	{d8-d9}
 800b9a8:	eeb0 8a41 	vmov.f32	s16, s2
 800b9ac:	eef0 8a61 	vmov.f32	s17, s3
 800b9b0:	ec55 4b10 	vmov	r4, r5, d0
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b9ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b9be:	9001      	str	r0, [sp, #4]
 800b9c0:	da06      	bge.n	800b9d0 <__kernel_sin+0x30>
 800b9c2:	ee10 0a10 	vmov	r0, s0
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f7f5 f87e 	bl	8000ac8 <__aeabi_d2iz>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d051      	beq.n	800ba74 <__kernel_sin+0xd4>
 800b9d0:	4622      	mov	r2, r4
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	f7f4 fdc6 	bl	8000568 <__aeabi_dmul>
 800b9dc:	4682      	mov	sl, r0
 800b9de:	468b      	mov	fp, r1
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f7f4 fdbe 	bl	8000568 <__aeabi_dmul>
 800b9ec:	a341      	add	r3, pc, #260	; (adr r3, 800baf4 <__kernel_sin+0x154>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	4689      	mov	r9, r1
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	4659      	mov	r1, fp
 800b9fa:	f7f4 fdb5 	bl	8000568 <__aeabi_dmul>
 800b9fe:	a33f      	add	r3, pc, #252	; (adr r3, 800bafc <__kernel_sin+0x15c>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7f4 fbf8 	bl	80001f8 <__aeabi_dsub>
 800ba08:	4652      	mov	r2, sl
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	f7f4 fdac 	bl	8000568 <__aeabi_dmul>
 800ba10:	a33c      	add	r3, pc, #240	; (adr r3, 800bb04 <__kernel_sin+0x164>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fbf1 	bl	80001fc <__adddf3>
 800ba1a:	4652      	mov	r2, sl
 800ba1c:	465b      	mov	r3, fp
 800ba1e:	f7f4 fda3 	bl	8000568 <__aeabi_dmul>
 800ba22:	a33a      	add	r3, pc, #232	; (adr r3, 800bb0c <__kernel_sin+0x16c>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f7f4 fbe6 	bl	80001f8 <__aeabi_dsub>
 800ba2c:	4652      	mov	r2, sl
 800ba2e:	465b      	mov	r3, fp
 800ba30:	f7f4 fd9a 	bl	8000568 <__aeabi_dmul>
 800ba34:	a337      	add	r3, pc, #220	; (adr r3, 800bb14 <__kernel_sin+0x174>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fbdf 	bl	80001fc <__adddf3>
 800ba3e:	9b01      	ldr	r3, [sp, #4]
 800ba40:	4606      	mov	r6, r0
 800ba42:	460f      	mov	r7, r1
 800ba44:	b9eb      	cbnz	r3, 800ba82 <__kernel_sin+0xe2>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4650      	mov	r0, sl
 800ba4c:	4659      	mov	r1, fp
 800ba4e:	f7f4 fd8b 	bl	8000568 <__aeabi_dmul>
 800ba52:	a325      	add	r3, pc, #148	; (adr r3, 800bae8 <__kernel_sin+0x148>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	f7f4 fbce 	bl	80001f8 <__aeabi_dsub>
 800ba5c:	4642      	mov	r2, r8
 800ba5e:	464b      	mov	r3, r9
 800ba60:	f7f4 fd82 	bl	8000568 <__aeabi_dmul>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f7f4 fbc6 	bl	80001fc <__adddf3>
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	ec45 4b10 	vmov	d0, r4, r5
 800ba78:	b003      	add	sp, #12
 800ba7a:	ecbd 8b04 	vpop	{d8-d9}
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <__kernel_sin+0x150>)
 800ba84:	ec51 0b18 	vmov	r0, r1, d8
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f7f4 fd6d 	bl	8000568 <__aeabi_dmul>
 800ba8e:	4632      	mov	r2, r6
 800ba90:	ec41 0b19 	vmov	d9, r0, r1
 800ba94:	463b      	mov	r3, r7
 800ba96:	4640      	mov	r0, r8
 800ba98:	4649      	mov	r1, r9
 800ba9a:	f7f4 fd65 	bl	8000568 <__aeabi_dmul>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	ec51 0b19 	vmov	r0, r1, d9
 800baa6:	f7f4 fba7 	bl	80001f8 <__aeabi_dsub>
 800baaa:	4652      	mov	r2, sl
 800baac:	465b      	mov	r3, fp
 800baae:	f7f4 fd5b 	bl	8000568 <__aeabi_dmul>
 800bab2:	ec53 2b18 	vmov	r2, r3, d8
 800bab6:	f7f4 fb9f 	bl	80001f8 <__aeabi_dsub>
 800baba:	a30b      	add	r3, pc, #44	; (adr r3, 800bae8 <__kernel_sin+0x148>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	4606      	mov	r6, r0
 800bac2:	460f      	mov	r7, r1
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f4 fd4e 	bl	8000568 <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f7f4 fb92 	bl	80001fc <__adddf3>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fb8a 	bl	80001f8 <__aeabi_dsub>
 800bae4:	e7c4      	b.n	800ba70 <__kernel_sin+0xd0>
 800bae6:	bf00      	nop
 800bae8:	55555549 	.word	0x55555549
 800baec:	3fc55555 	.word	0x3fc55555
 800baf0:	3fe00000 	.word	0x3fe00000
 800baf4:	5acfd57c 	.word	0x5acfd57c
 800baf8:	3de5d93a 	.word	0x3de5d93a
 800bafc:	8a2b9ceb 	.word	0x8a2b9ceb
 800bb00:	3e5ae5e6 	.word	0x3e5ae5e6
 800bb04:	57b1fe7d 	.word	0x57b1fe7d
 800bb08:	3ec71de3 	.word	0x3ec71de3
 800bb0c:	19c161d5 	.word	0x19c161d5
 800bb10:	3f2a01a0 	.word	0x3f2a01a0
 800bb14:	1110f8a6 	.word	0x1110f8a6
 800bb18:	3f811111 	.word	0x3f811111
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <floor>:
 800bb20:	ec51 0b10 	vmov	r0, r1, d0
 800bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bb2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bb30:	2e13      	cmp	r6, #19
 800bb32:	ee10 5a10 	vmov	r5, s0
 800bb36:	ee10 8a10 	vmov	r8, s0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	dc32      	bgt.n	800bba4 <floor+0x84>
 800bb3e:	2e00      	cmp	r6, #0
 800bb40:	da14      	bge.n	800bb6c <floor+0x4c>
 800bb42:	a333      	add	r3, pc, #204	; (adr r3, 800bc10 <floor+0xf0>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fb58 	bl	80001fc <__adddf3>
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f7f4 ff9a 	bl	8000a88 <__aeabi_dcmpgt>
 800bb54:	b138      	cbz	r0, 800bb66 <floor+0x46>
 800bb56:	2c00      	cmp	r4, #0
 800bb58:	da57      	bge.n	800bc0a <floor+0xea>
 800bb5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bb5e:	431d      	orrs	r5, r3
 800bb60:	d001      	beq.n	800bb66 <floor+0x46>
 800bb62:	4c2d      	ldr	r4, [pc, #180]	; (800bc18 <floor+0xf8>)
 800bb64:	2500      	movs	r5, #0
 800bb66:	4621      	mov	r1, r4
 800bb68:	4628      	mov	r0, r5
 800bb6a:	e025      	b.n	800bbb8 <floor+0x98>
 800bb6c:	4f2b      	ldr	r7, [pc, #172]	; (800bc1c <floor+0xfc>)
 800bb6e:	4137      	asrs	r7, r6
 800bb70:	ea01 0307 	and.w	r3, r1, r7
 800bb74:	4303      	orrs	r3, r0
 800bb76:	d01f      	beq.n	800bbb8 <floor+0x98>
 800bb78:	a325      	add	r3, pc, #148	; (adr r3, 800bc10 <floor+0xf0>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fb3d 	bl	80001fc <__adddf3>
 800bb82:	2200      	movs	r2, #0
 800bb84:	2300      	movs	r3, #0
 800bb86:	f7f4 ff7f 	bl	8000a88 <__aeabi_dcmpgt>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0eb      	beq.n	800bb66 <floor+0x46>
 800bb8e:	2c00      	cmp	r4, #0
 800bb90:	bfbe      	ittt	lt
 800bb92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bb96:	fa43 f606 	asrlt.w	r6, r3, r6
 800bb9a:	19a4      	addlt	r4, r4, r6
 800bb9c:	ea24 0407 	bic.w	r4, r4, r7
 800bba0:	2500      	movs	r5, #0
 800bba2:	e7e0      	b.n	800bb66 <floor+0x46>
 800bba4:	2e33      	cmp	r6, #51	; 0x33
 800bba6:	dd0b      	ble.n	800bbc0 <floor+0xa0>
 800bba8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bbac:	d104      	bne.n	800bbb8 <floor+0x98>
 800bbae:	ee10 2a10 	vmov	r2, s0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	f7f4 fb22 	bl	80001fc <__adddf3>
 800bbb8:	ec41 0b10 	vmov	d0, r0, r1
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bbc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbc8:	fa23 f707 	lsr.w	r7, r3, r7
 800bbcc:	4207      	tst	r7, r0
 800bbce:	d0f3      	beq.n	800bbb8 <floor+0x98>
 800bbd0:	a30f      	add	r3, pc, #60	; (adr r3, 800bc10 <floor+0xf0>)
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	f7f4 fb11 	bl	80001fc <__adddf3>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f7f4 ff53 	bl	8000a88 <__aeabi_dcmpgt>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d0bf      	beq.n	800bb66 <floor+0x46>
 800bbe6:	2c00      	cmp	r4, #0
 800bbe8:	da02      	bge.n	800bbf0 <floor+0xd0>
 800bbea:	2e14      	cmp	r6, #20
 800bbec:	d103      	bne.n	800bbf6 <floor+0xd6>
 800bbee:	3401      	adds	r4, #1
 800bbf0:	ea25 0507 	bic.w	r5, r5, r7
 800bbf4:	e7b7      	b.n	800bb66 <floor+0x46>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bbfc:	fa03 f606 	lsl.w	r6, r3, r6
 800bc00:	4435      	add	r5, r6
 800bc02:	4545      	cmp	r5, r8
 800bc04:	bf38      	it	cc
 800bc06:	18e4      	addcc	r4, r4, r3
 800bc08:	e7f2      	b.n	800bbf0 <floor+0xd0>
 800bc0a:	2500      	movs	r5, #0
 800bc0c:	462c      	mov	r4, r5
 800bc0e:	e7aa      	b.n	800bb66 <floor+0x46>
 800bc10:	8800759c 	.word	0x8800759c
 800bc14:	7e37e43c 	.word	0x7e37e43c
 800bc18:	bff00000 	.word	0xbff00000
 800bc1c:	000fffff 	.word	0x000fffff

0800bc20 <nan>:
 800bc20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc28 <nan+0x8>
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	7ff80000 	.word	0x7ff80000

0800bc30 <scalbn>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	ec55 4b10 	vmov	r4, r5, d0
 800bc36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	b99a      	cbnz	r2, 800bc68 <scalbn+0x38>
 800bc40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc44:	4323      	orrs	r3, r4
 800bc46:	d036      	beq.n	800bcb6 <scalbn+0x86>
 800bc48:	4b39      	ldr	r3, [pc, #228]	; (800bd30 <scalbn+0x100>)
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	ee10 0a10 	vmov	r0, s0
 800bc50:	2200      	movs	r2, #0
 800bc52:	f7f4 fc89 	bl	8000568 <__aeabi_dmul>
 800bc56:	4b37      	ldr	r3, [pc, #220]	; (800bd34 <scalbn+0x104>)
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	460d      	mov	r5, r1
 800bc5e:	da10      	bge.n	800bc82 <scalbn+0x52>
 800bc60:	a32b      	add	r3, pc, #172	; (adr r3, 800bd10 <scalbn+0xe0>)
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	e03a      	b.n	800bcde <scalbn+0xae>
 800bc68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bc6c:	428a      	cmp	r2, r1
 800bc6e:	d10c      	bne.n	800bc8a <scalbn+0x5a>
 800bc70:	ee10 2a10 	vmov	r2, s0
 800bc74:	4620      	mov	r0, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	f7f4 fac0 	bl	80001fc <__adddf3>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	e019      	b.n	800bcb6 <scalbn+0x86>
 800bc82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bc86:	460b      	mov	r3, r1
 800bc88:	3a36      	subs	r2, #54	; 0x36
 800bc8a:	4432      	add	r2, r6
 800bc8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bc90:	428a      	cmp	r2, r1
 800bc92:	dd08      	ble.n	800bca6 <scalbn+0x76>
 800bc94:	2d00      	cmp	r5, #0
 800bc96:	a120      	add	r1, pc, #128	; (adr r1, 800bd18 <scalbn+0xe8>)
 800bc98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc9c:	da1c      	bge.n	800bcd8 <scalbn+0xa8>
 800bc9e:	a120      	add	r1, pc, #128	; (adr r1, 800bd20 <scalbn+0xf0>)
 800bca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bca4:	e018      	b.n	800bcd8 <scalbn+0xa8>
 800bca6:	2a00      	cmp	r2, #0
 800bca8:	dd08      	ble.n	800bcbc <scalbn+0x8c>
 800bcaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bcb6:	ec45 4b10 	vmov	d0, r4, r5
 800bcba:	bd70      	pop	{r4, r5, r6, pc}
 800bcbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bcc0:	da19      	bge.n	800bcf6 <scalbn+0xc6>
 800bcc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bcc6:	429e      	cmp	r6, r3
 800bcc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bccc:	dd0a      	ble.n	800bce4 <scalbn+0xb4>
 800bcce:	a112      	add	r1, pc, #72	; (adr r1, 800bd18 <scalbn+0xe8>)
 800bcd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1e2      	bne.n	800bc9e <scalbn+0x6e>
 800bcd8:	a30f      	add	r3, pc, #60	; (adr r3, 800bd18 <scalbn+0xe8>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 fc43 	bl	8000568 <__aeabi_dmul>
 800bce2:	e7cb      	b.n	800bc7c <scalbn+0x4c>
 800bce4:	a10a      	add	r1, pc, #40	; (adr r1, 800bd10 <scalbn+0xe0>)
 800bce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0b8      	beq.n	800bc60 <scalbn+0x30>
 800bcee:	a10e      	add	r1, pc, #56	; (adr r1, 800bd28 <scalbn+0xf8>)
 800bcf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf4:	e7b4      	b.n	800bc60 <scalbn+0x30>
 800bcf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcfa:	3236      	adds	r2, #54	; 0x36
 800bcfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bd04:	4620      	mov	r0, r4
 800bd06:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <scalbn+0x108>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	e7e8      	b.n	800bcde <scalbn+0xae>
 800bd0c:	f3af 8000 	nop.w
 800bd10:	c2f8f359 	.word	0xc2f8f359
 800bd14:	01a56e1f 	.word	0x01a56e1f
 800bd18:	8800759c 	.word	0x8800759c
 800bd1c:	7e37e43c 	.word	0x7e37e43c
 800bd20:	8800759c 	.word	0x8800759c
 800bd24:	fe37e43c 	.word	0xfe37e43c
 800bd28:	c2f8f359 	.word	0xc2f8f359
 800bd2c:	81a56e1f 	.word	0x81a56e1f
 800bd30:	43500000 	.word	0x43500000
 800bd34:	ffff3cb0 	.word	0xffff3cb0
 800bd38:	3c900000 	.word	0x3c900000

0800bd3c <_init>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	bf00      	nop
 800bd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd42:	bc08      	pop	{r3}
 800bd44:	469e      	mov	lr, r3
 800bd46:	4770      	bx	lr

0800bd48 <_fini>:
 800bd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4a:	bf00      	nop
 800bd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4e:	bc08      	pop	{r3}
 800bd50:	469e      	mov	lr, r3
 800bd52:	4770      	bx	lr
