
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca0c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800cbc0  0800cbc0  0001cbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce88  0800ce88  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce88  0800ce88  0001ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce90  0800ce90  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce94  0800ce94  0001ce94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800ce98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  200001a0  0800d038  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800d038  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca33  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea7  00000000  00000000  0003cc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00040ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00041fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272e0  00000000  00000000  00043340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9db  00000000  00000000  0006a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2174  00000000  00000000  00084ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016716f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  001671c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cba4 	.word	0x0800cba4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	0800cba4 	.word	0x0800cba4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fec3 	bl	8004cdc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 feae 	bl	8004cdc <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 fe15 	bl	8004cdc <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	pid->iterm = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <hubMotor_Init+0x2c>)
 80013ec:	f005 f98c 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <hubMotor_Init+0x2c>)
 80013f8:	f005 f986 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4802      	ldr	r0, [pc, #8]	; (800140c <hubMotor_Init+0x2c>)
 8001404:	f005 f980 	bl	8006708 <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40020c00 	.word	0x40020c00

08001410 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
 800141a:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff f84a 	bl	80004b8 <__aeabi_f2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <send_HubMotor+0x1a8>)
 800142a:	f7ff f89d 	bl	8000568 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	a35e      	add	r3, pc, #376	; (adr r3, 80015b0 <send_HubMotor+0x1a0>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f9be 	bl	80007bc <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb3e 	bl	8000ac8 <__aeabi_d2iz>
 800144c:	4603      	mov	r3, r0
 800144e:	b21b      	sxth	r3, r3
 8001450:	b29b      	uxth	r3, r3
 8001452:	425b      	negs	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff f82d 	bl	80004b8 <__aeabi_f2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <send_HubMotor+0x1a8>)
 8001464:	f7ff f880 	bl	8000568 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	a34f      	add	r3, pc, #316	; (adr r3, 80015b0 <send_HubMotor+0x1a0>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f9a1 	bl	80007bc <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb21 	bl	8000ac8 <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 800148a:	23aa      	movs	r3, #170	; 0xaa
 800148c:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 800148e:	23a4      	movs	r3, #164	; 0xa4
 8001490:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 8001492:	230e      	movs	r3, #14
 8001494:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 80014a2:	23c8      	movs	r3, #200	; 0xc8
 80014a4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 80014a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80014b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 80014b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ba:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014c0:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 80014c2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80014c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014dc:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014e2:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f8:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014fe:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001500:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001516:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800151a:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	b29a      	uxth	r2, r3
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001538:	7c3b      	ldrb	r3, [r7, #16]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7c7b      	ldrb	r3, [r7, #17]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7cbb      	ldrb	r3, [r7, #18]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7d3b      	ldrb	r3, [r7, #20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7d7b      	ldrb	r3, [r7, #21]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b29a      	uxth	r2, r3
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001580:	7e7b      	ldrb	r3, [r7, #25]
 8001582:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001584:	4413      	add	r3, r2
 8001586:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 800158e:	f107 010c 	add.w	r1, r7, #12
 8001592:	230a      	movs	r3, #10
 8001594:	220f      	movs	r2, #15
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <send_HubMotor+0x1ac>)
 8001598:	f007 fe03 	bl	80091a2 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 800159c:	220f      	movs	r2, #15
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <send_HubMotor+0x1b0>)
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <send_HubMotor+0x1ac>)
 80015a2:	f007 fe97 	bl	80092d4 <HAL_UART_Receive_DMA>
}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	; 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	54442d18 	.word	0x54442d18
 80015b4:	401921fb 	.word	0x401921fb
 80015b8:	40b00000 	.word	0x40b00000
 80015bc:	20000674 	.word	0x20000674
 80015c0:	200004fc 	.word	0x200004fc

080015c4 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80015c8:	2201      	movs	r2, #1
 80015ca:	2110      	movs	r1, #16
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <ADC_Init+0x7c>)
 80015ce:	f005 f89b 	bl	8006708 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <ADC_Init+0x80>)
 80015d8:	f005 f896 	bl	8006708 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <ADC_Init+0x80>)
 80015e2:	f005 f891 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f003 fb84 	bl	8004cf4 <HAL_Delay>
	AD7606_RST_HIGH;
 80015ec:	2201      	movs	r2, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <ADC_Init+0x80>)
 80015f2:	f005 f889 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f003 fb7c 	bl	8004cf4 <HAL_Delay>
	AD7606_RST_LOW;
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <ADC_Init+0x80>)
 8001602:	f005 f881 	bl	8006708 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <ADC_Init+0x80>)
 800160c:	f005 f87c 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f003 fb6f 	bl	8004cf4 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2102      	movs	r1, #2
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <ADC_Init+0x80>)
 800161c:	f005 f874 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2104      	movs	r1, #4
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <ADC_Init+0x80>)
 8001626:	f005 f86f 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <ADC_Init+0x80>)
 8001630:	f005 f86a 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f003 fb5d 	bl	8004cf4 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40020000 	.word	0x40020000
 8001644:	40020800 	.word	0x40020800

08001648 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <ADC_DataRequest+0x1c>)
 8001652:	f005 f859 	bl	8006708 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001656:	2201      	movs	r2, #1
 8001658:	2120      	movs	r1, #32
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <ADC_DataRequest+0x1c>)
 800165c:	f005 f854 	bl	8006708 <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020800 	.word	0x40020800

08001668 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <ADC_Read+0x30>)
 8001676:	f005 f847 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 800167a:	2302      	movs	r3, #2
 800167c:	2208      	movs	r2, #8
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <ADC_Read+0x34>)
 8001682:	f005 ff51 	bl	8007528 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001686:	2201      	movs	r2, #1
 8001688:	2110      	movs	r1, #16
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <ADC_Read+0x30>)
 800168c:	f005 f83c 	bl	8006708 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40020000 	.word	0x40020000
 800169c:	20000264 	.word	0x20000264

080016a0 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f808 	bl	80016c0 <enableMotor>
	brakeMotor(motor, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f828 	bl	8001708 <brakeMotor>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4619      	mov	r1, r3
 80016d8:	f005 f816 	bl	8006708 <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2108      	movs	r1, #8
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <emBrakeMotor+0x20>)
 80016f6:	f005 f807 	bl	8006708 <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020c00 	.word	0x40020c00

08001708 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69d8      	ldr	r0, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8c1b      	ldrh	r3, [r3, #32]
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	4619      	mov	r1, r3
 8001720:	f004 fff2 	bl	8006708 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8b1b      	ldrh	r3, [r3, #24]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f006 fb78 	bl	8007e24 <HAL_TIM_PWM_Stop>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	4619      	mov	r1, r3
 8001754:	f004 ffd8 	bl	8006708 <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80018a8 <setMotorSpeed+0x148>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dd01      	ble.n	8001788 <setMotorSpeed+0x28>
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <setMotorSpeed+0x14c>)
 8001786:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f7fe fe95 	bl	80004b8 <__aeabi_f2d>
 800178e:	a340      	add	r3, pc, #256	; (adr r3, 8001890 <setMotorSpeed+0x130>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fd30 	bl	80001f8 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a33d      	add	r3, pc, #244	; (adr r3, 8001898 <setMotorSpeed+0x138>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f809 	bl	80007bc <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9b1 	bl	8000b18 <__aeabi_d2uiz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7fe fe76 	bl	80004b8 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	a133      	add	r1, pc, #204	; (adr r1, 80018a0 <setMotorSpeed+0x140>)
 80017d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d6:	f7fe fff1 	bl	80007bc <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f971 	bl	8000ac8 <__aeabi_d2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017ee:	8a7b      	ldrh	r3, [r7, #18]
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017f6:	edd7 7a00 	vldr	s15, [r7]
 80017fa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d503      	bpl.n	8001810 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001808:	2101      	movs	r1, #1
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff7c 	bl	8001708 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	8a7a      	ldrh	r2, [r7, #18]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b1b      	ldrh	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	e01c      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	8b1b      	ldrh	r3, [r3, #24]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d105      	bne.n	8001842 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
 8001840:	e012      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8b1b      	ldrh	r3, [r3, #24]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d105      	bne.n	8001856 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	e008      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8b1b      	ldrh	r3, [r3, #24]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d104      	bne.n	8001868 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8b1b      	ldrh	r3, [r3, #24]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f006 fa98 	bl	8007da8 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	bfb15b57 	.word	0xbfb15b57
 8001894:	3fd09eec 	.word	0x3fd09eec
 8001898:	1172ef0b 	.word	0x1172ef0b
 800189c:	3f9989df 	.word	0x3f9989df
 80018a0:	00000000 	.word	0x00000000
 80018a4:	412e8480 	.word	0x412e8480
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	42c80000 	.word	0x42c80000

080018b0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d129      	bne.n	800191a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80018c6:	edd7 7a00 	vldr	s15, [r7]
 80018ca:	eef0 7ae7 	vabs.f32	s15, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fdf1 	bl	80004b8 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f7fe fdec 	bl	80004b8 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe ff68 	bl	80007bc <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f7ff f8ba 	bl	8000a74 <__aeabi_dcmpge>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff17 	bl	800173c <setMotorDir>
 800190e:	e032      	b.n	8001976 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001910:	2101      	movs	r1, #1
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff12 	bl	800173c <setMotorDir>
 8001918:	e02d      	b.n	8001976 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001920:	2b02      	cmp	r3, #2
 8001922:	d128      	bne.n	8001976 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001924:	edd7 7a00 	vldr	s15, [r7]
 8001928:	eef0 7ae7 	vabs.f32	s15, s15
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fdc2 	bl	80004b8 <__aeabi_f2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f7fe fdbd 	bl	80004b8 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe ff39 	bl	80007bc <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f7ff f88b 	bl	8000a74 <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001964:	2101      	movs	r1, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fee8 	bl	800173c <setMotorDir>
 800196c:	e003      	b.n	8001976 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fee3 	bl	800173c <setMotorDir>
    }

    HAL_Delay(50);
 8001976:	2032      	movs	r0, #50	; 0x32
 8001978:	f003 f9bc 	bl	8004cf4 <HAL_Delay>
    brakeMotor(motor, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fec2 	bl	8001708 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001984:	edd7 7a00 	vldr	s15, [r7]
 8001988:	eef0 7ae7 	vabs.f32	s15, s15
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fee5 	bl	8001760 <setMotorSpeed>

}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}

0800199e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f004 fe90 	bl	80066d8 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	799a      	ldrb	r2, [r3, #6]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	79db      	ldrb	r3, [r3, #7]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d004      	beq.n	80019d6 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80019cc:	f003 f986 	bl	8004cdc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80019d6:	f003 f981 	bl	8004cdc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d209      	bcs.n	80019fc <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	799a      	ldrb	r2, [r3, #6]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e004      	b.n	8001a06 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	799a      	ldrb	r2, [r3, #6]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <MX_CAN1_Init+0xcc>)
 8001a1a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a1e:	2209      	movs	r2, #9
 8001a20:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a34:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a3c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a62:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a64:	f003 f96a 	bl	8004d3c <HAL_CAN_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a6e:	f001 fe85 	bl	800377c <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001aa0:	f003 fa48 	bl	8004f34 <HAL_CAN_ConfigFilter>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_CAN1_Init+0x9e>
				Error_Handler();
 8001aaa:	f001 fe67 	bl	800377c <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001ab2:	f003 fd50 	bl	8005556 <HAL_CAN_ActivateNotification>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001abc:	f001 fe5e 	bl	800377c <Error_Handler>
 8001ac0:	e007      	b.n	8001ad2 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001ac4:	f003 fb16 	bl	80050f4 <HAL_CAN_Start>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001ace:	f001 fe55 	bl	800377c <Error_Handler>


	    /* USER CODE END CAN1_Init 2 */


}
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200002bc 	.word	0x200002bc
 8001adc:	40006400 	.word	0x40006400

08001ae0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_CAN_MspInit+0x94>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d133      	bne.n	8001b6a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_CAN_MspInit+0x9c>)
 8001b56:	f004 fc13 	bl	8006380 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2014      	movs	r0, #20
 8001b60:	f004 f829 	bl	8005bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b64:	2014      	movs	r0, #20
 8001b66:	f004 f842 	bl	8005bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40006400 	.word	0x40006400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020c00 	.word	0x40020c00

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	200c      	movs	r0, #12
 8001ba8:	f004 f805 	bl	8005bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bac:	200c      	movs	r0, #12
 8001bae:	f004 f81e 	bl	8005bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200e      	movs	r0, #14
 8001bb8:	f003 fffd 	bl	8005bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bbc:	200e      	movs	r0, #14
 8001bbe:	f004 f816 	bl	8005bee <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <ENCODER_Init+0x24>)
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <ENCODER_Init+0x28>)
 8001bd8:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <ENCODER_Init+0x2c>)
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <ENCODER_Init+0x28>)
 8001bde:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001be0:	2101      	movs	r1, #1
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <ENCODER_Init+0x24>)
 8001be4:	f000 f83f 	bl	8001c66 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001be8:	2102      	movs	r1, #2
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <ENCODER_Init+0x2c>)
 8001bec:	f000 f83b 	bl	8001c66 <ENCODER_Set_TxHeader>

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000364 	.word	0x20000364
 8001bf8:	200002bc 	.word	0x200002bc
 8001bfc:	2000030c 	.word	0x2000030c

08001c00 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	785a      	ldrb	r2, [r3, #1]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	789a      	ldrb	r2, [r3, #2]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	78da      	ldrb	r2, [r3, #3]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791a      	ldrb	r2, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	795a      	ldrb	r2, [r3, #5]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	799a      	ldrb	r2, [r3, #6]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	79da      	ldrb	r2, [r3, #7]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0120 	add.w	r1, r3, #32
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3338      	adds	r3, #56	; 0x38
 8001ce6:	f003 fa49 	bl	800517c <HAL_CAN_AddTxMessage>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffd1 	bl	8001ca2 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a89      	ldr	r2, [pc, #548]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a7b      	ldr	r2, [pc, #492]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	213f      	movs	r1, #63	; 0x3f
 8001e1e:	4861      	ldr	r0, [pc, #388]	; (8001fa4 <MX_GPIO_Init+0x248>)
 8001e20:	f004 fc72 	bl	8006708 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2110      	movs	r1, #16
 8001e28:	485f      	ldr	r0, [pc, #380]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001e2a:	f004 fc6d 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e2e:	2200      	movs	r2, #0
 8001e30:	219b      	movs	r1, #155	; 0x9b
 8001e32:	485e      	ldr	r0, [pc, #376]	; (8001fac <MX_GPIO_Init+0x250>)
 8001e34:	f004 fc68 	bl	8006708 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001e3e:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e40:	f004 fc62 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e44:	2200      	movs	r2, #0
 8001e46:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001e4a:	485a      	ldr	r0, [pc, #360]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001e4c:	f004 fc5c 	bl	8006708 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001e50:	2307      	movs	r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4853      	ldr	r0, [pc, #332]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e64:	f004 fa8c 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e68:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e6c:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	484c      	ldr	r0, [pc, #304]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e7e:	f004 fa7f 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e82:	233f      	movs	r3, #63	; 0x3f
 8001e84:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <MX_GPIO_Init+0x248>)
 8001e9a:	f004 fa71 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001eb6:	f004 fa63 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_GPIO_Init+0x25c>)
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4836      	ldr	r0, [pc, #216]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001ece:	f004 fa57 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001ed2:	239b      	movs	r3, #155	; 0x9b
 8001ed4:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4830      	ldr	r0, [pc, #192]	; (8001fac <MX_GPIO_Init+0x250>)
 8001eea:	f004 fa49 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001eee:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001f08:	f004 fa3a 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 8001f0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f1e:	2305      	movs	r3, #5
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <MX_GPIO_Init+0x250>)
 8001f2a:	f004 fa29 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001f2e:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001f32:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001f48:	f004 fa1a 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001f62:	f004 fa0d 	bl	8006380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f66:	2320      	movs	r3, #32
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f76:	2309      	movs	r3, #9
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <MX_GPIO_Init+0x250>)
 8001f82:	f004 f9fd 	bl	8006380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2017      	movs	r0, #23
 8001f8c:	f003 fe13 	bl	8005bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f90:	2017      	movs	r0, #23
 8001f92:	f003 fe2c 	bl	8005bee <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3730      	adds	r7, #48	; 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	10210000 	.word	0x10210000

08001fbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <MX_I2C1_Init+0x78>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <MX_I2C1_Init+0x7c>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ffa:	f004 fbb7 	bl	800676c <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f001 fbba 	bl	800377c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002008:	2100      	movs	r1, #0
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_I2C1_Init+0x74>)
 800200c:	f004 fcf2 	bl	80069f4 <HAL_I2CEx_ConfigAnalogFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002016:	f001 fbb1 	bl	800377c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800201a:	2100      	movs	r1, #0
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2C1_Init+0x74>)
 800201e:	f004 fd25 	bl	8006a6c <HAL_I2CEx_ConfigDigitalFilter>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002028:	f001 fba8 	bl	800377c <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200003bc 	.word	0x200003bc
 8002034:	40005400 	.word	0x40005400
 8002038:	00061a80 	.word	0x00061a80

0800203c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_I2C_MspInit+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800207a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208c:	2304      	movs	r3, #4
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	480c      	ldr	r0, [pc, #48]	; (80020c8 <HAL_I2C_MspInit+0x8c>)
 8002098:	f004 f972 	bl	8006380 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400
 80020cc:	00000000 	.word	0x00000000

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d6:	f002 fd9b 	bl	8004c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020da:	f000 fd9f 	bl	8002c1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80020de:	f005 f98b 	bl	80073f8 <HAL_RCC_GetHCLKFreq>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4ab6      	ldr	r2, [pc, #728]	; (80023c0 <main+0x2f0>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fd8c 	bl	8005c0a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020f2:	2004      	movs	r0, #4
 80020f4:	f003 fd96 	bl	8005c24 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002100:	f003 fd59 	bl	8005bb6 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002104:	f7ff fe2a 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002108:	f7ff fd3a 	bl	8001b80 <MX_DMA_Init>
  MX_I2C1_Init();
 800210c:	f7ff ff56 	bl	8001fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 8002110:	f001 fc90 	bl	8003a34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002114:	f001 fd2e 	bl	8003b74 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002118:	f001 ffc8 	bl	80040ac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800211c:	f001 fd9e 	bl	8003c5c <MX_TIM3_Init>
  MX_TIM8_Init();
 8002120:	f001 fe1e 	bl	8003d60 <MX_TIM8_Init>
  MX_CAN1_Init();
 8002124:	f7ff fc74 	bl	8001a10 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002128:	f001 fb40 	bl	80037ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 800212c:	f002 f89e 	bl	800426c <joystick_Init>
	ADC_Init();
 8002130:	f7ff fa48 	bl	80015c4 <ADC_Init>
	ADC_DataRequest();
 8002134:	f7ff fa88 	bl	8001648 <ADC_DataRequest>
	ENCODER_Init();
 8002138:	f7ff fd4a 	bl	8001bd0 <ENCODER_Init>
//		if (HAL_GetTick() - state_count > 5000)
//			Error_Handler();
//	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 800213c:	4ba1      	ldr	r3, [pc, #644]	; (80023c4 <main+0x2f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4aa1      	ldr	r2, [pc, #644]	; (80023c8 <main+0x2f8>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <main+0x2f4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a9f      	ldr	r2, [pc, #636]	; (80023cc <main+0x2fc>)
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	eef0 0a47 	vmov.f32	s1, s14
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	489b      	ldr	r0, [pc, #620]	; (80023d0 <main+0x300>)
 8002162:	f002 fa93 	bl	800468c <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8002166:	489b      	ldr	r0, [pc, #620]	; (80023d4 <main+0x304>)
 8002168:	f005 fdc5 	bl	8007cf6 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 800216c:	2100      	movs	r1, #0
 800216e:	4899      	ldr	r0, [pc, #612]	; (80023d4 <main+0x304>)
 8002170:	f005 fe1a 	bl	8007da8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002174:	2104      	movs	r1, #4
 8002176:	4897      	ldr	r0, [pc, #604]	; (80023d4 <main+0x304>)
 8002178:	f005 fe16 	bl	8007da8 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 800217c:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <main+0x304>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002186:	4b93      	ldr	r3, [pc, #588]	; (80023d4 <main+0x304>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800218e:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002190:	4891      	ldr	r0, [pc, #580]	; (80023d8 <main+0x308>)
 8002192:	f7ff fa85 	bl	80016a0 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002196:	4891      	ldr	r0, [pc, #580]	; (80023dc <main+0x30c>)
 8002198:	f7ff fa82 	bl	80016a0 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800219c:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80023e0 <main+0x310>
 80021a0:	488d      	ldr	r0, [pc, #564]	; (80023d8 <main+0x308>)
 80021a2:	f7ff fb85 	bl	80018b0 <runMotor>
	runMotor(&backMotor, 0);
 80021a6:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80023e0 <main+0x310>
 80021aa:	488c      	ldr	r0, [pc, #560]	; (80023dc <main+0x30c>)
 80021ac:	f7ff fb80 	bl	80018b0 <runMotor>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 80021b0:	210c      	movs	r1, #12
 80021b2:	488c      	ldr	r0, [pc, #560]	; (80023e4 <main+0x314>)
 80021b4:	f005 fec4 	bl	8007f40 <HAL_TIM_IC_Start_IT>
	emBrakeMotor(0);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fa93 	bl	80016e4 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 80021be:	f7ff f90f 	bl	80013e0 <hubMotor_Init>
	send_HubMotor(0, 0);
 80021c2:	eddf 0a87 	vldr	s1, [pc, #540]	; 80023e0 <main+0x310>
 80021c6:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80023e0 <main+0x310>
 80021ca:	f7ff f921 	bl	8001410 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80021ce:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <main+0x318>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	4b85      	ldr	r3, [pc, #532]	; (80023ec <main+0x31c>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <main+0x320>)
 80021dc:	edd3 6a00 	vldr	s13, [r3]
 80021e0:	eeb0 1a66 	vmov.f32	s2, s13
 80021e4:	eef0 0a47 	vmov.f32	s1, s14
 80021e8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ec:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <main+0x324>)
 80021ee:	4a82      	ldr	r2, [pc, #520]	; (80023f8 <main+0x328>)
 80021f0:	4982      	ldr	r1, [pc, #520]	; (80023fc <main+0x32c>)
 80021f2:	4883      	ldr	r0, [pc, #524]	; (8002400 <main+0x330>)
 80021f4:	f7fe fe7c 	bl	8000ef0 <pid_create>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a82      	ldr	r2, [pc, #520]	; (8002404 <main+0x334>)
 80021fc:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -80, 80);
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <main+0x334>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	eddf 0a81 	vldr	s1, [pc, #516]	; 8002408 <main+0x338>
 8002206:	ed9f 0a81 	vldr	s0, [pc, #516]	; 800240c <main+0x33c>
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fffc 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 8002210:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <main+0x334>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ffc2 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 800221c:	4b79      	ldr	r3, [pc, #484]	; (8002404 <main+0x334>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f856 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002226:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <main+0x340>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <main+0x344>)
 800222e:	ed93 7a00 	vldr	s14, [r3]
 8002232:	4b79      	ldr	r3, [pc, #484]	; (8002418 <main+0x348>)
 8002234:	edd3 6a00 	vldr	s13, [r3]
 8002238:	eeb0 1a66 	vmov.f32	s2, s13
 800223c:	eef0 0a47 	vmov.f32	s1, s14
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	4b75      	ldr	r3, [pc, #468]	; (800241c <main+0x34c>)
 8002246:	4a76      	ldr	r2, [pc, #472]	; (8002420 <main+0x350>)
 8002248:	4976      	ldr	r1, [pc, #472]	; (8002424 <main+0x354>)
 800224a:	4877      	ldr	r0, [pc, #476]	; (8002428 <main+0x358>)
 800224c:	f7fe fe50 	bl	8000ef0 <pid_create>
 8002250:	4603      	mov	r3, r0
 8002252:	4a76      	ldr	r2, [pc, #472]	; (800242c <main+0x35c>)
 8002254:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -80, 80);
 8002256:	4b75      	ldr	r3, [pc, #468]	; (800242c <main+0x35c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8002408 <main+0x338>
 800225e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800240c <main+0x33c>
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ffd0 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002268:	4b70      	ldr	r3, [pc, #448]	; (800242c <main+0x35c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe ff96 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 8002274:	4b6d      	ldr	r3, [pc, #436]	; (800242c <main+0x35c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f82a 	bl	80012d2 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800227e:	f002 fd2d 	bl	8004cdc <HAL_GetTick>
 8002282:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8002284:	486a      	ldr	r0, [pc, #424]	; (8002430 <main+0x360>)
 8002286:	f7ff fd34 	bl	8001cf2 <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800228a:	486a      	ldr	r0, [pc, #424]	; (8002434 <main+0x364>)
 800228c:	f7ff fd31 	bl	8001cf2 <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <main+0x368>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff fa24 	bl	80016e4 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800229c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a0:	f002 fd28 	bl	8004cf4 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 80022a4:	f002 fd1a 	bl	8004cdc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d0f9      	beq.n	80022a4 <main+0x1d4>
		{
			ADC_DataRequest();
 80022b0:	f7ff f9ca 	bl	8001648 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 80022b4:	485e      	ldr	r0, [pc, #376]	; (8002430 <main+0x360>)
 80022b6:	f7ff fcf4 	bl	8001ca2 <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 80022ba:	485e      	ldr	r0, [pc, #376]	; (8002434 <main+0x364>)
 80022bc:	f7ff fcf1 	bl	8001ca2 <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 80022c0:	211e      	movs	r1, #30
 80022c2:	485e      	ldr	r0, [pc, #376]	; (800243c <main+0x36c>)
 80022c4:	f7ff fb6b 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80022c8:	211e      	movs	r1, #30
 80022ca:	485d      	ldr	r0, [pc, #372]	; (8002440 <main+0x370>)
 80022cc:	f7ff fb67 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80022d0:	211e      	movs	r1, #30
 80022d2:	485c      	ldr	r0, [pc, #368]	; (8002444 <main+0x374>)
 80022d4:	f7ff fb63 	bl	800199e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022d8:	2105      	movs	r1, #5
 80022da:	485b      	ldr	r0, [pc, #364]	; (8002448 <main+0x378>)
 80022dc:	f7ff fb5f 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022e0:	2105      	movs	r1, #5
 80022e2:	485a      	ldr	r0, [pc, #360]	; (800244c <main+0x37c>)
 80022e4:	f7ff fb5b 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022e8:	2105      	movs	r1, #5
 80022ea:	4859      	ldr	r0, [pc, #356]	; (8002450 <main+0x380>)
 80022ec:	f7ff fb57 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022f0:	2105      	movs	r1, #5
 80022f2:	4858      	ldr	r0, [pc, #352]	; (8002454 <main+0x384>)
 80022f4:	f7ff fb53 	bl	800199e <GPIO_Digital_Filtered_Input>
			 *	1. Climbing wheel extension.
			 *	2. Wheelchair lifting/dropping
			 *	3. Climbing wheel retraction
			 *-------------------------------------------------------------------*/
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if ((button3.state == 1 || button_prev_state == 1)
 80022f8:	4b52      	ldr	r3, [pc, #328]	; (8002444 <main+0x374>)
 80022fa:	7a1b      	ldrb	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d003      	beq.n	8002308 <main+0x238>
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <main+0x388>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d038      	beq.n	800237a <main+0x2aa>
					&& climb_first_iteration == true)
 8002308:	4b54      	ldr	r3, [pc, #336]	; (800245c <main+0x38c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d034      	beq.n	800237a <main+0x2aa>
			{
				button_prev_state = 1;
 8002310:	4b51      	ldr	r3, [pc, #324]	; (8002458 <main+0x388>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
				if (abs(encoderFront.signed_encoder_pos) >= 50
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <main+0x364>)
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	bfb8      	it	lt
 800231e:	425b      	neglt	r3, r3
 8002320:	2b31      	cmp	r3, #49	; 0x31
 8002322:	dc06      	bgt.n	8002332 <main+0x262>
						|| abs(encoderBack.signed_encoder_pos) >= 50)
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <main+0x360>)
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	bfb8      	it	lt
 800232c:	425b      	neglt	r3, r3
 800232e:	2b31      	cmp	r3, #49	; 0x31
 8002330:	dd0f      	ble.n	8002352 <main+0x282>
				{
					goto_pos(0, frontClimb_pid);
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <main+0x334>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	2000      	movs	r0, #0
 800233a:	f000 ffe5 	bl	8003308 <goto_pos>
					goto_pos(0, backClimb_pid);
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <main+0x35c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	2000      	movs	r0, #0
 8002346:	f000 ffdf 	bl	8003308 <goto_pos>
					lifting_mode = EMPTY;
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <main+0x390>)
 800234c:	2205      	movs	r2, #5
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e013      	b.n	800237a <main+0x2aa>
				}
				else
				{
					runMotor(&rearMotor, 0);
 8002352:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80023e0 <main+0x310>
 8002356:	4820      	ldr	r0, [pc, #128]	; (80023d8 <main+0x308>)
 8002358:	f7ff faaa 	bl	80018b0 <runMotor>
					runMotor(&backMotor, 0);
 800235c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80023e0 <main+0x310>
 8002360:	481e      	ldr	r0, [pc, #120]	; (80023dc <main+0x30c>)
 8002362:	f7ff faa5 	bl	80018b0 <runMotor>
					lifting_mode = LANDING;
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <main+0x390>)
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
					button_prev_state = 0;
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <main+0x388>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002376:	f002 fcbd 	bl	8004cf4 <HAL_Delay>

				}
			}

			if (front_touchdown == false && back_touchdown == false
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <main+0x394>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 811b 	beq.w	80025c0 <main+0x4f0>
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <main+0x398>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8113 	beq.w	80025c0 <main+0x4f0>
					&& lifting_mode == LANDING)
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <main+0x390>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	f040 810e 	bne.w	80025c0 <main+0x4f0>
			{
				//Stop the base wheel completely
				baseWheelSpeed.cur_r = 0;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <main+0x300>)
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
				baseWheelSpeed.cur_l = 0;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <main+0x300>)
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
				baseMotorCommand();
 80023b4:	f000 fe94 	bl	80030e0 <baseMotorCommand>

				//Disengage the motor brake
				emBrakeMotor(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff f993 	bl	80016e4 <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 80023be:	e0c6      	b.n	800254e <main+0x47e>
 80023c0:	10624dd3 	.word	0x10624dd3
 80023c4:	200001c0 	.word	0x200001c0
 80023c8:	0800cbc0 	.word	0x0800cbc0
 80023cc:	0800cbcc 	.word	0x0800cbcc
 80023d0:	200000d8 	.word	0x200000d8
 80023d4:	20000554 	.word	0x20000554
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000034 	.word	0x20000034
 80023e0:	00000000 	.word	0x00000000
 80023e4:	20000514 	.word	0x20000514
 80023e8:	2000010c 	.word	0x2000010c
 80023ec:	20000110 	.word	0x20000110
 80023f0:	20000114 	.word	0x20000114
 80023f4:	200001d8 	.word	0x200001d8
 80023f8:	200001d4 	.word	0x200001d4
 80023fc:	200001d0 	.word	0x200001d0
 8002400:	200004c8 	.word	0x200004c8
 8002404:	200004c4 	.word	0x200004c4
 8002408:	42a00000 	.word	0x42a00000
 800240c:	c2a00000 	.word	0xc2a00000
 8002410:	20000118 	.word	0x20000118
 8002414:	2000011c 	.word	0x2000011c
 8002418:	20000120 	.word	0x20000120
 800241c:	200001e4 	.word	0x200001e4
 8002420:	200001e0 	.word	0x200001e0
 8002424:	200001dc 	.word	0x200001dc
 8002428:	20000480 	.word	0x20000480
 800242c:	20000510 	.word	0x20000510
 8002430:	20000364 	.word	0x20000364
 8002434:	2000030c 	.word	0x2000030c
 8002438:	20000200 	.word	0x20000200
 800243c:	200000a8 	.word	0x200000a8
 8002440:	200000b8 	.word	0x200000b8
 8002444:	200000c8 	.word	0x200000c8
 8002448:	20000068 	.word	0x20000068
 800244c:	20000078 	.word	0x20000078
 8002450:	20000088 	.word	0x20000088
 8002454:	20000098 	.word	0x20000098
 8002458:	200001c6 	.word	0x200001c6
 800245c:	20000109 	.word	0x20000109
 8002460:	20000108 	.word	0x20000108
 8002464:	200001c4 	.word	0x200001c4
 8002468:	200001c5 	.word	0x200001c5
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 800246c:	2105      	movs	r1, #5
 800246e:	4848      	ldr	r0, [pc, #288]	; (8002590 <main+0x4c0>)
 8002470:	f7ff fa95 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <main+0x3b8>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 800247a:	2105      	movs	r1, #5
 800247c:	4845      	ldr	r0, [pc, #276]	; (8002594 <main+0x4c4>)
 800247e:	f7ff fa8e 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <main+0x3be>
						front_touchdown = 1;
 8002488:	4b43      	ldr	r3, [pc, #268]	; (8002598 <main+0x4c8>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 800248e:	2105      	movs	r1, #5
 8002490:	4842      	ldr	r0, [pc, #264]	; (800259c <main+0x4cc>)
 8002492:	f7ff fa84 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <main+0x3da>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 800249c:	2105      	movs	r1, #5
 800249e:	4840      	ldr	r0, [pc, #256]	; (80025a0 <main+0x4d0>)
 80024a0:	f7ff fa7d 	bl	800199e <GPIO_Digital_Filtered_Input>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <main+0x3e0>
						back_touchdown = 1;
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <main+0x4d4>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <main+0x4d4>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f083 0301 	eor.w	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <main+0x406>
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <main+0x4c8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <main+0x406>
							&& lifting_mode == LANDING)
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <main+0x4d8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d103      	bne.n	80024d6 <main+0x406>
						lifting_mode = CLIMB_UP;
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <main+0x4d8>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e011      	b.n	80024fa <main+0x42a>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <main+0x4d4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <main+0x42a>
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <main+0x4c8>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <main+0x42a>
							&& lifting_mode == LANDING)
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <main+0x4d8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d102      	bne.n	80024fa <main+0x42a>
						lifting_mode = CLIMB_DOWN;
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <main+0x4d8>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]

//					initial_angle = exp_angle_filter * MPU6050.KalmanAngleXf

					ENCODER_Read(&encoderBack);
 80024fa:	482c      	ldr	r0, [pc, #176]	; (80025ac <main+0x4dc>)
 80024fc:	f7ff fbd1 	bl	8001ca2 <ENCODER_Read>
					ENCODER_Read(&encoderFront);
 8002500:	482b      	ldr	r0, [pc, #172]	; (80025b0 <main+0x4e0>)
 8002502:	f7ff fbce 	bl	8001ca2 <ENCODER_Read>

					if (back_touchdown == false)
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <main+0x4d4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <main+0x450>
						runMotor(&backMotor, 30);
 8002514:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002518:	4826      	ldr	r0, [pc, #152]	; (80025b4 <main+0x4e4>)
 800251a:	f7ff f9c9 	bl	80018b0 <runMotor>
 800251e:	e004      	b.n	800252a <main+0x45a>
					else
						runMotor(&backMotor, 0);
 8002520:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80025b8 <main+0x4e8>
 8002524:	4823      	ldr	r0, [pc, #140]	; (80025b4 <main+0x4e4>)
 8002526:	f7ff f9c3 	bl	80018b0 <runMotor>

					if (front_touchdown == false)
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <main+0x4c8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <main+0x474>
						runMotor(&rearMotor, 30);
 8002538:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800253c:	481f      	ldr	r0, [pc, #124]	; (80025bc <main+0x4ec>)
 800253e:	f7ff f9b7 	bl	80018b0 <runMotor>
 8002542:	e004      	b.n	800254e <main+0x47e>
					else
						runMotor(&rearMotor, 0);
 8002544:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80025b8 <main+0x4e8>
 8002548:	481c      	ldr	r0, [pc, #112]	; (80025bc <main+0x4ec>)
 800254a:	f7ff f9b1 	bl	80018b0 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <main+0x4c8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f083 0301 	eor.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d187      	bne.n	800246c <main+0x39c>
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <main+0x4d4>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d180      	bne.n	800246c <main+0x39c>

				}
				runMotor(&rearMotor, 0);
 800256a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80025b8 <main+0x4e8>
 800256e:	4813      	ldr	r0, [pc, #76]	; (80025bc <main+0x4ec>)
 8002570:	f7ff f99e 	bl	80018b0 <runMotor>
				runMotor(&backMotor, 0);
 8002574:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80025b8 <main+0x4e8>
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <main+0x4e4>)
 800257a:	f7ff f999 	bl	80018b0 <runMotor>
				emBrakeMotor(0);
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff f8b0 	bl	80016e4 <emBrakeMotor>
				HAL_Delay(500);
 8002584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002588:	f002 fbb4 	bl	8004cf4 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 800258c:	e323      	b.n	8002bd6 <main+0xb06>
 800258e:	bf00      	nop
 8002590:	20000068 	.word	0x20000068
 8002594:	20000078 	.word	0x20000078
 8002598:	200001c4 	.word	0x200001c4
 800259c:	20000088 	.word	0x20000088
 80025a0:	20000098 	.word	0x20000098
 80025a4:	200001c5 	.word	0x200001c5
 80025a8:	20000108 	.word	0x20000108
 80025ac:	20000364 	.word	0x20000364
 80025b0:	2000030c 	.word	0x2000030c
 80025b4:	20000034 	.word	0x20000034
 80025b8:	00000000 	.word	0x00000000
 80025bc:	20000000 	.word	0x20000000
			}
//			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 80025c0:	4bc3      	ldr	r3, [pc, #780]	; (80028d0 <main+0x800>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11f      	bne.n	8002608 <main+0x538>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2108      	movs	r1, #8
 80025cc:	48c1      	ldr	r0, [pc, #772]	; (80028d4 <main+0x804>)
 80025ce:	f004 f89b 	bl	8006708 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2110      	movs	r1, #16
 80025d6:	48bf      	ldr	r0, [pc, #764]	; (80028d4 <main+0x804>)
 80025d8:	f004 f896 	bl	8006708 <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 80025dc:	48be      	ldr	r0, [pc, #760]	; (80028d8 <main+0x808>)
 80025de:	f002 f87f 	bl	80046e0 <wheel_Control>
				baseMotorCommand();
 80025e2:	f000 fd7d 	bl	80030e0 <baseMotorCommand>
				front_touchdown = false;
 80025e6:	4bbd      	ldr	r3, [pc, #756]	; (80028dc <main+0x80c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 80025ec:	4bbc      	ldr	r3, [pc, #752]	; (80028e0 <main+0x810>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 80025f2:	4bbc      	ldr	r3, [pc, #752]	; (80028e4 <main+0x814>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
				speed[FRONT_INDEX] = 0;
 80025f8:	4bbb      	ldr	r3, [pc, #748]	; (80028e8 <main+0x818>)
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
				speed[BACK_INDEX] = 0;
 8002600:	4bb9      	ldr	r3, [pc, #740]	; (80028e8 <main+0x818>)
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	605a      	str	r2, [r3, #4]
			}
//			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 8002608:	4bb1      	ldr	r3, [pc, #708]	; (80028d0 <main+0x800>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 818f 	bne.w	8002930 <main+0x860>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002612:	2201      	movs	r2, #1
 8002614:	2108      	movs	r1, #8
 8002616:	48af      	ldr	r0, [pc, #700]	; (80028d4 <main+0x804>)
 8002618:	f004 f876 	bl	8006708 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 800261c:	4bb1      	ldr	r3, [pc, #708]	; (80028e4 <main+0x814>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80f6 	beq.w	8002812 <main+0x742>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 8002626:	4bb1      	ldr	r3, [pc, #708]	; (80028ec <main+0x81c>)
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff45 	bl	80004b8 <__aeabi_f2d>
 800262e:	4604      	mov	r4, r0
 8002630:	460d      	mov	r5, r1
 8002632:	4baf      	ldr	r3, [pc, #700]	; (80028f0 <main+0x820>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff3e 	bl	80004b8 <__aeabi_f2d>
 800263c:	a39a      	add	r3, pc, #616	; (adr r3, 80028a8 <main+0x7d8>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ff91 	bl	8000568 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	4ba8      	ldr	r3, [pc, #672]	; (80028f4 <main+0x824>)
 8002654:	f7fe f8b2 	bl	80007bc <__aeabi_ddiv>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	ec43 2b17 	vmov	d7, r2, r3
 8002660:	eeb0 0a47 	vmov.f32	s0, s14
 8002664:	eef0 0a67 	vmov.f32	s1, s15
 8002668:	f007 ff4e 	bl	800a508 <cos>
 800266c:	ec53 2b10 	vmov	r2, r3, d0
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd ff78 	bl	8000568 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4614      	mov	r4, r2
 800267e:	461d      	mov	r5, r3
 8002680:	4b9d      	ldr	r3, [pc, #628]	; (80028f8 <main+0x828>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff18 	bl	80004b8 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	f7fd fdb4 	bl	80001fc <__adddf3>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <main+0x82c>)
 80026a2:	f7fd fda9 	bl	80001f8 <__aeabi_dsub>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa53 	bl	8000b58 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 80026b4:	4a92      	ldr	r2, [pc, #584]	; (8002900 <main+0x830>)
 80026b6:	6013      	str	r3, [r2, #0]
					curb_height += 0.015; //Small error correction 10%
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <main+0x830>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fefb 	bl	80004b8 <__aeabi_f2d>
 80026c2:	a37b      	add	r3, pc, #492	; (adr r3, 80028b0 <main+0x7e0>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd fd98 	bl	80001fc <__adddf3>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa40 	bl	8000b58 <__aeabi_d2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a89      	ldr	r2, [pc, #548]	; (8002900 <main+0x830>)
 80026dc:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026de:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002904 <main+0x834>
 80026e2:	4b87      	ldr	r3, [pc, #540]	; (8002900 <main+0x830>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd fee2 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 80026f4:	a370      	add	r3, pc, #448	; (adr r3, 80028b8 <main+0x7e8>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fd fd7d 	bl	80001f8 <__aeabi_dsub>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa27 	bl	8000b58 <__aeabi_d2f>
 800270a:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800270c:	4a7e      	ldr	r2, [pc, #504]	; (8002908 <main+0x838>)
 800270e:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 8002710:	4b7d      	ldr	r3, [pc, #500]	; (8002908 <main+0x838>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eef1 7a67 	vneg.f32	s15, s15
 800271a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800290c <main+0x83c>
 800271e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002722:	ee16 0a90 	vmov	r0, s13
 8002726:	f7fd fec7 	bl	80004b8 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ec43 2b10 	vmov	d0, r2, r3
 8002732:	f007 ff99 	bl	800a668 <acos>
 8002736:	ec53 2b10 	vmov	r2, r3, d0
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f7fe fa0b 	bl	8000b58 <__aeabi_d2f>
 8002742:	ee07 0a10 	vmov	s14, r0
 8002746:	eddf 7a72 	vldr	s15, [pc, #456]	; 8002910 <main+0x840>
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	ee17 0a90 	vmov	r0, s15
 8002752:	f7fd feb1 	bl	80004b8 <__aeabi_f2d>
 8002756:	a354      	add	r3, pc, #336	; (adr r3, 80028a8 <main+0x7d8>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f82e 	bl	80007bc <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <main+0x844>)
 800276e:	f7fd fd43 	bl	80001f8 <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe f9ed 	bl	8000b58 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
					back_lifting_angle =
 8002780:	4a65      	ldr	r2, [pc, #404]	; (8002918 <main+0x848>)
 8002782:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <main+0x848>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe95 	bl	80004b8 <__aeabi_f2d>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b62      	ldr	r3, [pc, #392]	; (800291c <main+0x84c>)
 8002794:	f7fe f812 	bl	80007bc <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	4b5e      	ldr	r3, [pc, #376]	; (8002920 <main+0x850>)
 80027a6:	f7fd fedf 	bl	8000568 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fe f989 	bl	8000ac8 <__aeabi_d2iz>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <main+0x854>)
 80027ba:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <main+0x848>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	eef4 7a67 	vcmp.f32	s15, s15
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	d613      	bvs.n	80027f4 <main+0x724>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 80027cc:	4b55      	ldr	r3, [pc, #340]	; (8002924 <main+0x854>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <main+0x724>
								|| curb_height <= 0.05 )
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <main+0x830>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe6a 	bl	80004b8 <__aeabi_f2d>
 80027e4:	a336      	add	r3, pc, #216	; (adr r3, 80028c0 <main+0x7f0>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fe f939 	bl	8000a60 <__aeabi_dcmple>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <main+0x72c>
					{
						lifting_mode = RETRACTION;
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <main+0x800>)
 80027f6:	2203      	movs	r2, #3
 80027f8:	701a      	strb	r2, [r3, #0]
						continue;
 80027fa:	e1ec      	b.n	8002bd6 <main+0xb06>
					}
					speed[BACK_INDEX] = 0;
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <main+0x818>)
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <main+0x818>)
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
					climb_first_iteration = false;
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <main+0x814>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
//					lifting_mode = RETRACTION;
//					HAL_Delay(500);
//				}

				//Start Climbing process
				if (finish_climbing_flag == false){
 8002812:	4b45      	ldr	r3, [pc, #276]	; (8002928 <main+0x858>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d011      	beq.n	8002844 <main+0x774>
					if(!in_climb_process(MAX_FRONT_CLIMBING_ENC,back_encoder_input))
 8002820:	f240 739e 	movw	r3, #1950	; 0x79e
 8002824:	461a      	mov	r2, r3
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <main+0x854>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 fe83 	bl	8003538 <in_climb_process>
 8002832:	4603      	mov	r3, r0
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <main+0x774>
						finish_climbing_flag = true;
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <main+0x858>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
				}


				if (finish_climbing_flag == true){
 8002844:	4b38      	ldr	r3, [pc, #224]	; (8002928 <main+0x858>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80d5 	beq.w	80029f8 <main+0x928>
					emBrakeMotor(0);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe ff48 	bl	80016e4 <emBrakeMotor>
					if(!(climbingForward(forward_distance+0.03)))
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <main+0x85c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe2d 	bl	80004b8 <__aeabi_f2d>
 800285e:	a31a      	add	r3, pc, #104	; (adr r3, 80028c8 <main+0x7f8>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fcca 	bl	80001fc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f972 	bl	8000b58 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	ee00 3a10 	vmov	s0, r3
 800287a:	f000 fc55 	bl	8003128 <climbingForward>
 800287e:	4603      	mov	r3, r0
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80b6 	beq.w	80029f8 <main+0x928>
					{
						emBrakeMotor(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f7fe ff29 	bl	80016e4 <emBrakeMotor>
						finish_climbing_flag = false;
 8002892:	4b25      	ldr	r3, [pc, #148]	; (8002928 <main+0x858>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <main+0x800>)
 800289a:	2203      	movs	r2, #3
 800289c:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 800289e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028a2:	f002 fa27 	bl	8004cf4 <HAL_Delay>
 80028a6:	e0a7      	b.n	80029f8 <main+0x928>
 80028a8:	54442d18 	.word	0x54442d18
 80028ac:	400921fb 	.word	0x400921fb
 80028b0:	eb851eb8 	.word	0xeb851eb8
 80028b4:	3f8eb851 	.word	0x3f8eb851
 80028b8:	916872b0 	.word	0x916872b0
 80028bc:	3faf7ced 	.word	0x3faf7ced
 80028c0:	9999999a 	.word	0x9999999a
 80028c4:	3fa99999 	.word	0x3fa99999
 80028c8:	eb851eb8 	.word	0xeb851eb8
 80028cc:	3f9eb851 	.word	0x3f9eb851
 80028d0:	20000108 	.word	0x20000108
 80028d4:	40020400 	.word	0x40020400
 80028d8:	200000d8 	.word	0x200000d8
 80028dc:	200001c4 	.word	0x200001c4
 80028e0:	200001c5 	.word	0x200001c5
 80028e4:	20000109 	.word	0x20000109
 80028e8:	200001c8 	.word	0x200001c8
 80028ec:	3eb2b021 	.word	0x3eb2b021
 80028f0:	2000030c 	.word	0x2000030c
 80028f4:	40668000 	.word	0x40668000
 80028f8:	3e19999a 	.word	0x3e19999a
 80028fc:	3fb00000 	.word	0x3fb00000
 8002900:	200001e8 	.word	0x200001e8
 8002904:	3e19999a 	.word	0x3e19999a
 8002908:	200001f0 	.word	0x200001f0
 800290c:	3eb2b021 	.word	0x3eb2b021
 8002910:	43340000 	.word	0x43340000
 8002914:	403e0000 	.word	0x403e0000
 8002918:	200001f4 	.word	0x200001f4
 800291c:	40768000 	.word	0x40768000
 8002920:	40c00000 	.word	0x40c00000
 8002924:	200001f8 	.word	0x200001f8
 8002928:	200001fc 	.word	0x200001fc
 800292c:	20000124 	.word	0x20000124
//					HAL_Delay(500);
//				}

			}

			else if (lifting_mode == CLIMB_DOWN)
 8002930:	4bad      	ldr	r3, [pc, #692]	; (8002be8 <main+0xb18>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d15f      	bne.n	80029f8 <main+0x928>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2110      	movs	r1, #16
 800293c:	48ab      	ldr	r0, [pc, #684]	; (8002bec <main+0xb1c>)
 800293e:	f003 fee3 	bl	8006708 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002942:	4bab      	ldr	r3, [pc, #684]	; (8002bf0 <main+0xb20>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01d      	beq.n	8002986 <main+0x8b6>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 800294a:	4baa      	ldr	r3, [pc, #680]	; (8002bf4 <main+0xb24>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 5.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd90 	bl	8000474 <__aeabi_ui2d>
 8002954:	a3a2      	add	r3, pc, #648	; (adr r3, 8002be0 <main+0xb10>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fd fc4f 	bl	80001fc <__adddf3>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f8af 	bl	8000ac8 <__aeabi_d2iz>
 800296a:	4603      	mov	r3, r0
 800296c:	4aa2      	ldr	r2, [pc, #648]	; (8002bf8 <main+0xb28>)
 800296e:	6013      	str	r3, [r2, #0]
//					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC )
//					{
//						lifting_mode = RETRACTION;
//						continue;
//					}
					climb_first_iteration = false;
 8002970:	4b9f      	ldr	r3, [pc, #636]	; (8002bf0 <main+0xb20>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]

					speed[BACK_INDEX] = 0;
 8002976:	4ba1      	ldr	r3, [pc, #644]	; (8002bfc <main+0xb2c>)
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 800297e:	4b9f      	ldr	r3, [pc, #636]	; (8002bfc <main+0xb2c>)
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
//					lifting_mode = RETRACTION;
//					HAL_Delay(500);
//				}

				//Start Climbing process
				if (finish_climbing_flag == false){
 8002986:	4b9e      	ldr	r3, [pc, #632]	; (8002c00 <main+0xb30>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f083 0301 	eor.w	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <main+0x8e6>
					if(!in_climb_process(front_climbDown_enc,MAX_BACK_CLIMBING_ENC))
 8002994:	4b98      	ldr	r3, [pc, #608]	; (8002bf8 <main+0xb28>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fdca 	bl	8003538 <in_climb_process>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <main+0x8e6>
						finish_climbing_flag = true;
 80029b0:	4b93      	ldr	r3, [pc, #588]	; (8002c00 <main+0xb30>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
				}


				if (finish_climbing_flag == true){
 80029b6:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <main+0xb30>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01c      	beq.n	80029f8 <main+0x928>
					emBrakeMotor(0);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe fe90 	bl	80016e4 <emBrakeMotor>
					if(!(climbingForward(forward_distance)))
 80029c4:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <main+0xb34>)
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	eeb0 0a67 	vmov.f32	s0, s15
 80029ce:	f000 fbab 	bl	8003128 <climbingForward>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <main+0x928>
					{
						emBrakeMotor(1);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fe fe80 	bl	80016e4 <emBrakeMotor>
						finish_climbing_flag = false;
 80029e4:	4b86      	ldr	r3, [pc, #536]	; (8002c00 <main+0xb30>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 80029ea:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <main+0xb18>)
 80029ec:	2203      	movs	r2, #3
 80029ee:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 80029f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029f4:	f002 f97e 	bl	8004cf4 <HAL_Delay>
//									lifting_mode = IDLE;
//									HAL_Delay(500);
//								}
			}
//
			if (lifting_mode == RETRACTION)
 80029f8:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <main+0xb18>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d148      	bne.n	8002a92 <main+0x9c2>
			{

				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2108      	movs	r1, #8
 8002a04:	4879      	ldr	r0, [pc, #484]	; (8002bec <main+0xb1c>)
 8002a06:	f003 fe7f 	bl	8006708 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	4877      	ldr	r0, [pc, #476]	; (8002bec <main+0xb1c>)
 8002a10:	f003 fe7a 	bl	8006708 <HAL_GPIO_WritePin>
				//retraction process
				if (abs(encoderBack.encoder_pos- (MIN_BACK_ALLOWABLE_ENC)) > 30
 8002a14:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <main+0xb38>)
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bfb8      	it	lt
 8002a22:	425b      	neglt	r3, r3
 8002a24:	2b1e      	cmp	r3, #30
 8002a26:	dc09      	bgt.n	8002a3c <main+0x96c>
						|| abs(encoderFront.encoder_pos - (MIN_FRONT_ALLOWABLE_ENC))
 8002a28:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <main+0xb24>)
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfb8      	it	lt
 8002a36:	425b      	neglt	r3, r3
 8002a38:	2b1e      	cmp	r3, #30
 8002a3a:	dd25      	ble.n	8002a88 <main+0x9b8>
								> 30)
				{
					goto_pos(MIN_BACK_ALLOWABLE_ENC, backClimb_pid);
 8002a3c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <main+0xb3c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f000 fc5d 	bl	8003308 <goto_pos>
//					goto_pos(0, backClimb_pid);
					goto_pos(MIN_FRONT_ALLOWABLE_ENC, frontClimb_pid);
 8002a4e:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b6e      	ldr	r3, [pc, #440]	; (8002c10 <main+0xb40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 fc54 	bl	8003308 <goto_pos>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a60:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <main+0xb2c>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	d10f      	bne.n	8002a90 <main+0x9c0>
 8002a70:	4b62      	ldr	r3, [pc, #392]	; (8002bfc <main+0xb2c>)
 8002a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7e:	d107      	bne.n	8002a90 <main+0x9c0>
						lifting_mode = NORMAL;
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <main+0xb18>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a86:	e003      	b.n	8002a90 <main+0x9c0>
				}
				else
				{

					lifting_mode = NORMAL;
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <main+0xb18>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e000      	b.n	8002a92 <main+0x9c2>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a90:	bf00      	nop

			}

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 8002a92:	4b5a      	ldr	r3, [pc, #360]	; (8002bfc <main+0xb2c>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eef0 7ae7 	vabs.f32	s15, s15
 8002a9c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	d503      	bpl.n	8002ab2 <main+0x9e2>
				speed[FRONT_INDEX] = 0;
 8002aaa:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <main+0xb2c>)
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 8002ab2:	4b52      	ldr	r3, [pc, #328]	; (8002bfc <main+0xb2c>)
 8002ab4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ab8:	eef0 7ae7 	vabs.f32	s15, s15
 8002abc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d503      	bpl.n	8002ad2 <main+0xa02>
				speed[BACK_INDEX] = 0;
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <main+0xb2c>)
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8002ad2:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <main+0xb24>)
 8002ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad6:	f242 3333 	movw	r3, #9011	; 0x2333
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d212      	bcs.n	8002b06 <main+0xa36>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002ae0:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <main+0xb24>)
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d91e      	bls.n	8002b2a <main+0xa5a>
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <main+0xb2c>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	dd16      	ble.n	8002b2a <main+0xa5a>
					speed[FRONT_INDEX] = 0;
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <main+0xb2c>)
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e011      	b.n	8002b2a <main+0xa5a>
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <main+0xb24>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d20b      	bcs.n	8002b2a <main+0xa5a>
 8002b12:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <main+0xb2c>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	d503      	bpl.n	8002b2a <main+0xa5a>
					speed[FRONT_INDEX] = 0;
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <main+0xb2c>)
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <main+0xb38>)
 8002b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d212      	bcs.n	8002b5e <main+0xa8e>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8002b38:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <main+0xb38>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d91e      	bls.n	8002b82 <main+0xab2>
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <main+0xb2c>)
 8002b46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b52:	dd16      	ble.n	8002b82 <main+0xab2>
					speed[BACK_INDEX] = 0;
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <main+0xb2c>)
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	e011      	b.n	8002b82 <main+0xab2>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002b5e:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <main+0xb38>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d20b      	bcs.n	8002b82 <main+0xab2>
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <main+0xb2c>)
 8002b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d503      	bpl.n	8002b82 <main+0xab2>
					speed[BACK_INDEX] = 0;
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <main+0xb2c>)
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <main+0xb2c>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8c:	4821      	ldr	r0, [pc, #132]	; (8002c14 <main+0xb44>)
 8002b8e:	f7fe fe8f 	bl	80018b0 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <main+0xb2c>)
 8002b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b98:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9c:	481e      	ldr	r0, [pc, #120]	; (8002c18 <main+0xb48>)
 8002b9e:	f7fe fe87 	bl	80018b0 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <main+0xb2c>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	d10b      	bne.n	8002bca <main+0xafa>
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <main+0xb2c>)
 8002bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	d103      	bne.n	8002bca <main+0xafa>
				emBrakeMotor(0);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe fd8e 	bl	80016e4 <emBrakeMotor>
 8002bc8:	e002      	b.n	8002bd0 <main+0xb00>
			else
				emBrakeMotor(1);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fe fd8a 	bl	80016e4 <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002bd0:	f002 f884 	bl	8004cdc <HAL_GetTick>
 8002bd4:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8002bd6:	f7ff bb65 	b.w	80022a4 <main+0x1d4>
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
 8002be0:	9f49f4a0 	.word	0x9f49f4a0
 8002be4:	405f49f4 	.word	0x405f49f4
 8002be8:	20000108 	.word	0x20000108
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	20000109 	.word	0x20000109
 8002bf4:	2000030c 	.word	0x2000030c
 8002bf8:	200001ec 	.word	0x200001ec
 8002bfc:	200001c8 	.word	0x200001c8
 8002c00:	200001fc 	.word	0x200001fc
 8002c04:	20000124 	.word	0x20000124
 8002c08:	20000364 	.word	0x20000364
 8002c0c:	20000510 	.word	0x20000510
 8002c10:	200004c4 	.word	0x200004c4
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000034 	.word	0x20000034

08002c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b094      	sub	sp, #80	; 0x50
 8002c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c22:	f107 0320 	add.w	r3, r7, #32
 8002c26:	2230      	movs	r2, #48	; 0x30
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f007 fac4 	bl	800a1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <SystemClock_Config+0xd8>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <SystemClock_Config+0xd8>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <SystemClock_Config+0xd8>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <SystemClock_Config+0xdc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <SystemClock_Config+0xdc>)
 8002c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <SystemClock_Config+0xdc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c82:	2302      	movs	r3, #2
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002c90:	23b4      	movs	r3, #180	; 0xb4
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c94:	2302      	movs	r3, #2
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c98:	2304      	movs	r3, #4
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c9c:	f107 0320 	add.w	r3, r7, #32
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 ff73 	bl	8006b8c <HAL_RCC_OscConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cac:	f000 fd66 	bl	800377c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002cb0:	f003 ff1c 	bl	8006aec <HAL_PWREx_EnableOverDrive>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002cba:	f000 fd5f 	bl	800377c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	2105      	movs	r1, #5
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 f9c5 	bl	800706c <HAL_RCC_ClockConfig>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002ce8:	f000 fd48 	bl	800377c <Error_Handler>
  }
}
 8002cec:	bf00      	nop
 8002cee:	3750      	adds	r7, #80	; 0x50
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d11c      	bne.n	8002d46 <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002d0c:	f001 ffe6 	bl	8004cdc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_GPIO_EXTI_Callback+0x58>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d916      	bls.n	8002d4a <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002d1c:	480e      	ldr	r0, [pc, #56]	; (8002d58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d1e:	f7fe fca3 	bl	8001668 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_GPIO_EXTI_Callback+0x60>)
 8002d2c:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d38:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002d3a:	f001 ffcf 	bl	8004cdc <HAL_GetTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_GPIO_EXTI_Callback+0x58>)
 8002d42:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002d44:	e001      	b.n	8002d4a <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002d4a:	bf00      	nop
	}
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	200001bc 	.word	0x200001bc
 8002d58:	200004b4 	.word	0x200004b4
 8002d5c:	2000050c 	.word	0x2000050c
 8002d60:	20000410 	.word	0x20000410

08002d64 <HAL_UART_RxCpltCallback>:
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <HAL_UART_RxCpltCallback+0x10c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d175      	bne.n	8002e62 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002d7e:	785b      	ldrb	r3, [r3, #1]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002d88:	789b      	ldrb	r3, [r3, #2]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002d92:	78db      	ldrb	r3, [r3, #3]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002d9c:	791b      	ldrb	r3, [r3, #4]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002da6:	795b      	ldrb	r3, [r3, #5]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002db0:	799b      	ldrb	r3, [r3, #6]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002dba:	79db      	ldrb	r3, [r3, #7]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002dc4:	7a1b      	ldrb	r3, [r3, #8]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002dce:	7a5b      	ldrb	r3, [r3, #9]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002dd8:	7a9b      	ldrb	r3, [r3, #10]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002de2:	7adb      	ldrb	r3, [r3, #11]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002dea:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002dec:	7b1b      	ldrb	r3, [r3, #12]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002df6:	7b5b      	ldrb	r3, [r3, #13]
 8002df8:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002dfe:	89fb      	ldrh	r3, [r7, #14]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e04:	7b9b      	ldrb	r3, [r3, #14]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d12b      	bne.n	8002e62 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2baa      	cmp	r3, #170	; 0xaa
 8002e10:	d127      	bne.n	8002e62 <HAL_UART_RxCpltCallback+0xfe>
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2ba4      	cmp	r3, #164	; 0xa4
 8002e18:	d123      	bne.n	8002e62 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e1c:	78db      	ldrb	r3, [r3, #3]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11f      	bne.n	8002e62 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e24:	7a5b      	ldrb	r3, [r3, #9]
 8002e26:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e2a:	7a1b      	ldrb	r3, [r3, #8]
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	441a      	add	r2, r3
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e32:	79db      	ldrb	r3, [r3, #7]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e3a:	7992      	ldrb	r2, [r2, #6]
 8002e3c:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_UART_RxCpltCallback+0x114>)
 8002e40:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e44:	7b5b      	ldrb	r3, [r3, #13]
 8002e46:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e4a:	7b1b      	ldrb	r3, [r3, #12]
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	441a      	add	r2, r3
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e52:	7adb      	ldrb	r3, [r3, #11]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002e58:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <HAL_UART_RxCpltCallback+0x110>)
 8002e5a:	7a92      	ldrb	r2, [r2, #10]
 8002e5c:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002e5e:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_UART_RxCpltCallback+0x114>)
 8002e60:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40004800 	.word	0x40004800
 8002e74:	200004fc 	.word	0x200004fc
 8002e78:	20000414 	.word	0x20000414
 8002e7c:	00000000 	.word	0x00000000

08002e80 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a8d      	ldr	r2, [pc, #564]	; (80030c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f040 810b 	bne.w	80030a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002e92:	f107 0308 	add.w	r3, r7, #8
 8002e96:	4a8b      	ldr	r2, [pc, #556]	; (80030c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f002 fa49 	bl	8005332 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002ea0:	7a7b      	ldrb	r3, [r7, #9]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d150      	bne.n	8002f48 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	4987      	ldr	r1, [pc, #540]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fea7 	bl	8001c00 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002eb2:	4885      	ldr	r0, [pc, #532]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002eb4:	f7fe ff1d 	bl	8001cf2 <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8002eb8:	4b83      	ldr	r3, [pc, #524]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8002ec2:	4a81      	ldr	r2, [pc, #516]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002ec6:	4b80      	ldr	r3, [pc, #512]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002ed2:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80030cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8002ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eda:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80030d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee2:	ee17 0a90 	vmov	r0, s15
 8002ee6:	f7fd fae7 	bl	80004b8 <__aeabi_f2d>
 8002eea:	a371      	add	r3, pc, #452	; (adr r3, 80030b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f7fd f984 	bl	80001fc <__adddf3>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7fd fe2c 	bl	8000b58 <__aeabi_d2f>
 8002f00:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002f02:	4a71      	ldr	r2, [pc, #452]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002f06:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f08:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f0c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80030d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	dd09      	ble.n	8002f2e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 8002f1a:	4b6b      	ldr	r3, [pc, #428]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f1c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f20:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80030d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f28:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f2a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8002f2e:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d306      	bcc.n	8002f48 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 8002f3e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002f42:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002f44:	4b60      	ldr	r3, [pc, #384]	; (80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f46:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002f48:	7a7b      	ldrb	r3, [r7, #9]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	f040 80ac 	bne.w	80030a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	495f      	ldr	r1, [pc, #380]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fe52 	bl	8001c00 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002f5c:	485d      	ldr	r0, [pc, #372]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f5e:	f7fe fec8 	bl	8001cf2 <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002f62:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002f6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d839      	bhi.n	8002fe6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002f72:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002f7a:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8002f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f80:	0b5b      	lsrs	r3, r3, #13
 8002f82:	f242 3133 	movw	r1, #9011	; 0x2333
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002f8c:	4a51      	ldr	r2, [pc, #324]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f8e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9c:	ee17 0a90 	vmov	r0, s15
 8002fa0:	f7fd fa8a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002fa4:	a344      	add	r3, pc, #272	; (adr r3, 80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002faa:	f7fd fc07 	bl	80007bc <__aeabi_ddiv>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b48      	ldr	r3, [pc, #288]	; (80030dc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002fbc:	f7fd fad4 	bl	8000568 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	a339      	add	r3, pc, #228	; (adr r3, 80030b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd f915 	bl	80001fc <__adddf3>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f7fd fdbd 	bl	8000b58 <__aeabi_d2f>
 8002fde:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002fe0:	4a3c      	ldr	r2, [pc, #240]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe4:	e047      	b.n	8003076 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa42 	bl	8000474 <__aeabi_ui2d>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	a130      	add	r1, pc, #192	; (adr r1, 80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ffa:	f7fd f8fd 	bl	80001f8 <__aeabi_dsub>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f7fd fd87 	bl	8000b18 <__aeabi_d2uiz>
 800300a:	4603      	mov	r3, r0
 800300c:	4a31      	ldr	r2, [pc, #196]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800300e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301c:	ee17 0a90 	vmov	r0, s15
 8003020:	f7fd fa4a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8003024:	a324      	add	r3, pc, #144	; (adr r3, 80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd fbc7 	bl	80007bc <__aeabi_ddiv>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800303c:	f7fd fa94 	bl	8000568 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	a319      	add	r3, pc, #100	; (adr r3, 80030b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd f8d5 	bl	80001fc <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8003060:	f7fd f8ca 	bl	80001f8 <__aeabi_dsub>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	f7fd fd74 	bl	8000b58 <__aeabi_d2f>
 8003070:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f640 421c 	movw	r2, #3100	; 0xc1c
 800307e:	4293      	cmp	r3, r2
 8003080:	d312      	bcc.n	80030a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd f9f4 	bl	8000474 <__aeabi_ui2d>
 800308c:	a30a      	add	r3, pc, #40	; (adr r3, 80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd f8b1 	bl	80001f8 <__aeabi_dsub>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f7fd fd13 	bl	8000ac8 <__aeabi_d2iz>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80030a6:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	d0e56042 	.word	0xd0e56042
 80030b4:	40424b22 	.word	0x40424b22
 80030b8:	9999999a 	.word	0x9999999a
 80030bc:	40c19999 	.word	0x40c19999
 80030c0:	200002bc 	.word	0x200002bc
 80030c4:	20000204 	.word	0x20000204
 80030c8:	20000364 	.word	0x20000364
 80030cc:	46000000 	.word	0x46000000
 80030d0:	43b40000 	.word	0x43b40000
 80030d4:	2000030c 	.word	0x2000030c
 80030d8:	e8bb8111 	.word	0xe8bb8111
 80030dc:	40768000 	.word	0x40768000

080030e0 <baseMotorCommand>:

void baseMotorCommand(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <baseMotorCommand+0x40>)
 80030e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ee:	ee17 3a90 	vmov	r3, s15
 80030f2:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <baseMotorCommand+0x44>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <baseMotorCommand+0x40>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003106:	ee17 3a90 	vmov	r3, s15
 800310a:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <baseMotorCommand+0x44>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200000d8 	.word	0x200000d8
 8003124:	20000554 	.word	0x20000554

08003128 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 8003128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	ed87 0a01 	vstr	s0, [r7, #4]
	static float prev_dist_remaining;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8003134:	edd7 7a01 	vldr	s15, [r7, #4]
 8003138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	db02      	blt.n	8003148 <climbingForward+0x20>
 8003142:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003146:	e000      	b.n	800314a <climbingForward+0x22>
 8003148:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <climbingForward+0x1b8>)
 800314a:	617b      	str	r3, [r7, #20]

	if (first_loop)
 800314c:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <climbingForward+0x1bc>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <climbingForward+0x50>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 8003154:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <climbingForward+0x1c0>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a64      	ldr	r2, [pc, #400]	; (80032ec <climbingForward+0x1c4>)
 800315a:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 800315c:	f001 fdbe 	bl	8004cdc <HAL_GetTick>
 8003160:	4603      	mov	r3, r0
 8003162:	4a63      	ldr	r2, [pc, #396]	; (80032f0 <climbingForward+0x1c8>)
 8003164:	6013      	str	r3, [r2, #0]
		stationary_tick = 0;
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <climbingForward+0x1cc>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
		first_loop = false;
 800316c:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <climbingForward+0x1bc>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 8003172:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <climbingForward+0x1d0>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <climbingForward+0x1d0>)
 800317a:	ed93 7a00 	vldr	s14, [r3]
 800317e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	f2c0 808f 	blt.w	80032b0 <climbingForward+0x188>
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <climbingForward+0x1bc>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	f083 0301 	eor.w	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8087 	beq.w	80032b0 <climbingForward+0x188>
	{
		send_HubMotor(rps, rps);
 80031a2:	edd7 0a05 	vldr	s1, [r7, #20]
 80031a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80031aa:	f7fe f931 	bl	8001410 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 80031ae:	f001 fd95 	bl	8004cdc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <climbingForward+0x1c8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d976      	bls.n	80032ac <climbingForward+0x184>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 80031be:	f001 fd8d 	bl	8004cdc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <climbingForward+0x1c8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031d2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80032fc <climbingForward+0x1d4>
 80031d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031da:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <climbingForward+0x1c0>)
 80031e0:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 80031e2:	4b42      	ldr	r3, [pc, #264]	; (80032ec <climbingForward+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 80031f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80031f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031fc:	ee17 0a90 	vmov	r0, s15
 8003200:	f7fd f95a 	bl	80004b8 <__aeabi_f2d>
 8003204:	a332      	add	r3, pc, #200	; (adr r3, 80032d0 <climbingForward+0x1a8>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd f9ad 	bl	8000568 <__aeabi_dmul>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	4b39      	ldr	r3, [pc, #228]	; (8003300 <climbingForward+0x1d8>)
 800321c:	f7fd face 	bl	80007bc <__aeabi_ddiv>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fc96 	bl	8000b58 <__aeabi_d2f>
 800322c:	4603      	mov	r3, r0
 800322e:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 8003230:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <climbingForward+0x1d0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f93f 	bl	80004b8 <__aeabi_f2d>
 800323a:	4604      	mov	r4, r0
 800323c:	460d      	mov	r5, r1
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7fd f93a 	bl	80004b8 <__aeabi_f2d>
 8003244:	a324      	add	r3, pc, #144	; (adr r3, 80032d8 <climbingForward+0x1b0>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f7fd f98d 	bl	8000568 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4690      	mov	r8, r2
 8003254:	4699      	mov	r9, r3
 8003256:	6938      	ldr	r0, [r7, #16]
 8003258:	f7fd f92e 	bl	80004b8 <__aeabi_f2d>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4640      	mov	r0, r8
 8003262:	4649      	mov	r1, r9
 8003264:	f7fd f980 	bl	8000568 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003278:	f7fd faa0 	bl	80007bc <__aeabi_ddiv>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fc ffb8 	bl	80001f8 <__aeabi_dsub>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f7fd fc62 	bl	8000b58 <__aeabi_d2f>
 8003294:	4603      	mov	r3, r0
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <climbingForward+0x1d0>)
 8003298:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 800329a:	f001 fd1f 	bl	8004cdc <HAL_GetTick>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <climbingForward+0x1c8>)
 80032a2:	6013      	str	r3, [r2, #0]
//					dist_remaining = 0;
//				}
//			}
//			else
//				stationary_tick = HAL_GetTick();
			prev_enc = hub_encoder_feedback.encoder_2;
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <climbingForward+0x1c0>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a10      	ldr	r2, [pc, #64]	; (80032ec <climbingForward+0x1c4>)
 80032aa:	6013      	str	r3, [r2, #0]

		}
		return true;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e009      	b.n	80032c4 <climbingForward+0x19c>
	}
	else
	{
		first_loop = true;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <climbingForward+0x1bc>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 80032b6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8003304 <climbingForward+0x1dc>
 80032ba:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003304 <climbingForward+0x1dc>
 80032be:	f7fe f8a7 	bl	8001410 <send_HubMotor>
		return false;
 80032c2:	2300      	movs	r3, #0
	}
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032ce:	bf00      	nop
 80032d0:	54442d18 	.word	0x54442d18
 80032d4:	400921fb 	.word	0x400921fb
 80032d8:	916872b0 	.word	0x916872b0
 80032dc:	3fbf7ced 	.word	0x3fbf7ced
 80032e0:	bf800000 	.word	0xbf800000
 80032e4:	20000128 	.word	0x20000128
 80032e8:	20000414 	.word	0x20000414
 80032ec:	20000220 	.word	0x20000220
 80032f0:	20000224 	.word	0x20000224
 80032f4:	20000228 	.word	0x20000228
 80032f8:	2000022c 	.word	0x2000022c
 80032fc:	447a0000 	.word	0x447a0000
 8003300:	40b00000 	.word	0x40b00000
 8003304:	00000000 	.word	0x00000000

08003308 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 8003308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;
	ENCODER_Read(&encoderBack);
 8003314:	487c      	ldr	r0, [pc, #496]	; (8003508 <goto_pos+0x200>)
 8003316:	f7fe fcc4 	bl	8001ca2 <ENCODER_Read>
	ENCODER_Read(&encoderFront);
 800331a:	487c      	ldr	r0, [pc, #496]	; (800350c <goto_pos+0x204>)
 800331c:	f7fe fcc1 	bl	8001ca2 <ENCODER_Read>
	if (pid_t == frontClimb_pid)
 8003320:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <goto_pos+0x208>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d17b      	bne.n	8003422 <goto_pos+0x11a>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <goto_pos+0x204>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8003330:	4b77      	ldr	r3, [pc, #476]	; (8003510 <goto_pos+0x208>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fe1d 	bl	8000f74 <pid_need_compute>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d06e      	beq.n	800341e <goto_pos+0x116>
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8a4 	bl	8000494 <__aeabi_i2d>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4690      	mov	r8, r2
 8003352:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	4b6e      	ldr	r3, [pc, #440]	; (8003514 <goto_pos+0x20c>)
 800335c:	4640      	mov	r0, r8
 800335e:	4649      	mov	r1, r9
 8003360:	f7fd fb92 	bl	8000a88 <__aeabi_dcmpgt>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d059      	beq.n	800341e <goto_pos+0x116>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003370:	4293      	cmp	r3, r2
 8003372:	d90f      	bls.n	8003394 <goto_pos+0x8c>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7fd f88d 	bl	8000494 <__aeabi_i2d>
 800337a:	a361      	add	r3, pc, #388	; (adr r3, 8003500 <goto_pos+0x1f8>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f7fc ff3a 	bl	80001f8 <__aeabi_dsub>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f7fd fb9c 	bl	8000ac8 <__aeabi_d2iz>
 8003390:	4603      	mov	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f640 421c 	movw	r2, #3100	; 0xc1c
 800339a:	4293      	cmp	r3, r2
 800339c:	d30f      	bcc.n	80033be <goto_pos+0xb6>
				enc -= 4096 * FRONT_GEAR_RATIO;
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd f878 	bl	8000494 <__aeabi_i2d>
 80033a4:	a356      	add	r3, pc, #344	; (adr r3, 8003500 <goto_pos+0x1f8>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc ff25 	bl	80001f8 <__aeabi_dsub>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7fd fb87 	bl	8000ac8 <__aeabi_d2iz>
 80033ba:	4603      	mov	r3, r0
 80033bc:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <goto_pos+0x210>)
 80033ca:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <goto_pos+0x214>)
 80033da:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <goto_pos+0x208>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fddb 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 80033e8:	4b4d      	ldr	r3, [pc, #308]	; (8003520 <goto_pos+0x218>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a4d      	ldr	r2, [pc, #308]	; (8003524 <goto_pos+0x21c>)
 80033ee:	6013      	str	r3, [r2, #0]
			if(fabs(speed[FRONT_INDEX]) < 5)
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <goto_pos+0x21c>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	eef0 7ae7 	vabs.f32	s15, s15
 80033fa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80033fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	d508      	bpl.n	800341a <goto_pos+0x112>
			{
				speed[FRONT_INDEX] = 0;
 8003408:	4b46      	ldr	r3, [pc, #280]	; (8003524 <goto_pos+0x21c>)
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <goto_pos+0x208>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd ffd5 	bl	80013c4 <pid_reset>
			}

			return true;
 800341a:	2301      	movs	r3, #1
 800341c:	e06b      	b.n	80034f6 <goto_pos+0x1ee>
		}
		else
		{
//			speed[FRONT_INDEX] = 0;

			return false;
 800341e:	2300      	movs	r3, #0
 8003420:	e069      	b.n	80034f6 <goto_pos+0x1ee>
		}
	}
	else if (pid_t == backClimb_pid)
 8003422:	4b41      	ldr	r3, [pc, #260]	; (8003528 <goto_pos+0x220>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d163      	bne.n	80034f4 <goto_pos+0x1ec>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <goto_pos+0x200>)
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <goto_pos+0x220>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fd9c 	bl	8000f74 <pid_need_compute>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d056      	beq.n	80034f0 <goto_pos+0x1e8>
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f823 	bl	8000494 <__aeabi_i2d>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4614      	mov	r4, r2
 8003454:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <goto_pos+0x20c>)
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f7fd fb11 	bl	8000a88 <__aeabi_dcmpgt>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d041      	beq.n	80034f0 <goto_pos+0x1e8>
		{
			// Read process feedback
			//following code is causing back turn
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003472:	4293      	cmp	r3, r2
 8003474:	d903      	bls.n	800347e <goto_pos+0x176>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800347c:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003484:	4293      	cmp	r3, r2
 8003486:	d303      	bcc.n	8003490 <goto_pos+0x188>
				enc -= 4096 * BACK_GEAR_RATIO;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800348e:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <goto_pos+0x224>)
 800349c:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034aa:	4b21      	ldr	r3, [pc, #132]	; (8003530 <goto_pos+0x228>)
 80034ac:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <goto_pos+0x220>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fd72 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <goto_pos+0x22c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a19      	ldr	r2, [pc, #100]	; (8003524 <goto_pos+0x21c>)
 80034c0:	6053      	str	r3, [r2, #4]
			if(fabs(speed[BACK_INDEX]) < 5)
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <goto_pos+0x21c>)
 80034c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034c8:	eef0 7ae7 	vabs.f32	s15, s15
 80034cc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80034d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d508      	bpl.n	80034ec <goto_pos+0x1e4>
			{
				speed[BACK_INDEX] = 0;
 80034da:	4b12      	ldr	r3, [pc, #72]	; (8003524 <goto_pos+0x21c>)
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	605a      	str	r2, [r3, #4]
				pid_reset(backClimb_pid);
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <goto_pos+0x220>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd ff6c 	bl	80013c4 <pid_reset>
			}
			return true;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e002      	b.n	80034f6 <goto_pos+0x1ee>
		else
		{
//			speed[BACK_INDEX] = 0;
//			if(fabs(speed[BACK_INDEX]) < 5)
//				pid_reset(backClimb_pid);
			return false;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <goto_pos+0x1ee>
		}
	}
	return false;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003500:	9999999a 	.word	0x9999999a
 8003504:	40c19999 	.word	0x40c19999
 8003508:	20000364 	.word	0x20000364
 800350c:	2000030c 	.word	0x2000030c
 8003510:	200004c4 	.word	0x200004c4
 8003514:	40140000 	.word	0x40140000
 8003518:	200001d8 	.word	0x200001d8
 800351c:	200001d0 	.word	0x200001d0
 8003520:	200001d4 	.word	0x200001d4
 8003524:	200001c8 	.word	0x200001c8
 8003528:	20000510 	.word	0x20000510
 800352c:	200001e4 	.word	0x200001e4
 8003530:	200001dc 	.word	0x200001dc
 8003534:	200001e0 	.word	0x200001e0

08003538 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc)
{
 8003538:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	613b      	str	r3, [r7, #16]

	if (first_loop)
 800354a:	4b81      	ldr	r3, [pc, #516]	; (8003750 <in_climb_process+0x218>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 8003552:	4b80      	ldr	r3, [pc, #512]	; (8003754 <in_climb_process+0x21c>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a80      	ldr	r2, [pc, #512]	; (8003758 <in_climb_process+0x220>)
 8003558:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 800355a:	f001 fbbf 	bl	8004cdc <HAL_GetTick>
 800355e:	4603      	mov	r3, r0
 8003560:	4a7e      	ldr	r2, [pc, #504]	; (800375c <in_climb_process+0x224>)
 8003562:	6013      	str	r3, [r2, #0]
		first_loop = false;
 8003564:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <in_climb_process+0x218>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 800356a:	4b7d      	ldr	r3, [pc, #500]	; (8003760 <in_climb_process+0x228>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fec9 	bl	8003308 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 8003576:	4b7b      	ldr	r3, [pc, #492]	; (8003764 <in_climb_process+0x22c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	6838      	ldr	r0, [r7, #0]
 800357e:	f7ff fec3 	bl	8003308 <goto_pos>

	if (fabs(speed[FRONT_INDEX]) >= 5 || fabs(speed[BACK_INDEX]) >= 5)
 8003582:	4b79      	ldr	r3, [pc, #484]	; (8003768 <in_climb_process+0x230>)
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	eef0 7ae7 	vabs.f32	s15, s15
 800358c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003598:	da0b      	bge.n	80035b2 <in_climb_process+0x7a>
 800359a:	4b73      	ldr	r3, [pc, #460]	; (8003768 <in_climb_process+0x230>)
 800359c:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a0:	eef0 7ae7 	vabs.f32	s15, s15
 80035a4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80035a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	db02      	blt.n	80035b8 <in_climb_process+0x80>
		is_lifting = true;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
 80035b6:	e001      	b.n	80035bc <in_climb_process+0x84>
	else
		is_lifting = false;
 80035b8:	2300      	movs	r3, #0
 80035ba:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 809d 	beq.w	80036fe <in_climb_process+0x1c6>
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <in_climb_process+0x230>)
 80035c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80035ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	f000 8094 	beq.w	80036fe <in_climb_process+0x1c6>
	{
		double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 80035d6:	f001 fb81 	bl	8004cdc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	4b5f      	ldr	r3, [pc, #380]	; (800375c <in_climb_process+0x224>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800376c <in_climb_process+0x234>
 80035ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035f2:	ee16 0a90 	vmov	r0, s13
 80035f6:	f7fc ff5f 	bl	80004b8 <__aeabi_f2d>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg)))
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <in_climb_process+0x238>)
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc ff57 	bl	80004b8 <__aeabi_f2d>
 800360a:	4604      	mov	r4, r0
 800360c:	460d      	mov	r5, r1
 800360e:	4b52      	ldr	r3, [pc, #328]	; (8003758 <in_climb_process+0x220>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ff50 	bl	80004b8 <__aeabi_f2d>
 8003618:	a349      	add	r3, pc, #292	; (adr r3, 8003740 <in_climb_process+0x208>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f7fc ffa3 	bl	8000568 <__aeabi_dmul>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <in_climb_process+0x23c>)
 8003630:	f7fd f8c4 	bl	80007bc <__aeabi_ddiv>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	ec43 2b17 	vmov	d7, r2, r3
 800363c:	eeb0 0a47 	vmov.f32	s0, s14
 8003640:	eef0 0a67 	vmov.f32	s1, s15
 8003644:	f006 ffbc 	bl	800a5c0 <sin>
 8003648:	ec59 8b10 	vmov	r8, r9, d0
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <in_climb_process+0x21c>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ff31 	bl	80004b8 <__aeabi_f2d>
 8003656:	a33a      	add	r3, pc, #232	; (adr r3, 8003740 <in_climb_process+0x208>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fc ff84 	bl	8000568 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <in_climb_process+0x23c>)
 800366e:	f7fd f8a5 	bl	80007bc <__aeabi_ddiv>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	ec43 2b17 	vmov	d7, r2, r3
 800367a:	eeb0 0a47 	vmov.f32	s0, s14
 800367e:	eef0 0a67 	vmov.f32	s1, s15
 8003682:	f006 ff9d 	bl	800a5c0 <sin>
 8003686:	ec53 2b10 	vmov	r2, r3, d0
 800368a:	4640      	mov	r0, r8
 800368c:	4649      	mov	r1, r9
 800368e:	f7fc fdb3 	bl	80001f8 <__aeabi_dsub>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4620      	mov	r0, r4
 8003698:	4629      	mov	r1, r5
 800369a:	f7fc ff65 	bl	8000568 <__aeabi_dmul>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
				/ dt; //unit: m/s,
 80036a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036aa:	f7fd f887 	bl	80007bc <__aeabi_ddiv>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f7fd fa4f 	bl	8000b58 <__aeabi_d2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 80036be:	6938      	ldr	r0, [r7, #16]
 80036c0:	f7fc fefa 	bl	80004b8 <__aeabi_f2d>
 80036c4:	a320      	add	r3, pc, #128	; (adr r3, 8003748 <in_climb_process+0x210>)
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f7fd f877 	bl	80007bc <__aeabi_ddiv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	f7fd fa3f 	bl	8000b58 <__aeabi_d2f>
 80036da:	4603      	mov	r3, r0
 80036dc:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 80036de:	edd7 0a04 	vldr	s1, [r7, #16]
 80036e2:	ed97 0a04 	vldr	s0, [r7, #16]
 80036e6:	f7fd fe93 	bl	8001410 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <in_climb_process+0x21c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <in_climb_process+0x220>)
 80036f0:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 80036f2:	f001 faf3 	bl	8004cdc <HAL_GetTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <in_climb_process+0x224>)
 80036fa:	6013      	str	r3, [r2, #0]
	{
 80036fc:	e010      	b.n	8003720 <in_climb_process+0x1e8>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <in_climb_process+0x1e8>
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <in_climb_process+0x230>)
 8003706:	edd3 7a01 	vldr	s15, [r3, #4]
 800370a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d105      	bne.n	8003720 <in_climb_process+0x1e8>
		send_HubMotor(0, 0);
 8003714:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003778 <in_climb_process+0x240>
 8003718:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003778 <in_climb_process+0x240>
 800371c:	f7fd fe78 	bl	8001410 <send_HubMotor>

	if (!is_lifting)
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	f083 0301 	eor.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <in_climb_process+0x1fa>
		first_loop = true;
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <in_climb_process+0x218>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 8003732:	7dfb      	ldrb	r3, [r7, #23]

}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800373e:	bf00      	nop
 8003740:	54442d18 	.word	0x54442d18
 8003744:	400921fb 	.word	0x400921fb
 8003748:	916872b0 	.word	0x916872b0
 800374c:	3faf7ced 	.word	0x3faf7ced
 8003750:	20000129 	.word	0x20000129
 8003754:	20000364 	.word	0x20000364
 8003758:	20000230 	.word	0x20000230
 800375c:	20000234 	.word	0x20000234
 8003760:	200004c4 	.word	0x200004c4
 8003764:	20000510 	.word	0x20000510
 8003768:	200001c8 	.word	0x200001c8
 800376c:	447a0000 	.word	0x447a0000
 8003770:	3eb2b021 	.word	0x3eb2b021
 8003774:	40668000 	.word	0x40668000
 8003778:	00000000 	.word	0x00000000

0800377c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 8003780:	2100      	movs	r1, #0
 8003782:	4808      	ldr	r0, [pc, #32]	; (80037a4 <Error_Handler+0x28>)
 8003784:	f004 fb4e 	bl	8007e24 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 8003788:	2104      	movs	r1, #4
 800378a:	4806      	ldr	r0, [pc, #24]	; (80037a4 <Error_Handler+0x28>)
 800378c:	f004 fb4a 	bl	8007e24 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 8003790:	2101      	movs	r1, #1
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <Error_Handler+0x2c>)
 8003794:	f7fd ffb8 	bl	8001708 <brakeMotor>
	brakeMotor(&backMotor, 1);
 8003798:	2101      	movs	r1, #1
 800379a:	4803      	ldr	r0, [pc, #12]	; (80037a8 <Error_Handler+0x2c>)
 800379c:	f7fd ffb4 	bl	8001708 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000554 	.word	0x20000554
 80037a8:	20000034 	.word	0x20000034

080037ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <MX_SPI1_Init+0x68>)
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <MX_SPI1_Init+0x6c>)
 80037b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <MX_SPI1_Init+0x68>)
 80037b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_SPI1_Init+0x68>)
 80037c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <MX_SPI1_Init+0x68>)
 80037c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <MX_SPI1_Init+0x68>)
 80037d0:	2202      	movs	r2, #2
 80037d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <MX_SPI1_Init+0x68>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <MX_SPI1_Init+0x68>)
 80037dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <MX_SPI1_Init+0x68>)
 80037e4:	2228      	movs	r2, #40	; 0x28
 80037e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <MX_SPI1_Init+0x68>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <MX_SPI1_Init+0x68>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <MX_SPI1_Init+0x68>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <MX_SPI1_Init+0x68>)
 80037fc:	220a      	movs	r2, #10
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003800:	4804      	ldr	r0, [pc, #16]	; (8003814 <MX_SPI1_Init+0x68>)
 8003802:	f003 fe2d 	bl	8007460 <HAL_SPI_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800380c:	f7ff ffb6 	bl	800377c <Error_Handler>
  }

}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	20000264 	.word	0x20000264
 8003818:	40013000 	.word	0x40013000

0800381c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12b      	bne.n	8003896 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 8003848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800384c:	6453      	str	r3, [r2, #68]	; 0x44
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003876:	2360      	movs	r3, #96	; 0x60
 8003878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003886:	2305      	movs	r3, #5
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4619      	mov	r1, r3
 8003890:	4805      	ldr	r0, [pc, #20]	; (80038a8 <HAL_SPI_MspInit+0x8c>)
 8003892:	f002 fd75 	bl	8006380 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003896:	bf00      	nop
 8003898:	3728      	adds	r7, #40	; 0x28
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40013000 	.word	0x40013000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020000 	.word	0x40020000

080038ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_MspInit+0x4c>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <HAL_MspInit+0x4c>)
 80038bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c0:	6453      	str	r3, [r2, #68]	; 0x44
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_MspInit+0x4c>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_MspInit+0x4c>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a08      	ldr	r2, [pc, #32]	; (80038f8 <HAL_MspInit+0x4c>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_MspInit+0x4c>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800390e:	e7fe      	b.n	800390e <HardFault_Handler+0x4>

08003910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003914:	e7fe      	b.n	8003914 <MemManage_Handler+0x4>

08003916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800391a:	e7fe      	b.n	800391a <BusFault_Handler+0x4>

0800391c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <UsageFault_Handler+0x4>

08003922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003950:	f001 f9b0 	bl	8004cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}

08003958 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <DMA1_Stream1_IRQHandler+0x10>)
 800395e:	f002 faa5 	bl	8005eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000614 	.word	0x20000614

0800396c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <DMA1_Stream3_IRQHandler+0x10>)
 8003972:	f002 fa9b 	bl	8005eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200006b4 	.word	0x200006b4

08003980 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <CAN1_RX0_IRQHandler+0x10>)
 8003986:	f001 fe0c 	bl	80055a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200002bc 	.word	0x200002bc

08003994 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003998:	2080      	movs	r0, #128	; 0x80
 800399a:	f002 fecf 	bl	800673c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <USART3_IRQHandler+0x10>)
 80039aa:	f005 fd13 	bl	80093d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000674 	.word	0x20000674

080039b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80039be:	f004 fb27 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000514 	.word	0x20000514

080039cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80039d2:	f004 fb1d 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000514 	.word	0x20000514

080039e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80039e6:	f004 fb13 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000514 	.word	0x20000514

080039f4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <TIM8_CC_IRQHandler+0x10>)
 80039fa:	f004 fb09 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000514 	.word	0x20000514

08003a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <SystemInit+0x28>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <SystemInit+0x28>)
 8003a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <SystemInit+0x28>)
 8003a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a22:	609a      	str	r2, [r3, #8]
#endif
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b096      	sub	sp, #88	; 0x58
 8003a38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	611a      	str	r2, [r3, #16]
 8003a62:	615a      	str	r2, [r3, #20]
 8003a64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	2220      	movs	r2, #32
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f006 fba3 	bl	800a1b8 <memset>

  htim1.Instance = TIM1;
 8003a72:	4b3e      	ldr	r3, [pc, #248]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a74:	4a3e      	ldr	r2, [pc, #248]	; (8003b70 <MX_TIM1_Init+0x13c>)
 8003a76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003a78:	4b3c      	ldr	r3, [pc, #240]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a7a:	22b3      	movs	r2, #179	; 0xb3
 8003a7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003a84:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a86:	2263      	movs	r2, #99	; 0x63
 8003a88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8a:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a90:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a96:	4b35      	ldr	r3, [pc, #212]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a9c:	4833      	ldr	r0, [pc, #204]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003a9e:	f004 f8ff 	bl	8007ca0 <HAL_TIM_Base_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003aa8:	f7ff fe68 	bl	800377c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	482c      	ldr	r0, [pc, #176]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003aba:	f004 fd13 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003ac4:	f7ff fe5a 	bl	800377c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ac8:	4828      	ldr	r0, [pc, #160]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003aca:	f004 f938 	bl	8007d3e <HAL_TIM_PWM_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003ad4:	f7ff fe52 	bl	800377c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4821      	ldr	r0, [pc, #132]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003ae8:	f005 fa2c 	bl	8008f44 <HAL_TIMEx_MasterConfigSynchronization>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003af2:	f7ff fe43 	bl	800377c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003af6:	2360      	movs	r3, #96	; 0x60
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b02:	2300      	movs	r3, #0
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b16:	2204      	movs	r2, #4
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4814      	ldr	r0, [pc, #80]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003b1c:	f004 fc1c 	bl	8008358 <HAL_TIM_PWM_ConfigChannel>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003b26:	f7ff fe29 	bl	800377c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b48:	1d3b      	adds	r3, r7, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4807      	ldr	r0, [pc, #28]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003b4e:	f005 fa75 	bl	800903c <HAL_TIMEx_ConfigBreakDeadTime>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003b58:	f7ff fe10 	bl	800377c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003b5c:	4803      	ldr	r0, [pc, #12]	; (8003b6c <MX_TIM1_Init+0x138>)
 8003b5e:	f000 fa1b 	bl	8003f98 <HAL_TIM_MspPostInit>

}
 8003b62:	bf00      	nop
 8003b64:	3758      	adds	r7, #88	; 0x58
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000594 	.word	0x20000594
 8003b70:	40010000 	.word	0x40010000

08003b74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b88:	f107 0320 	add.w	r3, r7, #32
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	615a      	str	r2, [r3, #20]
 8003ba2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bae:	2259      	movs	r2, #89	; 0x59
 8003bb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bba:	2263      	movs	r2, #99	; 0x63
 8003bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bca:	4823      	ldr	r0, [pc, #140]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bcc:	f004 f868 	bl	8007ca0 <HAL_TIM_Base_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003bd6:	f7ff fdd1 	bl	800377c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be4:	4619      	mov	r1, r3
 8003be6:	481c      	ldr	r0, [pc, #112]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003be8:	f004 fc7c 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003bf2:	f7ff fdc3 	bl	800377c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bf6:	4818      	ldr	r0, [pc, #96]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003bf8:	f004 f8a1 	bl	8007d3e <HAL_TIM_PWM_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003c02:	f7ff fdbb 	bl	800377c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c0e:	f107 0320 	add.w	r3, r7, #32
 8003c12:	4619      	mov	r1, r3
 8003c14:	4810      	ldr	r0, [pc, #64]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003c16:	f005 f995 	bl	8008f44 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003c20:	f7ff fdac 	bl	800377c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c24:	2360      	movs	r3, #96	; 0x60
 8003c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	2208      	movs	r2, #8
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4807      	ldr	r0, [pc, #28]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003c3c:	f004 fb8c 	bl	8008358 <HAL_TIM_PWM_ConfigChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003c46:	f7ff fd99 	bl	800377c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003c4a:	4803      	ldr	r0, [pc, #12]	; (8003c58 <MX_TIM2_Init+0xe4>)
 8003c4c:	f000 f9a4 	bl	8003f98 <HAL_TIM_MspPostInit>

}
 8003c50:	bf00      	nop
 8003c52:	3738      	adds	r7, #56	; 0x38
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200005d4 	.word	0x200005d4

08003c5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08e      	sub	sp, #56	; 0x38
 8003c60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c70:	f107 0320 	add.w	r3, r7, #32
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c7a:	1d3b      	adds	r3, r7, #4
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
 8003c88:	615a      	str	r2, [r3, #20]
 8003c8a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003c8e:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <MX_TIM3_Init+0x100>)
 8003c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003c94:	2259      	movs	r2, #89	; 0x59
 8003c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c98:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003ca0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cac:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cb2:	4829      	ldr	r0, [pc, #164]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003cb4:	f003 fff4 	bl	8007ca0 <HAL_TIM_Base_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003cbe:	f7ff fd5d 	bl	800377c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4822      	ldr	r0, [pc, #136]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003cd0:	f004 fc08 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003cda:	f7ff fd4f 	bl	800377c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003cde:	481e      	ldr	r0, [pc, #120]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003ce0:	f004 f82d 	bl	8007d3e <HAL_TIM_PWM_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003cea:	f7ff fd47 	bl	800377c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cf6:	f107 0320 	add.w	r3, r7, #32
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4816      	ldr	r0, [pc, #88]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003cfe:	f005 f921 	bl	8008f44 <HAL_TIMEx_MasterConfigSynchronization>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003d08:	f7ff fd38 	bl	800377c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d0c:	2360      	movs	r3, #96	; 0x60
 8003d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003d10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	2200      	movs	r2, #0
 8003d22:	4619      	mov	r1, r3
 8003d24:	480c      	ldr	r0, [pc, #48]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003d26:	f004 fb17 	bl	8008358 <HAL_TIM_PWM_ConfigChannel>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003d30:	f7ff fd24 	bl	800377c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d34:	1d3b      	adds	r3, r7, #4
 8003d36:	2204      	movs	r2, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4807      	ldr	r0, [pc, #28]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003d3c:	f004 fb0c 	bl	8008358 <HAL_TIM_PWM_ConfigChannel>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d46:	f7ff fd19 	bl	800377c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003d4a:	4803      	ldr	r0, [pc, #12]	; (8003d58 <MX_TIM3_Init+0xfc>)
 8003d4c:	f000 f924 	bl	8003f98 <HAL_TIM_MspPostInit>

}
 8003d50:	bf00      	nop
 8003d52:	3738      	adds	r7, #56	; 0x38
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000554 	.word	0x20000554
 8003d5c:	40000400 	.word	0x40000400

08003d60 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d66:	f107 0318 	add.w	r3, r7, #24
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	609a      	str	r2, [r3, #8]
 8003d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d7e:	463b      	mov	r3, r7
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <MX_TIM8_Init+0xe4>)
 8003d8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003d92:	2259      	movs	r2, #89	; 0x59
 8003d94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db0:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003db6:	4822      	ldr	r0, [pc, #136]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003db8:	f003 ff72 	bl	8007ca0 <HAL_TIM_Base_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8003dc2:	f7ff fcdb 	bl	800377c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003dcc:	f107 0318 	add.w	r3, r7, #24
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	481b      	ldr	r0, [pc, #108]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003dd4:	f004 fb86 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003dde:	f7ff fccd 	bl	800377c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8003de2:	4817      	ldr	r0, [pc, #92]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003de4:	f004 f876 	bl	8007ed4 <HAL_TIM_IC_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8003dee:	f7ff fcc5 	bl	800377c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	4619      	mov	r1, r3
 8003e00:	480f      	ldr	r0, [pc, #60]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003e02:	f005 f89f 	bl	8008f44 <HAL_TIMEx_MasterConfigSynchronization>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8003e0c:	f7ff fcb6 	bl	800377c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e10:	2300      	movs	r3, #0
 8003e12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e14:	2301      	movs	r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003e20:	463b      	mov	r3, r7
 8003e22:	220c      	movs	r2, #12
 8003e24:	4619      	mov	r1, r3
 8003e26:	4806      	ldr	r0, [pc, #24]	; (8003e40 <MX_TIM8_Init+0xe0>)
 8003e28:	f004 f9fa 	bl	8008220 <HAL_TIM_IC_ConfigChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003e32:	f7ff fca3 	bl	800377c <Error_Handler>
  }

}
 8003e36:	bf00      	nop
 8003e38:	3728      	adds	r7, #40	; 0x28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000514 	.word	0x20000514
 8003e44:	40010400 	.word	0x40010400

08003e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	f107 031c 	add.w	r3, r7, #28
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a47      	ldr	r2, [pc, #284]	; (8003f84 <HAL_TIM_Base_MspInit+0x13c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4a45      	ldr	r2, [pc, #276]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003e86:	e079      	b.n	8003f7c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d10e      	bne.n	8003eb0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
}
 8003eae:	e065      	b.n	8003f7c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a35      	ldr	r2, [pc, #212]	; (8003f8c <HAL_TIM_Base_MspInit+0x144>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
}
 8003ed6:	e051      	b.n	8003f7c <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <HAL_TIM_Base_MspInit+0x148>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d14c      	bne.n	8003f7c <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	4a27      	ldr	r2, [pc, #156]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_TIM_Base_MspInit+0x140>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f30:	f107 031c 	add.w	r3, r7, #28
 8003f34:	4619      	mov	r1, r3
 8003f36:	4817      	ldr	r0, [pc, #92]	; (8003f94 <HAL_TIM_Base_MspInit+0x14c>)
 8003f38:	f002 fa22 	bl	8006380 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	202b      	movs	r0, #43	; 0x2b
 8003f42:	f001 fe38 	bl	8005bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f46:	202b      	movs	r0, #43	; 0x2b
 8003f48:	f001 fe51 	bl	8005bee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2100      	movs	r1, #0
 8003f50:	202c      	movs	r0, #44	; 0x2c
 8003f52:	f001 fe30 	bl	8005bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f56:	202c      	movs	r0, #44	; 0x2c
 8003f58:	f001 fe49 	bl	8005bee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2100      	movs	r1, #0
 8003f60:	202d      	movs	r0, #45	; 0x2d
 8003f62:	f001 fe28 	bl	8005bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003f66:	202d      	movs	r0, #45	; 0x2d
 8003f68:	f001 fe41 	bl	8005bee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2100      	movs	r1, #0
 8003f70:	202e      	movs	r0, #46	; 0x2e
 8003f72:	f001 fe20 	bl	8005bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003f76:	202e      	movs	r0, #46	; 0x2e
 8003f78:	f001 fe39 	bl	8005bee <HAL_NVIC_EnableIRQ>
}
 8003f7c:	bf00      	nop
 8003f7e:	3730      	adds	r7, #48	; 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40020800 	.word	0x40020800

08003f98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a37      	ldr	r2, [pc, #220]	; (8004094 <HAL_TIM_MspPostInit+0xfc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d11f      	bne.n	8003ffa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	4b36      	ldr	r3, [pc, #216]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8003fc4:	f043 0310 	orr.w	r3, r3, #16
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b33      	ldr	r3, [pc, #204]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8003fd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	482a      	ldr	r0, [pc, #168]	; (800409c <HAL_TIM_MspPostInit+0x104>)
 8003ff4:	f002 f9c4 	bl	8006380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ff8:	e047      	b.n	800408a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d11f      	bne.n	8004044 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	6313      	str	r3, [r2, #48]	; 0x30
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8004020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004032:	2301      	movs	r3, #1
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8004036:	f107 0314 	add.w	r3, r7, #20
 800403a:	4619      	mov	r1, r3
 800403c:	4818      	ldr	r0, [pc, #96]	; (80040a0 <HAL_TIM_MspPostInit+0x108>)
 800403e:	f002 f99f 	bl	8006380 <HAL_GPIO_Init>
}
 8004042:	e022      	b.n	800408a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_TIM_MspPostInit+0x10c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d11d      	bne.n	800408a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a10      	ldr	r2, [pc, #64]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	6313      	str	r3, [r2, #48]	; 0x30
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <HAL_TIM_MspPostInit+0x100>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800406a:	23c0      	movs	r3, #192	; 0xc0
 800406c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406e:	2302      	movs	r3, #2
 8004070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004076:	2300      	movs	r3, #0
 8004078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800407a:	2302      	movs	r3, #2
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	4619      	mov	r1, r3
 8004084:	4808      	ldr	r0, [pc, #32]	; (80040a8 <HAL_TIM_MspPostInit+0x110>)
 8004086:	f002 f97b 	bl	8006380 <HAL_GPIO_Init>
}
 800408a:	bf00      	nop
 800408c:	3728      	adds	r7, #40	; 0x28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000
 8004098:	40023800 	.word	0x40023800
 800409c:	40021000 	.word	0x40021000
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40020800 	.word	0x40020800

080040ac <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <MX_USART3_UART_Init+0x50>)
 80040b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040d2:	220c      	movs	r2, #12
 80040d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040d8:	2200      	movs	r2, #0
 80040da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040e2:	4805      	ldr	r0, [pc, #20]	; (80040f8 <MX_USART3_UART_Init+0x4c>)
 80040e4:	f005 f810 	bl	8009108 <HAL_UART_Init>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040ee:	f7ff fb45 	bl	800377c <Error_Handler>
  }

}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000674 	.word	0x20000674
 80040fc:	40004800 	.word	0x40004800

08004100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a4c      	ldr	r2, [pc, #304]	; (8004250 <HAL_UART_MspInit+0x150>)
 800411e:	4293      	cmp	r3, r2
 8004120:	f040 8091 	bne.w	8004246 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004124:	2300      	movs	r3, #0
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_UART_MspInit+0x154>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	4a49      	ldr	r2, [pc, #292]	; (8004254 <HAL_UART_MspInit+0x154>)
 800412e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004132:	6413      	str	r3, [r2, #64]	; 0x40
 8004134:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_UART_MspInit+0x154>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_UART_MspInit+0x154>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_UART_MspInit+0x154>)
 800414a:	f043 0308 	orr.w	r3, r3, #8
 800414e:	6313      	str	r3, [r2, #48]	; 0x30
 8004150:	4b40      	ldr	r3, [pc, #256]	; (8004254 <HAL_UART_MspInit+0x154>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 800415c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004162:	2302      	movs	r3, #2
 8004164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416a:	2303      	movs	r3, #3
 800416c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800416e:	2307      	movs	r3, #7
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	4619      	mov	r1, r3
 8004178:	4837      	ldr	r0, [pc, #220]	; (8004258 <HAL_UART_MspInit+0x158>)
 800417a:	f002 f901 	bl	8006380 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_UART_MspInit+0x15c>)
 8004180:	4a37      	ldr	r2, [pc, #220]	; (8004260 <HAL_UART_MspInit+0x160>)
 8004182:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004184:	4b35      	ldr	r3, [pc, #212]	; (800425c <HAL_UART_MspInit+0x15c>)
 8004186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800418a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800418c:	4b33      	ldr	r3, [pc, #204]	; (800425c <HAL_UART_MspInit+0x15c>)
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004192:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_UART_MspInit+0x15c>)
 8004194:	2200      	movs	r2, #0
 8004196:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004198:	4b30      	ldr	r3, [pc, #192]	; (800425c <HAL_UART_MspInit+0x15c>)
 800419a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800419e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041a0:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041b8:	4b28      	ldr	r3, [pc, #160]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80041be:	4827      	ldr	r0, [pc, #156]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041c0:	f001 fd4c 	bl	8005c5c <HAL_DMA_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80041ca:	f7ff fad7 	bl	800377c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041d2:	635a      	str	r2, [r3, #52]	; 0x34
 80041d4:	4a21      	ldr	r2, [pc, #132]	; (800425c <HAL_UART_MspInit+0x15c>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <HAL_UART_MspInit+0x164>)
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <HAL_UART_MspInit+0x168>)
 80041de:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_UART_MspInit+0x164>)
 80041e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041e8:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <HAL_UART_MspInit+0x164>)
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_UART_MspInit+0x164>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_UART_MspInit+0x164>)
 80041f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_UART_MspInit+0x164>)
 80041fe:	2200      	movs	r2, #0
 8004200:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_UART_MspInit+0x164>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <HAL_UART_MspInit+0x164>)
 800420a:	2200      	movs	r2, #0
 800420c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_UART_MspInit+0x164>)
 8004210:	2200      	movs	r2, #0
 8004212:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_UART_MspInit+0x164>)
 8004216:	2200      	movs	r2, #0
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800421a:	4812      	ldr	r0, [pc, #72]	; (8004264 <HAL_UART_MspInit+0x164>)
 800421c:	f001 fd1e 	bl	8005c5c <HAL_DMA_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004226:	f7ff faa9 	bl	800377c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_UART_MspInit+0x164>)
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
 8004230:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <HAL_UART_MspInit+0x164>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004236:	2200      	movs	r2, #0
 8004238:	2100      	movs	r1, #0
 800423a:	2027      	movs	r0, #39	; 0x27
 800423c:	f001 fcbb 	bl	8005bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004240:	2027      	movs	r0, #39	; 0x27
 8004242:	f001 fcd4 	bl	8005bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004246:	bf00      	nop
 8004248:	3728      	adds	r7, #40	; 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40004800 	.word	0x40004800
 8004254:	40023800 	.word	0x40023800
 8004258:	40020c00 	.word	0x40020c00
 800425c:	20000614 	.word	0x20000614
 8004260:	40026028 	.word	0x40026028
 8004264:	200006b4 	.word	0x200006b4
 8004268:	40026058 	.word	0x40026058

0800426c <joystick_Init>:
static const float JoyTurnAngleDeadzone = 0.2;

static const float JoyLeftTurnAngle = 3.142;
static const float JoyRightTurnAngle = 0;

void joystick_Init(void){
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8004270:	2228      	movs	r2, #40	; 0x28
 8004272:	2100      	movs	r1, #0
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <joystick_Init+0x14>)
 8004276:	f005 ff9f 	bl	800a1b8 <memset>
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000238 	.word	0x20000238
 8004284:	00000000 	.word	0x00000000

08004288 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8004288:	b5b0      	push	{r4, r5, r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <joystickCalculatePos+0x88>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2205      	movs	r2, #5
 8004294:	4293      	cmp	r3, r2
 8004296:	d102      	bne.n	800429e <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <joystickCalculatePos+0x88>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <joystickCalculatePos+0x8c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da05      	bge.n	80042b2 <joystickCalculatePos+0x2a>
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <joystickCalculatePos+0x8c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042ae:	4413      	add	r3, r2
 80042b0:	e004      	b.n	80042bc <joystickCalculatePos+0x34>
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <joystickCalculatePos+0x8c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <joystickCalculatePos+0x8c>)
 80042be:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 80042c0:	4b15      	ldr	r3, [pc, #84]	; (8004318 <joystickCalculatePos+0x90>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dd05      	ble.n	80042d4 <joystickCalculatePos+0x4c>
 80042c8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <joystickCalculatePos+0x90>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	e005      	b.n	80042e0 <joystickCalculatePos+0x58>
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <joystickCalculatePos+0x90>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	425b      	negs	r3, r3
 80042da:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	4a0d      	ldr	r2, [pc, #52]	; (8004318 <joystickCalculatePos+0x90>)
 80042e2:	6013      	str	r3, [r2, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <joystickCalculatePos+0x88>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <joystickCalculatePos+0x8c>)
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	490b      	ldr	r1, [pc, #44]	; (800431c <joystickCalculatePos+0x94>)
 80042ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <joystickCalculatePos+0x88>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <joystickCalculatePos+0x90>)
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	4908      	ldr	r1, [pc, #32]	; (800431c <joystickCalculatePos+0x94>)
 80042fc:	3305      	adds	r3, #5
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	e019      	b.n	8004344 <joystickCalculatePos+0xbc>
 8004310:	20000260 	.word	0x20000260
 8004314:	2000050c 	.word	0x2000050c
 8004318:	20000410 	.word	0x20000410
 800431c:	20000238 	.word	0x20000238
  {
    sum_x += joyPosBuffer[0][i];
 8004320:	4acf      	ldr	r2, [pc, #828]	; (8004660 <joystickCalculatePos+0x3d8>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 800432e:	4acc      	ldr	r2, [pc, #816]	; (8004660 <joystickCalculatePos+0x3d8>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3305      	adds	r3, #5
 8004334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	4413      	add	r3, r2
 800433c:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3301      	adds	r3, #1
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	2205      	movs	r2, #5
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4293      	cmp	r3, r2
 800434a:	dbe9      	blt.n	8004320 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 800434c:	2205      	movs	r2, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	fb93 f3f2 	sdiv	r3, r3, r2
 8004354:	b21a      	sxth	r2, r3
 8004356:	4bc3      	ldr	r3, [pc, #780]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004358:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 800435a:	2205      	movs	r2, #5
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004362:	b21a      	sxth	r2, r3
 8004364:	4bbf      	ldr	r3, [pc, #764]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004366:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 8004368:	4bbe      	ldr	r3, [pc, #760]	; (8004664 <joystickCalculatePos+0x3dc>)
 800436a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc f890 	bl	8000494 <__aeabi_i2d>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8004650 <joystickCalculatePos+0x3c8>
 800437c:	ec43 2b10 	vmov	d0, r2, r3
 8004380:	f006 f9ae 	bl	800a6e0 <pow>
 8004384:	ec55 4b10 	vmov	r4, r5, d0
 8004388:	4bb6      	ldr	r3, [pc, #728]	; (8004664 <joystickCalculatePos+0x3dc>)
 800438a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc f880 	bl	8000494 <__aeabi_i2d>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8004650 <joystickCalculatePos+0x3c8>
 800439c:	ec43 2b10 	vmov	d0, r2, r3
 80043a0:	f006 f99e 	bl	800a6e0 <pow>
 80043a4:	ec53 2b10 	vmov	r2, r3, d0
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fb ff26 	bl	80001fc <__adddf3>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	ec43 2b17 	vmov	d7, r2, r3
 80043b8:	eeb0 0a47 	vmov.f32	s0, s14
 80043bc:	eef0 0a67 	vmov.f32	s1, s15
 80043c0:	f006 fa3c 	bl	800a83c <sqrt>
 80043c4:	ec53 2b10 	vmov	r2, r3, d0
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	f7fc fbc4 	bl	8000b58 <__aeabi_d2f>
 80043d0:	4603      	mov	r3, r0
 80043d2:	4aa4      	ldr	r2, [pc, #656]	; (8004664 <joystickCalculatePos+0x3dc>)
 80043d4:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 80043d6:	4ba3      	ldr	r3, [pc, #652]	; (8004664 <joystickCalculatePos+0x3dc>)
 80043d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc f859 	bl	8000494 <__aeabi_i2d>
 80043e2:	4604      	mov	r4, r0
 80043e4:	460d      	mov	r5, r1
 80043e6:	4b9f      	ldr	r3, [pc, #636]	; (8004664 <joystickCalculatePos+0x3dc>)
 80043e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fc f851 	bl	8000494 <__aeabi_i2d>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	ec43 2b11 	vmov	d1, r2, r3
 80043fa:	ec45 4b10 	vmov	d0, r4, r5
 80043fe:	f006 f96d 	bl	800a6dc <atan2>
 8004402:	ec53 2b10 	vmov	r2, r3, d0
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	f7fc fba5 	bl	8000b58 <__aeabi_d2f>
 800440e:	4603      	mov	r3, r0
 8004410:	4a94      	ldr	r2, [pc, #592]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004412:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 8004414:	4b93      	ldr	r3, [pc, #588]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004416:	ed93 7a01 	vldr	s14, [r3, #4]
 800441a:	eddf 7a93 	vldr	s15, [pc, #588]	; 8004668 <joystickCalculatePos+0x3e0>
 800441e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442a:	dd06      	ble.n	800443a <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 800442c:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8004668 <joystickCalculatePos+0x3e0>
 8004430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004434:	4b8b      	ldr	r3, [pc, #556]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004436:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 800443a:	4b8a      	ldr	r3, [pc, #552]	; (8004664 <joystickCalculatePos+0x3dc>)
 800443c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004440:	eddf 6a8a 	vldr	s13, [pc, #552]	; 800466c <joystickCalculatePos+0x3e4>
 8004444:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8004670 <joystickCalculatePos+0x3e8>
 8004448:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800444c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	dd10      	ble.n	8004478 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 8004456:	4b83      	ldr	r3, [pc, #524]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004458:	ed93 7a02 	vldr	s14, [r3, #8]
 800445c:	eddf 6a83 	vldr	s13, [pc, #524]	; 800466c <joystickCalculatePos+0x3e4>
 8004460:	eddf 7a83 	vldr	s15, [pc, #524]	; 8004670 <joystickCalculatePos+0x3e8>
 8004464:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800446c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004470:	d502      	bpl.n	8004478 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 8004472:	4a80      	ldr	r2, [pc, #512]	; (8004674 <joystickCalculatePos+0x3ec>)
 8004474:	4b7b      	ldr	r3, [pc, #492]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004476:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8004478:	4b7a      	ldr	r3, [pc, #488]	; (8004664 <joystickCalculatePos+0x3dc>)
 800447a:	ed93 7a02 	vldr	s14, [r3, #8]
 800447e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800466c <joystickCalculatePos+0x3e4>
 8004482:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8004670 <joystickCalculatePos+0x3e8>
 8004486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448a:	eef1 7a67 	vneg.f32	s15, s15
 800448e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	dd16      	ble.n	80044c6 <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 8004498:	4b72      	ldr	r3, [pc, #456]	; (8004664 <joystickCalculatePos+0x3dc>)
 800449a:	ed93 7a02 	vldr	s14, [r3, #8]
 800449e:	eddf 6a73 	vldr	s13, [pc, #460]	; 800466c <joystickCalculatePos+0x3e4>
 80044a2:	eddf 7a73 	vldr	s15, [pc, #460]	; 8004670 <joystickCalculatePos+0x3e8>
 80044a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044aa:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80044ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	d506      	bpl.n	80044c6 <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 80044b8:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800466c <joystickCalculatePos+0x3e4>
 80044bc:	eef1 7a67 	vneg.f32	s15, s15
 80044c0:	4b68      	ldr	r3, [pc, #416]	; (8004664 <joystickCalculatePos+0x3dc>)
 80044c2:	edc3 7a02 	vstr	s15, [r3, #8]

  // filter joystick right turn deadzone
	if (hJoystick.angle > JoyRightTurnAngle - JoyTurnAngleDeadzone &&
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <joystickCalculatePos+0x3dc>)
 80044c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80044cc:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004678 <joystickCalculatePos+0x3f0>
 80044d0:	eddf 7a6a 	vldr	s15, [pc, #424]	; 800467c <joystickCalculatePos+0x3f4>
 80044d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e0:	dd11      	ble.n	8004506 <joystickCalculatePos+0x27e>
		hJoystick.angle < JoyRightTurnAngle + JoyTurnAngleDeadzone)
 80044e2:	4b60      	ldr	r3, [pc, #384]	; (8004664 <joystickCalculatePos+0x3dc>)
 80044e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80044e8:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004678 <joystickCalculatePos+0x3f0>
 80044ec:	eddf 7a63 	vldr	s15, [pc, #396]	; 800467c <joystickCalculatePos+0x3f4>
 80044f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (hJoystick.angle > JoyRightTurnAngle - JoyTurnAngleDeadzone &&
 80044f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	d503      	bpl.n	8004506 <joystickCalculatePos+0x27e>
	  hJoystick.angle = JoyRightTurnAngle;
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	4b58      	ldr	r3, [pc, #352]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004504:	609a      	str	r2, [r3, #8]
  // filter joystick left turn deadzone
    if (hJoystick.angle > JoyLeftTurnAngle - JoyTurnAngleDeadzone ||
 8004506:	4b57      	ldr	r3, [pc, #348]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004508:	ed93 7a02 	vldr	s14, [r3, #8]
 800450c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8004680 <joystickCalculatePos+0x3f8>
 8004510:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800467c <joystickCalculatePos+0x3f4>
 8004514:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	dc0d      	bgt.n	800453e <joystickCalculatePos+0x2b6>
        hJoystick.angle < -JoyLeftTurnAngle + JoyTurnAngleDeadzone)
 8004522:	4b50      	ldr	r3, [pc, #320]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004524:	ed93 7a02 	vldr	s14, [r3, #8]
 8004528:	eddf 6a54 	vldr	s13, [pc, #336]	; 800467c <joystickCalculatePos+0x3f4>
 800452c:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004680 <joystickCalculatePos+0x3f8>
 8004530:	ee76 7ae7 	vsub.f32	s15, s13, s15
    if (hJoystick.angle > JoyLeftTurnAngle - JoyTurnAngleDeadzone ||
 8004534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	d502      	bpl.n	8004544 <joystickCalculatePos+0x2bc>
      hJoystick.angle = JoyLeftTurnAngle;
 800453e:	4a51      	ldr	r2, [pc, #324]	; (8004684 <joystickCalculatePos+0x3fc>)
 8004540:	4b48      	ldr	r3, [pc, #288]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004542:	609a      	str	r2, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 8004544:	4b47      	ldr	r3, [pc, #284]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004546:	ed93 7a01 	vldr	s14, [r3, #4]
 800454a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004668 <joystickCalculatePos+0x3e0>
 800454e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004552:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004556:	ee16 0a90 	vmov	r0, s13
 800455a:	f7fb ffad 	bl	80004b8 <__aeabi_f2d>
 800455e:	4604      	mov	r4, r0
 8004560:	460d      	mov	r5, r1
 8004562:	4b40      	ldr	r3, [pc, #256]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fb ffa6 	bl	80004b8 <__aeabi_f2d>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	ec43 2b10 	vmov	d0, r2, r3
 8004574:	f006 f824 	bl	800a5c0 <sin>
 8004578:	ec53 2b10 	vmov	r2, r3, d0
 800457c:	4620      	mov	r0, r4
 800457e:	4629      	mov	r1, r5
 8004580:	f7fb fff2 	bl	8000568 <__aeabi_dmul>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f7fc fae4 	bl	8000b58 <__aeabi_d2f>
 8004590:	4603      	mov	r3, r0
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004594:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8004596:	4b33      	ldr	r3, [pc, #204]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004598:	ed93 7a01 	vldr	s14, [r3, #4]
 800459c:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004668 <joystickCalculatePos+0x3e0>
 80045a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045a8:	ee16 0a90 	vmov	r0, s13
 80045ac:	f7fb ff84 	bl	80004b8 <__aeabi_f2d>
 80045b0:	4604      	mov	r4, r0
 80045b2:	460d      	mov	r5, r1
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <joystickCalculatePos+0x3dc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb ff7d 	bl	80004b8 <__aeabi_f2d>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	ec43 2b10 	vmov	d0, r2, r3
 80045c6:	f005 ff9f 	bl	800a508 <cos>
 80045ca:	ec53 2b10 	vmov	r2, r3, d0
 80045ce:	4620      	mov	r0, r4
 80045d0:	4629      	mov	r1, r5
 80045d2:	f7fb ffc9 	bl	8000568 <__aeabi_dmul>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	f7fc fabb 	bl	8000b58 <__aeabi_d2f>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <joystickCalculatePos+0x3dc>)
 80045e6:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <joystickCalculatePos+0x3dc>)
 80045ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80045ee:	eef0 7ae7 	vabs.f32	s15, s15
 80045f2:	ee17 0a90 	vmov	r0, s15
 80045f6:	f7fb ff5f 	bl	80004b8 <__aeabi_f2d>
 80045fa:	a317      	add	r3, pc, #92	; (adr r3, 8004658 <joystickCalculatePos+0x3d0>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fc fa24 	bl	8000a4c <__aeabi_dcmplt>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <joystickCalculatePos+0x38a>
    hJoystick.linear = 0;
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <joystickCalculatePos+0x3dc>)
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004614:	edd3 7a04 	vldr	s15, [r3, #16]
 8004618:	eef0 7ae7 	vabs.f32	s15, s15
 800461c:	ee17 0a90 	vmov	r0, s15
 8004620:	f7fb ff4a 	bl	80004b8 <__aeabi_f2d>
 8004624:	a30c      	add	r3, pc, #48	; (adr r3, 8004658 <joystickCalculatePos+0x3d0>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fc fa0f 	bl	8000a4c <__aeabi_dcmplt>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <joystickCalculatePos+0x3b4>
    hJoystick.angular = 0;
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <joystickCalculatePos+0x3dc>)
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <joystickCalculatePos+0x400>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <joystickCalculatePos+0x400>)
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bdb0      	pop	{r4, r5, r7, pc}
 800464e:	bf00      	nop
 8004650:	00000000 	.word	0x00000000
 8004654:	40000000 	.word	0x40000000
 8004658:	9999999a 	.word	0x9999999a
 800465c:	3fa99999 	.word	0x3fa99999
 8004660:	20000238 	.word	0x20000238
 8004664:	20000714 	.word	0x20000714
 8004668:	00004650 	.word	0x00004650
 800466c:	3fc8f5c3 	.word	0x3fc8f5c3
 8004670:	3e99999a 	.word	0x3e99999a
 8004674:	3fc8f5c3 	.word	0x3fc8f5c3
 8004678:	00000000 	.word	0x00000000
 800467c:	3e4ccccd 	.word	0x3e4ccccd
 8004680:	40491687 	.word	0x40491687
 8004684:	40491687 	.word	0x40491687
 8004688:	20000260 	.word	0x20000260

0800468c <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	ed87 0a02 	vstr	s0, [r7, #8]
 8004698:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 25)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b18      	cmp	r3, #24
 80046ee:	dc05      	bgt.n	80046fc <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]
    return;
 80046fa:	e207      	b.n	8004b0c <wheel_Control+0x42c>
  }

  joystickCalculatePos();
 80046fc:	f7ff fdc4 	bl	8004288 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fa07 	bl	8004b14 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	edd3 7a02 	vldr	s15, [r3, #8]
 800470c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	d10a      	bne.n	800472c <wheel_Control+0x4c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edd3 7a03 	vldr	s15, [r3, #12]
 800471c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004724:	d102      	bne.n	800472c <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 800472c:	4bc8      	ldr	r3, [pc, #800]	; (8004a50 <wheel_Control+0x370>)
 800472e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004732:	eddf 7ac8 	vldr	s15, [pc, #800]	; 8004a54 <wheel_Control+0x374>
 8004736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800473a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	f340 8107 	ble.w	8004954 <wheel_Control+0x274>
  {
    float left_speed_step = wheel->left_speed_step;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	617b      	str	r3, [r7, #20]
    float right_speed_step = wheel->right_speed_step;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	613b      	str	r3, [r7, #16]

    if (wheel->start_from_stationary)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7f1b      	ldrb	r3, [r3, #28]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d072      	beq.n	8004840 <wheel_Control+0x160>
    {
    	//deadzone 25, speed up initial speed
      left_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	eef0 7ae7 	vabs.f32	s15, s15
 8004764:	ee17 0a90 	vmov	r0, s15
 8004768:	f7fb fea6 	bl	80004b8 <__aeabi_f2d>
 800476c:	4604      	mov	r4, r0
 800476e:	460d      	mov	r5, r1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fe9f 	bl	80004b8 <__aeabi_f2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f7fc f81b 	bl	80007bc <__aeabi_ddiv>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	4bb1      	ldr	r3, [pc, #708]	; (8004a58 <wheel_Control+0x378>)
 8004794:	f7fb fd32 	bl	80001fc <__adddf3>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc f9da 	bl	8000b58 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	617b      	str	r3, [r7, #20]
      right_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	edd3 7a00 	vldr	s15, [r3]
 80047ae:	eef0 7ae7 	vabs.f32	s15, s15
 80047b2:	ee17 0a90 	vmov	r0, s15
 80047b6:	f7fb fe7f 	bl	80004b8 <__aeabi_f2d>
 80047ba:	4604      	mov	r4, r0
 80047bc:	460d      	mov	r5, r1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fe78 	bl	80004b8 <__aeabi_f2d>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4620      	mov	r0, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	f7fb fff4 	bl	80007bc <__aeabi_ddiv>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	4b9d      	ldr	r3, [pc, #628]	; (8004a58 <wheel_Control+0x378>)
 80047e2:	f7fb fd0b 	bl	80001fc <__adddf3>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f7fc f9b3 	bl	8000b58 <__aeabi_d2f>
 80047f2:	4603      	mov	r3, r0
 80047f4:	613b      	str	r3, [r7, #16]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80047fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	edd3 7a06 	vldr	s15, [r3, #24]
 8004806:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800480a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800480e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	dd13      	ble.n	8004840 <wheel_Control+0x160>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	edd3 7a03 	vldr	s15, [r3, #12]
 800481e:	eeb0 7ae7 	vabs.f32	s14, s15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	edd3 7a06 	vldr	s15, [r3, #24]
 8004828:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800482c:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	dd02      	ble.n	8004840 <wheel_Control+0x160>
      {
	  wheel->start_from_stationary = false;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
      }
    }

    if (wheel->cur_l/wheel->pre_l < 0)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	edd3 6a00 	vldr	s13, [r3]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	ed93 7a02 	vldr	s14, [r3, #8]
 800484c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	d501      	bpl.n	800485e <wheel_Control+0x17e>
    	left_speed_step = 50;
 800485a:	4b80      	ldr	r3, [pc, #512]	; (8004a5c <wheel_Control+0x37c>)
 800485c:	617b      	str	r3, [r7, #20]
    if (wheel->cur_r/wheel->pre_r < 0)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	edd3 6a01 	vldr	s13, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	ed93 7a03 	vldr	s14, [r3, #12]
 800486a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d501      	bpl.n	800487c <wheel_Control+0x19c>
        	right_speed_step = 50;
 8004878:	4b78      	ldr	r3, [pc, #480]	; (8004a5c <wheel_Control+0x37c>)
 800487a:	613b      	str	r3, [r7, #16]

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	ed93 7a00 	vldr	s14, [r3]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	edd3 7a02 	vldr	s15, [r3, #8]
 8004888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800488c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	d50a      	bpl.n	80048b0 <wheel_Control+0x1d0>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	ed93 7a02 	vldr	s14, [r3, #8]
 80048a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80048a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	edc3 7a00 	vstr	s15, [r3]
 80048ae:	e01a      	b.n	80048e6 <wheel_Control+0x206>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	ed93 7a00 	vldr	s14, [r3]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80048bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80048c4:	eef1 7a67 	vneg.f32	s15, s15
 80048c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d0:	d509      	bpl.n	80048e6 <wheel_Control+0x206>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80048d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80048dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80048f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80048fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	d50a      	bpl.n	800491a <wheel_Control+0x23a>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	ed93 7a03 	vldr	s14, [r3, #12]
 800490a:	edd7 7a04 	vldr	s15, [r7, #16]
 800490e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	edc3 7a01 	vstr	s15, [r3, #4]
 8004918:	e0a8      	b.n	8004a6c <wheel_Control+0x38c>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	edd3 7a03 	vldr	s15, [r3, #12]
 8004926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800492a:	edd7 7a04 	vldr	s15, [r7, #16]
 800492e:	eef1 7a67 	vneg.f32	s15, s15
 8004932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	f140 8097 	bpl.w	8004a6c <wheel_Control+0x38c>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	ed93 7a03 	vldr	s14, [r3, #12]
 8004944:	edd7 7a04 	vldr	s15, [r7, #16]
 8004948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004952:	e08b      	b.n	8004a6c <wheel_Control+0x38c>
//      wheel->cur_r = 0;

//    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
//    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
//
    float left_speed_step = 30;
 8004954:	4b42      	ldr	r3, [pc, #264]	; (8004a60 <wheel_Control+0x380>)
 8004956:	60fb      	str	r3, [r7, #12]
    float right_speed_step = 30;
 8004958:	4b41      	ldr	r3, [pc, #260]	; (8004a60 <wheel_Control+0x380>)
 800495a:	60bb      	str	r3, [r7, #8]
//      wheel->cur_r = wheel->pre_r - right_speed_step;
//    else if (wheel->cur_r < -right_speed_step)
//      wheel->cur_r = wheel->pre_r + right_speed_step;
//    else
//      wheel->cur_r = 0;
    if (wheel->cur_l/wheel->pre_l < 0)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	edd3 6a00 	vldr	s13, [r3]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	ed93 7a02 	vldr	s14, [r3, #8]
 8004968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004974:	d501      	bpl.n	800497a <wheel_Control+0x29a>
    	left_speed_step = 50;
 8004976:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <wheel_Control+0x37c>)
 8004978:	60fb      	str	r3, [r7, #12]
    if (wheel->cur_r/wheel->pre_r < 0)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	ed93 7a03 	vldr	s14, [r3, #12]
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004992:	d501      	bpl.n	8004998 <wheel_Control+0x2b8>
    	right_speed_step = 50;
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <wheel_Control+0x37c>)
 8004996:	60bb      	str	r3, [r7, #8]

    //Latency when sign change
    if (wheel->pre_l > left_speed_step)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	edd3 7a02 	vldr	s15, [r3, #8]
 800499e:	ed97 7a03 	vldr	s14, [r7, #12]
 80049a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	d50a      	bpl.n	80049c2 <wheel_Control+0x2e2>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80049b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80049b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	edc3 7a00 	vstr	s15, [r3]
 80049c0:	e01a      	b.n	80049f8 <wheel_Control+0x318>
    else if (wheel->pre_l < -left_speed_step)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80049c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049cc:	eef1 7a67 	vneg.f32	s15, s15
 80049d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	d50a      	bpl.n	80049f0 <wheel_Control+0x310>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80049e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	edc3 7a00 	vstr	s15, [r3]
 80049ee:	e003      	b.n	80049f8 <wheel_Control+0x318>
    else
      wheel->cur_l = 0;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
    
    if (wheel->pre_r > right_speed_step)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80049fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d50a      	bpl.n	8004a22 <wheel_Control+0x342>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a12:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004a20:	e024      	b.n	8004a6c <wheel_Control+0x38c>
    else if (wheel->pre_r < -right_speed_step)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a2c:	eef1 7a67 	vneg.f32	s15, s15
 8004a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	d514      	bpl.n	8004a64 <wheel_Control+0x384>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004a4e:	e00d      	b.n	8004a6c <wheel_Control+0x38c>
 8004a50:	20000714 	.word	0x20000714
 8004a54:	00000bb8 	.word	0x00000bb8
 8004a58:	40390000 	.word	0x40390000
 8004a5c:	42480000 	.word	0x42480000
 8004a60:	41f00000 	.word	0x41f00000
    else
      wheel->cur_r = 0;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]



  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	ed93 7a00 	vldr	s14, [r3]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	dd03      	ble.n	8004a8a <wheel_Control+0x3aa>
    wheel->cur_l = wheel->max_linear_speed;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9e:	dd03      	ble.n	8004aa8 <wheel_Control+0x3c8>
    wheel->cur_r = wheel->max_linear_speed;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	ed93 7a00 	vldr	s14, [r3]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ab4:	eef1 7a67 	vneg.f32	s15, s15
 8004ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	d507      	bpl.n	8004ad2 <wheel_Control+0x3f2>
    wheel->cur_l = -wheel->max_linear_speed;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ac8:	eef1 7a67 	vneg.f32	s15, s15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ade:	eef1 7a67 	vneg.f32	s15, s15
 8004ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d507      	bpl.n	8004afc <wheel_Control+0x41c>
    wheel->cur_r = -wheel->max_linear_speed;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	edd3 7a05 	vldr	s15, [r3, #20]
 8004af2:	eef1 7a67 	vneg.f32	s15, s15
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
  
}
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bdb0      	pop	{r4, r5, r7, pc}
 8004b12:	bf00      	nop

08004b14 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <wheelCalculateSpeed+0xa4>)
 8004b24:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <wheelCalculateSpeed+0xa4>)
 8004b38:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b40:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8004b44:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b48:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8004b56:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough50
  // direct step to 0 if speed is small enough50
  if(fabs(wheel->cur_l) < 25)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	edd3 7a00 	vldr	s15, [r3]
 8004b6e:	eef0 7ae7 	vabs.f32	s15, s15
 8004b72:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	d503      	bpl.n	8004b88 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 25)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b8e:	eef0 7ae7 	vabs.f32	s15, s15
 8004b92:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9e:	d400      	bmi.n	8004ba2 <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004ba0:	e003      	b.n	8004baa <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	605a      	str	r2, [r3, #4]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000714 	.word	0x20000714

08004bbc <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bf4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bc2:	e003      	b.n	8004bcc <LoopCopyDataInit>

08004bc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bca:	3104      	adds	r1, #4

08004bcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bcc:	480b      	ldr	r0, [pc, #44]	; (8004bfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bd4:	d3f6      	bcc.n	8004bc4 <CopyDataInit>
  ldr  r2, =_sbss
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004bd8:	e002      	b.n	8004be0 <LoopFillZerobss>

08004bda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004bdc:	f842 3b04 	str.w	r3, [r2], #4

08004be0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004be2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004be4:	d3f9      	bcc.n	8004bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004be6:	f7fe ff0f 	bl	8003a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bea:	f005 fac1 	bl	800a170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bee:	f7fd fa6f 	bl	80020d0 <main>
  bx  lr    
 8004bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004bf4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004bf8:	0800ce98 	.word	0x0800ce98
  ldr  r0, =_sdata
 8004bfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c00:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8004c04:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8004c08:	2000072c 	.word	0x2000072c

08004c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c0c:	e7fe      	b.n	8004c0c <ADC_IRQHandler>
	...

08004c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <HAL_Init+0x40>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <HAL_Init+0x40>)
 8004c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_Init+0x40>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <HAL_Init+0x40>)
 8004c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <HAL_Init+0x40>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <HAL_Init+0x40>)
 8004c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c38:	2003      	movs	r0, #3
 8004c3a:	f000 ffb1 	bl	8005ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f000 f808 	bl	8004c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c44:	f7fe fe32 	bl	80038ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40023c00 	.word	0x40023c00

08004c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_InitTick+0x54>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_InitTick+0x58>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	4619      	mov	r1, r3
 8004c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 ffc9 	bl	8005c0a <HAL_SYSTICK_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00e      	b.n	8004ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b0f      	cmp	r3, #15
 8004c86:	d80a      	bhi.n	8004c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c90:	f000 ff91 	bl	8005bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c94:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <HAL_InitTick+0x5c>)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	2000012c 	.word	0x2000012c
 8004cac:	20000134 	.word	0x20000134
 8004cb0:	20000130 	.word	0x20000130

08004cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_IncTick+0x20>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_IncTick+0x24>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <HAL_IncTick+0x24>)
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000134 	.word	0x20000134
 8004cd8:	20000728 	.word	0x20000728

08004cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_GetTick+0x14>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000728 	.word	0x20000728

08004cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cfc:	f7ff ffee 	bl	8004cdc <HAL_GetTick>
 8004d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d005      	beq.n	8004d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <HAL_Delay+0x44>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d1a:	bf00      	nop
 8004d1c:	f7ff ffde 	bl	8004cdc <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d8f7      	bhi.n	8004d1c <HAL_Delay+0x28>
  {
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000134 	.word	0x20000134

08004d3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0ed      	b.n	8004f2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc fec0 	bl	8001ae0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0202 	bic.w	r2, r2, #2
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d70:	f7ff ffb4 	bl	8004cdc <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d76:	e012      	b.n	8004d9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d78:	f7ff ffb0 	bl	8004cdc <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b0a      	cmp	r3, #10
 8004d84:	d90b      	bls.n	8004d9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2205      	movs	r2, #5
 8004d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0c5      	b.n	8004f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dbc:	f7ff ff8e 	bl	8004cdc <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dc2:	e012      	b.n	8004dea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dc4:	f7ff ff8a 	bl	8004cdc <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b0a      	cmp	r3, #10
 8004dd0:	d90b      	bls.n	8004dea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2205      	movs	r2, #5
 8004de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e09f      	b.n	8004f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0e5      	beq.n	8004dc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7e1b      	ldrb	r3, [r3, #24]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d108      	bne.n	8004e12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e007      	b.n	8004e22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	7e5b      	ldrb	r3, [r3, #25]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d108      	bne.n	8004e3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e007      	b.n	8004e4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7e9b      	ldrb	r3, [r3, #26]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d108      	bne.n	8004e66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0220 	orr.w	r2, r2, #32
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e007      	b.n	8004e76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0220 	bic.w	r2, r2, #32
 8004e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	7edb      	ldrb	r3, [r3, #27]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d108      	bne.n	8004e90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0210 	bic.w	r2, r2, #16
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e007      	b.n	8004ea0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0210 	orr.w	r2, r2, #16
 8004e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	7f1b      	ldrb	r3, [r3, #28]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d108      	bne.n	8004eba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e007      	b.n	8004eca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0208 	bic.w	r2, r2, #8
 8004ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7f5b      	ldrb	r3, [r3, #29]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d108      	bne.n	8004ee4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0204 	orr.w	r2, r2, #4
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e007      	b.n	8004ef4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0204 	bic.w	r2, r2, #4
 8004ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f4a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <HAL_CAN_ConfigFilter+0x26>
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	f040 80be 	bne.w	80050d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f5a:	4b65      	ldr	r3, [pc, #404]	; (80050f0 <HAL_CAN_ConfigFilter+0x1bc>)
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	401a      	ands	r2, r3
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d123      	bne.n	8005004 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fde:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3248      	adds	r2, #72	; 0x48
 8004fe4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ff8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ffa:	6979      	ldr	r1, [r7, #20]
 8004ffc:	3348      	adds	r3, #72	; 0x48
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	440b      	add	r3, r1
 8005002:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d122      	bne.n	8005052 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	431a      	orrs	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800502c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3248      	adds	r2, #72	; 0x48
 8005032:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005046:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005048:	6979      	ldr	r1, [r7, #20]
 800504a:	3348      	adds	r3, #72	; 0x48
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43db      	mvns	r3, r3
 8005064:	401a      	ands	r2, r3
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800506c:	e007      	b.n	800507e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	431a      	orrs	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	43db      	mvns	r3, r3
 8005090:	401a      	ands	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005098:	e007      	b.n	80050aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050c8:	f023 0201 	bic.w	r2, r3, #1
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e006      	b.n	80050e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40006400 	.word	0x40006400

080050f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d12e      	bne.n	8005166 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005120:	f7ff fddc 	bl	8004cdc <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005126:	e012      	b.n	800514e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005128:	f7ff fdd8 	bl	8004cdc <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b0a      	cmp	r3, #10
 8005134:	d90b      	bls.n	800514e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2205      	movs	r2, #5
 8005146:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e012      	b.n	8005174 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e5      	bne.n	8005128 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e006      	b.n	8005174 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005190:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800519a:	7ffb      	ldrb	r3, [r7, #31]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d003      	beq.n	80051a8 <HAL_CAN_AddTxMessage+0x2c>
 80051a0:	7ffb      	ldrb	r3, [r7, #31]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	f040 80b8 	bne.w	8005318 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 80a0 	beq.w	8005308 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	0e1b      	lsrs	r3, r3, #24
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d907      	bls.n	80051e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e09e      	b.n	8005326 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80051e8:	2201      	movs	r2, #1
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	409a      	lsls	r2, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	6809      	ldr	r1, [r1, #0]
 8005208:	431a      	orrs	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	3318      	adds	r3, #24
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	440b      	add	r3, r1
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e00f      	b.n	8005236 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005220:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800522a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3318      	adds	r3, #24
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	440b      	add	r3, r1
 8005234:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3318      	adds	r3, #24
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	440b      	add	r3, r1
 8005246:	3304      	adds	r3, #4
 8005248:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	7d1b      	ldrb	r3, [r3, #20]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d111      	bne.n	8005276 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	3318      	adds	r3, #24
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	3304      	adds	r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3318      	adds	r3, #24
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	440b      	add	r3, r1
 8005272:	3304      	adds	r3, #4
 8005274:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3307      	adds	r3, #7
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	061a      	lsls	r2, r3, #24
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3306      	adds	r3, #6
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3305      	adds	r3, #5
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	4313      	orrs	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	3204      	adds	r2, #4
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	4610      	mov	r0, r2
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	ea43 0200 	orr.w	r2, r3, r0
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	440b      	add	r3, r1
 80052a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3303      	adds	r3, #3
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	061a      	lsls	r2, r3, #24
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3302      	adds	r3, #2
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3301      	adds	r3, #1
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	4313      	orrs	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	4610      	mov	r0, r2
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	6811      	ldr	r1, [r2, #0]
 80052d4:	ea43 0200 	orr.w	r2, r3, r0
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	440b      	add	r3, r1
 80052de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3318      	adds	r3, #24
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	4413      	add	r3, r2
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	f043 0201 	orr.w	r2, r3, #1
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	3318      	adds	r3, #24
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	440b      	add	r3, r1
 8005302:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e00e      	b.n	8005326 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e006      	b.n	8005326 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	; 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005346:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d003      	beq.n	8005356 <HAL_CAN_GetRxMessage+0x24>
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b02      	cmp	r3, #2
 8005352:	f040 80f3 	bne.w	800553c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10e      	bne.n	800537a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d116      	bne.n	8005398 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e0e7      	b.n	800554a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0d8      	b.n	800554a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	331b      	adds	r3, #27
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0204 	and.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	331b      	adds	r3, #27
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	4413      	add	r3, r2
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	0d5b      	lsrs	r3, r3, #21
 80053c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e00b      	b.n	80053e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	331b      	adds	r3, #27
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	4413      	add	r3, r2
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	08db      	lsrs	r3, r3, #3
 80053e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	331b      	adds	r3, #27
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	4413      	add	r3, r2
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0202 	and.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	331b      	adds	r3, #27
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	331b      	adds	r3, #27
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	3304      	adds	r3, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	0a1b      	lsrs	r3, r3, #8
 8005428:	b2da      	uxtb	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	331b      	adds	r3, #27
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	4413      	add	r3, r2
 800543a:	3304      	adds	r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	4413      	add	r3, r2
 8005450:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4413      	add	r3, r2
 8005466:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	0a1a      	lsrs	r2, r3, #8
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	4413      	add	r3, r2
 8005480:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	0c1a      	lsrs	r2, r3, #16
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	3302      	adds	r3, #2
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4413      	add	r3, r2
 800549a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	0e1a      	lsrs	r2, r3, #24
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	3303      	adds	r3, #3
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	3304      	adds	r3, #4
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	0a1a      	lsrs	r2, r3, #8
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3305      	adds	r3, #5
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	0c1a      	lsrs	r2, r3, #16
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	3306      	adds	r3, #6
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	4413      	add	r3, r2
 8005500:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	0e1a      	lsrs	r2, r3, #24
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	3307      	adds	r3, #7
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0220 	orr.w	r2, r2, #32
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	e007      	b.n	8005538 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0220 	orr.w	r2, r2, #32
 8005536:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e006      	b.n	800554a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
  }
}
 800554a:	4618      	mov	r0, r3
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005566:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d002      	beq.n	8005574 <HAL_CAN_ActivateNotification+0x1e>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d109      	bne.n	8005588 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6959      	ldr	r1, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e006      	b.n	8005596 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b08a      	sub	sp, #40	; 0x28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d07c      	beq.n	80056e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d023      	beq.n	800563a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2201      	movs	r2, #1
 80055f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f983 	bl	8005910 <HAL_CAN_TxMailbox0CompleteCallback>
 800560a:	e016      	b.n	800563a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	e00c      	b.n	800563a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
 8005632:	e002      	b.n	800563a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f989 	bl	800594c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d024      	beq.n	800568e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f963 	bl	8005924 <HAL_CAN_TxMailbox1CompleteCallback>
 800565e:	e016      	b.n	800568e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	e00c      	b.n	800568e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
 8005686:	e002      	b.n	800568e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f969 	bl	8005960 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d024      	beq.n	80056e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f943 	bl	8005938 <HAL_CAN_TxMailbox2CompleteCallback>
 80056b2:	e016      	b.n	80056e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
 80056c6:	e00c      	b.n	80056e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
 80056da:	e002      	b.n	80056e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f949 	bl	8005974 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2210      	movs	r2, #16
 8005704:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2208      	movs	r2, #8
 8005720:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f930 	bl	8005988 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fd fb9d 	bl	8002e80 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005760:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2210      	movs	r2, #16
 8005768:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2208      	movs	r2, #8
 8005784:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f912 	bl	80059b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8f9 	bl	800599c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2210      	movs	r2, #16
 80057c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f8fc 	bl	80059c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8f5 	bl	80059d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d07b      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d072      	beq.n	80058e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	f043 0304 	orr.w	r3, r3, #4
 8005854:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585c:	2b00      	cmp	r3, #0
 800585e:	d043      	beq.n	80058e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005866:	2b00      	cmp	r3, #0
 8005868:	d03e      	beq.n	80058e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d02b      	beq.n	80058cc <HAL_CAN_IRQHandler+0x32a>
 8005874:	2b60      	cmp	r3, #96	; 0x60
 8005876:	d82e      	bhi.n	80058d6 <HAL_CAN_IRQHandler+0x334>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d022      	beq.n	80058c2 <HAL_CAN_IRQHandler+0x320>
 800587c:	2b50      	cmp	r3, #80	; 0x50
 800587e:	d82a      	bhi.n	80058d6 <HAL_CAN_IRQHandler+0x334>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d019      	beq.n	80058b8 <HAL_CAN_IRQHandler+0x316>
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d826      	bhi.n	80058d6 <HAL_CAN_IRQHandler+0x334>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d010      	beq.n	80058ae <HAL_CAN_IRQHandler+0x30c>
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d822      	bhi.n	80058d6 <HAL_CAN_IRQHandler+0x334>
 8005890:	2b10      	cmp	r3, #16
 8005892:	d002      	beq.n	800589a <HAL_CAN_IRQHandler+0x2f8>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d005      	beq.n	80058a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005898:	e01d      	b.n	80058d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	f043 0308 	orr.w	r3, r3, #8
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058a2:	e019      	b.n	80058d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	f043 0310 	orr.w	r3, r3, #16
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058ac:	e014      	b.n	80058d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	f043 0320 	orr.w	r3, r3, #32
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058b6:	e00f      	b.n	80058d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058c0:	e00a      	b.n	80058d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058ca:	e005      	b.n	80058d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058d4:	e000      	b.n	80058d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80058d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2204      	movs	r2, #4
 80058ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f872 	bl	80059ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005908:	bf00      	nop
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a10:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <__NVIC_SetPriorityGrouping+0x44>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a32:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <__NVIC_SetPriorityGrouping+0x44>)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	60d3      	str	r3, [r2, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <__NVIC_GetPriorityGrouping+0x18>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	f003 0307 	and.w	r3, r3, #7
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	e000ed00 	.word	0xe000ed00

08005a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	db0b      	blt.n	8005a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	f003 021f 	and.w	r2, r3, #31
 8005a7c:	4907      	ldr	r1, [pc, #28]	; (8005a9c <__NVIC_EnableIRQ+0x38>)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2001      	movs	r0, #1
 8005a86:	fa00 f202 	lsl.w	r2, r0, r2
 8005a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	e000e100 	.word	0xe000e100

08005aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	6039      	str	r1, [r7, #0]
 8005aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db0a      	blt.n	8005aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	490c      	ldr	r1, [pc, #48]	; (8005aec <__NVIC_SetPriority+0x4c>)
 8005aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abe:	0112      	lsls	r2, r2, #4
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ac8:	e00a      	b.n	8005ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4908      	ldr	r1, [pc, #32]	; (8005af0 <__NVIC_SetPriority+0x50>)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	3b04      	subs	r3, #4
 8005ad8:	0112      	lsls	r2, r2, #4
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	440b      	add	r3, r1
 8005ade:	761a      	strb	r2, [r3, #24]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	e000e100 	.word	0xe000e100
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f1c3 0307 	rsb	r3, r3, #7
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	bf28      	it	cs
 8005b12:	2304      	movcs	r3, #4
 8005b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d902      	bls.n	8005b24 <NVIC_EncodePriority+0x30>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3b03      	subs	r3, #3
 8005b22:	e000      	b.n	8005b26 <NVIC_EncodePriority+0x32>
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43da      	mvns	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	401a      	ands	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	43d9      	mvns	r1, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b4c:	4313      	orrs	r3, r2
         );
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3724      	adds	r7, #36	; 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b6c:	d301      	bcc.n	8005b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e00f      	b.n	8005b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b72:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <SysTick_Config+0x40>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b7a:	210f      	movs	r1, #15
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b80:	f7ff ff8e 	bl	8005aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <SysTick_Config+0x40>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b8a:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <SysTick_Config+0x40>)
 8005b8c:	2207      	movs	r2, #7
 8005b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	e000e010 	.word	0xe000e010

08005ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ff29 	bl	8005a00 <__NVIC_SetPriorityGrouping>
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b086      	sub	sp, #24
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bc8:	f7ff ff3e 	bl	8005a48 <__NVIC_GetPriorityGrouping>
 8005bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f7ff ff8e 	bl	8005af4 <NVIC_EncodePriority>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff ff5d 	bl	8005aa0 <__NVIC_SetPriority>
}
 8005be6:	bf00      	nop
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff ff31 	bl	8005a64 <__NVIC_EnableIRQ>
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ffa2 	bl	8005b5c <SysTick_Config>
 8005c18:	4603      	mov	r3, r0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d106      	bne.n	8005c40 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c38:	f043 0304 	orr.w	r3, r3, #4
 8005c3c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8005c3e:	e005      	b.n	8005c4c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c46:	f023 0304 	bic.w	r3, r3, #4
 8005c4a:	6013      	str	r3, [r2, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000e010 	.word	0xe000e010

08005c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c68:	f7ff f838 	bl	8004cdc <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e099      	b.n	8005dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c98:	e00f      	b.n	8005cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c9a:	f7ff f81f 	bl	8004cdc <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b05      	cmp	r3, #5
 8005ca6:	d908      	bls.n	8005cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e078      	b.n	8005dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e8      	bne.n	8005c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <HAL_DMA_Init+0x158>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b04      	cmp	r3, #4
 8005d12:	d107      	bne.n	8005d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d117      	bne.n	8005d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fa91 	bl	8006288 <DMA_CheckFifoParam>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2240      	movs	r2, #64	; 0x40
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e016      	b.n	8005dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa48 	bl	800621c <DMA_CalcBaseAndBitshift>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	223f      	movs	r2, #63	; 0x3f
 8005d96:	409a      	lsls	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	f010803f 	.word	0xf010803f

08005db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_DMA_Start_IT+0x26>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e040      	b.n	8005e60 <HAL_DMA_Start_IT+0xa8>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d12f      	bne.n	8005e52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f9da 	bl	80061c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	223f      	movs	r2, #63	; 0x3f
 8005e12:	409a      	lsls	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0216 	orr.w	r2, r2, #22
 8005e26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e005      	b.n	8005e5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d004      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2280      	movs	r2, #128	; 0x80
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e00c      	b.n	8005ea0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005eb8:	4b92      	ldr	r3, [pc, #584]	; (8006104 <HAL_DMA_IRQHandler+0x258>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a92      	ldr	r2, [pc, #584]	; (8006108 <HAL_DMA_IRQHandler+0x25c>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	0a9b      	lsrs	r3, r3, #10
 8005ec4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01a      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d013      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f04:	2208      	movs	r2, #8
 8005f06:	409a      	lsls	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	f043 0201 	orr.w	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d012      	beq.n	8005f4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	f043 0202 	orr.w	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	2204      	movs	r2, #4
 8005f54:	409a      	lsls	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d012      	beq.n	8005f84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	2204      	movs	r2, #4
 8005f72:	409a      	lsls	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	f043 0204 	orr.w	r2, r3, #4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	2210      	movs	r2, #16
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d043      	beq.n	800601c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03c      	beq.n	800601c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa6:	2210      	movs	r2, #16
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d018      	beq.n	8005fee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d108      	bne.n	8005fdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d024      	beq.n	800601c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4798      	blx	r3
 8005fda:	e01f      	b.n	800601c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
 8005fec:	e016      	b.n	800601c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0208 	bic.w	r2, r2, #8
 800600a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	2220      	movs	r2, #32
 8006022:	409a      	lsls	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 808e 	beq.w	800614a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8086 	beq.w	800614a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	2220      	movs	r2, #32
 8006044:	409a      	lsls	r2, r3
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b05      	cmp	r3, #5
 8006054:	d136      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0216 	bic.w	r2, r2, #22
 8006064:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695a      	ldr	r2, [r3, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006074:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d103      	bne.n	8006086 <HAL_DMA_IRQHandler+0x1da>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0208 	bic.w	r2, r2, #8
 8006094:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609a:	223f      	movs	r2, #63	; 0x3f
 800609c:	409a      	lsls	r2, r3
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d07d      	beq.n	80061b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
        }
        return;
 80060c2:	e078      	b.n	80061b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01c      	beq.n	800610c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d030      	beq.n	800614a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
 80060f0:	e02b      	b.n	800614a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d027      	beq.n	800614a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	e022      	b.n	800614a <HAL_DMA_IRQHandler+0x29e>
 8006104:	2000012c 	.word	0x2000012c
 8006108:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0210 	bic.w	r2, r2, #16
 8006128:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	2b00      	cmp	r3, #0
 8006150:	d032      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d022      	beq.n	80061a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2205      	movs	r2, #5
 8006162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3301      	adds	r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	429a      	cmp	r2, r3
 8006180:	d307      	bcc.n	8006192 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f2      	bne.n	8006176 <HAL_DMA_IRQHandler+0x2ca>
 8006190:	e000      	b.n	8006194 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006192:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
 80061b4:	e000      	b.n	80061b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80061b6:	bf00      	nop
    }
  }
}
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop

080061c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d108      	bne.n	8006200 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061fe:	e007      	b.n	8006210 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	3b10      	subs	r3, #16
 800622c:	4a14      	ldr	r2, [pc, #80]	; (8006280 <DMA_CalcBaseAndBitshift+0x64>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <DMA_CalcBaseAndBitshift+0x68>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d909      	bls.n	800625e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	659a      	str	r2, [r3, #88]	; 0x58
 800625c:	e007      	b.n	800626e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	aaaaaaab 	.word	0xaaaaaaab
 8006284:	0800cbf0 	.word	0x0800cbf0

08006288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11f      	bne.n	80062e2 <DMA_CheckFifoParam+0x5a>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d856      	bhi.n	8006356 <DMA_CheckFifoParam+0xce>
 80062a8:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <DMA_CheckFifoParam+0x28>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	080062d3 	.word	0x080062d3
 80062b8:	080062c1 	.word	0x080062c1
 80062bc:	08006357 	.word	0x08006357
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d046      	beq.n	800635a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d0:	e043      	b.n	800635a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062da:	d140      	bne.n	800635e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e0:	e03d      	b.n	800635e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	d121      	bne.n	8006330 <DMA_CheckFifoParam+0xa8>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d837      	bhi.n	8006362 <DMA_CheckFifoParam+0xda>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <DMA_CheckFifoParam+0x70>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	0800630f 	.word	0x0800630f
 8006300:	08006309 	.word	0x08006309
 8006304:	08006321 	.word	0x08006321
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
      break;
 800630c:	e030      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d025      	beq.n	8006366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800631e:	e022      	b.n	8006366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006328:	d11f      	bne.n	800636a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800632e:	e01c      	b.n	800636a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d903      	bls.n	800633e <DMA_CheckFifoParam+0xb6>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d003      	beq.n	8006344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800633c:	e018      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
      break;
 8006342:	e015      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
      break;
 8006354:	e00b      	b.n	800636e <DMA_CheckFifoParam+0xe6>
      break;
 8006356:	bf00      	nop
 8006358:	e00a      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      break;
 800635a:	bf00      	nop
 800635c:	e008      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      break;
 800635e:	bf00      	nop
 8006360:	e006      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      break;
 8006362:	bf00      	nop
 8006364:	e004      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      break;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      break;   
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <DMA_CheckFifoParam+0xe8>
      break;
 800636e:	bf00      	nop
    }
  } 
  
  return status; 
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006380:	b480      	push	{r7}
 8006382:	b089      	sub	sp, #36	; 0x24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800638e:	2300      	movs	r3, #0
 8006390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006392:	2300      	movs	r3, #0
 8006394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	e177      	b.n	800668c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800639c:	2201      	movs	r2, #1
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4013      	ands	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	f040 8166 	bne.w	8006686 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d00b      	beq.n	80063da <HAL_GPIO_Init+0x5a>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d007      	beq.n	80063da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063ce:	2b11      	cmp	r3, #17
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b12      	cmp	r3, #18
 80063d8:	d130      	bne.n	800643c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	2203      	movs	r2, #3
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	4313      	orrs	r3, r2
 8006402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006410:	2201      	movs	r2, #1
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43db      	mvns	r3, r3
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4013      	ands	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	091b      	lsrs	r3, r3, #4
 8006426:	f003 0201 	and.w	r2, r3, #1
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4313      	orrs	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	2203      	movs	r2, #3
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	4313      	orrs	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d003      	beq.n	800647c <HAL_GPIO_Init+0xfc>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b12      	cmp	r3, #18
 800647a:	d123      	bne.n	80064c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	08da      	lsrs	r2, r3, #3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3208      	adds	r2, #8
 8006484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	220f      	movs	r2, #15
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	43db      	mvns	r3, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4013      	ands	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	08da      	lsrs	r2, r3, #3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3208      	adds	r2, #8
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	2203      	movs	r2, #3
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	43db      	mvns	r3, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4013      	ands	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 0203 	and.w	r2, r3, #3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80c0 	beq.w	8006686 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	4b66      	ldr	r3, [pc, #408]	; (80066a4 <HAL_GPIO_Init+0x324>)
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	4a65      	ldr	r2, [pc, #404]	; (80066a4 <HAL_GPIO_Init+0x324>)
 8006510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006514:	6453      	str	r3, [r2, #68]	; 0x44
 8006516:	4b63      	ldr	r3, [pc, #396]	; (80066a4 <HAL_GPIO_Init+0x324>)
 8006518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006522:	4a61      	ldr	r2, [pc, #388]	; (80066a8 <HAL_GPIO_Init+0x328>)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	089b      	lsrs	r3, r3, #2
 8006528:	3302      	adds	r3, #2
 800652a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	220f      	movs	r2, #15
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a58      	ldr	r2, [pc, #352]	; (80066ac <HAL_GPIO_Init+0x32c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d037      	beq.n	80065be <HAL_GPIO_Init+0x23e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a57      	ldr	r2, [pc, #348]	; (80066b0 <HAL_GPIO_Init+0x330>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_GPIO_Init+0x23a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a56      	ldr	r2, [pc, #344]	; (80066b4 <HAL_GPIO_Init+0x334>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d02b      	beq.n	80065b6 <HAL_GPIO_Init+0x236>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a55      	ldr	r2, [pc, #340]	; (80066b8 <HAL_GPIO_Init+0x338>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d025      	beq.n	80065b2 <HAL_GPIO_Init+0x232>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a54      	ldr	r2, [pc, #336]	; (80066bc <HAL_GPIO_Init+0x33c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01f      	beq.n	80065ae <HAL_GPIO_Init+0x22e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a53      	ldr	r2, [pc, #332]	; (80066c0 <HAL_GPIO_Init+0x340>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d019      	beq.n	80065aa <HAL_GPIO_Init+0x22a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a52      	ldr	r2, [pc, #328]	; (80066c4 <HAL_GPIO_Init+0x344>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <HAL_GPIO_Init+0x226>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a51      	ldr	r2, [pc, #324]	; (80066c8 <HAL_GPIO_Init+0x348>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00d      	beq.n	80065a2 <HAL_GPIO_Init+0x222>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a50      	ldr	r2, [pc, #320]	; (80066cc <HAL_GPIO_Init+0x34c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <HAL_GPIO_Init+0x21e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a4f      	ldr	r2, [pc, #316]	; (80066d0 <HAL_GPIO_Init+0x350>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d101      	bne.n	800659a <HAL_GPIO_Init+0x21a>
 8006596:	2309      	movs	r3, #9
 8006598:	e012      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 800659a:	230a      	movs	r3, #10
 800659c:	e010      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 800659e:	2308      	movs	r3, #8
 80065a0:	e00e      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065a2:	2307      	movs	r3, #7
 80065a4:	e00c      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065a6:	2306      	movs	r3, #6
 80065a8:	e00a      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065aa:	2305      	movs	r3, #5
 80065ac:	e008      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065ae:	2304      	movs	r3, #4
 80065b0:	e006      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065b2:	2303      	movs	r3, #3
 80065b4:	e004      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e002      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <HAL_GPIO_Init+0x240>
 80065be:	2300      	movs	r3, #0
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	f002 0203 	and.w	r2, r2, #3
 80065c6:	0092      	lsls	r2, r2, #2
 80065c8:	4093      	lsls	r3, r2
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065d0:	4935      	ldr	r1, [pc, #212]	; (80066a8 <HAL_GPIO_Init+0x328>)
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	089b      	lsrs	r3, r3, #2
 80065d6:	3302      	adds	r3, #2
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065de:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <HAL_GPIO_Init+0x354>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	4013      	ands	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006602:	4a34      	ldr	r2, [pc, #208]	; (80066d4 <HAL_GPIO_Init+0x354>)
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006608:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <HAL_GPIO_Init+0x354>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	43db      	mvns	r3, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4013      	ands	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800662c:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <HAL_GPIO_Init+0x354>)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006632:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <HAL_GPIO_Init+0x354>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	43db      	mvns	r3, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006656:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <HAL_GPIO_Init+0x354>)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800665c:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <HAL_GPIO_Init+0x354>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006680:	4a14      	ldr	r2, [pc, #80]	; (80066d4 <HAL_GPIO_Init+0x354>)
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3301      	adds	r3, #1
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	2b0f      	cmp	r3, #15
 8006690:	f67f ae84 	bls.w	800639c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3724      	adds	r7, #36	; 0x24
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40013800 	.word	0x40013800
 80066ac:	40020000 	.word	0x40020000
 80066b0:	40020400 	.word	0x40020400
 80066b4:	40020800 	.word	0x40020800
 80066b8:	40020c00 	.word	0x40020c00
 80066bc:	40021000 	.word	0x40021000
 80066c0:	40021400 	.word	0x40021400
 80066c4:	40021800 	.word	0x40021800
 80066c8:	40021c00 	.word	0x40021c00
 80066cc:	40022000 	.word	0x40022000
 80066d0:	40022400 	.word	0x40022400
 80066d4:	40013c00 	.word	0x40013c00

080066d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	887b      	ldrh	r3, [r7, #2]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	e001      	b.n	80066fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
 8006714:	4613      	mov	r3, r2
 8006716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006718:	787b      	ldrb	r3, [r7, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006724:	e003      	b.n	800672e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	041a      	lsls	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	619a      	str	r2, [r3, #24]
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006746:	4b08      	ldr	r3, [pc, #32]	; (8006768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d006      	beq.n	8006760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006752:	4a05      	ldr	r2, [pc, #20]	; (8006768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fc face 	bl	8002cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40013c00 	.word	0x40013c00

0800676c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e12b      	b.n	80069d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fb fc52 	bl	800203c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067d0:	f000 fe1e 	bl	8007410 <HAL_RCC_GetPCLK1Freq>
 80067d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4a81      	ldr	r2, [pc, #516]	; (80069e0 <HAL_I2C_Init+0x274>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d807      	bhi.n	80067f0 <HAL_I2C_Init+0x84>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a80      	ldr	r2, [pc, #512]	; (80069e4 <HAL_I2C_Init+0x278>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bf94      	ite	ls
 80067e8:	2301      	movls	r3, #1
 80067ea:	2300      	movhi	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e006      	b.n	80067fe <HAL_I2C_Init+0x92>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a7d      	ldr	r2, [pc, #500]	; (80069e8 <HAL_I2C_Init+0x27c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	bf94      	ite	ls
 80067f8:	2301      	movls	r3, #1
 80067fa:	2300      	movhi	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0e7      	b.n	80069d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a78      	ldr	r2, [pc, #480]	; (80069ec <HAL_I2C_Init+0x280>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	0c9b      	lsrs	r3, r3, #18
 8006810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a6a      	ldr	r2, [pc, #424]	; (80069e0 <HAL_I2C_Init+0x274>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d802      	bhi.n	8006840 <HAL_I2C_Init+0xd4>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3301      	adds	r3, #1
 800683e:	e009      	b.n	8006854 <HAL_I2C_Init+0xe8>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	4a69      	ldr	r2, [pc, #420]	; (80069f0 <HAL_I2C_Init+0x284>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	099b      	lsrs	r3, r3, #6
 8006852:	3301      	adds	r3, #1
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	430b      	orrs	r3, r1
 800685a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	495c      	ldr	r1, [pc, #368]	; (80069e0 <HAL_I2C_Init+0x274>)
 8006870:	428b      	cmp	r3, r1
 8006872:	d819      	bhi.n	80068a8 <HAL_I2C_Init+0x13c>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	1e59      	subs	r1, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006888:	400b      	ands	r3, r1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_I2C_Init+0x138>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1e59      	subs	r1, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	fbb1 f3f3 	udiv	r3, r1, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a2:	e051      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 80068a4:	2304      	movs	r3, #4
 80068a6:	e04f      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d111      	bne.n	80068d4 <HAL_I2C_Init+0x168>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1e58      	subs	r0, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	440b      	add	r3, r1
 80068be:	fbb0 f3f3 	udiv	r3, r0, r3
 80068c2:	3301      	adds	r3, #1
 80068c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	e012      	b.n	80068fa <HAL_I2C_Init+0x18e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1e58      	subs	r0, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	0099      	lsls	r1, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ea:	3301      	adds	r3, #1
 80068ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_I2C_Init+0x196>
 80068fe:	2301      	movs	r3, #1
 8006900:	e022      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10e      	bne.n	8006928 <HAL_I2C_Init+0x1bc>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1e58      	subs	r0, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6859      	ldr	r1, [r3, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	440b      	add	r3, r1
 8006918:	fbb0 f3f3 	udiv	r3, r0, r3
 800691c:	3301      	adds	r3, #1
 800691e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	e00f      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1e58      	subs	r0, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	0099      	lsls	r1, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	fbb0 f3f3 	udiv	r3, r0, r3
 800693e:	3301      	adds	r3, #1
 8006940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	6809      	ldr	r1, [r1, #0]
 800694c:	4313      	orrs	r3, r2
 800694e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6911      	ldr	r1, [r2, #16]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68d2      	ldr	r2, [r2, #12]
 8006982:	4311      	orrs	r1, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	430b      	orrs	r3, r1
 800698a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	000186a0 	.word	0x000186a0
 80069e4:	001e847f 	.word	0x001e847f
 80069e8:	003d08ff 	.word	0x003d08ff
 80069ec:	431bde83 	.word	0x431bde83
 80069f0:	10624dd3 	.word	0x10624dd3

080069f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d129      	bne.n	8006a5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2224      	movs	r2, #36	; 0x24
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0201 	bic.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0210 	bic.w	r2, r2, #16
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
  }
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d12a      	bne.n	8006adc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2224      	movs	r2, #36	; 0x24
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006aa6:	89fb      	ldrh	r3, [r7, #14]
 8006aa8:	f023 030f 	bic.w	r3, r3, #15
 8006aac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	89fb      	ldrh	r3, [r7, #14]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	89fa      	ldrh	r2, [r7, #14]
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006af6:	2300      	movs	r3, #0
 8006af8:	603b      	str	r3, [r7, #0]
 8006afa:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	4a1f      	ldr	r2, [pc, #124]	; (8006b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8006b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b04:	6413      	str	r3, [r2, #64]	; 0x40
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <HAL_PWREx_EnableOverDrive+0x94>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b18:	f7fe f8e0 	bl	8004cdc <HAL_GetTick>
 8006b1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b1e:	e009      	b.n	8006b34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b20:	f7fe f8dc 	bl	8004cdc <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b2e:	d901      	bls.n	8006b34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e01f      	b.n	8006b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b40:	d1ee      	bne.n	8006b20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b42:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b48:	f7fe f8c8 	bl	8004cdc <HAL_GetTick>
 8006b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b4e:	e009      	b.n	8006b64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b50:	f7fe f8c4 	bl	8004cdc <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b5e:	d901      	bls.n	8006b64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e007      	b.n	8006b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b70:	d1ee      	bne.n	8006b50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	420e0040 	.word	0x420e0040
 8006b84:	40007000 	.word	0x40007000
 8006b88:	420e0044 	.word	0x420e0044

08006b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e25b      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d075      	beq.n	8006c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006baa:	4ba3      	ldr	r3, [pc, #652]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 030c 	and.w	r3, r3, #12
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d00c      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bb6:	4ba0      	ldr	r3, [pc, #640]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d112      	bne.n	8006be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bc2:	4b9d      	ldr	r3, [pc, #628]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bce:	d10b      	bne.n	8006be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd0:	4b99      	ldr	r3, [pc, #612]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d05b      	beq.n	8006c94 <HAL_RCC_OscConfig+0x108>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d157      	bne.n	8006c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e236      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCC_OscConfig+0x74>
 8006bf2:	4b91      	ldr	r3, [pc, #580]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a90      	ldr	r2, [pc, #576]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e01d      	b.n	8006c3c <HAL_RCC_OscConfig+0xb0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c08:	d10c      	bne.n	8006c24 <HAL_RCC_OscConfig+0x98>
 8006c0a:	4b8b      	ldr	r3, [pc, #556]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a8a      	ldr	r2, [pc, #552]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4b88      	ldr	r3, [pc, #544]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a87      	ldr	r2, [pc, #540]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e00b      	b.n	8006c3c <HAL_RCC_OscConfig+0xb0>
 8006c24:	4b84      	ldr	r3, [pc, #528]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a83      	ldr	r2, [pc, #524]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	4b81      	ldr	r3, [pc, #516]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a80      	ldr	r2, [pc, #512]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d013      	beq.n	8006c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c44:	f7fe f84a 	bl	8004cdc <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c4c:	f7fe f846 	bl	8004cdc <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b64      	cmp	r3, #100	; 0x64
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e1fb      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0xc0>
 8006c6a:	e014      	b.n	8006c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c6c:	f7fe f836 	bl	8004cdc <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c74:	f7fe f832 	bl	8004cdc <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b64      	cmp	r3, #100	; 0x64
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e1e7      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	4b6c      	ldr	r3, [pc, #432]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0xe8>
 8006c92:	e000      	b.n	8006c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d063      	beq.n	8006d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ca2:	4b65      	ldr	r3, [pc, #404]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 030c 	and.w	r3, r3, #12
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cae:	4b62      	ldr	r3, [pc, #392]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d11c      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cba:	4b5f      	ldr	r3, [pc, #380]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d116      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cc6:	4b5c      	ldr	r3, [pc, #368]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_RCC_OscConfig+0x152>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e1bb      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cde:	4b56      	ldr	r3, [pc, #344]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	4952      	ldr	r1, [pc, #328]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf2:	e03a      	b.n	8006d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d020      	beq.n	8006d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cfc:	4b4f      	ldr	r3, [pc, #316]	; (8006e3c <HAL_RCC_OscConfig+0x2b0>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d02:	f7fd ffeb 	bl	8004cdc <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d0a:	f7fd ffe7 	bl	8004cdc <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e19c      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1c:	4b46      	ldr	r3, [pc, #280]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d28:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4940      	ldr	r1, [pc, #256]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	600b      	str	r3, [r1, #0]
 8006d3c:	e015      	b.n	8006d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <HAL_RCC_OscConfig+0x2b0>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fd ffca 	bl	8004cdc <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4c:	f7fd ffc6 	bl	8004cdc <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e17b      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d5e:	4b36      	ldr	r3, [pc, #216]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d030      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d016      	beq.n	8006dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d7e:	4b30      	ldr	r3, [pc, #192]	; (8006e40 <HAL_RCC_OscConfig+0x2b4>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fd ffaa 	bl	8004cdc <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d8c:	f7fd ffa6 	bl	8004cdc <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e15b      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9e:	4b26      	ldr	r3, [pc, #152]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x200>
 8006daa:	e015      	b.n	8006dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dac:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <HAL_RCC_OscConfig+0x2b4>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db2:	f7fd ff93 	bl	8004cdc <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dba:	f7fd ff8f 	bl	8004cdc <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e144      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f0      	bne.n	8006dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80a0 	beq.w	8006f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006de6:	2300      	movs	r3, #0
 8006de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006df6:	2300      	movs	r3, #0
 8006df8:	60bb      	str	r3, [r7, #8]
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e04:	6413      	str	r3, [r2, #64]	; 0x40
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <HAL_RCC_OscConfig+0x2ac>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <HAL_RCC_OscConfig+0x2b8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d121      	bne.n	8006e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <HAL_RCC_OscConfig+0x2b8>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <HAL_RCC_OscConfig+0x2b8>)
 8006e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e2e:	f7fd ff55 	bl	8004cdc <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e34:	e011      	b.n	8006e5a <HAL_RCC_OscConfig+0x2ce>
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	42470000 	.word	0x42470000
 8006e40:	42470e80 	.word	0x42470e80
 8006e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e48:	f7fd ff48 	bl	8004cdc <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e0fd      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5a:	4b81      	ldr	r3, [pc, #516]	; (8007060 <HAL_RCC_OscConfig+0x4d4>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d106      	bne.n	8006e7c <HAL_RCC_OscConfig+0x2f0>
 8006e6e:	4b7d      	ldr	r3, [pc, #500]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	4a7c      	ldr	r2, [pc, #496]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7a:	e01c      	b.n	8006eb6 <HAL_RCC_OscConfig+0x32a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d10c      	bne.n	8006e9e <HAL_RCC_OscConfig+0x312>
 8006e84:	4b77      	ldr	r3, [pc, #476]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e88:	4a76      	ldr	r2, [pc, #472]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006e8a:	f043 0304 	orr.w	r3, r3, #4
 8006e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e90:	4b74      	ldr	r3, [pc, #464]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e94:	4a73      	ldr	r2, [pc, #460]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9c:	e00b      	b.n	8006eb6 <HAL_RCC_OscConfig+0x32a>
 8006e9e:	4b71      	ldr	r3, [pc, #452]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea2:	4a70      	ldr	r2, [pc, #448]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eaa:	4b6e      	ldr	r3, [pc, #440]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	4a6d      	ldr	r2, [pc, #436]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006eb0:	f023 0304 	bic.w	r3, r3, #4
 8006eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d015      	beq.n	8006eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebe:	f7fd ff0d 	bl	8004cdc <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec4:	e00a      	b.n	8006edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fd ff09 	bl	8004cdc <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e0bc      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006edc:	4b61      	ldr	r3, [pc, #388]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ee      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x33a>
 8006ee8:	e014      	b.n	8006f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eea:	f7fd fef7 	bl	8004cdc <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef0:	e00a      	b.n	8006f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef2:	f7fd fef3 	bl	8004cdc <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e0a6      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f08:	4b56      	ldr	r3, [pc, #344]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1ee      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d105      	bne.n	8006f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f1a:	4b52      	ldr	r3, [pc, #328]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	4a51      	ldr	r2, [pc, #324]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 8092 	beq.w	8007054 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f30:	4b4c      	ldr	r3, [pc, #304]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 030c 	and.w	r3, r3, #12
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d05c      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d141      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f44:	4b48      	ldr	r3, [pc, #288]	; (8007068 <HAL_RCC_OscConfig+0x4dc>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f4a:	f7fd fec7 	bl	8004cdc <HAL_GetTick>
 8006f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f52:	f7fd fec3 	bl	8004cdc <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e078      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f64:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f0      	bne.n	8006f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	019b      	lsls	r3, r3, #6
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	061b      	lsls	r3, r3, #24
 8006f94:	4933      	ldr	r1, [pc, #204]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f9a:	4b33      	ldr	r3, [pc, #204]	; (8007068 <HAL_RCC_OscConfig+0x4dc>)
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa0:	f7fd fe9c 	bl	8004cdc <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa8:	f7fd fe98 	bl	8004cdc <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e04d      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fba:	4b2a      	ldr	r3, [pc, #168]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x41c>
 8006fc6:	e045      	b.n	8007054 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc8:	4b27      	ldr	r3, [pc, #156]	; (8007068 <HAL_RCC_OscConfig+0x4dc>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fce:	f7fd fe85 	bl	8004cdc <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fd6:	f7fd fe81 	bl	8004cdc <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e036      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe8:	4b1e      	ldr	r3, [pc, #120]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f0      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x44a>
 8006ff4:	e02e      	b.n	8007054 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e029      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007002:	4b18      	ldr	r3, [pc, #96]	; (8007064 <HAL_RCC_OscConfig+0x4d8>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	429a      	cmp	r2, r3
 8007014:	d11c      	bne.n	8007050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007020:	429a      	cmp	r2, r3
 8007022:	d115      	bne.n	8007050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800702a:	4013      	ands	r3, r2
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007030:	4293      	cmp	r3, r2
 8007032:	d10d      	bne.n	8007050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800703e:	429a      	cmp	r2, r3
 8007040:	d106      	bne.n	8007050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40007000 	.word	0x40007000
 8007064:	40023800 	.word	0x40023800
 8007068:	42470060 	.word	0x42470060

0800706c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0cc      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007080:	4b68      	ldr	r3, [pc, #416]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d90c      	bls.n	80070a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b65      	ldr	r3, [pc, #404]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007096:	4b63      	ldr	r3, [pc, #396]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d001      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0b8      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d020      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c0:	4b59      	ldr	r3, [pc, #356]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	4a58      	ldr	r2, [pc, #352]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070d8:	4b53      	ldr	r3, [pc, #332]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	4a52      	ldr	r2, [pc, #328]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e4:	4b50      	ldr	r3, [pc, #320]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	494d      	ldr	r1, [pc, #308]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d044      	beq.n	800718c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d107      	bne.n	800711a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d119      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e07f      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d003      	beq.n	800712a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007126:	2b03      	cmp	r3, #3
 8007128:	d107      	bne.n	800713a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712a:	4b3f      	ldr	r3, [pc, #252]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e06f      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713a:	4b3b      	ldr	r3, [pc, #236]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e067      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800714a:	4b37      	ldr	r3, [pc, #220]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f023 0203 	bic.w	r2, r3, #3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4934      	ldr	r1, [pc, #208]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 8007158:	4313      	orrs	r3, r2
 800715a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800715c:	f7fd fdbe 	bl	8004cdc <HAL_GetTick>
 8007160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007162:	e00a      	b.n	800717a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007164:	f7fd fdba 	bl	8004cdc <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007172:	4293      	cmp	r3, r2
 8007174:	d901      	bls.n	800717a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e04f      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800717a:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 020c 	and.w	r2, r3, #12
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	429a      	cmp	r2, r3
 800718a:	d1eb      	bne.n	8007164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800718c:	4b25      	ldr	r3, [pc, #148]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d20c      	bcs.n	80071b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	4b20      	ldr	r3, [pc, #128]	; (8007224 <HAL_RCC_ClockConfig+0x1b8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d001      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e032      	b.n	800721a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c0:	4b19      	ldr	r3, [pc, #100]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	4916      	ldr	r1, [pc, #88]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	490e      	ldr	r1, [pc, #56]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071f2:	f000 f821 	bl	8007238 <HAL_RCC_GetSysClockFreq>
 80071f6:	4602      	mov	r2, r0
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	490a      	ldr	r1, [pc, #40]	; (800722c <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	5ccb      	ldrb	r3, [r1, r3]
 8007206:	fa22 f303 	lsr.w	r3, r2, r3
 800720a:	4a09      	ldr	r2, [pc, #36]	; (8007230 <HAL_RCC_ClockConfig+0x1c4>)
 800720c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <HAL_RCC_ClockConfig+0x1c8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd fd1e 	bl	8004c54 <HAL_InitTick>

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40023c00 	.word	0x40023c00
 8007228:	40023800 	.word	0x40023800
 800722c:	0800cbd8 	.word	0x0800cbd8
 8007230:	2000012c 	.word	0x2000012c
 8007234:	20000130 	.word	0x20000130

08007238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	2300      	movs	r3, #0
 800724a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007250:	4b67      	ldr	r3, [pc, #412]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 030c 	and.w	r3, r3, #12
 8007258:	2b08      	cmp	r3, #8
 800725a:	d00d      	beq.n	8007278 <HAL_RCC_GetSysClockFreq+0x40>
 800725c:	2b08      	cmp	r3, #8
 800725e:	f200 80bd 	bhi.w	80073dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_RCC_GetSysClockFreq+0x34>
 8007266:	2b04      	cmp	r3, #4
 8007268:	d003      	beq.n	8007272 <HAL_RCC_GetSysClockFreq+0x3a>
 800726a:	e0b7      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800726c:	4b61      	ldr	r3, [pc, #388]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800726e:	60bb      	str	r3, [r7, #8]
       break;
 8007270:	e0b7      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007272:	4b60      	ldr	r3, [pc, #384]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007274:	60bb      	str	r3, [r7, #8]
      break;
 8007276:	e0b4      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007278:	4b5d      	ldr	r3, [pc, #372]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007282:	4b5b      	ldr	r3, [pc, #364]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d04d      	beq.n	800732a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800728e:	4b58      	ldr	r3, [pc, #352]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	099b      	lsrs	r3, r3, #6
 8007294:	461a      	mov	r2, r3
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	ea02 0800 	and.w	r8, r2, r0
 80072a6:	ea03 0901 	and.w	r9, r3, r1
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	014b      	lsls	r3, r1, #5
 80072b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072bc:	0142      	lsls	r2, r0, #5
 80072be:	4610      	mov	r0, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	ebb0 0008 	subs.w	r0, r0, r8
 80072c6:	eb61 0109 	sbc.w	r1, r1, r9
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	018b      	lsls	r3, r1, #6
 80072d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072d8:	0182      	lsls	r2, r0, #6
 80072da:	1a12      	subs	r2, r2, r0
 80072dc:	eb63 0301 	sbc.w	r3, r3, r1
 80072e0:	f04f 0000 	mov.w	r0, #0
 80072e4:	f04f 0100 	mov.w	r1, #0
 80072e8:	00d9      	lsls	r1, r3, #3
 80072ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ee:	00d0      	lsls	r0, r2, #3
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	eb12 0208 	adds.w	r2, r2, r8
 80072f8:	eb43 0309 	adc.w	r3, r3, r9
 80072fc:	f04f 0000 	mov.w	r0, #0
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	0299      	lsls	r1, r3, #10
 8007306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800730a:	0290      	lsls	r0, r2, #10
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	461a      	mov	r2, r3
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	f7f9 fc6c 	bl	8000bf8 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4613      	mov	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e04a      	b.n	80073c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732a:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	099b      	lsrs	r3, r3, #6
 8007330:	461a      	mov	r2, r3
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800733a:	f04f 0100 	mov.w	r1, #0
 800733e:	ea02 0400 	and.w	r4, r2, r0
 8007342:	ea03 0501 	and.w	r5, r3, r1
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	014b      	lsls	r3, r1, #5
 8007354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007358:	0142      	lsls	r2, r0, #5
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	1b00      	subs	r0, r0, r4
 8007360:	eb61 0105 	sbc.w	r1, r1, r5
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	018b      	lsls	r3, r1, #6
 800736e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007372:	0182      	lsls	r2, r0, #6
 8007374:	1a12      	subs	r2, r2, r0
 8007376:	eb63 0301 	sbc.w	r3, r3, r1
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	00d9      	lsls	r1, r3, #3
 8007384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007388:	00d0      	lsls	r0, r2, #3
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	1912      	adds	r2, r2, r4
 8007390:	eb45 0303 	adc.w	r3, r5, r3
 8007394:	f04f 0000 	mov.w	r0, #0
 8007398:	f04f 0100 	mov.w	r1, #0
 800739c:	0299      	lsls	r1, r3, #10
 800739e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073a2:	0290      	lsls	r0, r2, #10
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4610      	mov	r0, r2
 80073aa:	4619      	mov	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	f7f9 fc20 	bl	8000bf8 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4613      	mov	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	0c1b      	lsrs	r3, r3, #16
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	3301      	adds	r3, #1
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	60bb      	str	r3, [r7, #8]
      break;
 80073da:	e002      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073de:	60bb      	str	r3, [r7, #8]
      break;
 80073e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e2:	68bb      	ldr	r3, [r7, #8]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073ee:	bf00      	nop
 80073f0:	40023800 	.word	0x40023800
 80073f4:	00f42400 	.word	0x00f42400

080073f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073fc:	4b03      	ldr	r3, [pc, #12]	; (800740c <HAL_RCC_GetHCLKFreq+0x14>)
 80073fe:	681b      	ldr	r3, [r3, #0]
}
 8007400:	4618      	mov	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	2000012c 	.word	0x2000012c

08007410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007414:	f7ff fff0 	bl	80073f8 <HAL_RCC_GetHCLKFreq>
 8007418:	4602      	mov	r2, r0
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	0a9b      	lsrs	r3, r3, #10
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	4903      	ldr	r1, [pc, #12]	; (8007434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007426:	5ccb      	ldrb	r3, [r1, r3]
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40023800 	.word	0x40023800
 8007434:	0800cbe8 	.word	0x0800cbe8

08007438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800743c:	f7ff ffdc 	bl	80073f8 <HAL_RCC_GetHCLKFreq>
 8007440:	4602      	mov	r2, r0
 8007442:	4b05      	ldr	r3, [pc, #20]	; (8007458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	0b5b      	lsrs	r3, r3, #13
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	4903      	ldr	r1, [pc, #12]	; (800745c <HAL_RCC_GetPCLK2Freq+0x24>)
 800744e:	5ccb      	ldrb	r3, [r1, r3]
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007454:	4618      	mov	r0, r3
 8007456:	bd80      	pop	{r7, pc}
 8007458:	40023800 	.word	0x40023800
 800745c:	0800cbe8 	.word	0x0800cbe8

08007460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e056      	b.n	8007520 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7fc f9c5 	bl	800381c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	ea42 0103 	orr.w	r1, r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	f003 0104 	and.w	r1, r3, #4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800750e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007544:	d112      	bne.n	800756c <HAL_SPI_Receive+0x44>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10e      	bne.n	800756c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2204      	movs	r2, #4
 8007552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007556:	88fa      	ldrh	r2, [r7, #6]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f8e9 	bl	800773a <HAL_SPI_TransmitReceive>
 8007568:	4603      	mov	r3, r0
 800756a:	e0e2      	b.n	8007732 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_SPI_Receive+0x52>
 8007576:	2302      	movs	r3, #2
 8007578:	e0db      	b.n	8007732 <HAL_SPI_Receive+0x20a>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007582:	f7fd fbab 	bl	8004cdc <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d002      	beq.n	800759a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007594:	2302      	movs	r3, #2
 8007596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007598:	e0c2      	b.n	8007720 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_SPI_Receive+0x7e>
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075aa:	e0b9      	b.n	8007720 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2204      	movs	r2, #4
 80075b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	88fa      	ldrh	r2, [r7, #6]
 80075ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f2:	d107      	bne.n	8007604 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007602:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d007      	beq.n	8007622 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007620:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d162      	bne.n	80076f0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800762a:	e02e      	b.n	800768a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b01      	cmp	r3, #1
 8007638:	d115      	bne.n	8007666 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f103 020c 	add.w	r2, r3, #12
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	7812      	ldrb	r2, [r2, #0]
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007664:	e011      	b.n	800768a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007666:	f7fd fb39 	bl	8004cdc <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d803      	bhi.n	800767e <HAL_SPI_Receive+0x156>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767c:	d102      	bne.n	8007684 <HAL_SPI_Receive+0x15c>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007688:	e04a      	b.n	8007720 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1cb      	bne.n	800762c <HAL_SPI_Receive+0x104>
 8007694:	e031      	b.n	80076fa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d113      	bne.n	80076cc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	b292      	uxth	r2, r2
 80076b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	1c9a      	adds	r2, r3, #2
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ca:	e011      	b.n	80076f0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076cc:	f7fd fb06 	bl	8004cdc <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d803      	bhi.n	80076e4 <HAL_SPI_Receive+0x1bc>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e2:	d102      	bne.n	80076ea <HAL_SPI_Receive+0x1c2>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076ee:	e017      	b.n	8007720 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1cd      	bne.n	8007696 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fa27 	bl	8007b52 <SPI_EndRxTransaction>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2220      	movs	r2, #32
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]
 800771c:	e000      	b.n	8007720 <HAL_SPI_Receive+0x1f8>
  }

error :
 800771e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b08c      	sub	sp, #48	; 0x30
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007748:	2301      	movs	r3, #1
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x26>
 800775c:	2302      	movs	r3, #2
 800775e:	e18a      	b.n	8007a76 <HAL_SPI_TransmitReceive+0x33c>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007768:	f7fd fab8 	bl	8004cdc <HAL_GetTick>
 800776c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007786:	2b01      	cmp	r3, #1
 8007788:	d00f      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x70>
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007790:	d107      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d103      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x68>
 800779a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d003      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
 80077a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077a8:	e15b      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <HAL_SPI_TransmitReceive+0x82>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_SPI_TransmitReceive+0x82>
 80077b6:	887b      	ldrh	r3, [r7, #2]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077c2:	e14e      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d003      	beq.n	80077d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2205      	movs	r2, #5
 80077d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	887a      	ldrh	r2, [r7, #2]
 80077e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	887a      	ldrh	r2, [r7, #2]
 80077ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	887a      	ldrh	r2, [r7, #2]
 80077fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	887a      	ldrh	r2, [r7, #2]
 8007800:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	d007      	beq.n	800782c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800782a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007834:	d178      	bne.n	8007928 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x10a>
 800783e:	8b7b      	ldrh	r3, [r7, #26]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d166      	bne.n	8007912 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007868:	e053      	b.n	8007912 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d11b      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x176>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d016      	beq.n	80078b0 <HAL_SPI_TransmitReceive+0x176>
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	2b01      	cmp	r3, #1
 8007886:	d113      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	881a      	ldrh	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	1c9a      	adds	r2, r3, #2
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d119      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x1b8>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d014      	beq.n	80078f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	b292      	uxth	r2, r2
 80078d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	1c9a      	adds	r2, r3, #2
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078ee:	2301      	movs	r3, #1
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078f2:	f7fd f9f3 	bl	8004cdc <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078fe:	429a      	cmp	r2, r3
 8007900:	d807      	bhi.n	8007912 <HAL_SPI_TransmitReceive+0x1d8>
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007908:	d003      	beq.n	8007912 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007910:	e0a7      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1a6      	bne.n	800786a <HAL_SPI_TransmitReceive+0x130>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1a1      	bne.n	800786a <HAL_SPI_TransmitReceive+0x130>
 8007926:	e07c      	b.n	8007a22 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_SPI_TransmitReceive+0x1fc>
 8007930:	8b7b      	ldrh	r3, [r7, #26]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d16b      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800795c:	e057      	b.n	8007a0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b02      	cmp	r3, #2
 800796a:	d11c      	bne.n	80079a6 <HAL_SPI_TransmitReceive+0x26c>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007970:	b29b      	uxth	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x26c>
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b01      	cmp	r3, #1
 800797a:	d114      	bne.n	80079a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	7812      	ldrb	r2, [r2, #0]
 8007988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d119      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x2ae>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d014      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079e4:	2301      	movs	r3, #1
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079e8:	f7fd f978 	bl	8004cdc <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d803      	bhi.n	8007a00 <HAL_SPI_TransmitReceive+0x2c6>
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fe:	d102      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x2cc>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a0c:	e029      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1a2      	bne.n	800795e <HAL_SPI_TransmitReceive+0x224>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d19d      	bne.n	800795e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f8f8 	bl	8007c1c <SPI_EndRxTxTransaction>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a3e:	e010      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	e000      	b.n	8007a62 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3730      	adds	r7, #48	; 0x30
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	603b      	str	r3, [r7, #0]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a8e:	e04c      	b.n	8007b2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a96:	d048      	beq.n	8007b2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007a98:	f7fd f920 	bl	8004cdc <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d902      	bls.n	8007aae <SPI_WaitFlagStateUntilTimeout+0x30>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d13d      	bne.n	8007b2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac6:	d111      	bne.n	8007aec <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad0:	d004      	beq.n	8007adc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ada:	d107      	bne.n	8007aec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af4:	d10f      	bne.n	8007b16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e00f      	b.n	8007b4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4013      	ands	r3, r2
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	bf0c      	ite	eq
 8007b3a:	2301      	moveq	r3, #1
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d1a3      	bne.n	8007a90 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b086      	sub	sp, #24
 8007b56:	af02      	add	r7, sp, #8
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b66:	d111      	bne.n	8007b8c <SPI_EndRxTransaction+0x3a>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b70:	d004      	beq.n	8007b7c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b7a:	d107      	bne.n	8007b8c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b8a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b94:	d12a      	bne.n	8007bec <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9e:	d012      	beq.n	8007bc6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2180      	movs	r1, #128	; 0x80
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff ff67 	bl	8007a7e <SPI_WaitFlagStateUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d02d      	beq.n	8007c12 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e026      	b.n	8007c14 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2101      	movs	r1, #1
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff ff54 	bl	8007a7e <SPI_WaitFlagStateUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be0:	f043 0220 	orr.w	r2, r3, #32
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e013      	b.n	8007c14 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff ff41 	bl	8007a7e <SPI_WaitFlagStateUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e000      	b.n	8007c14 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c28:	4b1b      	ldr	r3, [pc, #108]	; (8007c98 <SPI_EndRxTxTransaction+0x7c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <SPI_EndRxTxTransaction+0x80>)
 8007c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c32:	0d5b      	lsrs	r3, r3, #21
 8007c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c46:	d112      	bne.n	8007c6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2180      	movs	r1, #128	; 0x80
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff ff13 	bl	8007a7e <SPI_WaitFlagStateUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d016      	beq.n	8007c8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	f043 0220 	orr.w	r2, r3, #32
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e00f      	b.n	8007c8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c84:	2b80      	cmp	r3, #128	; 0x80
 8007c86:	d0f2      	beq.n	8007c6e <SPI_EndRxTxTransaction+0x52>
 8007c88:	e000      	b.n	8007c8c <SPI_EndRxTxTransaction+0x70>
        break;
 8007c8a:	bf00      	nop
  }

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	2000012c 	.word	0x2000012c
 8007c9c:	165e9f81 	.word	0x165e9f81

08007ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e01d      	b.n	8007cee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d106      	bne.n	8007ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7fc f8be 	bl	8003e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f000 fcf6 	bl	80086d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b06      	cmp	r3, #6
 8007d16:	d007      	beq.n	8007d28 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e01d      	b.n	8007d8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d106      	bne.n	8007d6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f815 	bl	8007d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f000 fca7 	bl	80086d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2201      	movs	r2, #1
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 f89c 	bl	8008ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <HAL_TIM_PWM_Start+0x74>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <HAL_TIM_PWM_Start+0x2c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a14      	ldr	r2, [pc, #80]	; (8007e20 <HAL_TIM_PWM_Start+0x78>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d101      	bne.n	8007dd8 <HAL_TIM_PWM_Start+0x30>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e000      	b.n	8007dda <HAL_TIM_PWM_Start+0x32>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	d007      	beq.n	8007e10 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40010400 	.word	0x40010400

08007e24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2200      	movs	r2, #0
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 f85e 	bl	8008ef8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a22      	ldr	r2, [pc, #136]	; (8007ecc <HAL_TIM_PWM_Stop+0xa8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIM_PWM_Stop+0x2c>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a21      	ldr	r2, [pc, #132]	; (8007ed0 <HAL_TIM_PWM_Stop+0xac>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIM_PWM_Stop+0x30>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <HAL_TIM_PWM_Stop+0x32>
 8007e54:	2300      	movs	r3, #0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d017      	beq.n	8007e8a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6a1a      	ldr	r2, [r3, #32]
 8007e60:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10f      	bne.n	8007e8a <HAL_TIM_PWM_Stop+0x66>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	f240 4344 	movw	r3, #1092	; 0x444
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <HAL_TIM_PWM_Stop+0x66>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a1a      	ldr	r2, [r3, #32]
 8007e90:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10f      	bne.n	8007eba <HAL_TIM_PWM_Stop+0x96>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6a1a      	ldr	r2, [r3, #32]
 8007ea0:	f240 4344 	movw	r3, #1092	; 0x444
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d107      	bne.n	8007eba <HAL_TIM_PWM_Stop+0x96>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	40010000 	.word	0x40010000
 8007ed0:	40010400 	.word	0x40010400

08007ed4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e01d      	b.n	8007f22 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f815 	bl	8007f2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f000 fbdc 	bl	80086d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
	...

08007f40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b0c      	cmp	r3, #12
 8007f4e:	d841      	bhi.n	8007fd4 <HAL_TIM_IC_Start_IT+0x94>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <HAL_TIM_IC_Start_IT+0x18>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f8d 	.word	0x08007f8d
 8007f5c:	08007fd5 	.word	0x08007fd5
 8007f60:	08007fd5 	.word	0x08007fd5
 8007f64:	08007fd5 	.word	0x08007fd5
 8007f68:	08007f9f 	.word	0x08007f9f
 8007f6c:	08007fd5 	.word	0x08007fd5
 8007f70:	08007fd5 	.word	0x08007fd5
 8007f74:	08007fd5 	.word	0x08007fd5
 8007f78:	08007fb1 	.word	0x08007fb1
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	08007fd5 	.word	0x08007fd5
 8007f84:	08007fd5 	.word	0x08007fd5
 8007f88:	08007fc3 	.word	0x08007fc3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0202 	orr.w	r2, r2, #2
 8007f9a:	60da      	str	r2, [r3, #12]
      break;
 8007f9c:	e01b      	b.n	8007fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0204 	orr.w	r2, r2, #4
 8007fac:	60da      	str	r2, [r3, #12]
      break;
 8007fae:	e012      	b.n	8007fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0208 	orr.w	r2, r2, #8
 8007fbe:	60da      	str	r2, [r3, #12]
      break;
 8007fc0:	e009      	b.n	8007fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0210 	orr.w	r2, r2, #16
 8007fd0:	60da      	str	r2, [r3, #12]
      break;
 8007fd2:	e000      	b.n	8007fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007fd4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 ff8a 	bl	8008ef8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b06      	cmp	r3, #6
 8007ff4:	d007      	beq.n	8008006 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0201 	orr.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b02      	cmp	r3, #2
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0202 	mvn.w	r2, #2
 800803c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb1e 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fb10 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fb21 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b04      	cmp	r3, #4
 8008078:	d122      	bne.n	80080c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d11b      	bne.n	80080c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0204 	mvn.w	r2, #4
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 faf4 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fae6 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 faf7 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d122      	bne.n	8008114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d11b      	bne.n	8008114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0208 	mvn.w	r2, #8
 80080e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2204      	movs	r2, #4
 80080ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 faca 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fabc 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 facd 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b10      	cmp	r3, #16
 8008120:	d122      	bne.n	8008168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b10      	cmp	r3, #16
 800812e:	d11b      	bne.n	8008168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0210 	mvn.w	r2, #16
 8008138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2208      	movs	r2, #8
 800813e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 faa0 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8008154:	e005      	b.n	8008162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa92 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 faa3 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	d10e      	bne.n	8008194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b01      	cmp	r3, #1
 8008182:	d107      	bne.n	8008194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0201 	mvn.w	r2, #1
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa6c 	bl	800866c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b80      	cmp	r3, #128	; 0x80
 80081a0:	d10e      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	d107      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 ff9a 	bl	80090f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa68 	bl	80086bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b20      	cmp	r3, #32
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0220 	mvn.w	r2, #32
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 ff64 	bl	80090e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_TIM_IC_ConfigChannel+0x1a>
 8008236:	2302      	movs	r3, #2
 8008238:	e08a      	b.n	8008350 <HAL_TIM_IC_ConfigChannel+0x130>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11b      	bne.n	8008288 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6819      	ldr	r1, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f000 fc86 	bl	8008b70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699a      	ldr	r2, [r3, #24]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 020c 	bic.w	r2, r2, #12
 8008272:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6999      	ldr	r1, [r3, #24]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	619a      	str	r2, [r3, #24]
 8008286:	e05a      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b04      	cmp	r3, #4
 800828c:	d11c      	bne.n	80082c8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f000 fd0a 	bl	8008cb6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6999      	ldr	r1, [r3, #24]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	021a      	lsls	r2, r3, #8
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	619a      	str	r2, [r3, #24]
 80082c6:	e03a      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	d11b      	bne.n	8008306 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6819      	ldr	r1, [r3, #0]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f000 fd57 	bl	8008d90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 020c 	bic.w	r2, r2, #12
 80082f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69d9      	ldr	r1, [r3, #28]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	61da      	str	r2, [r3, #28]
 8008304:	e01b      	b.n	800833e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6819      	ldr	r1, [r3, #0]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f000 fd77 	bl	8008e08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69da      	ldr	r2, [r3, #28]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008328:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69d9      	ldr	r1, [r3, #28]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	021a      	lsls	r2, r3, #8
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800836e:	2302      	movs	r3, #2
 8008370:	e0b4      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b0c      	cmp	r3, #12
 8008386:	f200 809f 	bhi.w	80084c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083c5 	.word	0x080083c5
 8008394:	080084c9 	.word	0x080084c9
 8008398:	080084c9 	.word	0x080084c9
 800839c:	080084c9 	.word	0x080084c9
 80083a0:	08008405 	.word	0x08008405
 80083a4:	080084c9 	.word	0x080084c9
 80083a8:	080084c9 	.word	0x080084c9
 80083ac:	080084c9 	.word	0x080084c9
 80083b0:	08008447 	.word	0x08008447
 80083b4:	080084c9 	.word	0x080084c9
 80083b8:	080084c9 	.word	0x080084c9
 80083bc:	080084c9 	.word	0x080084c9
 80083c0:	08008487 	.word	0x08008487
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fa20 	bl	8008810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0208 	orr.w	r2, r2, #8
 80083de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0204 	bic.w	r2, r2, #4
 80083ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6999      	ldr	r1, [r3, #24]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	691a      	ldr	r2, [r3, #16]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	619a      	str	r2, [r3, #24]
      break;
 8008402:	e062      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fa70 	bl	80088f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800841e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6999      	ldr	r1, [r3, #24]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	021a      	lsls	r2, r3, #8
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	619a      	str	r2, [r3, #24]
      break;
 8008444:	e041      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fac5 	bl	80089dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0208 	orr.w	r2, r2, #8
 8008460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0204 	bic.w	r2, r2, #4
 8008470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69d9      	ldr	r1, [r3, #28]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	61da      	str	r2, [r3, #28]
      break;
 8008484:	e021      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fb19 	bl	8008ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69da      	ldr	r2, [r3, #28]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69d9      	ldr	r1, [r3, #28]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	021a      	lsls	r2, r3, #8
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	61da      	str	r2, [r3, #28]
      break;
 80084c6:	e000      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80084c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_TIM_ConfigClockSource+0x18>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e0b3      	b.n	8008664 <HAL_TIM_ConfigClockSource+0x180>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800851a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008534:	d03e      	beq.n	80085b4 <HAL_TIM_ConfigClockSource+0xd0>
 8008536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853a:	f200 8087 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x168>
 800853e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008542:	f000 8085 	beq.w	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854a:	d87f      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 800854c:	2b70      	cmp	r3, #112	; 0x70
 800854e:	d01a      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0xa2>
 8008550:	2b70      	cmp	r3, #112	; 0x70
 8008552:	d87b      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 8008554:	2b60      	cmp	r3, #96	; 0x60
 8008556:	d050      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0x116>
 8008558:	2b60      	cmp	r3, #96	; 0x60
 800855a:	d877      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 800855c:	2b50      	cmp	r3, #80	; 0x50
 800855e:	d03c      	beq.n	80085da <HAL_TIM_ConfigClockSource+0xf6>
 8008560:	2b50      	cmp	r3, #80	; 0x50
 8008562:	d873      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 8008564:	2b40      	cmp	r3, #64	; 0x40
 8008566:	d058      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x136>
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d86f      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 800856c:	2b30      	cmp	r3, #48	; 0x30
 800856e:	d064      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x156>
 8008570:	2b30      	cmp	r3, #48	; 0x30
 8008572:	d86b      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 8008574:	2b20      	cmp	r3, #32
 8008576:	d060      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x156>
 8008578:	2b20      	cmp	r3, #32
 800857a:	d867      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x168>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d05c      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x156>
 8008580:	2b10      	cmp	r3, #16
 8008582:	d05a      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008584:	e062      	b.n	800864c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6899      	ldr	r1, [r3, #8]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f000 fc8f 	bl	8008eb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	609a      	str	r2, [r3, #8]
      break;
 80085b2:	e04e      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	6899      	ldr	r1, [r3, #8]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f000 fc78 	bl	8008eb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085d6:	609a      	str	r2, [r3, #8]
      break;
 80085d8:	e03b      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6859      	ldr	r1, [r3, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f000 fb36 	bl	8008c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2150      	movs	r1, #80	; 0x50
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fc45 	bl	8008e82 <TIM_ITRx_SetConfig>
      break;
 80085f8:	e02b      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6859      	ldr	r1, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	461a      	mov	r2, r3
 8008608:	f000 fb92 	bl	8008d30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2160      	movs	r1, #96	; 0x60
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fc35 	bl	8008e82 <TIM_ITRx_SetConfig>
      break;
 8008618:	e01b      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6859      	ldr	r1, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	461a      	mov	r2, r3
 8008628:	f000 fb16 	bl	8008c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2140      	movs	r1, #64	; 0x40
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fc25 	bl	8008e82 <TIM_ITRx_SetConfig>
      break;
 8008638:	e00b      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f000 fc1c 	bl	8008e82 <TIM_ITRx_SetConfig>
      break;
 800864a:	e002      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800864c:	bf00      	nop
 800864e:	e000      	b.n	8008652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a40      	ldr	r2, [pc, #256]	; (80087e4 <TIM_Base_SetConfig+0x114>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d013      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ee:	d00f      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a3d      	ldr	r2, [pc, #244]	; (80087e8 <TIM_Base_SetConfig+0x118>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00b      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a3c      	ldr	r2, [pc, #240]	; (80087ec <TIM_Base_SetConfig+0x11c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d007      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a3b      	ldr	r2, [pc, #236]	; (80087f0 <TIM_Base_SetConfig+0x120>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a3a      	ldr	r2, [pc, #232]	; (80087f4 <TIM_Base_SetConfig+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d108      	bne.n	8008722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a2f      	ldr	r2, [pc, #188]	; (80087e4 <TIM_Base_SetConfig+0x114>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d02b      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008730:	d027      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a2c      	ldr	r2, [pc, #176]	; (80087e8 <TIM_Base_SetConfig+0x118>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d023      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2b      	ldr	r2, [pc, #172]	; (80087ec <TIM_Base_SetConfig+0x11c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d01f      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2a      	ldr	r2, [pc, #168]	; (80087f0 <TIM_Base_SetConfig+0x120>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d01b      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a29      	ldr	r2, [pc, #164]	; (80087f4 <TIM_Base_SetConfig+0x124>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d017      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a28      	ldr	r2, [pc, #160]	; (80087f8 <TIM_Base_SetConfig+0x128>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d013      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a27      	ldr	r2, [pc, #156]	; (80087fc <TIM_Base_SetConfig+0x12c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00f      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a26      	ldr	r2, [pc, #152]	; (8008800 <TIM_Base_SetConfig+0x130>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00b      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a25      	ldr	r2, [pc, #148]	; (8008804 <TIM_Base_SetConfig+0x134>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d007      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a24      	ldr	r2, [pc, #144]	; (8008808 <TIM_Base_SetConfig+0x138>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d003      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a23      	ldr	r2, [pc, #140]	; (800880c <TIM_Base_SetConfig+0x13c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d108      	bne.n	8008794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <TIM_Base_SetConfig+0x114>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_Base_SetConfig+0xf8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <TIM_Base_SetConfig+0x124>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d103      	bne.n	80087d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	615a      	str	r2, [r3, #20]
}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	40010000 	.word	0x40010000
 80087e8:	40000400 	.word	0x40000400
 80087ec:	40000800 	.word	0x40000800
 80087f0:	40000c00 	.word	0x40000c00
 80087f4:	40010400 	.word	0x40010400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800
 8008804:	40001800 	.word	0x40001800
 8008808:	40001c00 	.word	0x40001c00
 800880c:	40002000 	.word	0x40002000

08008810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f023 0201 	bic.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0303 	bic.w	r3, r3, #3
 8008846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f023 0302 	bic.w	r3, r3, #2
 8008858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4313      	orrs	r3, r2
 8008862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a20      	ldr	r2, [pc, #128]	; (80088e8 <TIM_OC1_SetConfig+0xd8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_OC1_SetConfig+0x64>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a1f      	ldr	r2, [pc, #124]	; (80088ec <TIM_OC1_SetConfig+0xdc>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d10c      	bne.n	800888e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f023 0308 	bic.w	r3, r3, #8
 800887a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 0304 	bic.w	r3, r3, #4
 800888c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a15      	ldr	r2, [pc, #84]	; (80088e8 <TIM_OC1_SetConfig+0xd8>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d003      	beq.n	800889e <TIM_OC1_SetConfig+0x8e>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a14      	ldr	r2, [pc, #80]	; (80088ec <TIM_OC1_SetConfig+0xdc>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d111      	bne.n	80088c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	4313      	orrs	r3, r2
 80088c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	621a      	str	r2, [r3, #32]
}
 80088dc:	bf00      	nop
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40010400 	.word	0x40010400

080088f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	f023 0210 	bic.w	r2, r3, #16
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f023 0320 	bic.w	r3, r3, #32
 800893a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	011b      	lsls	r3, r3, #4
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a22      	ldr	r2, [pc, #136]	; (80089d4 <TIM_OC2_SetConfig+0xe4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d003      	beq.n	8008958 <TIM_OC2_SetConfig+0x68>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a21      	ldr	r2, [pc, #132]	; (80089d8 <TIM_OC2_SetConfig+0xe8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d10d      	bne.n	8008974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800895e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <TIM_OC2_SetConfig+0xe4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <TIM_OC2_SetConfig+0x94>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <TIM_OC2_SetConfig+0xe8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d113      	bne.n	80089ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800898a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	4313      	orrs	r3, r2
 800899e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	621a      	str	r2, [r3, #32]
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40010400 	.word	0x40010400

080089dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	021b      	lsls	r3, r3, #8
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a21      	ldr	r2, [pc, #132]	; (8008abc <TIM_OC3_SetConfig+0xe0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d003      	beq.n	8008a42 <TIM_OC3_SetConfig+0x66>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a20      	ldr	r2, [pc, #128]	; (8008ac0 <TIM_OC3_SetConfig+0xe4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d10d      	bne.n	8008a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a16      	ldr	r2, [pc, #88]	; (8008abc <TIM_OC3_SetConfig+0xe0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_OC3_SetConfig+0x92>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <TIM_OC3_SetConfig+0xe4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d113      	bne.n	8008a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	621a      	str	r2, [r3, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	40010000 	.word	0x40010000
 8008ac0:	40010400 	.word	0x40010400

08008ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	031b      	lsls	r3, r3, #12
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a12      	ldr	r2, [pc, #72]	; (8008b68 <TIM_OC4_SetConfig+0xa4>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d003      	beq.n	8008b2c <TIM_OC4_SetConfig+0x68>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a11      	ldr	r2, [pc, #68]	; (8008b6c <TIM_OC4_SetConfig+0xa8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d109      	bne.n	8008b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	019b      	lsls	r3, r3, #6
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40010000 	.word	0x40010000
 8008b6c:	40010400 	.word	0x40010400

08008b70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f023 0201 	bic.w	r2, r3, #1
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4a28      	ldr	r2, [pc, #160]	; (8008c3c <TIM_TI1_SetConfig+0xcc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d01b      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba4:	d017      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4a25      	ldr	r2, [pc, #148]	; (8008c40 <TIM_TI1_SetConfig+0xd0>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d013      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a24      	ldr	r2, [pc, #144]	; (8008c44 <TIM_TI1_SetConfig+0xd4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00f      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a23      	ldr	r2, [pc, #140]	; (8008c48 <TIM_TI1_SetConfig+0xd8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d00b      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a22      	ldr	r2, [pc, #136]	; (8008c4c <TIM_TI1_SetConfig+0xdc>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d007      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a21      	ldr	r2, [pc, #132]	; (8008c50 <TIM_TI1_SetConfig+0xe0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d003      	beq.n	8008bd6 <TIM_TI1_SetConfig+0x66>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a20      	ldr	r2, [pc, #128]	; (8008c54 <TIM_TI1_SetConfig+0xe4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d101      	bne.n	8008bda <TIM_TI1_SetConfig+0x6a>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <TIM_TI1_SetConfig+0x6c>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	e003      	b.n	8008bfa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f043 0301 	orr.w	r3, r3, #1
 8008bf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f023 030a 	bic.w	r3, r3, #10
 8008c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f003 030a 	and.w	r3, r3, #10
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	621a      	str	r2, [r3, #32]
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40010000 	.word	0x40010000
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40010400 	.word	0x40010400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40001800 	.word	0x40001800

08008c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 030a 	bic.w	r3, r3, #10
 8008c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f023 0210 	bic.w	r2, r3, #16
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	031b      	lsls	r3, r3, #12
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	621a      	str	r2, [r3, #32]
}
 8008d24:	bf00      	nop
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	f023 0210 	bic.w	r2, r3, #16
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	031b      	lsls	r3, r3, #12
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	011b      	lsls	r3, r3, #4
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	621a      	str	r2, [r3, #32]
}
 8008d84:	bf00      	nop
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f023 0303 	bic.w	r3, r3, #3
 8008dbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	621a      	str	r2, [r3, #32]
}
 8008dfc:	bf00      	nop
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	031b      	lsls	r3, r3, #12
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	031b      	lsls	r3, r3, #12
 8008e60:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b085      	sub	sp, #20
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f043 0307 	orr.w	r3, r3, #7
 8008ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	609a      	str	r2, [r3, #8]
}
 8008eac:	bf00      	nop
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	021a      	lsls	r2, r3, #8
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	431a      	orrs	r2, r3
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	609a      	str	r2, [r3, #8]
}
 8008eec:	bf00      	nop
 8008eee:	371c      	adds	r7, #28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 031f 	and.w	r3, r3, #31
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a1a      	ldr	r2, [r3, #32]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	401a      	ands	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a1a      	ldr	r2, [r3, #32]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f30:	431a      	orrs	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
	...

08008f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e05a      	b.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a21      	ldr	r2, [pc, #132]	; (8009020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d022      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fa8:	d01d      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d018      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a1b      	ldr	r2, [pc, #108]	; (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d013      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a1a      	ldr	r2, [pc, #104]	; (800902c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00e      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a18      	ldr	r2, [pc, #96]	; (8009030 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d009      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a17      	ldr	r2, [pc, #92]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d004      	beq.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a15      	ldr	r2, [pc, #84]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d10c      	bne.n	8009000 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40010000 	.word	0x40010000
 8009024:	40000400 	.word	0x40000400
 8009028:	40000800 	.word	0x40000800
 800902c:	40000c00 	.word	0x40000c00
 8009030:	40010400 	.word	0x40010400
 8009034:	40014000 	.word	0x40014000
 8009038:	40001800 	.word	0x40001800

0800903c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009054:	2302      	movs	r3, #2
 8009056:	e03d      	b.n	80090d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e03f      	b.n	800919a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7fa ffe6 	bl	8004100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2224      	movs	r2, #36	; 0x24
 8009138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800914a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc6d 	bl	8009a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695a      	ldr	r2, [r3, #20]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2220      	movs	r2, #32
 800918c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b088      	sub	sp, #32
 80091a6:	af02      	add	r7, sp, #8
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	603b      	str	r3, [r7, #0]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b20      	cmp	r3, #32
 80091c0:	f040 8083 	bne.w	80092ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_UART_Transmit+0x2e>
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e07b      	b.n	80092cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Transmit+0x40>
 80091de:	2302      	movs	r3, #2
 80091e0:	e074      	b.n	80092cc <HAL_UART_Transmit+0x12a>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2221      	movs	r2, #33	; 0x21
 80091f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80091f8:	f7fb fd70 	bl	8004cdc <HAL_GetTick>
 80091fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009212:	e042      	b.n	800929a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922a:	d122      	bne.n	8009272 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	2180      	movs	r1, #128	; 0x80
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 fa76 	bl	8009728 <UART_WaitOnFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e042      	b.n	80092cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009258:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3302      	adds	r3, #2
 8009266:	60bb      	str	r3, [r7, #8]
 8009268:	e017      	b.n	800929a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	3301      	adds	r3, #1
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	e013      	b.n	800929a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fa53 	bl	8009728 <UART_WaitOnFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e01f      	b.n	80092cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	60ba      	str	r2, [r7, #8]
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1b7      	bne.n	8009214 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2140      	movs	r1, #64	; 0x40
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fa3a 	bl	8009728 <UART_WaitOnFlagUntilTimeout>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e006      	b.n	80092cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e000      	b.n	80092cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80092ca:	2302      	movs	r3, #2
  }
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d166      	bne.n	80093bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <HAL_UART_Receive_DMA+0x26>
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e05f      	b.n	80093be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_UART_Receive_DMA+0x38>
 8009308:	2302      	movs	r3, #2
 800930a:	e058      	b.n	80093be <HAL_UART_Receive_DMA+0xea>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	88fa      	ldrh	r2, [r7, #6]
 800931e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2222      	movs	r2, #34	; 0x22
 800932a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	4a25      	ldr	r2, [pc, #148]	; (80093c8 <HAL_UART_Receive_DMA+0xf4>)
 8009334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933a:	4a24      	ldr	r2, [pc, #144]	; (80093cc <HAL_UART_Receive_DMA+0xf8>)
 800933c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	4a23      	ldr	r2, [pc, #140]	; (80093d0 <HAL_UART_Receive_DMA+0xfc>)
 8009344:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	2200      	movs	r2, #0
 800934c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800934e:	f107 0308 	add.w	r3, r7, #8
 8009352:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3304      	adds	r3, #4
 800935e:	4619      	mov	r1, r3
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	88fb      	ldrh	r3, [r7, #6]
 8009366:	f7fc fd27 	bl	8005db8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009396:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	695a      	ldr	r2, [r3, #20]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0201 	orr.w	r2, r2, #1
 80093a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695a      	ldr	r2, [r3, #20]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e000      	b.n	80093be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80093bc:	2302      	movs	r3, #2
  }
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	08009611 	.word	0x08009611
 80093cc:	08009679 	.word	0x08009679
 80093d0:	08009695 	.word	0x08009695

080093d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10d      	bne.n	8009426 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <HAL_UART_IRQHandler+0x52>
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa82 	bl	8009928 <UART_Receive_IT>
      return;
 8009424:	e0d0      	b.n	80095c8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 80b0 	beq.w	800958e <HAL_UART_IRQHandler+0x1ba>
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <HAL_UART_IRQHandler+0x70>
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 80a5 	beq.w	800958e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <HAL_UART_IRQHandler+0x90>
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009454:	2b00      	cmp	r3, #0
 8009456:	d005      	beq.n	8009464 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945c:	f043 0201 	orr.w	r2, r3, #1
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <HAL_UART_IRQHandler+0xb0>
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947c:	f043 0202 	orr.w	r2, r3, #2
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f003 0302 	and.w	r3, r3, #2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <HAL_UART_IRQHandler+0xd0>
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949c:	f043 0204 	orr.w	r2, r3, #4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0308 	and.w	r3, r3, #8
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00f      	beq.n	80094ce <HAL_UART_IRQHandler+0xfa>
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d104      	bne.n	80094c2 <HAL_UART_IRQHandler+0xee>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d005      	beq.n	80094ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c6:	f043 0208 	orr.w	r2, r3, #8
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d077      	beq.n	80095c6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <HAL_UART_IRQHandler+0x11c>
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa1c 	bl	8009928 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fa:	2b40      	cmp	r3, #64	; 0x40
 80094fc:	bf0c      	ite	eq
 80094fe:	2301      	moveq	r3, #1
 8009500:	2300      	movne	r3, #0
 8009502:	b2db      	uxtb	r3, r3
 8009504:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	f003 0308 	and.w	r3, r3, #8
 800950e:	2b00      	cmp	r3, #0
 8009510:	d102      	bne.n	8009518 <HAL_UART_IRQHandler+0x144>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d031      	beq.n	800957c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f965 	bl	80097e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b40      	cmp	r3, #64	; 0x40
 800952a:	d123      	bne.n	8009574 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	695a      	ldr	r2, [r3, #20]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800953a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009540:	2b00      	cmp	r3, #0
 8009542:	d013      	beq.n	800956c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009548:	4a21      	ldr	r2, [pc, #132]	; (80095d0 <HAL_UART_IRQHandler+0x1fc>)
 800954a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009550:	4618      	mov	r0, r3
 8009552:	f7fc fc89 	bl	8005e68 <HAL_DMA_Abort_IT>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d016      	beq.n	800958a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009566:	4610      	mov	r0, r2
 8009568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956a:	e00e      	b.n	800958a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f845 	bl	80095fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009572:	e00a      	b.n	800958a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f841 	bl	80095fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957a:	e006      	b.n	800958a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f83d 	bl	80095fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009588:	e01d      	b.n	80095c6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958a:	bf00      	nop
    return;
 800958c:	e01b      	b.n	80095c6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009594:	2b00      	cmp	r3, #0
 8009596:	d008      	beq.n	80095aa <HAL_UART_IRQHandler+0x1d6>
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f952 	bl	800984c <UART_Transmit_IT>
    return;
 80095a8:	e00e      	b.n	80095c8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <HAL_UART_IRQHandler+0x1f4>
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d004      	beq.n	80095c8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f99a 	bl	80098f8 <UART_EndTransmit_IT>
    return;
 80095c4:	e000      	b.n	80095c8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80095c6:	bf00      	nop
  }
}
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	08009825 	.word	0x08009825

080095d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009628:	2b00      	cmp	r3, #0
 800962a:	d11e      	bne.n	800966a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009640:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695a      	ldr	r2, [r3, #20]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0201 	bic.w	r2, r2, #1
 8009650:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	695a      	ldr	r2, [r3, #20]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009660:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2220      	movs	r2, #32
 8009666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7f9 fb7a 	bl	8002d64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f7ff ffae 	bl	80095e8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b0:	2b80      	cmp	r3, #128	; 0x80
 80096b2:	bf0c      	ite	eq
 80096b4:	2301      	moveq	r3, #1
 80096b6:	2300      	movne	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b21      	cmp	r3, #33	; 0x21
 80096c6:	d108      	bne.n	80096da <UART_DMAError+0x46>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d005      	beq.n	80096da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2200      	movs	r2, #0
 80096d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80096d4:	68b8      	ldr	r0, [r7, #8]
 80096d6:	f000 f871 	bl	80097bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e4:	2b40      	cmp	r3, #64	; 0x40
 80096e6:	bf0c      	ite	eq
 80096e8:	2301      	moveq	r3, #1
 80096ea:	2300      	movne	r3, #0
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b22      	cmp	r3, #34	; 0x22
 80096fa:	d108      	bne.n	800970e <UART_DMAError+0x7a>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2200      	movs	r2, #0
 8009706:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009708:	68b8      	ldr	r0, [r7, #8]
 800970a:	f000 f86d 	bl	80097e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	f043 0210 	orr.w	r2, r3, #16
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800971a:	68b8      	ldr	r0, [r7, #8]
 800971c:	f7ff ff6e 	bl	80095fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009720:	bf00      	nop
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4613      	mov	r3, r2
 8009736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009738:	e02c      	b.n	8009794 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009740:	d028      	beq.n	8009794 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <UART_WaitOnFlagUntilTimeout+0x30>
 8009748:	f7fb fac8 	bl	8004cdc <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	429a      	cmp	r2, r3
 8009756:	d21d      	bcs.n	8009794 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009766:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	695a      	ldr	r2, [r3, #20]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0201 	bic.w	r2, r2, #1
 8009776:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e00f      	b.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4013      	ands	r3, r2
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	bf0c      	ite	eq
 80097a4:	2301      	moveq	r3, #1
 80097a6:	2300      	movne	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	461a      	mov	r2, r3
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d0c3      	beq.n	800973a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80097d2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68da      	ldr	r2, [r3, #12]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0201 	bic.w	r2, r2, #1
 800980e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fedc 	bl	80095fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b21      	cmp	r3, #33	; 0x21
 800985e:	d144      	bne.n	80098ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009868:	d11a      	bne.n	80098a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800987e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	1c9a      	adds	r2, r3, #2
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	621a      	str	r2, [r3, #32]
 8009892:	e00e      	b.n	80098b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	621a      	str	r2, [r3, #32]
 800989e:	e008      	b.n	80098b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	1c59      	adds	r1, r3, #1
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6211      	str	r1, [r2, #32]
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	4619      	mov	r1, r3
 80098c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10f      	bne.n	80098e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	e000      	b.n	80098ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80098ea:	2302      	movs	r3, #2
  }
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800990e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2220      	movs	r2, #32
 8009914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7ff fe5b 	bl	80095d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b22      	cmp	r3, #34	; 0x22
 800993a:	d171      	bne.n	8009a20 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009944:	d123      	bne.n	800998e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10e      	bne.n	8009972 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	b29b      	uxth	r3, r3
 800995c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009960:	b29a      	uxth	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996a:	1c9a      	adds	r2, r3, #2
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	629a      	str	r2, [r3, #40]	; 0x28
 8009970:	e029      	b.n	80099c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	b29b      	uxth	r3, r3
 800997a:	b2db      	uxtb	r3, r3
 800997c:	b29a      	uxth	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	629a      	str	r2, [r3, #40]	; 0x28
 800998c:	e01b      	b.n	80099c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6858      	ldr	r0, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	1c59      	adds	r1, r3, #1
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6291      	str	r1, [r2, #40]	; 0x28
 80099a6:	b2c2      	uxtb	r2, r0
 80099a8:	701a      	strb	r2, [r3, #0]
 80099aa:	e00c      	b.n	80099c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	1c58      	adds	r0, r3, #1
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	6288      	str	r0, [r1, #40]	; 0x28
 80099be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d120      	bne.n	8009a1c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0220 	bic.w	r2, r2, #32
 80099e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	695a      	ldr	r2, [r3, #20]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0201 	bic.w	r2, r2, #1
 8009a08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7f9 f9a6 	bl	8002d64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e002      	b.n	8009a22 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e000      	b.n	8009a22 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009a20:	2302      	movs	r3, #2
  }
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	b0bd      	sub	sp, #244	; 0xf4
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a48:	68d9      	ldr	r1, [r3, #12]
 8009a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	ea40 0301 	orr.w	r3, r0, r1
 8009a54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5a:	689a      	ldr	r2, [r3, #8]
 8009a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a84:	f021 010c 	bic.w	r1, r1, #12
 8009a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a92:	430b      	orrs	r3, r1
 8009a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa6:	6999      	ldr	r1, [r3, #24]
 8009aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	ea40 0301 	orr.w	r3, r0, r1
 8009ab2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009abe:	f040 81a5 	bne.w	8009e0c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4bcd      	ldr	r3, [pc, #820]	; (8009e00 <UART_SetConfig+0x3d4>)
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d006      	beq.n	8009adc <UART_SetConfig+0xb0>
 8009ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	4bcb      	ldr	r3, [pc, #812]	; (8009e04 <UART_SetConfig+0x3d8>)
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	f040 80cb 	bne.w	8009c72 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009adc:	f7fd fcac 	bl	8007438 <HAL_RCC_GetPCLK2Freq>
 8009ae0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ae4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ae8:	461c      	mov	r4, r3
 8009aea:	f04f 0500 	mov.w	r5, #0
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	1891      	adds	r1, r2, r2
 8009af4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009af8:	415b      	adcs	r3, r3
 8009afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009afe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009b02:	1912      	adds	r2, r2, r4
 8009b04:	eb45 0303 	adc.w	r3, r5, r3
 8009b08:	f04f 0000 	mov.w	r0, #0
 8009b0c:	f04f 0100 	mov.w	r1, #0
 8009b10:	00d9      	lsls	r1, r3, #3
 8009b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b16:	00d0      	lsls	r0, r2, #3
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	1911      	adds	r1, r2, r4
 8009b1e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009b22:	416b      	adcs	r3, r5
 8009b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f04f 0300 	mov.w	r3, #0
 8009b34:	1891      	adds	r1, r2, r2
 8009b36:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009b3a:	415b      	adcs	r3, r3
 8009b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b40:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009b44:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009b48:	f7f7 f856 	bl	8000bf8 <__aeabi_uldivmod>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4bad      	ldr	r3, [pc, #692]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009b52:	fba3 2302 	umull	r2, r3, r3, r2
 8009b56:	095b      	lsrs	r3, r3, #5
 8009b58:	011e      	lsls	r6, r3, #4
 8009b5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b5e:	461c      	mov	r4, r3
 8009b60:	f04f 0500 	mov.w	r5, #0
 8009b64:	4622      	mov	r2, r4
 8009b66:	462b      	mov	r3, r5
 8009b68:	1891      	adds	r1, r2, r2
 8009b6a:	67b9      	str	r1, [r7, #120]	; 0x78
 8009b6c:	415b      	adcs	r3, r3
 8009b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b70:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009b74:	1912      	adds	r2, r2, r4
 8009b76:	eb45 0303 	adc.w	r3, r5, r3
 8009b7a:	f04f 0000 	mov.w	r0, #0
 8009b7e:	f04f 0100 	mov.w	r1, #0
 8009b82:	00d9      	lsls	r1, r3, #3
 8009b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b88:	00d0      	lsls	r0, r2, #3
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	1911      	adds	r1, r2, r4
 8009b90:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009b94:	416b      	adcs	r3, r5
 8009b96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	1891      	adds	r1, r2, r2
 8009ba8:	6739      	str	r1, [r7, #112]	; 0x70
 8009baa:	415b      	adcs	r3, r3
 8009bac:	677b      	str	r3, [r7, #116]	; 0x74
 8009bae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009bb2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009bb6:	f7f7 f81f 	bl	8000bf8 <__aeabi_uldivmod>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4b92      	ldr	r3, [pc, #584]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	2164      	movs	r1, #100	; 0x64
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	3332      	adds	r3, #50	; 0x32
 8009bd2:	4a8d      	ldr	r2, [pc, #564]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009be0:	441e      	add	r6, r3
 8009be2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f04f 0100 	mov.w	r1, #0
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	1894      	adds	r4, r2, r2
 8009bf2:	66bc      	str	r4, [r7, #104]	; 0x68
 8009bf4:	415b      	adcs	r3, r3
 8009bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bf8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009bfc:	1812      	adds	r2, r2, r0
 8009bfe:	eb41 0303 	adc.w	r3, r1, r3
 8009c02:	f04f 0400 	mov.w	r4, #0
 8009c06:	f04f 0500 	mov.w	r5, #0
 8009c0a:	00dd      	lsls	r5, r3, #3
 8009c0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c10:	00d4      	lsls	r4, r2, #3
 8009c12:	4622      	mov	r2, r4
 8009c14:	462b      	mov	r3, r5
 8009c16:	1814      	adds	r4, r2, r0
 8009c18:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009c1c:	414b      	adcs	r3, r1
 8009c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f04f 0300 	mov.w	r3, #0
 8009c2e:	1891      	adds	r1, r2, r2
 8009c30:	6639      	str	r1, [r7, #96]	; 0x60
 8009c32:	415b      	adcs	r3, r3
 8009c34:	667b      	str	r3, [r7, #100]	; 0x64
 8009c36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c3e:	f7f6 ffdb 	bl	8000bf8 <__aeabi_uldivmod>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4b70      	ldr	r3, [pc, #448]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009c48:	fba3 1302 	umull	r1, r3, r3, r2
 8009c4c:	095b      	lsrs	r3, r3, #5
 8009c4e:	2164      	movs	r1, #100	; 0x64
 8009c50:	fb01 f303 	mul.w	r3, r1, r3
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	3332      	adds	r3, #50	; 0x32
 8009c5a:	4a6b      	ldr	r2, [pc, #428]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	f003 0207 	and.w	r2, r3, #7
 8009c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4432      	add	r2, r6
 8009c6e:	609a      	str	r2, [r3, #8]
 8009c70:	e26d      	b.n	800a14e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c72:	f7fd fbcd 	bl	8007410 <HAL_RCC_GetPCLK1Freq>
 8009c76:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c7e:	461c      	mov	r4, r3
 8009c80:	f04f 0500 	mov.w	r5, #0
 8009c84:	4622      	mov	r2, r4
 8009c86:	462b      	mov	r3, r5
 8009c88:	1891      	adds	r1, r2, r2
 8009c8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c8c:	415b      	adcs	r3, r3
 8009c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c94:	1912      	adds	r2, r2, r4
 8009c96:	eb45 0303 	adc.w	r3, r5, r3
 8009c9a:	f04f 0000 	mov.w	r0, #0
 8009c9e:	f04f 0100 	mov.w	r1, #0
 8009ca2:	00d9      	lsls	r1, r3, #3
 8009ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ca8:	00d0      	lsls	r0, r2, #3
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	1911      	adds	r1, r2, r4
 8009cb0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009cb4:	416b      	adcs	r3, r5
 8009cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	1891      	adds	r1, r2, r2
 8009cc8:	6539      	str	r1, [r7, #80]	; 0x50
 8009cca:	415b      	adcs	r3, r3
 8009ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8009cce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009cd2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009cd6:	f7f6 ff8f 	bl	8000bf8 <__aeabi_uldivmod>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4b4a      	ldr	r3, [pc, #296]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8009ce4:	095b      	lsrs	r3, r3, #5
 8009ce6:	011e      	lsls	r6, r3, #4
 8009ce8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cec:	461c      	mov	r4, r3
 8009cee:	f04f 0500 	mov.w	r5, #0
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	1891      	adds	r1, r2, r2
 8009cf8:	64b9      	str	r1, [r7, #72]	; 0x48
 8009cfa:	415b      	adcs	r3, r3
 8009cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d02:	1912      	adds	r2, r2, r4
 8009d04:	eb45 0303 	adc.w	r3, r5, r3
 8009d08:	f04f 0000 	mov.w	r0, #0
 8009d0c:	f04f 0100 	mov.w	r1, #0
 8009d10:	00d9      	lsls	r1, r3, #3
 8009d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d16:	00d0      	lsls	r0, r2, #3
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	1911      	adds	r1, r2, r4
 8009d1e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009d22:	416b      	adcs	r3, r5
 8009d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f04f 0300 	mov.w	r3, #0
 8009d34:	1891      	adds	r1, r2, r2
 8009d36:	6439      	str	r1, [r7, #64]	; 0x40
 8009d38:	415b      	adcs	r3, r3
 8009d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d40:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009d44:	f7f6 ff58 	bl	8000bf8 <__aeabi_uldivmod>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4b2e      	ldr	r3, [pc, #184]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	2164      	movs	r1, #100	; 0x64
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	00db      	lsls	r3, r3, #3
 8009d5e:	3332      	adds	r3, #50	; 0x32
 8009d60:	4a29      	ldr	r2, [pc, #164]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009d62:	fba2 2303 	umull	r2, r3, r2, r3
 8009d66:	095b      	lsrs	r3, r3, #5
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d6e:	441e      	add	r6, r3
 8009d70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d74:	4618      	mov	r0, r3
 8009d76:	f04f 0100 	mov.w	r1, #0
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	1894      	adds	r4, r2, r2
 8009d80:	63bc      	str	r4, [r7, #56]	; 0x38
 8009d82:	415b      	adcs	r3, r3
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d8a:	1812      	adds	r2, r2, r0
 8009d8c:	eb41 0303 	adc.w	r3, r1, r3
 8009d90:	f04f 0400 	mov.w	r4, #0
 8009d94:	f04f 0500 	mov.w	r5, #0
 8009d98:	00dd      	lsls	r5, r3, #3
 8009d9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d9e:	00d4      	lsls	r4, r2, #3
 8009da0:	4622      	mov	r2, r4
 8009da2:	462b      	mov	r3, r5
 8009da4:	1814      	adds	r4, r2, r0
 8009da6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009daa:	414b      	adcs	r3, r1
 8009dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	461a      	mov	r2, r3
 8009db8:	f04f 0300 	mov.w	r3, #0
 8009dbc:	1891      	adds	r1, r2, r2
 8009dbe:	6339      	str	r1, [r7, #48]	; 0x30
 8009dc0:	415b      	adcs	r3, r3
 8009dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009dc8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009dcc:	f7f6 ff14 	bl	8000bf8 <__aeabi_uldivmod>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dda:	095b      	lsrs	r3, r3, #5
 8009ddc:	2164      	movs	r1, #100	; 0x64
 8009dde:	fb01 f303 	mul.w	r3, r1, r3
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	00db      	lsls	r3, r3, #3
 8009de6:	3332      	adds	r3, #50	; 0x32
 8009de8:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <UART_SetConfig+0x3dc>)
 8009dea:	fba2 2303 	umull	r2, r3, r2, r3
 8009dee:	095b      	lsrs	r3, r3, #5
 8009df0:	f003 0207 	and.w	r2, r3, #7
 8009df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4432      	add	r2, r6
 8009dfc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009dfe:	e1a6      	b.n	800a14e <UART_SetConfig+0x722>
 8009e00:	40011000 	.word	0x40011000
 8009e04:	40011400 	.word	0x40011400
 8009e08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4bd1      	ldr	r3, [pc, #836]	; (800a158 <UART_SetConfig+0x72c>)
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d006      	beq.n	8009e26 <UART_SetConfig+0x3fa>
 8009e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4bcf      	ldr	r3, [pc, #828]	; (800a15c <UART_SetConfig+0x730>)
 8009e20:	429a      	cmp	r2, r3
 8009e22:	f040 80ca 	bne.w	8009fba <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e26:	f7fd fb07 	bl	8007438 <HAL_RCC_GetPCLK2Freq>
 8009e2a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e32:	461c      	mov	r4, r3
 8009e34:	f04f 0500 	mov.w	r5, #0
 8009e38:	4622      	mov	r2, r4
 8009e3a:	462b      	mov	r3, r5
 8009e3c:	1891      	adds	r1, r2, r2
 8009e3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e40:	415b      	adcs	r3, r3
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e48:	1912      	adds	r2, r2, r4
 8009e4a:	eb45 0303 	adc.w	r3, r5, r3
 8009e4e:	f04f 0000 	mov.w	r0, #0
 8009e52:	f04f 0100 	mov.w	r1, #0
 8009e56:	00d9      	lsls	r1, r3, #3
 8009e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e5c:	00d0      	lsls	r0, r2, #3
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	eb12 0a04 	adds.w	sl, r2, r4
 8009e66:	eb43 0b05 	adc.w	fp, r3, r5
 8009e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f04f 0100 	mov.w	r1, #0
 8009e76:	f04f 0200 	mov.w	r2, #0
 8009e7a:	f04f 0300 	mov.w	r3, #0
 8009e7e:	008b      	lsls	r3, r1, #2
 8009e80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e84:	0082      	lsls	r2, r0, #2
 8009e86:	4650      	mov	r0, sl
 8009e88:	4659      	mov	r1, fp
 8009e8a:	f7f6 feb5 	bl	8000bf8 <__aeabi_uldivmod>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4bb3      	ldr	r3, [pc, #716]	; (800a160 <UART_SetConfig+0x734>)
 8009e94:	fba3 2302 	umull	r2, r3, r3, r2
 8009e98:	095b      	lsrs	r3, r3, #5
 8009e9a:	011e      	lsls	r6, r3, #4
 8009e9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f04f 0100 	mov.w	r1, #0
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	1894      	adds	r4, r2, r2
 8009eac:	623c      	str	r4, [r7, #32]
 8009eae:	415b      	adcs	r3, r3
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009eb6:	1812      	adds	r2, r2, r0
 8009eb8:	eb41 0303 	adc.w	r3, r1, r3
 8009ebc:	f04f 0400 	mov.w	r4, #0
 8009ec0:	f04f 0500 	mov.w	r5, #0
 8009ec4:	00dd      	lsls	r5, r3, #3
 8009ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009eca:	00d4      	lsls	r4, r2, #3
 8009ecc:	4622      	mov	r2, r4
 8009ece:	462b      	mov	r3, r5
 8009ed0:	1814      	adds	r4, r2, r0
 8009ed2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009ed6:	414b      	adcs	r3, r1
 8009ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f04f 0100 	mov.w	r1, #0
 8009ee8:	f04f 0200 	mov.w	r2, #0
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	008b      	lsls	r3, r1, #2
 8009ef2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ef6:	0082      	lsls	r2, r0, #2
 8009ef8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009efc:	f7f6 fe7c 	bl	8000bf8 <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4b96      	ldr	r3, [pc, #600]	; (800a160 <UART_SetConfig+0x734>)
 8009f06:	fba3 1302 	umull	r1, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	2164      	movs	r1, #100	; 0x64
 8009f0e:	fb01 f303 	mul.w	r3, r1, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	3332      	adds	r3, #50	; 0x32
 8009f18:	4a91      	ldr	r2, [pc, #580]	; (800a160 <UART_SetConfig+0x734>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f24:	441e      	add	r6, r3
 8009f26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f04f 0100 	mov.w	r1, #0
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	1894      	adds	r4, r2, r2
 8009f36:	61bc      	str	r4, [r7, #24]
 8009f38:	415b      	adcs	r3, r3
 8009f3a:	61fb      	str	r3, [r7, #28]
 8009f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f40:	1812      	adds	r2, r2, r0
 8009f42:	eb41 0303 	adc.w	r3, r1, r3
 8009f46:	f04f 0400 	mov.w	r4, #0
 8009f4a:	f04f 0500 	mov.w	r5, #0
 8009f4e:	00dd      	lsls	r5, r3, #3
 8009f50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f54:	00d4      	lsls	r4, r2, #3
 8009f56:	4622      	mov	r2, r4
 8009f58:	462b      	mov	r3, r5
 8009f5a:	1814      	adds	r4, r2, r0
 8009f5c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009f60:	414b      	adcs	r3, r1
 8009f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f04f 0100 	mov.w	r1, #0
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	008b      	lsls	r3, r1, #2
 8009f7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f80:	0082      	lsls	r2, r0, #2
 8009f82:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009f86:	f7f6 fe37 	bl	8000bf8 <__aeabi_uldivmod>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4b74      	ldr	r3, [pc, #464]	; (800a160 <UART_SetConfig+0x734>)
 8009f90:	fba3 1302 	umull	r1, r3, r3, r2
 8009f94:	095b      	lsrs	r3, r3, #5
 8009f96:	2164      	movs	r1, #100	; 0x64
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	3332      	adds	r3, #50	; 0x32
 8009fa2:	4a6f      	ldr	r2, [pc, #444]	; (800a160 <UART_SetConfig+0x734>)
 8009fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa8:	095b      	lsrs	r3, r3, #5
 8009faa:	f003 020f 	and.w	r2, r3, #15
 8009fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4432      	add	r2, r6
 8009fb6:	609a      	str	r2, [r3, #8]
 8009fb8:	e0c9      	b.n	800a14e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fba:	f7fd fa29 	bl	8007410 <HAL_RCC_GetPCLK1Freq>
 8009fbe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fc6:	461c      	mov	r4, r3
 8009fc8:	f04f 0500 	mov.w	r5, #0
 8009fcc:	4622      	mov	r2, r4
 8009fce:	462b      	mov	r3, r5
 8009fd0:	1891      	adds	r1, r2, r2
 8009fd2:	6139      	str	r1, [r7, #16]
 8009fd4:	415b      	adcs	r3, r3
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fdc:	1912      	adds	r2, r2, r4
 8009fde:	eb45 0303 	adc.w	r3, r5, r3
 8009fe2:	f04f 0000 	mov.w	r0, #0
 8009fe6:	f04f 0100 	mov.w	r1, #0
 8009fea:	00d9      	lsls	r1, r3, #3
 8009fec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ff0:	00d0      	lsls	r0, r2, #3
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	eb12 0804 	adds.w	r8, r2, r4
 8009ffa:	eb43 0905 	adc.w	r9, r3, r5
 8009ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	4618      	mov	r0, r3
 800a006:	f04f 0100 	mov.w	r1, #0
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	f04f 0300 	mov.w	r3, #0
 800a012:	008b      	lsls	r3, r1, #2
 800a014:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a018:	0082      	lsls	r2, r0, #2
 800a01a:	4640      	mov	r0, r8
 800a01c:	4649      	mov	r1, r9
 800a01e:	f7f6 fdeb 	bl	8000bf8 <__aeabi_uldivmod>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4b4e      	ldr	r3, [pc, #312]	; (800a160 <UART_SetConfig+0x734>)
 800a028:	fba3 2302 	umull	r2, r3, r3, r2
 800a02c:	095b      	lsrs	r3, r3, #5
 800a02e:	011e      	lsls	r6, r3, #4
 800a030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a034:	4618      	mov	r0, r3
 800a036:	f04f 0100 	mov.w	r1, #0
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	1894      	adds	r4, r2, r2
 800a040:	60bc      	str	r4, [r7, #8]
 800a042:	415b      	adcs	r3, r3
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a04a:	1812      	adds	r2, r2, r0
 800a04c:	eb41 0303 	adc.w	r3, r1, r3
 800a050:	f04f 0400 	mov.w	r4, #0
 800a054:	f04f 0500 	mov.w	r5, #0
 800a058:	00dd      	lsls	r5, r3, #3
 800a05a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a05e:	00d4      	lsls	r4, r2, #3
 800a060:	4622      	mov	r2, r4
 800a062:	462b      	mov	r3, r5
 800a064:	1814      	adds	r4, r2, r0
 800a066:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800a06a:	414b      	adcs	r3, r1
 800a06c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	4618      	mov	r0, r3
 800a078:	f04f 0100 	mov.w	r1, #0
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	f04f 0300 	mov.w	r3, #0
 800a084:	008b      	lsls	r3, r1, #2
 800a086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a08a:	0082      	lsls	r2, r0, #2
 800a08c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a090:	f7f6 fdb2 	bl	8000bf8 <__aeabi_uldivmod>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4b31      	ldr	r3, [pc, #196]	; (800a160 <UART_SetConfig+0x734>)
 800a09a:	fba3 1302 	umull	r1, r3, r3, r2
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	2164      	movs	r1, #100	; 0x64
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	011b      	lsls	r3, r3, #4
 800a0aa:	3332      	adds	r3, #50	; 0x32
 800a0ac:	4a2c      	ldr	r2, [pc, #176]	; (800a160 <UART_SetConfig+0x734>)
 800a0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b2:	095b      	lsrs	r3, r3, #5
 800a0b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0b8:	441e      	add	r6, r3
 800a0ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f04f 0100 	mov.w	r1, #0
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	1894      	adds	r4, r2, r2
 800a0ca:	603c      	str	r4, [r7, #0]
 800a0cc:	415b      	adcs	r3, r3
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d4:	1812      	adds	r2, r2, r0
 800a0d6:	eb41 0303 	adc.w	r3, r1, r3
 800a0da:	f04f 0400 	mov.w	r4, #0
 800a0de:	f04f 0500 	mov.w	r5, #0
 800a0e2:	00dd      	lsls	r5, r3, #3
 800a0e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a0e8:	00d4      	lsls	r4, r2, #3
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	1814      	adds	r4, r2, r0
 800a0f0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800a0f4:	414b      	adcs	r3, r1
 800a0f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	f04f 0100 	mov.w	r1, #0
 800a106:	f04f 0200 	mov.w	r2, #0
 800a10a:	f04f 0300 	mov.w	r3, #0
 800a10e:	008b      	lsls	r3, r1, #2
 800a110:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a114:	0082      	lsls	r2, r0, #2
 800a116:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a11a:	f7f6 fd6d 	bl	8000bf8 <__aeabi_uldivmod>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <UART_SetConfig+0x734>)
 800a124:	fba3 1302 	umull	r1, r3, r3, r2
 800a128:	095b      	lsrs	r3, r3, #5
 800a12a:	2164      	movs	r1, #100	; 0x64
 800a12c:	fb01 f303 	mul.w	r3, r1, r3
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	3332      	adds	r3, #50	; 0x32
 800a136:	4a0a      	ldr	r2, [pc, #40]	; (800a160 <UART_SetConfig+0x734>)
 800a138:	fba2 2303 	umull	r2, r3, r2, r3
 800a13c:	095b      	lsrs	r3, r3, #5
 800a13e:	f003 020f 	and.w	r2, r3, #15
 800a142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4432      	add	r2, r6
 800a14a:	609a      	str	r2, [r3, #8]
}
 800a14c:	e7ff      	b.n	800a14e <UART_SetConfig+0x722>
 800a14e:	bf00      	nop
 800a150:	37f4      	adds	r7, #244	; 0xf4
 800a152:	46bd      	mov	sp, r7
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	40011000 	.word	0x40011000
 800a15c:	40011400 	.word	0x40011400
 800a160:	51eb851f 	.word	0x51eb851f

0800a164 <__errno>:
 800a164:	4b01      	ldr	r3, [pc, #4]	; (800a16c <__errno+0x8>)
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20000138 	.word	0x20000138

0800a170 <__libc_init_array>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	4d0d      	ldr	r5, [pc, #52]	; (800a1a8 <__libc_init_array+0x38>)
 800a174:	4c0d      	ldr	r4, [pc, #52]	; (800a1ac <__libc_init_array+0x3c>)
 800a176:	1b64      	subs	r4, r4, r5
 800a178:	10a4      	asrs	r4, r4, #2
 800a17a:	2600      	movs	r6, #0
 800a17c:	42a6      	cmp	r6, r4
 800a17e:	d109      	bne.n	800a194 <__libc_init_array+0x24>
 800a180:	4d0b      	ldr	r5, [pc, #44]	; (800a1b0 <__libc_init_array+0x40>)
 800a182:	4c0c      	ldr	r4, [pc, #48]	; (800a1b4 <__libc_init_array+0x44>)
 800a184:	f002 fd0e 	bl	800cba4 <_init>
 800a188:	1b64      	subs	r4, r4, r5
 800a18a:	10a4      	asrs	r4, r4, #2
 800a18c:	2600      	movs	r6, #0
 800a18e:	42a6      	cmp	r6, r4
 800a190:	d105      	bne.n	800a19e <__libc_init_array+0x2e>
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	f855 3b04 	ldr.w	r3, [r5], #4
 800a198:	4798      	blx	r3
 800a19a:	3601      	adds	r6, #1
 800a19c:	e7ee      	b.n	800a17c <__libc_init_array+0xc>
 800a19e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a2:	4798      	blx	r3
 800a1a4:	3601      	adds	r6, #1
 800a1a6:	e7f2      	b.n	800a18e <__libc_init_array+0x1e>
 800a1a8:	0800ce90 	.word	0x0800ce90
 800a1ac:	0800ce90 	.word	0x0800ce90
 800a1b0:	0800ce90 	.word	0x0800ce90
 800a1b4:	0800ce94 	.word	0x0800ce94

0800a1b8 <memset>:
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d100      	bne.n	800a1c2 <memset+0xa>
 800a1c0:	4770      	bx	lr
 800a1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c6:	e7f9      	b.n	800a1bc <memset+0x4>

0800a1c8 <atan>:
 800a1c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	ec55 4b10 	vmov	r4, r5, d0
 800a1d0:	4bc3      	ldr	r3, [pc, #780]	; (800a4e0 <atan+0x318>)
 800a1d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a1d6:	429e      	cmp	r6, r3
 800a1d8:	46ab      	mov	fp, r5
 800a1da:	dd18      	ble.n	800a20e <atan+0x46>
 800a1dc:	4bc1      	ldr	r3, [pc, #772]	; (800a4e4 <atan+0x31c>)
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	dc01      	bgt.n	800a1e6 <atan+0x1e>
 800a1e2:	d109      	bne.n	800a1f8 <atan+0x30>
 800a1e4:	b144      	cbz	r4, 800a1f8 <atan+0x30>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	f7f6 f805 	bl	80001fc <__adddf3>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	e006      	b.n	800a206 <atan+0x3e>
 800a1f8:	f1bb 0f00 	cmp.w	fp, #0
 800a1fc:	f300 8131 	bgt.w	800a462 <atan+0x29a>
 800a200:	a59b      	add	r5, pc, #620	; (adr r5, 800a470 <atan+0x2a8>)
 800a202:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a206:	ec45 4b10 	vmov	d0, r4, r5
 800a20a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	4bb6      	ldr	r3, [pc, #728]	; (800a4e8 <atan+0x320>)
 800a210:	429e      	cmp	r6, r3
 800a212:	dc14      	bgt.n	800a23e <atan+0x76>
 800a214:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a218:	429e      	cmp	r6, r3
 800a21a:	dc0d      	bgt.n	800a238 <atan+0x70>
 800a21c:	a396      	add	r3, pc, #600	; (adr r3, 800a478 <atan+0x2b0>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	ee10 0a10 	vmov	r0, s0
 800a226:	4629      	mov	r1, r5
 800a228:	f7f5 ffe8 	bl	80001fc <__adddf3>
 800a22c:	4baf      	ldr	r3, [pc, #700]	; (800a4ec <atan+0x324>)
 800a22e:	2200      	movs	r2, #0
 800a230:	f7f6 fc2a 	bl	8000a88 <__aeabi_dcmpgt>
 800a234:	2800      	cmp	r0, #0
 800a236:	d1e6      	bne.n	800a206 <atan+0x3e>
 800a238:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a23c:	e02b      	b.n	800a296 <atan+0xce>
 800a23e:	f000 f9b3 	bl	800a5a8 <fabs>
 800a242:	4bab      	ldr	r3, [pc, #684]	; (800a4f0 <atan+0x328>)
 800a244:	429e      	cmp	r6, r3
 800a246:	ec55 4b10 	vmov	r4, r5, d0
 800a24a:	f300 80bf 	bgt.w	800a3cc <atan+0x204>
 800a24e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a252:	429e      	cmp	r6, r3
 800a254:	f300 80a0 	bgt.w	800a398 <atan+0x1d0>
 800a258:	ee10 2a10 	vmov	r2, s0
 800a25c:	ee10 0a10 	vmov	r0, s0
 800a260:	462b      	mov	r3, r5
 800a262:	4629      	mov	r1, r5
 800a264:	f7f5 ffca 	bl	80001fc <__adddf3>
 800a268:	4ba0      	ldr	r3, [pc, #640]	; (800a4ec <atan+0x324>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	f7f5 ffc4 	bl	80001f8 <__aeabi_dsub>
 800a270:	2200      	movs	r2, #0
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a27a:	4620      	mov	r0, r4
 800a27c:	4629      	mov	r1, r5
 800a27e:	f7f5 ffbd 	bl	80001fc <__adddf3>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f6 fa97 	bl	80007bc <__aeabi_ddiv>
 800a28e:	f04f 0a00 	mov.w	sl, #0
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	4620      	mov	r0, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7f6 f963 	bl	8000568 <__aeabi_dmul>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	f7f6 f95d 	bl	8000568 <__aeabi_dmul>
 800a2ae:	a374      	add	r3, pc, #464	; (adr r3, 800a480 <atan+0x2b8>)
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	f7f6 f956 	bl	8000568 <__aeabi_dmul>
 800a2bc:	a372      	add	r3, pc, #456	; (adr r3, 800a488 <atan+0x2c0>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f5 ff9b 	bl	80001fc <__adddf3>
 800a2c6:	4632      	mov	r2, r6
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	f7f6 f94d 	bl	8000568 <__aeabi_dmul>
 800a2ce:	a370      	add	r3, pc, #448	; (adr r3, 800a490 <atan+0x2c8>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f5 ff92 	bl	80001fc <__adddf3>
 800a2d8:	4632      	mov	r2, r6
 800a2da:	463b      	mov	r3, r7
 800a2dc:	f7f6 f944 	bl	8000568 <__aeabi_dmul>
 800a2e0:	a36d      	add	r3, pc, #436	; (adr r3, 800a498 <atan+0x2d0>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f5 ff89 	bl	80001fc <__adddf3>
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	463b      	mov	r3, r7
 800a2ee:	f7f6 f93b 	bl	8000568 <__aeabi_dmul>
 800a2f2:	a36b      	add	r3, pc, #428	; (adr r3, 800a4a0 <atan+0x2d8>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f5 ff80 	bl	80001fc <__adddf3>
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	463b      	mov	r3, r7
 800a300:	f7f6 f932 	bl	8000568 <__aeabi_dmul>
 800a304:	a368      	add	r3, pc, #416	; (adr r3, 800a4a8 <atan+0x2e0>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ff77 	bl	80001fc <__adddf3>
 800a30e:	4642      	mov	r2, r8
 800a310:	464b      	mov	r3, r9
 800a312:	f7f6 f929 	bl	8000568 <__aeabi_dmul>
 800a316:	a366      	add	r3, pc, #408	; (adr r3, 800a4b0 <atan+0x2e8>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f6 f920 	bl	8000568 <__aeabi_dmul>
 800a328:	a363      	add	r3, pc, #396	; (adr r3, 800a4b8 <atan+0x2f0>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f5 ff63 	bl	80001f8 <__aeabi_dsub>
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	f7f6 f917 	bl	8000568 <__aeabi_dmul>
 800a33a:	a361      	add	r3, pc, #388	; (adr r3, 800a4c0 <atan+0x2f8>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f5 ff5a 	bl	80001f8 <__aeabi_dsub>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	f7f6 f90e 	bl	8000568 <__aeabi_dmul>
 800a34c:	a35e      	add	r3, pc, #376	; (adr r3, 800a4c8 <atan+0x300>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ff51 	bl	80001f8 <__aeabi_dsub>
 800a356:	4632      	mov	r2, r6
 800a358:	463b      	mov	r3, r7
 800a35a:	f7f6 f905 	bl	8000568 <__aeabi_dmul>
 800a35e:	a35c      	add	r3, pc, #368	; (adr r3, 800a4d0 <atan+0x308>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f5 ff48 	bl	80001f8 <__aeabi_dsub>
 800a368:	4632      	mov	r2, r6
 800a36a:	463b      	mov	r3, r7
 800a36c:	f7f6 f8fc 	bl	8000568 <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4640      	mov	r0, r8
 800a376:	4649      	mov	r1, r9
 800a378:	f7f5 ff40 	bl	80001fc <__adddf3>
 800a37c:	4622      	mov	r2, r4
 800a37e:	462b      	mov	r3, r5
 800a380:	f7f6 f8f2 	bl	8000568 <__aeabi_dmul>
 800a384:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	d14b      	bne.n	800a426 <atan+0x25e>
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff31 	bl	80001f8 <__aeabi_dsub>
 800a396:	e72c      	b.n	800a1f2 <atan+0x2a>
 800a398:	ee10 0a10 	vmov	r0, s0
 800a39c:	4b53      	ldr	r3, [pc, #332]	; (800a4ec <atan+0x324>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7f5 ff29 	bl	80001f8 <__aeabi_dsub>
 800a3a6:	4b51      	ldr	r3, [pc, #324]	; (800a4ec <atan+0x324>)
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f5 ff23 	bl	80001fc <__adddf3>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	f7f6 f9fd 	bl	80007bc <__aeabi_ddiv>
 800a3c2:	f04f 0a01 	mov.w	sl, #1
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	e764      	b.n	800a296 <atan+0xce>
 800a3cc:	4b49      	ldr	r3, [pc, #292]	; (800a4f4 <atan+0x32c>)
 800a3ce:	429e      	cmp	r6, r3
 800a3d0:	da1d      	bge.n	800a40e <atan+0x246>
 800a3d2:	ee10 0a10 	vmov	r0, s0
 800a3d6:	4b48      	ldr	r3, [pc, #288]	; (800a4f8 <atan+0x330>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7f5 ff0c 	bl	80001f8 <__aeabi_dsub>
 800a3e0:	4b45      	ldr	r3, [pc, #276]	; (800a4f8 <atan+0x330>)
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460f      	mov	r7, r1
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f6 f8bc 	bl	8000568 <__aeabi_dmul>
 800a3f0:	4b3e      	ldr	r3, [pc, #248]	; (800a4ec <atan+0x324>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f7f5 ff02 	bl	80001fc <__adddf3>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4639      	mov	r1, r7
 800a400:	f7f6 f9dc 	bl	80007bc <__aeabi_ddiv>
 800a404:	f04f 0a02 	mov.w	sl, #2
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	e743      	b.n	800a296 <atan+0xce>
 800a40e:	462b      	mov	r3, r5
 800a410:	ee10 2a10 	vmov	r2, s0
 800a414:	4939      	ldr	r1, [pc, #228]	; (800a4fc <atan+0x334>)
 800a416:	2000      	movs	r0, #0
 800a418:	f7f6 f9d0 	bl	80007bc <__aeabi_ddiv>
 800a41c:	f04f 0a03 	mov.w	sl, #3
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	e737      	b.n	800a296 <atan+0xce>
 800a426:	4b36      	ldr	r3, [pc, #216]	; (800a500 <atan+0x338>)
 800a428:	4e36      	ldr	r6, [pc, #216]	; (800a504 <atan+0x33c>)
 800a42a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a42e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a432:	e9da 2300 	ldrd	r2, r3, [sl]
 800a436:	f7f5 fedf 	bl	80001f8 <__aeabi_dsub>
 800a43a:	4622      	mov	r2, r4
 800a43c:	462b      	mov	r3, r5
 800a43e:	f7f5 fedb 	bl	80001f8 <__aeabi_dsub>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a44a:	f7f5 fed5 	bl	80001f8 <__aeabi_dsub>
 800a44e:	f1bb 0f00 	cmp.w	fp, #0
 800a452:	4604      	mov	r4, r0
 800a454:	460d      	mov	r5, r1
 800a456:	f6bf aed6 	bge.w	800a206 <atan+0x3e>
 800a45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a45e:	461d      	mov	r5, r3
 800a460:	e6d1      	b.n	800a206 <atan+0x3e>
 800a462:	a51d      	add	r5, pc, #116	; (adr r5, 800a4d8 <atan+0x310>)
 800a464:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a468:	e6cd      	b.n	800a206 <atan+0x3e>
 800a46a:	bf00      	nop
 800a46c:	f3af 8000 	nop.w
 800a470:	54442d18 	.word	0x54442d18
 800a474:	bff921fb 	.word	0xbff921fb
 800a478:	8800759c 	.word	0x8800759c
 800a47c:	7e37e43c 	.word	0x7e37e43c
 800a480:	e322da11 	.word	0xe322da11
 800a484:	3f90ad3a 	.word	0x3f90ad3a
 800a488:	24760deb 	.word	0x24760deb
 800a48c:	3fa97b4b 	.word	0x3fa97b4b
 800a490:	a0d03d51 	.word	0xa0d03d51
 800a494:	3fb10d66 	.word	0x3fb10d66
 800a498:	c54c206e 	.word	0xc54c206e
 800a49c:	3fb745cd 	.word	0x3fb745cd
 800a4a0:	920083ff 	.word	0x920083ff
 800a4a4:	3fc24924 	.word	0x3fc24924
 800a4a8:	5555550d 	.word	0x5555550d
 800a4ac:	3fd55555 	.word	0x3fd55555
 800a4b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4b4:	bfa2b444 	.word	0xbfa2b444
 800a4b8:	52defd9a 	.word	0x52defd9a
 800a4bc:	3fadde2d 	.word	0x3fadde2d
 800a4c0:	af749a6d 	.word	0xaf749a6d
 800a4c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a4c8:	fe231671 	.word	0xfe231671
 800a4cc:	3fbc71c6 	.word	0x3fbc71c6
 800a4d0:	9998ebc4 	.word	0x9998ebc4
 800a4d4:	3fc99999 	.word	0x3fc99999
 800a4d8:	54442d18 	.word	0x54442d18
 800a4dc:	3ff921fb 	.word	0x3ff921fb
 800a4e0:	440fffff 	.word	0x440fffff
 800a4e4:	7ff00000 	.word	0x7ff00000
 800a4e8:	3fdbffff 	.word	0x3fdbffff
 800a4ec:	3ff00000 	.word	0x3ff00000
 800a4f0:	3ff2ffff 	.word	0x3ff2ffff
 800a4f4:	40038000 	.word	0x40038000
 800a4f8:	3ff80000 	.word	0x3ff80000
 800a4fc:	bff00000 	.word	0xbff00000
 800a500:	0800cc18 	.word	0x0800cc18
 800a504:	0800cbf8 	.word	0x0800cbf8

0800a508 <cos>:
 800a508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50a:	ec53 2b10 	vmov	r2, r3, d0
 800a50e:	4824      	ldr	r0, [pc, #144]	; (800a5a0 <cos+0x98>)
 800a510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a514:	4281      	cmp	r1, r0
 800a516:	dc06      	bgt.n	800a526 <cos+0x1e>
 800a518:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a598 <cos+0x90>
 800a51c:	f001 fcd4 	bl	800bec8 <__kernel_cos>
 800a520:	ec51 0b10 	vmov	r0, r1, d0
 800a524:	e007      	b.n	800a536 <cos+0x2e>
 800a526:	481f      	ldr	r0, [pc, #124]	; (800a5a4 <cos+0x9c>)
 800a528:	4281      	cmp	r1, r0
 800a52a:	dd09      	ble.n	800a540 <cos+0x38>
 800a52c:	ee10 0a10 	vmov	r0, s0
 800a530:	4619      	mov	r1, r3
 800a532:	f7f5 fe61 	bl	80001f8 <__aeabi_dsub>
 800a536:	ec41 0b10 	vmov	d0, r0, r1
 800a53a:	b005      	add	sp, #20
 800a53c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a540:	4668      	mov	r0, sp
 800a542:	f001 fa01 	bl	800b948 <__ieee754_rem_pio2>
 800a546:	f000 0003 	and.w	r0, r0, #3
 800a54a:	2801      	cmp	r0, #1
 800a54c:	d007      	beq.n	800a55e <cos+0x56>
 800a54e:	2802      	cmp	r0, #2
 800a550:	d012      	beq.n	800a578 <cos+0x70>
 800a552:	b9c0      	cbnz	r0, 800a586 <cos+0x7e>
 800a554:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a558:	ed9d 0b00 	vldr	d0, [sp]
 800a55c:	e7de      	b.n	800a51c <cos+0x14>
 800a55e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a562:	ed9d 0b00 	vldr	d0, [sp]
 800a566:	f002 f8b7 	bl	800c6d8 <__kernel_sin>
 800a56a:	ec53 2b10 	vmov	r2, r3, d0
 800a56e:	ee10 0a10 	vmov	r0, s0
 800a572:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a576:	e7de      	b.n	800a536 <cos+0x2e>
 800a578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a57c:	ed9d 0b00 	vldr	d0, [sp]
 800a580:	f001 fca2 	bl	800bec8 <__kernel_cos>
 800a584:	e7f1      	b.n	800a56a <cos+0x62>
 800a586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a58a:	ed9d 0b00 	vldr	d0, [sp]
 800a58e:	2001      	movs	r0, #1
 800a590:	f002 f8a2 	bl	800c6d8 <__kernel_sin>
 800a594:	e7c4      	b.n	800a520 <cos+0x18>
 800a596:	bf00      	nop
	...
 800a5a0:	3fe921fb 	.word	0x3fe921fb
 800a5a4:	7fefffff 	.word	0x7fefffff

0800a5a8 <fabs>:
 800a5a8:	ec51 0b10 	vmov	r0, r1, d0
 800a5ac:	ee10 2a10 	vmov	r2, s0
 800a5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5b4:	ec43 2b10 	vmov	d0, r2, r3
 800a5b8:	4770      	bx	lr
 800a5ba:	0000      	movs	r0, r0
 800a5bc:	0000      	movs	r0, r0
	...

0800a5c0 <sin>:
 800a5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5c2:	ec53 2b10 	vmov	r2, r3, d0
 800a5c6:	4826      	ldr	r0, [pc, #152]	; (800a660 <sin+0xa0>)
 800a5c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5cc:	4281      	cmp	r1, r0
 800a5ce:	dc07      	bgt.n	800a5e0 <sin+0x20>
 800a5d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a658 <sin+0x98>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	f002 f87f 	bl	800c6d8 <__kernel_sin>
 800a5da:	ec51 0b10 	vmov	r0, r1, d0
 800a5de:	e007      	b.n	800a5f0 <sin+0x30>
 800a5e0:	4820      	ldr	r0, [pc, #128]	; (800a664 <sin+0xa4>)
 800a5e2:	4281      	cmp	r1, r0
 800a5e4:	dd09      	ble.n	800a5fa <sin+0x3a>
 800a5e6:	ee10 0a10 	vmov	r0, s0
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	f7f5 fe04 	bl	80001f8 <__aeabi_dsub>
 800a5f0:	ec41 0b10 	vmov	d0, r0, r1
 800a5f4:	b005      	add	sp, #20
 800a5f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5fa:	4668      	mov	r0, sp
 800a5fc:	f001 f9a4 	bl	800b948 <__ieee754_rem_pio2>
 800a600:	f000 0003 	and.w	r0, r0, #3
 800a604:	2801      	cmp	r0, #1
 800a606:	d008      	beq.n	800a61a <sin+0x5a>
 800a608:	2802      	cmp	r0, #2
 800a60a:	d00d      	beq.n	800a628 <sin+0x68>
 800a60c:	b9d0      	cbnz	r0, 800a644 <sin+0x84>
 800a60e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a612:	ed9d 0b00 	vldr	d0, [sp]
 800a616:	2001      	movs	r0, #1
 800a618:	e7dd      	b.n	800a5d6 <sin+0x16>
 800a61a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a61e:	ed9d 0b00 	vldr	d0, [sp]
 800a622:	f001 fc51 	bl	800bec8 <__kernel_cos>
 800a626:	e7d8      	b.n	800a5da <sin+0x1a>
 800a628:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a62c:	ed9d 0b00 	vldr	d0, [sp]
 800a630:	2001      	movs	r0, #1
 800a632:	f002 f851 	bl	800c6d8 <__kernel_sin>
 800a636:	ec53 2b10 	vmov	r2, r3, d0
 800a63a:	ee10 0a10 	vmov	r0, s0
 800a63e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a642:	e7d5      	b.n	800a5f0 <sin+0x30>
 800a644:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a648:	ed9d 0b00 	vldr	d0, [sp]
 800a64c:	f001 fc3c 	bl	800bec8 <__kernel_cos>
 800a650:	e7f1      	b.n	800a636 <sin+0x76>
 800a652:	bf00      	nop
 800a654:	f3af 8000 	nop.w
	...
 800a660:	3fe921fb 	.word	0x3fe921fb
 800a664:	7fefffff 	.word	0x7fefffff

0800a668 <acos>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	ed2d 8b02 	vpush	{d8}
 800a66e:	ec55 4b10 	vmov	r4, r5, d0
 800a672:	f000 f919 	bl	800a8a8 <__ieee754_acos>
 800a676:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <acos+0x68>)
 800a678:	eeb0 8a40 	vmov.f32	s16, s0
 800a67c:	eef0 8a60 	vmov.f32	s17, s1
 800a680:	f993 3000 	ldrsb.w	r3, [r3]
 800a684:	3301      	adds	r3, #1
 800a686:	d01c      	beq.n	800a6c2 <acos+0x5a>
 800a688:	4622      	mov	r2, r4
 800a68a:	462b      	mov	r3, r5
 800a68c:	4620      	mov	r0, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	f7f6 fa04 	bl	8000a9c <__aeabi_dcmpun>
 800a694:	b9a8      	cbnz	r0, 800a6c2 <acos+0x5a>
 800a696:	ec45 4b10 	vmov	d0, r4, r5
 800a69a:	f7ff ff85 	bl	800a5a8 <fabs>
 800a69e:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <acos+0x6c>)
 800a6a0:	ec51 0b10 	vmov	r0, r1, d0
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f7f6 f9ef 	bl	8000a88 <__aeabi_dcmpgt>
 800a6aa:	b150      	cbz	r0, 800a6c2 <acos+0x5a>
 800a6ac:	f7ff fd5a 	bl	800a164 <__errno>
 800a6b0:	ecbd 8b02 	vpop	{d8}
 800a6b4:	2321      	movs	r3, #33	; 0x21
 800a6b6:	6003      	str	r3, [r0, #0]
 800a6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6bc:	4806      	ldr	r0, [pc, #24]	; (800a6d8 <acos+0x70>)
 800a6be:	f002 b957 	b.w	800c970 <nan>
 800a6c2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6c6:	eef0 0a68 	vmov.f32	s1, s17
 800a6ca:	ecbd 8b02 	vpop	{d8}
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	2000019c 	.word	0x2000019c
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	0800cc38 	.word	0x0800cc38

0800a6dc <atan2>:
 800a6dc:	f000 bb44 	b.w	800ad68 <__ieee754_atan2>

0800a6e0 <pow>:
 800a6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	ec59 8b10 	vmov	r8, r9, d0
 800a6e8:	ec57 6b11 	vmov	r6, r7, d1
 800a6ec:	f000 fc08 	bl	800af00 <__ieee754_pow>
 800a6f0:	4b4e      	ldr	r3, [pc, #312]	; (800a82c <pow+0x14c>)
 800a6f2:	f993 3000 	ldrsb.w	r3, [r3]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	ec55 4b10 	vmov	r4, r5, d0
 800a6fc:	d015      	beq.n	800a72a <pow+0x4a>
 800a6fe:	4632      	mov	r2, r6
 800a700:	463b      	mov	r3, r7
 800a702:	4630      	mov	r0, r6
 800a704:	4639      	mov	r1, r7
 800a706:	f7f6 f9c9 	bl	8000a9c <__aeabi_dcmpun>
 800a70a:	b970      	cbnz	r0, 800a72a <pow+0x4a>
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f6 f9c2 	bl	8000a9c <__aeabi_dcmpun>
 800a718:	2200      	movs	r2, #0
 800a71a:	2300      	movs	r3, #0
 800a71c:	b148      	cbz	r0, 800a732 <pow+0x52>
 800a71e:	4630      	mov	r0, r6
 800a720:	4639      	mov	r1, r7
 800a722:	f7f6 f989 	bl	8000a38 <__aeabi_dcmpeq>
 800a726:	2800      	cmp	r0, #0
 800a728:	d17d      	bne.n	800a826 <pow+0x146>
 800a72a:	ec45 4b10 	vmov	d0, r4, r5
 800a72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f6 f97f 	bl	8000a38 <__aeabi_dcmpeq>
 800a73a:	b1e0      	cbz	r0, 800a776 <pow+0x96>
 800a73c:	2200      	movs	r2, #0
 800a73e:	2300      	movs	r3, #0
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f978 	bl	8000a38 <__aeabi_dcmpeq>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d16c      	bne.n	800a826 <pow+0x146>
 800a74c:	ec47 6b10 	vmov	d0, r6, r7
 800a750:	f002 f880 	bl	800c854 <finite>
 800a754:	2800      	cmp	r0, #0
 800a756:	d0e8      	beq.n	800a72a <pow+0x4a>
 800a758:	2200      	movs	r2, #0
 800a75a:	2300      	movs	r3, #0
 800a75c:	4630      	mov	r0, r6
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f6 f974 	bl	8000a4c <__aeabi_dcmplt>
 800a764:	2800      	cmp	r0, #0
 800a766:	d0e0      	beq.n	800a72a <pow+0x4a>
 800a768:	f7ff fcfc 	bl	800a164 <__errno>
 800a76c:	2321      	movs	r3, #33	; 0x21
 800a76e:	6003      	str	r3, [r0, #0]
 800a770:	2400      	movs	r4, #0
 800a772:	4d2f      	ldr	r5, [pc, #188]	; (800a830 <pow+0x150>)
 800a774:	e7d9      	b.n	800a72a <pow+0x4a>
 800a776:	ec45 4b10 	vmov	d0, r4, r5
 800a77a:	f002 f86b 	bl	800c854 <finite>
 800a77e:	bbb8      	cbnz	r0, 800a7f0 <pow+0x110>
 800a780:	ec49 8b10 	vmov	d0, r8, r9
 800a784:	f002 f866 	bl	800c854 <finite>
 800a788:	b390      	cbz	r0, 800a7f0 <pow+0x110>
 800a78a:	ec47 6b10 	vmov	d0, r6, r7
 800a78e:	f002 f861 	bl	800c854 <finite>
 800a792:	b368      	cbz	r0, 800a7f0 <pow+0x110>
 800a794:	4622      	mov	r2, r4
 800a796:	462b      	mov	r3, r5
 800a798:	4620      	mov	r0, r4
 800a79a:	4629      	mov	r1, r5
 800a79c:	f7f6 f97e 	bl	8000a9c <__aeabi_dcmpun>
 800a7a0:	b160      	cbz	r0, 800a7bc <pow+0xdc>
 800a7a2:	f7ff fcdf 	bl	800a164 <__errno>
 800a7a6:	2321      	movs	r3, #33	; 0x21
 800a7a8:	6003      	str	r3, [r0, #0]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f7f6 f803 	bl	80007bc <__aeabi_ddiv>
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	460d      	mov	r5, r1
 800a7ba:	e7b6      	b.n	800a72a <pow+0x4a>
 800a7bc:	f7ff fcd2 	bl	800a164 <__errno>
 800a7c0:	2322      	movs	r3, #34	; 0x22
 800a7c2:	6003      	str	r3, [r0, #0]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f6 f93e 	bl	8000a4c <__aeabi_dcmplt>
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	b158      	cbz	r0, 800a7ec <pow+0x10c>
 800a7d4:	ec47 6b10 	vmov	d0, r6, r7
 800a7d8:	f002 f8d2 	bl	800c980 <rint>
 800a7dc:	4632      	mov	r2, r6
 800a7de:	ec51 0b10 	vmov	r0, r1, d0
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	f7f6 f928 	bl	8000a38 <__aeabi_dcmpeq>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d0c2      	beq.n	800a772 <pow+0x92>
 800a7ec:	4d11      	ldr	r5, [pc, #68]	; (800a834 <pow+0x154>)
 800a7ee:	e79c      	b.n	800a72a <pow+0x4a>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	f7f6 f91e 	bl	8000a38 <__aeabi_dcmpeq>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d094      	beq.n	800a72a <pow+0x4a>
 800a800:	ec49 8b10 	vmov	d0, r8, r9
 800a804:	f002 f826 	bl	800c854 <finite>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d08e      	beq.n	800a72a <pow+0x4a>
 800a80c:	ec47 6b10 	vmov	d0, r6, r7
 800a810:	f002 f820 	bl	800c854 <finite>
 800a814:	2800      	cmp	r0, #0
 800a816:	d088      	beq.n	800a72a <pow+0x4a>
 800a818:	f7ff fca4 	bl	800a164 <__errno>
 800a81c:	2322      	movs	r3, #34	; 0x22
 800a81e:	6003      	str	r3, [r0, #0]
 800a820:	2400      	movs	r4, #0
 800a822:	2500      	movs	r5, #0
 800a824:	e781      	b.n	800a72a <pow+0x4a>
 800a826:	4d04      	ldr	r5, [pc, #16]	; (800a838 <pow+0x158>)
 800a828:	2400      	movs	r4, #0
 800a82a:	e77e      	b.n	800a72a <pow+0x4a>
 800a82c:	2000019c 	.word	0x2000019c
 800a830:	fff00000 	.word	0xfff00000
 800a834:	7ff00000 	.word	0x7ff00000
 800a838:	3ff00000 	.word	0x3ff00000

0800a83c <sqrt>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	ed2d 8b02 	vpush	{d8}
 800a842:	ec55 4b10 	vmov	r4, r5, d0
 800a846:	f001 fa89 	bl	800bd5c <__ieee754_sqrt>
 800a84a:	4b15      	ldr	r3, [pc, #84]	; (800a8a0 <sqrt+0x64>)
 800a84c:	eeb0 8a40 	vmov.f32	s16, s0
 800a850:	eef0 8a60 	vmov.f32	s17, s1
 800a854:	f993 3000 	ldrsb.w	r3, [r3]
 800a858:	3301      	adds	r3, #1
 800a85a:	d019      	beq.n	800a890 <sqrt+0x54>
 800a85c:	4622      	mov	r2, r4
 800a85e:	462b      	mov	r3, r5
 800a860:	4620      	mov	r0, r4
 800a862:	4629      	mov	r1, r5
 800a864:	f7f6 f91a 	bl	8000a9c <__aeabi_dcmpun>
 800a868:	b990      	cbnz	r0, 800a890 <sqrt+0x54>
 800a86a:	2200      	movs	r2, #0
 800a86c:	2300      	movs	r3, #0
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f6 f8eb 	bl	8000a4c <__aeabi_dcmplt>
 800a876:	b158      	cbz	r0, 800a890 <sqrt+0x54>
 800a878:	f7ff fc74 	bl	800a164 <__errno>
 800a87c:	2321      	movs	r3, #33	; 0x21
 800a87e:	6003      	str	r3, [r0, #0]
 800a880:	2200      	movs	r2, #0
 800a882:	2300      	movs	r3, #0
 800a884:	4610      	mov	r0, r2
 800a886:	4619      	mov	r1, r3
 800a888:	f7f5 ff98 	bl	80007bc <__aeabi_ddiv>
 800a88c:	ec41 0b18 	vmov	d8, r0, r1
 800a890:	eeb0 0a48 	vmov.f32	s0, s16
 800a894:	eef0 0a68 	vmov.f32	s1, s17
 800a898:	ecbd 8b02 	vpop	{d8}
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	bf00      	nop
 800a8a0:	2000019c 	.word	0x2000019c
 800a8a4:	00000000 	.word	0x00000000

0800a8a8 <__ieee754_acos>:
 800a8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	ec55 4b10 	vmov	r4, r5, d0
 800a8b0:	49b7      	ldr	r1, [pc, #732]	; (800ab90 <__ieee754_acos+0x2e8>)
 800a8b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8b6:	428b      	cmp	r3, r1
 800a8b8:	dd1b      	ble.n	800a8f2 <__ieee754_acos+0x4a>
 800a8ba:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a8be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a8c2:	4323      	orrs	r3, r4
 800a8c4:	d106      	bne.n	800a8d4 <__ieee754_acos+0x2c>
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	f300 8211 	bgt.w	800acee <__ieee754_acos+0x446>
 800a8cc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800ab28 <__ieee754_acos+0x280>
 800a8d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	ee10 2a10 	vmov	r2, s0
 800a8d8:	462b      	mov	r3, r5
 800a8da:	ee10 0a10 	vmov	r0, s0
 800a8de:	4629      	mov	r1, r5
 800a8e0:	f7f5 fc8a 	bl	80001f8 <__aeabi_dsub>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	f7f5 ff68 	bl	80007bc <__aeabi_ddiv>
 800a8ec:	ec41 0b10 	vmov	d0, r0, r1
 800a8f0:	e7ee      	b.n	800a8d0 <__ieee754_acos+0x28>
 800a8f2:	49a8      	ldr	r1, [pc, #672]	; (800ab94 <__ieee754_acos+0x2ec>)
 800a8f4:	428b      	cmp	r3, r1
 800a8f6:	f300 8087 	bgt.w	800aa08 <__ieee754_acos+0x160>
 800a8fa:	4aa7      	ldr	r2, [pc, #668]	; (800ab98 <__ieee754_acos+0x2f0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	f340 81f9 	ble.w	800acf4 <__ieee754_acos+0x44c>
 800a902:	ee10 2a10 	vmov	r2, s0
 800a906:	ee10 0a10 	vmov	r0, s0
 800a90a:	462b      	mov	r3, r5
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7f5 fe2b 	bl	8000568 <__aeabi_dmul>
 800a912:	a387      	add	r3, pc, #540	; (adr r3, 800ab30 <__ieee754_acos+0x288>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	4606      	mov	r6, r0
 800a91a:	460f      	mov	r7, r1
 800a91c:	f7f5 fe24 	bl	8000568 <__aeabi_dmul>
 800a920:	a385      	add	r3, pc, #532	; (adr r3, 800ab38 <__ieee754_acos+0x290>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fc69 	bl	80001fc <__adddf3>
 800a92a:	4632      	mov	r2, r6
 800a92c:	463b      	mov	r3, r7
 800a92e:	f7f5 fe1b 	bl	8000568 <__aeabi_dmul>
 800a932:	a383      	add	r3, pc, #524	; (adr r3, 800ab40 <__ieee754_acos+0x298>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f7f5 fc5e 	bl	80001f8 <__aeabi_dsub>
 800a93c:	4632      	mov	r2, r6
 800a93e:	463b      	mov	r3, r7
 800a940:	f7f5 fe12 	bl	8000568 <__aeabi_dmul>
 800a944:	a380      	add	r3, pc, #512	; (adr r3, 800ab48 <__ieee754_acos+0x2a0>)
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 fc57 	bl	80001fc <__adddf3>
 800a94e:	4632      	mov	r2, r6
 800a950:	463b      	mov	r3, r7
 800a952:	f7f5 fe09 	bl	8000568 <__aeabi_dmul>
 800a956:	a37e      	add	r3, pc, #504	; (adr r3, 800ab50 <__ieee754_acos+0x2a8>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fc4c 	bl	80001f8 <__aeabi_dsub>
 800a960:	4632      	mov	r2, r6
 800a962:	463b      	mov	r3, r7
 800a964:	f7f5 fe00 	bl	8000568 <__aeabi_dmul>
 800a968:	a37b      	add	r3, pc, #492	; (adr r3, 800ab58 <__ieee754_acos+0x2b0>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fc45 	bl	80001fc <__adddf3>
 800a972:	4632      	mov	r2, r6
 800a974:	463b      	mov	r3, r7
 800a976:	f7f5 fdf7 	bl	8000568 <__aeabi_dmul>
 800a97a:	a379      	add	r3, pc, #484	; (adr r3, 800ab60 <__ieee754_acos+0x2b8>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	4680      	mov	r8, r0
 800a982:	4689      	mov	r9, r1
 800a984:	4630      	mov	r0, r6
 800a986:	4639      	mov	r1, r7
 800a988:	f7f5 fdee 	bl	8000568 <__aeabi_dmul>
 800a98c:	a376      	add	r3, pc, #472	; (adr r3, 800ab68 <__ieee754_acos+0x2c0>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fc31 	bl	80001f8 <__aeabi_dsub>
 800a996:	4632      	mov	r2, r6
 800a998:	463b      	mov	r3, r7
 800a99a:	f7f5 fde5 	bl	8000568 <__aeabi_dmul>
 800a99e:	a374      	add	r3, pc, #464	; (adr r3, 800ab70 <__ieee754_acos+0x2c8>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	f7f5 fc2a 	bl	80001fc <__adddf3>
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	463b      	mov	r3, r7
 800a9ac:	f7f5 fddc 	bl	8000568 <__aeabi_dmul>
 800a9b0:	a371      	add	r3, pc, #452	; (adr r3, 800ab78 <__ieee754_acos+0x2d0>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 fc1f 	bl	80001f8 <__aeabi_dsub>
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	463b      	mov	r3, r7
 800a9be:	f7f5 fdd3 	bl	8000568 <__aeabi_dmul>
 800a9c2:	4b76      	ldr	r3, [pc, #472]	; (800ab9c <__ieee754_acos+0x2f4>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f7f5 fc19 	bl	80001fc <__adddf3>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	f7f5 fef3 	bl	80007bc <__aeabi_ddiv>
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	462b      	mov	r3, r5
 800a9da:	f7f5 fdc5 	bl	8000568 <__aeabi_dmul>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	a167      	add	r1, pc, #412	; (adr r1, 800ab80 <__ieee754_acos+0x2d8>)
 800a9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e8:	f7f5 fc06 	bl	80001f8 <__aeabi_dsub>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	f7f5 fc00 	bl	80001f8 <__aeabi_dsub>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	a162      	add	r1, pc, #392	; (adr r1, 800ab88 <__ieee754_acos+0x2e0>)
 800a9fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa02:	f7f5 fbf9 	bl	80001f8 <__aeabi_dsub>
 800aa06:	e771      	b.n	800a8ec <__ieee754_acos+0x44>
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	f280 80cb 	bge.w	800aba4 <__ieee754_acos+0x2fc>
 800aa0e:	ee10 0a10 	vmov	r0, s0
 800aa12:	4b62      	ldr	r3, [pc, #392]	; (800ab9c <__ieee754_acos+0x2f4>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	4629      	mov	r1, r5
 800aa18:	f7f5 fbf0 	bl	80001fc <__adddf3>
 800aa1c:	4b60      	ldr	r3, [pc, #384]	; (800aba0 <__ieee754_acos+0x2f8>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f7f5 fda2 	bl	8000568 <__aeabi_dmul>
 800aa24:	a342      	add	r3, pc, #264	; (adr r3, 800ab30 <__ieee754_acos+0x288>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	460d      	mov	r5, r1
 800aa2e:	f7f5 fd9b 	bl	8000568 <__aeabi_dmul>
 800aa32:	a341      	add	r3, pc, #260	; (adr r3, 800ab38 <__ieee754_acos+0x290>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f5 fbe0 	bl	80001fc <__adddf3>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	462b      	mov	r3, r5
 800aa40:	f7f5 fd92 	bl	8000568 <__aeabi_dmul>
 800aa44:	a33e      	add	r3, pc, #248	; (adr r3, 800ab40 <__ieee754_acos+0x298>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fbd5 	bl	80001f8 <__aeabi_dsub>
 800aa4e:	4622      	mov	r2, r4
 800aa50:	462b      	mov	r3, r5
 800aa52:	f7f5 fd89 	bl	8000568 <__aeabi_dmul>
 800aa56:	a33c      	add	r3, pc, #240	; (adr r3, 800ab48 <__ieee754_acos+0x2a0>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f5 fbce 	bl	80001fc <__adddf3>
 800aa60:	4622      	mov	r2, r4
 800aa62:	462b      	mov	r3, r5
 800aa64:	f7f5 fd80 	bl	8000568 <__aeabi_dmul>
 800aa68:	a339      	add	r3, pc, #228	; (adr r3, 800ab50 <__ieee754_acos+0x2a8>)
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f7f5 fbc3 	bl	80001f8 <__aeabi_dsub>
 800aa72:	4622      	mov	r2, r4
 800aa74:	462b      	mov	r3, r5
 800aa76:	f7f5 fd77 	bl	8000568 <__aeabi_dmul>
 800aa7a:	a337      	add	r3, pc, #220	; (adr r3, 800ab58 <__ieee754_acos+0x2b0>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fbbc 	bl	80001fc <__adddf3>
 800aa84:	4622      	mov	r2, r4
 800aa86:	462b      	mov	r3, r5
 800aa88:	f7f5 fd6e 	bl	8000568 <__aeabi_dmul>
 800aa8c:	ec45 4b10 	vmov	d0, r4, r5
 800aa90:	4680      	mov	r8, r0
 800aa92:	4689      	mov	r9, r1
 800aa94:	f001 f962 	bl	800bd5c <__ieee754_sqrt>
 800aa98:	a331      	add	r3, pc, #196	; (adr r3, 800ab60 <__ieee754_acos+0x2b8>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	ec57 6b10 	vmov	r6, r7, d0
 800aaa6:	f7f5 fd5f 	bl	8000568 <__aeabi_dmul>
 800aaaa:	a32f      	add	r3, pc, #188	; (adr r3, 800ab68 <__ieee754_acos+0x2c0>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fba2 	bl	80001f8 <__aeabi_dsub>
 800aab4:	4622      	mov	r2, r4
 800aab6:	462b      	mov	r3, r5
 800aab8:	f7f5 fd56 	bl	8000568 <__aeabi_dmul>
 800aabc:	a32c      	add	r3, pc, #176	; (adr r3, 800ab70 <__ieee754_acos+0x2c8>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fb9b 	bl	80001fc <__adddf3>
 800aac6:	4622      	mov	r2, r4
 800aac8:	462b      	mov	r3, r5
 800aaca:	f7f5 fd4d 	bl	8000568 <__aeabi_dmul>
 800aace:	a32a      	add	r3, pc, #168	; (adr r3, 800ab78 <__ieee754_acos+0x2d0>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fb90 	bl	80001f8 <__aeabi_dsub>
 800aad8:	4622      	mov	r2, r4
 800aada:	462b      	mov	r3, r5
 800aadc:	f7f5 fd44 	bl	8000568 <__aeabi_dmul>
 800aae0:	4b2e      	ldr	r3, [pc, #184]	; (800ab9c <__ieee754_acos+0x2f4>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	f7f5 fb8a 	bl	80001fc <__adddf3>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4640      	mov	r0, r8
 800aaee:	4649      	mov	r1, r9
 800aaf0:	f7f5 fe64 	bl	80007bc <__aeabi_ddiv>
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	463b      	mov	r3, r7
 800aaf8:	f7f5 fd36 	bl	8000568 <__aeabi_dmul>
 800aafc:	a320      	add	r3, pc, #128	; (adr r3, 800ab80 <__ieee754_acos+0x2d8>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fb79 	bl	80001f8 <__aeabi_dsub>
 800ab06:	4632      	mov	r2, r6
 800ab08:	463b      	mov	r3, r7
 800ab0a:	f7f5 fb77 	bl	80001fc <__adddf3>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	f7f5 fb73 	bl	80001fc <__adddf3>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	a103      	add	r1, pc, #12	; (adr r1, 800ab28 <__ieee754_acos+0x280>)
 800ab1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab20:	e76f      	b.n	800aa02 <__ieee754_acos+0x15a>
 800ab22:	bf00      	nop
 800ab24:	f3af 8000 	nop.w
 800ab28:	54442d18 	.word	0x54442d18
 800ab2c:	400921fb 	.word	0x400921fb
 800ab30:	0dfdf709 	.word	0x0dfdf709
 800ab34:	3f023de1 	.word	0x3f023de1
 800ab38:	7501b288 	.word	0x7501b288
 800ab3c:	3f49efe0 	.word	0x3f49efe0
 800ab40:	b5688f3b 	.word	0xb5688f3b
 800ab44:	3fa48228 	.word	0x3fa48228
 800ab48:	0e884455 	.word	0x0e884455
 800ab4c:	3fc9c155 	.word	0x3fc9c155
 800ab50:	03eb6f7d 	.word	0x03eb6f7d
 800ab54:	3fd4d612 	.word	0x3fd4d612
 800ab58:	55555555 	.word	0x55555555
 800ab5c:	3fc55555 	.word	0x3fc55555
 800ab60:	b12e9282 	.word	0xb12e9282
 800ab64:	3fb3b8c5 	.word	0x3fb3b8c5
 800ab68:	1b8d0159 	.word	0x1b8d0159
 800ab6c:	3fe6066c 	.word	0x3fe6066c
 800ab70:	9c598ac8 	.word	0x9c598ac8
 800ab74:	40002ae5 	.word	0x40002ae5
 800ab78:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab7c:	40033a27 	.word	0x40033a27
 800ab80:	33145c07 	.word	0x33145c07
 800ab84:	3c91a626 	.word	0x3c91a626
 800ab88:	54442d18 	.word	0x54442d18
 800ab8c:	3ff921fb 	.word	0x3ff921fb
 800ab90:	3fefffff 	.word	0x3fefffff
 800ab94:	3fdfffff 	.word	0x3fdfffff
 800ab98:	3c600000 	.word	0x3c600000
 800ab9c:	3ff00000 	.word	0x3ff00000
 800aba0:	3fe00000 	.word	0x3fe00000
 800aba4:	ee10 2a10 	vmov	r2, s0
 800aba8:	462b      	mov	r3, r5
 800abaa:	496d      	ldr	r1, [pc, #436]	; (800ad60 <__ieee754_acos+0x4b8>)
 800abac:	2000      	movs	r0, #0
 800abae:	f7f5 fb23 	bl	80001f8 <__aeabi_dsub>
 800abb2:	4b6c      	ldr	r3, [pc, #432]	; (800ad64 <__ieee754_acos+0x4bc>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	f7f5 fcd7 	bl	8000568 <__aeabi_dmul>
 800abba:	4604      	mov	r4, r0
 800abbc:	460d      	mov	r5, r1
 800abbe:	ec45 4b10 	vmov	d0, r4, r5
 800abc2:	f001 f8cb 	bl	800bd5c <__ieee754_sqrt>
 800abc6:	a34e      	add	r3, pc, #312	; (adr r3, 800ad00 <__ieee754_acos+0x458>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	4620      	mov	r0, r4
 800abce:	4629      	mov	r1, r5
 800abd0:	ec59 8b10 	vmov	r8, r9, d0
 800abd4:	f7f5 fcc8 	bl	8000568 <__aeabi_dmul>
 800abd8:	a34b      	add	r3, pc, #300	; (adr r3, 800ad08 <__ieee754_acos+0x460>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f7f5 fb0d 	bl	80001fc <__adddf3>
 800abe2:	4622      	mov	r2, r4
 800abe4:	462b      	mov	r3, r5
 800abe6:	f7f5 fcbf 	bl	8000568 <__aeabi_dmul>
 800abea:	a349      	add	r3, pc, #292	; (adr r3, 800ad10 <__ieee754_acos+0x468>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f7f5 fb02 	bl	80001f8 <__aeabi_dsub>
 800abf4:	4622      	mov	r2, r4
 800abf6:	462b      	mov	r3, r5
 800abf8:	f7f5 fcb6 	bl	8000568 <__aeabi_dmul>
 800abfc:	a346      	add	r3, pc, #280	; (adr r3, 800ad18 <__ieee754_acos+0x470>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7f5 fafb 	bl	80001fc <__adddf3>
 800ac06:	4622      	mov	r2, r4
 800ac08:	462b      	mov	r3, r5
 800ac0a:	f7f5 fcad 	bl	8000568 <__aeabi_dmul>
 800ac0e:	a344      	add	r3, pc, #272	; (adr r3, 800ad20 <__ieee754_acos+0x478>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f7f5 faf0 	bl	80001f8 <__aeabi_dsub>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	f7f5 fca4 	bl	8000568 <__aeabi_dmul>
 800ac20:	a341      	add	r3, pc, #260	; (adr r3, 800ad28 <__ieee754_acos+0x480>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fae9 	bl	80001fc <__adddf3>
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	462b      	mov	r3, r5
 800ac2e:	f7f5 fc9b 	bl	8000568 <__aeabi_dmul>
 800ac32:	a33f      	add	r3, pc, #252	; (adr r3, 800ad30 <__ieee754_acos+0x488>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	4682      	mov	sl, r0
 800ac3a:	468b      	mov	fp, r1
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	4629      	mov	r1, r5
 800ac40:	f7f5 fc92 	bl	8000568 <__aeabi_dmul>
 800ac44:	a33c      	add	r3, pc, #240	; (adr r3, 800ad38 <__ieee754_acos+0x490>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fad5 	bl	80001f8 <__aeabi_dsub>
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	f7f5 fc89 	bl	8000568 <__aeabi_dmul>
 800ac56:	a33a      	add	r3, pc, #232	; (adr r3, 800ad40 <__ieee754_acos+0x498>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 face 	bl	80001fc <__adddf3>
 800ac60:	4622      	mov	r2, r4
 800ac62:	462b      	mov	r3, r5
 800ac64:	f7f5 fc80 	bl	8000568 <__aeabi_dmul>
 800ac68:	a337      	add	r3, pc, #220	; (adr r3, 800ad48 <__ieee754_acos+0x4a0>)
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f7f5 fac3 	bl	80001f8 <__aeabi_dsub>
 800ac72:	4622      	mov	r2, r4
 800ac74:	462b      	mov	r3, r5
 800ac76:	f7f5 fc77 	bl	8000568 <__aeabi_dmul>
 800ac7a:	4b39      	ldr	r3, [pc, #228]	; (800ad60 <__ieee754_acos+0x4b8>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f7f5 fabd 	bl	80001fc <__adddf3>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4650      	mov	r0, sl
 800ac88:	4659      	mov	r1, fp
 800ac8a:	f7f5 fd97 	bl	80007bc <__aeabi_ddiv>
 800ac8e:	4642      	mov	r2, r8
 800ac90:	464b      	mov	r3, r9
 800ac92:	f7f5 fc69 	bl	8000568 <__aeabi_dmul>
 800ac96:	2600      	movs	r6, #0
 800ac98:	4682      	mov	sl, r0
 800ac9a:	468b      	mov	fp, r1
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	464b      	mov	r3, r9
 800aca0:	4630      	mov	r0, r6
 800aca2:	4649      	mov	r1, r9
 800aca4:	f7f5 fc60 	bl	8000568 <__aeabi_dmul>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4620      	mov	r0, r4
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 faa2 	bl	80001f8 <__aeabi_dsub>
 800acb4:	4632      	mov	r2, r6
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	464b      	mov	r3, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 fa9c 	bl	80001fc <__adddf3>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4620      	mov	r0, r4
 800acca:	4629      	mov	r1, r5
 800accc:	f7f5 fd76 	bl	80007bc <__aeabi_ddiv>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4650      	mov	r0, sl
 800acd6:	4659      	mov	r1, fp
 800acd8:	f7f5 fa90 	bl	80001fc <__adddf3>
 800acdc:	4632      	mov	r2, r6
 800acde:	464b      	mov	r3, r9
 800ace0:	f7f5 fa8c 	bl	80001fc <__adddf3>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	f7f5 fa88 	bl	80001fc <__adddf3>
 800acec:	e5fe      	b.n	800a8ec <__ieee754_acos+0x44>
 800acee:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad50 <__ieee754_acos+0x4a8>
 800acf2:	e5ed      	b.n	800a8d0 <__ieee754_acos+0x28>
 800acf4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad58 <__ieee754_acos+0x4b0>
 800acf8:	e5ea      	b.n	800a8d0 <__ieee754_acos+0x28>
 800acfa:	bf00      	nop
 800acfc:	f3af 8000 	nop.w
 800ad00:	0dfdf709 	.word	0x0dfdf709
 800ad04:	3f023de1 	.word	0x3f023de1
 800ad08:	7501b288 	.word	0x7501b288
 800ad0c:	3f49efe0 	.word	0x3f49efe0
 800ad10:	b5688f3b 	.word	0xb5688f3b
 800ad14:	3fa48228 	.word	0x3fa48228
 800ad18:	0e884455 	.word	0x0e884455
 800ad1c:	3fc9c155 	.word	0x3fc9c155
 800ad20:	03eb6f7d 	.word	0x03eb6f7d
 800ad24:	3fd4d612 	.word	0x3fd4d612
 800ad28:	55555555 	.word	0x55555555
 800ad2c:	3fc55555 	.word	0x3fc55555
 800ad30:	b12e9282 	.word	0xb12e9282
 800ad34:	3fb3b8c5 	.word	0x3fb3b8c5
 800ad38:	1b8d0159 	.word	0x1b8d0159
 800ad3c:	3fe6066c 	.word	0x3fe6066c
 800ad40:	9c598ac8 	.word	0x9c598ac8
 800ad44:	40002ae5 	.word	0x40002ae5
 800ad48:	1c8a2d4b 	.word	0x1c8a2d4b
 800ad4c:	40033a27 	.word	0x40033a27
	...
 800ad58:	54442d18 	.word	0x54442d18
 800ad5c:	3ff921fb 	.word	0x3ff921fb
 800ad60:	3ff00000 	.word	0x3ff00000
 800ad64:	3fe00000 	.word	0x3fe00000

0800ad68 <__ieee754_atan2>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	ec57 6b11 	vmov	r6, r7, d1
 800ad70:	4273      	negs	r3, r6
 800ad72:	f8df e184 	ldr.w	lr, [pc, #388]	; 800aef8 <__ieee754_atan2+0x190>
 800ad76:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ad7a:	4333      	orrs	r3, r6
 800ad7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad80:	4573      	cmp	r3, lr
 800ad82:	ec51 0b10 	vmov	r0, r1, d0
 800ad86:	ee11 8a10 	vmov	r8, s2
 800ad8a:	d80a      	bhi.n	800ada2 <__ieee754_atan2+0x3a>
 800ad8c:	4244      	negs	r4, r0
 800ad8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad92:	4304      	orrs	r4, r0
 800ad94:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ad98:	4574      	cmp	r4, lr
 800ad9a:	ee10 9a10 	vmov	r9, s0
 800ad9e:	468c      	mov	ip, r1
 800ada0:	d907      	bls.n	800adb2 <__ieee754_atan2+0x4a>
 800ada2:	4632      	mov	r2, r6
 800ada4:	463b      	mov	r3, r7
 800ada6:	f7f5 fa29 	bl	80001fc <__adddf3>
 800adaa:	ec41 0b10 	vmov	d0, r0, r1
 800adae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800adb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800adba:	4334      	orrs	r4, r6
 800adbc:	d103      	bne.n	800adc6 <__ieee754_atan2+0x5e>
 800adbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc2:	f7ff ba01 	b.w	800a1c8 <atan>
 800adc6:	17bc      	asrs	r4, r7, #30
 800adc8:	f004 0402 	and.w	r4, r4, #2
 800adcc:	ea53 0909 	orrs.w	r9, r3, r9
 800add0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800add4:	d107      	bne.n	800ade6 <__ieee754_atan2+0x7e>
 800add6:	2c02      	cmp	r4, #2
 800add8:	d060      	beq.n	800ae9c <__ieee754_atan2+0x134>
 800adda:	2c03      	cmp	r4, #3
 800addc:	d1e5      	bne.n	800adaa <__ieee754_atan2+0x42>
 800adde:	a142      	add	r1, pc, #264	; (adr r1, 800aee8 <__ieee754_atan2+0x180>)
 800ade0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade4:	e7e1      	b.n	800adaa <__ieee754_atan2+0x42>
 800ade6:	ea52 0808 	orrs.w	r8, r2, r8
 800adea:	d106      	bne.n	800adfa <__ieee754_atan2+0x92>
 800adec:	f1bc 0f00 	cmp.w	ip, #0
 800adf0:	da5f      	bge.n	800aeb2 <__ieee754_atan2+0x14a>
 800adf2:	a13f      	add	r1, pc, #252	; (adr r1, 800aef0 <__ieee754_atan2+0x188>)
 800adf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf8:	e7d7      	b.n	800adaa <__ieee754_atan2+0x42>
 800adfa:	4572      	cmp	r2, lr
 800adfc:	d10f      	bne.n	800ae1e <__ieee754_atan2+0xb6>
 800adfe:	4293      	cmp	r3, r2
 800ae00:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ae04:	d107      	bne.n	800ae16 <__ieee754_atan2+0xae>
 800ae06:	2c02      	cmp	r4, #2
 800ae08:	d84c      	bhi.n	800aea4 <__ieee754_atan2+0x13c>
 800ae0a:	4b35      	ldr	r3, [pc, #212]	; (800aee0 <__ieee754_atan2+0x178>)
 800ae0c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ae10:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ae14:	e7c9      	b.n	800adaa <__ieee754_atan2+0x42>
 800ae16:	2c02      	cmp	r4, #2
 800ae18:	d848      	bhi.n	800aeac <__ieee754_atan2+0x144>
 800ae1a:	4b32      	ldr	r3, [pc, #200]	; (800aee4 <__ieee754_atan2+0x17c>)
 800ae1c:	e7f6      	b.n	800ae0c <__ieee754_atan2+0xa4>
 800ae1e:	4573      	cmp	r3, lr
 800ae20:	d0e4      	beq.n	800adec <__ieee754_atan2+0x84>
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ae28:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae2c:	da1e      	bge.n	800ae6c <__ieee754_atan2+0x104>
 800ae2e:	2f00      	cmp	r7, #0
 800ae30:	da01      	bge.n	800ae36 <__ieee754_atan2+0xce>
 800ae32:	323c      	adds	r2, #60	; 0x3c
 800ae34:	db1e      	blt.n	800ae74 <__ieee754_atan2+0x10c>
 800ae36:	4632      	mov	r2, r6
 800ae38:	463b      	mov	r3, r7
 800ae3a:	f7f5 fcbf 	bl	80007bc <__aeabi_ddiv>
 800ae3e:	ec41 0b10 	vmov	d0, r0, r1
 800ae42:	f7ff fbb1 	bl	800a5a8 <fabs>
 800ae46:	f7ff f9bf 	bl	800a1c8 <atan>
 800ae4a:	ec51 0b10 	vmov	r0, r1, d0
 800ae4e:	2c01      	cmp	r4, #1
 800ae50:	d013      	beq.n	800ae7a <__ieee754_atan2+0x112>
 800ae52:	2c02      	cmp	r4, #2
 800ae54:	d015      	beq.n	800ae82 <__ieee754_atan2+0x11a>
 800ae56:	2c00      	cmp	r4, #0
 800ae58:	d0a7      	beq.n	800adaa <__ieee754_atan2+0x42>
 800ae5a:	a319      	add	r3, pc, #100	; (adr r3, 800aec0 <__ieee754_atan2+0x158>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 f9ca 	bl	80001f8 <__aeabi_dsub>
 800ae64:	a318      	add	r3, pc, #96	; (adr r3, 800aec8 <__ieee754_atan2+0x160>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	e014      	b.n	800ae96 <__ieee754_atan2+0x12e>
 800ae6c:	a118      	add	r1, pc, #96	; (adr r1, 800aed0 <__ieee754_atan2+0x168>)
 800ae6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae72:	e7ec      	b.n	800ae4e <__ieee754_atan2+0xe6>
 800ae74:	2000      	movs	r0, #0
 800ae76:	2100      	movs	r1, #0
 800ae78:	e7e9      	b.n	800ae4e <__ieee754_atan2+0xe6>
 800ae7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae7e:	4619      	mov	r1, r3
 800ae80:	e793      	b.n	800adaa <__ieee754_atan2+0x42>
 800ae82:	a30f      	add	r3, pc, #60	; (adr r3, 800aec0 <__ieee754_atan2+0x158>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 f9b6 	bl	80001f8 <__aeabi_dsub>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	a10d      	add	r1, pc, #52	; (adr r1, 800aec8 <__ieee754_atan2+0x160>)
 800ae92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae96:	f7f5 f9af 	bl	80001f8 <__aeabi_dsub>
 800ae9a:	e786      	b.n	800adaa <__ieee754_atan2+0x42>
 800ae9c:	a10a      	add	r1, pc, #40	; (adr r1, 800aec8 <__ieee754_atan2+0x160>)
 800ae9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea2:	e782      	b.n	800adaa <__ieee754_atan2+0x42>
 800aea4:	a10c      	add	r1, pc, #48	; (adr r1, 800aed8 <__ieee754_atan2+0x170>)
 800aea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeaa:	e77e      	b.n	800adaa <__ieee754_atan2+0x42>
 800aeac:	2000      	movs	r0, #0
 800aeae:	2100      	movs	r1, #0
 800aeb0:	e77b      	b.n	800adaa <__ieee754_atan2+0x42>
 800aeb2:	a107      	add	r1, pc, #28	; (adr r1, 800aed0 <__ieee754_atan2+0x168>)
 800aeb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb8:	e777      	b.n	800adaa <__ieee754_atan2+0x42>
 800aeba:	bf00      	nop
 800aebc:	f3af 8000 	nop.w
 800aec0:	33145c07 	.word	0x33145c07
 800aec4:	3ca1a626 	.word	0x3ca1a626
 800aec8:	54442d18 	.word	0x54442d18
 800aecc:	400921fb 	.word	0x400921fb
 800aed0:	54442d18 	.word	0x54442d18
 800aed4:	3ff921fb 	.word	0x3ff921fb
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	3fe921fb 	.word	0x3fe921fb
 800aee0:	0800cc40 	.word	0x0800cc40
 800aee4:	0800cc58 	.word	0x0800cc58
 800aee8:	54442d18 	.word	0x54442d18
 800aeec:	c00921fb 	.word	0xc00921fb
 800aef0:	54442d18 	.word	0x54442d18
 800aef4:	bff921fb 	.word	0xbff921fb
 800aef8:	7ff00000 	.word	0x7ff00000
 800aefc:	00000000 	.word	0x00000000

0800af00 <__ieee754_pow>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	ed2d 8b06 	vpush	{d8-d10}
 800af08:	b08d      	sub	sp, #52	; 0x34
 800af0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800af0e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800af12:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800af16:	ea56 0100 	orrs.w	r1, r6, r0
 800af1a:	ec53 2b10 	vmov	r2, r3, d0
 800af1e:	f000 84d1 	beq.w	800b8c4 <__ieee754_pow+0x9c4>
 800af22:	497f      	ldr	r1, [pc, #508]	; (800b120 <__ieee754_pow+0x220>)
 800af24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800af28:	428c      	cmp	r4, r1
 800af2a:	ee10 8a10 	vmov	r8, s0
 800af2e:	4699      	mov	r9, r3
 800af30:	dc09      	bgt.n	800af46 <__ieee754_pow+0x46>
 800af32:	d103      	bne.n	800af3c <__ieee754_pow+0x3c>
 800af34:	b97a      	cbnz	r2, 800af56 <__ieee754_pow+0x56>
 800af36:	42a6      	cmp	r6, r4
 800af38:	dd02      	ble.n	800af40 <__ieee754_pow+0x40>
 800af3a:	e00c      	b.n	800af56 <__ieee754_pow+0x56>
 800af3c:	428e      	cmp	r6, r1
 800af3e:	dc02      	bgt.n	800af46 <__ieee754_pow+0x46>
 800af40:	428e      	cmp	r6, r1
 800af42:	d110      	bne.n	800af66 <__ieee754_pow+0x66>
 800af44:	b178      	cbz	r0, 800af66 <__ieee754_pow+0x66>
 800af46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800af4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af4e:	ea54 0308 	orrs.w	r3, r4, r8
 800af52:	f000 84b7 	beq.w	800b8c4 <__ieee754_pow+0x9c4>
 800af56:	4873      	ldr	r0, [pc, #460]	; (800b124 <__ieee754_pow+0x224>)
 800af58:	b00d      	add	sp, #52	; 0x34
 800af5a:	ecbd 8b06 	vpop	{d8-d10}
 800af5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af62:	f001 bd05 	b.w	800c970 <nan>
 800af66:	f1b9 0f00 	cmp.w	r9, #0
 800af6a:	da36      	bge.n	800afda <__ieee754_pow+0xda>
 800af6c:	496e      	ldr	r1, [pc, #440]	; (800b128 <__ieee754_pow+0x228>)
 800af6e:	428e      	cmp	r6, r1
 800af70:	dc51      	bgt.n	800b016 <__ieee754_pow+0x116>
 800af72:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800af76:	428e      	cmp	r6, r1
 800af78:	f340 84af 	ble.w	800b8da <__ieee754_pow+0x9da>
 800af7c:	1531      	asrs	r1, r6, #20
 800af7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800af82:	2914      	cmp	r1, #20
 800af84:	dd0f      	ble.n	800afa6 <__ieee754_pow+0xa6>
 800af86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800af8a:	fa20 fc01 	lsr.w	ip, r0, r1
 800af8e:	fa0c f101 	lsl.w	r1, ip, r1
 800af92:	4281      	cmp	r1, r0
 800af94:	f040 84a1 	bne.w	800b8da <__ieee754_pow+0x9da>
 800af98:	f00c 0c01 	and.w	ip, ip, #1
 800af9c:	f1cc 0102 	rsb	r1, ip, #2
 800afa0:	9100      	str	r1, [sp, #0]
 800afa2:	b180      	cbz	r0, 800afc6 <__ieee754_pow+0xc6>
 800afa4:	e059      	b.n	800b05a <__ieee754_pow+0x15a>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d155      	bne.n	800b056 <__ieee754_pow+0x156>
 800afaa:	f1c1 0114 	rsb	r1, r1, #20
 800afae:	fa46 fc01 	asr.w	ip, r6, r1
 800afb2:	fa0c f101 	lsl.w	r1, ip, r1
 800afb6:	42b1      	cmp	r1, r6
 800afb8:	f040 848c 	bne.w	800b8d4 <__ieee754_pow+0x9d4>
 800afbc:	f00c 0c01 	and.w	ip, ip, #1
 800afc0:	f1cc 0102 	rsb	r1, ip, #2
 800afc4:	9100      	str	r1, [sp, #0]
 800afc6:	4959      	ldr	r1, [pc, #356]	; (800b12c <__ieee754_pow+0x22c>)
 800afc8:	428e      	cmp	r6, r1
 800afca:	d12d      	bne.n	800b028 <__ieee754_pow+0x128>
 800afcc:	2f00      	cmp	r7, #0
 800afce:	da79      	bge.n	800b0c4 <__ieee754_pow+0x1c4>
 800afd0:	4956      	ldr	r1, [pc, #344]	; (800b12c <__ieee754_pow+0x22c>)
 800afd2:	2000      	movs	r0, #0
 800afd4:	f7f5 fbf2 	bl	80007bc <__aeabi_ddiv>
 800afd8:	e016      	b.n	800b008 <__ieee754_pow+0x108>
 800afda:	2100      	movs	r1, #0
 800afdc:	9100      	str	r1, [sp, #0]
 800afde:	2800      	cmp	r0, #0
 800afe0:	d13b      	bne.n	800b05a <__ieee754_pow+0x15a>
 800afe2:	494f      	ldr	r1, [pc, #316]	; (800b120 <__ieee754_pow+0x220>)
 800afe4:	428e      	cmp	r6, r1
 800afe6:	d1ee      	bne.n	800afc6 <__ieee754_pow+0xc6>
 800afe8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800afec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aff0:	ea53 0308 	orrs.w	r3, r3, r8
 800aff4:	f000 8466 	beq.w	800b8c4 <__ieee754_pow+0x9c4>
 800aff8:	4b4d      	ldr	r3, [pc, #308]	; (800b130 <__ieee754_pow+0x230>)
 800affa:	429c      	cmp	r4, r3
 800affc:	dd0d      	ble.n	800b01a <__ieee754_pow+0x11a>
 800affe:	2f00      	cmp	r7, #0
 800b000:	f280 8464 	bge.w	800b8cc <__ieee754_pow+0x9cc>
 800b004:	2000      	movs	r0, #0
 800b006:	2100      	movs	r1, #0
 800b008:	ec41 0b10 	vmov	d0, r0, r1
 800b00c:	b00d      	add	sp, #52	; 0x34
 800b00e:	ecbd 8b06 	vpop	{d8-d10}
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b016:	2102      	movs	r1, #2
 800b018:	e7e0      	b.n	800afdc <__ieee754_pow+0xdc>
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	daf2      	bge.n	800b004 <__ieee754_pow+0x104>
 800b01e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b022:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b026:	e7ef      	b.n	800b008 <__ieee754_pow+0x108>
 800b028:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b02c:	d104      	bne.n	800b038 <__ieee754_pow+0x138>
 800b02e:	4610      	mov	r0, r2
 800b030:	4619      	mov	r1, r3
 800b032:	f7f5 fa99 	bl	8000568 <__aeabi_dmul>
 800b036:	e7e7      	b.n	800b008 <__ieee754_pow+0x108>
 800b038:	493e      	ldr	r1, [pc, #248]	; (800b134 <__ieee754_pow+0x234>)
 800b03a:	428f      	cmp	r7, r1
 800b03c:	d10d      	bne.n	800b05a <__ieee754_pow+0x15a>
 800b03e:	f1b9 0f00 	cmp.w	r9, #0
 800b042:	db0a      	blt.n	800b05a <__ieee754_pow+0x15a>
 800b044:	ec43 2b10 	vmov	d0, r2, r3
 800b048:	b00d      	add	sp, #52	; 0x34
 800b04a:	ecbd 8b06 	vpop	{d8-d10}
 800b04e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b052:	f000 be83 	b.w	800bd5c <__ieee754_sqrt>
 800b056:	2100      	movs	r1, #0
 800b058:	9100      	str	r1, [sp, #0]
 800b05a:	ec43 2b10 	vmov	d0, r2, r3
 800b05e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b062:	f7ff faa1 	bl	800a5a8 <fabs>
 800b066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b06a:	ec51 0b10 	vmov	r0, r1, d0
 800b06e:	f1b8 0f00 	cmp.w	r8, #0
 800b072:	d12a      	bne.n	800b0ca <__ieee754_pow+0x1ca>
 800b074:	b12c      	cbz	r4, 800b082 <__ieee754_pow+0x182>
 800b076:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b12c <__ieee754_pow+0x22c>
 800b07a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b07e:	45e6      	cmp	lr, ip
 800b080:	d123      	bne.n	800b0ca <__ieee754_pow+0x1ca>
 800b082:	2f00      	cmp	r7, #0
 800b084:	da05      	bge.n	800b092 <__ieee754_pow+0x192>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	2000      	movs	r0, #0
 800b08c:	4927      	ldr	r1, [pc, #156]	; (800b12c <__ieee754_pow+0x22c>)
 800b08e:	f7f5 fb95 	bl	80007bc <__aeabi_ddiv>
 800b092:	f1b9 0f00 	cmp.w	r9, #0
 800b096:	dab7      	bge.n	800b008 <__ieee754_pow+0x108>
 800b098:	9b00      	ldr	r3, [sp, #0]
 800b09a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b09e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b0a2:	4323      	orrs	r3, r4
 800b0a4:	d108      	bne.n	800b0b8 <__ieee754_pow+0x1b8>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	f7f5 f8a3 	bl	80001f8 <__aeabi_dsub>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	e78d      	b.n	800afd4 <__ieee754_pow+0xd4>
 800b0b8:	9b00      	ldr	r3, [sp, #0]
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d1a4      	bne.n	800b008 <__ieee754_pow+0x108>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	e79e      	b.n	800b008 <__ieee754_pow+0x108>
 800b0ca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b0ce:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800b0d2:	950a      	str	r5, [sp, #40]	; 0x28
 800b0d4:	9d00      	ldr	r5, [sp, #0]
 800b0d6:	46ac      	mov	ip, r5
 800b0d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b0da:	ea5c 0505 	orrs.w	r5, ip, r5
 800b0de:	d0e4      	beq.n	800b0aa <__ieee754_pow+0x1aa>
 800b0e0:	4b15      	ldr	r3, [pc, #84]	; (800b138 <__ieee754_pow+0x238>)
 800b0e2:	429e      	cmp	r6, r3
 800b0e4:	f340 80fc 	ble.w	800b2e0 <__ieee754_pow+0x3e0>
 800b0e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b0ec:	429e      	cmp	r6, r3
 800b0ee:	4b10      	ldr	r3, [pc, #64]	; (800b130 <__ieee754_pow+0x230>)
 800b0f0:	dd07      	ble.n	800b102 <__ieee754_pow+0x202>
 800b0f2:	429c      	cmp	r4, r3
 800b0f4:	dc0a      	bgt.n	800b10c <__ieee754_pow+0x20c>
 800b0f6:	2f00      	cmp	r7, #0
 800b0f8:	da84      	bge.n	800b004 <__ieee754_pow+0x104>
 800b0fa:	a307      	add	r3, pc, #28	; (adr r3, 800b118 <__ieee754_pow+0x218>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	e795      	b.n	800b02e <__ieee754_pow+0x12e>
 800b102:	429c      	cmp	r4, r3
 800b104:	dbf7      	blt.n	800b0f6 <__ieee754_pow+0x1f6>
 800b106:	4b09      	ldr	r3, [pc, #36]	; (800b12c <__ieee754_pow+0x22c>)
 800b108:	429c      	cmp	r4, r3
 800b10a:	dd17      	ble.n	800b13c <__ieee754_pow+0x23c>
 800b10c:	2f00      	cmp	r7, #0
 800b10e:	dcf4      	bgt.n	800b0fa <__ieee754_pow+0x1fa>
 800b110:	e778      	b.n	800b004 <__ieee754_pow+0x104>
 800b112:	bf00      	nop
 800b114:	f3af 8000 	nop.w
 800b118:	8800759c 	.word	0x8800759c
 800b11c:	7e37e43c 	.word	0x7e37e43c
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	0800cc38 	.word	0x0800cc38
 800b128:	433fffff 	.word	0x433fffff
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	3fefffff 	.word	0x3fefffff
 800b134:	3fe00000 	.word	0x3fe00000
 800b138:	41e00000 	.word	0x41e00000
 800b13c:	4b64      	ldr	r3, [pc, #400]	; (800b2d0 <__ieee754_pow+0x3d0>)
 800b13e:	2200      	movs	r2, #0
 800b140:	f7f5 f85a 	bl	80001f8 <__aeabi_dsub>
 800b144:	a356      	add	r3, pc, #344	; (adr r3, 800b2a0 <__ieee754_pow+0x3a0>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	4604      	mov	r4, r0
 800b14c:	460d      	mov	r5, r1
 800b14e:	f7f5 fa0b 	bl	8000568 <__aeabi_dmul>
 800b152:	a355      	add	r3, pc, #340	; (adr r3, 800b2a8 <__ieee754_pow+0x3a8>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fa02 	bl	8000568 <__aeabi_dmul>
 800b164:	4b5b      	ldr	r3, [pc, #364]	; (800b2d4 <__ieee754_pow+0x3d4>)
 800b166:	4682      	mov	sl, r0
 800b168:	468b      	mov	fp, r1
 800b16a:	2200      	movs	r2, #0
 800b16c:	4620      	mov	r0, r4
 800b16e:	4629      	mov	r1, r5
 800b170:	f7f5 f9fa 	bl	8000568 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	a14d      	add	r1, pc, #308	; (adr r1, 800b2b0 <__ieee754_pow+0x3b0>)
 800b17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17e:	f7f5 f83b 	bl	80001f8 <__aeabi_dsub>
 800b182:	4622      	mov	r2, r4
 800b184:	462b      	mov	r3, r5
 800b186:	f7f5 f9ef 	bl	8000568 <__aeabi_dmul>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	2000      	movs	r0, #0
 800b190:	4951      	ldr	r1, [pc, #324]	; (800b2d8 <__ieee754_pow+0x3d8>)
 800b192:	f7f5 f831 	bl	80001f8 <__aeabi_dsub>
 800b196:	4622      	mov	r2, r4
 800b198:	4680      	mov	r8, r0
 800b19a:	4689      	mov	r9, r1
 800b19c:	462b      	mov	r3, r5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	f7f5 f9e1 	bl	8000568 <__aeabi_dmul>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 f9db 	bl	8000568 <__aeabi_dmul>
 800b1b2:	a341      	add	r3, pc, #260	; (adr r3, 800b2b8 <__ieee754_pow+0x3b8>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f9d6 	bl	8000568 <__aeabi_dmul>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	f7f5 f818 	bl	80001f8 <__aeabi_dsub>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	4689      	mov	r9, r1
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	f7f5 f812 	bl	80001fc <__adddf3>
 800b1d8:	2400      	movs	r4, #0
 800b1da:	4632      	mov	r2, r6
 800b1dc:	463b      	mov	r3, r7
 800b1de:	4620      	mov	r0, r4
 800b1e0:	460d      	mov	r5, r1
 800b1e2:	f7f5 f809 	bl	80001f8 <__aeabi_dsub>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	f7f5 f803 	bl	80001f8 <__aeabi_dsub>
 800b1f2:	9b00      	ldr	r3, [sp, #0]
 800b1f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	f040 81f1 	bne.w	800b5e4 <__ieee754_pow+0x6e4>
 800b202:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b2c0 <__ieee754_pow+0x3c0>
 800b206:	eeb0 8a47 	vmov.f32	s16, s14
 800b20a:	eef0 8a67 	vmov.f32	s17, s15
 800b20e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b212:	2600      	movs	r6, #0
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b21c:	f7f4 ffec 	bl	80001f8 <__aeabi_dsub>
 800b220:	4622      	mov	r2, r4
 800b222:	462b      	mov	r3, r5
 800b224:	f7f5 f9a0 	bl	8000568 <__aeabi_dmul>
 800b228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b22c:	4680      	mov	r8, r0
 800b22e:	4689      	mov	r9, r1
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	f7f5 f998 	bl	8000568 <__aeabi_dmul>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4640      	mov	r0, r8
 800b23e:	4649      	mov	r1, r9
 800b240:	f7f4 ffdc 	bl	80001fc <__adddf3>
 800b244:	4632      	mov	r2, r6
 800b246:	463b      	mov	r3, r7
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f98a 	bl	8000568 <__aeabi_dmul>
 800b254:	460b      	mov	r3, r1
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	4602      	mov	r2, r0
 800b25c:	4649      	mov	r1, r9
 800b25e:	4640      	mov	r0, r8
 800b260:	f7f4 ffcc 	bl	80001fc <__adddf3>
 800b264:	4b1d      	ldr	r3, [pc, #116]	; (800b2dc <__ieee754_pow+0x3dc>)
 800b266:	4299      	cmp	r1, r3
 800b268:	ec45 4b19 	vmov	d9, r4, r5
 800b26c:	4606      	mov	r6, r0
 800b26e:	460f      	mov	r7, r1
 800b270:	468b      	mov	fp, r1
 800b272:	f340 82fe 	ble.w	800b872 <__ieee754_pow+0x972>
 800b276:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b27a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b27e:	4303      	orrs	r3, r0
 800b280:	f000 81f0 	beq.w	800b664 <__ieee754_pow+0x764>
 800b284:	a310      	add	r3, pc, #64	; (adr r3, 800b2c8 <__ieee754_pow+0x3c8>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	ec51 0b18 	vmov	r0, r1, d8
 800b28e:	f7f5 f96b 	bl	8000568 <__aeabi_dmul>
 800b292:	a30d      	add	r3, pc, #52	; (adr r3, 800b2c8 <__ieee754_pow+0x3c8>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	e6cb      	b.n	800b032 <__ieee754_pow+0x132>
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w
 800b2a0:	60000000 	.word	0x60000000
 800b2a4:	3ff71547 	.word	0x3ff71547
 800b2a8:	f85ddf44 	.word	0xf85ddf44
 800b2ac:	3e54ae0b 	.word	0x3e54ae0b
 800b2b0:	55555555 	.word	0x55555555
 800b2b4:	3fd55555 	.word	0x3fd55555
 800b2b8:	652b82fe 	.word	0x652b82fe
 800b2bc:	3ff71547 	.word	0x3ff71547
 800b2c0:	00000000 	.word	0x00000000
 800b2c4:	bff00000 	.word	0xbff00000
 800b2c8:	8800759c 	.word	0x8800759c
 800b2cc:	7e37e43c 	.word	0x7e37e43c
 800b2d0:	3ff00000 	.word	0x3ff00000
 800b2d4:	3fd00000 	.word	0x3fd00000
 800b2d8:	3fe00000 	.word	0x3fe00000
 800b2dc:	408fffff 	.word	0x408fffff
 800b2e0:	4bd7      	ldr	r3, [pc, #860]	; (800b640 <__ieee754_pow+0x740>)
 800b2e2:	ea03 0309 	and.w	r3, r3, r9
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	b92b      	cbnz	r3, 800b2f6 <__ieee754_pow+0x3f6>
 800b2ea:	4bd6      	ldr	r3, [pc, #856]	; (800b644 <__ieee754_pow+0x744>)
 800b2ec:	f7f5 f93c 	bl	8000568 <__aeabi_dmul>
 800b2f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	1523      	asrs	r3, r4, #20
 800b2f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2fc:	4413      	add	r3, r2
 800b2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b300:	4bd1      	ldr	r3, [pc, #836]	; (800b648 <__ieee754_pow+0x748>)
 800b302:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b306:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b30a:	429c      	cmp	r4, r3
 800b30c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b310:	dd08      	ble.n	800b324 <__ieee754_pow+0x424>
 800b312:	4bce      	ldr	r3, [pc, #824]	; (800b64c <__ieee754_pow+0x74c>)
 800b314:	429c      	cmp	r4, r3
 800b316:	f340 8163 	ble.w	800b5e0 <__ieee754_pow+0x6e0>
 800b31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31c:	3301      	adds	r3, #1
 800b31e:	9309      	str	r3, [sp, #36]	; 0x24
 800b320:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b324:	2400      	movs	r4, #0
 800b326:	00e3      	lsls	r3, r4, #3
 800b328:	930b      	str	r3, [sp, #44]	; 0x2c
 800b32a:	4bc9      	ldr	r3, [pc, #804]	; (800b650 <__ieee754_pow+0x750>)
 800b32c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b330:	ed93 7b00 	vldr	d7, [r3]
 800b334:	4629      	mov	r1, r5
 800b336:	ec53 2b17 	vmov	r2, r3, d7
 800b33a:	eeb0 8a47 	vmov.f32	s16, s14
 800b33e:	eef0 8a67 	vmov.f32	s17, s15
 800b342:	4682      	mov	sl, r0
 800b344:	f7f4 ff58 	bl	80001f8 <__aeabi_dsub>
 800b348:	4652      	mov	r2, sl
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	462b      	mov	r3, r5
 800b350:	ec51 0b18 	vmov	r0, r1, d8
 800b354:	f7f4 ff52 	bl	80001fc <__adddf3>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	2000      	movs	r0, #0
 800b35e:	49bd      	ldr	r1, [pc, #756]	; (800b654 <__ieee754_pow+0x754>)
 800b360:	f7f5 fa2c 	bl	80007bc <__aeabi_ddiv>
 800b364:	ec41 0b19 	vmov	d9, r0, r1
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f5 f8fa 	bl	8000568 <__aeabi_dmul>
 800b374:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b37c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b380:	2300      	movs	r3, #0
 800b382:	9304      	str	r3, [sp, #16]
 800b384:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b388:	46ab      	mov	fp, r5
 800b38a:	106d      	asrs	r5, r5, #1
 800b38c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b390:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b394:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b398:	2200      	movs	r2, #0
 800b39a:	4640      	mov	r0, r8
 800b39c:	4649      	mov	r1, r9
 800b39e:	4614      	mov	r4, r2
 800b3a0:	461d      	mov	r5, r3
 800b3a2:	f7f5 f8e1 	bl	8000568 <__aeabi_dmul>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f4 ff23 	bl	80001f8 <__aeabi_dsub>
 800b3b2:	ec53 2b18 	vmov	r2, r3, d8
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7f4 ff1b 	bl	80001f8 <__aeabi_dsub>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	4650      	mov	r0, sl
 800b3c8:	4659      	mov	r1, fp
 800b3ca:	f7f4 ff15 	bl	80001f8 <__aeabi_dsub>
 800b3ce:	4642      	mov	r2, r8
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	f7f5 f8c9 	bl	8000568 <__aeabi_dmul>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4630      	mov	r0, r6
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f4 ff0b 	bl	80001f8 <__aeabi_dsub>
 800b3e2:	ec53 2b19 	vmov	r2, r3, d9
 800b3e6:	f7f5 f8bf 	bl	8000568 <__aeabi_dmul>
 800b3ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3ee:	ec41 0b18 	vmov	d8, r0, r1
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	f7f5 f8b7 	bl	8000568 <__aeabi_dmul>
 800b3fa:	a37d      	add	r3, pc, #500	; (adr r3, 800b5f0 <__ieee754_pow+0x6f0>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
 800b404:	f7f5 f8b0 	bl	8000568 <__aeabi_dmul>
 800b408:	a37b      	add	r3, pc, #492	; (adr r3, 800b5f8 <__ieee754_pow+0x6f8>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f7f4 fef5 	bl	80001fc <__adddf3>
 800b412:	4622      	mov	r2, r4
 800b414:	462b      	mov	r3, r5
 800b416:	f7f5 f8a7 	bl	8000568 <__aeabi_dmul>
 800b41a:	a379      	add	r3, pc, #484	; (adr r3, 800b600 <__ieee754_pow+0x700>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f4 feec 	bl	80001fc <__adddf3>
 800b424:	4622      	mov	r2, r4
 800b426:	462b      	mov	r3, r5
 800b428:	f7f5 f89e 	bl	8000568 <__aeabi_dmul>
 800b42c:	a376      	add	r3, pc, #472	; (adr r3, 800b608 <__ieee754_pow+0x708>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f4 fee3 	bl	80001fc <__adddf3>
 800b436:	4622      	mov	r2, r4
 800b438:	462b      	mov	r3, r5
 800b43a:	f7f5 f895 	bl	8000568 <__aeabi_dmul>
 800b43e:	a374      	add	r3, pc, #464	; (adr r3, 800b610 <__ieee754_pow+0x710>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7f4 feda 	bl	80001fc <__adddf3>
 800b448:	4622      	mov	r2, r4
 800b44a:	462b      	mov	r3, r5
 800b44c:	f7f5 f88c 	bl	8000568 <__aeabi_dmul>
 800b450:	a371      	add	r3, pc, #452	; (adr r3, 800b618 <__ieee754_pow+0x718>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f4 fed1 	bl	80001fc <__adddf3>
 800b45a:	4622      	mov	r2, r4
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	462b      	mov	r3, r5
 800b462:	4620      	mov	r0, r4
 800b464:	4629      	mov	r1, r5
 800b466:	f7f5 f87f 	bl	8000568 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f5 f879 	bl	8000568 <__aeabi_dmul>
 800b476:	4642      	mov	r2, r8
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	464b      	mov	r3, r9
 800b47e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b482:	f7f4 febb 	bl	80001fc <__adddf3>
 800b486:	ec53 2b18 	vmov	r2, r3, d8
 800b48a:	f7f5 f86d 	bl	8000568 <__aeabi_dmul>
 800b48e:	4622      	mov	r2, r4
 800b490:	462b      	mov	r3, r5
 800b492:	f7f4 feb3 	bl	80001fc <__adddf3>
 800b496:	4642      	mov	r2, r8
 800b498:	4682      	mov	sl, r0
 800b49a:	468b      	mov	fp, r1
 800b49c:	464b      	mov	r3, r9
 800b49e:	4640      	mov	r0, r8
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	f7f5 f861 	bl	8000568 <__aeabi_dmul>
 800b4a6:	4b6c      	ldr	r3, [pc, #432]	; (800b658 <__ieee754_pow+0x758>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4606      	mov	r6, r0
 800b4ac:	460f      	mov	r7, r1
 800b4ae:	f7f4 fea5 	bl	80001fc <__adddf3>
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	f7f4 fea1 	bl	80001fc <__adddf3>
 800b4ba:	9c04      	ldr	r4, [sp, #16]
 800b4bc:	460d      	mov	r5, r1
 800b4be:	4622      	mov	r2, r4
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f5 f84f 	bl	8000568 <__aeabi_dmul>
 800b4ca:	4b63      	ldr	r3, [pc, #396]	; (800b658 <__ieee754_pow+0x758>)
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	4689      	mov	r9, r1
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7f4 fe8f 	bl	80001f8 <__aeabi_dsub>
 800b4da:	4632      	mov	r2, r6
 800b4dc:	463b      	mov	r3, r7
 800b4de:	f7f4 fe8b 	bl	80001f8 <__aeabi_dsub>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	4659      	mov	r1, fp
 800b4ea:	f7f4 fe85 	bl	80001f8 <__aeabi_dsub>
 800b4ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4f2:	f7f5 f839 	bl	8000568 <__aeabi_dmul>
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	460f      	mov	r7, r1
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	ec51 0b18 	vmov	r0, r1, d8
 800b502:	f7f5 f831 	bl	8000568 <__aeabi_dmul>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	4630      	mov	r0, r6
 800b50c:	4639      	mov	r1, r7
 800b50e:	f7f4 fe75 	bl	80001fc <__adddf3>
 800b512:	4606      	mov	r6, r0
 800b514:	460f      	mov	r7, r1
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4640      	mov	r0, r8
 800b51c:	4649      	mov	r1, r9
 800b51e:	f7f4 fe6d 	bl	80001fc <__adddf3>
 800b522:	9c04      	ldr	r4, [sp, #16]
 800b524:	a33e      	add	r3, pc, #248	; (adr r3, 800b620 <__ieee754_pow+0x720>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	4620      	mov	r0, r4
 800b52c:	460d      	mov	r5, r1
 800b52e:	f7f5 f81b 	bl	8000568 <__aeabi_dmul>
 800b532:	4642      	mov	r2, r8
 800b534:	ec41 0b18 	vmov	d8, r0, r1
 800b538:	464b      	mov	r3, r9
 800b53a:	4620      	mov	r0, r4
 800b53c:	4629      	mov	r1, r5
 800b53e:	f7f4 fe5b 	bl	80001f8 <__aeabi_dsub>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f4 fe55 	bl	80001f8 <__aeabi_dsub>
 800b54e:	a336      	add	r3, pc, #216	; (adr r3, 800b628 <__ieee754_pow+0x728>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7f5 f808 	bl	8000568 <__aeabi_dmul>
 800b558:	a335      	add	r3, pc, #212	; (adr r3, 800b630 <__ieee754_pow+0x730>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	4606      	mov	r6, r0
 800b560:	460f      	mov	r7, r1
 800b562:	4620      	mov	r0, r4
 800b564:	4629      	mov	r1, r5
 800b566:	f7f4 ffff 	bl	8000568 <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4630      	mov	r0, r6
 800b570:	4639      	mov	r1, r7
 800b572:	f7f4 fe43 	bl	80001fc <__adddf3>
 800b576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b578:	4b38      	ldr	r3, [pc, #224]	; (800b65c <__ieee754_pow+0x75c>)
 800b57a:	4413      	add	r3, r2
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f4 fe3c 	bl	80001fc <__adddf3>
 800b584:	4682      	mov	sl, r0
 800b586:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b588:	468b      	mov	fp, r1
 800b58a:	f7f4 ff83 	bl	8000494 <__aeabi_i2d>
 800b58e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b590:	4b33      	ldr	r3, [pc, #204]	; (800b660 <__ieee754_pow+0x760>)
 800b592:	4413      	add	r3, r2
 800b594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	4652      	mov	r2, sl
 800b59e:	465b      	mov	r3, fp
 800b5a0:	ec51 0b18 	vmov	r0, r1, d8
 800b5a4:	f7f4 fe2a 	bl	80001fc <__adddf3>
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	f7f4 fe26 	bl	80001fc <__adddf3>
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	f7f4 fe22 	bl	80001fc <__adddf3>
 800b5b8:	9c04      	ldr	r4, [sp, #16]
 800b5ba:	4632      	mov	r2, r6
 800b5bc:	463b      	mov	r3, r7
 800b5be:	4620      	mov	r0, r4
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	f7f4 fe19 	bl	80001f8 <__aeabi_dsub>
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	f7f4 fe15 	bl	80001f8 <__aeabi_dsub>
 800b5ce:	ec53 2b18 	vmov	r2, r3, d8
 800b5d2:	f7f4 fe11 	bl	80001f8 <__aeabi_dsub>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4650      	mov	r0, sl
 800b5dc:	4659      	mov	r1, fp
 800b5de:	e606      	b.n	800b1ee <__ieee754_pow+0x2ee>
 800b5e0:	2401      	movs	r4, #1
 800b5e2:	e6a0      	b.n	800b326 <__ieee754_pow+0x426>
 800b5e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b638 <__ieee754_pow+0x738>
 800b5e8:	e60d      	b.n	800b206 <__ieee754_pow+0x306>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	4a454eef 	.word	0x4a454eef
 800b5f4:	3fca7e28 	.word	0x3fca7e28
 800b5f8:	93c9db65 	.word	0x93c9db65
 800b5fc:	3fcd864a 	.word	0x3fcd864a
 800b600:	a91d4101 	.word	0xa91d4101
 800b604:	3fd17460 	.word	0x3fd17460
 800b608:	518f264d 	.word	0x518f264d
 800b60c:	3fd55555 	.word	0x3fd55555
 800b610:	db6fabff 	.word	0xdb6fabff
 800b614:	3fdb6db6 	.word	0x3fdb6db6
 800b618:	33333303 	.word	0x33333303
 800b61c:	3fe33333 	.word	0x3fe33333
 800b620:	e0000000 	.word	0xe0000000
 800b624:	3feec709 	.word	0x3feec709
 800b628:	dc3a03fd 	.word	0xdc3a03fd
 800b62c:	3feec709 	.word	0x3feec709
 800b630:	145b01f5 	.word	0x145b01f5
 800b634:	be3e2fe0 	.word	0xbe3e2fe0
 800b638:	00000000 	.word	0x00000000
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	7ff00000 	.word	0x7ff00000
 800b644:	43400000 	.word	0x43400000
 800b648:	0003988e 	.word	0x0003988e
 800b64c:	000bb679 	.word	0x000bb679
 800b650:	0800cc70 	.word	0x0800cc70
 800b654:	3ff00000 	.word	0x3ff00000
 800b658:	40080000 	.word	0x40080000
 800b65c:	0800cc90 	.word	0x0800cc90
 800b660:	0800cc80 	.word	0x0800cc80
 800b664:	a3b5      	add	r3, pc, #724	; (adr r3, 800b93c <__ieee754_pow+0xa3c>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	4640      	mov	r0, r8
 800b66c:	4649      	mov	r1, r9
 800b66e:	f7f4 fdc5 	bl	80001fc <__adddf3>
 800b672:	4622      	mov	r2, r4
 800b674:	ec41 0b1a 	vmov	d10, r0, r1
 800b678:	462b      	mov	r3, r5
 800b67a:	4630      	mov	r0, r6
 800b67c:	4639      	mov	r1, r7
 800b67e:	f7f4 fdbb 	bl	80001f8 <__aeabi_dsub>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	ec51 0b1a 	vmov	r0, r1, d10
 800b68a:	f7f5 f9fd 	bl	8000a88 <__aeabi_dcmpgt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	f47f adf8 	bne.w	800b284 <__ieee754_pow+0x384>
 800b694:	4aa4      	ldr	r2, [pc, #656]	; (800b928 <__ieee754_pow+0xa28>)
 800b696:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b69a:	4293      	cmp	r3, r2
 800b69c:	f340 810b 	ble.w	800b8b6 <__ieee754_pow+0x9b6>
 800b6a0:	151b      	asrs	r3, r3, #20
 800b6a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b6a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b6aa:	fa4a f303 	asr.w	r3, sl, r3
 800b6ae:	445b      	add	r3, fp
 800b6b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b6b4:	4e9d      	ldr	r6, [pc, #628]	; (800b92c <__ieee754_pow+0xa2c>)
 800b6b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b6ba:	4116      	asrs	r6, r2
 800b6bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	ea23 0106 	bic.w	r1, r3, r6
 800b6c6:	f1c2 0214 	rsb	r2, r2, #20
 800b6ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b6ce:	fa4a fa02 	asr.w	sl, sl, r2
 800b6d2:	f1bb 0f00 	cmp.w	fp, #0
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4620      	mov	r0, r4
 800b6dc:	4629      	mov	r1, r5
 800b6de:	bfb8      	it	lt
 800b6e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800b6e4:	f7f4 fd88 	bl	80001f8 <__aeabi_dsub>
 800b6e8:	ec41 0b19 	vmov	d9, r0, r1
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	ec51 0b19 	vmov	r0, r1, d9
 800b6f4:	f7f4 fd82 	bl	80001fc <__adddf3>
 800b6f8:	2400      	movs	r4, #0
 800b6fa:	a379      	add	r3, pc, #484	; (adr r3, 800b8e0 <__ieee754_pow+0x9e0>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	4620      	mov	r0, r4
 800b702:	460d      	mov	r5, r1
 800b704:	f7f4 ff30 	bl	8000568 <__aeabi_dmul>
 800b708:	ec53 2b19 	vmov	r2, r3, d9
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	4620      	mov	r0, r4
 800b712:	4629      	mov	r1, r5
 800b714:	f7f4 fd70 	bl	80001f8 <__aeabi_dsub>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f4 fd6a 	bl	80001f8 <__aeabi_dsub>
 800b724:	a370      	add	r3, pc, #448	; (adr r3, 800b8e8 <__ieee754_pow+0x9e8>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f7f4 ff1d 	bl	8000568 <__aeabi_dmul>
 800b72e:	a370      	add	r3, pc, #448	; (adr r3, 800b8f0 <__ieee754_pow+0x9f0>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	4680      	mov	r8, r0
 800b736:	4689      	mov	r9, r1
 800b738:	4620      	mov	r0, r4
 800b73a:	4629      	mov	r1, r5
 800b73c:	f7f4 ff14 	bl	8000568 <__aeabi_dmul>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4640      	mov	r0, r8
 800b746:	4649      	mov	r1, r9
 800b748:	f7f4 fd58 	bl	80001fc <__adddf3>
 800b74c:	4604      	mov	r4, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4630      	mov	r0, r6
 800b756:	4639      	mov	r1, r7
 800b758:	f7f4 fd50 	bl	80001fc <__adddf3>
 800b75c:	4632      	mov	r2, r6
 800b75e:	463b      	mov	r3, r7
 800b760:	4680      	mov	r8, r0
 800b762:	4689      	mov	r9, r1
 800b764:	f7f4 fd48 	bl	80001f8 <__aeabi_dsub>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	f7f4 fd42 	bl	80001f8 <__aeabi_dsub>
 800b774:	4642      	mov	r2, r8
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	464b      	mov	r3, r9
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f4 fef2 	bl	8000568 <__aeabi_dmul>
 800b784:	a35c      	add	r3, pc, #368	; (adr r3, 800b8f8 <__ieee754_pow+0x9f8>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	4604      	mov	r4, r0
 800b78c:	460d      	mov	r5, r1
 800b78e:	f7f4 feeb 	bl	8000568 <__aeabi_dmul>
 800b792:	a35b      	add	r3, pc, #364	; (adr r3, 800b900 <__ieee754_pow+0xa00>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f7f4 fd2e 	bl	80001f8 <__aeabi_dsub>
 800b79c:	4622      	mov	r2, r4
 800b79e:	462b      	mov	r3, r5
 800b7a0:	f7f4 fee2 	bl	8000568 <__aeabi_dmul>
 800b7a4:	a358      	add	r3, pc, #352	; (adr r3, 800b908 <__ieee754_pow+0xa08>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 fd27 	bl	80001fc <__adddf3>
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	f7f4 fed9 	bl	8000568 <__aeabi_dmul>
 800b7b6:	a356      	add	r3, pc, #344	; (adr r3, 800b910 <__ieee754_pow+0xa10>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f7f4 fd1c 	bl	80001f8 <__aeabi_dsub>
 800b7c0:	4622      	mov	r2, r4
 800b7c2:	462b      	mov	r3, r5
 800b7c4:	f7f4 fed0 	bl	8000568 <__aeabi_dmul>
 800b7c8:	a353      	add	r3, pc, #332	; (adr r3, 800b918 <__ieee754_pow+0xa18>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f4 fd15 	bl	80001fc <__adddf3>
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	f7f4 fec7 	bl	8000568 <__aeabi_dmul>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	4640      	mov	r0, r8
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	f7f4 fd09 	bl	80001f8 <__aeabi_dsub>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	f7f4 feb9 	bl	8000568 <__aeabi_dmul>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	ec41 0b19 	vmov	d9, r0, r1
 800b7fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fcf8 	bl	80001f8 <__aeabi_dsub>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	ec51 0b19 	vmov	r0, r1, d9
 800b810:	f7f4 ffd4 	bl	80007bc <__aeabi_ddiv>
 800b814:	4632      	mov	r2, r6
 800b816:	4604      	mov	r4, r0
 800b818:	460d      	mov	r5, r1
 800b81a:	463b      	mov	r3, r7
 800b81c:	4640      	mov	r0, r8
 800b81e:	4649      	mov	r1, r9
 800b820:	f7f4 fea2 	bl	8000568 <__aeabi_dmul>
 800b824:	4632      	mov	r2, r6
 800b826:	463b      	mov	r3, r7
 800b828:	f7f4 fce8 	bl	80001fc <__adddf3>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4620      	mov	r0, r4
 800b832:	4629      	mov	r1, r5
 800b834:	f7f4 fce0 	bl	80001f8 <__aeabi_dsub>
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	f7f4 fcdc 	bl	80001f8 <__aeabi_dsub>
 800b840:	460b      	mov	r3, r1
 800b842:	4602      	mov	r2, r0
 800b844:	493a      	ldr	r1, [pc, #232]	; (800b930 <__ieee754_pow+0xa30>)
 800b846:	2000      	movs	r0, #0
 800b848:	f7f4 fcd6 	bl	80001f8 <__aeabi_dsub>
 800b84c:	e9cd 0100 	strd	r0, r1, [sp]
 800b850:	9b01      	ldr	r3, [sp, #4]
 800b852:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b85a:	da2f      	bge.n	800b8bc <__ieee754_pow+0x9bc>
 800b85c:	4650      	mov	r0, sl
 800b85e:	ed9d 0b00 	vldr	d0, [sp]
 800b862:	f001 f919 	bl	800ca98 <scalbn>
 800b866:	ec51 0b10 	vmov	r0, r1, d0
 800b86a:	ec53 2b18 	vmov	r2, r3, d8
 800b86e:	f7ff bbe0 	b.w	800b032 <__ieee754_pow+0x132>
 800b872:	4b30      	ldr	r3, [pc, #192]	; (800b934 <__ieee754_pow+0xa34>)
 800b874:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b878:	429e      	cmp	r6, r3
 800b87a:	f77f af0b 	ble.w	800b694 <__ieee754_pow+0x794>
 800b87e:	4b2e      	ldr	r3, [pc, #184]	; (800b938 <__ieee754_pow+0xa38>)
 800b880:	440b      	add	r3, r1
 800b882:	4303      	orrs	r3, r0
 800b884:	d00b      	beq.n	800b89e <__ieee754_pow+0x99e>
 800b886:	a326      	add	r3, pc, #152	; (adr r3, 800b920 <__ieee754_pow+0xa20>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	ec51 0b18 	vmov	r0, r1, d8
 800b890:	f7f4 fe6a 	bl	8000568 <__aeabi_dmul>
 800b894:	a322      	add	r3, pc, #136	; (adr r3, 800b920 <__ieee754_pow+0xa20>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7ff bbca 	b.w	800b032 <__ieee754_pow+0x132>
 800b89e:	4622      	mov	r2, r4
 800b8a0:	462b      	mov	r3, r5
 800b8a2:	f7f4 fca9 	bl	80001f8 <__aeabi_dsub>
 800b8a6:	4642      	mov	r2, r8
 800b8a8:	464b      	mov	r3, r9
 800b8aa:	f7f5 f8e3 	bl	8000a74 <__aeabi_dcmpge>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f43f aef0 	beq.w	800b694 <__ieee754_pow+0x794>
 800b8b4:	e7e7      	b.n	800b886 <__ieee754_pow+0x986>
 800b8b6:	f04f 0a00 	mov.w	sl, #0
 800b8ba:	e717      	b.n	800b6ec <__ieee754_pow+0x7ec>
 800b8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	e7d2      	b.n	800b86a <__ieee754_pow+0x96a>
 800b8c4:	491a      	ldr	r1, [pc, #104]	; (800b930 <__ieee754_pow+0xa30>)
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f7ff bb9e 	b.w	800b008 <__ieee754_pow+0x108>
 800b8cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d0:	f7ff bb9a 	b.w	800b008 <__ieee754_pow+0x108>
 800b8d4:	9000      	str	r0, [sp, #0]
 800b8d6:	f7ff bb76 	b.w	800afc6 <__ieee754_pow+0xc6>
 800b8da:	2100      	movs	r1, #0
 800b8dc:	f7ff bb60 	b.w	800afa0 <__ieee754_pow+0xa0>
 800b8e0:	00000000 	.word	0x00000000
 800b8e4:	3fe62e43 	.word	0x3fe62e43
 800b8e8:	fefa39ef 	.word	0xfefa39ef
 800b8ec:	3fe62e42 	.word	0x3fe62e42
 800b8f0:	0ca86c39 	.word	0x0ca86c39
 800b8f4:	be205c61 	.word	0xbe205c61
 800b8f8:	72bea4d0 	.word	0x72bea4d0
 800b8fc:	3e663769 	.word	0x3e663769
 800b900:	c5d26bf1 	.word	0xc5d26bf1
 800b904:	3ebbbd41 	.word	0x3ebbbd41
 800b908:	af25de2c 	.word	0xaf25de2c
 800b90c:	3f11566a 	.word	0x3f11566a
 800b910:	16bebd93 	.word	0x16bebd93
 800b914:	3f66c16c 	.word	0x3f66c16c
 800b918:	5555553e 	.word	0x5555553e
 800b91c:	3fc55555 	.word	0x3fc55555
 800b920:	c2f8f359 	.word	0xc2f8f359
 800b924:	01a56e1f 	.word	0x01a56e1f
 800b928:	3fe00000 	.word	0x3fe00000
 800b92c:	000fffff 	.word	0x000fffff
 800b930:	3ff00000 	.word	0x3ff00000
 800b934:	4090cbff 	.word	0x4090cbff
 800b938:	3f6f3400 	.word	0x3f6f3400
 800b93c:	652b82fe 	.word	0x652b82fe
 800b940:	3c971547 	.word	0x3c971547
 800b944:	00000000 	.word	0x00000000

0800b948 <__ieee754_rem_pio2>:
 800b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94c:	ed2d 8b02 	vpush	{d8}
 800b950:	ec55 4b10 	vmov	r4, r5, d0
 800b954:	4bca      	ldr	r3, [pc, #808]	; (800bc80 <__ieee754_rem_pio2+0x338>)
 800b956:	b08b      	sub	sp, #44	; 0x2c
 800b958:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b95c:	4598      	cmp	r8, r3
 800b95e:	4682      	mov	sl, r0
 800b960:	9502      	str	r5, [sp, #8]
 800b962:	dc08      	bgt.n	800b976 <__ieee754_rem_pio2+0x2e>
 800b964:	2200      	movs	r2, #0
 800b966:	2300      	movs	r3, #0
 800b968:	ed80 0b00 	vstr	d0, [r0]
 800b96c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b970:	f04f 0b00 	mov.w	fp, #0
 800b974:	e028      	b.n	800b9c8 <__ieee754_rem_pio2+0x80>
 800b976:	4bc3      	ldr	r3, [pc, #780]	; (800bc84 <__ieee754_rem_pio2+0x33c>)
 800b978:	4598      	cmp	r8, r3
 800b97a:	dc78      	bgt.n	800ba6e <__ieee754_rem_pio2+0x126>
 800b97c:	9b02      	ldr	r3, [sp, #8]
 800b97e:	4ec2      	ldr	r6, [pc, #776]	; (800bc88 <__ieee754_rem_pio2+0x340>)
 800b980:	2b00      	cmp	r3, #0
 800b982:	ee10 0a10 	vmov	r0, s0
 800b986:	a3b0      	add	r3, pc, #704	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x300>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	4629      	mov	r1, r5
 800b98e:	dd39      	ble.n	800ba04 <__ieee754_rem_pio2+0xbc>
 800b990:	f7f4 fc32 	bl	80001f8 <__aeabi_dsub>
 800b994:	45b0      	cmp	r8, r6
 800b996:	4604      	mov	r4, r0
 800b998:	460d      	mov	r5, r1
 800b99a:	d01b      	beq.n	800b9d4 <__ieee754_rem_pio2+0x8c>
 800b99c:	a3ac      	add	r3, pc, #688	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x308>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fc29 	bl	80001f8 <__aeabi_dsub>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	e9ca 2300 	strd	r2, r3, [sl]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	f7f4 fc21 	bl	80001f8 <__aeabi_dsub>
 800b9b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x308>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f7f4 fc1c 	bl	80001f8 <__aeabi_dsub>
 800b9c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9c4:	f04f 0b01 	mov.w	fp, #1
 800b9c8:	4658      	mov	r0, fp
 800b9ca:	b00b      	add	sp, #44	; 0x2c
 800b9cc:	ecbd 8b02 	vpop	{d8}
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x310>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f7f4 fc0d 	bl	80001f8 <__aeabi_dsub>
 800b9de:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x318>)
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	460d      	mov	r5, r1
 800b9e8:	f7f4 fc06 	bl	80001f8 <__aeabi_dsub>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	e9ca 2300 	strd	r2, r3, [sl]
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	f7f4 fbfe 	bl	80001f8 <__aeabi_dsub>
 800b9fc:	a398      	add	r3, pc, #608	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x318>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	e7db      	b.n	800b9bc <__ieee754_rem_pio2+0x74>
 800ba04:	f7f4 fbfa 	bl	80001fc <__adddf3>
 800ba08:	45b0      	cmp	r8, r6
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	d016      	beq.n	800ba3e <__ieee754_rem_pio2+0xf6>
 800ba10:	a38f      	add	r3, pc, #572	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x308>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fbf1 	bl	80001fc <__adddf3>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	e9ca 2300 	strd	r2, r3, [sl]
 800ba22:	4620      	mov	r0, r4
 800ba24:	4629      	mov	r1, r5
 800ba26:	f7f4 fbe7 	bl	80001f8 <__aeabi_dsub>
 800ba2a:	a389      	add	r3, pc, #548	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x308>)
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f7f4 fbe4 	bl	80001fc <__adddf3>
 800ba34:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ba38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba3c:	e7c4      	b.n	800b9c8 <__ieee754_rem_pio2+0x80>
 800ba3e:	a386      	add	r3, pc, #536	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x310>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fbda 	bl	80001fc <__adddf3>
 800ba48:	a385      	add	r3, pc, #532	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x318>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	f7f4 fbd3 	bl	80001fc <__adddf3>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	e9ca 2300 	strd	r2, r3, [sl]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f4 fbc9 	bl	80001f8 <__aeabi_dsub>
 800ba66:	a37e      	add	r3, pc, #504	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x318>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	e7e0      	b.n	800ba30 <__ieee754_rem_pio2+0xe8>
 800ba6e:	4b87      	ldr	r3, [pc, #540]	; (800bc8c <__ieee754_rem_pio2+0x344>)
 800ba70:	4598      	cmp	r8, r3
 800ba72:	f300 80d9 	bgt.w	800bc28 <__ieee754_rem_pio2+0x2e0>
 800ba76:	f7fe fd97 	bl	800a5a8 <fabs>
 800ba7a:	ec55 4b10 	vmov	r4, r5, d0
 800ba7e:	ee10 0a10 	vmov	r0, s0
 800ba82:	a379      	add	r3, pc, #484	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x320>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f4 fd6d 	bl	8000568 <__aeabi_dmul>
 800ba8e:	4b80      	ldr	r3, [pc, #512]	; (800bc90 <__ieee754_rem_pio2+0x348>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	f7f4 fbb3 	bl	80001fc <__adddf3>
 800ba96:	f7f5 f817 	bl	8000ac8 <__aeabi_d2iz>
 800ba9a:	4683      	mov	fp, r0
 800ba9c:	f7f4 fcfa 	bl	8000494 <__aeabi_i2d>
 800baa0:	4602      	mov	r2, r0
 800baa2:	460b      	mov	r3, r1
 800baa4:	ec43 2b18 	vmov	d8, r2, r3
 800baa8:	a367      	add	r3, pc, #412	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x300>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fd5b 	bl	8000568 <__aeabi_dmul>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fb9d 	bl	80001f8 <__aeabi_dsub>
 800babe:	a364      	add	r3, pc, #400	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x308>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	4606      	mov	r6, r0
 800bac6:	460f      	mov	r7, r1
 800bac8:	ec51 0b18 	vmov	r0, r1, d8
 800bacc:	f7f4 fd4c 	bl	8000568 <__aeabi_dmul>
 800bad0:	f1bb 0f1f 	cmp.w	fp, #31
 800bad4:	4604      	mov	r4, r0
 800bad6:	460d      	mov	r5, r1
 800bad8:	dc0d      	bgt.n	800baf6 <__ieee754_rem_pio2+0x1ae>
 800bada:	4b6e      	ldr	r3, [pc, #440]	; (800bc94 <__ieee754_rem_pio2+0x34c>)
 800badc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800bae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae4:	4543      	cmp	r3, r8
 800bae6:	d006      	beq.n	800baf6 <__ieee754_rem_pio2+0x1ae>
 800bae8:	4622      	mov	r2, r4
 800baea:	462b      	mov	r3, r5
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 fb82 	bl	80001f8 <__aeabi_dsub>
 800baf4:	e00f      	b.n	800bb16 <__ieee754_rem_pio2+0x1ce>
 800baf6:	462b      	mov	r3, r5
 800baf8:	4622      	mov	r2, r4
 800bafa:	4630      	mov	r0, r6
 800bafc:	4639      	mov	r1, r7
 800bafe:	f7f4 fb7b 	bl	80001f8 <__aeabi_dsub>
 800bb02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb06:	9303      	str	r3, [sp, #12]
 800bb08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bb10:	f1b8 0f10 	cmp.w	r8, #16
 800bb14:	dc02      	bgt.n	800bb1c <__ieee754_rem_pio2+0x1d4>
 800bb16:	e9ca 0100 	strd	r0, r1, [sl]
 800bb1a:	e039      	b.n	800bb90 <__ieee754_rem_pio2+0x248>
 800bb1c:	a34e      	add	r3, pc, #312	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x310>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	ec51 0b18 	vmov	r0, r1, d8
 800bb26:	f7f4 fd1f 	bl	8000568 <__aeabi_dmul>
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	460d      	mov	r5, r1
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4630      	mov	r0, r6
 800bb34:	4639      	mov	r1, r7
 800bb36:	f7f4 fb5f 	bl	80001f8 <__aeabi_dsub>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4680      	mov	r8, r0
 800bb40:	4689      	mov	r9, r1
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fb57 	bl	80001f8 <__aeabi_dsub>
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	462b      	mov	r3, r5
 800bb4e:	f7f4 fb53 	bl	80001f8 <__aeabi_dsub>
 800bb52:	a343      	add	r3, pc, #268	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x318>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	4604      	mov	r4, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	ec51 0b18 	vmov	r0, r1, d8
 800bb60:	f7f4 fd02 	bl	8000568 <__aeabi_dmul>
 800bb64:	4622      	mov	r2, r4
 800bb66:	462b      	mov	r3, r5
 800bb68:	f7f4 fb46 	bl	80001f8 <__aeabi_dsub>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4604      	mov	r4, r0
 800bb72:	460d      	mov	r5, r1
 800bb74:	4640      	mov	r0, r8
 800bb76:	4649      	mov	r1, r9
 800bb78:	f7f4 fb3e 	bl	80001f8 <__aeabi_dsub>
 800bb7c:	9a03      	ldr	r2, [sp, #12]
 800bb7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b31      	cmp	r3, #49	; 0x31
 800bb86:	dc24      	bgt.n	800bbd2 <__ieee754_rem_pio2+0x28a>
 800bb88:	e9ca 0100 	strd	r0, r1, [sl]
 800bb8c:	4646      	mov	r6, r8
 800bb8e:	464f      	mov	r7, r9
 800bb90:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb94:	4630      	mov	r0, r6
 800bb96:	4642      	mov	r2, r8
 800bb98:	464b      	mov	r3, r9
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f4 fb2c 	bl	80001f8 <__aeabi_dsub>
 800bba0:	462b      	mov	r3, r5
 800bba2:	4622      	mov	r2, r4
 800bba4:	f7f4 fb28 	bl	80001f8 <__aeabi_dsub>
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbb0:	f6bf af0a 	bge.w	800b9c8 <__ieee754_rem_pio2+0x80>
 800bbb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bbb8:	f8ca 3004 	str.w	r3, [sl, #4]
 800bbbc:	f8ca 8000 	str.w	r8, [sl]
 800bbc0:	f8ca 0008 	str.w	r0, [sl, #8]
 800bbc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbc8:	f8ca 300c 	str.w	r3, [sl, #12]
 800bbcc:	f1cb 0b00 	rsb	fp, fp, #0
 800bbd0:	e6fa      	b.n	800b9c8 <__ieee754_rem_pio2+0x80>
 800bbd2:	a327      	add	r3, pc, #156	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x328>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	ec51 0b18 	vmov	r0, r1, d8
 800bbdc:	f7f4 fcc4 	bl	8000568 <__aeabi_dmul>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4640      	mov	r0, r8
 800bbea:	4649      	mov	r1, r9
 800bbec:	f7f4 fb04 	bl	80001f8 <__aeabi_dsub>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	460f      	mov	r7, r1
 800bbf8:	4640      	mov	r0, r8
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	f7f4 fafc 	bl	80001f8 <__aeabi_dsub>
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	f7f4 faf8 	bl	80001f8 <__aeabi_dsub>
 800bc08:	a31b      	add	r3, pc, #108	; (adr r3, 800bc78 <__ieee754_rem_pio2+0x330>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	4604      	mov	r4, r0
 800bc10:	460d      	mov	r5, r1
 800bc12:	ec51 0b18 	vmov	r0, r1, d8
 800bc16:	f7f4 fca7 	bl	8000568 <__aeabi_dmul>
 800bc1a:	4622      	mov	r2, r4
 800bc1c:	462b      	mov	r3, r5
 800bc1e:	f7f4 faeb 	bl	80001f8 <__aeabi_dsub>
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	e75f      	b.n	800bae8 <__ieee754_rem_pio2+0x1a0>
 800bc28:	4b1b      	ldr	r3, [pc, #108]	; (800bc98 <__ieee754_rem_pio2+0x350>)
 800bc2a:	4598      	cmp	r8, r3
 800bc2c:	dd36      	ble.n	800bc9c <__ieee754_rem_pio2+0x354>
 800bc2e:	ee10 2a10 	vmov	r2, s0
 800bc32:	462b      	mov	r3, r5
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fade 	bl	80001f8 <__aeabi_dsub>
 800bc3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc40:	e9ca 0100 	strd	r0, r1, [sl]
 800bc44:	e694      	b.n	800b970 <__ieee754_rem_pio2+0x28>
 800bc46:	bf00      	nop
 800bc48:	54400000 	.word	0x54400000
 800bc4c:	3ff921fb 	.word	0x3ff921fb
 800bc50:	1a626331 	.word	0x1a626331
 800bc54:	3dd0b461 	.word	0x3dd0b461
 800bc58:	1a600000 	.word	0x1a600000
 800bc5c:	3dd0b461 	.word	0x3dd0b461
 800bc60:	2e037073 	.word	0x2e037073
 800bc64:	3ba3198a 	.word	0x3ba3198a
 800bc68:	6dc9c883 	.word	0x6dc9c883
 800bc6c:	3fe45f30 	.word	0x3fe45f30
 800bc70:	2e000000 	.word	0x2e000000
 800bc74:	3ba3198a 	.word	0x3ba3198a
 800bc78:	252049c1 	.word	0x252049c1
 800bc7c:	397b839a 	.word	0x397b839a
 800bc80:	3fe921fb 	.word	0x3fe921fb
 800bc84:	4002d97b 	.word	0x4002d97b
 800bc88:	3ff921fb 	.word	0x3ff921fb
 800bc8c:	413921fb 	.word	0x413921fb
 800bc90:	3fe00000 	.word	0x3fe00000
 800bc94:	0800cca0 	.word	0x0800cca0
 800bc98:	7fefffff 	.word	0x7fefffff
 800bc9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bca0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bca4:	ee10 0a10 	vmov	r0, s0
 800bca8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bcac:	ee10 6a10 	vmov	r6, s0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	f7f4 ff09 	bl	8000ac8 <__aeabi_d2iz>
 800bcb6:	f7f4 fbed 	bl	8000494 <__aeabi_i2d>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	4639      	mov	r1, r7
 800bcc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcc6:	f7f4 fa97 	bl	80001f8 <__aeabi_dsub>
 800bcca:	4b22      	ldr	r3, [pc, #136]	; (800bd54 <__ieee754_rem_pio2+0x40c>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	f7f4 fc4b 	bl	8000568 <__aeabi_dmul>
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	f7f4 fef7 	bl	8000ac8 <__aeabi_d2iz>
 800bcda:	f7f4 fbdb 	bl	8000494 <__aeabi_i2d>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcea:	f7f4 fa85 	bl	80001f8 <__aeabi_dsub>
 800bcee:	4b19      	ldr	r3, [pc, #100]	; (800bd54 <__ieee754_rem_pio2+0x40c>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f7f4 fc39 	bl	8000568 <__aeabi_dmul>
 800bcf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcfa:	ad04      	add	r5, sp, #16
 800bcfc:	f04f 0803 	mov.w	r8, #3
 800bd00:	46a9      	mov	r9, r5
 800bd02:	2600      	movs	r6, #0
 800bd04:	2700      	movs	r7, #0
 800bd06:	4632      	mov	r2, r6
 800bd08:	463b      	mov	r3, r7
 800bd0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bd0e:	46c3      	mov	fp, r8
 800bd10:	3d08      	subs	r5, #8
 800bd12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bd16:	f7f4 fe8f 	bl	8000a38 <__aeabi_dcmpeq>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d1f3      	bne.n	800bd06 <__ieee754_rem_pio2+0x3be>
 800bd1e:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <__ieee754_rem_pio2+0x410>)
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	2302      	movs	r3, #2
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	4622      	mov	r2, r4
 800bd28:	465b      	mov	r3, fp
 800bd2a:	4651      	mov	r1, sl
 800bd2c:	4648      	mov	r0, r9
 800bd2e:	f000 f993 	bl	800c058 <__kernel_rem_pio2>
 800bd32:	9b02      	ldr	r3, [sp, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	4683      	mov	fp, r0
 800bd38:	f6bf ae46 	bge.w	800b9c8 <__ieee754_rem_pio2+0x80>
 800bd3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bd40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd44:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd48:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bd4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd50:	e73a      	b.n	800bbc8 <__ieee754_rem_pio2+0x280>
 800bd52:	bf00      	nop
 800bd54:	41700000 	.word	0x41700000
 800bd58:	0800cd20 	.word	0x0800cd20

0800bd5c <__ieee754_sqrt>:
 800bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd60:	ec55 4b10 	vmov	r4, r5, d0
 800bd64:	4e56      	ldr	r6, [pc, #344]	; (800bec0 <__ieee754_sqrt+0x164>)
 800bd66:	43ae      	bics	r6, r5
 800bd68:	ee10 0a10 	vmov	r0, s0
 800bd6c:	ee10 3a10 	vmov	r3, s0
 800bd70:	4629      	mov	r1, r5
 800bd72:	462a      	mov	r2, r5
 800bd74:	d110      	bne.n	800bd98 <__ieee754_sqrt+0x3c>
 800bd76:	ee10 2a10 	vmov	r2, s0
 800bd7a:	462b      	mov	r3, r5
 800bd7c:	f7f4 fbf4 	bl	8000568 <__aeabi_dmul>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	4620      	mov	r0, r4
 800bd86:	4629      	mov	r1, r5
 800bd88:	f7f4 fa38 	bl	80001fc <__adddf3>
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	460d      	mov	r5, r1
 800bd90:	ec45 4b10 	vmov	d0, r4, r5
 800bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd98:	2d00      	cmp	r5, #0
 800bd9a:	dc10      	bgt.n	800bdbe <__ieee754_sqrt+0x62>
 800bd9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bda0:	4330      	orrs	r0, r6
 800bda2:	d0f5      	beq.n	800bd90 <__ieee754_sqrt+0x34>
 800bda4:	b15d      	cbz	r5, 800bdbe <__ieee754_sqrt+0x62>
 800bda6:	ee10 2a10 	vmov	r2, s0
 800bdaa:	462b      	mov	r3, r5
 800bdac:	ee10 0a10 	vmov	r0, s0
 800bdb0:	f7f4 fa22 	bl	80001f8 <__aeabi_dsub>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	f7f4 fd00 	bl	80007bc <__aeabi_ddiv>
 800bdbc:	e7e6      	b.n	800bd8c <__ieee754_sqrt+0x30>
 800bdbe:	1509      	asrs	r1, r1, #20
 800bdc0:	d076      	beq.n	800beb0 <__ieee754_sqrt+0x154>
 800bdc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bdc6:	07ce      	lsls	r6, r1, #31
 800bdc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bdcc:	bf5e      	ittt	pl
 800bdce:	0fda      	lsrpl	r2, r3, #31
 800bdd0:	005b      	lslpl	r3, r3, #1
 800bdd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bdd6:	0fda      	lsrs	r2, r3, #31
 800bdd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bddc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bde0:	2000      	movs	r0, #0
 800bde2:	106d      	asrs	r5, r5, #1
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	f04f 0e16 	mov.w	lr, #22
 800bdea:	4684      	mov	ip, r0
 800bdec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdf0:	eb0c 0401 	add.w	r4, ip, r1
 800bdf4:	4294      	cmp	r4, r2
 800bdf6:	bfde      	ittt	le
 800bdf8:	1b12      	suble	r2, r2, r4
 800bdfa:	eb04 0c01 	addle.w	ip, r4, r1
 800bdfe:	1840      	addle	r0, r0, r1
 800be00:	0052      	lsls	r2, r2, #1
 800be02:	f1be 0e01 	subs.w	lr, lr, #1
 800be06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be12:	d1ed      	bne.n	800bdf0 <__ieee754_sqrt+0x94>
 800be14:	4671      	mov	r1, lr
 800be16:	2720      	movs	r7, #32
 800be18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be1c:	4562      	cmp	r2, ip
 800be1e:	eb04 060e 	add.w	r6, r4, lr
 800be22:	dc02      	bgt.n	800be2a <__ieee754_sqrt+0xce>
 800be24:	d113      	bne.n	800be4e <__ieee754_sqrt+0xf2>
 800be26:	429e      	cmp	r6, r3
 800be28:	d811      	bhi.n	800be4e <__ieee754_sqrt+0xf2>
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	eb06 0e04 	add.w	lr, r6, r4
 800be30:	da43      	bge.n	800beba <__ieee754_sqrt+0x15e>
 800be32:	f1be 0f00 	cmp.w	lr, #0
 800be36:	db40      	blt.n	800beba <__ieee754_sqrt+0x15e>
 800be38:	f10c 0801 	add.w	r8, ip, #1
 800be3c:	eba2 020c 	sub.w	r2, r2, ip
 800be40:	429e      	cmp	r6, r3
 800be42:	bf88      	it	hi
 800be44:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800be48:	1b9b      	subs	r3, r3, r6
 800be4a:	4421      	add	r1, r4
 800be4c:	46c4      	mov	ip, r8
 800be4e:	0052      	lsls	r2, r2, #1
 800be50:	3f01      	subs	r7, #1
 800be52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800be5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be5e:	d1dd      	bne.n	800be1c <__ieee754_sqrt+0xc0>
 800be60:	4313      	orrs	r3, r2
 800be62:	d006      	beq.n	800be72 <__ieee754_sqrt+0x116>
 800be64:	1c4c      	adds	r4, r1, #1
 800be66:	bf13      	iteet	ne
 800be68:	3101      	addne	r1, #1
 800be6a:	3001      	addeq	r0, #1
 800be6c:	4639      	moveq	r1, r7
 800be6e:	f021 0101 	bicne.w	r1, r1, #1
 800be72:	1043      	asrs	r3, r0, #1
 800be74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be78:	0849      	lsrs	r1, r1, #1
 800be7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be7e:	07c2      	lsls	r2, r0, #31
 800be80:	bf48      	it	mi
 800be82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800be86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800be8a:	460c      	mov	r4, r1
 800be8c:	463d      	mov	r5, r7
 800be8e:	e77f      	b.n	800bd90 <__ieee754_sqrt+0x34>
 800be90:	0ada      	lsrs	r2, r3, #11
 800be92:	3815      	subs	r0, #21
 800be94:	055b      	lsls	r3, r3, #21
 800be96:	2a00      	cmp	r2, #0
 800be98:	d0fa      	beq.n	800be90 <__ieee754_sqrt+0x134>
 800be9a:	02d7      	lsls	r7, r2, #11
 800be9c:	d50a      	bpl.n	800beb4 <__ieee754_sqrt+0x158>
 800be9e:	f1c1 0420 	rsb	r4, r1, #32
 800bea2:	fa23 f404 	lsr.w	r4, r3, r4
 800bea6:	1e4d      	subs	r5, r1, #1
 800bea8:	408b      	lsls	r3, r1
 800beaa:	4322      	orrs	r2, r4
 800beac:	1b41      	subs	r1, r0, r5
 800beae:	e788      	b.n	800bdc2 <__ieee754_sqrt+0x66>
 800beb0:	4608      	mov	r0, r1
 800beb2:	e7f0      	b.n	800be96 <__ieee754_sqrt+0x13a>
 800beb4:	0052      	lsls	r2, r2, #1
 800beb6:	3101      	adds	r1, #1
 800beb8:	e7ef      	b.n	800be9a <__ieee754_sqrt+0x13e>
 800beba:	46e0      	mov	r8, ip
 800bebc:	e7be      	b.n	800be3c <__ieee754_sqrt+0xe0>
 800bebe:	bf00      	nop
 800bec0:	7ff00000 	.word	0x7ff00000
 800bec4:	00000000 	.word	0x00000000

0800bec8 <__kernel_cos>:
 800bec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	ec57 6b10 	vmov	r6, r7, d0
 800bed0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bed4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bed8:	ed8d 1b00 	vstr	d1, [sp]
 800bedc:	da07      	bge.n	800beee <__kernel_cos+0x26>
 800bede:	ee10 0a10 	vmov	r0, s0
 800bee2:	4639      	mov	r1, r7
 800bee4:	f7f4 fdf0 	bl	8000ac8 <__aeabi_d2iz>
 800bee8:	2800      	cmp	r0, #0
 800beea:	f000 8088 	beq.w	800bffe <__kernel_cos+0x136>
 800beee:	4632      	mov	r2, r6
 800bef0:	463b      	mov	r3, r7
 800bef2:	4630      	mov	r0, r6
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 fb37 	bl	8000568 <__aeabi_dmul>
 800befa:	4b51      	ldr	r3, [pc, #324]	; (800c040 <__kernel_cos+0x178>)
 800befc:	2200      	movs	r2, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	f7f4 fb31 	bl	8000568 <__aeabi_dmul>
 800bf06:	a340      	add	r3, pc, #256	; (adr r3, 800c008 <__kernel_cos+0x140>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	468b      	mov	fp, r1
 800bf10:	4620      	mov	r0, r4
 800bf12:	4629      	mov	r1, r5
 800bf14:	f7f4 fb28 	bl	8000568 <__aeabi_dmul>
 800bf18:	a33d      	add	r3, pc, #244	; (adr r3, 800c010 <__kernel_cos+0x148>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 f96d 	bl	80001fc <__adddf3>
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fb1f 	bl	8000568 <__aeabi_dmul>
 800bf2a:	a33b      	add	r3, pc, #236	; (adr r3, 800c018 <__kernel_cos+0x150>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 f962 	bl	80001f8 <__aeabi_dsub>
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	f7f4 fb16 	bl	8000568 <__aeabi_dmul>
 800bf3c:	a338      	add	r3, pc, #224	; (adr r3, 800c020 <__kernel_cos+0x158>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f95b 	bl	80001fc <__adddf3>
 800bf46:	4622      	mov	r2, r4
 800bf48:	462b      	mov	r3, r5
 800bf4a:	f7f4 fb0d 	bl	8000568 <__aeabi_dmul>
 800bf4e:	a336      	add	r3, pc, #216	; (adr r3, 800c028 <__kernel_cos+0x160>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 f950 	bl	80001f8 <__aeabi_dsub>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	f7f4 fb04 	bl	8000568 <__aeabi_dmul>
 800bf60:	a333      	add	r3, pc, #204	; (adr r3, 800c030 <__kernel_cos+0x168>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	f7f4 f949 	bl	80001fc <__adddf3>
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	f7f4 fafb 	bl	8000568 <__aeabi_dmul>
 800bf72:	4622      	mov	r2, r4
 800bf74:	462b      	mov	r3, r5
 800bf76:	f7f4 faf7 	bl	8000568 <__aeabi_dmul>
 800bf7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf7e:	4604      	mov	r4, r0
 800bf80:	460d      	mov	r5, r1
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 faef 	bl	8000568 <__aeabi_dmul>
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	4629      	mov	r1, r5
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7f4 f931 	bl	80001f8 <__aeabi_dsub>
 800bf96:	4b2b      	ldr	r3, [pc, #172]	; (800c044 <__kernel_cos+0x17c>)
 800bf98:	4598      	cmp	r8, r3
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	460f      	mov	r7, r1
 800bf9e:	dc10      	bgt.n	800bfc2 <__kernel_cos+0xfa>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4650      	mov	r0, sl
 800bfa6:	4659      	mov	r1, fp
 800bfa8:	f7f4 f926 	bl	80001f8 <__aeabi_dsub>
 800bfac:	460b      	mov	r3, r1
 800bfae:	4926      	ldr	r1, [pc, #152]	; (800c048 <__kernel_cos+0x180>)
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7f4 f920 	bl	80001f8 <__aeabi_dsub>
 800bfb8:	ec41 0b10 	vmov	d0, r0, r1
 800bfbc:	b003      	add	sp, #12
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc2:	4b22      	ldr	r3, [pc, #136]	; (800c04c <__kernel_cos+0x184>)
 800bfc4:	4920      	ldr	r1, [pc, #128]	; (800c048 <__kernel_cos+0x180>)
 800bfc6:	4598      	cmp	r8, r3
 800bfc8:	bfcc      	ite	gt
 800bfca:	4d21      	ldrgt	r5, [pc, #132]	; (800c050 <__kernel_cos+0x188>)
 800bfcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bfd0:	2400      	movs	r4, #0
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f7f4 f90e 	bl	80001f8 <__aeabi_dsub>
 800bfdc:	4622      	mov	r2, r4
 800bfde:	4680      	mov	r8, r0
 800bfe0:	4689      	mov	r9, r1
 800bfe2:	462b      	mov	r3, r5
 800bfe4:	4650      	mov	r0, sl
 800bfe6:	4659      	mov	r1, fp
 800bfe8:	f7f4 f906 	bl	80001f8 <__aeabi_dsub>
 800bfec:	4632      	mov	r2, r6
 800bfee:	463b      	mov	r3, r7
 800bff0:	f7f4 f902 	bl	80001f8 <__aeabi_dsub>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	4640      	mov	r0, r8
 800bffa:	4649      	mov	r1, r9
 800bffc:	e7da      	b.n	800bfb4 <__kernel_cos+0xec>
 800bffe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c038 <__kernel_cos+0x170>
 800c002:	e7db      	b.n	800bfbc <__kernel_cos+0xf4>
 800c004:	f3af 8000 	nop.w
 800c008:	be8838d4 	.word	0xbe8838d4
 800c00c:	bda8fae9 	.word	0xbda8fae9
 800c010:	bdb4b1c4 	.word	0xbdb4b1c4
 800c014:	3e21ee9e 	.word	0x3e21ee9e
 800c018:	809c52ad 	.word	0x809c52ad
 800c01c:	3e927e4f 	.word	0x3e927e4f
 800c020:	19cb1590 	.word	0x19cb1590
 800c024:	3efa01a0 	.word	0x3efa01a0
 800c028:	16c15177 	.word	0x16c15177
 800c02c:	3f56c16c 	.word	0x3f56c16c
 800c030:	5555554c 	.word	0x5555554c
 800c034:	3fa55555 	.word	0x3fa55555
 800c038:	00000000 	.word	0x00000000
 800c03c:	3ff00000 	.word	0x3ff00000
 800c040:	3fe00000 	.word	0x3fe00000
 800c044:	3fd33332 	.word	0x3fd33332
 800c048:	3ff00000 	.word	0x3ff00000
 800c04c:	3fe90000 	.word	0x3fe90000
 800c050:	3fd20000 	.word	0x3fd20000
 800c054:	00000000 	.word	0x00000000

0800c058 <__kernel_rem_pio2>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	ed2d 8b02 	vpush	{d8}
 800c060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c064:	f112 0f14 	cmn.w	r2, #20
 800c068:	9308      	str	r3, [sp, #32]
 800c06a:	9101      	str	r1, [sp, #4]
 800c06c:	4bc6      	ldr	r3, [pc, #792]	; (800c388 <__kernel_rem_pio2+0x330>)
 800c06e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c070:	9009      	str	r0, [sp, #36]	; 0x24
 800c072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c076:	9304      	str	r3, [sp, #16]
 800c078:	9b08      	ldr	r3, [sp, #32]
 800c07a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c07e:	bfa8      	it	ge
 800c080:	1ed4      	subge	r4, r2, #3
 800c082:	9306      	str	r3, [sp, #24]
 800c084:	bfb2      	itee	lt
 800c086:	2400      	movlt	r4, #0
 800c088:	2318      	movge	r3, #24
 800c08a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c08e:	f06f 0317 	mvn.w	r3, #23
 800c092:	fb04 3303 	mla	r3, r4, r3, r3
 800c096:	eb03 0a02 	add.w	sl, r3, r2
 800c09a:	9b04      	ldr	r3, [sp, #16]
 800c09c:	9a06      	ldr	r2, [sp, #24]
 800c09e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c378 <__kernel_rem_pio2+0x320>
 800c0a2:	eb03 0802 	add.w	r8, r3, r2
 800c0a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c0a8:	1aa7      	subs	r7, r4, r2
 800c0aa:	ae20      	add	r6, sp, #128	; 0x80
 800c0ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	4545      	cmp	r5, r8
 800c0b4:	dd18      	ble.n	800c0e8 <__kernel_rem_pio2+0x90>
 800c0b6:	9b08      	ldr	r3, [sp, #32]
 800c0b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c0bc:	aa20      	add	r2, sp, #128	; 0x80
 800c0be:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c378 <__kernel_rem_pio2+0x320>
 800c0c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c0c6:	f1c3 0301 	rsb	r3, r3, #1
 800c0ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c0ce:	9307      	str	r3, [sp, #28]
 800c0d0:	9b07      	ldr	r3, [sp, #28]
 800c0d2:	9a04      	ldr	r2, [sp, #16]
 800c0d4:	4443      	add	r3, r8
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	db2f      	blt.n	800c13a <__kernel_rem_pio2+0xe2>
 800c0da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0de:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c0e2:	462f      	mov	r7, r5
 800c0e4:	2600      	movs	r6, #0
 800c0e6:	e01b      	b.n	800c120 <__kernel_rem_pio2+0xc8>
 800c0e8:	42ef      	cmn	r7, r5
 800c0ea:	d407      	bmi.n	800c0fc <__kernel_rem_pio2+0xa4>
 800c0ec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0f0:	f7f4 f9d0 	bl	8000494 <__aeabi_i2d>
 800c0f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0f8:	3501      	adds	r5, #1
 800c0fa:	e7da      	b.n	800c0b2 <__kernel_rem_pio2+0x5a>
 800c0fc:	ec51 0b18 	vmov	r0, r1, d8
 800c100:	e7f8      	b.n	800c0f4 <__kernel_rem_pio2+0x9c>
 800c102:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c106:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c10a:	f7f4 fa2d 	bl	8000568 <__aeabi_dmul>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c116:	f7f4 f871 	bl	80001fc <__adddf3>
 800c11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c11e:	3601      	adds	r6, #1
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	429e      	cmp	r6, r3
 800c124:	f1a7 0708 	sub.w	r7, r7, #8
 800c128:	ddeb      	ble.n	800c102 <__kernel_rem_pio2+0xaa>
 800c12a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c12e:	3508      	adds	r5, #8
 800c130:	ecab 7b02 	vstmia	fp!, {d7}
 800c134:	f108 0801 	add.w	r8, r8, #1
 800c138:	e7ca      	b.n	800c0d0 <__kernel_rem_pio2+0x78>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	aa0c      	add	r2, sp, #48	; 0x30
 800c13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c142:	930b      	str	r3, [sp, #44]	; 0x2c
 800c144:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c146:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c14a:	9c04      	ldr	r4, [sp, #16]
 800c14c:	930a      	str	r3, [sp, #40]	; 0x28
 800c14e:	ab98      	add	r3, sp, #608	; 0x260
 800c150:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c154:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c158:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c15c:	f8cd b008 	str.w	fp, [sp, #8]
 800c160:	4625      	mov	r5, r4
 800c162:	2d00      	cmp	r5, #0
 800c164:	dc78      	bgt.n	800c258 <__kernel_rem_pio2+0x200>
 800c166:	ec47 6b10 	vmov	d0, r6, r7
 800c16a:	4650      	mov	r0, sl
 800c16c:	f000 fc94 	bl	800ca98 <scalbn>
 800c170:	ec57 6b10 	vmov	r6, r7, d0
 800c174:	2200      	movs	r2, #0
 800c176:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c17a:	ee10 0a10 	vmov	r0, s0
 800c17e:	4639      	mov	r1, r7
 800c180:	f7f4 f9f2 	bl	8000568 <__aeabi_dmul>
 800c184:	ec41 0b10 	vmov	d0, r0, r1
 800c188:	f000 fb72 	bl	800c870 <floor>
 800c18c:	4b7f      	ldr	r3, [pc, #508]	; (800c38c <__kernel_rem_pio2+0x334>)
 800c18e:	ec51 0b10 	vmov	r0, r1, d0
 800c192:	2200      	movs	r2, #0
 800c194:	f7f4 f9e8 	bl	8000568 <__aeabi_dmul>
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4630      	mov	r0, r6
 800c19e:	4639      	mov	r1, r7
 800c1a0:	f7f4 f82a 	bl	80001f8 <__aeabi_dsub>
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	f7f4 fc8e 	bl	8000ac8 <__aeabi_d2iz>
 800c1ac:	9007      	str	r0, [sp, #28]
 800c1ae:	f7f4 f971 	bl	8000494 <__aeabi_i2d>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	f7f4 f81d 	bl	80001f8 <__aeabi_dsub>
 800c1be:	f1ba 0f00 	cmp.w	sl, #0
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	dd70      	ble.n	800c2aa <__kernel_rem_pio2+0x252>
 800c1c8:	1e62      	subs	r2, r4, #1
 800c1ca:	ab0c      	add	r3, sp, #48	; 0x30
 800c1cc:	9d07      	ldr	r5, [sp, #28]
 800c1ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c1d2:	f1ca 0118 	rsb	r1, sl, #24
 800c1d6:	fa40 f301 	asr.w	r3, r0, r1
 800c1da:	441d      	add	r5, r3
 800c1dc:	408b      	lsls	r3, r1
 800c1de:	1ac0      	subs	r0, r0, r3
 800c1e0:	ab0c      	add	r3, sp, #48	; 0x30
 800c1e2:	9507      	str	r5, [sp, #28]
 800c1e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c1e8:	f1ca 0317 	rsb	r3, sl, #23
 800c1ec:	fa40 f303 	asr.w	r3, r0, r3
 800c1f0:	9302      	str	r3, [sp, #8]
 800c1f2:	9b02      	ldr	r3, [sp, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	dd66      	ble.n	800c2c6 <__kernel_rem_pio2+0x26e>
 800c1f8:	9b07      	ldr	r3, [sp, #28]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	9307      	str	r3, [sp, #28]
 800c200:	4615      	mov	r5, r2
 800c202:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c206:	4294      	cmp	r4, r2
 800c208:	f300 8099 	bgt.w	800c33e <__kernel_rem_pio2+0x2e6>
 800c20c:	f1ba 0f00 	cmp.w	sl, #0
 800c210:	dd07      	ble.n	800c222 <__kernel_rem_pio2+0x1ca>
 800c212:	f1ba 0f01 	cmp.w	sl, #1
 800c216:	f000 80a5 	beq.w	800c364 <__kernel_rem_pio2+0x30c>
 800c21a:	f1ba 0f02 	cmp.w	sl, #2
 800c21e:	f000 80c1 	beq.w	800c3a4 <__kernel_rem_pio2+0x34c>
 800c222:	9b02      	ldr	r3, [sp, #8]
 800c224:	2b02      	cmp	r3, #2
 800c226:	d14e      	bne.n	800c2c6 <__kernel_rem_pio2+0x26e>
 800c228:	4632      	mov	r2, r6
 800c22a:	463b      	mov	r3, r7
 800c22c:	4958      	ldr	r1, [pc, #352]	; (800c390 <__kernel_rem_pio2+0x338>)
 800c22e:	2000      	movs	r0, #0
 800c230:	f7f3 ffe2 	bl	80001f8 <__aeabi_dsub>
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	2d00      	cmp	r5, #0
 800c23a:	d044      	beq.n	800c2c6 <__kernel_rem_pio2+0x26e>
 800c23c:	4650      	mov	r0, sl
 800c23e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c380 <__kernel_rem_pio2+0x328>
 800c242:	f000 fc29 	bl	800ca98 <scalbn>
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	ec53 2b10 	vmov	r2, r3, d0
 800c24e:	f7f3 ffd3 	bl	80001f8 <__aeabi_dsub>
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	e036      	b.n	800c2c6 <__kernel_rem_pio2+0x26e>
 800c258:	4b4e      	ldr	r3, [pc, #312]	; (800c394 <__kernel_rem_pio2+0x33c>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	4630      	mov	r0, r6
 800c25e:	4639      	mov	r1, r7
 800c260:	f7f4 f982 	bl	8000568 <__aeabi_dmul>
 800c264:	f7f4 fc30 	bl	8000ac8 <__aeabi_d2iz>
 800c268:	f7f4 f914 	bl	8000494 <__aeabi_i2d>
 800c26c:	4b4a      	ldr	r3, [pc, #296]	; (800c398 <__kernel_rem_pio2+0x340>)
 800c26e:	2200      	movs	r2, #0
 800c270:	4680      	mov	r8, r0
 800c272:	4689      	mov	r9, r1
 800c274:	f7f4 f978 	bl	8000568 <__aeabi_dmul>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	4630      	mov	r0, r6
 800c27e:	4639      	mov	r1, r7
 800c280:	f7f3 ffba 	bl	80001f8 <__aeabi_dsub>
 800c284:	f7f4 fc20 	bl	8000ac8 <__aeabi_d2iz>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	f843 0b04 	str.w	r0, [r3], #4
 800c28e:	3d01      	subs	r5, #1
 800c290:	9302      	str	r3, [sp, #8]
 800c292:	ab70      	add	r3, sp, #448	; 0x1c0
 800c294:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4640      	mov	r0, r8
 800c29e:	4649      	mov	r1, r9
 800c2a0:	f7f3 ffac 	bl	80001fc <__adddf3>
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	460f      	mov	r7, r1
 800c2a8:	e75b      	b.n	800c162 <__kernel_rem_pio2+0x10a>
 800c2aa:	d105      	bne.n	800c2b8 <__kernel_rem_pio2+0x260>
 800c2ac:	1e63      	subs	r3, r4, #1
 800c2ae:	aa0c      	add	r2, sp, #48	; 0x30
 800c2b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c2b4:	15c3      	asrs	r3, r0, #23
 800c2b6:	e79b      	b.n	800c1f0 <__kernel_rem_pio2+0x198>
 800c2b8:	4b38      	ldr	r3, [pc, #224]	; (800c39c <__kernel_rem_pio2+0x344>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f7f4 fbda 	bl	8000a74 <__aeabi_dcmpge>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d139      	bne.n	800c338 <__kernel_rem_pio2+0x2e0>
 800c2c4:	9002      	str	r0, [sp, #8]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f4 fbb3 	bl	8000a38 <__aeabi_dcmpeq>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f000 80b4 	beq.w	800c440 <__kernel_rem_pio2+0x3e8>
 800c2d8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800c2dc:	465b      	mov	r3, fp
 800c2de:	2200      	movs	r2, #0
 800c2e0:	9904      	ldr	r1, [sp, #16]
 800c2e2:	428b      	cmp	r3, r1
 800c2e4:	da65      	bge.n	800c3b2 <__kernel_rem_pio2+0x35a>
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	d07b      	beq.n	800c3e2 <__kernel_rem_pio2+0x38a>
 800c2ea:	ab0c      	add	r3, sp, #48	; 0x30
 800c2ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800c2f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f000 80a0 	beq.w	800c43a <__kernel_rem_pio2+0x3e2>
 800c2fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c380 <__kernel_rem_pio2+0x328>
 800c2fe:	4650      	mov	r0, sl
 800c300:	f000 fbca 	bl	800ca98 <scalbn>
 800c304:	4f23      	ldr	r7, [pc, #140]	; (800c394 <__kernel_rem_pio2+0x33c>)
 800c306:	ec55 4b10 	vmov	r4, r5, d0
 800c30a:	46d8      	mov	r8, fp
 800c30c:	2600      	movs	r6, #0
 800c30e:	f1b8 0f00 	cmp.w	r8, #0
 800c312:	f280 80cf 	bge.w	800c4b4 <__kernel_rem_pio2+0x45c>
 800c316:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c378 <__kernel_rem_pio2+0x320>
 800c31a:	465f      	mov	r7, fp
 800c31c:	f04f 0800 	mov.w	r8, #0
 800c320:	2f00      	cmp	r7, #0
 800c322:	f2c0 80fd 	blt.w	800c520 <__kernel_rem_pio2+0x4c8>
 800c326:	ab70      	add	r3, sp, #448	; 0x1c0
 800c328:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c3a0 <__kernel_rem_pio2+0x348>
 800c32c:	ec55 4b18 	vmov	r4, r5, d8
 800c330:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c334:	2600      	movs	r6, #0
 800c336:	e0e5      	b.n	800c504 <__kernel_rem_pio2+0x4ac>
 800c338:	2302      	movs	r3, #2
 800c33a:	9302      	str	r3, [sp, #8]
 800c33c:	e75c      	b.n	800c1f8 <__kernel_rem_pio2+0x1a0>
 800c33e:	f8db 3000 	ldr.w	r3, [fp]
 800c342:	b955      	cbnz	r5, 800c35a <__kernel_rem_pio2+0x302>
 800c344:	b123      	cbz	r3, 800c350 <__kernel_rem_pio2+0x2f8>
 800c346:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c34a:	f8cb 3000 	str.w	r3, [fp]
 800c34e:	2301      	movs	r3, #1
 800c350:	3201      	adds	r2, #1
 800c352:	f10b 0b04 	add.w	fp, fp, #4
 800c356:	461d      	mov	r5, r3
 800c358:	e755      	b.n	800c206 <__kernel_rem_pio2+0x1ae>
 800c35a:	1acb      	subs	r3, r1, r3
 800c35c:	f8cb 3000 	str.w	r3, [fp]
 800c360:	462b      	mov	r3, r5
 800c362:	e7f5      	b.n	800c350 <__kernel_rem_pio2+0x2f8>
 800c364:	1e62      	subs	r2, r4, #1
 800c366:	ab0c      	add	r3, sp, #48	; 0x30
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c370:	a90c      	add	r1, sp, #48	; 0x30
 800c372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c376:	e754      	b.n	800c222 <__kernel_rem_pio2+0x1ca>
	...
 800c384:	3ff00000 	.word	0x3ff00000
 800c388:	0800ce68 	.word	0x0800ce68
 800c38c:	40200000 	.word	0x40200000
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	3e700000 	.word	0x3e700000
 800c398:	41700000 	.word	0x41700000
 800c39c:	3fe00000 	.word	0x3fe00000
 800c3a0:	0800ce28 	.word	0x0800ce28
 800c3a4:	1e62      	subs	r2, r4, #1
 800c3a6:	ab0c      	add	r3, sp, #48	; 0x30
 800c3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c3b0:	e7de      	b.n	800c370 <__kernel_rem_pio2+0x318>
 800c3b2:	a90c      	add	r1, sp, #48	; 0x30
 800c3b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	430a      	orrs	r2, r1
 800c3bc:	e790      	b.n	800c2e0 <__kernel_rem_pio2+0x288>
 800c3be:	3301      	adds	r3, #1
 800c3c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	d0fa      	beq.n	800c3be <__kernel_rem_pio2+0x366>
 800c3c8:	9a08      	ldr	r2, [sp, #32]
 800c3ca:	18e3      	adds	r3, r4, r3
 800c3cc:	18a6      	adds	r6, r4, r2
 800c3ce:	aa20      	add	r2, sp, #128	; 0x80
 800c3d0:	1c65      	adds	r5, r4, #1
 800c3d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c3d6:	9302      	str	r3, [sp, #8]
 800c3d8:	9b02      	ldr	r3, [sp, #8]
 800c3da:	42ab      	cmp	r3, r5
 800c3dc:	da04      	bge.n	800c3e8 <__kernel_rem_pio2+0x390>
 800c3de:	461c      	mov	r4, r3
 800c3e0:	e6b5      	b.n	800c14e <__kernel_rem_pio2+0xf6>
 800c3e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e7eb      	b.n	800c3c0 <__kernel_rem_pio2+0x368>
 800c3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ee:	f7f4 f851 	bl	8000494 <__aeabi_i2d>
 800c3f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f8:	46b3      	mov	fp, r6
 800c3fa:	461c      	mov	r4, r3
 800c3fc:	2700      	movs	r7, #0
 800c3fe:	f04f 0800 	mov.w	r8, #0
 800c402:	f04f 0900 	mov.w	r9, #0
 800c406:	9b06      	ldr	r3, [sp, #24]
 800c408:	429f      	cmp	r7, r3
 800c40a:	dd06      	ble.n	800c41a <__kernel_rem_pio2+0x3c2>
 800c40c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c40e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c412:	e9c3 8900 	strd	r8, r9, [r3]
 800c416:	3501      	adds	r5, #1
 800c418:	e7de      	b.n	800c3d8 <__kernel_rem_pio2+0x380>
 800c41a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c41e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c422:	f7f4 f8a1 	bl	8000568 <__aeabi_dmul>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4640      	mov	r0, r8
 800c42c:	4649      	mov	r1, r9
 800c42e:	f7f3 fee5 	bl	80001fc <__adddf3>
 800c432:	3701      	adds	r7, #1
 800c434:	4680      	mov	r8, r0
 800c436:	4689      	mov	r9, r1
 800c438:	e7e5      	b.n	800c406 <__kernel_rem_pio2+0x3ae>
 800c43a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c43e:	e754      	b.n	800c2ea <__kernel_rem_pio2+0x292>
 800c440:	ec47 6b10 	vmov	d0, r6, r7
 800c444:	f1ca 0000 	rsb	r0, sl, #0
 800c448:	f000 fb26 	bl	800ca98 <scalbn>
 800c44c:	ec57 6b10 	vmov	r6, r7, d0
 800c450:	4b9f      	ldr	r3, [pc, #636]	; (800c6d0 <__kernel_rem_pio2+0x678>)
 800c452:	ee10 0a10 	vmov	r0, s0
 800c456:	2200      	movs	r2, #0
 800c458:	4639      	mov	r1, r7
 800c45a:	f7f4 fb0b 	bl	8000a74 <__aeabi_dcmpge>
 800c45e:	b300      	cbz	r0, 800c4a2 <__kernel_rem_pio2+0x44a>
 800c460:	4b9c      	ldr	r3, [pc, #624]	; (800c6d4 <__kernel_rem_pio2+0x67c>)
 800c462:	2200      	movs	r2, #0
 800c464:	4630      	mov	r0, r6
 800c466:	4639      	mov	r1, r7
 800c468:	f7f4 f87e 	bl	8000568 <__aeabi_dmul>
 800c46c:	f7f4 fb2c 	bl	8000ac8 <__aeabi_d2iz>
 800c470:	4605      	mov	r5, r0
 800c472:	f7f4 f80f 	bl	8000494 <__aeabi_i2d>
 800c476:	4b96      	ldr	r3, [pc, #600]	; (800c6d0 <__kernel_rem_pio2+0x678>)
 800c478:	2200      	movs	r2, #0
 800c47a:	f7f4 f875 	bl	8000568 <__aeabi_dmul>
 800c47e:	460b      	mov	r3, r1
 800c480:	4602      	mov	r2, r0
 800c482:	4639      	mov	r1, r7
 800c484:	4630      	mov	r0, r6
 800c486:	f7f3 feb7 	bl	80001f8 <__aeabi_dsub>
 800c48a:	f7f4 fb1d 	bl	8000ac8 <__aeabi_d2iz>
 800c48e:	f104 0b01 	add.w	fp, r4, #1
 800c492:	ab0c      	add	r3, sp, #48	; 0x30
 800c494:	f10a 0a18 	add.w	sl, sl, #24
 800c498:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c49c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c4a0:	e72b      	b.n	800c2fa <__kernel_rem_pio2+0x2a2>
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	4639      	mov	r1, r7
 800c4a6:	f7f4 fb0f 	bl	8000ac8 <__aeabi_d2iz>
 800c4aa:	ab0c      	add	r3, sp, #48	; 0x30
 800c4ac:	46a3      	mov	fp, r4
 800c4ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c4b2:	e722      	b.n	800c2fa <__kernel_rem_pio2+0x2a2>
 800c4b4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4b6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c4ba:	ab0c      	add	r3, sp, #48	; 0x30
 800c4bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c4c0:	f7f3 ffe8 	bl	8000494 <__aeabi_i2d>
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	462b      	mov	r3, r5
 800c4c8:	f7f4 f84e 	bl	8000568 <__aeabi_dmul>
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	e9c9 0100 	strd	r0, r1, [r9]
 800c4d2:	463b      	mov	r3, r7
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f4 f846 	bl	8000568 <__aeabi_dmul>
 800c4dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	e713      	b.n	800c30e <__kernel_rem_pio2+0x2b6>
 800c4e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c4ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c4ee:	f7f4 f83b 	bl	8000568 <__aeabi_dmul>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f3 fe7f 	bl	80001fc <__adddf3>
 800c4fe:	3601      	adds	r6, #1
 800c500:	4604      	mov	r4, r0
 800c502:	460d      	mov	r5, r1
 800c504:	9b04      	ldr	r3, [sp, #16]
 800c506:	429e      	cmp	r6, r3
 800c508:	dc01      	bgt.n	800c50e <__kernel_rem_pio2+0x4b6>
 800c50a:	45b0      	cmp	r8, r6
 800c50c:	daeb      	bge.n	800c4e6 <__kernel_rem_pio2+0x48e>
 800c50e:	ab48      	add	r3, sp, #288	; 0x120
 800c510:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c514:	e9c3 4500 	strd	r4, r5, [r3]
 800c518:	3f01      	subs	r7, #1
 800c51a:	f108 0801 	add.w	r8, r8, #1
 800c51e:	e6ff      	b.n	800c320 <__kernel_rem_pio2+0x2c8>
 800c520:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c522:	2b02      	cmp	r3, #2
 800c524:	dc0b      	bgt.n	800c53e <__kernel_rem_pio2+0x4e6>
 800c526:	2b00      	cmp	r3, #0
 800c528:	dc6e      	bgt.n	800c608 <__kernel_rem_pio2+0x5b0>
 800c52a:	d045      	beq.n	800c5b8 <__kernel_rem_pio2+0x560>
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	f003 0007 	and.w	r0, r3, #7
 800c532:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c536:	ecbd 8b02 	vpop	{d8}
 800c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c540:	2b03      	cmp	r3, #3
 800c542:	d1f3      	bne.n	800c52c <__kernel_rem_pio2+0x4d4>
 800c544:	ab48      	add	r3, sp, #288	; 0x120
 800c546:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c54a:	46d0      	mov	r8, sl
 800c54c:	46d9      	mov	r9, fp
 800c54e:	f1b9 0f00 	cmp.w	r9, #0
 800c552:	f1a8 0808 	sub.w	r8, r8, #8
 800c556:	dc64      	bgt.n	800c622 <__kernel_rem_pio2+0x5ca>
 800c558:	465c      	mov	r4, fp
 800c55a:	2c01      	cmp	r4, #1
 800c55c:	f1aa 0a08 	sub.w	sl, sl, #8
 800c560:	dc7e      	bgt.n	800c660 <__kernel_rem_pio2+0x608>
 800c562:	2000      	movs	r0, #0
 800c564:	2100      	movs	r1, #0
 800c566:	f1bb 0f01 	cmp.w	fp, #1
 800c56a:	f300 8097 	bgt.w	800c69c <__kernel_rem_pio2+0x644>
 800c56e:	9b02      	ldr	r3, [sp, #8]
 800c570:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c574:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f040 8099 	bne.w	800c6b0 <__kernel_rem_pio2+0x658>
 800c57e:	9b01      	ldr	r3, [sp, #4]
 800c580:	e9c3 5600 	strd	r5, r6, [r3]
 800c584:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c588:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c58c:	e7ce      	b.n	800c52c <__kernel_rem_pio2+0x4d4>
 800c58e:	ab48      	add	r3, sp, #288	; 0x120
 800c590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f3 fe30 	bl	80001fc <__adddf3>
 800c59c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c5a0:	f1bb 0f00 	cmp.w	fp, #0
 800c5a4:	daf3      	bge.n	800c58e <__kernel_rem_pio2+0x536>
 800c5a6:	9b02      	ldr	r3, [sp, #8]
 800c5a8:	b113      	cbz	r3, 800c5b0 <__kernel_rem_pio2+0x558>
 800c5aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	9b01      	ldr	r3, [sp, #4]
 800c5b2:	e9c3 0100 	strd	r0, r1, [r3]
 800c5b6:	e7b9      	b.n	800c52c <__kernel_rem_pio2+0x4d4>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	e7f0      	b.n	800c5a0 <__kernel_rem_pio2+0x548>
 800c5be:	ab48      	add	r3, sp, #288	; 0x120
 800c5c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f7f3 fe18 	bl	80001fc <__adddf3>
 800c5cc:	3c01      	subs	r4, #1
 800c5ce:	2c00      	cmp	r4, #0
 800c5d0:	daf5      	bge.n	800c5be <__kernel_rem_pio2+0x566>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	b1e3      	cbz	r3, 800c610 <__kernel_rem_pio2+0x5b8>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5dc:	9c01      	ldr	r4, [sp, #4]
 800c5de:	e9c4 2300 	strd	r2, r3, [r4]
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c5ea:	f7f3 fe05 	bl	80001f8 <__aeabi_dsub>
 800c5ee:	ad4a      	add	r5, sp, #296	; 0x128
 800c5f0:	2401      	movs	r4, #1
 800c5f2:	45a3      	cmp	fp, r4
 800c5f4:	da0f      	bge.n	800c616 <__kernel_rem_pio2+0x5be>
 800c5f6:	9b02      	ldr	r3, [sp, #8]
 800c5f8:	b113      	cbz	r3, 800c600 <__kernel_rem_pio2+0x5a8>
 800c5fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5fe:	4619      	mov	r1, r3
 800c600:	9b01      	ldr	r3, [sp, #4]
 800c602:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c606:	e791      	b.n	800c52c <__kernel_rem_pio2+0x4d4>
 800c608:	465c      	mov	r4, fp
 800c60a:	2000      	movs	r0, #0
 800c60c:	2100      	movs	r1, #0
 800c60e:	e7de      	b.n	800c5ce <__kernel_rem_pio2+0x576>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	e7e2      	b.n	800c5dc <__kernel_rem_pio2+0x584>
 800c616:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c61a:	f7f3 fdef 	bl	80001fc <__adddf3>
 800c61e:	3401      	adds	r4, #1
 800c620:	e7e7      	b.n	800c5f2 <__kernel_rem_pio2+0x59a>
 800c622:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c626:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c62a:	4620      	mov	r0, r4
 800c62c:	4632      	mov	r2, r6
 800c62e:	463b      	mov	r3, r7
 800c630:	4629      	mov	r1, r5
 800c632:	f7f3 fde3 	bl	80001fc <__adddf3>
 800c636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4620      	mov	r0, r4
 800c640:	4629      	mov	r1, r5
 800c642:	f7f3 fdd9 	bl	80001f8 <__aeabi_dsub>
 800c646:	4632      	mov	r2, r6
 800c648:	463b      	mov	r3, r7
 800c64a:	f7f3 fdd7 	bl	80001fc <__adddf3>
 800c64e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c652:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c656:	ed88 7b00 	vstr	d7, [r8]
 800c65a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c65e:	e776      	b.n	800c54e <__kernel_rem_pio2+0x4f6>
 800c660:	e9da 8900 	ldrd	r8, r9, [sl]
 800c664:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c668:	4640      	mov	r0, r8
 800c66a:	4632      	mov	r2, r6
 800c66c:	463b      	mov	r3, r7
 800c66e:	4649      	mov	r1, r9
 800c670:	f7f3 fdc4 	bl	80001fc <__adddf3>
 800c674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4640      	mov	r0, r8
 800c67e:	4649      	mov	r1, r9
 800c680:	f7f3 fdba 	bl	80001f8 <__aeabi_dsub>
 800c684:	4632      	mov	r2, r6
 800c686:	463b      	mov	r3, r7
 800c688:	f7f3 fdb8 	bl	80001fc <__adddf3>
 800c68c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c690:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c694:	ed8a 7b00 	vstr	d7, [sl]
 800c698:	3c01      	subs	r4, #1
 800c69a:	e75e      	b.n	800c55a <__kernel_rem_pio2+0x502>
 800c69c:	ab48      	add	r3, sp, #288	; 0x120
 800c69e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f3 fda9 	bl	80001fc <__adddf3>
 800c6aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c6ae:	e75a      	b.n	800c566 <__kernel_rem_pio2+0x50e>
 800c6b0:	9b01      	ldr	r3, [sp, #4]
 800c6b2:	9a01      	ldr	r2, [sp, #4]
 800c6b4:	601d      	str	r5, [r3, #0]
 800c6b6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c6ba:	605c      	str	r4, [r3, #4]
 800c6bc:	609f      	str	r7, [r3, #8]
 800c6be:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c6c2:	60d3      	str	r3, [r2, #12]
 800c6c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6c8:	6110      	str	r0, [r2, #16]
 800c6ca:	6153      	str	r3, [r2, #20]
 800c6cc:	e72e      	b.n	800c52c <__kernel_rem_pio2+0x4d4>
 800c6ce:	bf00      	nop
 800c6d0:	41700000 	.word	0x41700000
 800c6d4:	3e700000 	.word	0x3e700000

0800c6d8 <__kernel_sin>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	ed2d 8b04 	vpush	{d8-d9}
 800c6e0:	eeb0 8a41 	vmov.f32	s16, s2
 800c6e4:	eef0 8a61 	vmov.f32	s17, s3
 800c6e8:	ec55 4b10 	vmov	r4, r5, d0
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c6f6:	9001      	str	r0, [sp, #4]
 800c6f8:	da06      	bge.n	800c708 <__kernel_sin+0x30>
 800c6fa:	ee10 0a10 	vmov	r0, s0
 800c6fe:	4629      	mov	r1, r5
 800c700:	f7f4 f9e2 	bl	8000ac8 <__aeabi_d2iz>
 800c704:	2800      	cmp	r0, #0
 800c706:	d051      	beq.n	800c7ac <__kernel_sin+0xd4>
 800c708:	4622      	mov	r2, r4
 800c70a:	462b      	mov	r3, r5
 800c70c:	4620      	mov	r0, r4
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f3 ff2a 	bl	8000568 <__aeabi_dmul>
 800c714:	4682      	mov	sl, r0
 800c716:	468b      	mov	fp, r1
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4620      	mov	r0, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	f7f3 ff22 	bl	8000568 <__aeabi_dmul>
 800c724:	a341      	add	r3, pc, #260	; (adr r3, 800c82c <__kernel_sin+0x154>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	4680      	mov	r8, r0
 800c72c:	4689      	mov	r9, r1
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f3 ff19 	bl	8000568 <__aeabi_dmul>
 800c736:	a33f      	add	r3, pc, #252	; (adr r3, 800c834 <__kernel_sin+0x15c>)
 800c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73c:	f7f3 fd5c 	bl	80001f8 <__aeabi_dsub>
 800c740:	4652      	mov	r2, sl
 800c742:	465b      	mov	r3, fp
 800c744:	f7f3 ff10 	bl	8000568 <__aeabi_dmul>
 800c748:	a33c      	add	r3, pc, #240	; (adr r3, 800c83c <__kernel_sin+0x164>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 fd55 	bl	80001fc <__adddf3>
 800c752:	4652      	mov	r2, sl
 800c754:	465b      	mov	r3, fp
 800c756:	f7f3 ff07 	bl	8000568 <__aeabi_dmul>
 800c75a:	a33a      	add	r3, pc, #232	; (adr r3, 800c844 <__kernel_sin+0x16c>)
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	f7f3 fd4a 	bl	80001f8 <__aeabi_dsub>
 800c764:	4652      	mov	r2, sl
 800c766:	465b      	mov	r3, fp
 800c768:	f7f3 fefe 	bl	8000568 <__aeabi_dmul>
 800c76c:	a337      	add	r3, pc, #220	; (adr r3, 800c84c <__kernel_sin+0x174>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 fd43 	bl	80001fc <__adddf3>
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	4606      	mov	r6, r0
 800c77a:	460f      	mov	r7, r1
 800c77c:	b9eb      	cbnz	r3, 800c7ba <__kernel_sin+0xe2>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	4650      	mov	r0, sl
 800c784:	4659      	mov	r1, fp
 800c786:	f7f3 feef 	bl	8000568 <__aeabi_dmul>
 800c78a:	a325      	add	r3, pc, #148	; (adr r3, 800c820 <__kernel_sin+0x148>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f7f3 fd32 	bl	80001f8 <__aeabi_dsub>
 800c794:	4642      	mov	r2, r8
 800c796:	464b      	mov	r3, r9
 800c798:	f7f3 fee6 	bl	8000568 <__aeabi_dmul>
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	f7f3 fd2a 	bl	80001fc <__adddf3>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	ec45 4b10 	vmov	d0, r4, r5
 800c7b0:	b003      	add	sp, #12
 800c7b2:	ecbd 8b04 	vpop	{d8-d9}
 800c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ba:	4b1b      	ldr	r3, [pc, #108]	; (800c828 <__kernel_sin+0x150>)
 800c7bc:	ec51 0b18 	vmov	r0, r1, d8
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f7f3 fed1 	bl	8000568 <__aeabi_dmul>
 800c7c6:	4632      	mov	r2, r6
 800c7c8:	ec41 0b19 	vmov	d9, r0, r1
 800c7cc:	463b      	mov	r3, r7
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7f3 fec9 	bl	8000568 <__aeabi_dmul>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	ec51 0b19 	vmov	r0, r1, d9
 800c7de:	f7f3 fd0b 	bl	80001f8 <__aeabi_dsub>
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	465b      	mov	r3, fp
 800c7e6:	f7f3 febf 	bl	8000568 <__aeabi_dmul>
 800c7ea:	ec53 2b18 	vmov	r2, r3, d8
 800c7ee:	f7f3 fd03 	bl	80001f8 <__aeabi_dsub>
 800c7f2:	a30b      	add	r3, pc, #44	; (adr r3, 800c820 <__kernel_sin+0x148>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	460f      	mov	r7, r1
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	4649      	mov	r1, r9
 800c800:	f7f3 feb2 	bl	8000568 <__aeabi_dmul>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f3 fcf6 	bl	80001fc <__adddf3>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	4620      	mov	r0, r4
 800c816:	4629      	mov	r1, r5
 800c818:	f7f3 fcee 	bl	80001f8 <__aeabi_dsub>
 800c81c:	e7c4      	b.n	800c7a8 <__kernel_sin+0xd0>
 800c81e:	bf00      	nop
 800c820:	55555549 	.word	0x55555549
 800c824:	3fc55555 	.word	0x3fc55555
 800c828:	3fe00000 	.word	0x3fe00000
 800c82c:	5acfd57c 	.word	0x5acfd57c
 800c830:	3de5d93a 	.word	0x3de5d93a
 800c834:	8a2b9ceb 	.word	0x8a2b9ceb
 800c838:	3e5ae5e6 	.word	0x3e5ae5e6
 800c83c:	57b1fe7d 	.word	0x57b1fe7d
 800c840:	3ec71de3 	.word	0x3ec71de3
 800c844:	19c161d5 	.word	0x19c161d5
 800c848:	3f2a01a0 	.word	0x3f2a01a0
 800c84c:	1110f8a6 	.word	0x1110f8a6
 800c850:	3f811111 	.word	0x3f811111

0800c854 <finite>:
 800c854:	b082      	sub	sp, #8
 800c856:	ed8d 0b00 	vstr	d0, [sp]
 800c85a:	9801      	ldr	r0, [sp, #4]
 800c85c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c860:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c864:	0fc0      	lsrs	r0, r0, #31
 800c866:	b002      	add	sp, #8
 800c868:	4770      	bx	lr
 800c86a:	0000      	movs	r0, r0
 800c86c:	0000      	movs	r0, r0
	...

0800c870 <floor>:
 800c870:	ec51 0b10 	vmov	r0, r1, d0
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c87c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c880:	2e13      	cmp	r6, #19
 800c882:	ee10 5a10 	vmov	r5, s0
 800c886:	ee10 8a10 	vmov	r8, s0
 800c88a:	460c      	mov	r4, r1
 800c88c:	dc32      	bgt.n	800c8f4 <floor+0x84>
 800c88e:	2e00      	cmp	r6, #0
 800c890:	da14      	bge.n	800c8bc <floor+0x4c>
 800c892:	a333      	add	r3, pc, #204	; (adr r3, 800c960 <floor+0xf0>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fcb0 	bl	80001fc <__adddf3>
 800c89c:	2200      	movs	r2, #0
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f7f4 f8f2 	bl	8000a88 <__aeabi_dcmpgt>
 800c8a4:	b138      	cbz	r0, 800c8b6 <floor+0x46>
 800c8a6:	2c00      	cmp	r4, #0
 800c8a8:	da57      	bge.n	800c95a <floor+0xea>
 800c8aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c8ae:	431d      	orrs	r5, r3
 800c8b0:	d001      	beq.n	800c8b6 <floor+0x46>
 800c8b2:	4c2d      	ldr	r4, [pc, #180]	; (800c968 <floor+0xf8>)
 800c8b4:	2500      	movs	r5, #0
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e025      	b.n	800c908 <floor+0x98>
 800c8bc:	4f2b      	ldr	r7, [pc, #172]	; (800c96c <floor+0xfc>)
 800c8be:	4137      	asrs	r7, r6
 800c8c0:	ea01 0307 	and.w	r3, r1, r7
 800c8c4:	4303      	orrs	r3, r0
 800c8c6:	d01f      	beq.n	800c908 <floor+0x98>
 800c8c8:	a325      	add	r3, pc, #148	; (adr r3, 800c960 <floor+0xf0>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f3 fc95 	bl	80001fc <__adddf3>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f7f4 f8d7 	bl	8000a88 <__aeabi_dcmpgt>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0eb      	beq.n	800c8b6 <floor+0x46>
 800c8de:	2c00      	cmp	r4, #0
 800c8e0:	bfbe      	ittt	lt
 800c8e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c8e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c8ea:	19a4      	addlt	r4, r4, r6
 800c8ec:	ea24 0407 	bic.w	r4, r4, r7
 800c8f0:	2500      	movs	r5, #0
 800c8f2:	e7e0      	b.n	800c8b6 <floor+0x46>
 800c8f4:	2e33      	cmp	r6, #51	; 0x33
 800c8f6:	dd0b      	ble.n	800c910 <floor+0xa0>
 800c8f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c8fc:	d104      	bne.n	800c908 <floor+0x98>
 800c8fe:	ee10 2a10 	vmov	r2, s0
 800c902:	460b      	mov	r3, r1
 800c904:	f7f3 fc7a 	bl	80001fc <__adddf3>
 800c908:	ec41 0b10 	vmov	d0, r0, r1
 800c90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c910:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c918:	fa23 f707 	lsr.w	r7, r3, r7
 800c91c:	4207      	tst	r7, r0
 800c91e:	d0f3      	beq.n	800c908 <floor+0x98>
 800c920:	a30f      	add	r3, pc, #60	; (adr r3, 800c960 <floor+0xf0>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fc69 	bl	80001fc <__adddf3>
 800c92a:	2200      	movs	r2, #0
 800c92c:	2300      	movs	r3, #0
 800c92e:	f7f4 f8ab 	bl	8000a88 <__aeabi_dcmpgt>
 800c932:	2800      	cmp	r0, #0
 800c934:	d0bf      	beq.n	800c8b6 <floor+0x46>
 800c936:	2c00      	cmp	r4, #0
 800c938:	da02      	bge.n	800c940 <floor+0xd0>
 800c93a:	2e14      	cmp	r6, #20
 800c93c:	d103      	bne.n	800c946 <floor+0xd6>
 800c93e:	3401      	adds	r4, #1
 800c940:	ea25 0507 	bic.w	r5, r5, r7
 800c944:	e7b7      	b.n	800c8b6 <floor+0x46>
 800c946:	2301      	movs	r3, #1
 800c948:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c94c:	fa03 f606 	lsl.w	r6, r3, r6
 800c950:	4435      	add	r5, r6
 800c952:	4545      	cmp	r5, r8
 800c954:	bf38      	it	cc
 800c956:	18e4      	addcc	r4, r4, r3
 800c958:	e7f2      	b.n	800c940 <floor+0xd0>
 800c95a:	2500      	movs	r5, #0
 800c95c:	462c      	mov	r4, r5
 800c95e:	e7aa      	b.n	800c8b6 <floor+0x46>
 800c960:	8800759c 	.word	0x8800759c
 800c964:	7e37e43c 	.word	0x7e37e43c
 800c968:	bff00000 	.word	0xbff00000
 800c96c:	000fffff 	.word	0x000fffff

0800c970 <nan>:
 800c970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c978 <nan+0x8>
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	00000000 	.word	0x00000000
 800c97c:	7ff80000 	.word	0x7ff80000

0800c980 <rint>:
 800c980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c982:	ec51 0b10 	vmov	r0, r1, d0
 800c986:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c98a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c98e:	2e13      	cmp	r6, #19
 800c990:	ee10 4a10 	vmov	r4, s0
 800c994:	460b      	mov	r3, r1
 800c996:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c99a:	dc58      	bgt.n	800ca4e <rint+0xce>
 800c99c:	2e00      	cmp	r6, #0
 800c99e:	da2b      	bge.n	800c9f8 <rint+0x78>
 800c9a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c9a4:	4302      	orrs	r2, r0
 800c9a6:	d023      	beq.n	800c9f0 <rint+0x70>
 800c9a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c9ac:	4302      	orrs	r2, r0
 800c9ae:	4254      	negs	r4, r2
 800c9b0:	4314      	orrs	r4, r2
 800c9b2:	0c4b      	lsrs	r3, r1, #17
 800c9b4:	0b24      	lsrs	r4, r4, #12
 800c9b6:	045b      	lsls	r3, r3, #17
 800c9b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c9bc:	ea44 0103 	orr.w	r1, r4, r3
 800c9c0:	4b32      	ldr	r3, [pc, #200]	; (800ca8c <rint+0x10c>)
 800c9c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c9c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	f7f3 fc13 	bl	80001fc <__adddf3>
 800c9d6:	e9cd 0100 	strd	r0, r1, [sp]
 800c9da:	463b      	mov	r3, r7
 800c9dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	f7f3 fc09 	bl	80001f8 <__aeabi_dsub>
 800c9e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	ec41 0b10 	vmov	d0, r0, r1
 800c9f4:	b003      	add	sp, #12
 800c9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f8:	4a25      	ldr	r2, [pc, #148]	; (800ca90 <rint+0x110>)
 800c9fa:	4132      	asrs	r2, r6
 800c9fc:	ea01 0702 	and.w	r7, r1, r2
 800ca00:	4307      	orrs	r7, r0
 800ca02:	d0f5      	beq.n	800c9f0 <rint+0x70>
 800ca04:	0851      	lsrs	r1, r2, #1
 800ca06:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ca0a:	4314      	orrs	r4, r2
 800ca0c:	d00c      	beq.n	800ca28 <rint+0xa8>
 800ca0e:	ea23 0201 	bic.w	r2, r3, r1
 800ca12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca16:	2e13      	cmp	r6, #19
 800ca18:	fa43 f606 	asr.w	r6, r3, r6
 800ca1c:	bf0c      	ite	eq
 800ca1e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ca22:	2400      	movne	r4, #0
 800ca24:	ea42 0306 	orr.w	r3, r2, r6
 800ca28:	4918      	ldr	r1, [pc, #96]	; (800ca8c <rint+0x10c>)
 800ca2a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ca2e:	4622      	mov	r2, r4
 800ca30:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca34:	4620      	mov	r0, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	f7f3 fbe0 	bl	80001fc <__adddf3>
 800ca3c:	e9cd 0100 	strd	r0, r1, [sp]
 800ca40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca44:	4622      	mov	r2, r4
 800ca46:	462b      	mov	r3, r5
 800ca48:	f7f3 fbd6 	bl	80001f8 <__aeabi_dsub>
 800ca4c:	e7d0      	b.n	800c9f0 <rint+0x70>
 800ca4e:	2e33      	cmp	r6, #51	; 0x33
 800ca50:	dd07      	ble.n	800ca62 <rint+0xe2>
 800ca52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca56:	d1cb      	bne.n	800c9f0 <rint+0x70>
 800ca58:	ee10 2a10 	vmov	r2, s0
 800ca5c:	f7f3 fbce 	bl	80001fc <__adddf3>
 800ca60:	e7c6      	b.n	800c9f0 <rint+0x70>
 800ca62:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ca66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ca6a:	40d6      	lsrs	r6, r2
 800ca6c:	4230      	tst	r0, r6
 800ca6e:	d0bf      	beq.n	800c9f0 <rint+0x70>
 800ca70:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ca74:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ca78:	bf1f      	itttt	ne
 800ca7a:	ea24 0101 	bicne.w	r1, r4, r1
 800ca7e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ca82:	fa44 f202 	asrne.w	r2, r4, r2
 800ca86:	ea41 0402 	orrne.w	r4, r1, r2
 800ca8a:	e7cd      	b.n	800ca28 <rint+0xa8>
 800ca8c:	0800ce78 	.word	0x0800ce78
 800ca90:	000fffff 	.word	0x000fffff
 800ca94:	00000000 	.word	0x00000000

0800ca98 <scalbn>:
 800ca98:	b570      	push	{r4, r5, r6, lr}
 800ca9a:	ec55 4b10 	vmov	r4, r5, d0
 800ca9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800caa2:	4606      	mov	r6, r0
 800caa4:	462b      	mov	r3, r5
 800caa6:	b99a      	cbnz	r2, 800cad0 <scalbn+0x38>
 800caa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800caac:	4323      	orrs	r3, r4
 800caae:	d036      	beq.n	800cb1e <scalbn+0x86>
 800cab0:	4b39      	ldr	r3, [pc, #228]	; (800cb98 <scalbn+0x100>)
 800cab2:	4629      	mov	r1, r5
 800cab4:	ee10 0a10 	vmov	r0, s0
 800cab8:	2200      	movs	r2, #0
 800caba:	f7f3 fd55 	bl	8000568 <__aeabi_dmul>
 800cabe:	4b37      	ldr	r3, [pc, #220]	; (800cb9c <scalbn+0x104>)
 800cac0:	429e      	cmp	r6, r3
 800cac2:	4604      	mov	r4, r0
 800cac4:	460d      	mov	r5, r1
 800cac6:	da10      	bge.n	800caea <scalbn+0x52>
 800cac8:	a32b      	add	r3, pc, #172	; (adr r3, 800cb78 <scalbn+0xe0>)
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	e03a      	b.n	800cb46 <scalbn+0xae>
 800cad0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cad4:	428a      	cmp	r2, r1
 800cad6:	d10c      	bne.n	800caf2 <scalbn+0x5a>
 800cad8:	ee10 2a10 	vmov	r2, s0
 800cadc:	4620      	mov	r0, r4
 800cade:	4629      	mov	r1, r5
 800cae0:	f7f3 fb8c 	bl	80001fc <__adddf3>
 800cae4:	4604      	mov	r4, r0
 800cae6:	460d      	mov	r5, r1
 800cae8:	e019      	b.n	800cb1e <scalbn+0x86>
 800caea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800caee:	460b      	mov	r3, r1
 800caf0:	3a36      	subs	r2, #54	; 0x36
 800caf2:	4432      	add	r2, r6
 800caf4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800caf8:	428a      	cmp	r2, r1
 800cafa:	dd08      	ble.n	800cb0e <scalbn+0x76>
 800cafc:	2d00      	cmp	r5, #0
 800cafe:	a120      	add	r1, pc, #128	; (adr r1, 800cb80 <scalbn+0xe8>)
 800cb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb04:	da1c      	bge.n	800cb40 <scalbn+0xa8>
 800cb06:	a120      	add	r1, pc, #128	; (adr r1, 800cb88 <scalbn+0xf0>)
 800cb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb0c:	e018      	b.n	800cb40 <scalbn+0xa8>
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	dd08      	ble.n	800cb24 <scalbn+0x8c>
 800cb12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb1e:	ec45 4b10 	vmov	d0, r4, r5
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
 800cb24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb28:	da19      	bge.n	800cb5e <scalbn+0xc6>
 800cb2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb2e:	429e      	cmp	r6, r3
 800cb30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cb34:	dd0a      	ble.n	800cb4c <scalbn+0xb4>
 800cb36:	a112      	add	r1, pc, #72	; (adr r1, 800cb80 <scalbn+0xe8>)
 800cb38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1e2      	bne.n	800cb06 <scalbn+0x6e>
 800cb40:	a30f      	add	r3, pc, #60	; (adr r3, 800cb80 <scalbn+0xe8>)
 800cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb46:	f7f3 fd0f 	bl	8000568 <__aeabi_dmul>
 800cb4a:	e7cb      	b.n	800cae4 <scalbn+0x4c>
 800cb4c:	a10a      	add	r1, pc, #40	; (adr r1, 800cb78 <scalbn+0xe0>)
 800cb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0b8      	beq.n	800cac8 <scalbn+0x30>
 800cb56:	a10e      	add	r1, pc, #56	; (adr r1, 800cb90 <scalbn+0xf8>)
 800cb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb5c:	e7b4      	b.n	800cac8 <scalbn+0x30>
 800cb5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb62:	3236      	adds	r2, #54	; 0x36
 800cb64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4b0c      	ldr	r3, [pc, #48]	; (800cba0 <scalbn+0x108>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	e7e8      	b.n	800cb46 <scalbn+0xae>
 800cb74:	f3af 8000 	nop.w
 800cb78:	c2f8f359 	.word	0xc2f8f359
 800cb7c:	01a56e1f 	.word	0x01a56e1f
 800cb80:	8800759c 	.word	0x8800759c
 800cb84:	7e37e43c 	.word	0x7e37e43c
 800cb88:	8800759c 	.word	0x8800759c
 800cb8c:	fe37e43c 	.word	0xfe37e43c
 800cb90:	c2f8f359 	.word	0xc2f8f359
 800cb94:	81a56e1f 	.word	0x81a56e1f
 800cb98:	43500000 	.word	0x43500000
 800cb9c:	ffff3cb0 	.word	0xffff3cb0
 800cba0:	3c900000 	.word	0x3c900000

0800cba4 <_init>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	bf00      	nop
 800cba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbaa:	bc08      	pop	{r3}
 800cbac:	469e      	mov	lr, r3
 800cbae:	4770      	bx	lr

0800cbb0 <_fini>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr
