
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080062cc  080062cc  000162cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d4  080062d4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d4  080062d4  000162d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080062dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000080  08006358  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08006358  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d39  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354f  00000000  00000000  00037de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000422b  00000000  00000000  0003d968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b88  00000000  00000000  00041b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e198b  00000000  00000000  0005971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b0a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000520c  00000000  00000000  0013b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006294 	.word	0x08006294

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006294 	.word	0x08006294

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <ADC_Read+0x30>)
 80004f2:	f003 f84f 	bl	8003594 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80004f6:	2302      	movs	r3, #2
 80004f8:	2208      	movs	r2, #8
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <ADC_Read+0x34>)
 80004fe:	f003 ff59 	bl	80043b4 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000502:	2201      	movs	r2, #1
 8000504:	2110      	movs	r1, #16
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <ADC_Read+0x30>)
 8000508:	f003 f844 	bl	8003594 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020000 	.word	0x40020000
 8000518:	200000e0 	.word	0x200000e0

0800051c <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	889b      	ldrh	r3, [r3, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	4610      	mov	r0, r2
 8000532:	f003 f817 	bl	8003564 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	799a      	ldrb	r2, [r3, #6]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	79db      	ldrb	r3, [r3, #7]
 8000546:	429a      	cmp	r2, r3
 8000548:	d004      	beq.n	8000554 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800054a:	f001 fbbf 	bl	8001ccc <HAL_GetTick>
 800054e:	4602      	mov	r2, r0
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8000554:	f001 fbba 	bl	8001ccc <HAL_GetTick>
 8000558:	4602      	mov	r2, r0
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d209      	bcs.n	800057a <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	799a      	ldrb	r2, [r3, #6]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a1b      	ldrb	r3, [r3, #8]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8000576:	2301      	movs	r3, #1
 8000578:	e004      	b.n	8000584 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	799a      	ldrb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_CAN1_Init+0x64>)
 8000592:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <MX_CAN1_Init+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_CAN1_Init+0x64>)
 8000598:	2209      	movs	r2, #9
 800059a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005de:	f001 fba5 	bl	8001d2c <HAL_CAN_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005e8:	f000 fdcc 	bl	8001184 <Error_Handler>
  }

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000160 	.word	0x20000160
 80005f4:	40006400 	.word	0x40006400

080005f8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_CAN2_Init+0x64>)
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_CAN2_Init+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_CAN2_Init+0x64>)
 8000604:	2209      	movs	r2, #9
 8000606:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_CAN2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_CAN2_Init+0x64>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_CAN2_Init+0x64>)
 800061e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000622:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_CAN2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_CAN2_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_CAN2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_CAN2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_CAN2_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_CAN2_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_CAN2_Init+0x64>)
 800064a:	f001 fb6f 	bl	8001d2c <HAL_CAN_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000654:	f000 fd96 	bl	8001184 <Error_Handler>
  }

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000138 	.word	0x20000138
 8000660:	40006800 	.word	0x40006800

08000664 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;
void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a56      	ldr	r2, [pc, #344]	; (80007dc <HAL_CAN_MspInit+0x178>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d13d      	bne.n	8000702 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000686:	4b56      	ldr	r3, [pc, #344]	; (80007e0 <HAL_CAN_MspInit+0x17c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	4a54      	ldr	r2, [pc, #336]	; (80007e0 <HAL_CAN_MspInit+0x17c>)
 800068e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000690:	4b53      	ldr	r3, [pc, #332]	; (80007e0 <HAL_CAN_MspInit+0x17c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d10d      	bne.n	80006b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	4b51      	ldr	r3, [pc, #324]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a50      	ldr	r2, [pc, #320]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b4e      	ldr	r3, [pc, #312]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a49      	ldr	r2, [pc, #292]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
 80006c4:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d0:	2303      	movs	r3, #3
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006e0:	2309      	movs	r3, #9
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	483f      	ldr	r0, [pc, #252]	; (80007e8 <HAL_CAN_MspInit+0x184>)
 80006ec:	f002 fd8e 	bl	800320c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2014      	movs	r0, #20
 80006f6:	f002 fa4c 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006fa:	2014      	movs	r0, #20
 80006fc:	f002 fa65 	bl	8002bca <HAL_NVIC_EnableIRQ>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
	HAL_CAN_Start(&hcan2);
  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000700:	e067      	b.n	80007d2 <HAL_CAN_MspInit+0x16e>
  else if(canHandle->Instance==CAN2)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a39      	ldr	r2, [pc, #228]	; (80007ec <HAL_CAN_MspInit+0x188>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d162      	bne.n	80007d2 <HAL_CAN_MspInit+0x16e>
    HAL_RCC_CAN2_CLK_ENABLED++;
 800070c:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <HAL_CAN_MspInit+0x18c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a37      	ldr	r2, [pc, #220]	; (80007f0 <HAL_CAN_MspInit+0x18c>)
 8000714:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <HAL_CAN_MspInit+0x18c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10d      	bne.n	800073a <HAL_CAN_MspInit+0xd6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 8000728:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000756:	2360      	movs	r3, #96	; 0x60
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000766:	2309      	movs	r3, #9
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	4820      	ldr	r0, [pc, #128]	; (80007f4 <HAL_CAN_MspInit+0x190>)
 8000772:	f002 fd4b 	bl	800320c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2040      	movs	r0, #64	; 0x40
 800077c:	f002 fa09 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000780:	2040      	movs	r0, #64	; 0x40
 8000782:	f002 fa22 	bl	8002bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2041      	movs	r0, #65	; 0x41
 800078c:	f002 fa01 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000790:	2041      	movs	r0, #65	; 0x41
 8000792:	f002 fa1a 	bl	8002bca <HAL_NVIC_EnableIRQ>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000796:	2102      	movs	r1, #2
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <HAL_CAN_MspInit+0x194>)
 800079a:	f001 fed4 	bl	8002546 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 800079e:	2110      	movs	r1, #16
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <HAL_CAN_MspInit+0x194>)
 80007a2:	f001 fed0 	bl	8002546 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80007a6:	2101      	movs	r1, #1
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <HAL_CAN_MspInit+0x194>)
 80007aa:	f001 fecc 	bl	8002546 <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <HAL_CAN_MspInit+0x194>)
 80007b0:	f001 fc98 	bl	80020e4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007b4:	2102      	movs	r1, #2
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <HAL_CAN_MspInit+0x198>)
 80007b8:	f001 fec5 	bl	8002546 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 80007bc:	2110      	movs	r1, #16
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <HAL_CAN_MspInit+0x198>)
 80007c0:	f001 fec1 	bl	8002546 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80007c4:	2101      	movs	r1, #1
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <HAL_CAN_MspInit+0x194>)
 80007c8:	f001 febd 	bl	8002546 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan2);
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <HAL_CAN_MspInit+0x198>)
 80007ce:	f001 fc89 	bl	80020e4 <HAL_CAN_Start>
}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	; 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40006400 	.word	0x40006400
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40006800 	.word	0x40006800
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	40020400 	.word	0x40020400
 80007f8:	20000160 	.word	0x20000160
 80007fc:	20000138 	.word	0x20000138

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_DMA_Init+0x3c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <MX_DMA_Init+0x3c>)
 8000810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_DMA_Init+0x3c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	200c      	movs	r0, #12
 8000828:	f002 f9b3 	bl	8002b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800082c:	200c      	movs	r0, #12
 800082e:	f002 f9cc 	bl	8002bca <HAL_NVIC_EnableIRQ>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <ENCODER_Init>:
CAN_FilterTypeDef canfil_2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <ENCODER_Init+0xc0>)
 8000846:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <ENCODER_Init+0xc4>)
 8000848:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan1;
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <ENCODER_Init+0xc8>)
 800084c:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <ENCODER_Init+0xc4>)
 800084e:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 8000850:	2101      	movs	r1, #1
 8000852:	482b      	ldr	r0, [pc, #172]	; (8000900 <ENCODER_Init+0xc0>)
 8000854:	f000 f893 	bl	800097e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 8000858:	2102      	movs	r1, #2
 800085a:	482b      	ldr	r0, [pc, #172]	; (8000908 <ENCODER_Init+0xc8>)
 800085c:	f000 f88f 	bl	800097e <ENCODER_Set_TxHeader>
	 
	//Filter Config - FIFO1 is assigned to hcan1_right and FIFO1 is assigned to hcan2_left
	canfil_1.FilterBank = 0;
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <ENCODER_Init+0xcc>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <ENCODER_Init+0xcc>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <ENCODER_Init+0xcc>)
 800086e:	2201      	movs	r2, #1
 8000870:	61da      	str	r2, [r3, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <ENCODER_Init+0xcc>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
	canfil_1.FilterIdLow = 0x0000;
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <ENCODER_Init+0xcc>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <ENCODER_Init+0xcc>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <ENCODER_Init+0xcc>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <ENCODER_Init+0xcc>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <ENCODER_Init+0xcc>)
 8000892:	2201      	movs	r2, #1
 8000894:	621a      	str	r2, [r3, #32]
	canfil_1.SlaveStartFilterBank = 14;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <ENCODER_Init+0xcc>)
 8000898:	220e      	movs	r2, #14
 800089a:	625a      	str	r2, [r3, #36]	; 0x24

	
	canfil_2.FilterBank = 14;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <ENCODER_Init+0xd0>)
 800089e:	220e      	movs	r2, #14
 80008a0:	615a      	str	r2, [r3, #20]
	canfil_2.FilterMode = CAN_FILTERMODE_IDMASK;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <ENCODER_Init+0xd0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
	canfil_2.FilterScale = CAN_FILTERSCALE_32BIT;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <ENCODER_Init+0xd0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
	canfil_2.FilterIdHigh = 0x0000;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <ENCODER_Init+0xd0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
	canfil_2.FilterIdLow = 0x0000;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <ENCODER_Init+0xd0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
	canfil_2.FilterMaskIdHigh = 0x0000;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <ENCODER_Init+0xd0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
	canfil_2.FilterMaskIdLow = 0x0000;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <ENCODER_Init+0xd0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
	canfil_2.FilterFIFOAssignment = CAN_RX_FIFO1;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <ENCODER_Init+0xd0>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	611a      	str	r2, [r3, #16]
	canfil_2.FilterActivation = CAN_FILTER_ENABLE;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <ENCODER_Init+0xd0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	621a      	str	r2, [r3, #32]
	canfil_2.SlaveStartFilterBank = 14;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <ENCODER_Init+0xd0>)
 80008d4:	220e      	movs	r2, #14
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK )	Error_Handler();
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <ENCODER_Init+0xcc>)
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <ENCODER_Init+0xc4>)
 80008dc:	f001 fb22 	bl	8001f24 <HAL_CAN_ConfigFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <ENCODER_Init+0xaa>
 80008e6:	f000 fc4d 	bl	8001184 <Error_Handler>
	if(HAL_CAN_ConfigFilter(&hcan2, &canfil_2) != HAL_OK )	Error_Handler();
 80008ea:	4909      	ldr	r1, [pc, #36]	; (8000910 <ENCODER_Init+0xd0>)
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <ENCODER_Init+0xd4>)
 80008ee:	f001 fb19 	bl	8001f24 <HAL_CAN_ConfigFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <ENCODER_Init+0xbc>
 80008f8:	f000 fc44 	bl	8001184 <Error_Handler>

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200001b0 	.word	0x200001b0
 8000904:	20000160 	.word	0x20000160
 8000908:	20000200 	.word	0x20000200
 800090c:	20000250 	.word	0x20000250
 8000910:	20000188 	.word	0x20000188
 8000914:	20000138 	.word	0x20000138

08000918 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->rawRead[1] = incoming_array[1];
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	785a      	ldrb	r2, [r3, #1]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	789a      	ldrb	r2, [r3, #2]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	78da      	ldrb	r2, [r3, #3]
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Encoder_ptr->rawRead[4] = incoming_array[4];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791a      	ldrb	r2, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	795a      	ldrb	r2, [r3, #5]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[6] = incoming_array[6];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	799a      	ldrb	r2, [r3, #6]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	79da      	ldrb	r2, [r3, #7]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2204      	movs	r2, #4
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a1b      	ldr	r3, [r3, #32]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	Encoder_ptr->sendData[2] = 0x01;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Encoder_ptr->sendData[3] = 0x00;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f103 0120 	add.w	r1, r3, #32
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3338      	adds	r3, #56	; 0x38
 80009fe:	f001 fbb5 	bl	800216c <HAL_CAN_AddTxMessage>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffd1 	bl	80009ba <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Encoder_ptr->angleDeg = (Encoder_ptr->rawRead[3] + Encoder_ptr->rawRead[4]*0x100 + Encoder_ptr->rawRead[5]*0x10000)*360/0x1000;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	441a      	add	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000a60:	041b      	lsls	r3, r3, #16
 8000a62:	4413      	add	r3, r2
 8000a64:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da01      	bge.n	8000a74 <ENCODER_Get_Angle+0x6a>
 8000a70:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a74:	131b      	asrs	r3, r3, #12
 8000a76:	461a      	mov	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	4b82      	ldr	r3, [pc, #520]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a81      	ldr	r2, [pc, #516]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b7f      	ldr	r3, [pc, #508]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	4b7b      	ldr	r3, [pc, #492]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a7a      	ldr	r2, [pc, #488]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a73      	ldr	r2, [pc, #460]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b6d      	ldr	r3, [pc, #436]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a6c      	ldr	r2, [pc, #432]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b6a      	ldr	r3, [pc, #424]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b66      	ldr	r3, [pc, #408]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a65      	ldr	r2, [pc, #404]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b63      	ldr	r3, [pc, #396]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b5c      	ldr	r3, [pc, #368]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000b42:	2200      	movs	r2, #0
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	4859      	ldr	r0, [pc, #356]	; (8000cac <MX_GPIO_Init+0x228>)
 8000b48:	f002 fd24 	bl	8003594 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2110      	movs	r1, #16
 8000b50:	4857      	ldr	r0, [pc, #348]	; (8000cb0 <MX_GPIO_Init+0x22c>)
 8000b52:	f002 fd1f 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000b56:	2200      	movs	r2, #0
 8000b58:	219b      	movs	r1, #155	; 0x9b
 8000b5a:	4856      	ldr	r0, [pc, #344]	; (8000cb4 <MX_GPIO_Init+0x230>)
 8000b5c:	f002 fd1a 	bl	8003594 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8000b66:	4854      	ldr	r0, [pc, #336]	; (8000cb8 <MX_GPIO_Init+0x234>)
 8000b68:	f002 fd14 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8000b72:	4852      	ldr	r0, [pc, #328]	; (8000cbc <MX_GPIO_Init+0x238>)
 8000b74:	f002 fd0e 	bl	8003594 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b80:	2302      	movs	r3, #2
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	484b      	ldr	r0, [pc, #300]	; (8000cb8 <MX_GPIO_Init+0x234>)
 8000b8c:	f002 fb3e 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8000b90:	f248 1378 	movw	r3, #33144	; 0x8178
 8000b94:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <MX_GPIO_Init+0x234>)
 8000ba6:	f002 fb31 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000baa:	233f      	movs	r3, #63	; 0x3f
 8000bac:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	483a      	ldr	r0, [pc, #232]	; (8000cac <MX_GPIO_Init+0x228>)
 8000bc2:	f002 fb23 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4834      	ldr	r0, [pc, #208]	; (8000cb0 <MX_GPIO_Init+0x22c>)
 8000bde:	f002 fb15 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be6:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <MX_GPIO_Init+0x23c>)
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482e      	ldr	r0, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0x22c>)
 8000bf6:	f002 fb09 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000bfa:	239b      	movs	r3, #155	; 0x9b
 8000bfc:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <MX_GPIO_Init+0x230>)
 8000c12:	f002 fafb 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8000c16:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <MX_GPIO_Init+0x234>)
 8000c30:	f002 faec 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8000c34:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c46:	2305      	movs	r3, #5
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0x230>)
 8000c52:	f002 fadb 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000c56:	f64e 4308 	movw	r3, #60424	; 0xec08
 8000c5a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_GPIO_Init+0x238>)
 8000c70:	f002 facc 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0x238>)
 8000c8a:	f002 fabf 	bl	800320c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2017      	movs	r0, #23
 8000c94:	f001 ff7d 	bl	8002b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c98:	2017      	movs	r0, #23
 8000c9a:	f001 ff96 	bl	8002bca <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	10210000 	.word	0x10210000

08000cc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_I2C1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <MX_I2C1_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d02:	f002 fc79 	bl	80035f8 <HAL_I2C_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d0c:	f000 fa3a 	bl	8001184 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d14:	f002 fdb4 	bl	8003880 <HAL_I2CEx_ConfigAnalogFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d1e:	f000 fa31 	bl	8001184 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d26:	f002 fde7 	bl	80038f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d30:	f000 fa28 	bl	8001184 <Error_Handler>
  }

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000278 	.word	0x20000278
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	00061a80 	.word	0x00061a80

08000d44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_I2C_MspInit+0x8c>)
 8000da0:	f002 fa34 	bl	800320c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 ff11 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f8a1 	bl	8000f24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8000de2:	f003 fa4f 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a43      	ldr	r2, [pc, #268]	; (8000ef8 <main+0x124>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	099b      	lsrs	r3, r3, #6
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fef8 	bl	8002be6 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000df6:	2004      	movs	r0, #4
 8000df8:	f001 ff02 	bl	8002c00 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	f001 fec5 	bl	8002b92 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f7ff fe3c 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e0c:	f7ff fcf8 	bl	8000800 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e10:	f7ff ff58 	bl	8000cc4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e14:	f000 fada 	bl	80013cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e18:	f000 fb78 	bl	800150c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000e1c:	f000 fe22 	bl	8001a64 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000e20:	f000 fbee 	bl	8001600 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000e24:	f000 fc6e 	bl	8001704 <MX_TIM8_Init>
  MX_CAN1_Init();
 8000e28:	f7ff fbb0 	bl	800058c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e2c:	f7ff fbe4 	bl	80005f8 <MX_CAN2_Init>
  MX_SPI1_Init();
 8000e30:	f000 f9b0 	bl	8001194 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Initialize hardware communication
//  joystick_Init();
//  ADC_Init();
//  ADC_DataRequest();
  ENCODER_Init();
 8000e34:	f7ff fd04 	bl	8000840 <ENCODER_Init>
//  DWT_Init();
//  while(MPU6050_Init(&hi2c1)==1);
  HAL_Delay(100);
 8000e38:	2064      	movs	r0, #100	; 0x64
 8000e3a:	f000 ff53 	bl	8001ce4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8000e3e:	f000 ff45 	bl	8001ccc <HAL_GetTick>
 8000e42:	60f8      	str	r0, [r7, #12]


  HAL_Delay(500);
 8000e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e48:	f000 ff4c 	bl	8001ce4 <HAL_Delay>
	ENCODER_Get_Angle(&encoderLeft);
 8000e4c:	482b      	ldr	r0, [pc, #172]	; (8000efc <main+0x128>)
 8000e4e:	f7ff fddc 	bl	8000a0a <ENCODER_Get_Angle>
  	ENCODER_Get_Angle(&encoderRight);
 8000e52:	482b      	ldr	r0, [pc, #172]	; (8000f00 <main+0x12c>)
 8000e54:	f7ff fdd9 	bl	8000a0a <ENCODER_Get_Angle>
  	HAL_Delay(500);
 8000e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e5c:	f000 ff42 	bl	8001ce4 <HAL_Delay>
  //debug variable
  uint32_t debug_prev_time = HAL_GetTick();
 8000e60:	f000 ff34 	bl	8001ccc <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint8_t led_status = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
//  float speed = 0;
  while (1)
  {
	//Code to debug with blinking LED
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8000e6a:	f000 ff2f 	bl	8001ccc <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e78:	d317      	bcc.n	8000eaa <main+0xd6>
	  if (led_status == 0){
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d107      	bne.n	8000e90 <main+0xbc>
//	      count++;
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2108      	movs	r1, #8
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <main+0x130>)
 8000e86:	f002 fb85 	bl	8003594 <HAL_GPIO_WritePin>
	      led_status = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e009      	b.n	8000ea4 <main+0xd0>
	  }
	  else if (led_status == 1){
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <main+0xd0>
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2108      	movs	r1, #8
 8000e9a:	481a      	ldr	r0, [pc, #104]	; (8000f04 <main+0x130>)
 8000e9c:	f002 fb7a 	bl	8003594 <HAL_GPIO_WritePin>
	      led_status = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]
	  }
	  debug_prev_time = HAL_GetTick();
 8000ea4:	f000 ff12 	bl	8001ccc <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
//      runMotor(&backMotor, 100, 1);

//      runMotor(&backMotor, speed++, 1);

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 100)
 8000eaa:	f000 ff0f 	bl	8001ccc <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b63      	cmp	r3, #99	; 0x63
 8000eb6:	d9d8      	bls.n	8000e6a <main+0x96>
//    	ENCODER_Get_Angle(&encoderLeft);
//    	ENCODER_Get_Angle(&encoderRight);

	//Get kamlan filtered angle from MPU6050
//	MPU6050_Read_All(&hi2c1, &MPU6050);
	GPIO_Digital_Filtered_Input(&button1, 30);
 8000eb8:	211e      	movs	r1, #30
 8000eba:	4813      	ldr	r0, [pc, #76]	; (8000f08 <main+0x134>)
 8000ebc:	f7ff fb2e 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button2, 30);
 8000ec0:	211e      	movs	r1, #30
 8000ec2:	4812      	ldr	r0, [pc, #72]	; (8000f0c <main+0x138>)
 8000ec4:	f7ff fb2a 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button3, 30);
 8000ec8:	211e      	movs	r1, #30
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <main+0x13c>)
 8000ecc:	f7ff fb26 	bl	800051c <GPIO_Digital_Filtered_Input>

	GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	4810      	ldr	r0, [pc, #64]	; (8000f14 <main+0x140>)
 8000ed4:	f7ff fb22 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8000ed8:	2105      	movs	r1, #5
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <main+0x144>)
 8000edc:	f7ff fb1e 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS1, 5);
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <main+0x148>)
 8000ee4:	f7ff fb1a 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS2, 5);
 8000ee8:	2105      	movs	r1, #5
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <main+0x14c>)
 8000eec:	f7ff fb16 	bl	800051c <GPIO_Digital_Filtered_Input>
//
//	//Climbing phase start



	prev_time = HAL_GetTick();
 8000ef0:	f000 feec 	bl	8001ccc <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8000ef6:	e7b8      	b.n	8000e6a <main+0x96>
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	200001b0 	.word	0x200001b0
 8000f00:	20000200 	.word	0x20000200
 8000f04:	40020400 	.word	0x40020400
 8000f08:	20000040 	.word	0x20000040
 8000f0c:	20000050 	.word	0x20000050
 8000f10:	20000060 	.word	0x20000060
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000010 	.word	0x20000010
 8000f1c:	20000020 	.word	0x20000020
 8000f20:	20000030 	.word	0x20000030

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f005 f9a6 	bl	8006284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <SystemClock_Config+0xd8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <SystemClock_Config+0xd8>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <SystemClock_Config+0xd8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <SystemClock_Config+0xdc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a24      	ldr	r2, [pc, #144]	; (8001000 <SystemClock_Config+0xdc>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <SystemClock_Config+0xdc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f94:	2308      	movs	r3, #8
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f98:	23b4      	movs	r3, #180	; 0xb4
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fd35 	bl	8003a18 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb4:	f000 f8e6 	bl	8001184 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb8:	f002 fcde 	bl	8003978 <HAL_PWREx_EnableOverDrive>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fc2:	f000 f8df 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ff87 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ff0:	f000 f8c8 	bl	8001184 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3750      	adds	r7, #80	; 0x50
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	2b80      	cmp	r3, #128	; 0x80
 8001012:	d11c      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x4a>
    case AD_BUSY_Pin:{
      if (HAL_GetTick()-prev_adc_time > 1){
 8001014:	f000 fe5a 	bl	8001ccc <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_GPIO_EXTI_Callback+0x58>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d916      	bls.n	8001052 <HAL_GPIO_EXTI_Callback+0x4e>
	  ADC_Read(&adc_rawData[0]);
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001026:	f7ff fa5d 	bl	80004e4 <ADC_Read>
	  tempJoyRawDataX = adc_rawData[0];
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5c>)
 800102c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001030:	461a      	mov	r2, r3
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_GPIO_EXTI_Callback+0x60>)
 8001034:	601a      	str	r2, [r3, #0]
	  tempJoyRawDataY = adc_rawData[1];
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800103c:	461a      	mov	r2, r3
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_GPIO_EXTI_Callback+0x64>)
 8001040:	601a      	str	r2, [r3, #0]
	  prev_adc_time = HAL_GetTick();
 8001042:	f000 fe43 	bl	8001ccc <HAL_GetTick>
 8001046:	4603      	mov	r3, r0
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_GPIO_EXTI_Callback+0x58>)
 800104a:	6013      	str	r3, [r2, #0]
      }
    }

      break;
 800104c:	e001      	b.n	8001052 <HAL_GPIO_EXTI_Callback+0x4e>
    default:
      break;
 800104e:	bf00      	nop
 8001050:	e000      	b.n	8001054 <HAL_GPIO_EXTI_Callback+0x50>
      break;
 8001052:	bf00      	nop
  }
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000a4 	.word	0x200000a4
 8001060:	20000348 	.word	0x20000348
 8001064:	200003c0 	.word	0x200003c0
 8001068:	200002d0 	.word	0x200002d0

0800106c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d11e      	bne.n	80010ba <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001082:	2100      	movs	r1, #0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f001 f94c 	bl	8002322 <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_LEFT){
 800108a:	7a7b      	ldrb	r3, [r7, #9]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fc3e 	bl	8000918 <ENCODER_Sort_Incoming>
		ENCODER_Get_Angle(&encoderLeft);
 800109c:	4816      	ldr	r0, [pc, #88]	; (80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800109e:	f7ff fcb4 	bl	8000a0a <ENCODER_Get_Angle>
		}
		if(incoming[1] == ENC_ADDR_RIGHT){
 80010a2:	7a7b      	ldrb	r3, [r7, #9]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
						ENCODER_Sort_Incoming(incoming, &encoderRight);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4913      	ldr	r1, [pc, #76]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fc32 	bl	8000918 <ENCODER_Sort_Incoming>

					ENCODER_Get_Angle(&encoderRight);}
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80010b6:	f7ff fca8 	bl	8000a0a <ENCODER_Get_Angle>

	}

	if (hcan == &hcan2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d112      	bne.n	80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
		{
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 f929 	bl	8002322 <HAL_CAN_GetRxMessage>
			if(incoming[1] == ENC_ADDR_RIGHT)
 80010d0:	7a7b      	ldrb	r3, [r7, #9]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d105      	bne.n	80010e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
				ENCODER_Sort_Incoming(incoming, &encoderRight);
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fc1b 	bl	8000918 <ENCODER_Sort_Incoming>

			ENCODER_Get_Angle(&encoderRight);
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80010e4:	f7ff fc91 	bl	8000a0a <ENCODER_Get_Angle>

		}
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000160 	.word	0x20000160
 80010f4:	200000a8 	.word	0x200000a8
 80010f8:	200001b0 	.word	0x200001b0
 80010fc:	20000200 	.word	0x20000200
 8001100:	20000138 	.word	0x20000138

08001104 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	//Right encoder callback
	if (hcan == &hcan2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d112      	bne.n	800113a <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, incoming);
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 800111a:	2101      	movs	r1, #1
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f001 f900 	bl	8002322 <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_RIGHT)
 8001122:	7a7b      	ldrb	r3, [r7, #9]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d105      	bne.n	8001134 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4912      	ldr	r1, [pc, #72]	; (8001178 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fbf2 	bl	8000918 <ENCODER_Sort_Incoming>

		ENCODER_Get_Angle(&encoderRight);
 8001134:	4810      	ldr	r0, [pc, #64]	; (8001178 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 8001136:	f7ff fc68 	bl	8000a0a <ENCODER_Get_Angle>

	}

	if (hcan == &hcan1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <HAL_CAN_RxFifo1MsgPendingCallback+0x78>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d112      	bne.n	8001168 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>
		{
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001148:	2100      	movs	r1, #0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f8e9 	bl	8002322 <HAL_CAN_GetRxMessage>
			if(incoming[1] == ENC_ADDR_LEFT)
 8001150:	7a7b      	ldrb	r3, [r7, #9]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d105      	bne.n	8001162 <HAL_CAN_RxFifo1MsgPendingCallback+0x5e>
				ENCODER_Sort_Incoming(incoming, &encoderLeft);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4909      	ldr	r1, [pc, #36]	; (8001180 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fbdb 	bl	8000918 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderLeft);
 8001162:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_CAN_RxFifo1MsgPendingCallback+0x7c>)
 8001164:	f7ff fc51 	bl	8000a0a <ENCODER_Get_Angle>

		}
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000138 	.word	0x20000138
 8001174:	200000c4 	.word	0x200000c4
 8001178:	20000200 	.word	0x20000200
 800117c:	20000160 	.word	0x20000160
 8001180:	200001b0 	.word	0x200001b0

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_SPI1_Init+0x68>)
 800119a:	4a19      	ldr	r2, [pc, #100]	; (8001200 <MX_SPI1_Init+0x6c>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI1_Init+0x68>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_SPI1_Init+0x68>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_SPI1_Init+0x68>)
 80011b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI1_Init+0x68>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI1_Init+0x68>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI1_Init+0x68>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI1_Init+0x68>)
 80011cc:	2228      	movs	r2, #40	; 0x28
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI1_Init+0x68>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI1_Init+0x68>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI1_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI1_Init+0x68>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI1_Init+0x68>)
 80011ea:	f003 f87f 	bl	80042ec <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80011f4:	f7ff ffc6 	bl	8001184 <Error_Handler>
  }

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000e0 	.word	0x200000e0
 8001200:	40013000 	.word	0x40013000

08001204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_SPI_MspInit+0x84>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d12b      	bne.n	800127e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_SPI_MspInit+0x88>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_SPI_MspInit+0x88>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800125e:	2360      	movs	r3, #96	; 0x60
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126e:	2305      	movs	r3, #5
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 800127a:	f001 ffc7 	bl	800320c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40013000 	.word	0x40013000
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_MspInit+0x4c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_MspInit+0x4c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x4c>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 fcb4 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA1_Stream1_IRQHandler+0x10>)
 8001346:	f001 fd25 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200004c4 	.word	0x200004c4

08001354 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <CAN1_RX0_IRQHandler+0x10>)
 800135a:	f001 f91a 	bl	8002592 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000160 	.word	0x20000160

08001368 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800136c:	2080      	movs	r0, #128	; 0x80
 800136e:	f002 f92b 	bl	80035c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <CAN2_RX0_IRQHandler+0x10>)
 800137e:	f001 f908 	bl	8002592 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000138 	.word	0x20000138

0800138c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <CAN2_RX1_IRQHandler+0x10>)
 8001392:	f001 f8fe 	bl	8002592 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000138 	.word	0x20000138

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <SystemInit+0x28>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <SystemInit+0x28>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SystemInit+0x28>)
 80013b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ba:	609a      	str	r2, [r3, #8]
#endif
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b096      	sub	sp, #88	; 0x58
 80013d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f004 ff3d 	bl	8006284 <memset>

  htim1.Instance = TIM1;
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <MX_TIM1_Init+0x138>)
 800140c:	4a3e      	ldr	r2, [pc, #248]	; (8001508 <MX_TIM1_Init+0x13c>)
 800140e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <MX_TIM1_Init+0x138>)
 8001412:	22b3      	movs	r2, #179	; 0xb3
 8001414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <MX_TIM1_Init+0x138>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <MX_TIM1_Init+0x138>)
 800141e:	2263      	movs	r2, #99	; 0x63
 8001420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <MX_TIM1_Init+0x138>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <MX_TIM1_Init+0x138>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <MX_TIM1_Init+0x138>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001434:	4833      	ldr	r0, [pc, #204]	; (8001504 <MX_TIM1_Init+0x138>)
 8001436:	f003 fb79 	bl	8004b2c <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001440:	f7ff fea0 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800144e:	4619      	mov	r1, r3
 8001450:	482c      	ldr	r0, [pc, #176]	; (8001504 <MX_TIM1_Init+0x138>)
 8001452:	f003 fd63 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800145c:	f7ff fe92 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001460:	4828      	ldr	r0, [pc, #160]	; (8001504 <MX_TIM1_Init+0x138>)
 8001462:	f003 fb8e 	bl	8004b82 <HAL_TIM_PWM_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800146c:	f7ff fe8a 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800147c:	4619      	mov	r1, r3
 800147e:	4821      	ldr	r0, [pc, #132]	; (8001504 <MX_TIM1_Init+0x138>)
 8001480:	f004 fa24 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800148a:	f7ff fe7b 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148e:	2360      	movs	r3, #96	; 0x60
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	2204      	movs	r2, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4814      	ldr	r0, [pc, #80]	; (8001504 <MX_TIM1_Init+0x138>)
 80014b4:	f003 fc6c 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80014be:	f7ff fe61 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <MX_TIM1_Init+0x138>)
 80014e6:	f004 fa6d 	bl	80059c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014f0:	f7ff fe48 	bl	8001184 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80014f4:	4803      	ldr	r0, [pc, #12]	; (8001504 <MX_TIM1_Init+0x138>)
 80014f6:	f000 fa2b 	bl	8001950 <HAL_TIM_MspPostInit>

}
 80014fa:	bf00      	nop
 80014fc:	3758      	adds	r7, #88	; 0x58
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000444 	.word	0x20000444
 8001508:	40010000 	.word	0x40010000

0800150c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_TIM2_Init+0xf0>)
 8001538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_TIM2_Init+0xf0>)
 8001540:	22b3      	movs	r2, #179	; 0xb3
 8001542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <MX_TIM2_Init+0xf0>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_TIM2_Init+0xf0>)
 800154c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001550:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_TIM2_Init+0xf0>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <MX_TIM2_Init+0xf0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155e:	4827      	ldr	r0, [pc, #156]	; (80015fc <MX_TIM2_Init+0xf0>)
 8001560:	f003 fae4 	bl	8004b2c <HAL_TIM_Base_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800156a:	f7ff fe0b 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001572:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4619      	mov	r1, r3
 800157a:	4820      	ldr	r0, [pc, #128]	; (80015fc <MX_TIM2_Init+0xf0>)
 800157c:	f003 fcce 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001586:	f7ff fdfd 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800158a:	481c      	ldr	r0, [pc, #112]	; (80015fc <MX_TIM2_Init+0xf0>)
 800158c:	f003 fb2e 	bl	8004bec <HAL_TIM_IC_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001596:	f7ff fdf5 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <MX_TIM2_Init+0xf0>)
 80015aa:	f004 f98f 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80015b4:	f7ff fde6 	bl	8001184 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015bc:	2301      	movs	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2208      	movs	r2, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <MX_TIM2_Init+0xf0>)
 80015d0:	f003 fb41 	bl	8004c56 <HAL_TIM_IC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80015da:	f7ff fdd3 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	220c      	movs	r2, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_TIM2_Init+0xf0>)
 80015e6:	f003 fb36 	bl	8004c56 <HAL_TIM_IC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80015f0:	f7ff fdc8 	bl	8001184 <Error_Handler>
  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000484 	.word	0x20000484

08001600 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	; 0x38
 8001604:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001632:	4a33      	ldr	r2, [pc, #204]	; (8001700 <MX_TIM3_Init+0x100>)
 8001634:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001638:	2259      	movs	r2, #89	; 0x59
 800163a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <MX_TIM3_Init+0xfc>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001644:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001648:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <MX_TIM3_Init+0xfc>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001656:	4829      	ldr	r0, [pc, #164]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001658:	f003 fa68 	bl	8004b2c <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001662:	f7ff fd8f 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001670:	4619      	mov	r1, r3
 8001672:	4822      	ldr	r0, [pc, #136]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001674:	f003 fc52 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800167e:	f7ff fd81 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001682:	481e      	ldr	r0, [pc, #120]	; (80016fc <MX_TIM3_Init+0xfc>)
 8001684:	f003 fa7d 	bl	8004b82 <HAL_TIM_PWM_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800168e:	f7ff fd79 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	4619      	mov	r1, r3
 80016a0:	4816      	ldr	r0, [pc, #88]	; (80016fc <MX_TIM3_Init+0xfc>)
 80016a2:	f004 f913 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016ac:	f7ff fd6a 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b0:	2360      	movs	r3, #96	; 0x60
 80016b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80016b4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80016b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_TIM3_Init+0xfc>)
 80016ca:	f003 fb61 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016d4:	f7ff fd56 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2204      	movs	r2, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_TIM3_Init+0xfc>)
 80016e0:	f003 fb56 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80016ea:	f7ff fd4b 	bl	8001184 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <MX_TIM3_Init+0xfc>)
 80016f0:	f000 f92e 	bl	8001950 <HAL_TIM_MspPostInit>

}
 80016f4:	bf00      	nop
 80016f6:	3738      	adds	r7, #56	; 0x38
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000404 	.word	0x20000404
 8001700:	40000400 	.word	0x40000400

08001704 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fda1 	bl	8006284 <memset>

  htim8.Instance = TIM8;
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <MX_TIM8_Init+0x134>)
 8001744:	4a3d      	ldr	r2, [pc, #244]	; (800183c <MX_TIM8_Init+0x138>)
 8001746:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001748:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <MX_TIM8_Init+0x134>)
 800174a:	22b3      	movs	r2, #179	; 0xb3
 800174c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <MX_TIM8_Init+0x134>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <MX_TIM8_Init+0x134>)
 8001756:	2263      	movs	r2, #99	; 0x63
 8001758:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <MX_TIM8_Init+0x134>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <MX_TIM8_Init+0x134>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <MX_TIM8_Init+0x134>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800176c:	4832      	ldr	r0, [pc, #200]	; (8001838 <MX_TIM8_Init+0x134>)
 800176e:	f003 f9dd 	bl	8004b2c <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001778:	f7ff fd04 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001782:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001786:	4619      	mov	r1, r3
 8001788:	482b      	ldr	r0, [pc, #172]	; (8001838 <MX_TIM8_Init+0x134>)
 800178a:	f003 fbc7 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001794:	f7ff fcf6 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001798:	4827      	ldr	r0, [pc, #156]	; (8001838 <MX_TIM8_Init+0x134>)
 800179a:	f003 f9f2 	bl	8004b82 <HAL_TIM_PWM_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80017a4:	f7ff fcee 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b4:	4619      	mov	r1, r3
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <MX_TIM8_Init+0x134>)
 80017b8:	f004 f888 	bl	80058cc <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80017c2:	f7ff fcdf 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c6:	2360      	movs	r3, #96	; 0x60
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	220c      	movs	r2, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	; (8001838 <MX_TIM8_Init+0x134>)
 80017e8:	f003 fad2 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80017f2:	f7ff fcc7 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800180a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM8_Init+0x134>)
 800181a:	f004 f8d3 	bl	80059c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8001824:	f7ff fcae 	bl	8001184 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM8_Init+0x134>)
 800182a:	f000 f891 	bl	8001950 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3758      	adds	r7, #88	; 0x58
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200003c4 	.word	0x200003c4
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a37      	ldr	r2, [pc, #220]	; (800193c <HAL_TIM_Base_MspInit+0xfc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10e      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a35      	ldr	r2, [pc, #212]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800187e:	e059      	b.n	8001934 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d12d      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a24      	ldr	r2, [pc, #144]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 80018c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4819      	ldr	r0, [pc, #100]	; (8001944 <HAL_TIM_Base_MspInit+0x104>)
 80018e0:	f001 fc94 	bl	800320c <HAL_GPIO_Init>
}
 80018e4:	e026      	b.n	8001934 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_TIM_Base_MspInit+0x108>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10e      	bne.n	800190e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	e012      	b.n	8001934 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_TIM_Base_MspInit+0x10c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d10d      	bne.n	8001934 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	6453      	str	r3, [r2, #68]	; 0x44
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_TIM_Base_MspInit+0x100>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
}
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010000 	.word	0x40010000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400
 8001948:	40000400 	.word	0x40000400
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <HAL_TIM_MspPostInit+0xfc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d11f      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a35      	ldr	r2, [pc, #212]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 800198e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	482a      	ldr	r0, [pc, #168]	; (8001a54 <HAL_TIM_MspPostInit+0x104>)
 80019ac:	f001 fc2e 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019b0:	e047      	b.n	8001a42 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <HAL_TIM_MspPostInit+0x108>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d11e      	bne.n	80019fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80019d8:	23c0      	movs	r3, #192	; 0xc0
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019e8:	2302      	movs	r3, #2
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	481a      	ldr	r0, [pc, #104]	; (8001a5c <HAL_TIM_MspPostInit+0x10c>)
 80019f4:	f001 fc0a 	bl	800320c <HAL_GPIO_Init>
}
 80019f8:	e023      	b.n	8001a42 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <HAL_TIM_MspPostInit+0x110>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d11e      	bne.n	8001a42 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_TIM_MspPostInit+0x100>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8001a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a32:	2303      	movs	r3, #3
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <HAL_TIM_MspPostInit+0x10c>)
 8001a3e:	f001 fbe5 	bl	800320c <HAL_GPIO_Init>
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40010400 	.word	0x40010400

08001a64 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_USART3_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART3_UART_Init+0x4c>)
 8001a9c:	f003 ffe4 	bl	8005a68 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f7ff fb6d 	bl	8001184 <Error_Handler>
  }

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000524 	.word	0x20000524
 8001ab4:	40004800 	.word	0x40004800

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <HAL_UART_MspInit+0xe0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d15a      	bne.n	8001b90 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HAL_UART_MspInit+0xe4>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a2e      	ldr	r2, [pc, #184]	; (8001b9c <HAL_UART_MspInit+0xe4>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_UART_MspInit+0xe4>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <HAL_UART_MspInit+0xe4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_UART_MspInit+0xe4>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_UART_MspInit+0xe4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8001b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b24:	2307      	movs	r3, #7
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <HAL_UART_MspInit+0xe8>)
 8001b30:	f001 fb6c 	bl	800320c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0xf0>)
 8001b38:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b40:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b54:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b76:	f001 f85f 	bl	8002c38 <HAL_DMA_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b80:	f7ff fb00 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_UART_MspInit+0xec>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40004800 	.word	0x40004800
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	200004c4 	.word	0x200004c4
 8001ba8:	40026028 	.word	0x40026028

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bb2:	e003      	b.n	8001bbc <LoopCopyDataInit>

08001bb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bba:	3104      	adds	r1, #4

08001bbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bc4:	d3f6      	bcc.n	8001bb4 <CopyDataInit>
  ldr  r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bc8:	e002      	b.n	8001bd0 <LoopFillZerobss>

08001bca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bcc:	f842 3b04 	str.w	r3, [r2], #4

08001bd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bd4:	d3f9      	bcc.n	8001bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff fbe3 	bl	80013a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f004 fb2f 	bl	800623c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7ff f8f9 	bl	8000dd4 <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001be4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001be8:	080062dc 	.word	0x080062dc
  ldr  r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bf0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001bf4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001bf8:	20000568 	.word	0x20000568

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 ffa7 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fb2e 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 ffbf 	bl	8002be6 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c80:	f000 ff87 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000070 	.word	0x20000070
 8001c9c:	20000078 	.word	0x20000078
 8001ca0:	20000074 	.word	0x20000074

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000078 	.word	0x20000078
 8001cc8:	20000564 	.word	0x20000564

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000564 	.word	0x20000564

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000078 	.word	0x20000078

08001d2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0ed      	b.n	8001f1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fc8a 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0202 	bic.w	r2, r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d60:	f7ff ffb4 	bl	8001ccc <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d66:	e012      	b.n	8001d8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d68:	f7ff ffb0 	bl	8001ccc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d90b      	bls.n	8001d8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2205      	movs	r2, #5
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0c5      	b.n	8001f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e5      	bne.n	8001d68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dac:	f7ff ff8e 	bl	8001ccc <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001db2:	e012      	b.n	8001dda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001db4:	f7ff ff8a 	bl	8001ccc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b0a      	cmp	r3, #10
 8001dc0:	d90b      	bls.n	8001dda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e09f      	b.n	8001f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0e5      	beq.n	8001db4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7e1b      	ldrb	r3, [r3, #24]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e007      	b.n	8001e12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7e5b      	ldrb	r3, [r3, #25]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e9b      	ldrb	r3, [r3, #26]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e007      	b.n	8001e66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0220 	bic.w	r2, r2, #32
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7edb      	ldrb	r3, [r3, #27]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e007      	b.n	8001e90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0210 	orr.w	r2, r2, #16
 8001e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7f1b      	ldrb	r3, [r3, #28]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0208 	orr.w	r2, r2, #8
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e007      	b.n	8001eba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0208 	bic.w	r2, r2, #8
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7f5b      	ldrb	r3, [r3, #29]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	ea42 0103 	orr.w	r1, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d003      	beq.n	8001f4a <HAL_CAN_ConfigFilter+0x26>
 8001f42:	7cfb      	ldrb	r3, [r7, #19]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f040 80be 	bne.w	80020c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d123      	bne.n	8001ff4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3248      	adds	r2, #72	; 0x48
 8001fd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	3348      	adds	r3, #72	; 0x48
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d122      	bne.n	8002042 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800201c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3248      	adds	r2, #72	; 0x48
 8002022:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002036:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43db      	mvns	r3, r3
 8002054:	401a      	ands	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800205c:	e007      	b.n	800206e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	431a      	orrs	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	401a      	ands	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002088:	e007      	b.n	800209a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	431a      	orrs	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020b8:	f023 0201 	bic.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e006      	b.n	80020d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40006400 	.word	0x40006400

080020e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d12e      	bne.n	8002156 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff fddc 	bl	8001ccc <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002116:	e012      	b.n	800213e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002118:	f7ff fdd8 	bl	8001ccc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d90b      	bls.n	800213e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e012      	b.n	8002164 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e5      	bne.n	8002118 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e006      	b.n	8002164 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800218a:	7ffb      	ldrb	r3, [r7, #31]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d003      	beq.n	8002198 <HAL_CAN_AddTxMessage+0x2c>
 8002190:	7ffb      	ldrb	r3, [r7, #31]
 8002192:	2b02      	cmp	r3, #2
 8002194:	f040 80b8 	bne.w	8002308 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10a      	bne.n	80021b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80a0 	beq.w	80022f8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	0e1b      	lsrs	r3, r3, #24
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d907      	bls.n	80021d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e09e      	b.n	8002316 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021d8:	2201      	movs	r2, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	409a      	lsls	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	6809      	ldr	r1, [r1, #0]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3318      	adds	r3, #24
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	440b      	add	r3, r1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e00f      	b.n	8002226 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002210:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800221a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3318      	adds	r3, #24
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	440b      	add	r3, r1
 8002224:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3318      	adds	r3, #24
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	440b      	add	r3, r1
 8002236:	3304      	adds	r3, #4
 8002238:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	7d1b      	ldrb	r3, [r3, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d111      	bne.n	8002266 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3318      	adds	r3, #24
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3318      	adds	r3, #24
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	440b      	add	r3, r1
 8002262:	3304      	adds	r3, #4
 8002264:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3307      	adds	r3, #7
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	061a      	lsls	r2, r3, #24
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3306      	adds	r3, #6
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3305      	adds	r3, #5
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	4313      	orrs	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	3204      	adds	r2, #4
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	4610      	mov	r0, r2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6811      	ldr	r1, [r2, #0]
 800228e:	ea43 0200 	orr.w	r2, r3, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	440b      	add	r3, r1
 8002298:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800229c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3303      	adds	r3, #3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	061a      	lsls	r2, r3, #24
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3302      	adds	r3, #2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	4313      	orrs	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	4610      	mov	r0, r2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	6811      	ldr	r1, [r2, #0]
 80022c4:	ea43 0200 	orr.w	r2, r3, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3318      	adds	r3, #24
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4413      	add	r3, r2
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6811      	ldr	r1, [r2, #0]
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3318      	adds	r3, #24
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	440b      	add	r3, r1
 80022f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e00e      	b.n	8002316 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e006      	b.n	8002316 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
  }
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002322:	b480      	push	{r7}
 8002324:	b087      	sub	sp, #28
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002336:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d003      	beq.n	8002346 <HAL_CAN_GetRxMessage+0x24>
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b02      	cmp	r3, #2
 8002342:	f040 80f3 	bne.w	800252c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10e      	bne.n	800236a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0e7      	b.n	800253a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d8      	b.n	800253a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0204 	and.w	r2, r3, #4
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	331b      	adds	r3, #27
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	331b      	adds	r3, #27
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	331b      	adds	r3, #27
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0202 	and.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	331b      	adds	r3, #27
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 020f 	and.w	r2, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	331b      	adds	r3, #27
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b2da      	uxtb	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	331b      	adds	r3, #27
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0a1a      	lsrs	r2, r3, #8
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0c1a      	lsrs	r2, r3, #16
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3302      	adds	r3, #2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e1a      	lsrs	r2, r3, #24
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3303      	adds	r3, #3
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	3304      	adds	r3, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0a1a      	lsrs	r2, r3, #8
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3305      	adds	r3, #5
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0c1a      	lsrs	r2, r3, #16
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	3306      	adds	r3, #6
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e1a      	lsrs	r2, r3, #24
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	3307      	adds	r3, #7
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d108      	bne.n	8002518 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0220 	orr.w	r2, r2, #32
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	e007      	b.n	8002528 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e006      	b.n	800253a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002556:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d002      	beq.n	8002564 <HAL_CAN_ActivateNotification+0x1e>
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d109      	bne.n	8002578 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6959      	ldr	r1, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e006      	b.n	8002586 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	; 0x28
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d07c      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d023      	beq.n	800262a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2201      	movs	r2, #1
 80025e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f983 	bl	8002900 <HAL_CAN_TxMailbox0CompleteCallback>
 80025fa:	e016      	b.n	800262a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e00c      	b.n	800262a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	e002      	b.n	800262a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f989 	bl	800293c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d024      	beq.n	800267e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f963 	bl	8002914 <HAL_CAN_TxMailbox1CompleteCallback>
 800264e:	e016      	b.n	800267e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e00c      	b.n	800267e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e002      	b.n	800267e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f969 	bl	8002950 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d024      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002690:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f943 	bl	8002928 <HAL_CAN_TxMailbox2CompleteCallback>
 80026a2:	e016      	b.n	80026d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e00c      	b.n	80026d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e002      	b.n	80026d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f949 	bl	8002964 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2210      	movs	r2, #16
 80026f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2208      	movs	r2, #8
 8002710:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f930 	bl	8002978 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fe fc9b 	bl	800106c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00c      	beq.n	800275a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2210      	movs	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2208      	movs	r2, #8
 8002774:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f908 	bl	800298c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7fe fcb5 	bl	8001104 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8f2 	bl	80029a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2208      	movs	r2, #8
 80027d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8eb 	bl	80029b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d07b      	beq.n	80028e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d072      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284c:	2b00      	cmp	r3, #0
 800284e:	d043      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d03e      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d02b      	beq.n	80028bc <HAL_CAN_IRQHandler+0x32a>
 8002864:	2b60      	cmp	r3, #96	; 0x60
 8002866:	d82e      	bhi.n	80028c6 <HAL_CAN_IRQHandler+0x334>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d022      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x320>
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d82a      	bhi.n	80028c6 <HAL_CAN_IRQHandler+0x334>
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d019      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x316>
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d826      	bhi.n	80028c6 <HAL_CAN_IRQHandler+0x334>
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d010      	beq.n	800289e <HAL_CAN_IRQHandler+0x30c>
 800287c:	2b30      	cmp	r3, #48	; 0x30
 800287e:	d822      	bhi.n	80028c6 <HAL_CAN_IRQHandler+0x334>
 8002880:	2b10      	cmp	r3, #16
 8002882:	d002      	beq.n	800288a <HAL_CAN_IRQHandler+0x2f8>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d005      	beq.n	8002894 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002888:	e01d      	b.n	80028c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002892:	e019      	b.n	80028c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f043 0310 	orr.w	r3, r3, #16
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800289c:	e014      	b.n	80028c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f043 0320 	orr.w	r3, r3, #32
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a6:	e00f      	b.n	80028c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028b0:	e00a      	b.n	80028c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ba:	e005      	b.n	80028c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028c4:	e000      	b.n	80028c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80028c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2204      	movs	r2, #4
 80028de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f868 	bl	80029c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d106      	bne.n	8002c1c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002c1a:	e005      	b.n	8002c28 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff f842 	bl	8001ccc <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e099      	b.n	8002d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c76:	f7ff f829 	bl	8001ccc <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d908      	bls.n	8002c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e078      	b.n	8002d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e8      	bne.n	8002c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_DMA_Init+0x158>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0307 	bic.w	r3, r3, #7
 8002d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d117      	bne.n	8002d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f9e9 	bl	8003114 <DMA_CheckFifoParam>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2240      	movs	r2, #64	; 0x40
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d56:	2301      	movs	r3, #1
 8002d58:	e016      	b.n	8002d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9a0 	bl	80030a8 <DMA_CalcBaseAndBitshift>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	223f      	movs	r2, #63	; 0x3f
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	f010803f 	.word	0xf010803f

08002d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da0:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_DMA_IRQHandler+0x258>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a92      	ldr	r2, [pc, #584]	; (8002ff0 <HAL_DMA_IRQHandler+0x25c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a9b      	lsrs	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2208      	movs	r2, #8
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2201      	movs	r2, #1
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2204      	movs	r2, #4
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2210      	movs	r2, #16
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d043      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03c      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2210      	movs	r2, #16
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d024      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e01f      	b.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e016      	b.n	8002f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d107      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0208 	bic.w	r2, r2, #8
 8002ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2220      	movs	r2, #32
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 808e 	beq.w	8003032 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8086 	beq.w	8003032 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d136      	bne.n	8002fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0216 	bic.w	r2, r2, #22
 8002f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x1da>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0208 	bic.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	223f      	movs	r2, #63	; 0x3f
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d07d      	beq.n	800309e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
        }
        return;
 8002faa:	e078      	b.n	800309e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01c      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d108      	bne.n	8002fda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d030      	beq.n	8003032 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e02b      	b.n	8003032 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d027      	beq.n	8003032 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e022      	b.n	8003032 <HAL_DMA_IRQHandler+0x29e>
 8002fec:	20000070 	.word	0x20000070
 8002ff0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10f      	bne.n	8003022 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0210 	bic.w	r2, r2, #16
 8003010:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	2b00      	cmp	r3, #0
 8003038:	d032      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d022      	beq.n	800308c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d307      	bcc.n	800307a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f2      	bne.n	800305e <HAL_DMA_IRQHandler+0x2ca>
 8003078:	e000      	b.n	800307c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800307a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e000      	b.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800309e:	bf00      	nop
    }
  }
}
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop

080030a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3b10      	subs	r3, #16
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <DMA_CalcBaseAndBitshift+0x64>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030c2:	4a13      	ldr	r2, [pc, #76]	; (8003110 <DMA_CalcBaseAndBitshift+0x68>)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d909      	bls.n	80030ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	1d1a      	adds	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	659a      	str	r2, [r3, #88]	; 0x58
 80030e8:	e007      	b.n	80030fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	aaaaaaab 	.word	0xaaaaaaab
 8003110:	080062c4 	.word	0x080062c4

08003114 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11f      	bne.n	800316e <DMA_CheckFifoParam+0x5a>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d856      	bhi.n	80031e2 <DMA_CheckFifoParam+0xce>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <DMA_CheckFifoParam+0x28>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	0800314d 	.word	0x0800314d
 8003140:	0800315f 	.word	0x0800315f
 8003144:	0800314d 	.word	0x0800314d
 8003148:	080031e3 	.word	0x080031e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d046      	beq.n	80031e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e043      	b.n	80031e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003166:	d140      	bne.n	80031ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316c:	e03d      	b.n	80031ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003176:	d121      	bne.n	80031bc <DMA_CheckFifoParam+0xa8>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d837      	bhi.n	80031ee <DMA_CheckFifoParam+0xda>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <DMA_CheckFifoParam+0x70>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	08003195 	.word	0x08003195
 8003188:	0800319b 	.word	0x0800319b
 800318c:	08003195 	.word	0x08003195
 8003190:	080031ad 	.word	0x080031ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      break;
 8003198:	e030      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d025      	beq.n	80031f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031aa:	e022      	b.n	80031f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b4:	d11f      	bne.n	80031f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ba:	e01c      	b.n	80031f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d903      	bls.n	80031ca <DMA_CheckFifoParam+0xb6>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031c8:	e018      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      break;
 80031ce:	e015      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	e00b      	b.n	80031fa <DMA_CheckFifoParam+0xe6>
      break;
 80031e2:	bf00      	nop
 80031e4:	e00a      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      break;
 80031e6:	bf00      	nop
 80031e8:	e008      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e006      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      break;   
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
    }
  } 
  
  return status; 
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e177      	b.n	8003518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8166 	bne.w	8003512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d00b      	beq.n	8003266 <HAL_GPIO_Init+0x5a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800325a:	2b11      	cmp	r3, #17
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b12      	cmp	r3, #18
 8003264:	d130      	bne.n	80032c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	2203      	movs	r2, #3
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329c:	2201      	movs	r2, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 0201 	and.w	r2, r3, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0xfc>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b12      	cmp	r3, #18
 8003306:	d123      	bne.n	8003350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	08da      	lsrs	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3208      	adds	r2, #8
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3208      	adds	r2, #8
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2203      	movs	r2, #3
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80c0 	beq.w	8003512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b66      	ldr	r3, [pc, #408]	; (8003530 <HAL_GPIO_Init+0x324>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4a65      	ldr	r2, [pc, #404]	; (8003530 <HAL_GPIO_Init+0x324>)
 800339c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a0:	6453      	str	r3, [r2, #68]	; 0x44
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_GPIO_Init+0x324>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a61      	ldr	r2, [pc, #388]	; (8003534 <HAL_GPIO_Init+0x328>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_GPIO_Init+0x32c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d037      	beq.n	800344a <HAL_GPIO_Init+0x23e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a57      	ldr	r2, [pc, #348]	; (800353c <HAL_GPIO_Init+0x330>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d031      	beq.n	8003446 <HAL_GPIO_Init+0x23a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a56      	ldr	r2, [pc, #344]	; (8003540 <HAL_GPIO_Init+0x334>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02b      	beq.n	8003442 <HAL_GPIO_Init+0x236>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a55      	ldr	r2, [pc, #340]	; (8003544 <HAL_GPIO_Init+0x338>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d025      	beq.n	800343e <HAL_GPIO_Init+0x232>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a54      	ldr	r2, [pc, #336]	; (8003548 <HAL_GPIO_Init+0x33c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01f      	beq.n	800343a <HAL_GPIO_Init+0x22e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a53      	ldr	r2, [pc, #332]	; (800354c <HAL_GPIO_Init+0x340>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d019      	beq.n	8003436 <HAL_GPIO_Init+0x22a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_GPIO_Init+0x344>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_GPIO_Init+0x226>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a51      	ldr	r2, [pc, #324]	; (8003554 <HAL_GPIO_Init+0x348>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00d      	beq.n	800342e <HAL_GPIO_Init+0x222>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a50      	ldr	r2, [pc, #320]	; (8003558 <HAL_GPIO_Init+0x34c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x21e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4f      	ldr	r2, [pc, #316]	; (800355c <HAL_GPIO_Init+0x350>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_GPIO_Init+0x21a>
 8003422:	2309      	movs	r3, #9
 8003424:	e012      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003426:	230a      	movs	r3, #10
 8003428:	e010      	b.n	800344c <HAL_GPIO_Init+0x240>
 800342a:	2308      	movs	r3, #8
 800342c:	e00e      	b.n	800344c <HAL_GPIO_Init+0x240>
 800342e:	2307      	movs	r3, #7
 8003430:	e00c      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003432:	2306      	movs	r3, #6
 8003434:	e00a      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003436:	2305      	movs	r3, #5
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x240>
 800343a:	2304      	movs	r3, #4
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x240>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x240>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4935      	ldr	r1, [pc, #212]	; (8003534 <HAL_GPIO_Init+0x328>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_GPIO_Init+0x354>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348e:	4a34      	ldr	r2, [pc, #208]	; (8003560 <HAL_GPIO_Init+0x354>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003494:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_GPIO_Init+0x354>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b8:	4a29      	ldr	r2, [pc, #164]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <HAL_GPIO_Init+0x354>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f ae84 	bls.w	8003228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40013800 	.word	0x40013800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400
 8003540:	40020800 	.word	0x40020800
 8003544:	40020c00 	.word	0x40020c00
 8003548:	40021000 	.word	0x40021000
 800354c:	40021400 	.word	0x40021400
 8003550:	40021800 	.word	0x40021800
 8003554:	40021c00 	.word	0x40021c00
 8003558:	40022000 	.word	0x40022000
 800355c:	40022400 	.word	0x40022400
 8003560:	40013c00 	.word	0x40013c00

08003564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e001      	b.n	8003586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
 80035a0:	4613      	mov	r3, r2
 80035a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a4:	787b      	ldrb	r3, [r7, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035b0:	e003      	b.n	80035ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	041a      	lsls	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	619a      	str	r2, [r3, #24]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fd0c 	bl	8001004 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40013c00 	.word	0x40013c00

080035f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e12b      	b.n	8003862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd fb90 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800365c:	f000 fe1e 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8003660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a81      	ldr	r2, [pc, #516]	; (800386c <HAL_I2C_Init+0x274>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d807      	bhi.n	800367c <HAL_I2C_Init+0x84>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a80      	ldr	r2, [pc, #512]	; (8003870 <HAL_I2C_Init+0x278>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e006      	b.n	800368a <HAL_I2C_Init+0x92>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a7d      	ldr	r2, [pc, #500]	; (8003874 <HAL_I2C_Init+0x27c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	bf94      	ite	ls
 8003684:	2301      	movls	r3, #1
 8003686:	2300      	movhi	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0e7      	b.n	8003862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a78      	ldr	r2, [pc, #480]	; (8003878 <HAL_I2C_Init+0x280>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0c9b      	lsrs	r3, r3, #18
 800369c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_I2C_Init+0x274>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d802      	bhi.n	80036cc <HAL_I2C_Init+0xd4>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e009      	b.n	80036e0 <HAL_I2C_Init+0xe8>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a69      	ldr	r2, [pc, #420]	; (800387c <HAL_I2C_Init+0x284>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	495c      	ldr	r1, [pc, #368]	; (800386c <HAL_I2C_Init+0x274>)
 80036fc:	428b      	cmp	r3, r1
 80036fe:	d819      	bhi.n	8003734 <HAL_I2C_Init+0x13c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e59      	subs	r1, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fbb1 f3f3 	udiv	r3, r1, r3
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003714:	400b      	ands	r3, r1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_I2C_Init+0x138>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1e59      	subs	r1, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fbb1 f3f3 	udiv	r3, r1, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372e:	e051      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 8003730:	2304      	movs	r3, #4
 8003732:	e04f      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <HAL_I2C_Init+0x168>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e58      	subs	r0, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	440b      	add	r3, r1
 800374a:	fbb0 f3f3 	udiv	r3, r0, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e012      	b.n	8003786 <HAL_I2C_Init+0x18e>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	0099      	lsls	r1, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x196>
 800378a:	2301      	movs	r3, #1
 800378c:	e022      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10e      	bne.n	80037b4 <HAL_I2C_Init+0x1bc>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e58      	subs	r0, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	440b      	add	r3, r1
 80037a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a8:	3301      	adds	r3, #1
 80037aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b2:	e00f      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	0099      	lsls	r1, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	6809      	ldr	r1, [r1, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6911      	ldr	r1, [r2, #16]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	000186a0 	.word	0x000186a0
 8003870:	001e847f 	.word	0x001e847f
 8003874:	003d08ff 	.word	0x003d08ff
 8003878:	431bde83 	.word	0x431bde83
 800387c:	10624dd3 	.word	0x10624dd3

08003880 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	d129      	bne.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2224      	movs	r2, #36	; 0x24
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0210 	bic.w	r2, r2, #16
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d12a      	bne.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2224      	movs	r2, #36	; 0x24
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003932:	89fb      	ldrh	r3, [r7, #14]
 8003934:	f023 030f 	bic.w	r3, r3, #15
 8003938:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b29a      	uxth	r2, r3
 800393e:	89fb      	ldrh	r3, [r7, #14]
 8003940:	4313      	orrs	r3, r2
 8003942:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	89fa      	ldrh	r2, [r7, #14]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x90>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x90>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x90>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x94>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a4:	f7fe f992 	bl	8001ccc <HAL_GetTick>
 80039a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039aa:	e009      	b.n	80039c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ac:	f7fe f98e 	bl	8001ccc <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ba:	d901      	bls.n	80039c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e01f      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d1ee      	bne.n	80039ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d4:	f7fe f97a 	bl	8001ccc <HAL_GetTick>
 80039d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039da:	e009      	b.n	80039f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039dc:	f7fe f976 	bl	8001ccc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ea:	d901      	bls.n	80039f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e007      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039fc:	d1ee      	bne.n	80039dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	420e0040 	.word	0x420e0040
 8003a10:	40007000 	.word	0x40007000
 8003a14:	420e0044 	.word	0x420e0044

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e25b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d075      	beq.n	8003b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a36:	4ba3      	ldr	r3, [pc, #652]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d00c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4ba0      	ldr	r3, [pc, #640]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d112      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b9d      	ldr	r3, [pc, #628]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b99      	ldr	r3, [pc, #612]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d157      	bne.n	8003b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e236      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x74>
 8003a7e:	4b91      	ldr	r3, [pc, #580]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a90      	ldr	r2, [pc, #576]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b8b      	ldr	r3, [pc, #556]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a8a      	ldr	r2, [pc, #552]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b88      	ldr	r3, [pc, #544]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a87      	ldr	r2, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003ab0:	4b84      	ldr	r3, [pc, #528]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a83      	ldr	r2, [pc, #524]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f8fc 	bl	8001ccc <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe f8f8 	bl	8001ccc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1fb      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xc0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fe f8e8 	bl	8001ccc <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe f8e4 	bl	8001ccc <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1e7      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0xe8>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d11c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	4b5c      	ldr	r3, [pc, #368]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1bb      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4952      	ldr	r1, [pc, #328]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	4b4f      	ldr	r3, [pc, #316]	; (8003cc8 <HAL_RCC_OscConfig+0x2b0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fe f89d 	bl	8001ccc <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fe f899 	bl	8001ccc <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e19c      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4940      	ldr	r1, [pc, #256]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_OscConfig+0x2b0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f87c 	bl	8001ccc <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fe f878 	bl	8001ccc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e17b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d030      	beq.n	8003c64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <HAL_RCC_OscConfig+0x2b4>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fe f85c 	bl	8001ccc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fe f858 	bl	8001ccc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e15b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x200>
 8003c36:	e015      	b.n	8003c64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x2b4>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe f845 	bl	8001ccc <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fe f841 	bl	8001ccc <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e144      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a0 	beq.w	8003db2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x2b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d121      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_OscConfig+0x2b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <HAL_RCC_OscConfig+0x2b8>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cba:	f7fe f807 	bl	8001ccc <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2ce>
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470000 	.word	0x42470000
 8003ccc:	42470e80 	.word	0x42470e80
 8003cd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd4:	f7fd fffa 	bl	8001ccc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0fd      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce6:	4b81      	ldr	r3, [pc, #516]	; (8003eec <HAL_RCC_OscConfig+0x4d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2f0>
 8003cfa:	4b7d      	ldr	r3, [pc, #500]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a7c      	ldr	r2, [pc, #496]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	e01c      	b.n	8003d42 <HAL_RCC_OscConfig+0x32a>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCC_OscConfig+0x312>
 8003d10:	4b77      	ldr	r3, [pc, #476]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	4a76      	ldr	r2, [pc, #472]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1c:	4b74      	ldr	r3, [pc, #464]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a73      	ldr	r2, [pc, #460]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	e00b      	b.n	8003d42 <HAL_RCC_OscConfig+0x32a>
 8003d2a:	4b71      	ldr	r3, [pc, #452]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a70      	ldr	r2, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a6d      	ldr	r2, [pc, #436]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d015      	beq.n	8003d76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd ffbf 	bl	8001ccc <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	e00a      	b.n	8003d68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fd ffbb 	bl	8001ccc <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0bc      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ee      	beq.n	8003d52 <HAL_RCC_OscConfig+0x33a>
 8003d74:	e014      	b.n	8003da0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d76:	f7fd ffa9 	bl	8001ccc <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd ffa5 	bl	8001ccc <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0a6      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	4b56      	ldr	r3, [pc, #344]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ee      	bne.n	8003d7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da6:	4b52      	ldr	r3, [pc, #328]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	4a51      	ldr	r2, [pc, #324]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8092 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dbc:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d05c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d141      	bne.n	8003e54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b48      	ldr	r3, [pc, #288]	; (8003ef4 <HAL_RCC_OscConfig+0x4dc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd ff79 	bl	8001ccc <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fd ff75 	bl	8001ccc <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e078      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	019b      	lsls	r3, r3, #6
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	3b01      	subs	r3, #1
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	061b      	lsls	r3, r3, #24
 8003e20:	4933      	ldr	r1, [pc, #204]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e26:	4b33      	ldr	r3, [pc, #204]	; (8003ef4 <HAL_RCC_OscConfig+0x4dc>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fd ff4e 	bl	8001ccc <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fd ff4a 	bl	8001ccc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e04d      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x41c>
 8003e52:	e045      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <HAL_RCC_OscConfig+0x4dc>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd ff37 	bl	8001ccc <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fd ff33 	bl	8001ccc <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e036      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x44a>
 8003e80:	e02e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e029      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8e:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x4d8>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11c      	bne.n	8003edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d115      	bne.n	8003edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d106      	bne.n	8003edc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	42470060 	.word	0x42470060

08003ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0cc      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d90c      	bls.n	8003f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b63      	ldr	r3, [pc, #396]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b8      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a52      	ldr	r2, [pc, #328]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f70:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	494d      	ldr	r1, [pc, #308]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d044      	beq.n	8004018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d119      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e067      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 0203 	bic.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4934      	ldr	r1, [pc, #208]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fe70 	bl	8001ccc <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fd fe6c 	bl	8001ccc <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e04f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 020c 	and.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	429a      	cmp	r2, r3
 8004016:	d1eb      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d20c      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e032      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4916      	ldr	r1, [pc, #88]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800407e:	f000 f821 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8004082:	4602      	mov	r2, r0
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	490a      	ldr	r1, [pc, #40]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	5ccb      	ldrb	r3, [r1, r3]
 8004092:	fa22 f303 	lsr.w	r3, r2, r3
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fdd0 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023c00 	.word	0x40023c00
 80040b4:	40023800 	.word	0x40023800
 80040b8:	080062ac 	.word	0x080062ac
 80040bc:	20000070 	.word	0x20000070
 80040c0:	20000074 	.word	0x20000074

080040c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040dc:	4b67      	ldr	r3, [pc, #412]	; (800427c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d00d      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x40>
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	f200 80bd 	bhi.w	8004268 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x34>
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0x3a>
 80040f6:	e0b7      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4b61      	ldr	r3, [pc, #388]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040fa:	60bb      	str	r3, [r7, #8]
       break;
 80040fc:	e0b7      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fe:	4b60      	ldr	r3, [pc, #384]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004100:	60bb      	str	r3, [r7, #8]
      break;
 8004102:	e0b4      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004104:	4b5d      	ldr	r3, [pc, #372]	; (800427c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d04d      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4b58      	ldr	r3, [pc, #352]	; (800427c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	461a      	mov	r2, r3
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	ea02 0800 	and.w	r8, r2, r0
 8004132:	ea03 0901 	and.w	r9, r3, r1
 8004136:	4640      	mov	r0, r8
 8004138:	4649      	mov	r1, r9
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	014b      	lsls	r3, r1, #5
 8004144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004148:	0142      	lsls	r2, r0, #5
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	ebb0 0008 	subs.w	r0, r0, r8
 8004152:	eb61 0109 	sbc.w	r1, r1, r9
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	018b      	lsls	r3, r1, #6
 8004160:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004164:	0182      	lsls	r2, r0, #6
 8004166:	1a12      	subs	r2, r2, r0
 8004168:	eb63 0301 	sbc.w	r3, r3, r1
 800416c:	f04f 0000 	mov.w	r0, #0
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	00d9      	lsls	r1, r3, #3
 8004176:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800417a:	00d0      	lsls	r0, r2, #3
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	eb12 0208 	adds.w	r2, r2, r8
 8004184:	eb43 0309 	adc.w	r3, r3, r9
 8004188:	f04f 0000 	mov.w	r0, #0
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	0299      	lsls	r1, r3, #10
 8004192:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004196:	0290      	lsls	r0, r2, #10
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	f7fc f820 	bl	80001ec <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e04a      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b31      	ldr	r3, [pc, #196]	; (800427c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	461a      	mov	r2, r3
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041c6:	f04f 0100 	mov.w	r1, #0
 80041ca:	ea02 0400 	and.w	r4, r2, r0
 80041ce:	ea03 0501 	and.w	r5, r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	014b      	lsls	r3, r1, #5
 80041e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041e4:	0142      	lsls	r2, r0, #5
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	1b00      	subs	r0, r0, r4
 80041ec:	eb61 0105 	sbc.w	r1, r1, r5
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	018b      	lsls	r3, r1, #6
 80041fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041fe:	0182      	lsls	r2, r0, #6
 8004200:	1a12      	subs	r2, r2, r0
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	f04f 0000 	mov.w	r0, #0
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	00d9      	lsls	r1, r3, #3
 8004210:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004214:	00d0      	lsls	r0, r2, #3
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	1912      	adds	r2, r2, r4
 800421c:	eb45 0303 	adc.w	r3, r5, r3
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	0299      	lsls	r1, r3, #10
 800422a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800422e:	0290      	lsls	r0, r2, #10
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	461a      	mov	r2, r3
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	f7fb ffd4 	bl	80001ec <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	3301      	adds	r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	60bb      	str	r3, [r7, #8]
      break;
 8004266:	e002      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800426a:	60bb      	str	r3, [r7, #8]
      break;
 800426c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426e:	68bb      	ldr	r3, [r7, #8]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800427a:	bf00      	nop
 800427c:	40023800 	.word	0x40023800
 8004280:	00f42400 	.word	0x00f42400

08004284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_RCC_GetHCLKFreq+0x14>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000070 	.word	0x20000070

0800429c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a0:	f7ff fff0 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	0a9b      	lsrs	r3, r3, #10
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4903      	ldr	r1, [pc, #12]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	080062bc 	.word	0x080062bc

080042c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c8:	f7ff ffdc 	bl	8004284 <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0b5b      	lsrs	r3, r3, #13
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4903      	ldr	r1, [pc, #12]	; (80042e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	080062bc 	.word	0x080062bc

080042ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e056      	b.n	80043ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc ff73 	bl	8001204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004334:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	ea42 0103 	orr.w	r1, r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	f003 0104 	and.w	r1, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800439a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d0:	d112      	bne.n	80043f8 <HAL_SPI_Receive+0x44>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10e      	bne.n	80043f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2204      	movs	r2, #4
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f8e9 	bl	80045c6 <HAL_SPI_TransmitReceive>
 80043f4:	4603      	mov	r3, r0
 80043f6:	e0e2      	b.n	80045be <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_SPI_Receive+0x52>
 8004402:	2302      	movs	r3, #2
 8004404:	e0db      	b.n	80045be <HAL_SPI_Receive+0x20a>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800440e:	f7fd fc5d 	bl	8001ccc <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d002      	beq.n	8004426 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004420:	2302      	movs	r3, #2
 8004422:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004424:	e0c2      	b.n	80045ac <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_Receive+0x7e>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004436:	e0b9      	b.n	80045ac <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2204      	movs	r2, #4
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447e:	d107      	bne.n	8004490 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d007      	beq.n	80044ae <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d162      	bne.n	800457c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044b6:	e02e      	b.n	8004516 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d115      	bne.n	80044f2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f103 020c 	add.w	r2, r3, #12
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	7812      	ldrb	r2, [r2, #0]
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f0:	e011      	b.n	8004516 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f2:	f7fd fbeb 	bl	8001ccc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d803      	bhi.n	800450a <HAL_SPI_Receive+0x156>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004508:	d102      	bne.n	8004510 <HAL_SPI_Receive+0x15c>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004514:	e04a      	b.n	80045ac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1cb      	bne.n	80044b8 <HAL_SPI_Receive+0x104>
 8004520:	e031      	b.n	8004586 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d113      	bne.n	8004558 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	b292      	uxth	r2, r2
 800453c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	1c9a      	adds	r2, r3, #2
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004556:	e011      	b.n	800457c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004558:	f7fd fbb8 	bl	8001ccc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d803      	bhi.n	8004570 <HAL_SPI_Receive+0x1bc>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456e:	d102      	bne.n	8004576 <HAL_SPI_Receive+0x1c2>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	75fb      	strb	r3, [r7, #23]
          goto error;
 800457a:	e017      	b.n	80045ac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1cd      	bne.n	8004522 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fa27 	bl	80049de <SPI_EndRxTransaction>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
 80045a8:	e000      	b.n	80045ac <HAL_SPI_Receive+0x1f8>
  }

error :
 80045aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b08c      	sub	sp, #48	; 0x30
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045d4:	2301      	movs	r3, #1
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x26>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e18a      	b.n	8004902 <HAL_SPI_TransmitReceive+0x33c>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045f4:	f7fd fb6a 	bl	8001ccc <HAL_GetTick>
 80045f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800460e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004612:	2b01      	cmp	r3, #1
 8004614:	d00f      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x70>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461c:	d107      	bne.n	800462e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <HAL_SPI_TransmitReceive+0x68>
 8004626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800462a:	2b04      	cmp	r3, #4
 800462c:	d003      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800462e:	2302      	movs	r3, #2
 8004630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004634:	e15b      	b.n	80048ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x82>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x82>
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800464e:	e14e      	b.n	80048ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b04      	cmp	r3, #4
 800465a:	d003      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2205      	movs	r2, #5
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	887a      	ldrh	r2, [r7, #2]
 800467a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	887a      	ldrh	r2, [r7, #2]
 8004686:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c0:	d178      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_TransmitReceive+0x10a>
 80046ca:	8b7b      	ldrh	r3, [r7, #26]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d166      	bne.n	800479e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f4:	e053      	b.n	800479e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d11b      	bne.n	800473c <HAL_SPI_TransmitReceive+0x176>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <HAL_SPI_TransmitReceive+0x176>
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d113      	bne.n	800473c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d119      	bne.n	800477e <HAL_SPI_TransmitReceive+0x1b8>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d014      	beq.n	800477e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	b292      	uxth	r2, r2
 8004760:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800477a:	2301      	movs	r3, #1
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800477e:	f7fd faa5 	bl	8001ccc <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800478a:	429a      	cmp	r2, r3
 800478c:	d807      	bhi.n	800479e <HAL_SPI_TransmitReceive+0x1d8>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004794:	d003      	beq.n	800479e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800479c:	e0a7      	b.n	80048ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1a6      	bne.n	80046f6 <HAL_SPI_TransmitReceive+0x130>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1a1      	bne.n	80046f6 <HAL_SPI_TransmitReceive+0x130>
 80047b2:	e07c      	b.n	80048ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_TransmitReceive+0x1fc>
 80047bc:	8b7b      	ldrh	r3, [r7, #26]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d16b      	bne.n	800489a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e8:	e057      	b.n	800489a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d11c      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x26c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d017      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x26c>
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d114      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d119      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x2ae>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004870:	2301      	movs	r3, #1
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004874:	f7fd fa2a 	bl	8001ccc <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004880:	429a      	cmp	r2, r3
 8004882:	d803      	bhi.n	800488c <HAL_SPI_TransmitReceive+0x2c6>
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d102      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x2cc>
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004898:	e029      	b.n	80048ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1a2      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x224>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d19d      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f8f8 	bl	8004aa8 <SPI_EndRxTxTransaction>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2220      	movs	r2, #32
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048ca:	e010      	b.n	80048ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	e000      	b.n	80048ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004902:	4618      	mov	r0, r3
 8004904:	3730      	adds	r7, #48	; 0x30
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491a:	e04c      	b.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004922:	d048      	beq.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004924:	f7fd f9d2 	bl	8001ccc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d902      	bls.n	800493a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d13d      	bne.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004952:	d111      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495c:	d004      	beq.n	8004968 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004966:	d107      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004980:	d10f      	bne.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e00f      	b.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4013      	ands	r3, r2
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	bf0c      	ite	eq
 80049c6:	2301      	moveq	r3, #1
 80049c8:	2300      	movne	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1a3      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af02      	add	r7, sp, #8
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f2:	d111      	bne.n	8004a18 <SPI_EndRxTransaction+0x3a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fc:	d004      	beq.n	8004a08 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d107      	bne.n	8004a18 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a20:	d12a      	bne.n	8004a78 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d012      	beq.n	8004a52 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff ff67 	bl	800490a <SPI_WaitFlagStateUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d02d      	beq.n	8004a9e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e026      	b.n	8004aa0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff ff54 	bl	800490a <SPI_WaitFlagStateUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01a      	beq.n	8004a9e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e013      	b.n	8004aa0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2101      	movs	r1, #1
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ff41 	bl	800490a <SPI_WaitFlagStateUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e000      	b.n	8004aa0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <SPI_EndRxTxTransaction+0x7c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <SPI_EndRxTxTransaction+0x80>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0d5b      	lsrs	r3, r3, #21
 8004ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad2:	d112      	bne.n	8004afa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2180      	movs	r1, #128	; 0x80
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff ff13 	bl	800490a <SPI_WaitFlagStateUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e00f      	b.n	8004b1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d0f2      	beq.n	8004afa <SPI_EndRxTxTransaction+0x52>
 8004b14:	e000      	b.n	8004b18 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b16:	bf00      	nop
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000070 	.word	0x20000070
 8004b28:	165e9f81 	.word	0x165e9f81

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e01d      	b.n	8004b7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fe74 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fa9a 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e01d      	b.n	8004bd0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f815 	bl	8004bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 fa6f 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e01d      	b.n	8004c3a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f815 	bl	8004c42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f000 fa3a 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e08a      	b.n	8004d86 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11b      	bne.n	8004cbe <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f000 fc55 	bl	8005544 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 020c 	bic.w	r2, r2, #12
 8004ca8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6999      	ldr	r1, [r3, #24]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	619a      	str	r2, [r3, #24]
 8004cbc:	e05a      	b.n	8004d74 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d11c      	bne.n	8004cfe <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f000 fcd9 	bl	800568a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ce6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	619a      	str	r2, [r3, #24]
 8004cfc:	e03a      	b.n	8004d74 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6819      	ldr	r1, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f000 fd26 	bl	8005764 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 020c 	bic.w	r2, r2, #12
 8004d26:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69d9      	ldr	r1, [r3, #28]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	61da      	str	r2, [r3, #28]
 8004d3a:	e01b      	b.n	8004d74 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f000 fd46 	bl	80057dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69d9      	ldr	r1, [r3, #28]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	021a      	lsls	r2, r3, #8
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e0b4      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	f200 809f 	bhi.w	8004f00 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004dc2:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004f01 	.word	0x08004f01
 8004dd0:	08004f01 	.word	0x08004f01
 8004dd4:	08004f01 	.word	0x08004f01
 8004dd8:	08004e3d 	.word	0x08004e3d
 8004ddc:	08004f01 	.word	0x08004f01
 8004de0:	08004f01 	.word	0x08004f01
 8004de4:	08004f01 	.word	0x08004f01
 8004de8:	08004e7f 	.word	0x08004e7f
 8004dec:	08004f01 	.word	0x08004f01
 8004df0:	08004f01 	.word	0x08004f01
 8004df4:	08004f01 	.word	0x08004f01
 8004df8:	08004ebf 	.word	0x08004ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f9ee 	bl	80051e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0208 	orr.w	r2, r2, #8
 8004e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0204 	bic.w	r2, r2, #4
 8004e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	619a      	str	r2, [r3, #24]
      break;
 8004e3a:	e062      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fa3e 	bl	80052c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6999      	ldr	r1, [r3, #24]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	619a      	str	r2, [r3, #24]
      break;
 8004e7c:	e041      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fa93 	bl	80053b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0208 	orr.w	r2, r2, #8
 8004e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0204 	bic.w	r2, r2, #4
 8004ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69d9      	ldr	r1, [r3, #28]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	61da      	str	r2, [r3, #28]
      break;
 8004ebc:	e021      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fae7 	bl	8005498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69d9      	ldr	r1, [r3, #28]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	61da      	str	r2, [r3, #28]
      break;
 8004efe:	e000      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004f00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_ConfigClockSource+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0b3      	b.n	800509c <HAL_TIM_ConfigClockSource+0x180>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6c:	d03e      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xd0>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	f200 8087 	bhi.w	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	f000 8085 	beq.w	8005088 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d87f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d01a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xa2>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d87b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d050      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x116>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d877      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d03c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xf6>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d873      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d058      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x136>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d86f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d064      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d86b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d060      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d867      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d05a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fbc:	e062      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 fc5d 	bl	800588c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e04e      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f000 fc46 	bl	800588c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e03b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 fb04 	bl	800562c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2150      	movs	r1, #80	; 0x50
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fc13 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005030:	e02b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fb60 	bl	8005704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2160      	movs	r1, #96	; 0x60
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fc03 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005050:	e01b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fae4 	bl	800562c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fbf3 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005070:	e00b      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 fbea 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 8005082:	e002      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <TIM_Base_SetConfig+0x114>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d00f      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3d      	ldr	r2, [pc, #244]	; (80051bc <TIM_Base_SetConfig+0x118>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3c      	ldr	r2, [pc, #240]	; (80051c0 <TIM_Base_SetConfig+0x11c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3b      	ldr	r2, [pc, #236]	; (80051c4 <TIM_Base_SetConfig+0x120>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <TIM_Base_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d108      	bne.n	80050f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <TIM_Base_SetConfig+0x114>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02b      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d027      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2c      	ldr	r2, [pc, #176]	; (80051bc <TIM_Base_SetConfig+0x118>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d023      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <TIM_Base_SetConfig+0x11c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01f      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <TIM_Base_SetConfig+0x120>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <TIM_Base_SetConfig+0x124>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a28      	ldr	r2, [pc, #160]	; (80051cc <TIM_Base_SetConfig+0x128>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <TIM_Base_SetConfig+0x12c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <TIM_Base_SetConfig+0x130>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <TIM_Base_SetConfig+0x134>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a24      	ldr	r2, [pc, #144]	; (80051dc <TIM_Base_SetConfig+0x138>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <TIM_Base_SetConfig+0x13c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <TIM_Base_SetConfig+0x114>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_Base_SetConfig+0xf8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0c      	ldr	r2, [pc, #48]	; (80051c8 <TIM_Base_SetConfig+0x124>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d103      	bne.n	80051a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	615a      	str	r2, [r3, #20]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40010400 	.word	0x40010400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40001800 	.word	0x40001800
 80051dc:	40001c00 	.word	0x40001c00
 80051e0:	40002000 	.word	0x40002000

080051e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 0302 	bic.w	r3, r3, #2
 800522c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a20      	ldr	r2, [pc, #128]	; (80052bc <TIM_OC1_SetConfig+0xd8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC1_SetConfig+0x64>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <TIM_OC1_SetConfig+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0308 	bic.w	r3, r3, #8
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <TIM_OC1_SetConfig+0xd8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC1_SetConfig+0x8e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <TIM_OC1_SetConfig+0xdc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400

080052c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0210 	bic.w	r2, r3, #16
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0320 	bic.w	r3, r3, #32
 800530e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <TIM_OC2_SetConfig+0xe4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC2_SetConfig+0x68>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a21      	ldr	r2, [pc, #132]	; (80053ac <TIM_OC2_SetConfig+0xe8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10d      	bne.n	8005348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <TIM_OC2_SetConfig+0xe4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC2_SetConfig+0x94>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a16      	ldr	r2, [pc, #88]	; (80053ac <TIM_OC2_SetConfig+0xe8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d113      	bne.n	8005380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800535e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a21      	ldr	r2, [pc, #132]	; (8005490 <TIM_OC3_SetConfig+0xe0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC3_SetConfig+0x66>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a20      	ldr	r2, [pc, #128]	; (8005494 <TIM_OC3_SetConfig+0xe4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d10d      	bne.n	8005432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800541c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a16      	ldr	r2, [pc, #88]	; (8005490 <TIM_OC3_SetConfig+0xe0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_OC3_SetConfig+0x92>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a15      	ldr	r2, [pc, #84]	; (8005494 <TIM_OC3_SetConfig+0xe4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40010000 	.word	0x40010000
 8005494:	40010400 	.word	0x40010400

08005498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a12      	ldr	r2, [pc, #72]	; (800553c <TIM_OC4_SetConfig+0xa4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC4_SetConfig+0x68>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a11      	ldr	r2, [pc, #68]	; (8005540 <TIM_OC4_SetConfig+0xa8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d109      	bne.n	8005514 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40010000 	.word	0x40010000
 8005540:	40010400 	.word	0x40010400

08005544 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f023 0201 	bic.w	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a28      	ldr	r2, [pc, #160]	; (8005610 <TIM_TI1_SetConfig+0xcc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01b      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d017      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4a25      	ldr	r2, [pc, #148]	; (8005614 <TIM_TI1_SetConfig+0xd0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a24      	ldr	r2, [pc, #144]	; (8005618 <TIM_TI1_SetConfig+0xd4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00f      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <TIM_TI1_SetConfig+0xd8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00b      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <TIM_TI1_SetConfig+0xdc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a21      	ldr	r2, [pc, #132]	; (8005624 <TIM_TI1_SetConfig+0xe0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_TI1_SetConfig+0x66>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <TIM_TI1_SetConfig+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <TIM_TI1_SetConfig+0x6a>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <TIM_TI1_SetConfig+0x6c>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e003      	b.n	80055ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f023 030a 	bic.w	r3, r3, #10
 80055e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 030a 	and.w	r3, r3, #10
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40010400 	.word	0x40010400
 8005624:	40014000 	.word	0x40014000
 8005628:	40001800 	.word	0x40001800

0800562c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 030a 	bic.w	r3, r3, #10
 8005668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800568a:	b480      	push	{r7}
 800568c:	b087      	sub	sp, #28
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 0210 	bic.w	r2, r3, #16
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	031b      	lsls	r3, r3, #12
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 0210 	bic.w	r2, r3, #16
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800572e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	031b      	lsls	r3, r3, #12
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005740:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	621a      	str	r2, [r3, #32]
}
 8005758:	bf00      	nop
 800575a:	371c      	adds	r7, #28
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0303 	bic.w	r3, r3, #3
 8005790:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005808:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800581a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	031b      	lsls	r3, r3, #12
 8005820:	b29b      	uxth	r3, r3
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800582e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	031b      	lsls	r3, r3, #12
 8005834:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	f043 0307 	orr.w	r3, r3, #7
 8005878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e05a      	b.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005930:	d01d      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a17      	ldr	r2, [pc, #92]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10c      	bne.n	8005988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40001800 	.word	0x40001800

080059c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e03d      	b.n	8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e03f      	b.n	8005afa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fc f812 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	; 0x24
 8005a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f829 	bl	8005b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	b0bd      	sub	sp, #244	; 0xf4
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b20:	68d9      	ldr	r1, [r3, #12]
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	ea40 0301 	orr.w	r3, r0, r1
 8005b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b5c:	f021 010c 	bic.w	r1, r1, #12
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	6999      	ldr	r1, [r3, #24]
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	ea40 0301 	orr.w	r3, r0, r1
 8005b8a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b96:	f040 81a5 	bne.w	8005ee4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4bcd      	ldr	r3, [pc, #820]	; (8005ed8 <UART_SetConfig+0x3d4>)
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d006      	beq.n	8005bb4 <UART_SetConfig+0xb0>
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4bcb      	ldr	r3, [pc, #812]	; (8005edc <UART_SetConfig+0x3d8>)
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	f040 80cb 	bne.w	8005d4a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7fe fb86 	bl	80042c4 <HAL_RCC_GetPCLK2Freq>
 8005bb8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bc0:	461c      	mov	r4, r3
 8005bc2:	f04f 0500 	mov.w	r5, #0
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	462b      	mov	r3, r5
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005bd0:	415b      	adcs	r3, r3
 8005bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bd6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005bda:	1912      	adds	r2, r2, r4
 8005bdc:	eb45 0303 	adc.w	r3, r5, r3
 8005be0:	f04f 0000 	mov.w	r0, #0
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	00d9      	lsls	r1, r3, #3
 8005bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bee:	00d0      	lsls	r0, r2, #3
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	1911      	adds	r1, r2, r4
 8005bf6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005bfa:	416b      	adcs	r3, r5
 8005bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005c12:	415b      	adcs	r3, r3
 8005c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c18:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005c1c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005c20:	f7fa fae4 	bl	80001ec <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4bad      	ldr	r3, [pc, #692]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	011e      	lsls	r6, r3, #4
 8005c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c36:	461c      	mov	r4, r3
 8005c38:	f04f 0500 	mov.w	r5, #0
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	462b      	mov	r3, r5
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	67b9      	str	r1, [r7, #120]	; 0x78
 8005c44:	415b      	adcs	r3, r3
 8005c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c48:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005c4c:	1912      	adds	r2, r2, r4
 8005c4e:	eb45 0303 	adc.w	r3, r5, r3
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	00d9      	lsls	r1, r3, #3
 8005c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c60:	00d0      	lsls	r0, r2, #3
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	1911      	adds	r1, r2, r4
 8005c68:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005c6c:	416b      	adcs	r3, r5
 8005c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	1891      	adds	r1, r2, r2
 8005c80:	6739      	str	r1, [r7, #112]	; 0x70
 8005c82:	415b      	adcs	r3, r3
 8005c84:	677b      	str	r3, [r7, #116]	; 0x74
 8005c86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005c8a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005c8e:	f7fa faad 	bl	80001ec <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4b92      	ldr	r3, [pc, #584]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005c98:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	2164      	movs	r1, #100	; 0x64
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	3332      	adds	r3, #50	; 0x32
 8005caa:	4a8d      	ldr	r2, [pc, #564]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cb8:	441e      	add	r6, r3
 8005cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f04f 0100 	mov.w	r1, #0
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	1894      	adds	r4, r2, r2
 8005cca:	66bc      	str	r4, [r7, #104]	; 0x68
 8005ccc:	415b      	adcs	r3, r3
 8005cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005cd4:	1812      	adds	r2, r2, r0
 8005cd6:	eb41 0303 	adc.w	r3, r1, r3
 8005cda:	f04f 0400 	mov.w	r4, #0
 8005cde:	f04f 0500 	mov.w	r5, #0
 8005ce2:	00dd      	lsls	r5, r3, #3
 8005ce4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ce8:	00d4      	lsls	r4, r2, #3
 8005cea:	4622      	mov	r2, r4
 8005cec:	462b      	mov	r3, r5
 8005cee:	1814      	adds	r4, r2, r0
 8005cf0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005cf4:	414b      	adcs	r3, r1
 8005cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	461a      	mov	r2, r3
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	1891      	adds	r1, r2, r2
 8005d08:	6639      	str	r1, [r7, #96]	; 0x60
 8005d0a:	415b      	adcs	r3, r3
 8005d0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005d0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d16:	f7fa fa69 	bl	80001ec <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005d20:	fba3 1302 	umull	r1, r3, r3, r2
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	2164      	movs	r1, #100	; 0x64
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	3332      	adds	r3, #50	; 0x32
 8005d32:	4a6b      	ldr	r2, [pc, #428]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f003 0207 	and.w	r2, r3, #7
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4432      	add	r2, r6
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	e26d      	b.n	8006226 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d4a:	f7fe faa7 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8005d4e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d56:	461c      	mov	r4, r3
 8005d58:	f04f 0500 	mov.w	r5, #0
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	462b      	mov	r3, r5
 8005d60:	1891      	adds	r1, r2, r2
 8005d62:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d64:	415b      	adcs	r3, r3
 8005d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d6c:	1912      	adds	r2, r2, r4
 8005d6e:	eb45 0303 	adc.w	r3, r5, r3
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	00d9      	lsls	r1, r3, #3
 8005d7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d80:	00d0      	lsls	r0, r2, #3
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	1911      	adds	r1, r2, r4
 8005d88:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005d8c:	416b      	adcs	r3, r5
 8005d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	1891      	adds	r1, r2, r2
 8005da0:	6539      	str	r1, [r7, #80]	; 0x50
 8005da2:	415b      	adcs	r3, r3
 8005da4:	657b      	str	r3, [r7, #84]	; 0x54
 8005da6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005daa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005dae:	f7fa fa1d 	bl	80001ec <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4b4a      	ldr	r3, [pc, #296]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005db8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	011e      	lsls	r6, r3, #4
 8005dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dc4:	461c      	mov	r4, r3
 8005dc6:	f04f 0500 	mov.w	r5, #0
 8005dca:	4622      	mov	r2, r4
 8005dcc:	462b      	mov	r3, r5
 8005dce:	1891      	adds	r1, r2, r2
 8005dd0:	64b9      	str	r1, [r7, #72]	; 0x48
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dda:	1912      	adds	r2, r2, r4
 8005ddc:	eb45 0303 	adc.w	r3, r5, r3
 8005de0:	f04f 0000 	mov.w	r0, #0
 8005de4:	f04f 0100 	mov.w	r1, #0
 8005de8:	00d9      	lsls	r1, r3, #3
 8005dea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dee:	00d0      	lsls	r0, r2, #3
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	1911      	adds	r1, r2, r4
 8005df6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005dfa:	416b      	adcs	r3, r5
 8005dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	6439      	str	r1, [r7, #64]	; 0x40
 8005e10:	415b      	adcs	r3, r3
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
 8005e14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e18:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005e1c:	f7fa f9e6 	bl	80001ec <__aeabi_uldivmod>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005e26:	fba3 1302 	umull	r1, r3, r3, r2
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2164      	movs	r1, #100	; 0x64
 8005e2e:	fb01 f303 	mul.w	r3, r1, r3
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	3332      	adds	r3, #50	; 0x32
 8005e38:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e46:	441e      	add	r6, r3
 8005e48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f04f 0100 	mov.w	r1, #0
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	1894      	adds	r4, r2, r2
 8005e58:	63bc      	str	r4, [r7, #56]	; 0x38
 8005e5a:	415b      	adcs	r3, r3
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e62:	1812      	adds	r2, r2, r0
 8005e64:	eb41 0303 	adc.w	r3, r1, r3
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	f04f 0500 	mov.w	r5, #0
 8005e70:	00dd      	lsls	r5, r3, #3
 8005e72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e76:	00d4      	lsls	r4, r2, #3
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	1814      	adds	r4, r2, r0
 8005e7e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005e82:	414b      	adcs	r3, r1
 8005e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	1891      	adds	r1, r2, r2
 8005e96:	6339      	str	r1, [r7, #48]	; 0x30
 8005e98:	415b      	adcs	r3, r3
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ea0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ea4:	f7fa f9a2 	bl	80001ec <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005eae:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2164      	movs	r1, #100	; 0x64
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	3332      	adds	r3, #50	; 0x32
 8005ec0:	4a07      	ldr	r2, [pc, #28]	; (8005ee0 <UART_SetConfig+0x3dc>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f003 0207 	and.w	r2, r3, #7
 8005ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4432      	add	r2, r6
 8005ed4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ed6:	e1a6      	b.n	8006226 <UART_SetConfig+0x722>
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4bd1      	ldr	r3, [pc, #836]	; (8006230 <UART_SetConfig+0x72c>)
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d006      	beq.n	8005efe <UART_SetConfig+0x3fa>
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4bcf      	ldr	r3, [pc, #828]	; (8006234 <UART_SetConfig+0x730>)
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f040 80ca 	bne.w	8006092 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005efe:	f7fe f9e1 	bl	80042c4 <HAL_RCC_GetPCLK2Freq>
 8005f02:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f0a:	461c      	mov	r4, r3
 8005f0c:	f04f 0500 	mov.w	r5, #0
 8005f10:	4622      	mov	r2, r4
 8005f12:	462b      	mov	r3, r5
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f20:	1912      	adds	r2, r2, r4
 8005f22:	eb45 0303 	adc.w	r3, r5, r3
 8005f26:	f04f 0000 	mov.w	r0, #0
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	00d9      	lsls	r1, r3, #3
 8005f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f34:	00d0      	lsls	r0, r2, #3
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	eb12 0a04 	adds.w	sl, r2, r4
 8005f3e:	eb43 0b05 	adc.w	fp, r3, r5
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f5c:	0082      	lsls	r2, r0, #2
 8005f5e:	4650      	mov	r0, sl
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa f943 	bl	80001ec <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4bb3      	ldr	r3, [pc, #716]	; (8006238 <UART_SetConfig+0x734>)
 8005f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	011e      	lsls	r6, r3, #4
 8005f74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	1894      	adds	r4, r2, r2
 8005f84:	623c      	str	r4, [r7, #32]
 8005f86:	415b      	adcs	r3, r3
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f8e:	1812      	adds	r2, r2, r0
 8005f90:	eb41 0303 	adc.w	r3, r1, r3
 8005f94:	f04f 0400 	mov.w	r4, #0
 8005f98:	f04f 0500 	mov.w	r5, #0
 8005f9c:	00dd      	lsls	r5, r3, #3
 8005f9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fa2:	00d4      	lsls	r4, r2, #3
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	1814      	adds	r4, r2, r0
 8005faa:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005fae:	414b      	adcs	r3, r1
 8005fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	008b      	lsls	r3, r1, #2
 8005fca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fce:	0082      	lsls	r2, r0, #2
 8005fd0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005fd4:	f7fa f90a 	bl	80001ec <__aeabi_uldivmod>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4b96      	ldr	r3, [pc, #600]	; (8006238 <UART_SetConfig+0x734>)
 8005fde:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2164      	movs	r1, #100	; 0x64
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a91      	ldr	r2, [pc, #580]	; (8006238 <UART_SetConfig+0x734>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffc:	441e      	add	r6, r3
 8005ffe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006002:	4618      	mov	r0, r3
 8006004:	f04f 0100 	mov.w	r1, #0
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	1894      	adds	r4, r2, r2
 800600e:	61bc      	str	r4, [r7, #24]
 8006010:	415b      	adcs	r3, r3
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006018:	1812      	adds	r2, r2, r0
 800601a:	eb41 0303 	adc.w	r3, r1, r3
 800601e:	f04f 0400 	mov.w	r4, #0
 8006022:	f04f 0500 	mov.w	r5, #0
 8006026:	00dd      	lsls	r5, r3, #3
 8006028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800602c:	00d4      	lsls	r4, r2, #3
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	1814      	adds	r4, r2, r0
 8006034:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006038:	414b      	adcs	r3, r1
 800603a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	008b      	lsls	r3, r1, #2
 8006054:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006058:	0082      	lsls	r2, r0, #2
 800605a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800605e:	f7fa f8c5 	bl	80001ec <__aeabi_uldivmod>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4b74      	ldr	r3, [pc, #464]	; (8006238 <UART_SetConfig+0x734>)
 8006068:	fba3 1302 	umull	r1, r3, r3, r2
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	2164      	movs	r1, #100	; 0x64
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	3332      	adds	r3, #50	; 0x32
 800607a:	4a6f      	ldr	r2, [pc, #444]	; (8006238 <UART_SetConfig+0x734>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f003 020f 	and.w	r2, r3, #15
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4432      	add	r2, r6
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	e0c9      	b.n	8006226 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006092:	f7fe f903 	bl	800429c <HAL_RCC_GetPCLK1Freq>
 8006096:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800609a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800609e:	461c      	mov	r4, r3
 80060a0:	f04f 0500 	mov.w	r5, #0
 80060a4:	4622      	mov	r2, r4
 80060a6:	462b      	mov	r3, r5
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	415b      	adcs	r3, r3
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060b4:	1912      	adds	r2, r2, r4
 80060b6:	eb45 0303 	adc.w	r3, r5, r3
 80060ba:	f04f 0000 	mov.w	r0, #0
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	00d9      	lsls	r1, r3, #3
 80060c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060c8:	00d0      	lsls	r0, r2, #3
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	eb12 0804 	adds.w	r8, r2, r4
 80060d2:	eb43 0905 	adc.w	r9, r3, r5
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4618      	mov	r0, r3
 80060de:	f04f 0100 	mov.w	r1, #0
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	008b      	lsls	r3, r1, #2
 80060ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060f0:	0082      	lsls	r2, r0, #2
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f879 	bl	80001ec <__aeabi_uldivmod>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4b4e      	ldr	r3, [pc, #312]	; (8006238 <UART_SetConfig+0x734>)
 8006100:	fba3 2302 	umull	r2, r3, r3, r2
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	011e      	lsls	r6, r3, #4
 8006108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800610c:	4618      	mov	r0, r3
 800610e:	f04f 0100 	mov.w	r1, #0
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	1894      	adds	r4, r2, r2
 8006118:	60bc      	str	r4, [r7, #8]
 800611a:	415b      	adcs	r3, r3
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006122:	1812      	adds	r2, r2, r0
 8006124:	eb41 0303 	adc.w	r3, r1, r3
 8006128:	f04f 0400 	mov.w	r4, #0
 800612c:	f04f 0500 	mov.w	r5, #0
 8006130:	00dd      	lsls	r5, r3, #3
 8006132:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006136:	00d4      	lsls	r4, r2, #3
 8006138:	4622      	mov	r2, r4
 800613a:	462b      	mov	r3, r5
 800613c:	1814      	adds	r4, r2, r0
 800613e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006142:	414b      	adcs	r3, r1
 8006144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4618      	mov	r0, r3
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	008b      	lsls	r3, r1, #2
 800615e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006162:	0082      	lsls	r2, r0, #2
 8006164:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006168:	f7fa f840 	bl	80001ec <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4b31      	ldr	r3, [pc, #196]	; (8006238 <UART_SetConfig+0x734>)
 8006172:	fba3 1302 	umull	r1, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	2164      	movs	r1, #100	; 0x64
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	3332      	adds	r3, #50	; 0x32
 8006184:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <UART_SetConfig+0x734>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006190:	441e      	add	r6, r3
 8006192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006196:	4618      	mov	r0, r3
 8006198:	f04f 0100 	mov.w	r1, #0
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	1894      	adds	r4, r2, r2
 80061a2:	603c      	str	r4, [r7, #0]
 80061a4:	415b      	adcs	r3, r3
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ac:	1812      	adds	r2, r2, r0
 80061ae:	eb41 0303 	adc.w	r3, r1, r3
 80061b2:	f04f 0400 	mov.w	r4, #0
 80061b6:	f04f 0500 	mov.w	r5, #0
 80061ba:	00dd      	lsls	r5, r3, #3
 80061bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061c0:	00d4      	lsls	r4, r2, #3
 80061c2:	4622      	mov	r2, r4
 80061c4:	462b      	mov	r3, r5
 80061c6:	1814      	adds	r4, r2, r0
 80061c8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80061cc:	414b      	adcs	r3, r1
 80061ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	f04f 0100 	mov.w	r1, #0
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061ec:	0082      	lsls	r2, r0, #2
 80061ee:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80061f2:	f7f9 fffb 	bl	80001ec <__aeabi_uldivmod>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <UART_SetConfig+0x734>)
 80061fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	2164      	movs	r1, #100	; 0x64
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	3332      	adds	r3, #50	; 0x32
 800620e:	4a0a      	ldr	r2, [pc, #40]	; (8006238 <UART_SetConfig+0x734>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4432      	add	r2, r6
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	e7ff      	b.n	8006226 <UART_SetConfig+0x722>
 8006226:	bf00      	nop
 8006228:	37f4      	adds	r7, #244	; 0xf4
 800622a:	46bd      	mov	sp, r7
 800622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	40011000 	.word	0x40011000
 8006234:	40011400 	.word	0x40011400
 8006238:	51eb851f 	.word	0x51eb851f

0800623c <__libc_init_array>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4d0d      	ldr	r5, [pc, #52]	; (8006274 <__libc_init_array+0x38>)
 8006240:	4c0d      	ldr	r4, [pc, #52]	; (8006278 <__libc_init_array+0x3c>)
 8006242:	1b64      	subs	r4, r4, r5
 8006244:	10a4      	asrs	r4, r4, #2
 8006246:	2600      	movs	r6, #0
 8006248:	42a6      	cmp	r6, r4
 800624a:	d109      	bne.n	8006260 <__libc_init_array+0x24>
 800624c:	4d0b      	ldr	r5, [pc, #44]	; (800627c <__libc_init_array+0x40>)
 800624e:	4c0c      	ldr	r4, [pc, #48]	; (8006280 <__libc_init_array+0x44>)
 8006250:	f000 f820 	bl	8006294 <_init>
 8006254:	1b64      	subs	r4, r4, r5
 8006256:	10a4      	asrs	r4, r4, #2
 8006258:	2600      	movs	r6, #0
 800625a:	42a6      	cmp	r6, r4
 800625c:	d105      	bne.n	800626a <__libc_init_array+0x2e>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	f855 3b04 	ldr.w	r3, [r5], #4
 8006264:	4798      	blx	r3
 8006266:	3601      	adds	r6, #1
 8006268:	e7ee      	b.n	8006248 <__libc_init_array+0xc>
 800626a:	f855 3b04 	ldr.w	r3, [r5], #4
 800626e:	4798      	blx	r3
 8006270:	3601      	adds	r6, #1
 8006272:	e7f2      	b.n	800625a <__libc_init_array+0x1e>
 8006274:	080062d4 	.word	0x080062d4
 8006278:	080062d4 	.word	0x080062d4
 800627c:	080062d4 	.word	0x080062d4
 8006280:	080062d8 	.word	0x080062d8

08006284 <memset>:
 8006284:	4402      	add	r2, r0
 8006286:	4603      	mov	r3, r0
 8006288:	4293      	cmp	r3, r2
 800628a:	d100      	bne.n	800628e <memset+0xa>
 800628c:	4770      	bx	lr
 800628e:	f803 1b01 	strb.w	r1, [r3], #1
 8006292:	e7f9      	b.n	8006288 <memset+0x4>

08006294 <_init>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr

080062a0 <_fini>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	bf00      	nop
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr
