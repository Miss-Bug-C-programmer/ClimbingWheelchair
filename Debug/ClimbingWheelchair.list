
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca14  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800cbc8  0800cbc8  0001cbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce90  0800ce90  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce90  0800ce90  0001ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce98  0800ce98  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce98  0800ce98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce9c  0800ce9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800cea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  200001a0  0800d040  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800d040  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca1f  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea7  00000000  00000000  0003cbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00040a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00041fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e7b  00000000  00000000  00043328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9da  00000000  00000000  0006a1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e216b  00000000  00000000  00084b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  00166d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cbac 	.word	0x0800cbac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	0800cbac 	.word	0x0800cbac

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fec7 	bl	8004ce4 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 feb2 	bl	8004ce4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 fe19 	bl	8004ce4 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	pid->iterm = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <hubMotor_Init+0x2c>)
 80013ec:	f005 f990 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <hubMotor_Init+0x2c>)
 80013f8:	f005 f98a 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4802      	ldr	r0, [pc, #8]	; (800140c <hubMotor_Init+0x2c>)
 8001404:	f005 f984 	bl	8006710 <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40020c00 	.word	0x40020c00

08001410 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
 800141a:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff f84a 	bl	80004b8 <__aeabi_f2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <send_HubMotor+0x1a8>)
 800142a:	f7ff f89d 	bl	8000568 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	a35e      	add	r3, pc, #376	; (adr r3, 80015b0 <send_HubMotor+0x1a0>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f9be 	bl	80007bc <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb3e 	bl	8000ac8 <__aeabi_d2iz>
 800144c:	4603      	mov	r3, r0
 800144e:	b21b      	sxth	r3, r3
 8001450:	b29b      	uxth	r3, r3
 8001452:	425b      	negs	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff f82d 	bl	80004b8 <__aeabi_f2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <send_HubMotor+0x1a8>)
 8001464:	f7ff f880 	bl	8000568 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	a34f      	add	r3, pc, #316	; (adr r3, 80015b0 <send_HubMotor+0x1a0>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f9a1 	bl	80007bc <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb21 	bl	8000ac8 <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 800148a:	23aa      	movs	r3, #170	; 0xaa
 800148c:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 800148e:	23a4      	movs	r3, #164	; 0xa4
 8001490:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 8001492:	230e      	movs	r3, #14
 8001494:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 80014a2:	23c8      	movs	r3, #200	; 0xc8
 80014a4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 80014a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80014b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 80014b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ba:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014c0:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 80014c2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80014c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014dc:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014e2:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f8:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014fe:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001500:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001516:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800151a:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	b29a      	uxth	r2, r3
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001538:	7c3b      	ldrb	r3, [r7, #16]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7c7b      	ldrb	r3, [r7, #17]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7cbb      	ldrb	r3, [r7, #18]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7d3b      	ldrb	r3, [r7, #20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7d7b      	ldrb	r3, [r7, #21]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b29a      	uxth	r2, r3
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001580:	7e7b      	ldrb	r3, [r7, #25]
 8001582:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001584:	4413      	add	r3, r2
 8001586:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 800158e:	f107 010c 	add.w	r1, r7, #12
 8001592:	230a      	movs	r3, #10
 8001594:	220f      	movs	r2, #15
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <send_HubMotor+0x1ac>)
 8001598:	f007 fe07 	bl	80091aa <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 800159c:	220f      	movs	r2, #15
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <send_HubMotor+0x1b0>)
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <send_HubMotor+0x1ac>)
 80015a2:	f007 fe9b 	bl	80092dc <HAL_UART_Receive_DMA>
}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	; 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	54442d18 	.word	0x54442d18
 80015b4:	401921fb 	.word	0x401921fb
 80015b8:	40b00000 	.word	0x40b00000
 80015bc:	20000674 	.word	0x20000674
 80015c0:	200004fc 	.word	0x200004fc

080015c4 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80015c8:	2201      	movs	r2, #1
 80015ca:	2110      	movs	r1, #16
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <ADC_Init+0x7c>)
 80015ce:	f005 f89f 	bl	8006710 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <ADC_Init+0x80>)
 80015d8:	f005 f89a 	bl	8006710 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <ADC_Init+0x80>)
 80015e2:	f005 f895 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f003 fb88 	bl	8004cfc <HAL_Delay>
	AD7606_RST_HIGH;
 80015ec:	2201      	movs	r2, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <ADC_Init+0x80>)
 80015f2:	f005 f88d 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f003 fb80 	bl	8004cfc <HAL_Delay>
	AD7606_RST_LOW;
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <ADC_Init+0x80>)
 8001602:	f005 f885 	bl	8006710 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <ADC_Init+0x80>)
 800160c:	f005 f880 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f003 fb73 	bl	8004cfc <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2102      	movs	r1, #2
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <ADC_Init+0x80>)
 800161c:	f005 f878 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2104      	movs	r1, #4
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <ADC_Init+0x80>)
 8001626:	f005 f873 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <ADC_Init+0x80>)
 8001630:	f005 f86e 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f003 fb61 	bl	8004cfc <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40020000 	.word	0x40020000
 8001644:	40020800 	.word	0x40020800

08001648 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <ADC_DataRequest+0x1c>)
 8001652:	f005 f85d 	bl	8006710 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001656:	2201      	movs	r2, #1
 8001658:	2120      	movs	r1, #32
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <ADC_DataRequest+0x1c>)
 800165c:	f005 f858 	bl	8006710 <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020800 	.word	0x40020800

08001668 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <ADC_Read+0x30>)
 8001676:	f005 f84b 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 800167a:	2302      	movs	r3, #2
 800167c:	2208      	movs	r2, #8
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <ADC_Read+0x34>)
 8001682:	f005 ff55 	bl	8007530 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001686:	2201      	movs	r2, #1
 8001688:	2110      	movs	r1, #16
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <ADC_Read+0x30>)
 800168c:	f005 f840 	bl	8006710 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40020000 	.word	0x40020000
 800169c:	20000260 	.word	0x20000260

080016a0 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f808 	bl	80016c0 <enableMotor>
	brakeMotor(motor, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f828 	bl	8001708 <brakeMotor>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4619      	mov	r1, r3
 80016d8:	f005 f81a 	bl	8006710 <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2108      	movs	r1, #8
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <emBrakeMotor+0x20>)
 80016f6:	f005 f80b 	bl	8006710 <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020c00 	.word	0x40020c00

08001708 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69d8      	ldr	r0, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8c1b      	ldrh	r3, [r3, #32]
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	4619      	mov	r1, r3
 8001720:	f004 fff6 	bl	8006710 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8b1b      	ldrh	r3, [r3, #24]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f006 fb7c 	bl	8007e2c <HAL_TIM_PWM_Stop>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	4619      	mov	r1, r3
 8001754:	f004 ffdc 	bl	8006710 <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80018a8 <setMotorSpeed+0x148>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dd01      	ble.n	8001788 <setMotorSpeed+0x28>
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <setMotorSpeed+0x14c>)
 8001786:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f7fe fe95 	bl	80004b8 <__aeabi_f2d>
 800178e:	a340      	add	r3, pc, #256	; (adr r3, 8001890 <setMotorSpeed+0x130>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fd30 	bl	80001f8 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a33d      	add	r3, pc, #244	; (adr r3, 8001898 <setMotorSpeed+0x138>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f809 	bl	80007bc <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9b1 	bl	8000b18 <__aeabi_d2uiz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7fe fe76 	bl	80004b8 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	a133      	add	r1, pc, #204	; (adr r1, 80018a0 <setMotorSpeed+0x140>)
 80017d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d6:	f7fe fff1 	bl	80007bc <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f971 	bl	8000ac8 <__aeabi_d2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017ee:	8a7b      	ldrh	r3, [r7, #18]
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017f6:	edd7 7a00 	vldr	s15, [r7]
 80017fa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d503      	bpl.n	8001810 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001808:	2101      	movs	r1, #1
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff7c 	bl	8001708 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	8a7a      	ldrh	r2, [r7, #18]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b1b      	ldrh	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	e01c      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	8b1b      	ldrh	r3, [r3, #24]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d105      	bne.n	8001842 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
 8001840:	e012      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8b1b      	ldrh	r3, [r3, #24]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d105      	bne.n	8001856 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	e008      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8b1b      	ldrh	r3, [r3, #24]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d104      	bne.n	8001868 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8b1b      	ldrh	r3, [r3, #24]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f006 fa9c 	bl	8007db0 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	bfb15b57 	.word	0xbfb15b57
 8001894:	3fd09eec 	.word	0x3fd09eec
 8001898:	1172ef0b 	.word	0x1172ef0b
 800189c:	3f9989df 	.word	0x3f9989df
 80018a0:	00000000 	.word	0x00000000
 80018a4:	412e8480 	.word	0x412e8480
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	42c80000 	.word	0x42c80000

080018b0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d129      	bne.n	800191a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80018c6:	edd7 7a00 	vldr	s15, [r7]
 80018ca:	eef0 7ae7 	vabs.f32	s15, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fdf1 	bl	80004b8 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f7fe fdec 	bl	80004b8 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe ff68 	bl	80007bc <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f7ff f8ba 	bl	8000a74 <__aeabi_dcmpge>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff17 	bl	800173c <setMotorDir>
 800190e:	e032      	b.n	8001976 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001910:	2101      	movs	r1, #1
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff12 	bl	800173c <setMotorDir>
 8001918:	e02d      	b.n	8001976 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001920:	2b02      	cmp	r3, #2
 8001922:	d128      	bne.n	8001976 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001924:	edd7 7a00 	vldr	s15, [r7]
 8001928:	eef0 7ae7 	vabs.f32	s15, s15
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fdc2 	bl	80004b8 <__aeabi_f2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f7fe fdbd 	bl	80004b8 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe ff39 	bl	80007bc <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f7ff f88b 	bl	8000a74 <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001964:	2101      	movs	r1, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fee8 	bl	800173c <setMotorDir>
 800196c:	e003      	b.n	8001976 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fee3 	bl	800173c <setMotorDir>
    }

    HAL_Delay(50);
 8001976:	2032      	movs	r0, #50	; 0x32
 8001978:	f003 f9c0 	bl	8004cfc <HAL_Delay>
    brakeMotor(motor, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fec2 	bl	8001708 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001984:	edd7 7a00 	vldr	s15, [r7]
 8001988:	eef0 7ae7 	vabs.f32	s15, s15
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fee5 	bl	8001760 <setMotorSpeed>

}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}

0800199e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f004 fe94 	bl	80066e0 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	799a      	ldrb	r2, [r3, #6]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	79db      	ldrb	r3, [r3, #7]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d004      	beq.n	80019d6 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80019cc:	f003 f98a 	bl	8004ce4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80019d6:	f003 f985 	bl	8004ce4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d209      	bcs.n	80019fc <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	799a      	ldrb	r2, [r3, #6]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e004      	b.n	8001a06 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	799a      	ldrb	r2, [r3, #6]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <MX_CAN1_Init+0xcc>)
 8001a1a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a1e:	2209      	movs	r2, #9
 8001a20:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a34:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a3c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a62:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a64:	f003 f96e 	bl	8004d44 <HAL_CAN_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a6e:	f001 fe89 	bl	8003784 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001aa0:	f003 fa4c 	bl	8004f3c <HAL_CAN_ConfigFilter>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_CAN1_Init+0x9e>
				Error_Handler();
 8001aaa:	f001 fe6b 	bl	8003784 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001ab2:	f003 fd54 	bl	800555e <HAL_CAN_ActivateNotification>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001abc:	f001 fe62 	bl	8003784 <Error_Handler>
 8001ac0:	e007      	b.n	8001ad2 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001ac4:	f003 fb1a 	bl	80050fc <HAL_CAN_Start>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001ace:	f001 fe59 	bl	8003784 <Error_Handler>


	    /* USER CODE END CAN1_Init 2 */


}
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200002b8 	.word	0x200002b8
 8001adc:	40006400 	.word	0x40006400

08001ae0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_CAN_MspInit+0x94>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d133      	bne.n	8001b6a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_CAN_MspInit+0x9c>)
 8001b56:	f004 fc17 	bl	8006388 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2014      	movs	r0, #20
 8001b60:	f004 f82d 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b64:	2014      	movs	r0, #20
 8001b66:	f004 f846 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40006400 	.word	0x40006400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020c00 	.word	0x40020c00

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	200c      	movs	r0, #12
 8001ba8:	f004 f809 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bac:	200c      	movs	r0, #12
 8001bae:	f004 f822 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200e      	movs	r0, #14
 8001bb8:	f004 f801 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bbc:	200e      	movs	r0, #14
 8001bbe:	f004 f81a 	bl	8005bf6 <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <ENCODER_Init+0x24>)
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <ENCODER_Init+0x28>)
 8001bd8:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <ENCODER_Init+0x2c>)
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <ENCODER_Init+0x28>)
 8001bde:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001be0:	2101      	movs	r1, #1
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <ENCODER_Init+0x24>)
 8001be4:	f000 f83f 	bl	8001c66 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001be8:	2102      	movs	r1, #2
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <ENCODER_Init+0x2c>)
 8001bec:	f000 f83b 	bl	8001c66 <ENCODER_Set_TxHeader>

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000360 	.word	0x20000360
 8001bf8:	200002b8 	.word	0x200002b8
 8001bfc:	20000308 	.word	0x20000308

08001c00 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	785a      	ldrb	r2, [r3, #1]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	789a      	ldrb	r2, [r3, #2]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	78da      	ldrb	r2, [r3, #3]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791a      	ldrb	r2, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	795a      	ldrb	r2, [r3, #5]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	799a      	ldrb	r2, [r3, #6]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	79da      	ldrb	r2, [r3, #7]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0120 	add.w	r1, r3, #32
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3338      	adds	r3, #56	; 0x38
 8001ce6:	f003 fa4d 	bl	8005184 <HAL_CAN_AddTxMessage>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffd1 	bl	8001ca2 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a89      	ldr	r2, [pc, #548]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a7b      	ldr	r2, [pc, #492]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	213f      	movs	r1, #63	; 0x3f
 8001e1e:	4861      	ldr	r0, [pc, #388]	; (8001fa4 <MX_GPIO_Init+0x248>)
 8001e20:	f004 fc76 	bl	8006710 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2110      	movs	r1, #16
 8001e28:	485f      	ldr	r0, [pc, #380]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001e2a:	f004 fc71 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e2e:	2200      	movs	r2, #0
 8001e30:	219b      	movs	r1, #155	; 0x9b
 8001e32:	485e      	ldr	r0, [pc, #376]	; (8001fac <MX_GPIO_Init+0x250>)
 8001e34:	f004 fc6c 	bl	8006710 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001e3e:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e40:	f004 fc66 	bl	8006710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e44:	2200      	movs	r2, #0
 8001e46:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001e4a:	485a      	ldr	r0, [pc, #360]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001e4c:	f004 fc60 	bl	8006710 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001e50:	2307      	movs	r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4853      	ldr	r0, [pc, #332]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e64:	f004 fa90 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e68:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e6c:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	484c      	ldr	r0, [pc, #304]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e7e:	f004 fa83 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e82:	233f      	movs	r3, #63	; 0x3f
 8001e84:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <MX_GPIO_Init+0x248>)
 8001e9a:	f004 fa75 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001eb6:	f004 fa67 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_GPIO_Init+0x25c>)
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4836      	ldr	r0, [pc, #216]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001ece:	f004 fa5b 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001ed2:	239b      	movs	r3, #155	; 0x9b
 8001ed4:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4830      	ldr	r0, [pc, #192]	; (8001fac <MX_GPIO_Init+0x250>)
 8001eea:	f004 fa4d 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001eee:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001f08:	f004 fa3e 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 8001f0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f1e:	2305      	movs	r3, #5
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <MX_GPIO_Init+0x250>)
 8001f2a:	f004 fa2d 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001f2e:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001f32:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001f48:	f004 fa1e 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001f62:	f004 fa11 	bl	8006388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f66:	2320      	movs	r3, #32
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f76:	2309      	movs	r3, #9
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <MX_GPIO_Init+0x250>)
 8001f82:	f004 fa01 	bl	8006388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2017      	movs	r0, #23
 8001f8c:	f003 fe17 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f90:	2017      	movs	r0, #23
 8001f92:	f003 fe30 	bl	8005bf6 <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3730      	adds	r7, #48	; 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	10210000 	.word	0x10210000

08001fbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <MX_I2C1_Init+0x78>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <MX_I2C1_Init+0x7c>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ffa:	f004 fbbb 	bl	8006774 <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f001 fbbe 	bl	8003784 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002008:	2100      	movs	r1, #0
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_I2C1_Init+0x74>)
 800200c:	f004 fcf6 	bl	80069fc <HAL_I2CEx_ConfigAnalogFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002016:	f001 fbb5 	bl	8003784 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800201a:	2100      	movs	r1, #0
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2C1_Init+0x74>)
 800201e:	f004 fd29 	bl	8006a74 <HAL_I2CEx_ConfigDigitalFilter>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002028:	f001 fbac 	bl	8003784 <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200003b8 	.word	0x200003b8
 8002034:	40005400 	.word	0x40005400
 8002038:	00061a80 	.word	0x00061a80

0800203c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_I2C_MspInit+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800207a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208c:	2304      	movs	r3, #4
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	480c      	ldr	r0, [pc, #48]	; (80020c8 <HAL_I2C_MspInit+0x8c>)
 8002098:	f004 f976 	bl	8006388 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400
 80020cc:	00000000 	.word	0x00000000

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d6:	f002 fd9f 	bl	8004c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020da:	f000 fda7 	bl	8002c2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80020de:	f005 f98f 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4ab6      	ldr	r2, [pc, #728]	; (80023c0 <main+0x2f0>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	4618      	mov	r0, r3
 80020ee:	f003 fd90 	bl	8005c12 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020f2:	2004      	movs	r0, #4
 80020f4:	f003 fd9a 	bl	8005c2c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002100:	f003 fd5d 	bl	8005bbe <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002104:	f7ff fe2a 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002108:	f7ff fd3a 	bl	8001b80 <MX_DMA_Init>
  MX_I2C1_Init();
 800210c:	f7ff ff56 	bl	8001fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 8002110:	f001 fc94 	bl	8003a3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002114:	f001 fd32 	bl	8003b7c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002118:	f001 ffcc 	bl	80040b4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800211c:	f001 fda2 	bl	8003c64 <MX_TIM3_Init>
  MX_TIM8_Init();
 8002120:	f001 fe22 	bl	8003d68 <MX_TIM8_Init>
  MX_CAN1_Init();
 8002124:	f7ff fc74 	bl	8001a10 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002128:	f001 fb44 	bl	80037b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 800212c:	f002 f8a2 	bl	8004274 <joystick_Init>
	ADC_Init();
 8002130:	f7ff fa48 	bl	80015c4 <ADC_Init>
	ADC_DataRequest();
 8002134:	f7ff fa88 	bl	8001648 <ADC_DataRequest>
	ENCODER_Init();
 8002138:	f7ff fd4a 	bl	8001bd0 <ENCODER_Init>
//		if (HAL_GetTick() - state_count > 5000)
//			Error_Handler();
//	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 800213c:	4ba1      	ldr	r3, [pc, #644]	; (80023c4 <main+0x2f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4aa1      	ldr	r2, [pc, #644]	; (80023c8 <main+0x2f8>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <main+0x2f4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a9f      	ldr	r2, [pc, #636]	; (80023cc <main+0x2fc>)
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	eef0 0a47 	vmov.f32	s1, s14
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	489b      	ldr	r0, [pc, #620]	; (80023d0 <main+0x300>)
 8002162:	f002 fa97 	bl	8004694 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8002166:	489b      	ldr	r0, [pc, #620]	; (80023d4 <main+0x304>)
 8002168:	f005 fdc9 	bl	8007cfe <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 800216c:	2100      	movs	r1, #0
 800216e:	4899      	ldr	r0, [pc, #612]	; (80023d4 <main+0x304>)
 8002170:	f005 fe1e 	bl	8007db0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002174:	2104      	movs	r1, #4
 8002176:	4897      	ldr	r0, [pc, #604]	; (80023d4 <main+0x304>)
 8002178:	f005 fe1a 	bl	8007db0 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 800217c:	4b95      	ldr	r3, [pc, #596]	; (80023d4 <main+0x304>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002186:	4b93      	ldr	r3, [pc, #588]	; (80023d4 <main+0x304>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800218e:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002190:	4891      	ldr	r0, [pc, #580]	; (80023d8 <main+0x308>)
 8002192:	f7ff fa85 	bl	80016a0 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002196:	4891      	ldr	r0, [pc, #580]	; (80023dc <main+0x30c>)
 8002198:	f7ff fa82 	bl	80016a0 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800219c:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80023e0 <main+0x310>
 80021a0:	488d      	ldr	r0, [pc, #564]	; (80023d8 <main+0x308>)
 80021a2:	f7ff fb85 	bl	80018b0 <runMotor>
	runMotor(&backMotor, 0);
 80021a6:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80023e0 <main+0x310>
 80021aa:	488c      	ldr	r0, [pc, #560]	; (80023dc <main+0x30c>)
 80021ac:	f7ff fb80 	bl	80018b0 <runMotor>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 80021b0:	210c      	movs	r1, #12
 80021b2:	488c      	ldr	r0, [pc, #560]	; (80023e4 <main+0x314>)
 80021b4:	f005 fec8 	bl	8007f48 <HAL_TIM_IC_Start_IT>
	emBrakeMotor(0);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fa93 	bl	80016e4 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 80021be:	f7ff f90f 	bl	80013e0 <hubMotor_Init>
	send_HubMotor(0, 0);
 80021c2:	eddf 0a87 	vldr	s1, [pc, #540]	; 80023e0 <main+0x310>
 80021c6:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80023e0 <main+0x310>
 80021ca:	f7ff f921 	bl	8001410 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80021ce:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <main+0x318>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	4b85      	ldr	r3, [pc, #532]	; (80023ec <main+0x31c>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	4b85      	ldr	r3, [pc, #532]	; (80023f0 <main+0x320>)
 80021dc:	edd3 6a00 	vldr	s13, [r3]
 80021e0:	eeb0 1a66 	vmov.f32	s2, s13
 80021e4:	eef0 0a47 	vmov.f32	s1, s14
 80021e8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ec:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <main+0x324>)
 80021ee:	4a82      	ldr	r2, [pc, #520]	; (80023f8 <main+0x328>)
 80021f0:	4982      	ldr	r1, [pc, #520]	; (80023fc <main+0x32c>)
 80021f2:	4883      	ldr	r0, [pc, #524]	; (8002400 <main+0x330>)
 80021f4:	f7fe fe7c 	bl	8000ef0 <pid_create>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a82      	ldr	r2, [pc, #520]	; (8002404 <main+0x334>)
 80021fc:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -80, 80);
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <main+0x334>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	eddf 0a81 	vldr	s1, [pc, #516]	; 8002408 <main+0x338>
 8002206:	ed9f 0a81 	vldr	s0, [pc, #516]	; 800240c <main+0x33c>
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fffc 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 8002210:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <main+0x334>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ffc2 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 800221c:	4b79      	ldr	r3, [pc, #484]	; (8002404 <main+0x334>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f856 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002226:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <main+0x340>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <main+0x344>)
 800222e:	ed93 7a00 	vldr	s14, [r3]
 8002232:	4b79      	ldr	r3, [pc, #484]	; (8002418 <main+0x348>)
 8002234:	edd3 6a00 	vldr	s13, [r3]
 8002238:	eeb0 1a66 	vmov.f32	s2, s13
 800223c:	eef0 0a47 	vmov.f32	s1, s14
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	4b75      	ldr	r3, [pc, #468]	; (800241c <main+0x34c>)
 8002246:	4a76      	ldr	r2, [pc, #472]	; (8002420 <main+0x350>)
 8002248:	4976      	ldr	r1, [pc, #472]	; (8002424 <main+0x354>)
 800224a:	4877      	ldr	r0, [pc, #476]	; (8002428 <main+0x358>)
 800224c:	f7fe fe50 	bl	8000ef0 <pid_create>
 8002250:	4603      	mov	r3, r0
 8002252:	4a76      	ldr	r2, [pc, #472]	; (800242c <main+0x35c>)
 8002254:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -80, 80);
 8002256:	4b75      	ldr	r3, [pc, #468]	; (800242c <main+0x35c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8002408 <main+0x338>
 800225e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800240c <main+0x33c>
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ffd0 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002268:	4b70      	ldr	r3, [pc, #448]	; (800242c <main+0x35c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe ff96 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 8002274:	4b6d      	ldr	r3, [pc, #436]	; (800242c <main+0x35c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f82a 	bl	80012d2 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800227e:	f002 fd31 	bl	8004ce4 <HAL_GetTick>
 8002282:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8002284:	486a      	ldr	r0, [pc, #424]	; (8002430 <main+0x360>)
 8002286:	f7ff fd34 	bl	8001cf2 <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800228a:	486a      	ldr	r0, [pc, #424]	; (8002434 <main+0x364>)
 800228c:	f7ff fd31 	bl	8001cf2 <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <main+0x368>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff fa24 	bl	80016e4 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800229c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a0:	f002 fd2c 	bl	8004cfc <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 80022a4:	f002 fd1e 	bl	8004ce4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d0f9      	beq.n	80022a4 <main+0x1d4>
		{
			ADC_DataRequest();
 80022b0:	f7ff f9ca 	bl	8001648 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 80022b4:	485e      	ldr	r0, [pc, #376]	; (8002430 <main+0x360>)
 80022b6:	f7ff fcf4 	bl	8001ca2 <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 80022ba:	485e      	ldr	r0, [pc, #376]	; (8002434 <main+0x364>)
 80022bc:	f7ff fcf1 	bl	8001ca2 <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 80022c0:	211e      	movs	r1, #30
 80022c2:	485e      	ldr	r0, [pc, #376]	; (800243c <main+0x36c>)
 80022c4:	f7ff fb6b 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80022c8:	211e      	movs	r1, #30
 80022ca:	485d      	ldr	r0, [pc, #372]	; (8002440 <main+0x370>)
 80022cc:	f7ff fb67 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80022d0:	211e      	movs	r1, #30
 80022d2:	485c      	ldr	r0, [pc, #368]	; (8002444 <main+0x374>)
 80022d4:	f7ff fb63 	bl	800199e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022d8:	2105      	movs	r1, #5
 80022da:	485b      	ldr	r0, [pc, #364]	; (8002448 <main+0x378>)
 80022dc:	f7ff fb5f 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022e0:	2105      	movs	r1, #5
 80022e2:	485a      	ldr	r0, [pc, #360]	; (800244c <main+0x37c>)
 80022e4:	f7ff fb5b 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022e8:	2105      	movs	r1, #5
 80022ea:	4859      	ldr	r0, [pc, #356]	; (8002450 <main+0x380>)
 80022ec:	f7ff fb57 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022f0:	2105      	movs	r1, #5
 80022f2:	4858      	ldr	r0, [pc, #352]	; (8002454 <main+0x384>)
 80022f4:	f7ff fb53 	bl	800199e <GPIO_Digital_Filtered_Input>
			 *	1. Climbing wheel extension.
			 *	2. Wheelchair lifting/dropping
			 *	3. Climbing wheel retraction
			 *-------------------------------------------------------------------*/
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if ((button3.state == 1 || button_prev_state == 1)
 80022f8:	4b52      	ldr	r3, [pc, #328]	; (8002444 <main+0x374>)
 80022fa:	7a1b      	ldrb	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d003      	beq.n	8002308 <main+0x238>
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <main+0x388>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d038      	beq.n	800237a <main+0x2aa>
					&& climb_first_iteration == true)
 8002308:	4b54      	ldr	r3, [pc, #336]	; (800245c <main+0x38c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d034      	beq.n	800237a <main+0x2aa>
			{
				button_prev_state = 1;
 8002310:	4b51      	ldr	r3, [pc, #324]	; (8002458 <main+0x388>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
				if (abs(encoderFront.signed_encoder_pos) >= 50
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <main+0x364>)
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	bfb8      	it	lt
 800231e:	425b      	neglt	r3, r3
 8002320:	2b31      	cmp	r3, #49	; 0x31
 8002322:	dc06      	bgt.n	8002332 <main+0x262>
						|| abs(encoderBack.signed_encoder_pos) >= 50)
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <main+0x360>)
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	bfb8      	it	lt
 800232c:	425b      	neglt	r3, r3
 800232e:	2b31      	cmp	r3, #49	; 0x31
 8002330:	dd0f      	ble.n	8002352 <main+0x282>
				{
					goto_pos(0, frontClimb_pid);
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <main+0x334>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	2000      	movs	r0, #0
 800233a:	f000 ffe9 	bl	8003310 <goto_pos>
					goto_pos(0, backClimb_pid);
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <main+0x35c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	2000      	movs	r0, #0
 8002346:	f000 ffe3 	bl	8003310 <goto_pos>
					lifting_mode = EMPTY;
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <main+0x390>)
 800234c:	2205      	movs	r2, #5
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e013      	b.n	800237a <main+0x2aa>
				}
				else
				{
					runMotor(&rearMotor, 0);
 8002352:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80023e0 <main+0x310>
 8002356:	4820      	ldr	r0, [pc, #128]	; (80023d8 <main+0x308>)
 8002358:	f7ff faaa 	bl	80018b0 <runMotor>
					runMotor(&backMotor, 0);
 800235c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80023e0 <main+0x310>
 8002360:	481e      	ldr	r0, [pc, #120]	; (80023dc <main+0x30c>)
 8002362:	f7ff faa5 	bl	80018b0 <runMotor>
					lifting_mode = LANDING;
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <main+0x390>)
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
					button_prev_state = 0;
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <main+0x388>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002376:	f002 fcc1 	bl	8004cfc <HAL_Delay>

				}
			}

			if (front_touchdown == false && back_touchdown == false
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <main+0x394>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 811b 	beq.w	80025c0 <main+0x4f0>
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <main+0x398>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8113 	beq.w	80025c0 <main+0x4f0>
					&& lifting_mode == LANDING)
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <main+0x390>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	f040 810e 	bne.w	80025c0 <main+0x4f0>
			{
				//Stop the base wheel completely
				baseWheelSpeed.cur_r = 0;
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <main+0x300>)
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
				baseWheelSpeed.cur_l = 0;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <main+0x300>)
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
				baseMotorCommand();
 80023b4:	f000 fe9c 	bl	80030f0 <baseMotorCommand>

				//Disengage the motor brake
				emBrakeMotor(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff f993 	bl	80016e4 <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 80023be:	e0c6      	b.n	800254e <main+0x47e>
 80023c0:	10624dd3 	.word	0x10624dd3
 80023c4:	200001c0 	.word	0x200001c0
 80023c8:	0800cbc8 	.word	0x0800cbc8
 80023cc:	0800cbd4 	.word	0x0800cbd4
 80023d0:	200000d8 	.word	0x200000d8
 80023d4:	20000554 	.word	0x20000554
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000034 	.word	0x20000034
 80023e0:	00000000 	.word	0x00000000
 80023e4:	20000514 	.word	0x20000514
 80023e8:	2000010c 	.word	0x2000010c
 80023ec:	20000110 	.word	0x20000110
 80023f0:	20000114 	.word	0x20000114
 80023f4:	200001d8 	.word	0x200001d8
 80023f8:	200001d4 	.word	0x200001d4
 80023fc:	200001d0 	.word	0x200001d0
 8002400:	200004c8 	.word	0x200004c8
 8002404:	200004c4 	.word	0x200004c4
 8002408:	42a00000 	.word	0x42a00000
 800240c:	c2a00000 	.word	0xc2a00000
 8002410:	20000118 	.word	0x20000118
 8002414:	2000011c 	.word	0x2000011c
 8002418:	20000120 	.word	0x20000120
 800241c:	200001e4 	.word	0x200001e4
 8002420:	200001e0 	.word	0x200001e0
 8002424:	200001dc 	.word	0x200001dc
 8002428:	20000480 	.word	0x20000480
 800242c:	20000510 	.word	0x20000510
 8002430:	20000360 	.word	0x20000360
 8002434:	20000308 	.word	0x20000308
 8002438:	20000200 	.word	0x20000200
 800243c:	200000a8 	.word	0x200000a8
 8002440:	200000b8 	.word	0x200000b8
 8002444:	200000c8 	.word	0x200000c8
 8002448:	20000068 	.word	0x20000068
 800244c:	20000078 	.word	0x20000078
 8002450:	20000088 	.word	0x20000088
 8002454:	20000098 	.word	0x20000098
 8002458:	200001c6 	.word	0x200001c6
 800245c:	20000109 	.word	0x20000109
 8002460:	20000108 	.word	0x20000108
 8002464:	200001c4 	.word	0x200001c4
 8002468:	200001c5 	.word	0x200001c5
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 800246c:	2105      	movs	r1, #5
 800246e:	4848      	ldr	r0, [pc, #288]	; (8002590 <main+0x4c0>)
 8002470:	f7ff fa95 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <main+0x3b8>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 800247a:	2105      	movs	r1, #5
 800247c:	4845      	ldr	r0, [pc, #276]	; (8002594 <main+0x4c4>)
 800247e:	f7ff fa8e 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <main+0x3be>
						front_touchdown = 1;
 8002488:	4b43      	ldr	r3, [pc, #268]	; (8002598 <main+0x4c8>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 800248e:	2105      	movs	r1, #5
 8002490:	4842      	ldr	r0, [pc, #264]	; (800259c <main+0x4cc>)
 8002492:	f7ff fa84 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <main+0x3da>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 800249c:	2105      	movs	r1, #5
 800249e:	4840      	ldr	r0, [pc, #256]	; (80025a0 <main+0x4d0>)
 80024a0:	f7ff fa7d 	bl	800199e <GPIO_Digital_Filtered_Input>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <main+0x3e0>
						back_touchdown = 1;
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <main+0x4d4>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <main+0x4d4>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f083 0301 	eor.w	r3, r3, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <main+0x406>
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <main+0x4c8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <main+0x406>
							&& lifting_mode == LANDING)
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <main+0x4d8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d103      	bne.n	80024d6 <main+0x406>
						lifting_mode = CLIMB_UP;
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <main+0x4d8>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e011      	b.n	80024fa <main+0x42a>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <main+0x4d4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <main+0x42a>
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <main+0x4c8>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <main+0x42a>
							&& lifting_mode == LANDING)
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <main+0x4d8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d102      	bne.n	80024fa <main+0x42a>
						lifting_mode = CLIMB_DOWN;
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <main+0x4d8>)
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]

					ENCODER_Read(&encoderBack);
 80024fa:	482c      	ldr	r0, [pc, #176]	; (80025ac <main+0x4dc>)
 80024fc:	f7ff fbd1 	bl	8001ca2 <ENCODER_Read>
					ENCODER_Read(&encoderFront);
 8002500:	482b      	ldr	r0, [pc, #172]	; (80025b0 <main+0x4e0>)
 8002502:	f7ff fbce 	bl	8001ca2 <ENCODER_Read>

					if (back_touchdown == false)
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <main+0x4d4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <main+0x450>
						runMotor(&backMotor, 30);
 8002514:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002518:	4826      	ldr	r0, [pc, #152]	; (80025b4 <main+0x4e4>)
 800251a:	f7ff f9c9 	bl	80018b0 <runMotor>
 800251e:	e004      	b.n	800252a <main+0x45a>
					else
						runMotor(&backMotor, 0);
 8002520:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80025b8 <main+0x4e8>
 8002524:	4823      	ldr	r0, [pc, #140]	; (80025b4 <main+0x4e4>)
 8002526:	f7ff f9c3 	bl	80018b0 <runMotor>

					if (front_touchdown == false)
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <main+0x4c8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <main+0x474>
						runMotor(&rearMotor, 30);
 8002538:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800253c:	481f      	ldr	r0, [pc, #124]	; (80025bc <main+0x4ec>)
 800253e:	f7ff f9b7 	bl	80018b0 <runMotor>
 8002542:	e004      	b.n	800254e <main+0x47e>
					else
						runMotor(&rearMotor, 0);
 8002544:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80025b8 <main+0x4e8>
 8002548:	481c      	ldr	r0, [pc, #112]	; (80025bc <main+0x4ec>)
 800254a:	f7ff f9b1 	bl	80018b0 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <main+0x4c8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f083 0301 	eor.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d187      	bne.n	800246c <main+0x39c>
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <main+0x4d4>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d180      	bne.n	800246c <main+0x39c>

				}
				runMotor(&rearMotor, 0);
 800256a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80025b8 <main+0x4e8>
 800256e:	4813      	ldr	r0, [pc, #76]	; (80025bc <main+0x4ec>)
 8002570:	f7ff f99e 	bl	80018b0 <runMotor>
				runMotor(&backMotor, 0);
 8002574:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80025b8 <main+0x4e8>
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <main+0x4e4>)
 800257a:	f7ff f999 	bl	80018b0 <runMotor>
				emBrakeMotor(0);
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff f8b0 	bl	80016e4 <emBrakeMotor>
				HAL_Delay(500);
 8002584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002588:	f002 fbb8 	bl	8004cfc <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 800258c:	e32e      	b.n	8002bec <main+0xb1c>
 800258e:	bf00      	nop
 8002590:	20000068 	.word	0x20000068
 8002594:	20000078 	.word	0x20000078
 8002598:	200001c4 	.word	0x200001c4
 800259c:	20000088 	.word	0x20000088
 80025a0:	20000098 	.word	0x20000098
 80025a4:	200001c5 	.word	0x200001c5
 80025a8:	20000108 	.word	0x20000108
 80025ac:	20000360 	.word	0x20000360
 80025b0:	20000308 	.word	0x20000308
 80025b4:	20000034 	.word	0x20000034
 80025b8:	00000000 	.word	0x00000000
 80025bc:	20000000 	.word	0x20000000
			}
			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 80025c0:	4bc3      	ldr	r3, [pc, #780]	; (80028d0 <main+0x800>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11f      	bne.n	8002608 <main+0x538>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2108      	movs	r1, #8
 80025cc:	48c1      	ldr	r0, [pc, #772]	; (80028d4 <main+0x804>)
 80025ce:	f004 f89f 	bl	8006710 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2110      	movs	r1, #16
 80025d6:	48bf      	ldr	r0, [pc, #764]	; (80028d4 <main+0x804>)
 80025d8:	f004 f89a 	bl	8006710 <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 80025dc:	48be      	ldr	r0, [pc, #760]	; (80028d8 <main+0x808>)
 80025de:	f002 f883 	bl	80046e8 <wheel_Control>
				baseMotorCommand();
 80025e2:	f000 fd85 	bl	80030f0 <baseMotorCommand>
				front_touchdown = false;
 80025e6:	4bbd      	ldr	r3, [pc, #756]	; (80028dc <main+0x80c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 80025ec:	4bbc      	ldr	r3, [pc, #752]	; (80028e0 <main+0x810>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 80025f2:	4bbc      	ldr	r3, [pc, #752]	; (80028e4 <main+0x814>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
				speed[FRONT_INDEX] = 0;
 80025f8:	4bbb      	ldr	r3, [pc, #748]	; (80028e8 <main+0x818>)
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
				speed[BACK_INDEX] = 0;
 8002600:	4bb9      	ldr	r3, [pc, #740]	; (80028e8 <main+0x818>)
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	605a      	str	r2, [r3, #4]
			}
			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 8002608:	4bb1      	ldr	r3, [pc, #708]	; (80028d0 <main+0x800>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	f040 818f 	bne.w	8002930 <main+0x860>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002612:	2201      	movs	r2, #1
 8002614:	2108      	movs	r1, #8
 8002616:	48af      	ldr	r0, [pc, #700]	; (80028d4 <main+0x804>)
 8002618:	f004 f87a 	bl	8006710 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 800261c:	4bb1      	ldr	r3, [pc, #708]	; (80028e4 <main+0x814>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80f6 	beq.w	8002812 <main+0x742>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 8002626:	4bb1      	ldr	r3, [pc, #708]	; (80028ec <main+0x81c>)
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff45 	bl	80004b8 <__aeabi_f2d>
 800262e:	4604      	mov	r4, r0
 8002630:	460d      	mov	r5, r1
 8002632:	4baf      	ldr	r3, [pc, #700]	; (80028f0 <main+0x820>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff3e 	bl	80004b8 <__aeabi_f2d>
 800263c:	a39a      	add	r3, pc, #616	; (adr r3, 80028a8 <main+0x7d8>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fd ff91 	bl	8000568 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	4ba8      	ldr	r3, [pc, #672]	; (80028f4 <main+0x824>)
 8002654:	f7fe f8b2 	bl	80007bc <__aeabi_ddiv>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	ec43 2b17 	vmov	d7, r2, r3
 8002660:	eeb0 0a47 	vmov.f32	s0, s14
 8002664:	eef0 0a67 	vmov.f32	s1, s15
 8002668:	f007 ff52 	bl	800a510 <cos>
 800266c:	ec53 2b10 	vmov	r2, r3, d0
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd ff78 	bl	8000568 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4614      	mov	r4, r2
 800267e:	461d      	mov	r5, r3
 8002680:	4b9d      	ldr	r3, [pc, #628]	; (80028f8 <main+0x828>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff18 	bl	80004b8 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	f7fd fdb4 	bl	80001fc <__adddf3>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <main+0x82c>)
 80026a2:	f7fd fda9 	bl	80001f8 <__aeabi_dsub>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa53 	bl	8000b58 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 80026b4:	4a92      	ldr	r2, [pc, #584]	; (8002900 <main+0x830>)
 80026b6:	6013      	str	r3, [r2, #0]
					curb_height += 0.015; //Small error correction 10%
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <main+0x830>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fefb 	bl	80004b8 <__aeabi_f2d>
 80026c2:	a37b      	add	r3, pc, #492	; (adr r3, 80028b0 <main+0x7e0>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd fd98 	bl	80001fc <__adddf3>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa40 	bl	8000b58 <__aeabi_d2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a89      	ldr	r2, [pc, #548]	; (8002900 <main+0x830>)
 80026dc:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026de:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002904 <main+0x834>
 80026e2:	4b87      	ldr	r3, [pc, #540]	; (8002900 <main+0x830>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd fee2 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 80026f4:	a370      	add	r3, pc, #448	; (adr r3, 80028b8 <main+0x7e8>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fd fd7d 	bl	80001f8 <__aeabi_dsub>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fa27 	bl	8000b58 <__aeabi_d2f>
 800270a:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800270c:	4a7e      	ldr	r2, [pc, #504]	; (8002908 <main+0x838>)
 800270e:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 8002710:	4b7d      	ldr	r3, [pc, #500]	; (8002908 <main+0x838>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eef1 7a67 	vneg.f32	s15, s15
 800271a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800290c <main+0x83c>
 800271e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002722:	ee16 0a90 	vmov	r0, s13
 8002726:	f7fd fec7 	bl	80004b8 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ec43 2b10 	vmov	d0, r2, r3
 8002732:	f007 ff9d 	bl	800a670 <acos>
 8002736:	ec53 2b10 	vmov	r2, r3, d0
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f7fe fa0b 	bl	8000b58 <__aeabi_d2f>
 8002742:	ee07 0a10 	vmov	s14, r0
 8002746:	eddf 7a72 	vldr	s15, [pc, #456]	; 8002910 <main+0x840>
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	ee17 0a90 	vmov	r0, s15
 8002752:	f7fd feb1 	bl	80004b8 <__aeabi_f2d>
 8002756:	a354      	add	r3, pc, #336	; (adr r3, 80028a8 <main+0x7d8>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fe f82e 	bl	80007bc <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <main+0x844>)
 800276e:	f7fd fd43 	bl	80001f8 <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe f9ed 	bl	8000b58 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
					back_lifting_angle =
 8002780:	4a65      	ldr	r2, [pc, #404]	; (8002918 <main+0x848>)
 8002782:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <main+0x848>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe95 	bl	80004b8 <__aeabi_f2d>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b62      	ldr	r3, [pc, #392]	; (800291c <main+0x84c>)
 8002794:	f7fe f812 	bl	80007bc <__aeabi_ddiv>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	4b5e      	ldr	r3, [pc, #376]	; (8002920 <main+0x850>)
 80027a6:	f7fd fedf 	bl	8000568 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fe f989 	bl	8000ac8 <__aeabi_d2iz>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <main+0x854>)
 80027ba:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <main+0x848>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	eef4 7a67 	vcmp.f32	s15, s15
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	d613      	bvs.n	80027f4 <main+0x724>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 80027cc:	4b55      	ldr	r3, [pc, #340]	; (8002924 <main+0x854>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <main+0x724>
								|| curb_height <= 0.05 )
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <main+0x830>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fe6a 	bl	80004b8 <__aeabi_f2d>
 80027e4:	a336      	add	r3, pc, #216	; (adr r3, 80028c0 <main+0x7f0>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fe f939 	bl	8000a60 <__aeabi_dcmple>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <main+0x72c>
					{
						lifting_mode = RETRACTION;
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <main+0x800>)
 80027f6:	2203      	movs	r2, #3
 80027f8:	701a      	strb	r2, [r3, #0]
						continue;
 80027fa:	e1f7      	b.n	8002bec <main+0xb1c>
					}
					speed[BACK_INDEX] = 0;
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <main+0x818>)
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <main+0x818>)
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
					climb_first_iteration = false;
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <main+0x814>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
				}
				//Mathematical Model
				//Start Climbing process
				if (finish_climbing_flag == false){
 8002812:	4b45      	ldr	r3, [pc, #276]	; (8002928 <main+0x858>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d011      	beq.n	8002844 <main+0x774>
					if(!in_climb_process(MAX_FRONT_CLIMBING_ENC,back_encoder_input))
 8002820:	f240 739e 	movw	r3, #1950	; 0x79e
 8002824:	461a      	mov	r2, r3
 8002826:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <main+0x854>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 fe87 	bl	8003540 <in_climb_process>
 8002832:	4603      	mov	r3, r0
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <main+0x774>
						finish_climbing_flag = true;
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <main+0x858>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
				}

				if (finish_climbing_flag == true){
 8002844:	4b38      	ldr	r3, [pc, #224]	; (8002928 <main+0x858>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80e0 	beq.w	8002a0e <main+0x93e>
					emBrakeMotor(0);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe ff48 	bl	80016e4 <emBrakeMotor>
					if(!(climbingForward(forward_distance+0.03)))
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <main+0x85c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe2d 	bl	80004b8 <__aeabi_f2d>
 800285e:	a31a      	add	r3, pc, #104	; (adr r3, 80028c8 <main+0x7f8>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fcca 	bl	80001fc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f972 	bl	8000b58 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	ee00 3a10 	vmov	s0, r3
 800287a:	f000 fc5d 	bl	8003138 <climbingForward>
 800287e:	4603      	mov	r3, r0
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80c1 	beq.w	8002a0e <main+0x93e>
					{
						emBrakeMotor(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f7fe ff29 	bl	80016e4 <emBrakeMotor>
						finish_climbing_flag = false;
 8002892:	4b25      	ldr	r3, [pc, #148]	; (8002928 <main+0x858>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <main+0x800>)
 800289a:	2203      	movs	r2, #3
 800289c:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 800289e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028a2:	f002 fa2b 	bl	8004cfc <HAL_Delay>
 80028a6:	e0b2      	b.n	8002a0e <main+0x93e>
 80028a8:	54442d18 	.word	0x54442d18
 80028ac:	400921fb 	.word	0x400921fb
 80028b0:	eb851eb8 	.word	0xeb851eb8
 80028b4:	3f8eb851 	.word	0x3f8eb851
 80028b8:	916872b0 	.word	0x916872b0
 80028bc:	3faf7ced 	.word	0x3faf7ced
 80028c0:	9999999a 	.word	0x9999999a
 80028c4:	3fa99999 	.word	0x3fa99999
 80028c8:	eb851eb8 	.word	0xeb851eb8
 80028cc:	3f9eb851 	.word	0x3f9eb851
 80028d0:	20000108 	.word	0x20000108
 80028d4:	40020400 	.word	0x40020400
 80028d8:	200000d8 	.word	0x200000d8
 80028dc:	200001c4 	.word	0x200001c4
 80028e0:	200001c5 	.word	0x200001c5
 80028e4:	20000109 	.word	0x20000109
 80028e8:	200001c8 	.word	0x200001c8
 80028ec:	3eb2b021 	.word	0x3eb2b021
 80028f0:	20000308 	.word	0x20000308
 80028f4:	40668000 	.word	0x40668000
 80028f8:	3e19999a 	.word	0x3e19999a
 80028fc:	3fb00000 	.word	0x3fb00000
 8002900:	200001e8 	.word	0x200001e8
 8002904:	3e19999a 	.word	0x3e19999a
 8002908:	200001f0 	.word	0x200001f0
 800290c:	3eb2b021 	.word	0x3eb2b021
 8002910:	43340000 	.word	0x43340000
 8002914:	403e0000 	.word	0x403e0000
 8002918:	200001f4 	.word	0x200001f4
 800291c:	40768000 	.word	0x40768000
 8002920:	40c00000 	.word	0x40c00000
 8002924:	200001f8 	.word	0x200001f8
 8002928:	200001fc 	.word	0x200001fc
 800292c:	20000124 	.word	0x20000124
					}
				}
			}

			else if (lifting_mode == CLIMB_DOWN)
 8002930:	4bb1      	ldr	r3, [pc, #708]	; (8002bf8 <main+0xb28>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d16a      	bne.n	8002a0e <main+0x93e>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2110      	movs	r1, #16
 800293c:	48af      	ldr	r0, [pc, #700]	; (8002bfc <main+0xb2c>)
 800293e:	f003 fee7 	bl	8006710 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002942:	4baf      	ldr	r3, [pc, #700]	; (8002c00 <main+0xb30>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <main+0x8cc>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 800294a:	4bae      	ldr	r3, [pc, #696]	; (8002c04 <main+0xb34>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 5.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd90 	bl	8000474 <__aeabi_ui2d>
 8002954:	a3a6      	add	r3, pc, #664	; (adr r3, 8002bf0 <main+0xb20>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fd fc4f 	bl	80001fc <__adddf3>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f8af 	bl	8000ac8 <__aeabi_d2iz>
 800296a:	4603      	mov	r3, r0
 800296c:	4aa6      	ldr	r2, [pc, #664]	; (8002c08 <main+0xb38>)
 800296e:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC )
 8002970:	4ba5      	ldr	r3, [pc, #660]	; (8002c08 <main+0xb38>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	f640 431c 	movw	r3, #3100	; 0xc1c
 800297a:	429a      	cmp	r2, r3
 800297c:	d903      	bls.n	8002986 <main+0x8b6>
					{
						lifting_mode = RETRACTION;
 800297e:	4b9e      	ldr	r3, [pc, #632]	; (8002bf8 <main+0xb28>)
 8002980:	2203      	movs	r2, #3
 8002982:	701a      	strb	r2, [r3, #0]
						continue;
 8002984:	e132      	b.n	8002bec <main+0xb1c>
					}
					climb_first_iteration = false;
 8002986:	4b9e      	ldr	r3, [pc, #632]	; (8002c00 <main+0xb30>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]

					speed[BACK_INDEX] = 0;
 800298c:	4b9f      	ldr	r3, [pc, #636]	; (8002c0c <main+0xb3c>)
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002994:	4b9d      	ldr	r3, [pc, #628]	; (8002c0c <main+0xb3c>)
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
				}

				//Start Climbing process
				if (finish_climbing_flag == false){
 800299c:	4b9c      	ldr	r3, [pc, #624]	; (8002c10 <main+0xb40>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d010      	beq.n	80029cc <main+0x8fc>
					if(!in_climb_process(front_climbDown_enc,MAX_BACK_CLIMBING_ENC))
 80029aa:	4b97      	ldr	r3, [pc, #604]	; (8002c08 <main+0xb38>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f240 723a 	movw	r2, #1850	; 0x73a
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fdc3 	bl	8003540 <in_climb_process>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f083 0301 	eor.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <main+0x8fc>
						finish_climbing_flag = true;
 80029c6:	4b92      	ldr	r3, [pc, #584]	; (8002c10 <main+0xb40>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
				}

				if (finish_climbing_flag == true){
 80029cc:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <main+0xb40>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01c      	beq.n	8002a0e <main+0x93e>
					emBrakeMotor(0);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fe85 	bl	80016e4 <emBrakeMotor>
					if(!(climbingForward(forward_distance)))
 80029da:	4b8e      	ldr	r3, [pc, #568]	; (8002c14 <main+0xb44>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	eeb0 0a67 	vmov.f32	s0, s15
 80029e4:	f000 fba8 	bl	8003138 <climbingForward>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <main+0x93e>
					{
						emBrakeMotor(1);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fe fe75 	bl	80016e4 <emBrakeMotor>
						finish_climbing_flag = false;
 80029fa:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <main+0xb40>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002a00:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <main+0xb28>)
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8002a06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a0a:	f002 f977 	bl	8004cfc <HAL_Delay>
					}
				}
			}
			if (lifting_mode == RETRACTION)
 8002a0e:	4b7a      	ldr	r3, [pc, #488]	; (8002bf8 <main+0xb28>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d148      	bne.n	8002aa8 <main+0x9d8>
			{

				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002a16:	2201      	movs	r2, #1
 8002a18:	2108      	movs	r1, #8
 8002a1a:	4878      	ldr	r0, [pc, #480]	; (8002bfc <main+0xb2c>)
 8002a1c:	f003 fe78 	bl	8006710 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	2110      	movs	r1, #16
 8002a24:	4875      	ldr	r0, [pc, #468]	; (8002bfc <main+0xb2c>)
 8002a26:	f003 fe73 	bl	8006710 <HAL_GPIO_WritePin>
				//retraction process
				if (abs(encoderBack.encoder_pos- (MIN_BACK_ALLOWABLE_ENC)) > 30
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	; (8002c18 <main+0xb48>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bfb8      	it	lt
 8002a38:	425b      	neglt	r3, r3
 8002a3a:	2b1e      	cmp	r3, #30
 8002a3c:	dc09      	bgt.n	8002a52 <main+0x982>
						|| abs(encoderFront.encoder_pos - (MIN_FRONT_ALLOWABLE_ENC))
 8002a3e:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <main+0xb34>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bfb8      	it	lt
 8002a4c:	425b      	neglt	r3, r3
 8002a4e:	2b1e      	cmp	r3, #30
 8002a50:	dd25      	ble.n	8002a9e <main+0x9ce>
								> 30)
				{
					goto_pos(MIN_BACK_ALLOWABLE_ENC, backClimb_pid);
 8002a52:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <main+0xb4c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fc56 	bl	8003310 <goto_pos>
					goto_pos(MIN_FRONT_ALLOWABLE_ENC, frontClimb_pid);
 8002a64:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <main+0xb50>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f000 fc4d 	bl	8003310 <goto_pos>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <main+0xb3c>)
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	d10f      	bne.n	8002aa6 <main+0x9d6>
 8002a86:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <main+0xb3c>)
 8002a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	d107      	bne.n	8002aa6 <main+0x9d6>
						lifting_mode = NORMAL;
 8002a96:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <main+0xb28>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a9c:	e003      	b.n	8002aa6 <main+0x9d6>
				}
				else
				{

					lifting_mode = NORMAL;
 8002a9e:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <main+0xb28>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e000      	b.n	8002aa8 <main+0x9d8>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002aa6:	bf00      	nop

			}

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 8002aa8:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <main+0xb3c>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	eef0 7ae7 	vabs.f32	s15, s15
 8002ab2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d503      	bpl.n	8002ac8 <main+0x9f8>
				speed[FRONT_INDEX] = 0;
 8002ac0:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <main+0xb3c>)
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <main+0xb3c>)
 8002aca:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ace:	eef0 7ae7 	vabs.f32	s15, s15
 8002ad2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d503      	bpl.n	8002ae8 <main+0xa18>
				speed[BACK_INDEX] = 0;
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <main+0xb3c>)
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <main+0xb34>)
 8002aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aec:	f242 3333 	movw	r3, #9011	; 0x2333
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d212      	bcs.n	8002b1c <main+0xa4c>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002af6:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <main+0xb34>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d91e      	bls.n	8002b40 <main+0xa70>
 8002b02:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <main+0xb3c>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	dd16      	ble.n	8002b40 <main+0xa70>
					speed[FRONT_INDEX] = 0;
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <main+0xb3c>)
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e011      	b.n	8002b40 <main+0xa70>
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <main+0xb34>)
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d20b      	bcs.n	8002b40 <main+0xa70>
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <main+0xb3c>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d503      	bpl.n	8002b40 <main+0xa70>
					speed[FRONT_INDEX] = 0;
 8002b38:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <main+0xb3c>)
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8002b40:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <main+0xb48>)
 8002b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d212      	bcs.n	8002b74 <main+0xaa4>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <main+0xb48>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d91e      	bls.n	8002b98 <main+0xac8>
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <main+0xb3c>)
 8002b5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	dd16      	ble.n	8002b98 <main+0xac8>
					speed[BACK_INDEX] = 0;
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <main+0xb3c>)
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	e011      	b.n	8002b98 <main+0xac8>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <main+0xb48>)
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d20b      	bcs.n	8002b98 <main+0xac8>
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <main+0xb3c>)
 8002b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8e:	d503      	bpl.n	8002b98 <main+0xac8>
					speed[BACK_INDEX] = 0;
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <main+0xb3c>)
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <main+0xb3c>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	4820      	ldr	r0, [pc, #128]	; (8002c24 <main+0xb54>)
 8002ba4:	f7fe fe84 	bl	80018b0 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <main+0xb3c>)
 8002baa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bae:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb2:	481d      	ldr	r0, [pc, #116]	; (8002c28 <main+0xb58>)
 8002bb4:	f7fe fe7c 	bl	80018b0 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <main+0xb3c>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	d10b      	bne.n	8002be0 <main+0xb10>
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <main+0xb3c>)
 8002bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	d103      	bne.n	8002be0 <main+0xb10>
				emBrakeMotor(0);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe fd83 	bl	80016e4 <emBrakeMotor>
 8002bde:	e002      	b.n	8002be6 <main+0xb16>
			else
				emBrakeMotor(1);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f7fe fd7f 	bl	80016e4 <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002be6:	f002 f87d 	bl	8004ce4 <HAL_GetTick>
 8002bea:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8002bec:	f7ff bb5a 	b.w	80022a4 <main+0x1d4>
 8002bf0:	9f49f4a0 	.word	0x9f49f4a0
 8002bf4:	405f49f4 	.word	0x405f49f4
 8002bf8:	20000108 	.word	0x20000108
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	20000109 	.word	0x20000109
 8002c04:	20000308 	.word	0x20000308
 8002c08:	200001ec 	.word	0x200001ec
 8002c0c:	200001c8 	.word	0x200001c8
 8002c10:	200001fc 	.word	0x200001fc
 8002c14:	20000124 	.word	0x20000124
 8002c18:	20000360 	.word	0x20000360
 8002c1c:	20000510 	.word	0x20000510
 8002c20:	200004c4 	.word	0x200004c4
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000034 	.word	0x20000034

08002c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b094      	sub	sp, #80	; 0x50
 8002c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c32:	f107 0320 	add.w	r3, r7, #32
 8002c36:	2230      	movs	r2, #48	; 0x30
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f007 fac0 	bl	800a1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <SystemClock_Config+0xd8>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <SystemClock_Config+0xd8>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <SystemClock_Config+0xd8>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <SystemClock_Config+0xdc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <SystemClock_Config+0xdc>)
 8002c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <SystemClock_Config+0xdc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c92:	2302      	movs	r3, #2
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002ca0:	23b4      	movs	r3, #180	; 0xb4
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cac:	f107 0320 	add.w	r3, r7, #32
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 ff6f 	bl	8006b94 <HAL_RCC_OscConfig>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002cbc:	f000 fd62 	bl	8003784 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002cc0:	f003 ff18 	bl	8006af4 <HAL_PWREx_EnableOverDrive>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002cca:	f000 fd5b 	bl	8003784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cce:	230f      	movs	r3, #15
 8002cd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	2105      	movs	r1, #5
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 f9c1 	bl	8007074 <HAL_RCC_ClockConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002cf8:	f000 fd44 	bl	8003784 <Error_Handler>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3750      	adds	r7, #80	; 0x50
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000

08002d0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d11c      	bne.n	8002d56 <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002d1c:	f001 ffe2 	bl	8004ce4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x58>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d916      	bls.n	8002d5a <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002d2c:	480e      	ldr	r0, [pc, #56]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d2e:	f7fe fc9b 	bl	8001668 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x60>)
 8002d3c:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d48:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002d4a:	f001 ffcb 	bl	8004ce4 <HAL_GetTick>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x58>)
 8002d52:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002d54:	e001      	b.n	8002d5a <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002d5a:	bf00      	nop
	}
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200001bc 	.word	0x200001bc
 8002d68:	200004b4 	.word	0x200004b4
 8002d6c:	2000050c 	.word	0x2000050c
 8002d70:	20000410 	.word	0x20000410

08002d74 <HAL_UART_RxCpltCallback>:
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a3f      	ldr	r2, [pc, #252]	; (8002e80 <HAL_UART_RxCpltCallback+0x10c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d175      	bne.n	8002e72 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b3d      	ldr	r3, [pc, #244]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002d98:	789b      	ldrb	r3, [r3, #2]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002dac:	791b      	ldrb	r3, [r3, #4]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002db6:	795b      	ldrb	r3, [r3, #5]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002dc0:	799b      	ldrb	r3, [r3, #6]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002dca:	79db      	ldrb	r3, [r3, #7]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002dd4:	7a1b      	ldrb	r3, [r3, #8]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002dde:	7a5b      	ldrb	r3, [r3, #9]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002de8:	7a9b      	ldrb	r3, [r3, #10]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002df2:	7adb      	ldrb	r3, [r3, #11]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002dfc:	7b1b      	ldrb	r3, [r3, #12]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e06:	7b5b      	ldrb	r3, [r3, #13]
 8002e08:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e14:	7b9b      	ldrb	r3, [r3, #14]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d12b      	bne.n	8002e72 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2baa      	cmp	r3, #170	; 0xaa
 8002e20:	d127      	bne.n	8002e72 <HAL_UART_RxCpltCallback+0xfe>
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2ba4      	cmp	r3, #164	; 0xa4
 8002e28:	d123      	bne.n	8002e72 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d11f      	bne.n	8002e72 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e34:	7a5b      	ldrb	r3, [r3, #9]
 8002e36:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e3a:	7a1b      	ldrb	r3, [r3, #8]
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	441a      	add	r2, r3
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e42:	79db      	ldrb	r3, [r3, #7]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e4a:	7992      	ldrb	r2, [r2, #6]
 8002e4c:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <HAL_UART_RxCpltCallback+0x114>)
 8002e50:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e54:	7b5b      	ldrb	r3, [r3, #13]
 8002e56:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e5a:	7b1b      	ldrb	r3, [r3, #12]
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	441a      	add	r2, r3
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e62:	7adb      	ldrb	r3, [r3, #11]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <HAL_UART_RxCpltCallback+0x110>)
 8002e6a:	7a92      	ldrb	r2, [r2, #10]
 8002e6c:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002e6e:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_UART_RxCpltCallback+0x114>)
 8002e70:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40004800 	.word	0x40004800
 8002e84:	200004fc 	.word	0x200004fc
 8002e88:	20000414 	.word	0x20000414
 8002e8c:	00000000 	.word	0x00000000

08002e90 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a8d      	ldr	r2, [pc, #564]	; (80030d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	f040 810b 	bne.w	80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	4a8b      	ldr	r2, [pc, #556]	; (80030d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f002 fa45 	bl	800533a <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002eb0:	7a7b      	ldrb	r3, [r7, #9]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d150      	bne.n	8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4987      	ldr	r1, [pc, #540]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fe9f 	bl	8001c00 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002ec2:	4885      	ldr	r0, [pc, #532]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002ec4:	f7fe ff15 	bl	8001cf2 <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8002ec8:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 8002ecc:	425b      	negs	r3, r3
 8002ece:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8002ed2:	4a81      	ldr	r2, [pc, #516]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002ee2:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80030dc <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8002ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80030e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef2:	ee17 0a90 	vmov	r0, s15
 8002ef6:	f7fd fadf 	bl	80004b8 <__aeabi_f2d>
 8002efa:	a371      	add	r3, pc, #452	; (adr r3, 80030c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd f97c 	bl	80001fc <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7fd fe24 	bl	8000b58 <__aeabi_d2f>
 8002f10:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002f12:	4a71      	ldr	r2, [pc, #452]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002f16:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f18:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f1c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80030e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	dd09      	ble.n	8002f3e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 8002f2a:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f2c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f30:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80030e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f38:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f3a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8002f3e:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d306      	bcc.n	8002f58 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 8002f4e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002f52:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002f54:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f56:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002f58:	7a7b      	ldrb	r3, [r7, #9]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	f040 80ac 	bne.w	80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	495f      	ldr	r1, [pc, #380]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fe4a 	bl	8001c00 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002f6c:	485d      	ldr	r0, [pc, #372]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f6e:	f7fe fec0 	bl	8001cf2 <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002f72:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002f7a:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d839      	bhi.n	8002ff6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002f82:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002f8a:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	0b5b      	lsrs	r3, r3, #13
 8002f92:	f242 3133 	movw	r1, #9011	; 0x2333
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002f9c:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002f9e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002fa0:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fac:	ee17 0a90 	vmov	r0, s15
 8002fb0:	f7fd fa82 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002fb4:	a344      	add	r3, pc, #272	; (adr r3, 80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f7fd fbff 	bl	80007bc <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	4b48      	ldr	r3, [pc, #288]	; (80030ec <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002fcc:	f7fd facc 	bl	8000568 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	a339      	add	r3, pc, #228	; (adr r3, 80030c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	f7fd f90d 	bl	80001fc <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7fd fdb5 	bl	8000b58 <__aeabi_d2f>
 8002fee:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002ff0:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	e047      	b.n	8003086 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa3a 	bl	8000474 <__aeabi_ui2d>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	a130      	add	r1, pc, #192	; (adr r1, 80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800300a:	f7fd f8f5 	bl	80001f8 <__aeabi_dsub>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f7fd fd7f 	bl	8000b18 <__aeabi_d2uiz>
 800301a:	4603      	mov	r3, r0
 800301c:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800301e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003020:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302c:	ee17 0a90 	vmov	r0, s15
 8003030:	f7fd fa42 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8003034:	a324      	add	r3, pc, #144	; (adr r3, 80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f7fd fbbf 	bl	80007bc <__aeabi_ddiv>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800304c:	f7fd fa8c 	bl	8000568 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	a319      	add	r3, pc, #100	; (adr r3, 80030c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd f8cd 	bl	80001fc <__adddf3>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8003070:	f7fd f8c2 	bl	80001f8 <__aeabi_dsub>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f7fd fd6c 	bl	8000b58 <__aeabi_d2f>
 8003080:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f640 421c 	movw	r2, #3100	; 0xc1c
 800308e:	4293      	cmp	r3, r2
 8003090:	d312      	bcc.n	80030b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd f9ec 	bl	8000474 <__aeabi_ui2d>
 800309c:	a30a      	add	r3, pc, #40	; (adr r3, 80030c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd f8a9 	bl	80001f8 <__aeabi_dsub>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fd0b 	bl	8000ac8 <__aeabi_d2iz>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80030b6:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	d0e56042 	.word	0xd0e56042
 80030c4:	40424b22 	.word	0x40424b22
 80030c8:	9999999a 	.word	0x9999999a
 80030cc:	40c19999 	.word	0x40c19999
 80030d0:	200002b8 	.word	0x200002b8
 80030d4:	20000204 	.word	0x20000204
 80030d8:	20000360 	.word	0x20000360
 80030dc:	46000000 	.word	0x46000000
 80030e0:	43b40000 	.word	0x43b40000
 80030e4:	20000308 	.word	0x20000308
 80030e8:	e8bb8111 	.word	0xe8bb8111
 80030ec:	40768000 	.word	0x40768000

080030f0 <baseMotorCommand>:

void baseMotorCommand(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <baseMotorCommand+0x40>)
 80030f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030fe:	ee17 3a90 	vmov	r3, s15
 8003102:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <baseMotorCommand+0x44>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <baseMotorCommand+0x40>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003116:	ee17 3a90 	vmov	r3, s15
 800311a:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <baseMotorCommand+0x44>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	200000d8 	.word	0x200000d8
 8003134:	20000554 	.word	0x20000554

08003138 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 8003138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint32_t prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8003144:	edd7 7a01 	vldr	s15, [r7, #4]
 8003148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	db02      	blt.n	8003158 <climbingForward+0x20>
 8003152:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003156:	e000      	b.n	800315a <climbingForward+0x22>
 8003158:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <climbingForward+0x1b0>)
 800315a:	617b      	str	r3, [r7, #20]

	if (first_loop)
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <climbingForward+0x1b4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00e      	beq.n	8003182 <climbingForward+0x4a>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 8003164:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <climbingForward+0x1b8>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a62      	ldr	r2, [pc, #392]	; (80032f4 <climbingForward+0x1bc>)
 800316a:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 800316c:	f001 fdba 	bl	8004ce4 <HAL_GetTick>
 8003170:	4603      	mov	r3, r0
 8003172:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <climbingForward+0x1c0>)
 8003174:	6013      	str	r3, [r2, #0]
		first_loop = false;
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <climbingForward+0x1b4>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 800317c:	4a5f      	ldr	r2, [pc, #380]	; (80032fc <climbingForward+0x1c4>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <climbingForward+0x1c4>)
 8003184:	ed93 7a00 	vldr	s14, [r3]
 8003188:	edd7 6a01 	vldr	s13, [r7, #4]
 800318c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	f2c0 808f 	blt.w	80032ba <climbingForward+0x182>
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <climbingForward+0x1b4>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <climbingForward+0x182>
	{
		send_HubMotor(rps, rps);
 80031ac:	edd7 0a05 	vldr	s1, [r7, #20]
 80031b0:	ed97 0a05 	vldr	s0, [r7, #20]
 80031b4:	f7fe f92c 	bl	8001410 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 80031b8:	f001 fd94 	bl	8004ce4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <climbingForward+0x1c0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d976      	bls.n	80032b6 <climbingForward+0x17e>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 80031c8:	f001 fd8c 	bl	8004ce4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <climbingForward+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031dc:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003300 <climbingForward+0x1c8>
 80031e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031e4:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <climbingForward+0x1b8>)
 80031ea:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <climbingForward+0x1bc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 80031fa:	ed97 7a04 	vldr	s14, [r7, #16]
 80031fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003206:	ee17 0a90 	vmov	r0, s15
 800320a:	f7fd f955 	bl	80004b8 <__aeabi_f2d>
 800320e:	a332      	add	r3, pc, #200	; (adr r3, 80032d8 <climbingForward+0x1a0>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd f9a8 	bl	8000568 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	4b37      	ldr	r3, [pc, #220]	; (8003304 <climbingForward+0x1cc>)
 8003226:	f7fd fac9 	bl	80007bc <__aeabi_ddiv>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f7fd fc91 	bl	8000b58 <__aeabi_d2f>
 8003236:	4603      	mov	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 800323a:	4b30      	ldr	r3, [pc, #192]	; (80032fc <climbingForward+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd f93a 	bl	80004b8 <__aeabi_f2d>
 8003244:	4604      	mov	r4, r0
 8003246:	460d      	mov	r5, r1
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7fd f935 	bl	80004b8 <__aeabi_f2d>
 800324e:	a324      	add	r3, pc, #144	; (adr r3, 80032e0 <climbingForward+0x1a8>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd f988 	bl	8000568 <__aeabi_dmul>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4690      	mov	r8, r2
 800325e:	4699      	mov	r9, r3
 8003260:	6938      	ldr	r0, [r7, #16]
 8003262:	f7fd f929 	bl	80004b8 <__aeabi_f2d>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4640      	mov	r0, r8
 800326c:	4649      	mov	r1, r9
 800326e:	f7fd f97b 	bl	8000568 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003282:	f7fd fa9b 	bl	80007bc <__aeabi_ddiv>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4620      	mov	r0, r4
 800328c:	4629      	mov	r1, r5
 800328e:	f7fc ffb3 	bl	80001f8 <__aeabi_dsub>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f7fd fc5d 	bl	8000b58 <__aeabi_d2f>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a16      	ldr	r2, [pc, #88]	; (80032fc <climbingForward+0x1c4>)
 80032a2:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 80032a4:	f001 fd1e 	bl	8004ce4 <HAL_GetTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <climbingForward+0x1c0>)
 80032ac:	6013      	str	r3, [r2, #0]
//					dist_remaining = 0;
//				}
//			}
//			else
//				stationary_tick = HAL_GetTick();
			prev_enc = hub_encoder_feedback.encoder_2;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <climbingForward+0x1b8>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <climbingForward+0x1bc>)
 80032b4:	6013      	str	r3, [r2, #0]

		}
		return true;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e009      	b.n	80032ce <climbingForward+0x196>
	}
	else
	{
		first_loop = true;
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <climbingForward+0x1b4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 80032c0:	eddf 0a11 	vldr	s1, [pc, #68]	; 8003308 <climbingForward+0x1d0>
 80032c4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003308 <climbingForward+0x1d0>
 80032c8:	f7fe f8a2 	bl	8001410 <send_HubMotor>
		return false;
 80032cc:	2300      	movs	r3, #0
	}
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032d8:	54442d18 	.word	0x54442d18
 80032dc:	400921fb 	.word	0x400921fb
 80032e0:	916872b0 	.word	0x916872b0
 80032e4:	3fbf7ced 	.word	0x3fbf7ced
 80032e8:	bf800000 	.word	0xbf800000
 80032ec:	20000128 	.word	0x20000128
 80032f0:	20000414 	.word	0x20000414
 80032f4:	20000220 	.word	0x20000220
 80032f8:	20000224 	.word	0x20000224
 80032fc:	20000228 	.word	0x20000228
 8003300:	447a0000 	.word	0x447a0000
 8003304:	40b00000 	.word	0x40b00000
	...

08003310 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 8003310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;
	ENCODER_Read(&encoderBack);
 800331c:	487c      	ldr	r0, [pc, #496]	; (8003510 <goto_pos+0x200>)
 800331e:	f7fe fcc0 	bl	8001ca2 <ENCODER_Read>
	ENCODER_Read(&encoderFront);
 8003322:	487c      	ldr	r0, [pc, #496]	; (8003514 <goto_pos+0x204>)
 8003324:	f7fe fcbd 	bl	8001ca2 <ENCODER_Read>
	if (pid_t == frontClimb_pid)
 8003328:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <goto_pos+0x208>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d17b      	bne.n	800342a <goto_pos+0x11a>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 8003332:	4b78      	ldr	r3, [pc, #480]	; (8003514 <goto_pos+0x204>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8003338:	4b77      	ldr	r3, [pc, #476]	; (8003518 <goto_pos+0x208>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fe19 	bl	8000f74 <pid_need_compute>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d06e      	beq.n	8003426 <goto_pos+0x116>
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8a0 	bl	8000494 <__aeabi_i2d>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4690      	mov	r8, r2
 800335a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	4b6e      	ldr	r3, [pc, #440]	; (800351c <goto_pos+0x20c>)
 8003364:	4640      	mov	r0, r8
 8003366:	4649      	mov	r1, r9
 8003368:	f7fd fb8e 	bl	8000a88 <__aeabi_dcmpgt>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d059      	beq.n	8003426 <goto_pos+0x116>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003378:	4293      	cmp	r3, r2
 800337a:	d90f      	bls.n	800339c <goto_pos+0x8c>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7fd f889 	bl	8000494 <__aeabi_i2d>
 8003382:	a361      	add	r3, pc, #388	; (adr r3, 8003508 <goto_pos+0x1f8>)
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fc ff36 	bl	80001f8 <__aeabi_dsub>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f7fd fb98 	bl	8000ac8 <__aeabi_d2iz>
 8003398:	4603      	mov	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f640 421c 	movw	r2, #3100	; 0xc1c
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d30f      	bcc.n	80033c6 <goto_pos+0xb6>
				enc -= 4096 * FRONT_GEAR_RATIO;
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd f874 	bl	8000494 <__aeabi_i2d>
 80033ac:	a356      	add	r3, pc, #344	; (adr r3, 8003508 <goto_pos+0x1f8>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fc ff21 	bl	80001f8 <__aeabi_dsub>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	f7fd fb83 	bl	8000ac8 <__aeabi_d2iz>
 80033c2:	4603      	mov	r3, r0
 80033c4:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <goto_pos+0x210>)
 80033d2:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <goto_pos+0x214>)
 80033e2:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <goto_pos+0x208>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fdd7 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <goto_pos+0x218>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a4d      	ldr	r2, [pc, #308]	; (800352c <goto_pos+0x21c>)
 80033f6:	6013      	str	r3, [r2, #0]
			if(fabs(speed[FRONT_INDEX]) < 5)
 80033f8:	4b4c      	ldr	r3, [pc, #304]	; (800352c <goto_pos+0x21c>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	eef0 7ae7 	vabs.f32	s15, s15
 8003402:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	d508      	bpl.n	8003422 <goto_pos+0x112>
			{
				speed[FRONT_INDEX] = 0;
 8003410:	4b46      	ldr	r3, [pc, #280]	; (800352c <goto_pos+0x21c>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 8003418:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <goto_pos+0x208>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd ffd1 	bl	80013c4 <pid_reset>
			}

			return true;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <goto_pos+0x1ee>
		}
		else
		{
//			speed[FRONT_INDEX] = 0;

			return false;
 8003426:	2300      	movs	r3, #0
 8003428:	e069      	b.n	80034fe <goto_pos+0x1ee>
		}
	}
	else if (pid_t == backClimb_pid)
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <goto_pos+0x220>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d163      	bne.n	80034fc <goto_pos+0x1ec>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <goto_pos+0x200>)
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <goto_pos+0x220>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd fd98 	bl	8000f74 <pid_need_compute>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d056      	beq.n	80034f8 <goto_pos+0x1e8>
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f81f 	bl	8000494 <__aeabi_i2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4614      	mov	r4, r2
 800345c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <goto_pos+0x20c>)
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fd fb0d 	bl	8000a88 <__aeabi_dcmpgt>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d041      	beq.n	80034f8 <goto_pos+0x1e8>
		{
			// Read process feedback
			//following code is causing back turn
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800347a:	4293      	cmp	r3, r2
 800347c:	d903      	bls.n	8003486 <goto_pos+0x176>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003484:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800348c:	4293      	cmp	r3, r2
 800348e:	d303      	bcc.n	8003498 <goto_pos+0x188>
				enc -= 4096 * BACK_GEAR_RATIO;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003496:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <goto_pos+0x224>)
 80034a4:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <goto_pos+0x228>)
 80034b4:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <goto_pos+0x220>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fd6e 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <goto_pos+0x22c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <goto_pos+0x21c>)
 80034c8:	6053      	str	r3, [r2, #4]
			if(fabs(speed[BACK_INDEX]) < 5)
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <goto_pos+0x21c>)
 80034cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80034d0:	eef0 7ae7 	vabs.f32	s15, s15
 80034d4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80034d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d508      	bpl.n	80034f4 <goto_pos+0x1e4>
			{
				speed[BACK_INDEX] = 0;
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <goto_pos+0x21c>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
				pid_reset(backClimb_pid);
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <goto_pos+0x220>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd ff68 	bl	80013c4 <pid_reset>
			}
			return true;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e002      	b.n	80034fe <goto_pos+0x1ee>
		else
		{
//			speed[BACK_INDEX] = 0;
//			if(fabs(speed[BACK_INDEX]) < 5)
//				pid_reset(backClimb_pid);
			return false;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <goto_pos+0x1ee>
		}
	}
	return false;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003508:	9999999a 	.word	0x9999999a
 800350c:	40c19999 	.word	0x40c19999
 8003510:	20000360 	.word	0x20000360
 8003514:	20000308 	.word	0x20000308
 8003518:	200004c4 	.word	0x200004c4
 800351c:	40140000 	.word	0x40140000
 8003520:	200001d8 	.word	0x200001d8
 8003524:	200001d0 	.word	0x200001d0
 8003528:	200001d4 	.word	0x200001d4
 800352c:	200001c8 	.word	0x200001c8
 8003530:	20000510 	.word	0x20000510
 8003534:	200001e4 	.word	0x200001e4
 8003538:	200001dc 	.word	0x200001dc
 800353c:	200001e0 	.word	0x200001e0

08003540 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc)
{
 8003540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	613b      	str	r3, [r7, #16]

	if (first_loop)
 8003552:	4b81      	ldr	r3, [pc, #516]	; (8003758 <in_climb_process+0x218>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 800355a:	4b80      	ldr	r3, [pc, #512]	; (800375c <in_climb_process+0x21c>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a80      	ldr	r2, [pc, #512]	; (8003760 <in_climb_process+0x220>)
 8003560:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003562:	f001 fbbf 	bl	8004ce4 <HAL_GetTick>
 8003566:	4603      	mov	r3, r0
 8003568:	4a7e      	ldr	r2, [pc, #504]	; (8003764 <in_climb_process+0x224>)
 800356a:	6013      	str	r3, [r2, #0]
		first_loop = false;
 800356c:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <in_climb_process+0x218>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 8003572:	4b7d      	ldr	r3, [pc, #500]	; (8003768 <in_climb_process+0x228>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fec9 	bl	8003310 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 800357e:	4b7b      	ldr	r3, [pc, #492]	; (800376c <in_climb_process+0x22c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4619      	mov	r1, r3
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	f7ff fec3 	bl	8003310 <goto_pos>

	if (fabs(speed[FRONT_INDEX]) >= 5 || fabs(speed[BACK_INDEX]) >= 5)
 800358a:	4b79      	ldr	r3, [pc, #484]	; (8003770 <in_climb_process+0x230>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	eef0 7ae7 	vabs.f32	s15, s15
 8003594:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800359c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a0:	da0b      	bge.n	80035ba <in_climb_process+0x7a>
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <in_climb_process+0x230>)
 80035a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a8:	eef0 7ae7 	vabs.f32	s15, s15
 80035ac:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80035b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b8:	db02      	blt.n	80035c0 <in_climb_process+0x80>
		is_lifting = true;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
 80035be:	e001      	b.n	80035c4 <in_climb_process+0x84>
	else
		is_lifting = false;
 80035c0:	2300      	movs	r3, #0
 80035c2:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 809d 	beq.w	8003706 <in_climb_process+0x1c6>
 80035cc:	4b68      	ldr	r3, [pc, #416]	; (8003770 <in_climb_process+0x230>)
 80035ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	f000 8094 	beq.w	8003706 <in_climb_process+0x1c6>
	{
		double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 80035de:	f001 fb81 	bl	8004ce4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b5f      	ldr	r3, [pc, #380]	; (8003764 <in_climb_process+0x224>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003774 <in_climb_process+0x234>
 80035f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035fa:	ee16 0a90 	vmov	r0, s13
 80035fe:	f7fc ff5b 	bl	80004b8 <__aeabi_f2d>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg)))
 800360a:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <in_climb_process+0x238>)
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ff53 	bl	80004b8 <__aeabi_f2d>
 8003612:	4604      	mov	r4, r0
 8003614:	460d      	mov	r5, r1
 8003616:	4b52      	ldr	r3, [pc, #328]	; (8003760 <in_climb_process+0x220>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ff4c 	bl	80004b8 <__aeabi_f2d>
 8003620:	a349      	add	r3, pc, #292	; (adr r3, 8003748 <in_climb_process+0x208>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f7fc ff9f 	bl	8000568 <__aeabi_dmul>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b51      	ldr	r3, [pc, #324]	; (800377c <in_climb_process+0x23c>)
 8003638:	f7fd f8c0 	bl	80007bc <__aeabi_ddiv>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	ec43 2b17 	vmov	d7, r2, r3
 8003644:	eeb0 0a47 	vmov.f32	s0, s14
 8003648:	eef0 0a67 	vmov.f32	s1, s15
 800364c:	f006 ffbc 	bl	800a5c8 <sin>
 8003650:	ec59 8b10 	vmov	r8, r9, d0
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <in_climb_process+0x21c>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff2d 	bl	80004b8 <__aeabi_f2d>
 800365e:	a33a      	add	r3, pc, #232	; (adr r3, 8003748 <in_climb_process+0x208>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ff80 	bl	8000568 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	4b41      	ldr	r3, [pc, #260]	; (800377c <in_climb_process+0x23c>)
 8003676:	f7fd f8a1 	bl	80007bc <__aeabi_ddiv>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	ec43 2b17 	vmov	d7, r2, r3
 8003682:	eeb0 0a47 	vmov.f32	s0, s14
 8003686:	eef0 0a67 	vmov.f32	s1, s15
 800368a:	f006 ff9d 	bl	800a5c8 <sin>
 800368e:	ec53 2b10 	vmov	r2, r3, d0
 8003692:	4640      	mov	r0, r8
 8003694:	4649      	mov	r1, r9
 8003696:	f7fc fdaf 	bl	80001f8 <__aeabi_dsub>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fc ff61 	bl	8000568 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
				/ dt; //unit: m/s,
 80036ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b2:	f7fd f883 	bl	80007bc <__aeabi_ddiv>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd fa4b 	bl	8000b58 <__aeabi_d2f>
 80036c2:	4603      	mov	r3, r0
 80036c4:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 80036c6:	6938      	ldr	r0, [r7, #16]
 80036c8:	f7fc fef6 	bl	80004b8 <__aeabi_f2d>
 80036cc:	a320      	add	r3, pc, #128	; (adr r3, 8003750 <in_climb_process+0x210>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f7fd f873 	bl	80007bc <__aeabi_ddiv>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd fa3b 	bl	8000b58 <__aeabi_d2f>
 80036e2:	4603      	mov	r3, r0
 80036e4:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 80036e6:	edd7 0a04 	vldr	s1, [r7, #16]
 80036ea:	ed97 0a04 	vldr	s0, [r7, #16]
 80036ee:	f7fd fe8f 	bl	8001410 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <in_climb_process+0x21c>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <in_climb_process+0x220>)
 80036f8:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 80036fa:	f001 faf3 	bl	8004ce4 <HAL_GetTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <in_climb_process+0x224>)
 8003702:	6013      	str	r3, [r2, #0]
	{
 8003704:	e010      	b.n	8003728 <in_climb_process+0x1e8>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <in_climb_process+0x1e8>
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <in_climb_process+0x230>)
 800370e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003712:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	d105      	bne.n	8003728 <in_climb_process+0x1e8>
		send_HubMotor(0, 0);
 800371c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003780 <in_climb_process+0x240>
 8003720:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003780 <in_climb_process+0x240>
 8003724:	f7fd fe74 	bl	8001410 <send_HubMotor>

	if (!is_lifting)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	f083 0301 	eor.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <in_climb_process+0x1fa>
		first_loop = true;
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <in_climb_process+0x218>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 800373a:	7dfb      	ldrb	r3, [r7, #23]

}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003746:	bf00      	nop
 8003748:	54442d18 	.word	0x54442d18
 800374c:	400921fb 	.word	0x400921fb
 8003750:	916872b0 	.word	0x916872b0
 8003754:	3faf7ced 	.word	0x3faf7ced
 8003758:	20000129 	.word	0x20000129
 800375c:	20000360 	.word	0x20000360
 8003760:	2000022c 	.word	0x2000022c
 8003764:	20000230 	.word	0x20000230
 8003768:	200004c4 	.word	0x200004c4
 800376c:	20000510 	.word	0x20000510
 8003770:	200001c8 	.word	0x200001c8
 8003774:	447a0000 	.word	0x447a0000
 8003778:	3eb2b021 	.word	0x3eb2b021
 800377c:	40668000 	.word	0x40668000
 8003780:	00000000 	.word	0x00000000

08003784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 8003788:	2100      	movs	r1, #0
 800378a:	4808      	ldr	r0, [pc, #32]	; (80037ac <Error_Handler+0x28>)
 800378c:	f004 fb4e 	bl	8007e2c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 8003790:	2104      	movs	r1, #4
 8003792:	4806      	ldr	r0, [pc, #24]	; (80037ac <Error_Handler+0x28>)
 8003794:	f004 fb4a 	bl	8007e2c <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 8003798:	2101      	movs	r1, #1
 800379a:	4805      	ldr	r0, [pc, #20]	; (80037b0 <Error_Handler+0x2c>)
 800379c:	f7fd ffb4 	bl	8001708 <brakeMotor>
	brakeMotor(&backMotor, 1);
 80037a0:	2101      	movs	r1, #1
 80037a2:	4803      	ldr	r0, [pc, #12]	; (80037b0 <Error_Handler+0x2c>)
 80037a4:	f7fd ffb0 	bl	8001708 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000554 	.word	0x20000554
 80037b0:	20000034 	.word	0x20000034

080037b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <MX_SPI1_Init+0x68>)
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <MX_SPI1_Init+0x6c>)
 80037bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <MX_SPI1_Init+0x68>)
 80037c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <MX_SPI1_Init+0x68>)
 80037c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <MX_SPI1_Init+0x68>)
 80037d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <MX_SPI1_Init+0x68>)
 80037d8:	2202      	movs	r2, #2
 80037da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <MX_SPI1_Init+0x68>)
 80037de:	2200      	movs	r2, #0
 80037e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <MX_SPI1_Init+0x68>)
 80037e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <MX_SPI1_Init+0x68>)
 80037ec:	2228      	movs	r2, #40	; 0x28
 80037ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <MX_SPI1_Init+0x68>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <MX_SPI1_Init+0x68>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <MX_SPI1_Init+0x68>)
 80037fe:	2200      	movs	r2, #0
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <MX_SPI1_Init+0x68>)
 8003804:	220a      	movs	r2, #10
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003808:	4804      	ldr	r0, [pc, #16]	; (800381c <MX_SPI1_Init+0x68>)
 800380a:	f003 fe2d 	bl	8007468 <HAL_SPI_Init>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003814:	f7ff ffb6 	bl	8003784 <Error_Handler>
  }

}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000260 	.word	0x20000260
 8003820:	40013000 	.word	0x40013000

08003824 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_SPI_MspInit+0x84>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d12b      	bne.n	800389e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_SPI_MspInit+0x88>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_SPI_MspInit+0x88>)
 8003850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003854:	6453      	str	r3, [r2, #68]	; 0x44
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_SPI_MspInit+0x88>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_SPI_MspInit+0x88>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a10      	ldr	r2, [pc, #64]	; (80038ac <HAL_SPI_MspInit+0x88>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_SPI_MspInit+0x88>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800387e:	2360      	movs	r3, #96	; 0x60
 8003880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003882:	2302      	movs	r3, #2
 8003884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388a:	2303      	movs	r3, #3
 800388c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800388e:	2305      	movs	r3, #5
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	4619      	mov	r1, r3
 8003898:	4805      	ldr	r0, [pc, #20]	; (80038b0 <HAL_SPI_MspInit+0x8c>)
 800389a:	f002 fd75 	bl	8006388 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800389e:	bf00      	nop
 80038a0:	3728      	adds	r7, #40	; 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40013000 	.word	0x40013000
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020000 	.word	0x40020000

080038b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_MspInit+0x4c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_MspInit+0x4c>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_MspInit+0x4c>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_MspInit+0x4c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_MspInit+0x4c>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_MspInit+0x4c>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003916:	e7fe      	b.n	8003916 <HardFault_Handler+0x4>

08003918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800391c:	e7fe      	b.n	800391c <MemManage_Handler+0x4>

0800391e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800391e:	b480      	push	{r7}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003922:	e7fe      	b.n	8003922 <BusFault_Handler+0x4>

08003924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <UsageFault_Handler+0x4>

0800392a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003958:	f001 f9b0 	bl	8004cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	bd80      	pop	{r7, pc}

08003960 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003964:	4802      	ldr	r0, [pc, #8]	; (8003970 <DMA1_Stream1_IRQHandler+0x10>)
 8003966:	f002 faa5 	bl	8005eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000614 	.word	0x20000614

08003974 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003978:	4802      	ldr	r0, [pc, #8]	; (8003984 <DMA1_Stream3_IRQHandler+0x10>)
 800397a:	f002 fa9b 	bl	8005eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200006b4 	.word	0x200006b4

08003988 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <CAN1_RX0_IRQHandler+0x10>)
 800398e:	f001 fe0c 	bl	80055aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200002b8 	.word	0x200002b8

0800399c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80039a0:	2080      	movs	r0, #128	; 0x80
 80039a2:	f002 fecf 	bl	8006744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <USART3_IRQHandler+0x10>)
 80039b2:	f005 fd13 	bl	80093dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000674 	.word	0x20000674

080039c0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80039c6:	f004 fb27 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000514 	.word	0x20000514

080039d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80039da:	f004 fb1d 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000514 	.word	0x20000514

080039e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80039ee:	f004 fb13 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000514 	.word	0x20000514

080039fc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <TIM8_CC_IRQHandler+0x10>)
 8003a02:	f004 fb09 	bl	8008018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000514 	.word	0x20000514

08003a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <SystemInit+0x28>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <SystemInit+0x28>)
 8003a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <SystemInit+0x28>)
 8003a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b096      	sub	sp, #88	; 0x58
 8003a40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	615a      	str	r2, [r3, #20]
 8003a6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	2220      	movs	r2, #32
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f006 fba3 	bl	800a1c0 <memset>

  htim1.Instance = TIM1;
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003a7c:	4a3e      	ldr	r2, [pc, #248]	; (8003b78 <MX_TIM1_Init+0x13c>)
 8003a7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003a80:	4b3c      	ldr	r3, [pc, #240]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003a82:	22b3      	movs	r2, #179	; 0xb3
 8003a84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003a8e:	2263      	movs	r2, #99	; 0x63
 8003a90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9e:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003aa4:	4833      	ldr	r0, [pc, #204]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003aa6:	f004 f8ff 	bl	8007ca8 <HAL_TIM_Base_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003ab0:	f7ff fe68 	bl	8003784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003aba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003abe:	4619      	mov	r1, r3
 8003ac0:	482c      	ldr	r0, [pc, #176]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003ac2:	f004 fd13 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003acc:	f7ff fe5a 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ad0:	4828      	ldr	r0, [pc, #160]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003ad2:	f004 f938 	bl	8007d46 <HAL_TIM_PWM_Init>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003adc:	f7ff fe52 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aec:	4619      	mov	r1, r3
 8003aee:	4821      	ldr	r0, [pc, #132]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003af0:	f005 fa2c 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003afa:	f7ff fe43 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003afe:	2360      	movs	r3, #96	; 0x60
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b1e:	2204      	movs	r2, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4814      	ldr	r0, [pc, #80]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003b24:	f004 fc1c 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003b2e:	f7ff fe29 	bl	8003784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4807      	ldr	r0, [pc, #28]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003b56:	f005 fa75 	bl	8009044 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003b60:	f7ff fe10 	bl	8003784 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <MX_TIM1_Init+0x138>)
 8003b66:	f000 fa1b 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8003b6a:	bf00      	nop
 8003b6c:	3758      	adds	r7, #88	; 0x58
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000594 	.word	0x20000594
 8003b78:	40010000 	.word	0x40010000

08003b7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08e      	sub	sp, #56	; 0x38
 8003b80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b90:	f107 0320 	add.w	r3, r7, #32
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
 8003ba8:	615a      	str	r2, [r3, #20]
 8003baa:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bb6:	2259      	movs	r2, #89	; 0x59
 8003bb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bc2:	2263      	movs	r2, #99	; 0x63
 8003bc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bd2:	4823      	ldr	r0, [pc, #140]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bd4:	f004 f868 	bl	8007ca8 <HAL_TIM_Base_Init>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003bde:	f7ff fdd1 	bl	8003784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bec:	4619      	mov	r1, r3
 8003bee:	481c      	ldr	r0, [pc, #112]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003bf0:	f004 fc7c 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003bfa:	f7ff fdc3 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bfe:	4818      	ldr	r0, [pc, #96]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003c00:	f004 f8a1 	bl	8007d46 <HAL_TIM_PWM_Init>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003c0a:	f7ff fdbb 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c16:	f107 0320 	add.w	r3, r7, #32
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4810      	ldr	r0, [pc, #64]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003c1e:	f005 f995 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003c28:	f7ff fdac 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c2c:	2360      	movs	r3, #96	; 0x60
 8003c2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	2208      	movs	r2, #8
 8003c40:	4619      	mov	r1, r3
 8003c42:	4807      	ldr	r0, [pc, #28]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003c44:	f004 fb8c 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003c4e:	f7ff fd99 	bl	8003784 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003c52:	4803      	ldr	r0, [pc, #12]	; (8003c60 <MX_TIM2_Init+0xe4>)
 8003c54:	f000 f9a4 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8003c58:	bf00      	nop
 8003c5a:	3738      	adds	r7, #56	; 0x38
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	200005d4 	.word	0x200005d4

08003c64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08e      	sub	sp, #56	; 0x38
 8003c68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c78:	f107 0320 	add.w	r3, r7, #32
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
 8003c90:	615a      	str	r2, [r3, #20]
 8003c92:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003c96:	4a33      	ldr	r2, [pc, #204]	; (8003d64 <MX_TIM3_Init+0x100>)
 8003c98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003c9c:	2259      	movs	r2, #89	; 0x59
 8003c9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003ca8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003cac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cae:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003cba:	4829      	ldr	r0, [pc, #164]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003cbc:	f003 fff4 	bl	8007ca8 <HAL_TIM_Base_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003cc6:	f7ff fd5d 	bl	8003784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4822      	ldr	r0, [pc, #136]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003cd8:	f004 fc08 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003ce2:	f7ff fd4f 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ce6:	481e      	ldr	r0, [pc, #120]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003ce8:	f004 f82d 	bl	8007d46 <HAL_TIM_PWM_Init>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003cf2:	f7ff fd47 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cfe:	f107 0320 	add.w	r3, r7, #32
 8003d02:	4619      	mov	r1, r3
 8003d04:	4816      	ldr	r0, [pc, #88]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003d06:	f005 f921 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003d10:	f7ff fd38 	bl	8003784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d14:	2360      	movs	r3, #96	; 0x60
 8003d16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003d18:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003d1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	480c      	ldr	r0, [pc, #48]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003d2e:	f004 fb17 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003d38:	f7ff fd24 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	2204      	movs	r2, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4807      	ldr	r0, [pc, #28]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003d44:	f004 fb0c 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d4e:	f7ff fd19 	bl	8003784 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003d52:	4803      	ldr	r0, [pc, #12]	; (8003d60 <MX_TIM3_Init+0xfc>)
 8003d54:	f000 f924 	bl	8003fa0 <HAL_TIM_MspPostInit>

}
 8003d58:	bf00      	nop
 8003d5a:	3738      	adds	r7, #56	; 0x38
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000554 	.word	0x20000554
 8003d64:	40000400 	.word	0x40000400

08003d68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d6e:	f107 0318 	add.w	r3, r7, #24
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d7c:	f107 0310 	add.w	r3, r7, #16
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d86:	463b      	mov	r3, r7
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003d94:	4a2d      	ldr	r2, [pc, #180]	; (8003e4c <MX_TIM8_Init+0xe4>)
 8003d96:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003d9a:	2259      	movs	r2, #89	; 0x59
 8003d9c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003daa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dac:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003db2:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003dbe:	4822      	ldr	r0, [pc, #136]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003dc0:	f003 ff72 	bl	8007ca8 <HAL_TIM_Base_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8003dca:	f7ff fcdb 	bl	8003784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dd2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003dd4:	f107 0318 	add.w	r3, r7, #24
 8003dd8:	4619      	mov	r1, r3
 8003dda:	481b      	ldr	r0, [pc, #108]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003ddc:	f004 fb86 	bl	80084ec <HAL_TIM_ConfigClockSource>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003de6:	f7ff fccd 	bl	8003784 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8003dea:	4817      	ldr	r0, [pc, #92]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003dec:	f004 f876 	bl	8007edc <HAL_TIM_IC_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8003df6:	f7ff fcc5 	bl	8003784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e02:	f107 0310 	add.w	r3, r7, #16
 8003e06:	4619      	mov	r1, r3
 8003e08:	480f      	ldr	r0, [pc, #60]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003e0a:	f005 f89f 	bl	8008f4c <HAL_TIMEx_MasterConfigSynchronization>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8003e14:	f7ff fcb6 	bl	8003784 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003e28:	463b      	mov	r3, r7
 8003e2a:	220c      	movs	r2, #12
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4806      	ldr	r0, [pc, #24]	; (8003e48 <MX_TIM8_Init+0xe0>)
 8003e30:	f004 f9fa 	bl	8008228 <HAL_TIM_IC_ConfigChannel>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003e3a:	f7ff fca3 	bl	8003784 <Error_Handler>
  }

}
 8003e3e:	bf00      	nop
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000514 	.word	0x20000514
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	; 0x30
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a47      	ldr	r2, [pc, #284]	; (8003f8c <HAL_TIM_Base_MspInit+0x13c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	4a45      	ldr	r2, [pc, #276]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6453      	str	r3, [r2, #68]	; 0x44
 8003e82:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003e8e:	e079      	b.n	8003f84 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	4b3c      	ldr	r3, [pc, #240]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a3b      	ldr	r2, [pc, #236]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]
}
 8003eb6:	e065      	b.n	8003f84 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a35      	ldr	r2, [pc, #212]	; (8003f94 <HAL_TIM_Base_MspInit+0x144>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a31      	ldr	r2, [pc, #196]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
}
 8003ede:	e051      	b.n	8003f84 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <HAL_TIM_Base_MspInit+0x148>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d14c      	bne.n	8003f84 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003ef4:	f043 0302 	orr.w	r3, r3, #2
 8003ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8003efa:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a20      	ldr	r2, [pc, #128]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_TIM_Base_MspInit+0x140>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f34:	2303      	movs	r3, #3
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4817      	ldr	r0, [pc, #92]	; (8003f9c <HAL_TIM_Base_MspInit+0x14c>)
 8003f40:	f002 fa22 	bl	8006388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	202b      	movs	r0, #43	; 0x2b
 8003f4a:	f001 fe38 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f4e:	202b      	movs	r0, #43	; 0x2b
 8003f50:	f001 fe51 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f54:	2200      	movs	r2, #0
 8003f56:	2100      	movs	r1, #0
 8003f58:	202c      	movs	r0, #44	; 0x2c
 8003f5a:	f001 fe30 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003f5e:	202c      	movs	r0, #44	; 0x2c
 8003f60:	f001 fe49 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	202d      	movs	r0, #45	; 0x2d
 8003f6a:	f001 fe28 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003f6e:	202d      	movs	r0, #45	; 0x2d
 8003f70:	f001 fe41 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	202e      	movs	r0, #46	; 0x2e
 8003f7a:	f001 fe20 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003f7e:	202e      	movs	r0, #46	; 0x2e
 8003f80:	f001 fe39 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 8003f84:	bf00      	nop
 8003f86:	3730      	adds	r7, #48	; 0x30
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40020800 	.word	0x40020800

08003fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a37      	ldr	r2, [pc, #220]	; (800409c <HAL_TIM_MspPostInit+0xfc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d11f      	bne.n	8004002 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8003fcc:	f043 0310 	orr.w	r3, r3, #16
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8003fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fec:	2300      	movs	r3, #0
 8003fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	482a      	ldr	r0, [pc, #168]	; (80040a4 <HAL_TIM_MspPostInit+0x104>)
 8003ffc:	f002 f9c4 	bl	8006388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004000:	e047      	b.n	8004092 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d11f      	bne.n	800404c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	6313      	str	r3, [r2, #48]	; 0x30
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8004028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004036:	2300      	movs	r3, #0
 8004038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800403a:	2301      	movs	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	4619      	mov	r1, r3
 8004044:	4818      	ldr	r0, [pc, #96]	; (80040a8 <HAL_TIM_MspPostInit+0x108>)
 8004046:	f002 f99f 	bl	8006388 <HAL_GPIO_Init>
}
 800404a:	e022      	b.n	8004092 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	; (80040ac <HAL_TIM_MspPostInit+0x10c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d11d      	bne.n	8004092 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a10      	ldr	r2, [pc, #64]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_TIM_MspPostInit+0x100>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8004072:	23c0      	movs	r3, #192	; 0xc0
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004082:	2302      	movs	r3, #2
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	4808      	ldr	r0, [pc, #32]	; (80040b0 <HAL_TIM_MspPostInit+0x110>)
 800408e:	f002 f97b 	bl	8006388 <HAL_GPIO_Init>
}
 8004092:	bf00      	nop
 8004094:	3728      	adds	r7, #40	; 0x28
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40020400 	.word	0x40020400
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40020800 	.word	0x40020800

080040b4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <MX_USART3_UART_Init+0x50>)
 80040bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040da:	220c      	movs	r2, #12
 80040dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040ea:	4805      	ldr	r0, [pc, #20]	; (8004100 <MX_USART3_UART_Init+0x4c>)
 80040ec:	f005 f810 	bl	8009110 <HAL_UART_Init>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040f6:	f7ff fb45 	bl	8003784 <Error_Handler>
  }

}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000674 	.word	0x20000674
 8004104:	40004800 	.word	0x40004800

08004108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4c      	ldr	r2, [pc, #304]	; (8004258 <HAL_UART_MspInit+0x150>)
 8004126:	4293      	cmp	r3, r2
 8004128:	f040 8091 	bne.w	800424e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	4b4a      	ldr	r3, [pc, #296]	; (800425c <HAL_UART_MspInit+0x154>)
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_UART_MspInit+0x154>)
 8004136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800413a:	6413      	str	r3, [r2, #64]	; 0x40
 800413c:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_UART_MspInit+0x154>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_UART_MspInit+0x154>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	4a42      	ldr	r2, [pc, #264]	; (800425c <HAL_UART_MspInit+0x154>)
 8004152:	f043 0308 	orr.w	r3, r3, #8
 8004156:	6313      	str	r3, [r2, #48]	; 0x30
 8004158:	4b40      	ldr	r3, [pc, #256]	; (800425c <HAL_UART_MspInit+0x154>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8004164:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416a:	2302      	movs	r3, #2
 800416c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004172:	2303      	movs	r3, #3
 8004174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004176:	2307      	movs	r3, #7
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	4619      	mov	r1, r3
 8004180:	4837      	ldr	r0, [pc, #220]	; (8004260 <HAL_UART_MspInit+0x158>)
 8004182:	f002 f901 	bl	8006388 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_UART_MspInit+0x15c>)
 8004188:	4a37      	ldr	r2, [pc, #220]	; (8004268 <HAL_UART_MspInit+0x160>)
 800418a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_UART_MspInit+0x15c>)
 800418e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004192:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004194:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_UART_MspInit+0x15c>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800419a:	4b32      	ldr	r3, [pc, #200]	; (8004264 <HAL_UART_MspInit+0x15c>)
 800419c:	2200      	movs	r2, #0
 800419e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041a8:	4b2e      	ldr	r3, [pc, #184]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041c0:	4b28      	ldr	r3, [pc, #160]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80041c6:	4827      	ldr	r0, [pc, #156]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041c8:	f001 fd4c 	bl	8005c64 <HAL_DMA_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80041d2:	f7ff fad7 	bl	8003784 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041da:	635a      	str	r2, [r3, #52]	; 0x34
 80041dc:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_UART_MspInit+0x15c>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80041e2:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_UART_MspInit+0x164>)
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_UART_MspInit+0x168>)
 80041e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <HAL_UART_MspInit+0x164>)
 80041ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041f0:	4b1e      	ldr	r3, [pc, #120]	; (800426c <HAL_UART_MspInit+0x164>)
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_UART_MspInit+0x164>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <HAL_UART_MspInit+0x164>)
 80041fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004202:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <HAL_UART_MspInit+0x164>)
 8004206:	2200      	movs	r2, #0
 8004208:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <HAL_UART_MspInit+0x164>)
 800420c:	2200      	movs	r2, #0
 800420e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <HAL_UART_MspInit+0x164>)
 8004212:	2200      	movs	r2, #0
 8004214:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_UART_MspInit+0x164>)
 8004218:	2200      	movs	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <HAL_UART_MspInit+0x164>)
 800421e:	2200      	movs	r2, #0
 8004220:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004222:	4812      	ldr	r0, [pc, #72]	; (800426c <HAL_UART_MspInit+0x164>)
 8004224:	f001 fd1e 	bl	8005c64 <HAL_DMA_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800422e:	f7ff faa9 	bl	8003784 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a0d      	ldr	r2, [pc, #52]	; (800426c <HAL_UART_MspInit+0x164>)
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
 8004238:	4a0c      	ldr	r2, [pc, #48]	; (800426c <HAL_UART_MspInit+0x164>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	2027      	movs	r0, #39	; 0x27
 8004244:	f001 fcbb 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004248:	2027      	movs	r0, #39	; 0x27
 800424a:	f001 fcd4 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800424e:	bf00      	nop
 8004250:	3728      	adds	r7, #40	; 0x28
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40004800 	.word	0x40004800
 800425c:	40023800 	.word	0x40023800
 8004260:	40020c00 	.word	0x40020c00
 8004264:	20000614 	.word	0x20000614
 8004268:	40026028 	.word	0x40026028
 800426c:	200006b4 	.word	0x200006b4
 8004270:	40026058 	.word	0x40026058

08004274 <joystick_Init>:
static const float JoyTurnAngleDeadzone = 0.2;

static const float JoyLeftTurnAngle = 3.142;
static const float JoyRightTurnAngle = 0;

void joystick_Init(void){
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8004278:	2228      	movs	r2, #40	; 0x28
 800427a:	2100      	movs	r1, #0
 800427c:	4802      	ldr	r0, [pc, #8]	; (8004288 <joystick_Init+0x14>)
 800427e:	f005 ff9f 	bl	800a1c0 <memset>
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000234 	.word	0x20000234
 800428c:	00000000 	.word	0x00000000

08004290 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8004290:	b5b0      	push	{r4, r5, r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <joystickCalculatePos+0x88>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2205      	movs	r2, #5
 800429c:	4293      	cmp	r3, r2
 800429e:	d102      	bne.n	80042a6 <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <joystickCalculatePos+0x88>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <joystickCalculatePos+0x8c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	da05      	bge.n	80042ba <joystickCalculatePos+0x2a>
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <joystickCalculatePos+0x8c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042b6:	4413      	add	r3, r2
 80042b8:	e004      	b.n	80042c4 <joystickCalculatePos+0x34>
 80042ba:	4b18      	ldr	r3, [pc, #96]	; (800431c <joystickCalculatePos+0x8c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	4a15      	ldr	r2, [pc, #84]	; (800431c <joystickCalculatePos+0x8c>)
 80042c6:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <joystickCalculatePos+0x90>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	dd05      	ble.n	80042dc <joystickCalculatePos+0x4c>
 80042d0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <joystickCalculatePos+0x90>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	e005      	b.n	80042e8 <joystickCalculatePos+0x58>
 80042dc:	4b10      	ldr	r3, [pc, #64]	; (8004320 <joystickCalculatePos+0x90>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	425b      	negs	r3, r3
 80042e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <joystickCalculatePos+0x90>)
 80042ea:	6013      	str	r3, [r2, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <joystickCalculatePos+0x88>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	; (800431c <joystickCalculatePos+0x8c>)
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	490b      	ldr	r1, [pc, #44]	; (8004324 <joystickCalculatePos+0x94>)
 80042f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <joystickCalculatePos+0x88>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <joystickCalculatePos+0x90>)
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <joystickCalculatePos+0x94>)
 8004304:	3305      	adds	r3, #5
 8004306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	e019      	b.n	800434c <joystickCalculatePos+0xbc>
 8004318:	2000025c 	.word	0x2000025c
 800431c:	2000050c 	.word	0x2000050c
 8004320:	20000410 	.word	0x20000410
 8004324:	20000234 	.word	0x20000234
  {
    sum_x += joyPosBuffer[0][i];
 8004328:	4acf      	ldr	r2, [pc, #828]	; (8004668 <joystickCalculatePos+0x3d8>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 8004336:	4acc      	ldr	r2, [pc, #816]	; (8004668 <joystickCalculatePos+0x3d8>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3305      	adds	r3, #5
 800433c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	4413      	add	r3, r2
 8004344:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3301      	adds	r3, #1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	2205      	movs	r2, #5
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4293      	cmp	r3, r2
 8004352:	dbe9      	blt.n	8004328 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 8004354:	2205      	movs	r2, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	fb93 f3f2 	sdiv	r3, r3, r2
 800435c:	b21a      	sxth	r2, r3
 800435e:	4bc3      	ldr	r3, [pc, #780]	; (800466c <joystickCalculatePos+0x3dc>)
 8004360:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 8004362:	2205      	movs	r2, #5
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	fb93 f3f2 	sdiv	r3, r3, r2
 800436a:	b21a      	sxth	r2, r3
 800436c:	4bbf      	ldr	r3, [pc, #764]	; (800466c <joystickCalculatePos+0x3dc>)
 800436e:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 8004370:	4bbe      	ldr	r3, [pc, #760]	; (800466c <joystickCalculatePos+0x3dc>)
 8004372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f88c 	bl	8000494 <__aeabi_i2d>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8004658 <joystickCalculatePos+0x3c8>
 8004384:	ec43 2b10 	vmov	d0, r2, r3
 8004388:	f006 f9ae 	bl	800a6e8 <pow>
 800438c:	ec55 4b10 	vmov	r4, r5, d0
 8004390:	4bb6      	ldr	r3, [pc, #728]	; (800466c <joystickCalculatePos+0x3dc>)
 8004392:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f87c 	bl	8000494 <__aeabi_i2d>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8004658 <joystickCalculatePos+0x3c8>
 80043a4:	ec43 2b10 	vmov	d0, r2, r3
 80043a8:	f006 f99e 	bl	800a6e8 <pow>
 80043ac:	ec53 2b10 	vmov	r2, r3, d0
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fb ff22 	bl	80001fc <__adddf3>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	ec43 2b17 	vmov	d7, r2, r3
 80043c0:	eeb0 0a47 	vmov.f32	s0, s14
 80043c4:	eef0 0a67 	vmov.f32	s1, s15
 80043c8:	f006 fa3c 	bl	800a844 <sqrt>
 80043cc:	ec53 2b10 	vmov	r2, r3, d0
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7fc fbc0 	bl	8000b58 <__aeabi_d2f>
 80043d8:	4603      	mov	r3, r0
 80043da:	4aa4      	ldr	r2, [pc, #656]	; (800466c <joystickCalculatePos+0x3dc>)
 80043dc:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 80043de:	4ba3      	ldr	r3, [pc, #652]	; (800466c <joystickCalculatePos+0x3dc>)
 80043e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc f855 	bl	8000494 <__aeabi_i2d>
 80043ea:	4604      	mov	r4, r0
 80043ec:	460d      	mov	r5, r1
 80043ee:	4b9f      	ldr	r3, [pc, #636]	; (800466c <joystickCalculatePos+0x3dc>)
 80043f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc f84d 	bl	8000494 <__aeabi_i2d>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	ec43 2b11 	vmov	d1, r2, r3
 8004402:	ec45 4b10 	vmov	d0, r4, r5
 8004406:	f006 f96d 	bl	800a6e4 <atan2>
 800440a:	ec53 2b10 	vmov	r2, r3, d0
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	f7fc fba1 	bl	8000b58 <__aeabi_d2f>
 8004416:	4603      	mov	r3, r0
 8004418:	4a94      	ldr	r2, [pc, #592]	; (800466c <joystickCalculatePos+0x3dc>)
 800441a:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 800441c:	4b93      	ldr	r3, [pc, #588]	; (800466c <joystickCalculatePos+0x3dc>)
 800441e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004422:	eddf 7a93 	vldr	s15, [pc, #588]	; 8004670 <joystickCalculatePos+0x3e0>
 8004426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	dd06      	ble.n	8004442 <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 8004434:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8004670 <joystickCalculatePos+0x3e0>
 8004438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443c:	4b8b      	ldr	r3, [pc, #556]	; (800466c <joystickCalculatePos+0x3dc>)
 800443e:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004442:	4b8a      	ldr	r3, [pc, #552]	; (800466c <joystickCalculatePos+0x3dc>)
 8004444:	ed93 7a02 	vldr	s14, [r3, #8]
 8004448:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004674 <joystickCalculatePos+0x3e4>
 800444c:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8004678 <joystickCalculatePos+0x3e8>
 8004450:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445c:	dd10      	ble.n	8004480 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 800445e:	4b83      	ldr	r3, [pc, #524]	; (800466c <joystickCalculatePos+0x3dc>)
 8004460:	ed93 7a02 	vldr	s14, [r3, #8]
 8004464:	eddf 6a83 	vldr	s13, [pc, #524]	; 8004674 <joystickCalculatePos+0x3e4>
 8004468:	eddf 7a83 	vldr	s15, [pc, #524]	; 8004678 <joystickCalculatePos+0x3e8>
 800446c:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	d502      	bpl.n	8004480 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 800447a:	4a80      	ldr	r2, [pc, #512]	; (800467c <joystickCalculatePos+0x3ec>)
 800447c:	4b7b      	ldr	r3, [pc, #492]	; (800466c <joystickCalculatePos+0x3dc>)
 800447e:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8004480:	4b7a      	ldr	r3, [pc, #488]	; (800466c <joystickCalculatePos+0x3dc>)
 8004482:	ed93 7a02 	vldr	s14, [r3, #8]
 8004486:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8004674 <joystickCalculatePos+0x3e4>
 800448a:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8004678 <joystickCalculatePos+0x3e8>
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef1 7a67 	vneg.f32	s15, s15
 8004496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	dd16      	ble.n	80044ce <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 80044a0:	4b72      	ldr	r3, [pc, #456]	; (800466c <joystickCalculatePos+0x3dc>)
 80044a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80044a6:	eddf 6a73 	vldr	s13, [pc, #460]	; 8004674 <joystickCalculatePos+0x3e4>
 80044aa:	eddf 7a73 	vldr	s15, [pc, #460]	; 8004678 <joystickCalculatePos+0x3e8>
 80044ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044b2:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80044b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044be:	d506      	bpl.n	80044ce <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 80044c0:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8004674 <joystickCalculatePos+0x3e4>
 80044c4:	eef1 7a67 	vneg.f32	s15, s15
 80044c8:	4b68      	ldr	r3, [pc, #416]	; (800466c <joystickCalculatePos+0x3dc>)
 80044ca:	edc3 7a02 	vstr	s15, [r3, #8]

  // filter joystick right turn deadzone
	if (hJoystick.angle > JoyRightTurnAngle - JoyTurnAngleDeadzone &&
 80044ce:	4b67      	ldr	r3, [pc, #412]	; (800466c <joystickCalculatePos+0x3dc>)
 80044d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80044d4:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004680 <joystickCalculatePos+0x3f0>
 80044d8:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8004684 <joystickCalculatePos+0x3f4>
 80044dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	dd11      	ble.n	800450e <joystickCalculatePos+0x27e>
		hJoystick.angle < JoyRightTurnAngle + JoyTurnAngleDeadzone)
 80044ea:	4b60      	ldr	r3, [pc, #384]	; (800466c <joystickCalculatePos+0x3dc>)
 80044ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80044f0:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004680 <joystickCalculatePos+0x3f0>
 80044f4:	eddf 7a63 	vldr	s15, [pc, #396]	; 8004684 <joystickCalculatePos+0x3f4>
 80044f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (hJoystick.angle > JoyRightTurnAngle - JoyTurnAngleDeadzone &&
 80044fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	d503      	bpl.n	800450e <joystickCalculatePos+0x27e>
	  hJoystick.angle = JoyRightTurnAngle;
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	4b58      	ldr	r3, [pc, #352]	; (800466c <joystickCalculatePos+0x3dc>)
 800450c:	609a      	str	r2, [r3, #8]
  // filter joystick left turn deadzone
    if (hJoystick.angle > JoyLeftTurnAngle - JoyTurnAngleDeadzone ||
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <joystickCalculatePos+0x3dc>)
 8004510:	ed93 7a02 	vldr	s14, [r3, #8]
 8004514:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8004688 <joystickCalculatePos+0x3f8>
 8004518:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004684 <joystickCalculatePos+0x3f4>
 800451c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	dc0d      	bgt.n	8004546 <joystickCalculatePos+0x2b6>
        hJoystick.angle < -JoyLeftTurnAngle + JoyTurnAngleDeadzone)
 800452a:	4b50      	ldr	r3, [pc, #320]	; (800466c <joystickCalculatePos+0x3dc>)
 800452c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004530:	eddf 6a54 	vldr	s13, [pc, #336]	; 8004684 <joystickCalculatePos+0x3f4>
 8004534:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004688 <joystickCalculatePos+0x3f8>
 8004538:	ee76 7ae7 	vsub.f32	s15, s13, s15
    if (hJoystick.angle > JoyLeftTurnAngle - JoyTurnAngleDeadzone ||
 800453c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	d502      	bpl.n	800454c <joystickCalculatePos+0x2bc>
      hJoystick.angle = JoyLeftTurnAngle;
 8004546:	4a51      	ldr	r2, [pc, #324]	; (800468c <joystickCalculatePos+0x3fc>)
 8004548:	4b48      	ldr	r3, [pc, #288]	; (800466c <joystickCalculatePos+0x3dc>)
 800454a:	609a      	str	r2, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 800454c:	4b47      	ldr	r3, [pc, #284]	; (800466c <joystickCalculatePos+0x3dc>)
 800454e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004552:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004670 <joystickCalculatePos+0x3e0>
 8004556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800455a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800455e:	ee16 0a90 	vmov	r0, s13
 8004562:	f7fb ffa9 	bl	80004b8 <__aeabi_f2d>
 8004566:	4604      	mov	r4, r0
 8004568:	460d      	mov	r5, r1
 800456a:	4b40      	ldr	r3, [pc, #256]	; (800466c <joystickCalculatePos+0x3dc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb ffa2 	bl	80004b8 <__aeabi_f2d>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	ec43 2b10 	vmov	d0, r2, r3
 800457c:	f006 f824 	bl	800a5c8 <sin>
 8004580:	ec53 2b10 	vmov	r2, r3, d0
 8004584:	4620      	mov	r0, r4
 8004586:	4629      	mov	r1, r5
 8004588:	f7fb ffee 	bl	8000568 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4610      	mov	r0, r2
 8004592:	4619      	mov	r1, r3
 8004594:	f7fc fae0 	bl	8000b58 <__aeabi_d2f>
 8004598:	4603      	mov	r3, r0
 800459a:	4a34      	ldr	r2, [pc, #208]	; (800466c <joystickCalculatePos+0x3dc>)
 800459c:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <joystickCalculatePos+0x3dc>)
 80045a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80045a4:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004670 <joystickCalculatePos+0x3e0>
 80045a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045b0:	ee16 0a90 	vmov	r0, s13
 80045b4:	f7fb ff80 	bl	80004b8 <__aeabi_f2d>
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <joystickCalculatePos+0x3dc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ff79 	bl	80004b8 <__aeabi_f2d>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	ec43 2b10 	vmov	d0, r2, r3
 80045ce:	f005 ff9f 	bl	800a510 <cos>
 80045d2:	ec53 2b10 	vmov	r2, r3, d0
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb ffc5 	bl	8000568 <__aeabi_dmul>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7fc fab7 	bl	8000b58 <__aeabi_d2f>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <joystickCalculatePos+0x3dc>)
 80045ee:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <joystickCalculatePos+0x3dc>)
 80045f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80045f6:	eef0 7ae7 	vabs.f32	s15, s15
 80045fa:	ee17 0a90 	vmov	r0, s15
 80045fe:	f7fb ff5b 	bl	80004b8 <__aeabi_f2d>
 8004602:	a317      	add	r3, pc, #92	; (adr r3, 8004660 <joystickCalculatePos+0x3d0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fc fa20 	bl	8000a4c <__aeabi_dcmplt>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <joystickCalculatePos+0x38a>
    hJoystick.linear = 0;
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <joystickCalculatePos+0x3dc>)
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <joystickCalculatePos+0x3dc>)
 800461c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004620:	eef0 7ae7 	vabs.f32	s15, s15
 8004624:	ee17 0a90 	vmov	r0, s15
 8004628:	f7fb ff46 	bl	80004b8 <__aeabi_f2d>
 800462c:	a30c      	add	r3, pc, #48	; (adr r3, 8004660 <joystickCalculatePos+0x3d0>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fc fa0b 	bl	8000a4c <__aeabi_dcmplt>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <joystickCalculatePos+0x3b4>
    hJoystick.angular = 0;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <joystickCalculatePos+0x3dc>)
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 8004644:	4b12      	ldr	r3, [pc, #72]	; (8004690 <joystickCalculatePos+0x400>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <joystickCalculatePos+0x400>)
 800464c:	6013      	str	r3, [r2, #0]
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bdb0      	pop	{r4, r5, r7, pc}
 8004656:	bf00      	nop
 8004658:	00000000 	.word	0x00000000
 800465c:	40000000 	.word	0x40000000
 8004660:	9999999a 	.word	0x9999999a
 8004664:	3fa99999 	.word	0x3fa99999
 8004668:	20000234 	.word	0x20000234
 800466c:	20000714 	.word	0x20000714
 8004670:	00004650 	.word	0x00004650
 8004674:	3fc8f5c3 	.word	0x3fc8f5c3
 8004678:	3e99999a 	.word	0x3e99999a
 800467c:	3fc8f5c3 	.word	0x3fc8f5c3
 8004680:	00000000 	.word	0x00000000
 8004684:	3e4ccccd 	.word	0x3e4ccccd
 8004688:	40491687 	.word	0x40491687
 800468c:	40491687 	.word	0x40491687
 8004690:	2000025c 	.word	0x2000025c

08004694 <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	ed87 0a02 	vstr	s0, [r7, #8]
 80046a0:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 25)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b18      	cmp	r3, #24
 80046f6:	dc05      	bgt.n	8004704 <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]
    return;
 8004702:	e207      	b.n	8004b14 <wheel_Control+0x42c>
  }

  joystickCalculatePos();
 8004704:	f7ff fdc4 	bl	8004290 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fa07 	bl	8004b1c <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	edd3 7a02 	vldr	s15, [r3, #8]
 8004714:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d10a      	bne.n	8004734 <wheel_Control+0x4c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	edd3 7a03 	vldr	s15, [r3, #12]
 8004724:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	d102      	bne.n	8004734 <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 8004734:	4bc8      	ldr	r3, [pc, #800]	; (8004a58 <wheel_Control+0x370>)
 8004736:	ed93 7a01 	vldr	s14, [r3, #4]
 800473a:	eddf 7ac8 	vldr	s15, [pc, #800]	; 8004a5c <wheel_Control+0x374>
 800473e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	f340 8107 	ble.w	800495c <wheel_Control+0x274>
  {
    float left_speed_step = wheel->left_speed_step;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	617b      	str	r3, [r7, #20]
    float right_speed_step = wheel->right_speed_step;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	613b      	str	r3, [r7, #16]

    if (wheel->start_from_stationary)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7f1b      	ldrb	r3, [r3, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d072      	beq.n	8004848 <wheel_Control+0x160>
    {
    	//deadzone 25, speed up initial speed
      left_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	eef0 7ae7 	vabs.f32	s15, s15
 800476c:	ee17 0a90 	vmov	r0, s15
 8004770:	f7fb fea2 	bl	80004b8 <__aeabi_f2d>
 8004774:	4604      	mov	r4, r0
 8004776:	460d      	mov	r5, r1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb fe9b 	bl	80004b8 <__aeabi_f2d>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fc f817 	bl	80007bc <__aeabi_ddiv>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	4bb1      	ldr	r3, [pc, #708]	; (8004a60 <wheel_Control+0x378>)
 800479c:	f7fb fd2e 	bl	80001fc <__adddf3>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7fc f9d6 	bl	8000b58 <__aeabi_d2f>
 80047ac:	4603      	mov	r3, r0
 80047ae:	617b      	str	r3, [r7, #20]
      right_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	edd3 7a00 	vldr	s15, [r3]
 80047b6:	eef0 7ae7 	vabs.f32	s15, s15
 80047ba:	ee17 0a90 	vmov	r0, s15
 80047be:	f7fb fe7b 	bl	80004b8 <__aeabi_f2d>
 80047c2:	4604      	mov	r4, r0
 80047c4:	460d      	mov	r5, r1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb fe74 	bl	80004b8 <__aeabi_f2d>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	f7fb fff0 	bl	80007bc <__aeabi_ddiv>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	4b9d      	ldr	r3, [pc, #628]	; (8004a60 <wheel_Control+0x378>)
 80047ea:	f7fb fd07 	bl	80001fc <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	f7fc f9af 	bl	8000b58 <__aeabi_d2f>
 80047fa:	4603      	mov	r3, r0
 80047fc:	613b      	str	r3, [r7, #16]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	edd3 7a02 	vldr	s15, [r3, #8]
 8004804:	eeb0 7ae7 	vabs.f32	s14, s15
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	edd3 7a06 	vldr	s15, [r3, #24]
 800480e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004812:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481e:	dd13      	ble.n	8004848 <wheel_Control+0x160>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	edd3 7a03 	vldr	s15, [r3, #12]
 8004826:	eeb0 7ae7 	vabs.f32	s14, s15
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004830:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004834:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	dd02      	ble.n	8004848 <wheel_Control+0x160>
      {
	  wheel->start_from_stationary = false;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
      }
    }

    if (wheel->cur_l/wheel->pre_l < 0)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	edd3 6a00 	vldr	s13, [r3]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	ed93 7a02 	vldr	s14, [r3, #8]
 8004854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	d501      	bpl.n	8004866 <wheel_Control+0x17e>
    	left_speed_step = 50;
 8004862:	4b80      	ldr	r3, [pc, #512]	; (8004a64 <wheel_Control+0x37c>)
 8004864:	617b      	str	r3, [r7, #20]
    if (wheel->cur_r/wheel->pre_r < 0)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	edd3 6a01 	vldr	s13, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	d501      	bpl.n	8004884 <wheel_Control+0x19c>
        	right_speed_step = 50;
 8004880:	4b78      	ldr	r3, [pc, #480]	; (8004a64 <wheel_Control+0x37c>)
 8004882:	613b      	str	r3, [r7, #16]

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	ed93 7a00 	vldr	s14, [r3]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004894:	ed97 7a05 	vldr	s14, [r7, #20]
 8004898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	d50a      	bpl.n	80048b8 <wheel_Control+0x1d0>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80048a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80048ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	edc3 7a00 	vstr	s15, [r3]
 80048b6:	e01a      	b.n	80048ee <wheel_Control+0x206>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	ed93 7a00 	vldr	s14, [r3]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80048c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80048cc:	eef1 7a67 	vneg.f32	s15, s15
 80048d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	d509      	bpl.n	80048ee <wheel_Control+0x206>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80048e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80048e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80048fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8004902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d50a      	bpl.n	8004922 <wheel_Control+0x23a>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004912:	edd7 7a04 	vldr	s15, [r7, #16]
 8004916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004920:	e0a8      	b.n	8004a74 <wheel_Control+0x38c>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	ed93 7a01 	vldr	s14, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	edd3 7a03 	vldr	s15, [r3, #12]
 800492e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004932:	edd7 7a04 	vldr	s15, [r7, #16]
 8004936:	eef1 7a67 	vneg.f32	s15, s15
 800493a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	f140 8097 	bpl.w	8004a74 <wheel_Control+0x38c>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	ed93 7a03 	vldr	s14, [r3, #12]
 800494c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	edc3 7a01 	vstr	s15, [r3, #4]
 800495a:	e08b      	b.n	8004a74 <wheel_Control+0x38c>
//      wheel->cur_r = 0;

//    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
//    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
//
    float left_speed_step = 30;
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <wheel_Control+0x380>)
 800495e:	60fb      	str	r3, [r7, #12]
    float right_speed_step = 30;
 8004960:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <wheel_Control+0x380>)
 8004962:	60bb      	str	r3, [r7, #8]
//      wheel->cur_r = wheel->pre_r - right_speed_step;
//    else if (wheel->cur_r < -right_speed_step)
//      wheel->cur_r = wheel->pre_r + right_speed_step;
//    else
//      wheel->cur_r = 0;
    if (wheel->cur_l/wheel->pre_l < 0)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	edd3 6a00 	vldr	s13, [r3]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	d501      	bpl.n	8004982 <wheel_Control+0x29a>
    	left_speed_step = 50;
 800497e:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <wheel_Control+0x37c>)
 8004980:	60fb      	str	r3, [r7, #12]
    if (wheel->cur_r/wheel->pre_r < 0)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	edd3 6a01 	vldr	s13, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	ed93 7a03 	vldr	s14, [r3, #12]
 800498e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	d501      	bpl.n	80049a0 <wheel_Control+0x2b8>
    	right_speed_step = 50;
 800499c:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <wheel_Control+0x37c>)
 800499e:	60bb      	str	r3, [r7, #8]

    //Latency when sign change
    if (wheel->pre_l > left_speed_step)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80049a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80049aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	d50a      	bpl.n	80049ca <wheel_Control+0x2e2>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80049ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80049be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	edc3 7a00 	vstr	s15, [r3]
 80049c8:	e01a      	b.n	8004a00 <wheel_Control+0x318>
    else if (wheel->pre_l < -left_speed_step)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80049d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049d4:	eef1 7a67 	vneg.f32	s15, s15
 80049d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e0:	d50a      	bpl.n	80049f8 <wheel_Control+0x310>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80049e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	edc3 7a00 	vstr	s15, [r3]
 80049f6:	e003      	b.n	8004a00 <wheel_Control+0x318>
    else
      wheel->cur_l = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
    
    if (wheel->pre_r > right_speed_step)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a06:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d50a      	bpl.n	8004a2a <wheel_Control+0x342>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	edc3 7a01 	vstr	s15, [r3, #4]
 8004a28:	e024      	b.n	8004a74 <wheel_Control+0x38c>
    else if (wheel->pre_r < -right_speed_step)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a34:	eef1 7a67 	vneg.f32	s15, s15
 8004a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a40:	d514      	bpl.n	8004a6c <wheel_Control+0x384>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a48:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	edc3 7a01 	vstr	s15, [r3, #4]
 8004a56:	e00d      	b.n	8004a74 <wheel_Control+0x38c>
 8004a58:	20000714 	.word	0x20000714
 8004a5c:	00000bb8 	.word	0x00000bb8
 8004a60:	40390000 	.word	0x40390000
 8004a64:	42480000 	.word	0x42480000
 8004a68:	41f00000 	.word	0x41f00000
    else
      wheel->cur_r = 0;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	605a      	str	r2, [r3, #4]



  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	ed93 7a00 	vldr	s14, [r3]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a88:	dd03      	ble.n	8004a92 <wheel_Control+0x3aa>
    wheel->cur_l = wheel->max_linear_speed;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa6:	dd03      	ble.n	8004ab0 <wheel_Control+0x3c8>
    wheel->cur_r = wheel->max_linear_speed;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	ed93 7a00 	vldr	s14, [r3]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004abc:	eef1 7a67 	vneg.f32	s15, s15
 8004ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	d507      	bpl.n	8004ada <wheel_Control+0x3f2>
    wheel->cur_l = -wheel->max_linear_speed;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ad0:	eef1 7a67 	vneg.f32	s15, s15
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ae6:	eef1 7a67 	vneg.f32	s15, s15
 8004aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af2:	d507      	bpl.n	8004b04 <wheel_Control+0x41c>
    wheel->cur_r = -wheel->max_linear_speed;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	edd3 7a05 	vldr	s15, [r3, #20]
 8004afa:	eef1 7a67 	vneg.f32	s15, s15
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
  
}
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bdb0      	pop	{r4, r5, r7, pc}
 8004b1a:	bf00      	nop

08004b1c <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	ed93 7a05 	vldr	s14, [r3, #20]
 8004b2a:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <wheelCalculateSpeed+0xa4>)
 8004b2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b34:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b3e:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <wheelCalculateSpeed+0xa4>)
 8004b40:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b48:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8004b4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8004b5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough50
  // direct step to 0 if speed is small enough50
  if(fabs(wheel->cur_l) < 25)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	edd3 7a00 	vldr	s15, [r3]
 8004b76:	eef0 7ae7 	vabs.f32	s15, s15
 8004b7a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	d503      	bpl.n	8004b90 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 25)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b96:	eef0 7ae7 	vabs.f32	s15, s15
 8004b9a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d400      	bmi.n	8004baa <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004ba8:	e003      	b.n	8004bb2 <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	605a      	str	r2, [r3, #4]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000714 	.word	0x20000714

08004bc4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bfc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bca:	e003      	b.n	8004bd4 <LoopCopyDataInit>

08004bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bd2:	3104      	adds	r1, #4

08004bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bd4:	480b      	ldr	r0, [pc, #44]	; (8004c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bdc:	d3f6      	bcc.n	8004bcc <CopyDataInit>
  ldr  r2, =_sbss
 8004bde:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004be0:	e002      	b.n	8004be8 <LoopFillZerobss>

08004be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004be4:	f842 3b04 	str.w	r3, [r2], #4

08004be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bec:	d3f9      	bcc.n	8004be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bee:	f7fe ff0f 	bl	8003a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bf2:	f005 fac1 	bl	800a178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bf6:	f7fd fa6b 	bl	80020d0 <main>
  bx  lr    
 8004bfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004bfc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004c00:	0800cea0 	.word	0x0800cea0
  ldr  r0, =_sdata
 8004c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c08:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8004c0c:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8004c10:	2000072c 	.word	0x2000072c

08004c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c14:	e7fe      	b.n	8004c14 <ADC_IRQHandler>
	...

08004c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <HAL_Init+0x40>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <HAL_Init+0x40>)
 8004c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_Init+0x40>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <HAL_Init+0x40>)
 8004c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <HAL_Init+0x40>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a07      	ldr	r2, [pc, #28]	; (8004c58 <HAL_Init+0x40>)
 8004c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c40:	2003      	movs	r0, #3
 8004c42:	f000 ffb1 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c46:	2000      	movs	r0, #0
 8004c48:	f000 f808 	bl	8004c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c4c:	f7fe fe32 	bl	80038b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00

08004c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c64:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_InitTick+0x54>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_InitTick+0x58>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 ffc9 	bl	8005c12 <HAL_SYSTICK_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00e      	b.n	8004ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b0f      	cmp	r3, #15
 8004c8e:	d80a      	bhi.n	8004ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c90:	2200      	movs	r2, #0
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c98:	f000 ff91 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c9c:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <HAL_InitTick+0x5c>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	2000012c 	.word	0x2000012c
 8004cb4:	20000134 	.word	0x20000134
 8004cb8:	20000130 	.word	0x20000130

08004cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_IncTick+0x20>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_IncTick+0x24>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4413      	add	r3, r2
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_IncTick+0x24>)
 8004cce:	6013      	str	r3, [r2, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000134 	.word	0x20000134
 8004ce0:	20000728 	.word	0x20000728

08004ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <HAL_GetTick+0x14>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000728 	.word	0x20000728

08004cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d04:	f7ff ffee 	bl	8004ce4 <HAL_GetTick>
 8004d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d14:	d005      	beq.n	8004d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_Delay+0x44>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d22:	bf00      	nop
 8004d24:	f7ff ffde 	bl	8004ce4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d8f7      	bhi.n	8004d24 <HAL_Delay+0x28>
  {
  }
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000134 	.word	0x20000134

08004d44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0ed      	b.n	8004f32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc febc 	bl	8001ae0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0202 	bic.w	r2, r2, #2
 8004d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d78:	f7ff ffb4 	bl	8004ce4 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d7e:	e012      	b.n	8004da6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d80:	f7ff ffb0 	bl	8004ce4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b0a      	cmp	r3, #10
 8004d8c:	d90b      	bls.n	8004da6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2205      	movs	r2, #5
 8004d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0c5      	b.n	8004f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dc4:	f7ff ff8e 	bl	8004ce4 <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dca:	e012      	b.n	8004df2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dcc:	f7ff ff8a 	bl	8004ce4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b0a      	cmp	r3, #10
 8004dd8:	d90b      	bls.n	8004df2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2205      	movs	r2, #5
 8004dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e09f      	b.n	8004f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0e5      	beq.n	8004dcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7e1b      	ldrb	r3, [r3, #24]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d108      	bne.n	8004e1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e007      	b.n	8004e2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7e5b      	ldrb	r3, [r3, #25]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d108      	bne.n	8004e44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e007      	b.n	8004e54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7e9b      	ldrb	r3, [r3, #26]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d108      	bne.n	8004e6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0220 	orr.w	r2, r2, #32
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e007      	b.n	8004e7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0220 	bic.w	r2, r2, #32
 8004e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	7edb      	ldrb	r3, [r3, #27]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d108      	bne.n	8004e98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0210 	bic.w	r2, r2, #16
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e007      	b.n	8004ea8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0210 	orr.w	r2, r2, #16
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7f1b      	ldrb	r3, [r3, #28]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d108      	bne.n	8004ec2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e007      	b.n	8004ed2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0208 	bic.w	r2, r2, #8
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7f5b      	ldrb	r3, [r3, #29]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d108      	bne.n	8004eec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0204 	orr.w	r2, r2, #4
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	e007      	b.n	8004efc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0204 	bic.w	r2, r2, #4
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	1e5a      	subs	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d003      	beq.n	8004f62 <HAL_CAN_ConfigFilter+0x26>
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	f040 80be 	bne.w	80050de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f62:	4b65      	ldr	r3, [pc, #404]	; (80050f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004f64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f6c:	f043 0201 	orr.w	r2, r3, #1
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	431a      	orrs	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d123      	bne.n	800500c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fe6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3248      	adds	r2, #72	; 0x48
 8004fec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005000:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	3348      	adds	r3, #72	; 0x48
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d122      	bne.n	800505a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	431a      	orrs	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3248      	adds	r2, #72	; 0x48
 800503a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800504e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005050:	6979      	ldr	r1, [r7, #20]
 8005052:	3348      	adds	r3, #72	; 0x48
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	43db      	mvns	r3, r3
 800506c:	401a      	ands	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005074:	e007      	b.n	8005086 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	431a      	orrs	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43db      	mvns	r3, r3
 8005098:	401a      	ands	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80050a0:	e007      	b.n	80050b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050d0:	f023 0201 	bic.w	r2, r3, #1
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e006      	b.n	80050ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
  }
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40006400 	.word	0x40006400

080050fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d12e      	bne.n	800516e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005128:	f7ff fddc 	bl	8004ce4 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800512e:	e012      	b.n	8005156 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005130:	f7ff fdd8 	bl	8004ce4 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b0a      	cmp	r3, #10
 800513c:	d90b      	bls.n	8005156 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2205      	movs	r2, #5
 800514e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e012      	b.n	800517c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e006      	b.n	800517c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005198:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80051a2:	7ffb      	ldrb	r3, [r7, #31]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d003      	beq.n	80051b0 <HAL_CAN_AddTxMessage+0x2c>
 80051a8:	7ffb      	ldrb	r3, [r7, #31]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	f040 80b8 	bne.w	8005320 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80a0 	beq.w	8005310 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	0e1b      	lsrs	r3, r3, #24
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d907      	bls.n	80051f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e09e      	b.n	800532e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80051f0:	2201      	movs	r2, #1
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	409a      	lsls	r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10d      	bne.n	800521e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800520c:	68f9      	ldr	r1, [r7, #12]
 800520e:	6809      	ldr	r1, [r1, #0]
 8005210:	431a      	orrs	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3318      	adds	r3, #24
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	440b      	add	r3, r1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e00f      	b.n	800523e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005228:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005232:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3318      	adds	r3, #24
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	440b      	add	r3, r1
 800523c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	3318      	adds	r3, #24
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	440b      	add	r3, r1
 800524e:	3304      	adds	r3, #4
 8005250:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	7d1b      	ldrb	r3, [r3, #20]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d111      	bne.n	800527e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	3318      	adds	r3, #24
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	3318      	adds	r3, #24
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	440b      	add	r3, r1
 800527a:	3304      	adds	r3, #4
 800527c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3307      	adds	r3, #7
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	061a      	lsls	r2, r3, #24
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3306      	adds	r3, #6
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3305      	adds	r3, #5
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	4313      	orrs	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	3204      	adds	r2, #4
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	4610      	mov	r0, r2
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	6811      	ldr	r1, [r2, #0]
 80052a6:	ea43 0200 	orr.w	r2, r3, r0
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3303      	adds	r3, #3
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	061a      	lsls	r2, r3, #24
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3302      	adds	r3, #2
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3301      	adds	r3, #1
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	4313      	orrs	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	7812      	ldrb	r2, [r2, #0]
 80052d6:	4610      	mov	r0, r2
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	6811      	ldr	r1, [r2, #0]
 80052dc:	ea43 0200 	orr.w	r2, r3, r0
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3318      	adds	r3, #24
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	4413      	add	r3, r2
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	6811      	ldr	r1, [r2, #0]
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3318      	adds	r3, #24
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	440b      	add	r3, r1
 800530a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e00e      	b.n	800532e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e006      	b.n	800532e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3724      	adds	r7, #36	; 0x24
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800534e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d003      	beq.n	800535e <HAL_CAN_GetRxMessage+0x24>
 8005356:	7dfb      	ldrb	r3, [r7, #23]
 8005358:	2b02      	cmp	r3, #2
 800535a:	f040 80f3 	bne.w	8005544 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10e      	bne.n	8005382 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d116      	bne.n	80053a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e0e7      	b.n	8005552 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0d8      	b.n	8005552 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	331b      	adds	r3, #27
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	4413      	add	r3, r2
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0204 	and.w	r2, r3, #4
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10c      	bne.n	80053d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	331b      	adds	r3, #27
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	0d5b      	lsrs	r3, r3, #21
 80053ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e00b      	b.n	80053f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	331b      	adds	r3, #27
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	4413      	add	r3, r2
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	331b      	adds	r3, #27
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	4413      	add	r3, r2
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0202 	and.w	r2, r3, #2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	331b      	adds	r3, #27
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	331b      	adds	r3, #27
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	4413      	add	r3, r2
 800542a:	3304      	adds	r3, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	b2da      	uxtb	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	331b      	adds	r3, #27
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	3304      	adds	r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	b29a      	uxth	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4413      	add	r3, r2
 8005458:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4413      	add	r3, r2
 800546e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	0a1a      	lsrs	r2, r3, #8
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	4413      	add	r3, r2
 8005488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	0c1a      	lsrs	r2, r3, #16
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	3302      	adds	r3, #2
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	0e1a      	lsrs	r2, r3, #24
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3303      	adds	r3, #3
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3304      	adds	r3, #4
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	0a1a      	lsrs	r2, r3, #8
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	3305      	adds	r3, #5
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	0c1a      	lsrs	r2, r3, #16
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	3306      	adds	r3, #6
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	4413      	add	r3, r2
 8005508:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	0e1a      	lsrs	r2, r3, #24
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	3307      	adds	r3, #7
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0220 	orr.w	r2, r2, #32
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	e007      	b.n	8005540 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0220 	orr.w	r2, r2, #32
 800553e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e006      	b.n	8005552 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800556e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d002      	beq.n	800557c <HAL_CAN_ActivateNotification+0x1e>
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d109      	bne.n	8005590 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6959      	ldr	r1, [r3, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e006      	b.n	800559e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08a      	sub	sp, #40	; 0x28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d07c      	beq.n	80056ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d023      	beq.n	8005642 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2201      	movs	r2, #1
 8005600:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f983 	bl	8005918 <HAL_CAN_TxMailbox0CompleteCallback>
 8005612:	e016      	b.n	8005642 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e00c      	b.n	8005642 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	e002      	b.n	8005642 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f989 	bl	8005954 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d024      	beq.n	8005696 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005654:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f963 	bl	800592c <HAL_CAN_TxMailbox1CompleteCallback>
 8005666:	e016      	b.n	8005696 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	e00c      	b.n	8005696 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	e002      	b.n	8005696 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f969 	bl	8005968 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d024      	beq.n	80056ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f943 	bl	8005940 <HAL_CAN_TxMailbox2CompleteCallback>
 80056ba:	e016      	b.n	80056ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	e00c      	b.n	80056ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	e002      	b.n	80056ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f949 	bl	800597c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2210      	movs	r2, #16
 800570c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d006      	beq.n	8005730 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2208      	movs	r2, #8
 8005728:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f930 	bl	8005990 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fd fba1 	bl	8002e90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00c      	beq.n	8005772 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2210      	movs	r2, #16
 8005770:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2208      	movs	r2, #8
 800578c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f912 	bl	80059b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	d009      	beq.n	80057b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8f9 	bl	80059a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2210      	movs	r2, #16
 80057cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8fc 	bl	80059cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d006      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2208      	movs	r2, #8
 80057ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8f5 	bl	80059e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d07b      	beq.n	80058f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d072      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f043 0302 	orr.w	r3, r3, #2
 8005840:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	f043 0304 	orr.w	r3, r3, #4
 800585c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005864:	2b00      	cmp	r3, #0
 8005866:	d043      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800586e:	2b00      	cmp	r3, #0
 8005870:	d03e      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005878:	2b60      	cmp	r3, #96	; 0x60
 800587a:	d02b      	beq.n	80058d4 <HAL_CAN_IRQHandler+0x32a>
 800587c:	2b60      	cmp	r3, #96	; 0x60
 800587e:	d82e      	bhi.n	80058de <HAL_CAN_IRQHandler+0x334>
 8005880:	2b50      	cmp	r3, #80	; 0x50
 8005882:	d022      	beq.n	80058ca <HAL_CAN_IRQHandler+0x320>
 8005884:	2b50      	cmp	r3, #80	; 0x50
 8005886:	d82a      	bhi.n	80058de <HAL_CAN_IRQHandler+0x334>
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d019      	beq.n	80058c0 <HAL_CAN_IRQHandler+0x316>
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d826      	bhi.n	80058de <HAL_CAN_IRQHandler+0x334>
 8005890:	2b30      	cmp	r3, #48	; 0x30
 8005892:	d010      	beq.n	80058b6 <HAL_CAN_IRQHandler+0x30c>
 8005894:	2b30      	cmp	r3, #48	; 0x30
 8005896:	d822      	bhi.n	80058de <HAL_CAN_IRQHandler+0x334>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d002      	beq.n	80058a2 <HAL_CAN_IRQHandler+0x2f8>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d005      	beq.n	80058ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058a0:	e01d      	b.n	80058de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058aa:	e019      	b.n	80058e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f043 0310 	orr.w	r3, r3, #16
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058b4:	e014      	b.n	80058e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	f043 0320 	orr.w	r3, r3, #32
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058be:	e00f      	b.n	80058e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058c8:	e00a      	b.n	80058e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058d2:	e005      	b.n	80058e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058dc:	e000      	b.n	80058e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80058de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2204      	movs	r2, #4
 80058f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f872 	bl	80059f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005910:	bf00      	nop
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <__NVIC_SetPriorityGrouping+0x44>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a3a:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <__NVIC_SetPriorityGrouping+0x44>)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	60d3      	str	r3, [r2, #12]
}
 8005a40:	bf00      	nop
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	e000ed00 	.word	0xe000ed00

08005a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <__NVIC_GetPriorityGrouping+0x18>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 0307 	and.w	r3, r3, #7
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	db0b      	blt.n	8005a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4907      	ldr	r1, [pc, #28]	; (8005aa4 <__NVIC_EnableIRQ+0x38>)
 8005a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff29 	bl	8005a08 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd0:	f7ff ff3e 	bl	8005a50 <__NVIC_GetPriorityGrouping>
 8005bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff8e 	bl	8005afc <NVIC_EncodePriority>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff5d 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff31 	bl	8005a6c <__NVIC_EnableIRQ>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ffa2 	bl	8005b64 <SysTick_Config>
 8005c20:	4603      	mov	r3, r0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d106      	bne.n	8005c48 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c40:	f043 0304 	orr.w	r3, r3, #4
 8005c44:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8005c46:	e005      	b.n	8005c54 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005c4e:	f023 0304 	bic.w	r3, r3, #4
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000e010 	.word	0xe000e010

08005c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7ff f838 	bl	8004ce4 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e099      	b.n	8005db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca0:	e00f      	b.n	8005cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ca2:	f7ff f81f 	bl	8004ce4 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	d908      	bls.n	8005cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e078      	b.n	8005db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e8      	bne.n	8005ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <HAL_DMA_Init+0x158>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d107      	bne.n	8005d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	4313      	orrs	r3, r2
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0307 	bic.w	r3, r3, #7
 8005d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d117      	bne.n	8005d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa91 	bl	8006290 <DMA_CheckFifoParam>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2240      	movs	r2, #64	; 0x40
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d82:	2301      	movs	r3, #1
 8005d84:	e016      	b.n	8005db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa48 	bl	8006224 <DMA_CalcBaseAndBitshift>
 8005d94:	4603      	mov	r3, r0
 8005d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9c:	223f      	movs	r2, #63	; 0x3f
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	f010803f 	.word	0xf010803f

08005dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_DMA_Start_IT+0x26>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e040      	b.n	8005e68 <HAL_DMA_Start_IT+0xa8>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d12f      	bne.n	8005e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 f9da 	bl	80061c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	223f      	movs	r2, #63	; 0x3f
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0216 	orr.w	r2, r2, #22
 8005e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0208 	orr.w	r2, r2, #8
 8005e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e005      	b.n	8005e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
 8005e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e00c      	b.n	8005ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2205      	movs	r2, #5
 8005e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ec0:	4b92      	ldr	r3, [pc, #584]	; (800610c <HAL_DMA_IRQHandler+0x258>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a92      	ldr	r2, [pc, #584]	; (8006110 <HAL_DMA_IRQHandler+0x25c>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0a9b      	lsrs	r3, r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ede:	2208      	movs	r2, #8
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01a      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d013      	beq.n	8005f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	f043 0201 	orr.w	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	2201      	movs	r2, #1
 8005f26:	409a      	lsls	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f42:	2201      	movs	r2, #1
 8005f44:	409a      	lsls	r2, r3
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f043 0202 	orr.w	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d012      	beq.n	8005f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f78:	2204      	movs	r2, #4
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f84:	f043 0204 	orr.w	r2, r3, #4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f90:	2210      	movs	r2, #16
 8005f92:	409a      	lsls	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d043      	beq.n	8006024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03c      	beq.n	8006024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	2210      	movs	r2, #16
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d018      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d108      	bne.n	8005fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d024      	beq.n	8006024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
 8005fe2:	e01f      	b.n	8006024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01b      	beq.n	8006024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
 8005ff4:	e016      	b.n	8006024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d107      	bne.n	8006014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0208 	bic.w	r2, r2, #8
 8006012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	2220      	movs	r2, #32
 800602a:	409a      	lsls	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4013      	ands	r3, r2
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 808e 	beq.w	8006152 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8086 	beq.w	8006152 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604a:	2220      	movs	r2, #32
 800604c:	409a      	lsls	r2, r3
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b05      	cmp	r3, #5
 800605c:	d136      	bne.n	80060cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0216 	bic.w	r2, r2, #22
 800606c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d103      	bne.n	800608e <HAL_DMA_IRQHandler+0x1da>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0208 	bic.w	r2, r2, #8
 800609c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a2:	223f      	movs	r2, #63	; 0x3f
 80060a4:	409a      	lsls	r2, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d07d      	beq.n	80061be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
        }
        return;
 80060ca:	e078      	b.n	80061be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01c      	beq.n	8006114 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d108      	bne.n	80060fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d030      	beq.n	8006152 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
 80060f8:	e02b      	b.n	8006152 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d027      	beq.n	8006152 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
 800610a:	e022      	b.n	8006152 <HAL_DMA_IRQHandler+0x29e>
 800610c:	2000012c 	.word	0x2000012c
 8006110:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10f      	bne.n	8006142 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0210 	bic.w	r2, r2, #16
 8006130:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	2b00      	cmp	r3, #0
 8006158:	d032      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d022      	beq.n	80061ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2205      	movs	r2, #5
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3301      	adds	r3, #1
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	429a      	cmp	r2, r3
 8006188:	d307      	bcc.n	800619a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f2      	bne.n	800617e <HAL_DMA_IRQHandler+0x2ca>
 8006198:	e000      	b.n	800619c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800619a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
 80061bc:	e000      	b.n	80061c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80061be:	bf00      	nop
    }
  }
}
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop

080061c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d108      	bne.n	8006208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006206:	e007      	b.n	8006218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	3b10      	subs	r3, #16
 8006234:	4a14      	ldr	r2, [pc, #80]	; (8006288 <DMA_CalcBaseAndBitshift+0x64>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <DMA_CalcBaseAndBitshift+0x68>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d909      	bls.n	8006266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	659a      	str	r2, [r3, #88]	; 0x58
 8006264:	e007      	b.n	8006276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	aaaaaaab 	.word	0xaaaaaaab
 800628c:	0800cbf8 	.word	0x0800cbf8

08006290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11f      	bne.n	80062ea <DMA_CheckFifoParam+0x5a>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d856      	bhi.n	800635e <DMA_CheckFifoParam+0xce>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <DMA_CheckFifoParam+0x28>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062c9 	.word	0x080062c9
 80062bc:	080062db 	.word	0x080062db
 80062c0:	080062c9 	.word	0x080062c9
 80062c4:	0800635f 	.word	0x0800635f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d046      	beq.n	8006362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d8:	e043      	b.n	8006362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062e2:	d140      	bne.n	8006366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e8:	e03d      	b.n	8006366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f2:	d121      	bne.n	8006338 <DMA_CheckFifoParam+0xa8>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d837      	bhi.n	800636a <DMA_CheckFifoParam+0xda>
 80062fa:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <DMA_CheckFifoParam+0x70>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006311 	.word	0x08006311
 8006304:	08006317 	.word	0x08006317
 8006308:	08006311 	.word	0x08006311
 800630c:	08006329 	.word	0x08006329
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e030      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d025      	beq.n	800636e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006326:	e022      	b.n	800636e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006330:	d11f      	bne.n	8006372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006336:	e01c      	b.n	8006372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d903      	bls.n	8006346 <DMA_CheckFifoParam+0xb6>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d003      	beq.n	800634c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006344:	e018      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]
      break;
 800634a:	e015      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00e      	beq.n	8006376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	e00b      	b.n	8006376 <DMA_CheckFifoParam+0xe6>
      break;
 800635e:	bf00      	nop
 8006360:	e00a      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 8006362:	bf00      	nop
 8006364:	e008      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 8006366:	bf00      	nop
 8006368:	e006      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;   
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <DMA_CheckFifoParam+0xe8>
      break;
 8006376:	bf00      	nop
    }
  } 
  
  return status; 
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop

08006388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006388:	b480      	push	{r7}
 800638a:	b089      	sub	sp, #36	; 0x24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800639a:	2300      	movs	r3, #0
 800639c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e177      	b.n	8006694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063a4:	2201      	movs	r2, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	429a      	cmp	r2, r3
 80063be:	f040 8166 	bne.w	800668e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d00b      	beq.n	80063e2 <HAL_GPIO_Init+0x5a>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d007      	beq.n	80063e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063d6:	2b11      	cmp	r3, #17
 80063d8:	d003      	beq.n	80063e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b12      	cmp	r3, #18
 80063e0:	d130      	bne.n	8006444 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	2203      	movs	r2, #3
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4313      	orrs	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006418:	2201      	movs	r2, #1
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	43db      	mvns	r3, r3
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 0201 	and.w	r2, r3, #1
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4313      	orrs	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	2203      	movs	r2, #3
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4313      	orrs	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d003      	beq.n	8006484 <HAL_GPIO_Init+0xfc>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b12      	cmp	r3, #18
 8006482:	d123      	bne.n	80064cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	08da      	lsrs	r2, r3, #3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3208      	adds	r2, #8
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	220f      	movs	r2, #15
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	43db      	mvns	r3, r3
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	4013      	ands	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	08da      	lsrs	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3208      	adds	r2, #8
 80064c6:	69b9      	ldr	r1, [r7, #24]
 80064c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	2203      	movs	r2, #3
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 0203 	and.w	r2, r3, #3
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80c0 	beq.w	800668e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	4b66      	ldr	r3, [pc, #408]	; (80066ac <HAL_GPIO_Init+0x324>)
 8006514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006516:	4a65      	ldr	r2, [pc, #404]	; (80066ac <HAL_GPIO_Init+0x324>)
 8006518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800651c:	6453      	str	r3, [r2, #68]	; 0x44
 800651e:	4b63      	ldr	r3, [pc, #396]	; (80066ac <HAL_GPIO_Init+0x324>)
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800652a:	4a61      	ldr	r2, [pc, #388]	; (80066b0 <HAL_GPIO_Init+0x328>)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	3302      	adds	r3, #2
 8006532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	220f      	movs	r2, #15
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43db      	mvns	r3, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a58      	ldr	r2, [pc, #352]	; (80066b4 <HAL_GPIO_Init+0x32c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d037      	beq.n	80065c6 <HAL_GPIO_Init+0x23e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a57      	ldr	r2, [pc, #348]	; (80066b8 <HAL_GPIO_Init+0x330>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d031      	beq.n	80065c2 <HAL_GPIO_Init+0x23a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a56      	ldr	r2, [pc, #344]	; (80066bc <HAL_GPIO_Init+0x334>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02b      	beq.n	80065be <HAL_GPIO_Init+0x236>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a55      	ldr	r2, [pc, #340]	; (80066c0 <HAL_GPIO_Init+0x338>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d025      	beq.n	80065ba <HAL_GPIO_Init+0x232>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a54      	ldr	r2, [pc, #336]	; (80066c4 <HAL_GPIO_Init+0x33c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01f      	beq.n	80065b6 <HAL_GPIO_Init+0x22e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a53      	ldr	r2, [pc, #332]	; (80066c8 <HAL_GPIO_Init+0x340>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d019      	beq.n	80065b2 <HAL_GPIO_Init+0x22a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a52      	ldr	r2, [pc, #328]	; (80066cc <HAL_GPIO_Init+0x344>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_GPIO_Init+0x226>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a51      	ldr	r2, [pc, #324]	; (80066d0 <HAL_GPIO_Init+0x348>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00d      	beq.n	80065aa <HAL_GPIO_Init+0x222>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a50      	ldr	r2, [pc, #320]	; (80066d4 <HAL_GPIO_Init+0x34c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <HAL_GPIO_Init+0x21e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a4f      	ldr	r2, [pc, #316]	; (80066d8 <HAL_GPIO_Init+0x350>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d101      	bne.n	80065a2 <HAL_GPIO_Init+0x21a>
 800659e:	2309      	movs	r3, #9
 80065a0:	e012      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065a2:	230a      	movs	r3, #10
 80065a4:	e010      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065a6:	2308      	movs	r3, #8
 80065a8:	e00e      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065aa:	2307      	movs	r3, #7
 80065ac:	e00c      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065ae:	2306      	movs	r3, #6
 80065b0:	e00a      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065b2:	2305      	movs	r3, #5
 80065b4:	e008      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065b6:	2304      	movs	r3, #4
 80065b8:	e006      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065ba:	2303      	movs	r3, #3
 80065bc:	e004      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065be:	2302      	movs	r3, #2
 80065c0:	e002      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_GPIO_Init+0x240>
 80065c6:	2300      	movs	r3, #0
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	f002 0203 	and.w	r2, r2, #3
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	4093      	lsls	r3, r2
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065d8:	4935      	ldr	r1, [pc, #212]	; (80066b0 <HAL_GPIO_Init+0x328>)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	089b      	lsrs	r3, r3, #2
 80065de:	3302      	adds	r3, #2
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e6:	4b3d      	ldr	r3, [pc, #244]	; (80066dc <HAL_GPIO_Init+0x354>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800660a:	4a34      	ldr	r2, [pc, #208]	; (80066dc <HAL_GPIO_Init+0x354>)
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006610:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_GPIO_Init+0x354>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006634:	4a29      	ldr	r2, [pc, #164]	; (80066dc <HAL_GPIO_Init+0x354>)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800663a:	4b28      	ldr	r3, [pc, #160]	; (80066dc <HAL_GPIO_Init+0x354>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	43db      	mvns	r3, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800665e:	4a1f      	ldr	r2, [pc, #124]	; (80066dc <HAL_GPIO_Init+0x354>)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <HAL_GPIO_Init+0x354>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006688:	4a14      	ldr	r2, [pc, #80]	; (80066dc <HAL_GPIO_Init+0x354>)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	f67f ae84 	bls.w	80063a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3724      	adds	r7, #36	; 0x24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40020000 	.word	0x40020000
 80066b8:	40020400 	.word	0x40020400
 80066bc:	40020800 	.word	0x40020800
 80066c0:	40020c00 	.word	0x40020c00
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40021400 	.word	0x40021400
 80066cc:	40021800 	.word	0x40021800
 80066d0:	40021c00 	.word	0x40021c00
 80066d4:	40022000 	.word	0x40022000
 80066d8:	40022400 	.word	0x40022400
 80066dc:	40013c00 	.word	0x40013c00

080066e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	887b      	ldrh	r3, [r7, #2]
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	73fb      	strb	r3, [r7, #15]
 80066fc:	e001      	b.n	8006702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
 800671c:	4613      	mov	r3, r2
 800671e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006726:	887a      	ldrh	r2, [r7, #2]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800672c:	e003      	b.n	8006736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800672e:	887b      	ldrh	r3, [r7, #2]
 8006730:	041a      	lsls	r2, r3, #16
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	619a      	str	r2, [r3, #24]
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	4013      	ands	r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d006      	beq.n	8006768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800675a:	4a05      	ldr	r2, [pc, #20]	; (8006770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800675c:	88fb      	ldrh	r3, [r7, #6]
 800675e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fc fad2 	bl	8002d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40013c00 	.word	0x40013c00

08006774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e12b      	b.n	80069de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb fc4e 	bl	800203c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	; 0x24
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067d8:	f000 fe1e 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 80067dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4a81      	ldr	r2, [pc, #516]	; (80069e8 <HAL_I2C_Init+0x274>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d807      	bhi.n	80067f8 <HAL_I2C_Init+0x84>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a80      	ldr	r2, [pc, #512]	; (80069ec <HAL_I2C_Init+0x278>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	bf94      	ite	ls
 80067f0:	2301      	movls	r3, #1
 80067f2:	2300      	movhi	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e006      	b.n	8006806 <HAL_I2C_Init+0x92>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4a7d      	ldr	r2, [pc, #500]	; (80069f0 <HAL_I2C_Init+0x27c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bf94      	ite	ls
 8006800:	2301      	movls	r3, #1
 8006802:	2300      	movhi	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e0e7      	b.n	80069de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a78      	ldr	r2, [pc, #480]	; (80069f4 <HAL_I2C_Init+0x280>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0c9b      	lsrs	r3, r3, #18
 8006818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a6a      	ldr	r2, [pc, #424]	; (80069e8 <HAL_I2C_Init+0x274>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d802      	bhi.n	8006848 <HAL_I2C_Init+0xd4>
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3301      	adds	r3, #1
 8006846:	e009      	b.n	800685c <HAL_I2C_Init+0xe8>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	4a69      	ldr	r2, [pc, #420]	; (80069f8 <HAL_I2C_Init+0x284>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	099b      	lsrs	r3, r3, #6
 800685a:	3301      	adds	r3, #1
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6812      	ldr	r2, [r2, #0]
 8006860:	430b      	orrs	r3, r1
 8006862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800686e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	495c      	ldr	r1, [pc, #368]	; (80069e8 <HAL_I2C_Init+0x274>)
 8006878:	428b      	cmp	r3, r1
 800687a:	d819      	bhi.n	80068b0 <HAL_I2C_Init+0x13c>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1e59      	subs	r1, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	fbb1 f3f3 	udiv	r3, r1, r3
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006890:	400b      	ands	r3, r1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_I2C_Init+0x138>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1e59      	subs	r1, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80068a4:	3301      	adds	r3, #1
 80068a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068aa:	e051      	b.n	8006950 <HAL_I2C_Init+0x1dc>
 80068ac:	2304      	movs	r3, #4
 80068ae:	e04f      	b.n	8006950 <HAL_I2C_Init+0x1dc>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d111      	bne.n	80068dc <HAL_I2C_Init+0x168>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1e58      	subs	r0, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	440b      	add	r3, r1
 80068c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ca:	3301      	adds	r3, #1
 80068cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e012      	b.n	8006902 <HAL_I2C_Init+0x18e>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1e58      	subs	r0, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	0099      	lsls	r1, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80068f2:	3301      	adds	r3, #1
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <HAL_I2C_Init+0x196>
 8006906:	2301      	movs	r3, #1
 8006908:	e022      	b.n	8006950 <HAL_I2C_Init+0x1dc>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10e      	bne.n	8006930 <HAL_I2C_Init+0x1bc>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1e58      	subs	r0, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6859      	ldr	r1, [r3, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	440b      	add	r3, r1
 8006920:	fbb0 f3f3 	udiv	r3, r0, r3
 8006924:	3301      	adds	r3, #1
 8006926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800692a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692e:	e00f      	b.n	8006950 <HAL_I2C_Init+0x1dc>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	1e58      	subs	r0, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	0099      	lsls	r1, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	fbb0 f3f3 	udiv	r3, r0, r3
 8006946:	3301      	adds	r3, #1
 8006948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800694c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	6809      	ldr	r1, [r1, #0]
 8006954:	4313      	orrs	r3, r2
 8006956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800697e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6911      	ldr	r1, [r2, #16]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68d2      	ldr	r2, [r2, #12]
 800698a:	4311      	orrs	r1, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6812      	ldr	r2, [r2, #0]
 8006990:	430b      	orrs	r3, r1
 8006992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	000186a0 	.word	0x000186a0
 80069ec:	001e847f 	.word	0x001e847f
 80069f0:	003d08ff 	.word	0x003d08ff
 80069f4:	431bde83 	.word	0x431bde83
 80069f8:	10624dd3 	.word	0x10624dd3

080069fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d129      	bne.n	8006a66 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2224      	movs	r2, #36	; 0x24
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0210 	bic.w	r2, r2, #16
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f042 0201 	orr.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e000      	b.n	8006a68 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006a66:	2302      	movs	r3, #2
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d12a      	bne.n	8006ae4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2224      	movs	r2, #36	; 0x24
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006aae:	89fb      	ldrh	r3, [r7, #14]
 8006ab0:	f023 030f 	bic.w	r3, r3, #15
 8006ab4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	89fb      	ldrh	r3, [r7, #14]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	89fa      	ldrh	r2, [r7, #14]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e000      	b.n	8006ae6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
	...

08006af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b1a:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <HAL_PWREx_EnableOverDrive+0x94>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b20:	f7fe f8e0 	bl	8004ce4 <HAL_GetTick>
 8006b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b26:	e009      	b.n	8006b3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b28:	f7fe f8dc 	bl	8004ce4 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b36:	d901      	bls.n	8006b3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e01f      	b.n	8006b7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b3c:	4b13      	ldr	r3, [pc, #76]	; (8006b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b48:	d1ee      	bne.n	8006b28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b50:	f7fe f8c8 	bl	8004ce4 <HAL_GetTick>
 8006b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b56:	e009      	b.n	8006b6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b58:	f7fe f8c4 	bl	8004ce4 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b66:	d901      	bls.n	8006b6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e007      	b.n	8006b7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b6c:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b78:	d1ee      	bne.n	8006b58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40023800 	.word	0x40023800
 8006b88:	420e0040 	.word	0x420e0040
 8006b8c:	40007000 	.word	0x40007000
 8006b90:	420e0044 	.word	0x420e0044

08006b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e25b      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d075      	beq.n	8006c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bb2:	4ba3      	ldr	r3, [pc, #652]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d00c      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bbe:	4ba0      	ldr	r3, [pc, #640]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d112      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bca:	4b9d      	ldr	r3, [pc, #628]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd6:	d10b      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	4b99      	ldr	r3, [pc, #612]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d05b      	beq.n	8006c9c <HAL_RCC_OscConfig+0x108>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d157      	bne.n	8006c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e236      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCC_OscConfig+0x74>
 8006bfa:	4b91      	ldr	r3, [pc, #580]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a90      	ldr	r2, [pc, #576]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e01d      	b.n	8006c44 <HAL_RCC_OscConfig+0xb0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c10:	d10c      	bne.n	8006c2c <HAL_RCC_OscConfig+0x98>
 8006c12:	4b8b      	ldr	r3, [pc, #556]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a8a      	ldr	r2, [pc, #552]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	4b88      	ldr	r3, [pc, #544]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a87      	ldr	r2, [pc, #540]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	e00b      	b.n	8006c44 <HAL_RCC_OscConfig+0xb0>
 8006c2c:	4b84      	ldr	r3, [pc, #528]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a83      	ldr	r2, [pc, #524]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	4b81      	ldr	r3, [pc, #516]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a80      	ldr	r2, [pc, #512]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d013      	beq.n	8006c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fe f84a 	bl	8004ce4 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c54:	f7fe f846 	bl	8004ce4 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b64      	cmp	r3, #100	; 0x64
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e1fb      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	4b76      	ldr	r3, [pc, #472]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0xc0>
 8006c72:	e014      	b.n	8006c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c74:	f7fe f836 	bl	8004ce4 <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c7c:	f7fe f832 	bl	8004ce4 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b64      	cmp	r3, #100	; 0x64
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e1e7      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8e:	4b6c      	ldr	r3, [pc, #432]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f0      	bne.n	8006c7c <HAL_RCC_OscConfig+0xe8>
 8006c9a:	e000      	b.n	8006c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d063      	beq.n	8006d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006caa:	4b65      	ldr	r3, [pc, #404]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 030c 	and.w	r3, r3, #12
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb6:	4b62      	ldr	r3, [pc, #392]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d11c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc2:	4b5f      	ldr	r3, [pc, #380]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d116      	bne.n	8006cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cce:	4b5c      	ldr	r3, [pc, #368]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x152>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d001      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e1bb      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce6:	4b56      	ldr	r3, [pc, #344]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4952      	ldr	r1, [pc, #328]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cfa:	e03a      	b.n	8006d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d020      	beq.n	8006d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d04:	4b4f      	ldr	r3, [pc, #316]	; (8006e44 <HAL_RCC_OscConfig+0x2b0>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0a:	f7fd ffeb 	bl	8004ce4 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d12:	f7fd ffe7 	bl	8004ce4 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e19c      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d24:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d30:	4b43      	ldr	r3, [pc, #268]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4940      	ldr	r1, [pc, #256]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	600b      	str	r3, [r1, #0]
 8006d44:	e015      	b.n	8006d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d46:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <HAL_RCC_OscConfig+0x2b0>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4c:	f7fd ffca 	bl	8004ce4 <HAL_GetTick>
 8006d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d52:	e008      	b.n	8006d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d54:	f7fd ffc6 	bl	8004ce4 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e17b      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d66:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f0      	bne.n	8006d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d030      	beq.n	8006de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d016      	beq.n	8006db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d86:	4b30      	ldr	r3, [pc, #192]	; (8006e48 <HAL_RCC_OscConfig+0x2b4>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8c:	f7fd ffaa 	bl	8004ce4 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d94:	f7fd ffa6 	bl	8004ce4 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e15b      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da6:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f0      	beq.n	8006d94 <HAL_RCC_OscConfig+0x200>
 8006db2:	e015      	b.n	8006de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db4:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <HAL_RCC_OscConfig+0x2b4>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dba:	f7fd ff93 	bl	8004ce4 <HAL_GetTick>
 8006dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dc2:	f7fd ff8f 	bl	8004ce4 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e144      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1f0      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a0 	beq.w	8006f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006df2:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10f      	bne.n	8006e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	4a0e      	ldr	r2, [pc, #56]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <HAL_RCC_OscConfig+0x2ac>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_RCC_OscConfig+0x2b8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d121      	bne.n	8006e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e2a:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <HAL_RCC_OscConfig+0x2b8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <HAL_RCC_OscConfig+0x2b8>)
 8006e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e36:	f7fd ff55 	bl	8004ce4 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3c:	e011      	b.n	8006e62 <HAL_RCC_OscConfig+0x2ce>
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800
 8006e44:	42470000 	.word	0x42470000
 8006e48:	42470e80 	.word	0x42470e80
 8006e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e50:	f7fd ff48 	bl	8004ce4 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0fd      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e62:	4b81      	ldr	r3, [pc, #516]	; (8007068 <HAL_RCC_OscConfig+0x4d4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d106      	bne.n	8006e84 <HAL_RCC_OscConfig+0x2f0>
 8006e76:	4b7d      	ldr	r3, [pc, #500]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	4a7c      	ldr	r2, [pc, #496]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006e7c:	f043 0301 	orr.w	r3, r3, #1
 8006e80:	6713      	str	r3, [r2, #112]	; 0x70
 8006e82:	e01c      	b.n	8006ebe <HAL_RCC_OscConfig+0x32a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	d10c      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x312>
 8006e8c:	4b77      	ldr	r3, [pc, #476]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	4a76      	ldr	r2, [pc, #472]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006e92:	f043 0304 	orr.w	r3, r3, #4
 8006e96:	6713      	str	r3, [r2, #112]	; 0x70
 8006e98:	4b74      	ldr	r3, [pc, #464]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	4a73      	ldr	r2, [pc, #460]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006e9e:	f043 0301 	orr.w	r3, r3, #1
 8006ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea4:	e00b      	b.n	8006ebe <HAL_RCC_OscConfig+0x32a>
 8006ea6:	4b71      	ldr	r3, [pc, #452]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eaa:	4a70      	ldr	r2, [pc, #448]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb2:	4b6e      	ldr	r3, [pc, #440]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	4a6d      	ldr	r2, [pc, #436]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006eb8:	f023 0304 	bic.w	r3, r3, #4
 8006ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d015      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec6:	f7fd ff0d 	bl	8004ce4 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ecc:	e00a      	b.n	8006ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ece:	f7fd ff09 	bl	8004ce4 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e0bc      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee4:	4b61      	ldr	r3, [pc, #388]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ee      	beq.n	8006ece <HAL_RCC_OscConfig+0x33a>
 8006ef0:	e014      	b.n	8006f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef2:	f7fd fef7 	bl	8004ce4 <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ef8:	e00a      	b.n	8006f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7fd fef3 	bl	8004ce4 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e0a6      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f10:	4b56      	ldr	r3, [pc, #344]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1ee      	bne.n	8006efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d105      	bne.n	8006f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f22:	4b52      	ldr	r3, [pc, #328]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	4a51      	ldr	r2, [pc, #324]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8092 	beq.w	800705c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f38:	4b4c      	ldr	r3, [pc, #304]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 030c 	and.w	r3, r3, #12
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d05c      	beq.n	8006ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d141      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f4c:	4b48      	ldr	r3, [pc, #288]	; (8007070 <HAL_RCC_OscConfig+0x4dc>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f52:	f7fd fec7 	bl	8004ce4 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f5a:	f7fd fec3 	bl	8004ce4 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e078      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6c:	4b3f      	ldr	r3, [pc, #252]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1f0      	bne.n	8006f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	019b      	lsls	r3, r3, #6
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	3b01      	subs	r3, #1
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	4933      	ldr	r1, [pc, #204]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa2:	4b33      	ldr	r3, [pc, #204]	; (8007070 <HAL_RCC_OscConfig+0x4dc>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa8:	f7fd fe9c 	bl	8004ce4 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb0:	f7fd fe98 	bl	8004ce4 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e04d      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc2:	4b2a      	ldr	r3, [pc, #168]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f0      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x41c>
 8006fce:	e045      	b.n	800705c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd0:	4b27      	ldr	r3, [pc, #156]	; (8007070 <HAL_RCC_OscConfig+0x4dc>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd6:	f7fd fe85 	bl	8004ce4 <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fd fe81 	bl	8004ce4 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e036      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff0:	4b1e      	ldr	r3, [pc, #120]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <HAL_RCC_OscConfig+0x44a>
 8006ffc:	e02e      	b.n	800705c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e029      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800700a:	4b18      	ldr	r3, [pc, #96]	; (800706c <HAL_RCC_OscConfig+0x4d8>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	429a      	cmp	r2, r3
 800701c:	d11c      	bne.n	8007058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007028:	429a      	cmp	r2, r3
 800702a:	d115      	bne.n	8007058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007032:	4013      	ands	r3, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007038:	4293      	cmp	r3, r2
 800703a:	d10d      	bne.n	8007058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d106      	bne.n	8007058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40007000 	.word	0x40007000
 800706c:	40023800 	.word	0x40023800
 8007070:	42470060 	.word	0x42470060

08007074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e0cc      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007088:	4b68      	ldr	r3, [pc, #416]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d90c      	bls.n	80070b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007096:	4b65      	ldr	r3, [pc, #404]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b63      	ldr	r3, [pc, #396]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e0b8      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070c8:	4b59      	ldr	r3, [pc, #356]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4a58      	ldr	r2, [pc, #352]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070e0:	4b53      	ldr	r3, [pc, #332]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	4a52      	ldr	r2, [pc, #328]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ec:	4b50      	ldr	r3, [pc, #320]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	494d      	ldr	r1, [pc, #308]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d044      	beq.n	8007194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d107      	bne.n	8007122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007112:	4b47      	ldr	r3, [pc, #284]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d119      	bne.n	8007152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e07f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d003      	beq.n	8007132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800712e:	2b03      	cmp	r3, #3
 8007130:	d107      	bne.n	8007142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007132:	4b3f      	ldr	r3, [pc, #252]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e06f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007142:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e067      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007152:	4b37      	ldr	r3, [pc, #220]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f023 0203 	bic.w	r2, r3, #3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	4934      	ldr	r1, [pc, #208]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007164:	f7fd fdbe 	bl	8004ce4 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716a:	e00a      	b.n	8007182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716c:	f7fd fdba 	bl	8004ce4 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f241 3288 	movw	r2, #5000	; 0x1388
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e04f      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007182:	4b2b      	ldr	r3, [pc, #172]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 020c 	and.w	r2, r3, #12
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	429a      	cmp	r2, r3
 8007192:	d1eb      	bne.n	800716c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d20c      	bcs.n	80071bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a2:	4b22      	ldr	r3, [pc, #136]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071aa:	4b20      	ldr	r3, [pc, #128]	; (800722c <HAL_RCC_ClockConfig+0x1b8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 030f 	and.w	r3, r3, #15
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d001      	beq.n	80071bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e032      	b.n	8007222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071c8:	4b19      	ldr	r3, [pc, #100]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4916      	ldr	r1, [pc, #88]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071e6:	4b12      	ldr	r3, [pc, #72]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	490e      	ldr	r1, [pc, #56]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071fa:	f000 f821 	bl	8007240 <HAL_RCC_GetSysClockFreq>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <HAL_RCC_ClockConfig+0x1bc>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	490a      	ldr	r1, [pc, #40]	; (8007234 <HAL_RCC_ClockConfig+0x1c0>)
 800720c:	5ccb      	ldrb	r3, [r1, r3]
 800720e:	fa22 f303 	lsr.w	r3, r2, r3
 8007212:	4a09      	ldr	r2, [pc, #36]	; (8007238 <HAL_RCC_ClockConfig+0x1c4>)
 8007214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <HAL_RCC_ClockConfig+0x1c8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd fd1e 	bl	8004c5c <HAL_InitTick>

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	40023c00 	.word	0x40023c00
 8007230:	40023800 	.word	0x40023800
 8007234:	0800cbe0 	.word	0x0800cbe0
 8007238:	2000012c 	.word	0x2000012c
 800723c:	20000130 	.word	0x20000130

08007240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	2300      	movs	r3, #0
 8007252:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007258:	4b67      	ldr	r3, [pc, #412]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 030c 	and.w	r3, r3, #12
 8007260:	2b08      	cmp	r3, #8
 8007262:	d00d      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x40>
 8007264:	2b08      	cmp	r3, #8
 8007266:	f200 80bd 	bhi.w	80073e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x34>
 800726e:	2b04      	cmp	r3, #4
 8007270:	d003      	beq.n	800727a <HAL_RCC_GetSysClockFreq+0x3a>
 8007272:	e0b7      	b.n	80073e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007274:	4b61      	ldr	r3, [pc, #388]	; (80073fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007276:	60bb      	str	r3, [r7, #8]
       break;
 8007278:	e0b7      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800727a:	4b60      	ldr	r3, [pc, #384]	; (80073fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800727c:	60bb      	str	r3, [r7, #8]
      break;
 800727e:	e0b4      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007280:	4b5d      	ldr	r3, [pc, #372]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007288:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800728a:	4b5b      	ldr	r3, [pc, #364]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d04d      	beq.n	8007332 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007296:	4b58      	ldr	r3, [pc, #352]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	099b      	lsrs	r3, r3, #6
 800729c:	461a      	mov	r2, r3
 800729e:	f04f 0300 	mov.w	r3, #0
 80072a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072a6:	f04f 0100 	mov.w	r1, #0
 80072aa:	ea02 0800 	and.w	r8, r2, r0
 80072ae:	ea03 0901 	and.w	r9, r3, r1
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	014b      	lsls	r3, r1, #5
 80072c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072c4:	0142      	lsls	r2, r0, #5
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	ebb0 0008 	subs.w	r0, r0, r8
 80072ce:	eb61 0109 	sbc.w	r1, r1, r9
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	018b      	lsls	r3, r1, #6
 80072dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072e0:	0182      	lsls	r2, r0, #6
 80072e2:	1a12      	subs	r2, r2, r0
 80072e4:	eb63 0301 	sbc.w	r3, r3, r1
 80072e8:	f04f 0000 	mov.w	r0, #0
 80072ec:	f04f 0100 	mov.w	r1, #0
 80072f0:	00d9      	lsls	r1, r3, #3
 80072f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072f6:	00d0      	lsls	r0, r2, #3
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	eb12 0208 	adds.w	r2, r2, r8
 8007300:	eb43 0309 	adc.w	r3, r3, r9
 8007304:	f04f 0000 	mov.w	r0, #0
 8007308:	f04f 0100 	mov.w	r1, #0
 800730c:	0299      	lsls	r1, r3, #10
 800730e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007312:	0290      	lsls	r0, r2, #10
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4610      	mov	r0, r2
 800731a:	4619      	mov	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	f7f9 fc68 	bl	8000bf8 <__aeabi_uldivmod>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4613      	mov	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e04a      	b.n	80073c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007332:	4b31      	ldr	r3, [pc, #196]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	099b      	lsrs	r3, r3, #6
 8007338:	461a      	mov	r2, r3
 800733a:	f04f 0300 	mov.w	r3, #0
 800733e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	ea02 0400 	and.w	r4, r2, r0
 800734a:	ea03 0501 	and.w	r5, r3, r1
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f04f 0200 	mov.w	r2, #0
 8007356:	f04f 0300 	mov.w	r3, #0
 800735a:	014b      	lsls	r3, r1, #5
 800735c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007360:	0142      	lsls	r2, r0, #5
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	1b00      	subs	r0, r0, r4
 8007368:	eb61 0105 	sbc.w	r1, r1, r5
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	018b      	lsls	r3, r1, #6
 8007376:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800737a:	0182      	lsls	r2, r0, #6
 800737c:	1a12      	subs	r2, r2, r0
 800737e:	eb63 0301 	sbc.w	r3, r3, r1
 8007382:	f04f 0000 	mov.w	r0, #0
 8007386:	f04f 0100 	mov.w	r1, #0
 800738a:	00d9      	lsls	r1, r3, #3
 800738c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007390:	00d0      	lsls	r0, r2, #3
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	1912      	adds	r2, r2, r4
 8007398:	eb45 0303 	adc.w	r3, r5, r3
 800739c:	f04f 0000 	mov.w	r0, #0
 80073a0:	f04f 0100 	mov.w	r1, #0
 80073a4:	0299      	lsls	r1, r3, #10
 80073a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80073aa:	0290      	lsls	r0, r2, #10
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4610      	mov	r0, r2
 80073b2:	4619      	mov	r1, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	f7f9 fc1c 	bl	8000bf8 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4613      	mov	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	0c1b      	lsrs	r3, r3, #16
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	3301      	adds	r3, #1
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	60bb      	str	r3, [r7, #8]
      break;
 80073e2:	e002      	b.n	80073ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073e6:	60bb      	str	r3, [r7, #8]
      break;
 80073e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ea:	68bb      	ldr	r3, [r7, #8]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80073f6:	bf00      	nop
 80073f8:	40023800 	.word	0x40023800
 80073fc:	00f42400 	.word	0x00f42400

08007400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007404:	4b03      	ldr	r3, [pc, #12]	; (8007414 <HAL_RCC_GetHCLKFreq+0x14>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2000012c 	.word	0x2000012c

08007418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800741c:	f7ff fff0 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007420:	4602      	mov	r2, r0
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	0a9b      	lsrs	r3, r3, #10
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	4903      	ldr	r1, [pc, #12]	; (800743c <HAL_RCC_GetPCLK1Freq+0x24>)
 800742e:	5ccb      	ldrb	r3, [r1, r3]
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40023800 	.word	0x40023800
 800743c:	0800cbf0 	.word	0x0800cbf0

08007440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007444:	f7ff ffdc 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007448:	4602      	mov	r2, r0
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	0b5b      	lsrs	r3, r3, #13
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007456:	5ccb      	ldrb	r3, [r1, r3]
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800745c:	4618      	mov	r0, r3
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40023800 	.word	0x40023800
 8007464:	0800cbf0 	.word	0x0800cbf0

08007468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e056      	b.n	8007528 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fc f9c5 	bl	8003824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	69db      	ldr	r3, [r3, #28]
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	ea42 0103 	orr.w	r1, r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	0c1b      	lsrs	r3, r3, #16
 80074f8:	f003 0104 	and.w	r1, r3, #4
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69da      	ldr	r2, [r3, #28]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007516:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800754c:	d112      	bne.n	8007574 <HAL_SPI_Receive+0x44>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10e      	bne.n	8007574 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2204      	movs	r2, #4
 800755a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800755e:	88fa      	ldrh	r2, [r7, #6]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	68b9      	ldr	r1, [r7, #8]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f8e9 	bl	8007742 <HAL_SPI_TransmitReceive>
 8007570:	4603      	mov	r3, r0
 8007572:	e0e2      	b.n	800773a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_SPI_Receive+0x52>
 800757e:	2302      	movs	r3, #2
 8007580:	e0db      	b.n	800773a <HAL_SPI_Receive+0x20a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800758a:	f7fd fbab 	bl	8004ce4 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	d002      	beq.n	80075a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800759c:	2302      	movs	r3, #2
 800759e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075a0:	e0c2      	b.n	8007728 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_SPI_Receive+0x7e>
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075b2:	e0b9      	b.n	8007728 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2204      	movs	r2, #4
 80075b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	88fa      	ldrh	r2, [r7, #6]
 80075cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fa:	d107      	bne.n	800760c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800760a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d007      	beq.n	800762a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d162      	bne.n	80076f8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007632:	e02e      	b.n	8007692 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b01      	cmp	r3, #1
 8007640:	d115      	bne.n	800766e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f103 020c 	add.w	r2, r3, #12
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	7812      	ldrb	r2, [r2, #0]
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800766c:	e011      	b.n	8007692 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766e:	f7fd fb39 	bl	8004ce4 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d803      	bhi.n	8007686 <HAL_SPI_Receive+0x156>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007684:	d102      	bne.n	800768c <HAL_SPI_Receive+0x15c>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007690:	e04a      	b.n	8007728 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1cb      	bne.n	8007634 <HAL_SPI_Receive+0x104>
 800769c:	e031      	b.n	8007702 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d113      	bne.n	80076d4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	b292      	uxth	r2, r2
 80076b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	1c9a      	adds	r2, r3, #2
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076d2:	e011      	b.n	80076f8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d4:	f7fd fb06 	bl	8004ce4 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d803      	bhi.n	80076ec <HAL_SPI_Receive+0x1bc>
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ea:	d102      	bne.n	80076f2 <HAL_SPI_Receive+0x1c2>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076f6:	e017      	b.n	8007728 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1cd      	bne.n	800769e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 fa27 	bl	8007b5a <SPI_EndRxTransaction>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2220      	movs	r2, #32
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
 8007724:	e000      	b.n	8007728 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b08c      	sub	sp, #48	; 0x30
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007750:	2301      	movs	r3, #1
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x26>
 8007764:	2302      	movs	r3, #2
 8007766:	e18a      	b.n	8007a7e <HAL_SPI_TransmitReceive+0x33c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007770:	f7fd fab8 	bl	8004ce4 <HAL_GetTick>
 8007774:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800777c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800778a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800778e:	2b01      	cmp	r3, #1
 8007790:	d00f      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0x70>
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007798:	d107      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d103      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x68>
 80077a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d003      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
 80077ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077b0:	e15b      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <HAL_SPI_TransmitReceive+0x82>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_SPI_TransmitReceive+0x82>
 80077be:	887b      	ldrh	r3, [r7, #2]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077ca:	e14e      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d003      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2205      	movs	r2, #5
 80077dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	887a      	ldrh	r2, [r7, #2]
 80077f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	887a      	ldrh	r2, [r7, #2]
 80077f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	887a      	ldrh	r2, [r7, #2]
 8007802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	d007      	beq.n	8007834 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783c:	d178      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <HAL_SPI_TransmitReceive+0x10a>
 8007846:	8b7b      	ldrh	r3, [r7, #26]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d166      	bne.n	800791a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	881a      	ldrh	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	1c9a      	adds	r2, r3, #2
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007870:	e053      	b.n	800791a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b02      	cmp	r3, #2
 800787e:	d11b      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x176>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d016      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x176>
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d113      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	881a      	ldrh	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	1c9a      	adds	r2, r3, #2
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d119      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x1b8>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d014      	beq.n	80078fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	b292      	uxth	r2, r2
 80078dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078f6:	2301      	movs	r3, #1
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078fa:	f7fd f9f3 	bl	8004ce4 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007906:	429a      	cmp	r2, r3
 8007908:	d807      	bhi.n	800791a <HAL_SPI_TransmitReceive+0x1d8>
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007910:	d003      	beq.n	800791a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007918:	e0a7      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1a6      	bne.n	8007872 <HAL_SPI_TransmitReceive+0x130>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1a1      	bne.n	8007872 <HAL_SPI_TransmitReceive+0x130>
 800792e:	e07c      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <HAL_SPI_TransmitReceive+0x1fc>
 8007938:	8b7b      	ldrh	r3, [r7, #26]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d16b      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	330c      	adds	r3, #12
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007964:	e057      	b.n	8007a16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b02      	cmp	r3, #2
 8007972:	d11c      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x26c>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d017      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x26c>
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d114      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d119      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x2ae>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d014      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079ec:	2301      	movs	r3, #1
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079f0:	f7fd f978 	bl	8004ce4 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d803      	bhi.n	8007a08 <HAL_SPI_TransmitReceive+0x2c6>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a06:	d102      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x2cc>
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a14:	e029      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1a2      	bne.n	8007966 <HAL_SPI_TransmitReceive+0x224>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d19d      	bne.n	8007966 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f8f8 	bl	8007c24 <SPI_EndRxTxTransaction>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2220      	movs	r2, #32
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a46:	e010      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	e000      	b.n	8007a6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3730      	adds	r7, #48	; 0x30
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	603b      	str	r3, [r7, #0]
 8007a92:	4613      	mov	r3, r2
 8007a94:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a96:	e04c      	b.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a9e:	d048      	beq.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007aa0:	f7fd f920 	bl	8004ce4 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d902      	bls.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d13d      	bne.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ace:	d111      	bne.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad8:	d004      	beq.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae2:	d107      	bne.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afc:	d10f      	bne.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e00f      	b.n	8007b52 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d1a3      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af02      	add	r7, sp, #8
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6e:	d111      	bne.n	8007b94 <SPI_EndRxTransaction+0x3a>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b78:	d004      	beq.n	8007b84 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b82:	d107      	bne.n	8007b94 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b92:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b9c:	d12a      	bne.n	8007bf4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba6:	d012      	beq.n	8007bce <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2180      	movs	r1, #128	; 0x80
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff ff67 	bl	8007a86 <SPI_WaitFlagStateUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02d      	beq.n	8007c1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f043 0220 	orr.w	r2, r3, #32
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e026      	b.n	8007c1c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff ff54 	bl	8007a86 <SPI_WaitFlagStateUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01a      	beq.n	8007c1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	f043 0220 	orr.w	r2, r3, #32
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e013      	b.n	8007c1c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff ff41 	bl	8007a86 <SPI_WaitFlagStateUntilTimeout>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	f043 0220 	orr.w	r2, r3, #32
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e000      	b.n	8007c1c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c30:	4b1b      	ldr	r3, [pc, #108]	; (8007ca0 <SPI_EndRxTxTransaction+0x7c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1b      	ldr	r2, [pc, #108]	; (8007ca4 <SPI_EndRxTxTransaction+0x80>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	0d5b      	lsrs	r3, r3, #21
 8007c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c40:	fb02 f303 	mul.w	r3, r2, r3
 8007c44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4e:	d112      	bne.n	8007c76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff ff13 	bl	8007a86 <SPI_WaitFlagStateUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d016      	beq.n	8007c94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e00f      	b.n	8007c96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d0f2      	beq.n	8007c76 <SPI_EndRxTxTransaction+0x52>
 8007c90:	e000      	b.n	8007c94 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c92:	bf00      	nop
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	2000012c 	.word	0x2000012c
 8007ca4:	165e9f81 	.word	0x165e9f81

08007ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e01d      	b.n	8007cf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fc f8be 	bl	8003e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f000 fcf6 	bl	80086d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	d007      	beq.n	8007d30 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e01d      	b.n	8007d94 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f815 	bl	8007d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2202      	movs	r2, #2
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f000 fca7 	bl	80086d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 f89c 	bl	8008f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <HAL_TIM_PWM_Start+0x74>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d004      	beq.n	8007ddc <HAL_TIM_PWM_Start+0x2c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <HAL_TIM_PWM_Start+0x78>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d101      	bne.n	8007de0 <HAL_TIM_PWM_Start+0x30>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <HAL_TIM_PWM_Start+0x32>
 8007de0:	2300      	movs	r3, #0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d007      	beq.n	8007df6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007df4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b06      	cmp	r3, #6
 8007e06:	d007      	beq.n	8007e18 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40010400 	.word	0x40010400

08007e2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 f85e 	bl	8008f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a22      	ldr	r2, [pc, #136]	; (8007ed4 <HAL_TIM_PWM_Stop+0xa8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <HAL_TIM_PWM_Stop+0x2c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a21      	ldr	r2, [pc, #132]	; (8007ed8 <HAL_TIM_PWM_Stop+0xac>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d101      	bne.n	8007e5c <HAL_TIM_PWM_Stop+0x30>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e000      	b.n	8007e5e <HAL_TIM_PWM_Stop+0x32>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d017      	beq.n	8007e92 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6a1a      	ldr	r2, [r3, #32]
 8007e68:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10f      	bne.n	8007e92 <HAL_TIM_PWM_Stop+0x66>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	f240 4344 	movw	r3, #1092	; 0x444
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d107      	bne.n	8007e92 <HAL_TIM_PWM_Stop+0x66>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6a1a      	ldr	r2, [r3, #32]
 8007e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10f      	bne.n	8007ec2 <HAL_TIM_PWM_Stop+0x96>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	f240 4344 	movw	r3, #1092	; 0x444
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d107      	bne.n	8007ec2 <HAL_TIM_PWM_Stop+0x96>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0201 	bic.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40010000 	.word	0x40010000
 8007ed8:	40010400 	.word	0x40010400

08007edc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e01d      	b.n	8007f2a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f815 	bl	8007f32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	f000 fbdc 	bl	80086d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b0c      	cmp	r3, #12
 8007f56:	d841      	bhi.n	8007fdc <HAL_TIM_IC_Start_IT+0x94>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <HAL_TIM_IC_Start_IT+0x18>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f95 	.word	0x08007f95
 8007f64:	08007fdd 	.word	0x08007fdd
 8007f68:	08007fdd 	.word	0x08007fdd
 8007f6c:	08007fdd 	.word	0x08007fdd
 8007f70:	08007fa7 	.word	0x08007fa7
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007fdd 	.word	0x08007fdd
 8007f7c:	08007fdd 	.word	0x08007fdd
 8007f80:	08007fb9 	.word	0x08007fb9
 8007f84:	08007fdd 	.word	0x08007fdd
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	08007fcb 	.word	0x08007fcb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0202 	orr.w	r2, r2, #2
 8007fa2:	60da      	str	r2, [r3, #12]
      break;
 8007fa4:	e01b      	b.n	8007fde <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0204 	orr.w	r2, r2, #4
 8007fb4:	60da      	str	r2, [r3, #12]
      break;
 8007fb6:	e012      	b.n	8007fde <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0208 	orr.w	r2, r2, #8
 8007fc6:	60da      	str	r2, [r3, #12]
      break;
 8007fc8:	e009      	b.n	8007fde <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0210 	orr.w	r2, r2, #16
 8007fd8:	60da      	str	r2, [r3, #12]
      break;
 8007fda:	e000      	b.n	8007fde <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007fdc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 ff8a 	bl	8008f00 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b06      	cmp	r3, #6
 8007ffc:	d007      	beq.n	800800e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b02      	cmp	r3, #2
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b02      	cmp	r3, #2
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0202 	mvn.w	r2, #2
 8008044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fb1e 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb10 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb21 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b04      	cmp	r3, #4
 8008080:	d122      	bne.n	80080c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b04      	cmp	r3, #4
 800808e:	d11b      	bne.n	80080c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0204 	mvn.w	r2, #4
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 faf4 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fae6 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 faf7 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d122      	bne.n	800811c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d11b      	bne.n	800811c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0208 	mvn.w	r2, #8
 80080ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2204      	movs	r2, #4
 80080f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 faca 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 8008108:	e005      	b.n	8008116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fabc 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 facd 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b10      	cmp	r3, #16
 8008128:	d122      	bne.n	8008170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b10      	cmp	r3, #16
 8008136:	d11b      	bne.n	8008170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0210 	mvn.w	r2, #16
 8008140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2208      	movs	r2, #8
 8008146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 faa0 	bl	800869c <HAL_TIM_IC_CaptureCallback>
 800815c:	e005      	b.n	800816a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa92 	bl	8008688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 faa3 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b01      	cmp	r3, #1
 800817c:	d10e      	bne.n	800819c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	d107      	bne.n	800819c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f06f 0201 	mvn.w	r2, #1
 8008194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa6c 	bl	8008674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b80      	cmp	r3, #128	; 0x80
 80081a8:	d10e      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b4:	2b80      	cmp	r3, #128	; 0x80
 80081b6:	d107      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 ff9a 	bl	80090fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d10e      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b40      	cmp	r3, #64	; 0x40
 80081e2:	d107      	bne.n	80081f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa68 	bl	80086c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d10e      	bne.n	8008220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0320 	and.w	r3, r3, #32
 800820c:	2b20      	cmp	r3, #32
 800820e:	d107      	bne.n	8008220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0220 	mvn.w	r2, #32
 8008218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 ff64 	bl	80090e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <HAL_TIM_IC_ConfigChannel+0x1a>
 800823e:	2302      	movs	r3, #2
 8008240:	e08a      	b.n	8008358 <HAL_TIM_IC_ConfigChannel+0x130>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11b      	bne.n	8008290 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f000 fc86 	bl	8008b78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 020c 	bic.w	r2, r2, #12
 800827a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6999      	ldr	r1, [r3, #24]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	619a      	str	r2, [r3, #24]
 800828e:	e05a      	b.n	8008346 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b04      	cmp	r3, #4
 8008294:	d11c      	bne.n	80082d0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6819      	ldr	r1, [r3, #0]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f000 fd0a 	bl	8008cbe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6999      	ldr	r1, [r3, #24]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	021a      	lsls	r2, r3, #8
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	619a      	str	r2, [r3, #24]
 80082ce:	e03a      	b.n	8008346 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d11b      	bne.n	800830e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6819      	ldr	r1, [r3, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f000 fd57 	bl	8008d98 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69da      	ldr	r2, [r3, #28]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 020c 	bic.w	r2, r2, #12
 80082f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69d9      	ldr	r1, [r3, #28]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	61da      	str	r2, [r3, #28]
 800830c:	e01b      	b.n	8008346 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f000 fd77 	bl	8008e10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008330:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69d9      	ldr	r1, [r3, #28]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	021a      	lsls	r2, r3, #8
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008376:	2302      	movs	r3, #2
 8008378:	e0b4      	b.n	80084e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b0c      	cmp	r3, #12
 800838e:	f200 809f 	bhi.w	80084d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008392:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083cd 	.word	0x080083cd
 800839c:	080084d1 	.word	0x080084d1
 80083a0:	080084d1 	.word	0x080084d1
 80083a4:	080084d1 	.word	0x080084d1
 80083a8:	0800840d 	.word	0x0800840d
 80083ac:	080084d1 	.word	0x080084d1
 80083b0:	080084d1 	.word	0x080084d1
 80083b4:	080084d1 	.word	0x080084d1
 80083b8:	0800844f 	.word	0x0800844f
 80083bc:	080084d1 	.word	0x080084d1
 80083c0:	080084d1 	.word	0x080084d1
 80083c4:	080084d1 	.word	0x080084d1
 80083c8:	0800848f 	.word	0x0800848f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fa20 	bl	8008818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	699a      	ldr	r2, [r3, #24]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0208 	orr.w	r2, r2, #8
 80083e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0204 	bic.w	r2, r2, #4
 80083f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6999      	ldr	r1, [r3, #24]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	619a      	str	r2, [r3, #24]
      break;
 800840a:	e062      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fa70 	bl	80088f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6999      	ldr	r1, [r3, #24]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	021a      	lsls	r2, r3, #8
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	619a      	str	r2, [r3, #24]
      break;
 800844c:	e041      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fac5 	bl	80089e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69da      	ldr	r2, [r3, #28]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0208 	orr.w	r2, r2, #8
 8008468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0204 	bic.w	r2, r2, #4
 8008478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69d9      	ldr	r1, [r3, #28]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	61da      	str	r2, [r3, #28]
      break;
 800848c:	e021      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fb19 	bl	8008acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69da      	ldr	r2, [r3, #28]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69d9      	ldr	r1, [r3, #28]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	021a      	lsls	r2, r3, #8
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	61da      	str	r2, [r3, #28]
      break;
 80084ce:	e000      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80084d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIM_ConfigClockSource+0x18>
 8008500:	2302      	movs	r3, #2
 8008502:	e0b3      	b.n	800866c <HAL_TIM_ConfigClockSource+0x180>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800852a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853c:	d03e      	beq.n	80085bc <HAL_TIM_ConfigClockSource+0xd0>
 800853e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008542:	f200 8087 	bhi.w	8008654 <HAL_TIM_ConfigClockSource+0x168>
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854a:	f000 8085 	beq.w	8008658 <HAL_TIM_ConfigClockSource+0x16c>
 800854e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008552:	d87f      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 8008554:	2b70      	cmp	r3, #112	; 0x70
 8008556:	d01a      	beq.n	800858e <HAL_TIM_ConfigClockSource+0xa2>
 8008558:	2b70      	cmp	r3, #112	; 0x70
 800855a:	d87b      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 800855c:	2b60      	cmp	r3, #96	; 0x60
 800855e:	d050      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0x116>
 8008560:	2b60      	cmp	r3, #96	; 0x60
 8008562:	d877      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 8008564:	2b50      	cmp	r3, #80	; 0x50
 8008566:	d03c      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0xf6>
 8008568:	2b50      	cmp	r3, #80	; 0x50
 800856a:	d873      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d058      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x136>
 8008570:	2b40      	cmp	r3, #64	; 0x40
 8008572:	d86f      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 8008574:	2b30      	cmp	r3, #48	; 0x30
 8008576:	d064      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x156>
 8008578:	2b30      	cmp	r3, #48	; 0x30
 800857a:	d86b      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d060      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x156>
 8008580:	2b20      	cmp	r3, #32
 8008582:	d867      	bhi.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d05c      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x156>
 8008588:	2b10      	cmp	r3, #16
 800858a:	d05a      	beq.n	8008642 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800858c:	e062      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6899      	ldr	r1, [r3, #8]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f000 fc8f 	bl	8008ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	609a      	str	r2, [r3, #8]
      break;
 80085ba:	e04e      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	6899      	ldr	r1, [r3, #8]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f000 fc78 	bl	8008ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085de:	609a      	str	r2, [r3, #8]
      break;
 80085e0:	e03b      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6859      	ldr	r1, [r3, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f000 fb36 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2150      	movs	r1, #80	; 0x50
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fc45 	bl	8008e8a <TIM_ITRx_SetConfig>
      break;
 8008600:	e02b      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	461a      	mov	r2, r3
 8008610:	f000 fb92 	bl	8008d38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2160      	movs	r1, #96	; 0x60
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fc35 	bl	8008e8a <TIM_ITRx_SetConfig>
      break;
 8008620:	e01b      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6859      	ldr	r1, [r3, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	461a      	mov	r2, r3
 8008630:	f000 fb16 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2140      	movs	r1, #64	; 0x40
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fc25 	bl	8008e8a <TIM_ITRx_SetConfig>
      break;
 8008640:	e00b      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f000 fc1c 	bl	8008e8a <TIM_ITRx_SetConfig>
      break;
 8008652:	e002      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008654:	bf00      	nop
 8008656:	e000      	b.n	800865a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a40      	ldr	r2, [pc, #256]	; (80087ec <TIM_Base_SetConfig+0x114>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d013      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f6:	d00f      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a3d      	ldr	r2, [pc, #244]	; (80087f0 <TIM_Base_SetConfig+0x118>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00b      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a3c      	ldr	r2, [pc, #240]	; (80087f4 <TIM_Base_SetConfig+0x11c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d007      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a3b      	ldr	r2, [pc, #236]	; (80087f8 <TIM_Base_SetConfig+0x120>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a3a      	ldr	r2, [pc, #232]	; (80087fc <TIM_Base_SetConfig+0x124>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d108      	bne.n	800872a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a2f      	ldr	r2, [pc, #188]	; (80087ec <TIM_Base_SetConfig+0x114>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d02b      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008738:	d027      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2c      	ldr	r2, [pc, #176]	; (80087f0 <TIM_Base_SetConfig+0x118>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d023      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2b      	ldr	r2, [pc, #172]	; (80087f4 <TIM_Base_SetConfig+0x11c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d01f      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <TIM_Base_SetConfig+0x120>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01b      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a29      	ldr	r2, [pc, #164]	; (80087fc <TIM_Base_SetConfig+0x124>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d017      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a28      	ldr	r2, [pc, #160]	; (8008800 <TIM_Base_SetConfig+0x128>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a27      	ldr	r2, [pc, #156]	; (8008804 <TIM_Base_SetConfig+0x12c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00f      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a26      	ldr	r2, [pc, #152]	; (8008808 <TIM_Base_SetConfig+0x130>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00b      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a25      	ldr	r2, [pc, #148]	; (800880c <TIM_Base_SetConfig+0x134>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d007      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a24      	ldr	r2, [pc, #144]	; (8008810 <TIM_Base_SetConfig+0x138>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d003      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a23      	ldr	r2, [pc, #140]	; (8008814 <TIM_Base_SetConfig+0x13c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d108      	bne.n	800879c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <TIM_Base_SetConfig+0x114>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_Base_SetConfig+0xf8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <TIM_Base_SetConfig+0x124>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d103      	bne.n	80087d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	615a      	str	r2, [r3, #20]
}
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40010400 	.word	0x40010400
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800
 800880c:	40001800 	.word	0x40001800
 8008810:	40001c00 	.word	0x40001c00
 8008814:	40002000 	.word	0x40002000

08008818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f023 0201 	bic.w	r2, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0303 	bic.w	r3, r3, #3
 800884e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f023 0302 	bic.w	r3, r3, #2
 8008860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a20      	ldr	r2, [pc, #128]	; (80088f0 <TIM_OC1_SetConfig+0xd8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC1_SetConfig+0x64>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <TIM_OC1_SetConfig+0xdc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d10c      	bne.n	8008896 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f023 0308 	bic.w	r3, r3, #8
 8008882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	4313      	orrs	r3, r2
 800888c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 0304 	bic.w	r3, r3, #4
 8008894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <TIM_OC1_SetConfig+0xd8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_OC1_SetConfig+0x8e>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a14      	ldr	r2, [pc, #80]	; (80088f4 <TIM_OC1_SetConfig+0xdc>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d111      	bne.n	80088ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	4313      	orrs	r3, r2
 80088be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	621a      	str	r2, [r3, #32]
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	40010000 	.word	0x40010000
 80088f4:	40010400 	.word	0x40010400

080088f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f023 0210 	bic.w	r2, r3, #16
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800892e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f023 0320 	bic.w	r3, r3, #32
 8008942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a22      	ldr	r2, [pc, #136]	; (80089dc <TIM_OC2_SetConfig+0xe4>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <TIM_OC2_SetConfig+0x68>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <TIM_OC2_SetConfig+0xe8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10d      	bne.n	800897c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	4313      	orrs	r3, r2
 8008972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800897a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a17      	ldr	r2, [pc, #92]	; (80089dc <TIM_OC2_SetConfig+0xe4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_OC2_SetConfig+0x94>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a16      	ldr	r2, [pc, #88]	; (80089e0 <TIM_OC2_SetConfig+0xe8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d113      	bne.n	80089b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800899a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40010400 	.word	0x40010400

080089e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69db      	ldr	r3, [r3, #28]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a21      	ldr	r2, [pc, #132]	; (8008ac4 <TIM_OC3_SetConfig+0xe0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_OC3_SetConfig+0x66>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a20      	ldr	r2, [pc, #128]	; (8008ac8 <TIM_OC3_SetConfig+0xe4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d10d      	bne.n	8008a66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a16      	ldr	r2, [pc, #88]	; (8008ac4 <TIM_OC3_SetConfig+0xe0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d003      	beq.n	8008a76 <TIM_OC3_SetConfig+0x92>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <TIM_OC3_SetConfig+0xe4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d113      	bne.n	8008a9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	011b      	lsls	r3, r3, #4
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	621a      	str	r2, [r3, #32]
}
 8008ab8:	bf00      	nop
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40010400 	.word	0x40010400

08008acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	031b      	lsls	r3, r3, #12
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a12      	ldr	r2, [pc, #72]	; (8008b70 <TIM_OC4_SetConfig+0xa4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d003      	beq.n	8008b34 <TIM_OC4_SetConfig+0x68>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a11      	ldr	r2, [pc, #68]	; (8008b74 <TIM_OC4_SetConfig+0xa8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d109      	bne.n	8008b48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	019b      	lsls	r3, r3, #6
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	621a      	str	r2, [r3, #32]
}
 8008b62:	bf00      	nop
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	40010000 	.word	0x40010000
 8008b74:	40010400 	.word	0x40010400

08008b78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	f023 0201 	bic.w	r2, r3, #1
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4a28      	ldr	r2, [pc, #160]	; (8008c44 <TIM_TI1_SetConfig+0xcc>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d01b      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bac:	d017      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a25      	ldr	r2, [pc, #148]	; (8008c48 <TIM_TI1_SetConfig+0xd0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d013      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a24      	ldr	r2, [pc, #144]	; (8008c4c <TIM_TI1_SetConfig+0xd4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d00f      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a23      	ldr	r2, [pc, #140]	; (8008c50 <TIM_TI1_SetConfig+0xd8>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00b      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a22      	ldr	r2, [pc, #136]	; (8008c54 <TIM_TI1_SetConfig+0xdc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d007      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a21      	ldr	r2, [pc, #132]	; (8008c58 <TIM_TI1_SetConfig+0xe0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d003      	beq.n	8008bde <TIM_TI1_SetConfig+0x66>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4a20      	ldr	r2, [pc, #128]	; (8008c5c <TIM_TI1_SetConfig+0xe4>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d101      	bne.n	8008be2 <TIM_TI1_SetConfig+0x6a>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <TIM_TI1_SetConfig+0x6c>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d008      	beq.n	8008bfa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f023 0303 	bic.w	r3, r3, #3
 8008bee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	e003      	b.n	8008c02 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	011b      	lsls	r3, r3, #4
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f023 030a 	bic.w	r3, r3, #10
 8008c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f003 030a 	and.w	r3, r3, #10
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40010000 	.word	0x40010000
 8008c48:	40000400 	.word	0x40000400
 8008c4c:	40000800 	.word	0x40000800
 8008c50:	40000c00 	.word	0x40000c00
 8008c54:	40010400 	.word	0x40010400
 8008c58:	40014000 	.word	0x40014000
 8008c5c:	40001800 	.word	0x40001800

08008c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f023 030a 	bic.w	r3, r3, #10
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b087      	sub	sp, #28
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f023 0210 	bic.w	r2, r3, #16
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	021b      	lsls	r3, r3, #8
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	031b      	lsls	r3, r3, #12
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	621a      	str	r2, [r3, #32]
}
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b087      	sub	sp, #28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	f023 0210 	bic.w	r2, r3, #16
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	031b      	lsls	r3, r3, #12
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	621a      	str	r2, [r3, #32]
}
 8008d8c:	bf00      	nop
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 0303 	bic.w	r3, r3, #3
 8008dc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	621a      	str	r2, [r3, #32]
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	031b      	lsls	r3, r3, #12
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	031b      	lsls	r3, r3, #12
 8008e68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f043 0307 	orr.w	r3, r3, #7
 8008eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	609a      	str	r2, [r3, #8]
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	021a      	lsls	r2, r3, #8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	609a      	str	r2, [r3, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	371c      	adds	r7, #28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f003 031f 	and.w	r3, r3, #31
 8008f12:	2201      	movs	r2, #1
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a1a      	ldr	r2, [r3, #32]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	401a      	ands	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a1a      	ldr	r2, [r3, #32]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	fa01 f303 	lsl.w	r3, r1, r3
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
}
 8008f3e:	bf00      	nop
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e05a      	b.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a21      	ldr	r2, [pc, #132]	; (8009028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d022      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb0:	d01d      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a1d      	ldr	r2, [pc, #116]	; (800902c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d018      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00e      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d009      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a17      	ldr	r2, [pc, #92]	; (800903c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a15      	ldr	r2, [pc, #84]	; (8009040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d10c      	bne.n	8009008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40010000 	.word	0x40010000
 800902c:	40000400 	.word	0x40000400
 8009030:	40000800 	.word	0x40000800
 8009034:	40000c00 	.word	0x40000c00
 8009038:	40010400 	.word	0x40010400
 800903c:	40014000 	.word	0x40014000
 8009040:	40001800 	.word	0x40001800

08009044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800905c:	2302      	movs	r3, #2
 800905e:	e03d      	b.n	80090dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e03f      	b.n	80091a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fa ffe6 	bl	8004108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2224      	movs	r2, #36	; 0x24
 8009140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fc6d 	bl	8009a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	695a      	ldr	r2, [r3, #20]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b088      	sub	sp, #32
 80091ae:	af02      	add	r7, sp, #8
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	4613      	mov	r3, r2
 80091b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	f040 8083 	bne.w	80092d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <HAL_UART_Transmit+0x2e>
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e07b      	b.n	80092d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d101      	bne.n	80091ea <HAL_UART_Transmit+0x40>
 80091e6:	2302      	movs	r3, #2
 80091e8:	e074      	b.n	80092d4 <HAL_UART_Transmit+0x12a>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2221      	movs	r2, #33	; 0x21
 80091fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009200:	f7fb fd70 	bl	8004ce4 <HAL_GetTick>
 8009204:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800921a:	e042      	b.n	80092a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009232:	d122      	bne.n	800927a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2200      	movs	r2, #0
 800923c:	2180      	movs	r1, #128	; 0x80
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fa76 	bl	8009730 <UART_WaitOnFlagUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e042      	b.n	80092d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009260:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	3302      	adds	r3, #2
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	e017      	b.n	80092a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	3301      	adds	r3, #1
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	e013      	b.n	80092a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2200      	movs	r2, #0
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 fa53 	bl	8009730 <UART_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e01f      	b.n	80092d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	60ba      	str	r2, [r7, #8]
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1b7      	bne.n	800921c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2200      	movs	r2, #0
 80092b4:	2140      	movs	r1, #64	; 0x40
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fa3a 	bl	8009730 <UART_WaitOnFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e006      	b.n	80092d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e000      	b.n	80092d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80092d2:	2302      	movs	r3, #2
  }
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4613      	mov	r3, r2
 80092e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	d166      	bne.n	80093c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_UART_Receive_DMA+0x26>
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e05f      	b.n	80093c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_UART_Receive_DMA+0x38>
 8009310:	2302      	movs	r3, #2
 8009312:	e058      	b.n	80093c6 <HAL_UART_Receive_DMA+0xea>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	88fa      	ldrh	r2, [r7, #6]
 8009326:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2222      	movs	r2, #34	; 0x22
 8009332:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933a:	4a25      	ldr	r2, [pc, #148]	; (80093d0 <HAL_UART_Receive_DMA+0xf4>)
 800933c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009342:	4a24      	ldr	r2, [pc, #144]	; (80093d4 <HAL_UART_Receive_DMA+0xf8>)
 8009344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	4a23      	ldr	r2, [pc, #140]	; (80093d8 <HAL_UART_Receive_DMA+0xfc>)
 800934c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009352:	2200      	movs	r2, #0
 8009354:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3304      	adds	r3, #4
 8009366:	4619      	mov	r1, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	f7fc fd27 	bl	8005dc0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009372:	2300      	movs	r3, #0
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800939e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	695a      	ldr	r2, [r3, #20]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0201 	orr.w	r2, r2, #1
 80093ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	e000      	b.n	80093c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80093c4:	2302      	movs	r3, #2
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	08009619 	.word	0x08009619
 80093d4:	08009681 	.word	0x08009681
 80093d8:	0800969d 	.word	0x0800969d

080093dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10d      	bne.n	800942e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d008      	beq.n	800942e <HAL_UART_IRQHandler+0x52>
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa82 	bl	8009930 <UART_Receive_IT>
      return;
 800942c:	e0d0      	b.n	80095d0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80b0 	beq.w	8009596 <HAL_UART_IRQHandler+0x1ba>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d105      	bne.n	800944c <HAL_UART_IRQHandler+0x70>
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80a5 	beq.w	8009596 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <HAL_UART_IRQHandler+0x90>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009464:	f043 0201 	orr.w	r2, r3, #1
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <HAL_UART_IRQHandler+0xb0>
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009484:	f043 0202 	orr.w	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <HAL_UART_IRQHandler+0xd0>
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a4:	f043 0204 	orr.w	r2, r3, #4
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00f      	beq.n	80094d6 <HAL_UART_IRQHandler+0xfa>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <HAL_UART_IRQHandler+0xee>
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d005      	beq.n	80094d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ce:	f043 0208 	orr.w	r2, r3, #8
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d077      	beq.n	80095ce <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f003 0320 	and.w	r3, r3, #32
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <HAL_UART_IRQHandler+0x11c>
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa1c 	bl	8009930 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	bf0c      	ite	eq
 8009506:	2301      	moveq	r3, #1
 8009508:	2300      	movne	r3, #0
 800950a:	b2db      	uxtb	r3, r3
 800950c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	f003 0308 	and.w	r3, r3, #8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <HAL_UART_IRQHandler+0x144>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d031      	beq.n	8009584 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f965 	bl	80097f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009530:	2b40      	cmp	r3, #64	; 0x40
 8009532:	d123      	bne.n	800957c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695a      	ldr	r2, [r3, #20]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009542:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009548:	2b00      	cmp	r3, #0
 800954a:	d013      	beq.n	8009574 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009550:	4a21      	ldr	r2, [pc, #132]	; (80095d8 <HAL_UART_IRQHandler+0x1fc>)
 8009552:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	4618      	mov	r0, r3
 800955a:	f7fc fc89 	bl	8005e70 <HAL_DMA_Abort_IT>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d016      	beq.n	8009592 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800956e:	4610      	mov	r0, r2
 8009570:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009572:	e00e      	b.n	8009592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f845 	bl	8009604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957a:	e00a      	b.n	8009592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f841 	bl	8009604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009582:	e006      	b.n	8009592 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f83d 	bl	8009604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009590:	e01d      	b.n	80095ce <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009592:	bf00      	nop
    return;
 8009594:	e01b      	b.n	80095ce <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959c:	2b00      	cmp	r3, #0
 800959e:	d008      	beq.n	80095b2 <HAL_UART_IRQHandler+0x1d6>
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f952 	bl	8009854 <UART_Transmit_IT>
    return;
 80095b0:	e00e      	b.n	80095d0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d009      	beq.n	80095d0 <HAL_UART_IRQHandler+0x1f4>
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f99a 	bl	8009900 <UART_EndTransmit_IT>
    return;
 80095cc:	e000      	b.n	80095d0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80095ce:	bf00      	nop
  }
}
 80095d0:	3720      	adds	r7, #32
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	0800982d 	.word	0x0800982d

080095dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11e      	bne.n	8009672 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009648:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0201 	bic.w	r2, r2, #1
 8009658:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	695a      	ldr	r2, [r3, #20]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009668:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2220      	movs	r2, #32
 800966e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7f9 fb7e 	bl	8002d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff ffae 	bl	80095f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009694:	bf00      	nop
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b8:	2b80      	cmp	r3, #128	; 0x80
 80096ba:	bf0c      	ite	eq
 80096bc:	2301      	moveq	r3, #1
 80096be:	2300      	movne	r3, #0
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b21      	cmp	r3, #33	; 0x21
 80096ce:	d108      	bne.n	80096e2 <UART_DMAError+0x46>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80096dc:	68b8      	ldr	r0, [r7, #8]
 80096de:	f000 f871 	bl	80097c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b22      	cmp	r3, #34	; 0x22
 8009702:	d108      	bne.n	8009716 <UART_DMAError+0x7a>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d005      	beq.n	8009716 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2200      	movs	r2, #0
 800970e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009710:	68b8      	ldr	r0, [r7, #8]
 8009712:	f000 f86d 	bl	80097f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	f043 0210 	orr.w	r2, r3, #16
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009722:	68b8      	ldr	r0, [r7, #8]
 8009724:	f7ff ff6e 	bl	8009604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	4613      	mov	r3, r2
 800973e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009740:	e02c      	b.n	800979c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009748:	d028      	beq.n	800979c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d007      	beq.n	8009760 <UART_WaitOnFlagUntilTimeout+0x30>
 8009750:	f7fb fac8 	bl	8004ce4 <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	429a      	cmp	r2, r3
 800975e:	d21d      	bcs.n	800979c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800976e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 0201 	bic.w	r2, r2, #1
 800977e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e00f      	b.n	80097bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4013      	ands	r3, r2
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	bf0c      	ite	eq
 80097ac:	2301      	moveq	r3, #1
 80097ae:	2300      	movne	r3, #0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d0c3      	beq.n	8009742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80097da:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009806:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	695a      	ldr	r2, [r3, #20]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0201 	bic.w	r2, r2, #1
 8009816:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2220      	movs	r2, #32
 800981c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fedc 	bl	8009604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b21      	cmp	r3, #33	; 0x21
 8009866:	d144      	bne.n	80098f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009870:	d11a      	bne.n	80098a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009886:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	1c9a      	adds	r2, r3, #2
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	621a      	str	r2, [r3, #32]
 800989a:	e00e      	b.n	80098ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	621a      	str	r2, [r3, #32]
 80098a6:	e008      	b.n	80098ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	1c59      	adds	r1, r3, #1
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6211      	str	r1, [r2, #32]
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	4619      	mov	r1, r3
 80098c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10f      	bne.n	80098ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	e000      	b.n	80098f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80098f2:	2302      	movs	r3, #2
  }
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009916:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2220      	movs	r2, #32
 800991c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff fe5b 	bl	80095dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b22      	cmp	r3, #34	; 0x22
 8009942:	d171      	bne.n	8009a28 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800994c:	d123      	bne.n	8009996 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10e      	bne.n	800997a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	b29b      	uxth	r3, r3
 8009964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009968:	b29a      	uxth	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009972:	1c9a      	adds	r2, r3, #2
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	; 0x28
 8009978:	e029      	b.n	80099ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	b29b      	uxth	r3, r3
 8009982:	b2db      	uxtb	r3, r3
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	629a      	str	r2, [r3, #40]	; 0x28
 8009994:	e01b      	b.n	80099ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6858      	ldr	r0, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a8:	1c59      	adds	r1, r3, #1
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6291      	str	r1, [r2, #40]	; 0x28
 80099ae:	b2c2      	uxtb	r2, r0
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e00c      	b.n	80099ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c0:	1c58      	adds	r0, r3, #1
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	6288      	str	r0, [r1, #40]	; 0x28
 80099c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	4619      	mov	r1, r3
 80099dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d120      	bne.n	8009a24 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0220 	bic.w	r2, r2, #32
 80099f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	695a      	ldr	r2, [r3, #20]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7f9 f9aa 	bl	8002d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	e002      	b.n	8009a2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e000      	b.n	8009a2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009a28:	2302      	movs	r3, #2
  }
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	b0bd      	sub	sp, #244	; 0xf4
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a50:	68d9      	ldr	r1, [r3, #12]
 8009a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	ea40 0301 	orr.w	r3, r0, r1
 8009a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	431a      	orrs	r2, r3
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a8c:	f021 010c 	bic.w	r1, r1, #12
 8009a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aae:	6999      	ldr	r1, [r3, #24]
 8009ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	ea40 0301 	orr.w	r3, r0, r1
 8009aba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac6:	f040 81a5 	bne.w	8009e14 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	4bcd      	ldr	r3, [pc, #820]	; (8009e08 <UART_SetConfig+0x3d4>)
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d006      	beq.n	8009ae4 <UART_SetConfig+0xb0>
 8009ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	4bcb      	ldr	r3, [pc, #812]	; (8009e0c <UART_SetConfig+0x3d8>)
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	f040 80cb 	bne.w	8009c7a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ae4:	f7fd fcac 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 8009ae8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009aec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009af0:	461c      	mov	r4, r3
 8009af2:	f04f 0500 	mov.w	r5, #0
 8009af6:	4622      	mov	r2, r4
 8009af8:	462b      	mov	r3, r5
 8009afa:	1891      	adds	r1, r2, r2
 8009afc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009b00:	415b      	adcs	r3, r3
 8009b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009b0a:	1912      	adds	r2, r2, r4
 8009b0c:	eb45 0303 	adc.w	r3, r5, r3
 8009b10:	f04f 0000 	mov.w	r0, #0
 8009b14:	f04f 0100 	mov.w	r1, #0
 8009b18:	00d9      	lsls	r1, r3, #3
 8009b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b1e:	00d0      	lsls	r0, r2, #3
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	1911      	adds	r1, r2, r4
 8009b26:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009b2a:	416b      	adcs	r3, r5
 8009b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f04f 0300 	mov.w	r3, #0
 8009b3c:	1891      	adds	r1, r2, r2
 8009b3e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009b42:	415b      	adcs	r3, r3
 8009b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b48:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009b4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009b50:	f7f7 f852 	bl	8000bf8 <__aeabi_uldivmod>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4bad      	ldr	r3, [pc, #692]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b5e:	095b      	lsrs	r3, r3, #5
 8009b60:	011e      	lsls	r6, r3, #4
 8009b62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b66:	461c      	mov	r4, r3
 8009b68:	f04f 0500 	mov.w	r5, #0
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	1891      	adds	r1, r2, r2
 8009b72:	67b9      	str	r1, [r7, #120]	; 0x78
 8009b74:	415b      	adcs	r3, r3
 8009b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b78:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009b7c:	1912      	adds	r2, r2, r4
 8009b7e:	eb45 0303 	adc.w	r3, r5, r3
 8009b82:	f04f 0000 	mov.w	r0, #0
 8009b86:	f04f 0100 	mov.w	r1, #0
 8009b8a:	00d9      	lsls	r1, r3, #3
 8009b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b90:	00d0      	lsls	r0, r2, #3
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	1911      	adds	r1, r2, r4
 8009b98:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009b9c:	416b      	adcs	r3, r5
 8009b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f04f 0300 	mov.w	r3, #0
 8009bae:	1891      	adds	r1, r2, r2
 8009bb0:	6739      	str	r1, [r7, #112]	; 0x70
 8009bb2:	415b      	adcs	r3, r3
 8009bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8009bb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009bba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009bbe:	f7f7 f81b 	bl	8000bf8 <__aeabi_uldivmod>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4b92      	ldr	r3, [pc, #584]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	2164      	movs	r1, #100	; 0x64
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	3332      	adds	r3, #50	; 0x32
 8009bda:	4a8d      	ldr	r2, [pc, #564]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009be8:	441e      	add	r6, r3
 8009bea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f04f 0100 	mov.w	r1, #0
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	1894      	adds	r4, r2, r2
 8009bfa:	66bc      	str	r4, [r7, #104]	; 0x68
 8009bfc:	415b      	adcs	r3, r3
 8009bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009c04:	1812      	adds	r2, r2, r0
 8009c06:	eb41 0303 	adc.w	r3, r1, r3
 8009c0a:	f04f 0400 	mov.w	r4, #0
 8009c0e:	f04f 0500 	mov.w	r5, #0
 8009c12:	00dd      	lsls	r5, r3, #3
 8009c14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c18:	00d4      	lsls	r4, r2, #3
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	1814      	adds	r4, r2, r0
 8009c20:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009c24:	414b      	adcs	r3, r1
 8009c26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	461a      	mov	r2, r3
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	1891      	adds	r1, r2, r2
 8009c38:	6639      	str	r1, [r7, #96]	; 0x60
 8009c3a:	415b      	adcs	r3, r3
 8009c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c46:	f7f6 ffd7 	bl	8000bf8 <__aeabi_uldivmod>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4b70      	ldr	r3, [pc, #448]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009c50:	fba3 1302 	umull	r1, r3, r3, r2
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	2164      	movs	r1, #100	; 0x64
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	3332      	adds	r3, #50	; 0x32
 8009c62:	4a6b      	ldr	r2, [pc, #428]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009c64:	fba2 2303 	umull	r2, r3, r2, r3
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	f003 0207 	and.w	r2, r3, #7
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4432      	add	r2, r6
 8009c76:	609a      	str	r2, [r3, #8]
 8009c78:	e26d      	b.n	800a156 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c7a:	f7fd fbcd 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 8009c7e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c86:	461c      	mov	r4, r3
 8009c88:	f04f 0500 	mov.w	r5, #0
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	1891      	adds	r1, r2, r2
 8009c92:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c94:	415b      	adcs	r3, r3
 8009c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c9c:	1912      	adds	r2, r2, r4
 8009c9e:	eb45 0303 	adc.w	r3, r5, r3
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f04f 0100 	mov.w	r1, #0
 8009caa:	00d9      	lsls	r1, r3, #3
 8009cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cb0:	00d0      	lsls	r0, r2, #3
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	1911      	adds	r1, r2, r4
 8009cb8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009cbc:	416b      	adcs	r3, r5
 8009cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	f04f 0300 	mov.w	r3, #0
 8009cce:	1891      	adds	r1, r2, r2
 8009cd0:	6539      	str	r1, [r7, #80]	; 0x50
 8009cd2:	415b      	adcs	r3, r3
 8009cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8009cd6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009cda:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009cde:	f7f6 ff8b 	bl	8000bf8 <__aeabi_uldivmod>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4b4a      	ldr	r3, [pc, #296]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8009cec:	095b      	lsrs	r3, r3, #5
 8009cee:	011e      	lsls	r6, r3, #4
 8009cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cf4:	461c      	mov	r4, r3
 8009cf6:	f04f 0500 	mov.w	r5, #0
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	1891      	adds	r1, r2, r2
 8009d00:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d02:	415b      	adcs	r3, r3
 8009d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d0a:	1912      	adds	r2, r2, r4
 8009d0c:	eb45 0303 	adc.w	r3, r5, r3
 8009d10:	f04f 0000 	mov.w	r0, #0
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	00d9      	lsls	r1, r3, #3
 8009d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d1e:	00d0      	lsls	r0, r2, #3
 8009d20:	4602      	mov	r2, r0
 8009d22:	460b      	mov	r3, r1
 8009d24:	1911      	adds	r1, r2, r4
 8009d26:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009d2a:	416b      	adcs	r3, r5
 8009d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	1891      	adds	r1, r2, r2
 8009d3e:	6439      	str	r1, [r7, #64]	; 0x40
 8009d40:	415b      	adcs	r3, r3
 8009d42:	647b      	str	r3, [r7, #68]	; 0x44
 8009d44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d48:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009d4c:	f7f6 ff54 	bl	8000bf8 <__aeabi_uldivmod>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009d56:	fba3 1302 	umull	r1, r3, r3, r2
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	2164      	movs	r1, #100	; 0x64
 8009d5e:	fb01 f303 	mul.w	r3, r1, r3
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	3332      	adds	r3, #50	; 0x32
 8009d68:	4a29      	ldr	r2, [pc, #164]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d76:	441e      	add	r6, r3
 8009d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f04f 0100 	mov.w	r1, #0
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	1894      	adds	r4, r2, r2
 8009d88:	63bc      	str	r4, [r7, #56]	; 0x38
 8009d8a:	415b      	adcs	r3, r3
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d92:	1812      	adds	r2, r2, r0
 8009d94:	eb41 0303 	adc.w	r3, r1, r3
 8009d98:	f04f 0400 	mov.w	r4, #0
 8009d9c:	f04f 0500 	mov.w	r5, #0
 8009da0:	00dd      	lsls	r5, r3, #3
 8009da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009da6:	00d4      	lsls	r4, r2, #3
 8009da8:	4622      	mov	r2, r4
 8009daa:	462b      	mov	r3, r5
 8009dac:	1814      	adds	r4, r2, r0
 8009dae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009db2:	414b      	adcs	r3, r1
 8009db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f04f 0300 	mov.w	r3, #0
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	6339      	str	r1, [r7, #48]	; 0x30
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	637b      	str	r3, [r7, #52]	; 0x34
 8009dcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009dd0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009dd4:	f7f6 ff10 	bl	8000bf8 <__aeabi_uldivmod>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4b0c      	ldr	r3, [pc, #48]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009dde:	fba3 1302 	umull	r1, r3, r3, r2
 8009de2:	095b      	lsrs	r3, r3, #5
 8009de4:	2164      	movs	r1, #100	; 0x64
 8009de6:	fb01 f303 	mul.w	r3, r1, r3
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	00db      	lsls	r3, r3, #3
 8009dee:	3332      	adds	r3, #50	; 0x32
 8009df0:	4a07      	ldr	r2, [pc, #28]	; (8009e10 <UART_SetConfig+0x3dc>)
 8009df2:	fba2 2303 	umull	r2, r3, r2, r3
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	f003 0207 	and.w	r2, r3, #7
 8009dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4432      	add	r2, r6
 8009e04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009e06:	e1a6      	b.n	800a156 <UART_SetConfig+0x722>
 8009e08:	40011000 	.word	0x40011000
 8009e0c:	40011400 	.word	0x40011400
 8009e10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	4bd1      	ldr	r3, [pc, #836]	; (800a160 <UART_SetConfig+0x72c>)
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d006      	beq.n	8009e2e <UART_SetConfig+0x3fa>
 8009e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4bcf      	ldr	r3, [pc, #828]	; (800a164 <UART_SetConfig+0x730>)
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	f040 80ca 	bne.w	8009fc2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e2e:	f7fd fb07 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 8009e32:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e3a:	461c      	mov	r4, r3
 8009e3c:	f04f 0500 	mov.w	r5, #0
 8009e40:	4622      	mov	r2, r4
 8009e42:	462b      	mov	r3, r5
 8009e44:	1891      	adds	r1, r2, r2
 8009e46:	62b9      	str	r1, [r7, #40]	; 0x28
 8009e48:	415b      	adcs	r3, r3
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e50:	1912      	adds	r2, r2, r4
 8009e52:	eb45 0303 	adc.w	r3, r5, r3
 8009e56:	f04f 0000 	mov.w	r0, #0
 8009e5a:	f04f 0100 	mov.w	r1, #0
 8009e5e:	00d9      	lsls	r1, r3, #3
 8009e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e64:	00d0      	lsls	r0, r2, #3
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	eb12 0a04 	adds.w	sl, r2, r4
 8009e6e:	eb43 0b05 	adc.w	fp, r3, r5
 8009e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f04f 0100 	mov.w	r1, #0
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	008b      	lsls	r3, r1, #2
 8009e88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e8c:	0082      	lsls	r2, r0, #2
 8009e8e:	4650      	mov	r0, sl
 8009e90:	4659      	mov	r1, fp
 8009e92:	f7f6 feb1 	bl	8000bf8 <__aeabi_uldivmod>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4bb3      	ldr	r3, [pc, #716]	; (800a168 <UART_SetConfig+0x734>)
 8009e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	011e      	lsls	r6, r3, #4
 8009ea4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f04f 0100 	mov.w	r1, #0
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	1894      	adds	r4, r2, r2
 8009eb4:	623c      	str	r4, [r7, #32]
 8009eb6:	415b      	adcs	r3, r3
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ebe:	1812      	adds	r2, r2, r0
 8009ec0:	eb41 0303 	adc.w	r3, r1, r3
 8009ec4:	f04f 0400 	mov.w	r4, #0
 8009ec8:	f04f 0500 	mov.w	r5, #0
 8009ecc:	00dd      	lsls	r5, r3, #3
 8009ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ed2:	00d4      	lsls	r4, r2, #3
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	1814      	adds	r4, r2, r0
 8009eda:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009ede:	414b      	adcs	r3, r1
 8009ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f04f 0100 	mov.w	r1, #0
 8009ef0:	f04f 0200 	mov.w	r2, #0
 8009ef4:	f04f 0300 	mov.w	r3, #0
 8009ef8:	008b      	lsls	r3, r1, #2
 8009efa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009efe:	0082      	lsls	r2, r0, #2
 8009f00:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009f04:	f7f6 fe78 	bl	8000bf8 <__aeabi_uldivmod>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4b96      	ldr	r3, [pc, #600]	; (800a168 <UART_SetConfig+0x734>)
 8009f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8009f12:	095b      	lsrs	r3, r3, #5
 8009f14:	2164      	movs	r1, #100	; 0x64
 8009f16:	fb01 f303 	mul.w	r3, r1, r3
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	3332      	adds	r3, #50	; 0x32
 8009f20:	4a91      	ldr	r2, [pc, #580]	; (800a168 <UART_SetConfig+0x734>)
 8009f22:	fba2 2303 	umull	r2, r3, r2, r3
 8009f26:	095b      	lsrs	r3, r3, #5
 8009f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f2c:	441e      	add	r6, r3
 8009f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f04f 0100 	mov.w	r1, #0
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	1894      	adds	r4, r2, r2
 8009f3e:	61bc      	str	r4, [r7, #24]
 8009f40:	415b      	adcs	r3, r3
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f48:	1812      	adds	r2, r2, r0
 8009f4a:	eb41 0303 	adc.w	r3, r1, r3
 8009f4e:	f04f 0400 	mov.w	r4, #0
 8009f52:	f04f 0500 	mov.w	r5, #0
 8009f56:	00dd      	lsls	r5, r3, #3
 8009f58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f5c:	00d4      	lsls	r4, r2, #3
 8009f5e:	4622      	mov	r2, r4
 8009f60:	462b      	mov	r3, r5
 8009f62:	1814      	adds	r4, r2, r0
 8009f64:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009f68:	414b      	adcs	r3, r1
 8009f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f04f 0100 	mov.w	r1, #0
 8009f7a:	f04f 0200 	mov.w	r2, #0
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	008b      	lsls	r3, r1, #2
 8009f84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f88:	0082      	lsls	r2, r0, #2
 8009f8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009f8e:	f7f6 fe33 	bl	8000bf8 <__aeabi_uldivmod>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4b74      	ldr	r3, [pc, #464]	; (800a168 <UART_SetConfig+0x734>)
 8009f98:	fba3 1302 	umull	r1, r3, r3, r2
 8009f9c:	095b      	lsrs	r3, r3, #5
 8009f9e:	2164      	movs	r1, #100	; 0x64
 8009fa0:	fb01 f303 	mul.w	r3, r1, r3
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	3332      	adds	r3, #50	; 0x32
 8009faa:	4a6f      	ldr	r2, [pc, #444]	; (800a168 <UART_SetConfig+0x734>)
 8009fac:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb0:	095b      	lsrs	r3, r3, #5
 8009fb2:	f003 020f 	and.w	r2, r3, #15
 8009fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4432      	add	r2, r6
 8009fbe:	609a      	str	r2, [r3, #8]
 8009fc0:	e0c9      	b.n	800a156 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fc2:	f7fd fa29 	bl	8007418 <HAL_RCC_GetPCLK1Freq>
 8009fc6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fce:	461c      	mov	r4, r3
 8009fd0:	f04f 0500 	mov.w	r5, #0
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	462b      	mov	r3, r5
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	6139      	str	r1, [r7, #16]
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009fe4:	1912      	adds	r2, r2, r4
 8009fe6:	eb45 0303 	adc.w	r3, r5, r3
 8009fea:	f04f 0000 	mov.w	r0, #0
 8009fee:	f04f 0100 	mov.w	r1, #0
 8009ff2:	00d9      	lsls	r1, r3, #3
 8009ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ff8:	00d0      	lsls	r0, r2, #3
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	eb12 0804 	adds.w	r8, r2, r4
 800a002:	eb43 0905 	adc.w	r9, r3, r5
 800a006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f04f 0100 	mov.w	r1, #0
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	008b      	lsls	r3, r1, #2
 800a01c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a020:	0082      	lsls	r2, r0, #2
 800a022:	4640      	mov	r0, r8
 800a024:	4649      	mov	r1, r9
 800a026:	f7f6 fde7 	bl	8000bf8 <__aeabi_uldivmod>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4b4e      	ldr	r3, [pc, #312]	; (800a168 <UART_SetConfig+0x734>)
 800a030:	fba3 2302 	umull	r2, r3, r3, r2
 800a034:	095b      	lsrs	r3, r3, #5
 800a036:	011e      	lsls	r6, r3, #4
 800a038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a03c:	4618      	mov	r0, r3
 800a03e:	f04f 0100 	mov.w	r1, #0
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	1894      	adds	r4, r2, r2
 800a048:	60bc      	str	r4, [r7, #8]
 800a04a:	415b      	adcs	r3, r3
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a052:	1812      	adds	r2, r2, r0
 800a054:	eb41 0303 	adc.w	r3, r1, r3
 800a058:	f04f 0400 	mov.w	r4, #0
 800a05c:	f04f 0500 	mov.w	r5, #0
 800a060:	00dd      	lsls	r5, r3, #3
 800a062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a066:	00d4      	lsls	r4, r2, #3
 800a068:	4622      	mov	r2, r4
 800a06a:	462b      	mov	r3, r5
 800a06c:	1814      	adds	r4, r2, r0
 800a06e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800a072:	414b      	adcs	r3, r1
 800a074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	4618      	mov	r0, r3
 800a080:	f04f 0100 	mov.w	r1, #0
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	008b      	lsls	r3, r1, #2
 800a08e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a092:	0082      	lsls	r2, r0, #2
 800a094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a098:	f7f6 fdae 	bl	8000bf8 <__aeabi_uldivmod>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4b31      	ldr	r3, [pc, #196]	; (800a168 <UART_SetConfig+0x734>)
 800a0a2:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	2164      	movs	r1, #100	; 0x64
 800a0aa:	fb01 f303 	mul.w	r3, r1, r3
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	011b      	lsls	r3, r3, #4
 800a0b2:	3332      	adds	r3, #50	; 0x32
 800a0b4:	4a2c      	ldr	r2, [pc, #176]	; (800a168 <UART_SetConfig+0x734>)
 800a0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ba:	095b      	lsrs	r3, r3, #5
 800a0bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0c0:	441e      	add	r6, r3
 800a0c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f04f 0100 	mov.w	r1, #0
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	1894      	adds	r4, r2, r2
 800a0d2:	603c      	str	r4, [r7, #0]
 800a0d4:	415b      	adcs	r3, r3
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0dc:	1812      	adds	r2, r2, r0
 800a0de:	eb41 0303 	adc.w	r3, r1, r3
 800a0e2:	f04f 0400 	mov.w	r4, #0
 800a0e6:	f04f 0500 	mov.w	r5, #0
 800a0ea:	00dd      	lsls	r5, r3, #3
 800a0ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a0f0:	00d4      	lsls	r4, r2, #3
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	1814      	adds	r4, r2, r0
 800a0f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800a0fc:	414b      	adcs	r3, r1
 800a0fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	4618      	mov	r0, r3
 800a10a:	f04f 0100 	mov.w	r1, #0
 800a10e:	f04f 0200 	mov.w	r2, #0
 800a112:	f04f 0300 	mov.w	r3, #0
 800a116:	008b      	lsls	r3, r1, #2
 800a118:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a11c:	0082      	lsls	r2, r0, #2
 800a11e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a122:	f7f6 fd69 	bl	8000bf8 <__aeabi_uldivmod>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <UART_SetConfig+0x734>)
 800a12c:	fba3 1302 	umull	r1, r3, r3, r2
 800a130:	095b      	lsrs	r3, r3, #5
 800a132:	2164      	movs	r1, #100	; 0x64
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	011b      	lsls	r3, r3, #4
 800a13c:	3332      	adds	r3, #50	; 0x32
 800a13e:	4a0a      	ldr	r2, [pc, #40]	; (800a168 <UART_SetConfig+0x734>)
 800a140:	fba2 2303 	umull	r2, r3, r2, r3
 800a144:	095b      	lsrs	r3, r3, #5
 800a146:	f003 020f 	and.w	r2, r3, #15
 800a14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4432      	add	r2, r6
 800a152:	609a      	str	r2, [r3, #8]
}
 800a154:	e7ff      	b.n	800a156 <UART_SetConfig+0x722>
 800a156:	bf00      	nop
 800a158:	37f4      	adds	r7, #244	; 0xf4
 800a15a:	46bd      	mov	sp, r7
 800a15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a160:	40011000 	.word	0x40011000
 800a164:	40011400 	.word	0x40011400
 800a168:	51eb851f 	.word	0x51eb851f

0800a16c <__errno>:
 800a16c:	4b01      	ldr	r3, [pc, #4]	; (800a174 <__errno+0x8>)
 800a16e:	6818      	ldr	r0, [r3, #0]
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000138 	.word	0x20000138

0800a178 <__libc_init_array>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	4d0d      	ldr	r5, [pc, #52]	; (800a1b0 <__libc_init_array+0x38>)
 800a17c:	4c0d      	ldr	r4, [pc, #52]	; (800a1b4 <__libc_init_array+0x3c>)
 800a17e:	1b64      	subs	r4, r4, r5
 800a180:	10a4      	asrs	r4, r4, #2
 800a182:	2600      	movs	r6, #0
 800a184:	42a6      	cmp	r6, r4
 800a186:	d109      	bne.n	800a19c <__libc_init_array+0x24>
 800a188:	4d0b      	ldr	r5, [pc, #44]	; (800a1b8 <__libc_init_array+0x40>)
 800a18a:	4c0c      	ldr	r4, [pc, #48]	; (800a1bc <__libc_init_array+0x44>)
 800a18c:	f002 fd0e 	bl	800cbac <_init>
 800a190:	1b64      	subs	r4, r4, r5
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	2600      	movs	r6, #0
 800a196:	42a6      	cmp	r6, r4
 800a198:	d105      	bne.n	800a1a6 <__libc_init_array+0x2e>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a0:	4798      	blx	r3
 800a1a2:	3601      	adds	r6, #1
 800a1a4:	e7ee      	b.n	800a184 <__libc_init_array+0xc>
 800a1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1aa:	4798      	blx	r3
 800a1ac:	3601      	adds	r6, #1
 800a1ae:	e7f2      	b.n	800a196 <__libc_init_array+0x1e>
 800a1b0:	0800ce98 	.word	0x0800ce98
 800a1b4:	0800ce98 	.word	0x0800ce98
 800a1b8:	0800ce98 	.word	0x0800ce98
 800a1bc:	0800ce9c 	.word	0x0800ce9c

0800a1c0 <memset>:
 800a1c0:	4402      	add	r2, r0
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d100      	bne.n	800a1ca <memset+0xa>
 800a1c8:	4770      	bx	lr
 800a1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ce:	e7f9      	b.n	800a1c4 <memset+0x4>

0800a1d0 <atan>:
 800a1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	ec55 4b10 	vmov	r4, r5, d0
 800a1d8:	4bc3      	ldr	r3, [pc, #780]	; (800a4e8 <atan+0x318>)
 800a1da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	46ab      	mov	fp, r5
 800a1e2:	dd18      	ble.n	800a216 <atan+0x46>
 800a1e4:	4bc1      	ldr	r3, [pc, #772]	; (800a4ec <atan+0x31c>)
 800a1e6:	429e      	cmp	r6, r3
 800a1e8:	dc01      	bgt.n	800a1ee <atan+0x1e>
 800a1ea:	d109      	bne.n	800a200 <atan+0x30>
 800a1ec:	b144      	cbz	r4, 800a200 <atan+0x30>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 f801 	bl	80001fc <__adddf3>
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	e006      	b.n	800a20e <atan+0x3e>
 800a200:	f1bb 0f00 	cmp.w	fp, #0
 800a204:	f300 8131 	bgt.w	800a46a <atan+0x29a>
 800a208:	a59b      	add	r5, pc, #620	; (adr r5, 800a478 <atan+0x2a8>)
 800a20a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a20e:	ec45 4b10 	vmov	d0, r4, r5
 800a212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	4bb6      	ldr	r3, [pc, #728]	; (800a4f0 <atan+0x320>)
 800a218:	429e      	cmp	r6, r3
 800a21a:	dc14      	bgt.n	800a246 <atan+0x76>
 800a21c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a220:	429e      	cmp	r6, r3
 800a222:	dc0d      	bgt.n	800a240 <atan+0x70>
 800a224:	a396      	add	r3, pc, #600	; (adr r3, 800a480 <atan+0x2b0>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	ee10 0a10 	vmov	r0, s0
 800a22e:	4629      	mov	r1, r5
 800a230:	f7f5 ffe4 	bl	80001fc <__adddf3>
 800a234:	4baf      	ldr	r3, [pc, #700]	; (800a4f4 <atan+0x324>)
 800a236:	2200      	movs	r2, #0
 800a238:	f7f6 fc26 	bl	8000a88 <__aeabi_dcmpgt>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d1e6      	bne.n	800a20e <atan+0x3e>
 800a240:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a244:	e02b      	b.n	800a29e <atan+0xce>
 800a246:	f000 f9b3 	bl	800a5b0 <fabs>
 800a24a:	4bab      	ldr	r3, [pc, #684]	; (800a4f8 <atan+0x328>)
 800a24c:	429e      	cmp	r6, r3
 800a24e:	ec55 4b10 	vmov	r4, r5, d0
 800a252:	f300 80bf 	bgt.w	800a3d4 <atan+0x204>
 800a256:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a25a:	429e      	cmp	r6, r3
 800a25c:	f300 80a0 	bgt.w	800a3a0 <atan+0x1d0>
 800a260:	ee10 2a10 	vmov	r2, s0
 800a264:	ee10 0a10 	vmov	r0, s0
 800a268:	462b      	mov	r3, r5
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f5 ffc6 	bl	80001fc <__adddf3>
 800a270:	4ba0      	ldr	r3, [pc, #640]	; (800a4f4 <atan+0x324>)
 800a272:	2200      	movs	r2, #0
 800a274:	f7f5 ffc0 	bl	80001f8 <__aeabi_dsub>
 800a278:	2200      	movs	r2, #0
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a282:	4620      	mov	r0, r4
 800a284:	4629      	mov	r1, r5
 800a286:	f7f5 ffb9 	bl	80001fc <__adddf3>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	f7f6 fa93 	bl	80007bc <__aeabi_ddiv>
 800a296:	f04f 0a00 	mov.w	sl, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	460d      	mov	r5, r1
 800a29e:	4622      	mov	r2, r4
 800a2a0:	462b      	mov	r3, r5
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f6 f95f 	bl	8000568 <__aeabi_dmul>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4680      	mov	r8, r0
 800a2b0:	4689      	mov	r9, r1
 800a2b2:	f7f6 f959 	bl	8000568 <__aeabi_dmul>
 800a2b6:	a374      	add	r3, pc, #464	; (adr r3, 800a488 <atan+0x2b8>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	f7f6 f952 	bl	8000568 <__aeabi_dmul>
 800a2c4:	a372      	add	r3, pc, #456	; (adr r3, 800a490 <atan+0x2c0>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f5 ff97 	bl	80001fc <__adddf3>
 800a2ce:	4632      	mov	r2, r6
 800a2d0:	463b      	mov	r3, r7
 800a2d2:	f7f6 f949 	bl	8000568 <__aeabi_dmul>
 800a2d6:	a370      	add	r3, pc, #448	; (adr r3, 800a498 <atan+0x2c8>)
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	f7f5 ff8e 	bl	80001fc <__adddf3>
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	f7f6 f940 	bl	8000568 <__aeabi_dmul>
 800a2e8:	a36d      	add	r3, pc, #436	; (adr r3, 800a4a0 <atan+0x2d0>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f7f5 ff85 	bl	80001fc <__adddf3>
 800a2f2:	4632      	mov	r2, r6
 800a2f4:	463b      	mov	r3, r7
 800a2f6:	f7f6 f937 	bl	8000568 <__aeabi_dmul>
 800a2fa:	a36b      	add	r3, pc, #428	; (adr r3, 800a4a8 <atan+0x2d8>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f7f5 ff7c 	bl	80001fc <__adddf3>
 800a304:	4632      	mov	r2, r6
 800a306:	463b      	mov	r3, r7
 800a308:	f7f6 f92e 	bl	8000568 <__aeabi_dmul>
 800a30c:	a368      	add	r3, pc, #416	; (adr r3, 800a4b0 <atan+0x2e0>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f5 ff73 	bl	80001fc <__adddf3>
 800a316:	4642      	mov	r2, r8
 800a318:	464b      	mov	r3, r9
 800a31a:	f7f6 f925 	bl	8000568 <__aeabi_dmul>
 800a31e:	a366      	add	r3, pc, #408	; (adr r3, 800a4b8 <atan+0x2e8>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	4680      	mov	r8, r0
 800a326:	4689      	mov	r9, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 f91c 	bl	8000568 <__aeabi_dmul>
 800a330:	a363      	add	r3, pc, #396	; (adr r3, 800a4c0 <atan+0x2f0>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f5 ff5f 	bl	80001f8 <__aeabi_dsub>
 800a33a:	4632      	mov	r2, r6
 800a33c:	463b      	mov	r3, r7
 800a33e:	f7f6 f913 	bl	8000568 <__aeabi_dmul>
 800a342:	a361      	add	r3, pc, #388	; (adr r3, 800a4c8 <atan+0x2f8>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f5 ff56 	bl	80001f8 <__aeabi_dsub>
 800a34c:	4632      	mov	r2, r6
 800a34e:	463b      	mov	r3, r7
 800a350:	f7f6 f90a 	bl	8000568 <__aeabi_dmul>
 800a354:	a35e      	add	r3, pc, #376	; (adr r3, 800a4d0 <atan+0x300>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ff4d 	bl	80001f8 <__aeabi_dsub>
 800a35e:	4632      	mov	r2, r6
 800a360:	463b      	mov	r3, r7
 800a362:	f7f6 f901 	bl	8000568 <__aeabi_dmul>
 800a366:	a35c      	add	r3, pc, #368	; (adr r3, 800a4d8 <atan+0x308>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ff44 	bl	80001f8 <__aeabi_dsub>
 800a370:	4632      	mov	r2, r6
 800a372:	463b      	mov	r3, r7
 800a374:	f7f6 f8f8 	bl	8000568 <__aeabi_dmul>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f5 ff3c 	bl	80001fc <__adddf3>
 800a384:	4622      	mov	r2, r4
 800a386:	462b      	mov	r3, r5
 800a388:	f7f6 f8ee 	bl	8000568 <__aeabi_dmul>
 800a38c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	d14b      	bne.n	800a42e <atan+0x25e>
 800a396:	4620      	mov	r0, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	f7f5 ff2d 	bl	80001f8 <__aeabi_dsub>
 800a39e:	e72c      	b.n	800a1fa <atan+0x2a>
 800a3a0:	ee10 0a10 	vmov	r0, s0
 800a3a4:	4b53      	ldr	r3, [pc, #332]	; (800a4f4 <atan+0x324>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f5 ff25 	bl	80001f8 <__aeabi_dsub>
 800a3ae:	4b51      	ldr	r3, [pc, #324]	; (800a4f4 <atan+0x324>)
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7f5 ff1f 	bl	80001fc <__adddf3>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f6 f9f9 	bl	80007bc <__aeabi_ddiv>
 800a3ca:	f04f 0a01 	mov.w	sl, #1
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	e764      	b.n	800a29e <atan+0xce>
 800a3d4:	4b49      	ldr	r3, [pc, #292]	; (800a4fc <atan+0x32c>)
 800a3d6:	429e      	cmp	r6, r3
 800a3d8:	da1d      	bge.n	800a416 <atan+0x246>
 800a3da:	ee10 0a10 	vmov	r0, s0
 800a3de:	4b48      	ldr	r3, [pc, #288]	; (800a500 <atan+0x330>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f5 ff08 	bl	80001f8 <__aeabi_dsub>
 800a3e8:	4b45      	ldr	r3, [pc, #276]	; (800a500 <atan+0x330>)
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	460f      	mov	r7, r1
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f7f6 f8b8 	bl	8000568 <__aeabi_dmul>
 800a3f8:	4b3e      	ldr	r3, [pc, #248]	; (800a4f4 <atan+0x324>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f7f5 fefe 	bl	80001fc <__adddf3>
 800a400:	4602      	mov	r2, r0
 800a402:	460b      	mov	r3, r1
 800a404:	4630      	mov	r0, r6
 800a406:	4639      	mov	r1, r7
 800a408:	f7f6 f9d8 	bl	80007bc <__aeabi_ddiv>
 800a40c:	f04f 0a02 	mov.w	sl, #2
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	e743      	b.n	800a29e <atan+0xce>
 800a416:	462b      	mov	r3, r5
 800a418:	ee10 2a10 	vmov	r2, s0
 800a41c:	4939      	ldr	r1, [pc, #228]	; (800a504 <atan+0x334>)
 800a41e:	2000      	movs	r0, #0
 800a420:	f7f6 f9cc 	bl	80007bc <__aeabi_ddiv>
 800a424:	f04f 0a03 	mov.w	sl, #3
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	e737      	b.n	800a29e <atan+0xce>
 800a42e:	4b36      	ldr	r3, [pc, #216]	; (800a508 <atan+0x338>)
 800a430:	4e36      	ldr	r6, [pc, #216]	; (800a50c <atan+0x33c>)
 800a432:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a436:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a43a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a43e:	f7f5 fedb 	bl	80001f8 <__aeabi_dsub>
 800a442:	4622      	mov	r2, r4
 800a444:	462b      	mov	r3, r5
 800a446:	f7f5 fed7 	bl	80001f8 <__aeabi_dsub>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a452:	f7f5 fed1 	bl	80001f8 <__aeabi_dsub>
 800a456:	f1bb 0f00 	cmp.w	fp, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	460d      	mov	r5, r1
 800a45e:	f6bf aed6 	bge.w	800a20e <atan+0x3e>
 800a462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a466:	461d      	mov	r5, r3
 800a468:	e6d1      	b.n	800a20e <atan+0x3e>
 800a46a:	a51d      	add	r5, pc, #116	; (adr r5, 800a4e0 <atan+0x310>)
 800a46c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a470:	e6cd      	b.n	800a20e <atan+0x3e>
 800a472:	bf00      	nop
 800a474:	f3af 8000 	nop.w
 800a478:	54442d18 	.word	0x54442d18
 800a47c:	bff921fb 	.word	0xbff921fb
 800a480:	8800759c 	.word	0x8800759c
 800a484:	7e37e43c 	.word	0x7e37e43c
 800a488:	e322da11 	.word	0xe322da11
 800a48c:	3f90ad3a 	.word	0x3f90ad3a
 800a490:	24760deb 	.word	0x24760deb
 800a494:	3fa97b4b 	.word	0x3fa97b4b
 800a498:	a0d03d51 	.word	0xa0d03d51
 800a49c:	3fb10d66 	.word	0x3fb10d66
 800a4a0:	c54c206e 	.word	0xc54c206e
 800a4a4:	3fb745cd 	.word	0x3fb745cd
 800a4a8:	920083ff 	.word	0x920083ff
 800a4ac:	3fc24924 	.word	0x3fc24924
 800a4b0:	5555550d 	.word	0x5555550d
 800a4b4:	3fd55555 	.word	0x3fd55555
 800a4b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4bc:	bfa2b444 	.word	0xbfa2b444
 800a4c0:	52defd9a 	.word	0x52defd9a
 800a4c4:	3fadde2d 	.word	0x3fadde2d
 800a4c8:	af749a6d 	.word	0xaf749a6d
 800a4cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800a4d0:	fe231671 	.word	0xfe231671
 800a4d4:	3fbc71c6 	.word	0x3fbc71c6
 800a4d8:	9998ebc4 	.word	0x9998ebc4
 800a4dc:	3fc99999 	.word	0x3fc99999
 800a4e0:	54442d18 	.word	0x54442d18
 800a4e4:	3ff921fb 	.word	0x3ff921fb
 800a4e8:	440fffff 	.word	0x440fffff
 800a4ec:	7ff00000 	.word	0x7ff00000
 800a4f0:	3fdbffff 	.word	0x3fdbffff
 800a4f4:	3ff00000 	.word	0x3ff00000
 800a4f8:	3ff2ffff 	.word	0x3ff2ffff
 800a4fc:	40038000 	.word	0x40038000
 800a500:	3ff80000 	.word	0x3ff80000
 800a504:	bff00000 	.word	0xbff00000
 800a508:	0800cc20 	.word	0x0800cc20
 800a50c:	0800cc00 	.word	0x0800cc00

0800a510 <cos>:
 800a510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a512:	ec53 2b10 	vmov	r2, r3, d0
 800a516:	4824      	ldr	r0, [pc, #144]	; (800a5a8 <cos+0x98>)
 800a518:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a51c:	4281      	cmp	r1, r0
 800a51e:	dc06      	bgt.n	800a52e <cos+0x1e>
 800a520:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a5a0 <cos+0x90>
 800a524:	f001 fcd4 	bl	800bed0 <__kernel_cos>
 800a528:	ec51 0b10 	vmov	r0, r1, d0
 800a52c:	e007      	b.n	800a53e <cos+0x2e>
 800a52e:	481f      	ldr	r0, [pc, #124]	; (800a5ac <cos+0x9c>)
 800a530:	4281      	cmp	r1, r0
 800a532:	dd09      	ble.n	800a548 <cos+0x38>
 800a534:	ee10 0a10 	vmov	r0, s0
 800a538:	4619      	mov	r1, r3
 800a53a:	f7f5 fe5d 	bl	80001f8 <__aeabi_dsub>
 800a53e:	ec41 0b10 	vmov	d0, r0, r1
 800a542:	b005      	add	sp, #20
 800a544:	f85d fb04 	ldr.w	pc, [sp], #4
 800a548:	4668      	mov	r0, sp
 800a54a:	f001 fa01 	bl	800b950 <__ieee754_rem_pio2>
 800a54e:	f000 0003 	and.w	r0, r0, #3
 800a552:	2801      	cmp	r0, #1
 800a554:	d007      	beq.n	800a566 <cos+0x56>
 800a556:	2802      	cmp	r0, #2
 800a558:	d012      	beq.n	800a580 <cos+0x70>
 800a55a:	b9c0      	cbnz	r0, 800a58e <cos+0x7e>
 800a55c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a560:	ed9d 0b00 	vldr	d0, [sp]
 800a564:	e7de      	b.n	800a524 <cos+0x14>
 800a566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a56a:	ed9d 0b00 	vldr	d0, [sp]
 800a56e:	f002 f8b7 	bl	800c6e0 <__kernel_sin>
 800a572:	ec53 2b10 	vmov	r2, r3, d0
 800a576:	ee10 0a10 	vmov	r0, s0
 800a57a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a57e:	e7de      	b.n	800a53e <cos+0x2e>
 800a580:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a584:	ed9d 0b00 	vldr	d0, [sp]
 800a588:	f001 fca2 	bl	800bed0 <__kernel_cos>
 800a58c:	e7f1      	b.n	800a572 <cos+0x62>
 800a58e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a592:	ed9d 0b00 	vldr	d0, [sp]
 800a596:	2001      	movs	r0, #1
 800a598:	f002 f8a2 	bl	800c6e0 <__kernel_sin>
 800a59c:	e7c4      	b.n	800a528 <cos+0x18>
 800a59e:	bf00      	nop
	...
 800a5a8:	3fe921fb 	.word	0x3fe921fb
 800a5ac:	7fefffff 	.word	0x7fefffff

0800a5b0 <fabs>:
 800a5b0:	ec51 0b10 	vmov	r0, r1, d0
 800a5b4:	ee10 2a10 	vmov	r2, s0
 800a5b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5bc:	ec43 2b10 	vmov	d0, r2, r3
 800a5c0:	4770      	bx	lr
 800a5c2:	0000      	movs	r0, r0
 800a5c4:	0000      	movs	r0, r0
	...

0800a5c8 <sin>:
 800a5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ca:	ec53 2b10 	vmov	r2, r3, d0
 800a5ce:	4826      	ldr	r0, [pc, #152]	; (800a668 <sin+0xa0>)
 800a5d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5d4:	4281      	cmp	r1, r0
 800a5d6:	dc07      	bgt.n	800a5e8 <sin+0x20>
 800a5d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a660 <sin+0x98>
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f002 f87f 	bl	800c6e0 <__kernel_sin>
 800a5e2:	ec51 0b10 	vmov	r0, r1, d0
 800a5e6:	e007      	b.n	800a5f8 <sin+0x30>
 800a5e8:	4820      	ldr	r0, [pc, #128]	; (800a66c <sin+0xa4>)
 800a5ea:	4281      	cmp	r1, r0
 800a5ec:	dd09      	ble.n	800a602 <sin+0x3a>
 800a5ee:	ee10 0a10 	vmov	r0, s0
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	f7f5 fe00 	bl	80001f8 <__aeabi_dsub>
 800a5f8:	ec41 0b10 	vmov	d0, r0, r1
 800a5fc:	b005      	add	sp, #20
 800a5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800a602:	4668      	mov	r0, sp
 800a604:	f001 f9a4 	bl	800b950 <__ieee754_rem_pio2>
 800a608:	f000 0003 	and.w	r0, r0, #3
 800a60c:	2801      	cmp	r0, #1
 800a60e:	d008      	beq.n	800a622 <sin+0x5a>
 800a610:	2802      	cmp	r0, #2
 800a612:	d00d      	beq.n	800a630 <sin+0x68>
 800a614:	b9d0      	cbnz	r0, 800a64c <sin+0x84>
 800a616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a61a:	ed9d 0b00 	vldr	d0, [sp]
 800a61e:	2001      	movs	r0, #1
 800a620:	e7dd      	b.n	800a5de <sin+0x16>
 800a622:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a626:	ed9d 0b00 	vldr	d0, [sp]
 800a62a:	f001 fc51 	bl	800bed0 <__kernel_cos>
 800a62e:	e7d8      	b.n	800a5e2 <sin+0x1a>
 800a630:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a634:	ed9d 0b00 	vldr	d0, [sp]
 800a638:	2001      	movs	r0, #1
 800a63a:	f002 f851 	bl	800c6e0 <__kernel_sin>
 800a63e:	ec53 2b10 	vmov	r2, r3, d0
 800a642:	ee10 0a10 	vmov	r0, s0
 800a646:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a64a:	e7d5      	b.n	800a5f8 <sin+0x30>
 800a64c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a650:	ed9d 0b00 	vldr	d0, [sp]
 800a654:	f001 fc3c 	bl	800bed0 <__kernel_cos>
 800a658:	e7f1      	b.n	800a63e <sin+0x76>
 800a65a:	bf00      	nop
 800a65c:	f3af 8000 	nop.w
	...
 800a668:	3fe921fb 	.word	0x3fe921fb
 800a66c:	7fefffff 	.word	0x7fefffff

0800a670 <acos>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	ed2d 8b02 	vpush	{d8}
 800a676:	ec55 4b10 	vmov	r4, r5, d0
 800a67a:	f000 f919 	bl	800a8b0 <__ieee754_acos>
 800a67e:	4b16      	ldr	r3, [pc, #88]	; (800a6d8 <acos+0x68>)
 800a680:	eeb0 8a40 	vmov.f32	s16, s0
 800a684:	eef0 8a60 	vmov.f32	s17, s1
 800a688:	f993 3000 	ldrsb.w	r3, [r3]
 800a68c:	3301      	adds	r3, #1
 800a68e:	d01c      	beq.n	800a6ca <acos+0x5a>
 800a690:	4622      	mov	r2, r4
 800a692:	462b      	mov	r3, r5
 800a694:	4620      	mov	r0, r4
 800a696:	4629      	mov	r1, r5
 800a698:	f7f6 fa00 	bl	8000a9c <__aeabi_dcmpun>
 800a69c:	b9a8      	cbnz	r0, 800a6ca <acos+0x5a>
 800a69e:	ec45 4b10 	vmov	d0, r4, r5
 800a6a2:	f7ff ff85 	bl	800a5b0 <fabs>
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <acos+0x6c>)
 800a6a8:	ec51 0b10 	vmov	r0, r1, d0
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f7f6 f9eb 	bl	8000a88 <__aeabi_dcmpgt>
 800a6b2:	b150      	cbz	r0, 800a6ca <acos+0x5a>
 800a6b4:	f7ff fd5a 	bl	800a16c <__errno>
 800a6b8:	ecbd 8b02 	vpop	{d8}
 800a6bc:	2321      	movs	r3, #33	; 0x21
 800a6be:	6003      	str	r3, [r0, #0]
 800a6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c4:	4806      	ldr	r0, [pc, #24]	; (800a6e0 <acos+0x70>)
 800a6c6:	f002 b957 	b.w	800c978 <nan>
 800a6ca:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ce:	eef0 0a68 	vmov.f32	s1, s17
 800a6d2:	ecbd 8b02 	vpop	{d8}
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	2000019c 	.word	0x2000019c
 800a6dc:	3ff00000 	.word	0x3ff00000
 800a6e0:	0800cc40 	.word	0x0800cc40

0800a6e4 <atan2>:
 800a6e4:	f000 bb44 	b.w	800ad70 <__ieee754_atan2>

0800a6e8 <pow>:
 800a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	ec59 8b10 	vmov	r8, r9, d0
 800a6f0:	ec57 6b11 	vmov	r6, r7, d1
 800a6f4:	f000 fc08 	bl	800af08 <__ieee754_pow>
 800a6f8:	4b4e      	ldr	r3, [pc, #312]	; (800a834 <pow+0x14c>)
 800a6fa:	f993 3000 	ldrsb.w	r3, [r3]
 800a6fe:	3301      	adds	r3, #1
 800a700:	ec55 4b10 	vmov	r4, r5, d0
 800a704:	d015      	beq.n	800a732 <pow+0x4a>
 800a706:	4632      	mov	r2, r6
 800a708:	463b      	mov	r3, r7
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	f7f6 f9c5 	bl	8000a9c <__aeabi_dcmpun>
 800a712:	b970      	cbnz	r0, 800a732 <pow+0x4a>
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	f7f6 f9be 	bl	8000a9c <__aeabi_dcmpun>
 800a720:	2200      	movs	r2, #0
 800a722:	2300      	movs	r3, #0
 800a724:	b148      	cbz	r0, 800a73a <pow+0x52>
 800a726:	4630      	mov	r0, r6
 800a728:	4639      	mov	r1, r7
 800a72a:	f7f6 f985 	bl	8000a38 <__aeabi_dcmpeq>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d17d      	bne.n	800a82e <pow+0x146>
 800a732:	ec45 4b10 	vmov	d0, r4, r5
 800a736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f6 f97b 	bl	8000a38 <__aeabi_dcmpeq>
 800a742:	b1e0      	cbz	r0, 800a77e <pow+0x96>
 800a744:	2200      	movs	r2, #0
 800a746:	2300      	movs	r3, #0
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 f974 	bl	8000a38 <__aeabi_dcmpeq>
 800a750:	2800      	cmp	r0, #0
 800a752:	d16c      	bne.n	800a82e <pow+0x146>
 800a754:	ec47 6b10 	vmov	d0, r6, r7
 800a758:	f002 f880 	bl	800c85c <finite>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d0e8      	beq.n	800a732 <pow+0x4a>
 800a760:	2200      	movs	r2, #0
 800a762:	2300      	movs	r3, #0
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f6 f970 	bl	8000a4c <__aeabi_dcmplt>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d0e0      	beq.n	800a732 <pow+0x4a>
 800a770:	f7ff fcfc 	bl	800a16c <__errno>
 800a774:	2321      	movs	r3, #33	; 0x21
 800a776:	6003      	str	r3, [r0, #0]
 800a778:	2400      	movs	r4, #0
 800a77a:	4d2f      	ldr	r5, [pc, #188]	; (800a838 <pow+0x150>)
 800a77c:	e7d9      	b.n	800a732 <pow+0x4a>
 800a77e:	ec45 4b10 	vmov	d0, r4, r5
 800a782:	f002 f86b 	bl	800c85c <finite>
 800a786:	bbb8      	cbnz	r0, 800a7f8 <pow+0x110>
 800a788:	ec49 8b10 	vmov	d0, r8, r9
 800a78c:	f002 f866 	bl	800c85c <finite>
 800a790:	b390      	cbz	r0, 800a7f8 <pow+0x110>
 800a792:	ec47 6b10 	vmov	d0, r6, r7
 800a796:	f002 f861 	bl	800c85c <finite>
 800a79a:	b368      	cbz	r0, 800a7f8 <pow+0x110>
 800a79c:	4622      	mov	r2, r4
 800a79e:	462b      	mov	r3, r5
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f6 f97a 	bl	8000a9c <__aeabi_dcmpun>
 800a7a8:	b160      	cbz	r0, 800a7c4 <pow+0xdc>
 800a7aa:	f7ff fcdf 	bl	800a16c <__errno>
 800a7ae:	2321      	movs	r3, #33	; 0x21
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	f7f5 ffff 	bl	80007bc <__aeabi_ddiv>
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	e7b6      	b.n	800a732 <pow+0x4a>
 800a7c4:	f7ff fcd2 	bl	800a16c <__errno>
 800a7c8:	2322      	movs	r3, #34	; 0x22
 800a7ca:	6003      	str	r3, [r0, #0]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	f7f6 f93a 	bl	8000a4c <__aeabi_dcmplt>
 800a7d8:	2400      	movs	r4, #0
 800a7da:	b158      	cbz	r0, 800a7f4 <pow+0x10c>
 800a7dc:	ec47 6b10 	vmov	d0, r6, r7
 800a7e0:	f002 f8d2 	bl	800c988 <rint>
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	ec51 0b10 	vmov	r0, r1, d0
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	f7f6 f924 	bl	8000a38 <__aeabi_dcmpeq>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0c2      	beq.n	800a77a <pow+0x92>
 800a7f4:	4d11      	ldr	r5, [pc, #68]	; (800a83c <pow+0x154>)
 800a7f6:	e79c      	b.n	800a732 <pow+0x4a>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7f6 f91a 	bl	8000a38 <__aeabi_dcmpeq>
 800a804:	2800      	cmp	r0, #0
 800a806:	d094      	beq.n	800a732 <pow+0x4a>
 800a808:	ec49 8b10 	vmov	d0, r8, r9
 800a80c:	f002 f826 	bl	800c85c <finite>
 800a810:	2800      	cmp	r0, #0
 800a812:	d08e      	beq.n	800a732 <pow+0x4a>
 800a814:	ec47 6b10 	vmov	d0, r6, r7
 800a818:	f002 f820 	bl	800c85c <finite>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d088      	beq.n	800a732 <pow+0x4a>
 800a820:	f7ff fca4 	bl	800a16c <__errno>
 800a824:	2322      	movs	r3, #34	; 0x22
 800a826:	6003      	str	r3, [r0, #0]
 800a828:	2400      	movs	r4, #0
 800a82a:	2500      	movs	r5, #0
 800a82c:	e781      	b.n	800a732 <pow+0x4a>
 800a82e:	4d04      	ldr	r5, [pc, #16]	; (800a840 <pow+0x158>)
 800a830:	2400      	movs	r4, #0
 800a832:	e77e      	b.n	800a732 <pow+0x4a>
 800a834:	2000019c 	.word	0x2000019c
 800a838:	fff00000 	.word	0xfff00000
 800a83c:	7ff00000 	.word	0x7ff00000
 800a840:	3ff00000 	.word	0x3ff00000

0800a844 <sqrt>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	ed2d 8b02 	vpush	{d8}
 800a84a:	ec55 4b10 	vmov	r4, r5, d0
 800a84e:	f001 fa89 	bl	800bd64 <__ieee754_sqrt>
 800a852:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <sqrt+0x64>)
 800a854:	eeb0 8a40 	vmov.f32	s16, s0
 800a858:	eef0 8a60 	vmov.f32	s17, s1
 800a85c:	f993 3000 	ldrsb.w	r3, [r3]
 800a860:	3301      	adds	r3, #1
 800a862:	d019      	beq.n	800a898 <sqrt+0x54>
 800a864:	4622      	mov	r2, r4
 800a866:	462b      	mov	r3, r5
 800a868:	4620      	mov	r0, r4
 800a86a:	4629      	mov	r1, r5
 800a86c:	f7f6 f916 	bl	8000a9c <__aeabi_dcmpun>
 800a870:	b990      	cbnz	r0, 800a898 <sqrt+0x54>
 800a872:	2200      	movs	r2, #0
 800a874:	2300      	movs	r3, #0
 800a876:	4620      	mov	r0, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	f7f6 f8e7 	bl	8000a4c <__aeabi_dcmplt>
 800a87e:	b158      	cbz	r0, 800a898 <sqrt+0x54>
 800a880:	f7ff fc74 	bl	800a16c <__errno>
 800a884:	2321      	movs	r3, #33	; 0x21
 800a886:	6003      	str	r3, [r0, #0]
 800a888:	2200      	movs	r2, #0
 800a88a:	2300      	movs	r3, #0
 800a88c:	4610      	mov	r0, r2
 800a88e:	4619      	mov	r1, r3
 800a890:	f7f5 ff94 	bl	80007bc <__aeabi_ddiv>
 800a894:	ec41 0b18 	vmov	d8, r0, r1
 800a898:	eeb0 0a48 	vmov.f32	s0, s16
 800a89c:	eef0 0a68 	vmov.f32	s1, s17
 800a8a0:	ecbd 8b02 	vpop	{d8}
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	2000019c 	.word	0x2000019c
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <__ieee754_acos>:
 800a8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	ec55 4b10 	vmov	r4, r5, d0
 800a8b8:	49b7      	ldr	r1, [pc, #732]	; (800ab98 <__ieee754_acos+0x2e8>)
 800a8ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8be:	428b      	cmp	r3, r1
 800a8c0:	dd1b      	ble.n	800a8fa <__ieee754_acos+0x4a>
 800a8c2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a8c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a8ca:	4323      	orrs	r3, r4
 800a8cc:	d106      	bne.n	800a8dc <__ieee754_acos+0x2c>
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	f300 8211 	bgt.w	800acf6 <__ieee754_acos+0x446>
 800a8d4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800ab30 <__ieee754_acos+0x280>
 800a8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	ee10 2a10 	vmov	r2, s0
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	ee10 0a10 	vmov	r0, s0
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f5 fc86 	bl	80001f8 <__aeabi_dsub>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	f7f5 ff64 	bl	80007bc <__aeabi_ddiv>
 800a8f4:	ec41 0b10 	vmov	d0, r0, r1
 800a8f8:	e7ee      	b.n	800a8d8 <__ieee754_acos+0x28>
 800a8fa:	49a8      	ldr	r1, [pc, #672]	; (800ab9c <__ieee754_acos+0x2ec>)
 800a8fc:	428b      	cmp	r3, r1
 800a8fe:	f300 8087 	bgt.w	800aa10 <__ieee754_acos+0x160>
 800a902:	4aa7      	ldr	r2, [pc, #668]	; (800aba0 <__ieee754_acos+0x2f0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	f340 81f9 	ble.w	800acfc <__ieee754_acos+0x44c>
 800a90a:	ee10 2a10 	vmov	r2, s0
 800a90e:	ee10 0a10 	vmov	r0, s0
 800a912:	462b      	mov	r3, r5
 800a914:	4629      	mov	r1, r5
 800a916:	f7f5 fe27 	bl	8000568 <__aeabi_dmul>
 800a91a:	a387      	add	r3, pc, #540	; (adr r3, 800ab38 <__ieee754_acos+0x288>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	4606      	mov	r6, r0
 800a922:	460f      	mov	r7, r1
 800a924:	f7f5 fe20 	bl	8000568 <__aeabi_dmul>
 800a928:	a385      	add	r3, pc, #532	; (adr r3, 800ab40 <__ieee754_acos+0x290>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fc65 	bl	80001fc <__adddf3>
 800a932:	4632      	mov	r2, r6
 800a934:	463b      	mov	r3, r7
 800a936:	f7f5 fe17 	bl	8000568 <__aeabi_dmul>
 800a93a:	a383      	add	r3, pc, #524	; (adr r3, 800ab48 <__ieee754_acos+0x298>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f7f5 fc5a 	bl	80001f8 <__aeabi_dsub>
 800a944:	4632      	mov	r2, r6
 800a946:	463b      	mov	r3, r7
 800a948:	f7f5 fe0e 	bl	8000568 <__aeabi_dmul>
 800a94c:	a380      	add	r3, pc, #512	; (adr r3, 800ab50 <__ieee754_acos+0x2a0>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f7f5 fc53 	bl	80001fc <__adddf3>
 800a956:	4632      	mov	r2, r6
 800a958:	463b      	mov	r3, r7
 800a95a:	f7f5 fe05 	bl	8000568 <__aeabi_dmul>
 800a95e:	a37e      	add	r3, pc, #504	; (adr r3, 800ab58 <__ieee754_acos+0x2a8>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f5 fc48 	bl	80001f8 <__aeabi_dsub>
 800a968:	4632      	mov	r2, r6
 800a96a:	463b      	mov	r3, r7
 800a96c:	f7f5 fdfc 	bl	8000568 <__aeabi_dmul>
 800a970:	a37b      	add	r3, pc, #492	; (adr r3, 800ab60 <__ieee754_acos+0x2b0>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fc41 	bl	80001fc <__adddf3>
 800a97a:	4632      	mov	r2, r6
 800a97c:	463b      	mov	r3, r7
 800a97e:	f7f5 fdf3 	bl	8000568 <__aeabi_dmul>
 800a982:	a379      	add	r3, pc, #484	; (adr r3, 800ab68 <__ieee754_acos+0x2b8>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	4680      	mov	r8, r0
 800a98a:	4689      	mov	r9, r1
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f7f5 fdea 	bl	8000568 <__aeabi_dmul>
 800a994:	a376      	add	r3, pc, #472	; (adr r3, 800ab70 <__ieee754_acos+0x2c0>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f7f5 fc2d 	bl	80001f8 <__aeabi_dsub>
 800a99e:	4632      	mov	r2, r6
 800a9a0:	463b      	mov	r3, r7
 800a9a2:	f7f5 fde1 	bl	8000568 <__aeabi_dmul>
 800a9a6:	a374      	add	r3, pc, #464	; (adr r3, 800ab78 <__ieee754_acos+0x2c8>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f7f5 fc26 	bl	80001fc <__adddf3>
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	463b      	mov	r3, r7
 800a9b4:	f7f5 fdd8 	bl	8000568 <__aeabi_dmul>
 800a9b8:	a371      	add	r3, pc, #452	; (adr r3, 800ab80 <__ieee754_acos+0x2d0>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fc1b 	bl	80001f8 <__aeabi_dsub>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	f7f5 fdcf 	bl	8000568 <__aeabi_dmul>
 800a9ca:	4b76      	ldr	r3, [pc, #472]	; (800aba4 <__ieee754_acos+0x2f4>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f7f5 fc15 	bl	80001fc <__adddf3>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f5 feef 	bl	80007bc <__aeabi_ddiv>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	f7f5 fdc1 	bl	8000568 <__aeabi_dmul>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	a167      	add	r1, pc, #412	; (adr r1, 800ab88 <__ieee754_acos+0x2d8>)
 800a9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f0:	f7f5 fc02 	bl	80001f8 <__aeabi_dsub>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	f7f5 fbfc 	bl	80001f8 <__aeabi_dsub>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	a162      	add	r1, pc, #392	; (adr r1, 800ab90 <__ieee754_acos+0x2e0>)
 800aa06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa0a:	f7f5 fbf5 	bl	80001f8 <__aeabi_dsub>
 800aa0e:	e771      	b.n	800a8f4 <__ieee754_acos+0x44>
 800aa10:	2d00      	cmp	r5, #0
 800aa12:	f280 80cb 	bge.w	800abac <__ieee754_acos+0x2fc>
 800aa16:	ee10 0a10 	vmov	r0, s0
 800aa1a:	4b62      	ldr	r3, [pc, #392]	; (800aba4 <__ieee754_acos+0x2f4>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4629      	mov	r1, r5
 800aa20:	f7f5 fbec 	bl	80001fc <__adddf3>
 800aa24:	4b60      	ldr	r3, [pc, #384]	; (800aba8 <__ieee754_acos+0x2f8>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	f7f5 fd9e 	bl	8000568 <__aeabi_dmul>
 800aa2c:	a342      	add	r3, pc, #264	; (adr r3, 800ab38 <__ieee754_acos+0x288>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	4604      	mov	r4, r0
 800aa34:	460d      	mov	r5, r1
 800aa36:	f7f5 fd97 	bl	8000568 <__aeabi_dmul>
 800aa3a:	a341      	add	r3, pc, #260	; (adr r3, 800ab40 <__ieee754_acos+0x290>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fbdc 	bl	80001fc <__adddf3>
 800aa44:	4622      	mov	r2, r4
 800aa46:	462b      	mov	r3, r5
 800aa48:	f7f5 fd8e 	bl	8000568 <__aeabi_dmul>
 800aa4c:	a33e      	add	r3, pc, #248	; (adr r3, 800ab48 <__ieee754_acos+0x298>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fbd1 	bl	80001f8 <__aeabi_dsub>
 800aa56:	4622      	mov	r2, r4
 800aa58:	462b      	mov	r3, r5
 800aa5a:	f7f5 fd85 	bl	8000568 <__aeabi_dmul>
 800aa5e:	a33c      	add	r3, pc, #240	; (adr r3, 800ab50 <__ieee754_acos+0x2a0>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f7f5 fbca 	bl	80001fc <__adddf3>
 800aa68:	4622      	mov	r2, r4
 800aa6a:	462b      	mov	r3, r5
 800aa6c:	f7f5 fd7c 	bl	8000568 <__aeabi_dmul>
 800aa70:	a339      	add	r3, pc, #228	; (adr r3, 800ab58 <__ieee754_acos+0x2a8>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	f7f5 fbbf 	bl	80001f8 <__aeabi_dsub>
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	f7f5 fd73 	bl	8000568 <__aeabi_dmul>
 800aa82:	a337      	add	r3, pc, #220	; (adr r3, 800ab60 <__ieee754_acos+0x2b0>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fbb8 	bl	80001fc <__adddf3>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	462b      	mov	r3, r5
 800aa90:	f7f5 fd6a 	bl	8000568 <__aeabi_dmul>
 800aa94:	ec45 4b10 	vmov	d0, r4, r5
 800aa98:	4680      	mov	r8, r0
 800aa9a:	4689      	mov	r9, r1
 800aa9c:	f001 f962 	bl	800bd64 <__ieee754_sqrt>
 800aaa0:	a331      	add	r3, pc, #196	; (adr r3, 800ab68 <__ieee754_acos+0x2b8>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	ec57 6b10 	vmov	r6, r7, d0
 800aaae:	f7f5 fd5b 	bl	8000568 <__aeabi_dmul>
 800aab2:	a32f      	add	r3, pc, #188	; (adr r3, 800ab70 <__ieee754_acos+0x2c0>)
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f7f5 fb9e 	bl	80001f8 <__aeabi_dsub>
 800aabc:	4622      	mov	r2, r4
 800aabe:	462b      	mov	r3, r5
 800aac0:	f7f5 fd52 	bl	8000568 <__aeabi_dmul>
 800aac4:	a32c      	add	r3, pc, #176	; (adr r3, 800ab78 <__ieee754_acos+0x2c8>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 fb97 	bl	80001fc <__adddf3>
 800aace:	4622      	mov	r2, r4
 800aad0:	462b      	mov	r3, r5
 800aad2:	f7f5 fd49 	bl	8000568 <__aeabi_dmul>
 800aad6:	a32a      	add	r3, pc, #168	; (adr r3, 800ab80 <__ieee754_acos+0x2d0>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 fb8c 	bl	80001f8 <__aeabi_dsub>
 800aae0:	4622      	mov	r2, r4
 800aae2:	462b      	mov	r3, r5
 800aae4:	f7f5 fd40 	bl	8000568 <__aeabi_dmul>
 800aae8:	4b2e      	ldr	r3, [pc, #184]	; (800aba4 <__ieee754_acos+0x2f4>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	f7f5 fb86 	bl	80001fc <__adddf3>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7f5 fe60 	bl	80007bc <__aeabi_ddiv>
 800aafc:	4632      	mov	r2, r6
 800aafe:	463b      	mov	r3, r7
 800ab00:	f7f5 fd32 	bl	8000568 <__aeabi_dmul>
 800ab04:	a320      	add	r3, pc, #128	; (adr r3, 800ab88 <__ieee754_acos+0x2d8>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	f7f5 fb75 	bl	80001f8 <__aeabi_dsub>
 800ab0e:	4632      	mov	r2, r6
 800ab10:	463b      	mov	r3, r7
 800ab12:	f7f5 fb73 	bl	80001fc <__adddf3>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	f7f5 fb6f 	bl	80001fc <__adddf3>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	a103      	add	r1, pc, #12	; (adr r1, 800ab30 <__ieee754_acos+0x280>)
 800ab24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab28:	e76f      	b.n	800aa0a <__ieee754_acos+0x15a>
 800ab2a:	bf00      	nop
 800ab2c:	f3af 8000 	nop.w
 800ab30:	54442d18 	.word	0x54442d18
 800ab34:	400921fb 	.word	0x400921fb
 800ab38:	0dfdf709 	.word	0x0dfdf709
 800ab3c:	3f023de1 	.word	0x3f023de1
 800ab40:	7501b288 	.word	0x7501b288
 800ab44:	3f49efe0 	.word	0x3f49efe0
 800ab48:	b5688f3b 	.word	0xb5688f3b
 800ab4c:	3fa48228 	.word	0x3fa48228
 800ab50:	0e884455 	.word	0x0e884455
 800ab54:	3fc9c155 	.word	0x3fc9c155
 800ab58:	03eb6f7d 	.word	0x03eb6f7d
 800ab5c:	3fd4d612 	.word	0x3fd4d612
 800ab60:	55555555 	.word	0x55555555
 800ab64:	3fc55555 	.word	0x3fc55555
 800ab68:	b12e9282 	.word	0xb12e9282
 800ab6c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ab70:	1b8d0159 	.word	0x1b8d0159
 800ab74:	3fe6066c 	.word	0x3fe6066c
 800ab78:	9c598ac8 	.word	0x9c598ac8
 800ab7c:	40002ae5 	.word	0x40002ae5
 800ab80:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab84:	40033a27 	.word	0x40033a27
 800ab88:	33145c07 	.word	0x33145c07
 800ab8c:	3c91a626 	.word	0x3c91a626
 800ab90:	54442d18 	.word	0x54442d18
 800ab94:	3ff921fb 	.word	0x3ff921fb
 800ab98:	3fefffff 	.word	0x3fefffff
 800ab9c:	3fdfffff 	.word	0x3fdfffff
 800aba0:	3c600000 	.word	0x3c600000
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	3fe00000 	.word	0x3fe00000
 800abac:	ee10 2a10 	vmov	r2, s0
 800abb0:	462b      	mov	r3, r5
 800abb2:	496d      	ldr	r1, [pc, #436]	; (800ad68 <__ieee754_acos+0x4b8>)
 800abb4:	2000      	movs	r0, #0
 800abb6:	f7f5 fb1f 	bl	80001f8 <__aeabi_dsub>
 800abba:	4b6c      	ldr	r3, [pc, #432]	; (800ad6c <__ieee754_acos+0x4bc>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	f7f5 fcd3 	bl	8000568 <__aeabi_dmul>
 800abc2:	4604      	mov	r4, r0
 800abc4:	460d      	mov	r5, r1
 800abc6:	ec45 4b10 	vmov	d0, r4, r5
 800abca:	f001 f8cb 	bl	800bd64 <__ieee754_sqrt>
 800abce:	a34e      	add	r3, pc, #312	; (adr r3, 800ad08 <__ieee754_acos+0x458>)
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	ec59 8b10 	vmov	r8, r9, d0
 800abdc:	f7f5 fcc4 	bl	8000568 <__aeabi_dmul>
 800abe0:	a34b      	add	r3, pc, #300	; (adr r3, 800ad10 <__ieee754_acos+0x460>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 fb09 	bl	80001fc <__adddf3>
 800abea:	4622      	mov	r2, r4
 800abec:	462b      	mov	r3, r5
 800abee:	f7f5 fcbb 	bl	8000568 <__aeabi_dmul>
 800abf2:	a349      	add	r3, pc, #292	; (adr r3, 800ad18 <__ieee754_acos+0x468>)
 800abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf8:	f7f5 fafe 	bl	80001f8 <__aeabi_dsub>
 800abfc:	4622      	mov	r2, r4
 800abfe:	462b      	mov	r3, r5
 800ac00:	f7f5 fcb2 	bl	8000568 <__aeabi_dmul>
 800ac04:	a346      	add	r3, pc, #280	; (adr r3, 800ad20 <__ieee754_acos+0x470>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f7f5 faf7 	bl	80001fc <__adddf3>
 800ac0e:	4622      	mov	r2, r4
 800ac10:	462b      	mov	r3, r5
 800ac12:	f7f5 fca9 	bl	8000568 <__aeabi_dmul>
 800ac16:	a344      	add	r3, pc, #272	; (adr r3, 800ad28 <__ieee754_acos+0x478>)
 800ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1c:	f7f5 faec 	bl	80001f8 <__aeabi_dsub>
 800ac20:	4622      	mov	r2, r4
 800ac22:	462b      	mov	r3, r5
 800ac24:	f7f5 fca0 	bl	8000568 <__aeabi_dmul>
 800ac28:	a341      	add	r3, pc, #260	; (adr r3, 800ad30 <__ieee754_acos+0x480>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fae5 	bl	80001fc <__adddf3>
 800ac32:	4622      	mov	r2, r4
 800ac34:	462b      	mov	r3, r5
 800ac36:	f7f5 fc97 	bl	8000568 <__aeabi_dmul>
 800ac3a:	a33f      	add	r3, pc, #252	; (adr r3, 800ad38 <__ieee754_acos+0x488>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	4620      	mov	r0, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7f5 fc8e 	bl	8000568 <__aeabi_dmul>
 800ac4c:	a33c      	add	r3, pc, #240	; (adr r3, 800ad40 <__ieee754_acos+0x490>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f7f5 fad1 	bl	80001f8 <__aeabi_dsub>
 800ac56:	4622      	mov	r2, r4
 800ac58:	462b      	mov	r3, r5
 800ac5a:	f7f5 fc85 	bl	8000568 <__aeabi_dmul>
 800ac5e:	a33a      	add	r3, pc, #232	; (adr r3, 800ad48 <__ieee754_acos+0x498>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 faca 	bl	80001fc <__adddf3>
 800ac68:	4622      	mov	r2, r4
 800ac6a:	462b      	mov	r3, r5
 800ac6c:	f7f5 fc7c 	bl	8000568 <__aeabi_dmul>
 800ac70:	a337      	add	r3, pc, #220	; (adr r3, 800ad50 <__ieee754_acos+0x4a0>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 fabf 	bl	80001f8 <__aeabi_dsub>
 800ac7a:	4622      	mov	r2, r4
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	f7f5 fc73 	bl	8000568 <__aeabi_dmul>
 800ac82:	4b39      	ldr	r3, [pc, #228]	; (800ad68 <__ieee754_acos+0x4b8>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	f7f5 fab9 	bl	80001fc <__adddf3>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4650      	mov	r0, sl
 800ac90:	4659      	mov	r1, fp
 800ac92:	f7f5 fd93 	bl	80007bc <__aeabi_ddiv>
 800ac96:	4642      	mov	r2, r8
 800ac98:	464b      	mov	r3, r9
 800ac9a:	f7f5 fc65 	bl	8000568 <__aeabi_dmul>
 800ac9e:	2600      	movs	r6, #0
 800aca0:	4682      	mov	sl, r0
 800aca2:	468b      	mov	fp, r1
 800aca4:	4632      	mov	r2, r6
 800aca6:	464b      	mov	r3, r9
 800aca8:	4630      	mov	r0, r6
 800acaa:	4649      	mov	r1, r9
 800acac:	f7f5 fc5c 	bl	8000568 <__aeabi_dmul>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	4620      	mov	r0, r4
 800acb6:	4629      	mov	r1, r5
 800acb8:	f7f5 fa9e 	bl	80001f8 <__aeabi_dsub>
 800acbc:	4632      	mov	r2, r6
 800acbe:	4604      	mov	r4, r0
 800acc0:	460d      	mov	r5, r1
 800acc2:	464b      	mov	r3, r9
 800acc4:	4640      	mov	r0, r8
 800acc6:	4649      	mov	r1, r9
 800acc8:	f7f5 fa98 	bl	80001fc <__adddf3>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4620      	mov	r0, r4
 800acd2:	4629      	mov	r1, r5
 800acd4:	f7f5 fd72 	bl	80007bc <__aeabi_ddiv>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4650      	mov	r0, sl
 800acde:	4659      	mov	r1, fp
 800ace0:	f7f5 fa8c 	bl	80001fc <__adddf3>
 800ace4:	4632      	mov	r2, r6
 800ace6:	464b      	mov	r3, r9
 800ace8:	f7f5 fa88 	bl	80001fc <__adddf3>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	f7f5 fa84 	bl	80001fc <__adddf3>
 800acf4:	e5fe      	b.n	800a8f4 <__ieee754_acos+0x44>
 800acf6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad58 <__ieee754_acos+0x4a8>
 800acfa:	e5ed      	b.n	800a8d8 <__ieee754_acos+0x28>
 800acfc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad60 <__ieee754_acos+0x4b0>
 800ad00:	e5ea      	b.n	800a8d8 <__ieee754_acos+0x28>
 800ad02:	bf00      	nop
 800ad04:	f3af 8000 	nop.w
 800ad08:	0dfdf709 	.word	0x0dfdf709
 800ad0c:	3f023de1 	.word	0x3f023de1
 800ad10:	7501b288 	.word	0x7501b288
 800ad14:	3f49efe0 	.word	0x3f49efe0
 800ad18:	b5688f3b 	.word	0xb5688f3b
 800ad1c:	3fa48228 	.word	0x3fa48228
 800ad20:	0e884455 	.word	0x0e884455
 800ad24:	3fc9c155 	.word	0x3fc9c155
 800ad28:	03eb6f7d 	.word	0x03eb6f7d
 800ad2c:	3fd4d612 	.word	0x3fd4d612
 800ad30:	55555555 	.word	0x55555555
 800ad34:	3fc55555 	.word	0x3fc55555
 800ad38:	b12e9282 	.word	0xb12e9282
 800ad3c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ad40:	1b8d0159 	.word	0x1b8d0159
 800ad44:	3fe6066c 	.word	0x3fe6066c
 800ad48:	9c598ac8 	.word	0x9c598ac8
 800ad4c:	40002ae5 	.word	0x40002ae5
 800ad50:	1c8a2d4b 	.word	0x1c8a2d4b
 800ad54:	40033a27 	.word	0x40033a27
	...
 800ad60:	54442d18 	.word	0x54442d18
 800ad64:	3ff921fb 	.word	0x3ff921fb
 800ad68:	3ff00000 	.word	0x3ff00000
 800ad6c:	3fe00000 	.word	0x3fe00000

0800ad70 <__ieee754_atan2>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	ec57 6b11 	vmov	r6, r7, d1
 800ad78:	4273      	negs	r3, r6
 800ad7a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800af00 <__ieee754_atan2+0x190>
 800ad7e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ad82:	4333      	orrs	r3, r6
 800ad84:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad88:	4573      	cmp	r3, lr
 800ad8a:	ec51 0b10 	vmov	r0, r1, d0
 800ad8e:	ee11 8a10 	vmov	r8, s2
 800ad92:	d80a      	bhi.n	800adaa <__ieee754_atan2+0x3a>
 800ad94:	4244      	negs	r4, r0
 800ad96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad9a:	4304      	orrs	r4, r0
 800ad9c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ada0:	4574      	cmp	r4, lr
 800ada2:	ee10 9a10 	vmov	r9, s0
 800ada6:	468c      	mov	ip, r1
 800ada8:	d907      	bls.n	800adba <__ieee754_atan2+0x4a>
 800adaa:	4632      	mov	r2, r6
 800adac:	463b      	mov	r3, r7
 800adae:	f7f5 fa25 	bl	80001fc <__adddf3>
 800adb2:	ec41 0b10 	vmov	d0, r0, r1
 800adb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800adbe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800adc2:	4334      	orrs	r4, r6
 800adc4:	d103      	bne.n	800adce <__ieee754_atan2+0x5e>
 800adc6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adca:	f7ff ba01 	b.w	800a1d0 <atan>
 800adce:	17bc      	asrs	r4, r7, #30
 800add0:	f004 0402 	and.w	r4, r4, #2
 800add4:	ea53 0909 	orrs.w	r9, r3, r9
 800add8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800addc:	d107      	bne.n	800adee <__ieee754_atan2+0x7e>
 800adde:	2c02      	cmp	r4, #2
 800ade0:	d060      	beq.n	800aea4 <__ieee754_atan2+0x134>
 800ade2:	2c03      	cmp	r4, #3
 800ade4:	d1e5      	bne.n	800adb2 <__ieee754_atan2+0x42>
 800ade6:	a142      	add	r1, pc, #264	; (adr r1, 800aef0 <__ieee754_atan2+0x180>)
 800ade8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adec:	e7e1      	b.n	800adb2 <__ieee754_atan2+0x42>
 800adee:	ea52 0808 	orrs.w	r8, r2, r8
 800adf2:	d106      	bne.n	800ae02 <__ieee754_atan2+0x92>
 800adf4:	f1bc 0f00 	cmp.w	ip, #0
 800adf8:	da5f      	bge.n	800aeba <__ieee754_atan2+0x14a>
 800adfa:	a13f      	add	r1, pc, #252	; (adr r1, 800aef8 <__ieee754_atan2+0x188>)
 800adfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae00:	e7d7      	b.n	800adb2 <__ieee754_atan2+0x42>
 800ae02:	4572      	cmp	r2, lr
 800ae04:	d10f      	bne.n	800ae26 <__ieee754_atan2+0xb6>
 800ae06:	4293      	cmp	r3, r2
 800ae08:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ae0c:	d107      	bne.n	800ae1e <__ieee754_atan2+0xae>
 800ae0e:	2c02      	cmp	r4, #2
 800ae10:	d84c      	bhi.n	800aeac <__ieee754_atan2+0x13c>
 800ae12:	4b35      	ldr	r3, [pc, #212]	; (800aee8 <__ieee754_atan2+0x178>)
 800ae14:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ae18:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ae1c:	e7c9      	b.n	800adb2 <__ieee754_atan2+0x42>
 800ae1e:	2c02      	cmp	r4, #2
 800ae20:	d848      	bhi.n	800aeb4 <__ieee754_atan2+0x144>
 800ae22:	4b32      	ldr	r3, [pc, #200]	; (800aeec <__ieee754_atan2+0x17c>)
 800ae24:	e7f6      	b.n	800ae14 <__ieee754_atan2+0xa4>
 800ae26:	4573      	cmp	r3, lr
 800ae28:	d0e4      	beq.n	800adf4 <__ieee754_atan2+0x84>
 800ae2a:	1a9b      	subs	r3, r3, r2
 800ae2c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ae30:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae34:	da1e      	bge.n	800ae74 <__ieee754_atan2+0x104>
 800ae36:	2f00      	cmp	r7, #0
 800ae38:	da01      	bge.n	800ae3e <__ieee754_atan2+0xce>
 800ae3a:	323c      	adds	r2, #60	; 0x3c
 800ae3c:	db1e      	blt.n	800ae7c <__ieee754_atan2+0x10c>
 800ae3e:	4632      	mov	r2, r6
 800ae40:	463b      	mov	r3, r7
 800ae42:	f7f5 fcbb 	bl	80007bc <__aeabi_ddiv>
 800ae46:	ec41 0b10 	vmov	d0, r0, r1
 800ae4a:	f7ff fbb1 	bl	800a5b0 <fabs>
 800ae4e:	f7ff f9bf 	bl	800a1d0 <atan>
 800ae52:	ec51 0b10 	vmov	r0, r1, d0
 800ae56:	2c01      	cmp	r4, #1
 800ae58:	d013      	beq.n	800ae82 <__ieee754_atan2+0x112>
 800ae5a:	2c02      	cmp	r4, #2
 800ae5c:	d015      	beq.n	800ae8a <__ieee754_atan2+0x11a>
 800ae5e:	2c00      	cmp	r4, #0
 800ae60:	d0a7      	beq.n	800adb2 <__ieee754_atan2+0x42>
 800ae62:	a319      	add	r3, pc, #100	; (adr r3, 800aec8 <__ieee754_atan2+0x158>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 f9c6 	bl	80001f8 <__aeabi_dsub>
 800ae6c:	a318      	add	r3, pc, #96	; (adr r3, 800aed0 <__ieee754_atan2+0x160>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e014      	b.n	800ae9e <__ieee754_atan2+0x12e>
 800ae74:	a118      	add	r1, pc, #96	; (adr r1, 800aed8 <__ieee754_atan2+0x168>)
 800ae76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7a:	e7ec      	b.n	800ae56 <__ieee754_atan2+0xe6>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	e7e9      	b.n	800ae56 <__ieee754_atan2+0xe6>
 800ae82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae86:	4619      	mov	r1, r3
 800ae88:	e793      	b.n	800adb2 <__ieee754_atan2+0x42>
 800ae8a:	a30f      	add	r3, pc, #60	; (adr r3, 800aec8 <__ieee754_atan2+0x158>)
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae90:	f7f5 f9b2 	bl	80001f8 <__aeabi_dsub>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	a10d      	add	r1, pc, #52	; (adr r1, 800aed0 <__ieee754_atan2+0x160>)
 800ae9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae9e:	f7f5 f9ab 	bl	80001f8 <__aeabi_dsub>
 800aea2:	e786      	b.n	800adb2 <__ieee754_atan2+0x42>
 800aea4:	a10a      	add	r1, pc, #40	; (adr r1, 800aed0 <__ieee754_atan2+0x160>)
 800aea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeaa:	e782      	b.n	800adb2 <__ieee754_atan2+0x42>
 800aeac:	a10c      	add	r1, pc, #48	; (adr r1, 800aee0 <__ieee754_atan2+0x170>)
 800aeae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb2:	e77e      	b.n	800adb2 <__ieee754_atan2+0x42>
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	e77b      	b.n	800adb2 <__ieee754_atan2+0x42>
 800aeba:	a107      	add	r1, pc, #28	; (adr r1, 800aed8 <__ieee754_atan2+0x168>)
 800aebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec0:	e777      	b.n	800adb2 <__ieee754_atan2+0x42>
 800aec2:	bf00      	nop
 800aec4:	f3af 8000 	nop.w
 800aec8:	33145c07 	.word	0x33145c07
 800aecc:	3ca1a626 	.word	0x3ca1a626
 800aed0:	54442d18 	.word	0x54442d18
 800aed4:	400921fb 	.word	0x400921fb
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	3ff921fb 	.word	0x3ff921fb
 800aee0:	54442d18 	.word	0x54442d18
 800aee4:	3fe921fb 	.word	0x3fe921fb
 800aee8:	0800cc48 	.word	0x0800cc48
 800aeec:	0800cc60 	.word	0x0800cc60
 800aef0:	54442d18 	.word	0x54442d18
 800aef4:	c00921fb 	.word	0xc00921fb
 800aef8:	54442d18 	.word	0x54442d18
 800aefc:	bff921fb 	.word	0xbff921fb
 800af00:	7ff00000 	.word	0x7ff00000
 800af04:	00000000 	.word	0x00000000

0800af08 <__ieee754_pow>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	ed2d 8b06 	vpush	{d8-d10}
 800af10:	b08d      	sub	sp, #52	; 0x34
 800af12:	ed8d 1b02 	vstr	d1, [sp, #8]
 800af16:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800af1a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800af1e:	ea56 0100 	orrs.w	r1, r6, r0
 800af22:	ec53 2b10 	vmov	r2, r3, d0
 800af26:	f000 84d1 	beq.w	800b8cc <__ieee754_pow+0x9c4>
 800af2a:	497f      	ldr	r1, [pc, #508]	; (800b128 <__ieee754_pow+0x220>)
 800af2c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800af30:	428c      	cmp	r4, r1
 800af32:	ee10 8a10 	vmov	r8, s0
 800af36:	4699      	mov	r9, r3
 800af38:	dc09      	bgt.n	800af4e <__ieee754_pow+0x46>
 800af3a:	d103      	bne.n	800af44 <__ieee754_pow+0x3c>
 800af3c:	b97a      	cbnz	r2, 800af5e <__ieee754_pow+0x56>
 800af3e:	42a6      	cmp	r6, r4
 800af40:	dd02      	ble.n	800af48 <__ieee754_pow+0x40>
 800af42:	e00c      	b.n	800af5e <__ieee754_pow+0x56>
 800af44:	428e      	cmp	r6, r1
 800af46:	dc02      	bgt.n	800af4e <__ieee754_pow+0x46>
 800af48:	428e      	cmp	r6, r1
 800af4a:	d110      	bne.n	800af6e <__ieee754_pow+0x66>
 800af4c:	b178      	cbz	r0, 800af6e <__ieee754_pow+0x66>
 800af4e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800af52:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af56:	ea54 0308 	orrs.w	r3, r4, r8
 800af5a:	f000 84b7 	beq.w	800b8cc <__ieee754_pow+0x9c4>
 800af5e:	4873      	ldr	r0, [pc, #460]	; (800b12c <__ieee754_pow+0x224>)
 800af60:	b00d      	add	sp, #52	; 0x34
 800af62:	ecbd 8b06 	vpop	{d8-d10}
 800af66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	f001 bd05 	b.w	800c978 <nan>
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	da36      	bge.n	800afe2 <__ieee754_pow+0xda>
 800af74:	496e      	ldr	r1, [pc, #440]	; (800b130 <__ieee754_pow+0x228>)
 800af76:	428e      	cmp	r6, r1
 800af78:	dc51      	bgt.n	800b01e <__ieee754_pow+0x116>
 800af7a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800af7e:	428e      	cmp	r6, r1
 800af80:	f340 84af 	ble.w	800b8e2 <__ieee754_pow+0x9da>
 800af84:	1531      	asrs	r1, r6, #20
 800af86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800af8a:	2914      	cmp	r1, #20
 800af8c:	dd0f      	ble.n	800afae <__ieee754_pow+0xa6>
 800af8e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800af92:	fa20 fc01 	lsr.w	ip, r0, r1
 800af96:	fa0c f101 	lsl.w	r1, ip, r1
 800af9a:	4281      	cmp	r1, r0
 800af9c:	f040 84a1 	bne.w	800b8e2 <__ieee754_pow+0x9da>
 800afa0:	f00c 0c01 	and.w	ip, ip, #1
 800afa4:	f1cc 0102 	rsb	r1, ip, #2
 800afa8:	9100      	str	r1, [sp, #0]
 800afaa:	b180      	cbz	r0, 800afce <__ieee754_pow+0xc6>
 800afac:	e059      	b.n	800b062 <__ieee754_pow+0x15a>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d155      	bne.n	800b05e <__ieee754_pow+0x156>
 800afb2:	f1c1 0114 	rsb	r1, r1, #20
 800afb6:	fa46 fc01 	asr.w	ip, r6, r1
 800afba:	fa0c f101 	lsl.w	r1, ip, r1
 800afbe:	42b1      	cmp	r1, r6
 800afc0:	f040 848c 	bne.w	800b8dc <__ieee754_pow+0x9d4>
 800afc4:	f00c 0c01 	and.w	ip, ip, #1
 800afc8:	f1cc 0102 	rsb	r1, ip, #2
 800afcc:	9100      	str	r1, [sp, #0]
 800afce:	4959      	ldr	r1, [pc, #356]	; (800b134 <__ieee754_pow+0x22c>)
 800afd0:	428e      	cmp	r6, r1
 800afd2:	d12d      	bne.n	800b030 <__ieee754_pow+0x128>
 800afd4:	2f00      	cmp	r7, #0
 800afd6:	da79      	bge.n	800b0cc <__ieee754_pow+0x1c4>
 800afd8:	4956      	ldr	r1, [pc, #344]	; (800b134 <__ieee754_pow+0x22c>)
 800afda:	2000      	movs	r0, #0
 800afdc:	f7f5 fbee 	bl	80007bc <__aeabi_ddiv>
 800afe0:	e016      	b.n	800b010 <__ieee754_pow+0x108>
 800afe2:	2100      	movs	r1, #0
 800afe4:	9100      	str	r1, [sp, #0]
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d13b      	bne.n	800b062 <__ieee754_pow+0x15a>
 800afea:	494f      	ldr	r1, [pc, #316]	; (800b128 <__ieee754_pow+0x220>)
 800afec:	428e      	cmp	r6, r1
 800afee:	d1ee      	bne.n	800afce <__ieee754_pow+0xc6>
 800aff0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aff4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aff8:	ea53 0308 	orrs.w	r3, r3, r8
 800affc:	f000 8466 	beq.w	800b8cc <__ieee754_pow+0x9c4>
 800b000:	4b4d      	ldr	r3, [pc, #308]	; (800b138 <__ieee754_pow+0x230>)
 800b002:	429c      	cmp	r4, r3
 800b004:	dd0d      	ble.n	800b022 <__ieee754_pow+0x11a>
 800b006:	2f00      	cmp	r7, #0
 800b008:	f280 8464 	bge.w	800b8d4 <__ieee754_pow+0x9cc>
 800b00c:	2000      	movs	r0, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	ec41 0b10 	vmov	d0, r0, r1
 800b014:	b00d      	add	sp, #52	; 0x34
 800b016:	ecbd 8b06 	vpop	{d8-d10}
 800b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01e:	2102      	movs	r1, #2
 800b020:	e7e0      	b.n	800afe4 <__ieee754_pow+0xdc>
 800b022:	2f00      	cmp	r7, #0
 800b024:	daf2      	bge.n	800b00c <__ieee754_pow+0x104>
 800b026:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b02a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b02e:	e7ef      	b.n	800b010 <__ieee754_pow+0x108>
 800b030:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b034:	d104      	bne.n	800b040 <__ieee754_pow+0x138>
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	f7f5 fa95 	bl	8000568 <__aeabi_dmul>
 800b03e:	e7e7      	b.n	800b010 <__ieee754_pow+0x108>
 800b040:	493e      	ldr	r1, [pc, #248]	; (800b13c <__ieee754_pow+0x234>)
 800b042:	428f      	cmp	r7, r1
 800b044:	d10d      	bne.n	800b062 <__ieee754_pow+0x15a>
 800b046:	f1b9 0f00 	cmp.w	r9, #0
 800b04a:	db0a      	blt.n	800b062 <__ieee754_pow+0x15a>
 800b04c:	ec43 2b10 	vmov	d0, r2, r3
 800b050:	b00d      	add	sp, #52	; 0x34
 800b052:	ecbd 8b06 	vpop	{d8-d10}
 800b056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05a:	f000 be83 	b.w	800bd64 <__ieee754_sqrt>
 800b05e:	2100      	movs	r1, #0
 800b060:	9100      	str	r1, [sp, #0]
 800b062:	ec43 2b10 	vmov	d0, r2, r3
 800b066:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b06a:	f7ff faa1 	bl	800a5b0 <fabs>
 800b06e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b072:	ec51 0b10 	vmov	r0, r1, d0
 800b076:	f1b8 0f00 	cmp.w	r8, #0
 800b07a:	d12a      	bne.n	800b0d2 <__ieee754_pow+0x1ca>
 800b07c:	b12c      	cbz	r4, 800b08a <__ieee754_pow+0x182>
 800b07e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b134 <__ieee754_pow+0x22c>
 800b082:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b086:	45e6      	cmp	lr, ip
 800b088:	d123      	bne.n	800b0d2 <__ieee754_pow+0x1ca>
 800b08a:	2f00      	cmp	r7, #0
 800b08c:	da05      	bge.n	800b09a <__ieee754_pow+0x192>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	2000      	movs	r0, #0
 800b094:	4927      	ldr	r1, [pc, #156]	; (800b134 <__ieee754_pow+0x22c>)
 800b096:	f7f5 fb91 	bl	80007bc <__aeabi_ddiv>
 800b09a:	f1b9 0f00 	cmp.w	r9, #0
 800b09e:	dab7      	bge.n	800b010 <__ieee754_pow+0x108>
 800b0a0:	9b00      	ldr	r3, [sp, #0]
 800b0a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b0a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b0aa:	4323      	orrs	r3, r4
 800b0ac:	d108      	bne.n	800b0c0 <__ieee754_pow+0x1b8>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	f7f5 f89f 	bl	80001f8 <__aeabi_dsub>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	e78d      	b.n	800afdc <__ieee754_pow+0xd4>
 800b0c0:	9b00      	ldr	r3, [sp, #0]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d1a4      	bne.n	800b010 <__ieee754_pow+0x108>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	e79e      	b.n	800b010 <__ieee754_pow+0x108>
 800b0d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b0d6:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800b0da:	950a      	str	r5, [sp, #40]	; 0x28
 800b0dc:	9d00      	ldr	r5, [sp, #0]
 800b0de:	46ac      	mov	ip, r5
 800b0e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b0e2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b0e6:	d0e4      	beq.n	800b0b2 <__ieee754_pow+0x1aa>
 800b0e8:	4b15      	ldr	r3, [pc, #84]	; (800b140 <__ieee754_pow+0x238>)
 800b0ea:	429e      	cmp	r6, r3
 800b0ec:	f340 80fc 	ble.w	800b2e8 <__ieee754_pow+0x3e0>
 800b0f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b0f4:	429e      	cmp	r6, r3
 800b0f6:	4b10      	ldr	r3, [pc, #64]	; (800b138 <__ieee754_pow+0x230>)
 800b0f8:	dd07      	ble.n	800b10a <__ieee754_pow+0x202>
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	dc0a      	bgt.n	800b114 <__ieee754_pow+0x20c>
 800b0fe:	2f00      	cmp	r7, #0
 800b100:	da84      	bge.n	800b00c <__ieee754_pow+0x104>
 800b102:	a307      	add	r3, pc, #28	; (adr r3, 800b120 <__ieee754_pow+0x218>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	e795      	b.n	800b036 <__ieee754_pow+0x12e>
 800b10a:	429c      	cmp	r4, r3
 800b10c:	dbf7      	blt.n	800b0fe <__ieee754_pow+0x1f6>
 800b10e:	4b09      	ldr	r3, [pc, #36]	; (800b134 <__ieee754_pow+0x22c>)
 800b110:	429c      	cmp	r4, r3
 800b112:	dd17      	ble.n	800b144 <__ieee754_pow+0x23c>
 800b114:	2f00      	cmp	r7, #0
 800b116:	dcf4      	bgt.n	800b102 <__ieee754_pow+0x1fa>
 800b118:	e778      	b.n	800b00c <__ieee754_pow+0x104>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	8800759c 	.word	0x8800759c
 800b124:	7e37e43c 	.word	0x7e37e43c
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	0800cc40 	.word	0x0800cc40
 800b130:	433fffff 	.word	0x433fffff
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	3fefffff 	.word	0x3fefffff
 800b13c:	3fe00000 	.word	0x3fe00000
 800b140:	41e00000 	.word	0x41e00000
 800b144:	4b64      	ldr	r3, [pc, #400]	; (800b2d8 <__ieee754_pow+0x3d0>)
 800b146:	2200      	movs	r2, #0
 800b148:	f7f5 f856 	bl	80001f8 <__aeabi_dsub>
 800b14c:	a356      	add	r3, pc, #344	; (adr r3, 800b2a8 <__ieee754_pow+0x3a0>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	f7f5 fa07 	bl	8000568 <__aeabi_dmul>
 800b15a:	a355      	add	r3, pc, #340	; (adr r3, 800b2b0 <__ieee754_pow+0x3a8>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 f9fe 	bl	8000568 <__aeabi_dmul>
 800b16c:	4b5b      	ldr	r3, [pc, #364]	; (800b2dc <__ieee754_pow+0x3d4>)
 800b16e:	4682      	mov	sl, r0
 800b170:	468b      	mov	fp, r1
 800b172:	2200      	movs	r2, #0
 800b174:	4620      	mov	r0, r4
 800b176:	4629      	mov	r1, r5
 800b178:	f7f5 f9f6 	bl	8000568 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	a14d      	add	r1, pc, #308	; (adr r1, 800b2b8 <__ieee754_pow+0x3b0>)
 800b182:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b186:	f7f5 f837 	bl	80001f8 <__aeabi_dsub>
 800b18a:	4622      	mov	r2, r4
 800b18c:	462b      	mov	r3, r5
 800b18e:	f7f5 f9eb 	bl	8000568 <__aeabi_dmul>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	2000      	movs	r0, #0
 800b198:	4951      	ldr	r1, [pc, #324]	; (800b2e0 <__ieee754_pow+0x3d8>)
 800b19a:	f7f5 f82d 	bl	80001f8 <__aeabi_dsub>
 800b19e:	4622      	mov	r2, r4
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	4689      	mov	r9, r1
 800b1a4:	462b      	mov	r3, r5
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	f7f5 f9dd 	bl	8000568 <__aeabi_dmul>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7f5 f9d7 	bl	8000568 <__aeabi_dmul>
 800b1ba:	a341      	add	r3, pc, #260	; (adr r3, 800b2c0 <__ieee754_pow+0x3b8>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 f9d2 	bl	8000568 <__aeabi_dmul>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	f7f5 f814 	bl	80001f8 <__aeabi_dsub>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4689      	mov	r9, r1
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 f80e 	bl	80001fc <__adddf3>
 800b1e0:	2400      	movs	r4, #0
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	463b      	mov	r3, r7
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	f7f5 f805 	bl	80001f8 <__aeabi_dsub>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	f7f4 ffff 	bl	80001f8 <__aeabi_dsub>
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1fe:	3b01      	subs	r3, #1
 800b200:	4313      	orrs	r3, r2
 800b202:	4682      	mov	sl, r0
 800b204:	468b      	mov	fp, r1
 800b206:	f040 81f1 	bne.w	800b5ec <__ieee754_pow+0x6e4>
 800b20a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b2c8 <__ieee754_pow+0x3c0>
 800b20e:	eeb0 8a47 	vmov.f32	s16, s14
 800b212:	eef0 8a67 	vmov.f32	s17, s15
 800b216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b21a:	2600      	movs	r6, #0
 800b21c:	4632      	mov	r2, r6
 800b21e:	463b      	mov	r3, r7
 800b220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b224:	f7f4 ffe8 	bl	80001f8 <__aeabi_dsub>
 800b228:	4622      	mov	r2, r4
 800b22a:	462b      	mov	r3, r5
 800b22c:	f7f5 f99c 	bl	8000568 <__aeabi_dmul>
 800b230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b234:	4680      	mov	r8, r0
 800b236:	4689      	mov	r9, r1
 800b238:	4650      	mov	r0, sl
 800b23a:	4659      	mov	r1, fp
 800b23c:	f7f5 f994 	bl	8000568 <__aeabi_dmul>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	4640      	mov	r0, r8
 800b246:	4649      	mov	r1, r9
 800b248:	f7f4 ffd8 	bl	80001fc <__adddf3>
 800b24c:	4632      	mov	r2, r6
 800b24e:	463b      	mov	r3, r7
 800b250:	4680      	mov	r8, r0
 800b252:	4689      	mov	r9, r1
 800b254:	4620      	mov	r0, r4
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 f986 	bl	8000568 <__aeabi_dmul>
 800b25c:	460b      	mov	r3, r1
 800b25e:	4604      	mov	r4, r0
 800b260:	460d      	mov	r5, r1
 800b262:	4602      	mov	r2, r0
 800b264:	4649      	mov	r1, r9
 800b266:	4640      	mov	r0, r8
 800b268:	f7f4 ffc8 	bl	80001fc <__adddf3>
 800b26c:	4b1d      	ldr	r3, [pc, #116]	; (800b2e4 <__ieee754_pow+0x3dc>)
 800b26e:	4299      	cmp	r1, r3
 800b270:	ec45 4b19 	vmov	d9, r4, r5
 800b274:	4606      	mov	r6, r0
 800b276:	460f      	mov	r7, r1
 800b278:	468b      	mov	fp, r1
 800b27a:	f340 82fe 	ble.w	800b87a <__ieee754_pow+0x972>
 800b27e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b282:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b286:	4303      	orrs	r3, r0
 800b288:	f000 81f0 	beq.w	800b66c <__ieee754_pow+0x764>
 800b28c:	a310      	add	r3, pc, #64	; (adr r3, 800b2d0 <__ieee754_pow+0x3c8>)
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	ec51 0b18 	vmov	r0, r1, d8
 800b296:	f7f5 f967 	bl	8000568 <__aeabi_dmul>
 800b29a:	a30d      	add	r3, pc, #52	; (adr r3, 800b2d0 <__ieee754_pow+0x3c8>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	e6cb      	b.n	800b03a <__ieee754_pow+0x132>
 800b2a2:	bf00      	nop
 800b2a4:	f3af 8000 	nop.w
 800b2a8:	60000000 	.word	0x60000000
 800b2ac:	3ff71547 	.word	0x3ff71547
 800b2b0:	f85ddf44 	.word	0xf85ddf44
 800b2b4:	3e54ae0b 	.word	0x3e54ae0b
 800b2b8:	55555555 	.word	0x55555555
 800b2bc:	3fd55555 	.word	0x3fd55555
 800b2c0:	652b82fe 	.word	0x652b82fe
 800b2c4:	3ff71547 	.word	0x3ff71547
 800b2c8:	00000000 	.word	0x00000000
 800b2cc:	bff00000 	.word	0xbff00000
 800b2d0:	8800759c 	.word	0x8800759c
 800b2d4:	7e37e43c 	.word	0x7e37e43c
 800b2d8:	3ff00000 	.word	0x3ff00000
 800b2dc:	3fd00000 	.word	0x3fd00000
 800b2e0:	3fe00000 	.word	0x3fe00000
 800b2e4:	408fffff 	.word	0x408fffff
 800b2e8:	4bd7      	ldr	r3, [pc, #860]	; (800b648 <__ieee754_pow+0x740>)
 800b2ea:	ea03 0309 	and.w	r3, r3, r9
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	b92b      	cbnz	r3, 800b2fe <__ieee754_pow+0x3f6>
 800b2f2:	4bd6      	ldr	r3, [pc, #856]	; (800b64c <__ieee754_pow+0x744>)
 800b2f4:	f7f5 f938 	bl	8000568 <__aeabi_dmul>
 800b2f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	1523      	asrs	r3, r4, #20
 800b300:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b304:	4413      	add	r3, r2
 800b306:	9309      	str	r3, [sp, #36]	; 0x24
 800b308:	4bd1      	ldr	r3, [pc, #836]	; (800b650 <__ieee754_pow+0x748>)
 800b30a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b30e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b312:	429c      	cmp	r4, r3
 800b314:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b318:	dd08      	ble.n	800b32c <__ieee754_pow+0x424>
 800b31a:	4bce      	ldr	r3, [pc, #824]	; (800b654 <__ieee754_pow+0x74c>)
 800b31c:	429c      	cmp	r4, r3
 800b31e:	f340 8163 	ble.w	800b5e8 <__ieee754_pow+0x6e0>
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	3301      	adds	r3, #1
 800b326:	9309      	str	r3, [sp, #36]	; 0x24
 800b328:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b32c:	2400      	movs	r4, #0
 800b32e:	00e3      	lsls	r3, r4, #3
 800b330:	930b      	str	r3, [sp, #44]	; 0x2c
 800b332:	4bc9      	ldr	r3, [pc, #804]	; (800b658 <__ieee754_pow+0x750>)
 800b334:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b338:	ed93 7b00 	vldr	d7, [r3]
 800b33c:	4629      	mov	r1, r5
 800b33e:	ec53 2b17 	vmov	r2, r3, d7
 800b342:	eeb0 8a47 	vmov.f32	s16, s14
 800b346:	eef0 8a67 	vmov.f32	s17, s15
 800b34a:	4682      	mov	sl, r0
 800b34c:	f7f4 ff54 	bl	80001f8 <__aeabi_dsub>
 800b350:	4652      	mov	r2, sl
 800b352:	4606      	mov	r6, r0
 800b354:	460f      	mov	r7, r1
 800b356:	462b      	mov	r3, r5
 800b358:	ec51 0b18 	vmov	r0, r1, d8
 800b35c:	f7f4 ff4e 	bl	80001fc <__adddf3>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	2000      	movs	r0, #0
 800b366:	49bd      	ldr	r1, [pc, #756]	; (800b65c <__ieee754_pow+0x754>)
 800b368:	f7f5 fa28 	bl	80007bc <__aeabi_ddiv>
 800b36c:	ec41 0b19 	vmov	d9, r0, r1
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 f8f6 	bl	8000568 <__aeabi_dmul>
 800b37c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b388:	2300      	movs	r3, #0
 800b38a:	9304      	str	r3, [sp, #16]
 800b38c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b390:	46ab      	mov	fp, r5
 800b392:	106d      	asrs	r5, r5, #1
 800b394:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b398:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b39c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	4614      	mov	r4, r2
 800b3a8:	461d      	mov	r5, r3
 800b3aa:	f7f5 f8dd 	bl	8000568 <__aeabi_dmul>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f7f4 ff1f 	bl	80001f8 <__aeabi_dsub>
 800b3ba:	ec53 2b18 	vmov	r2, r3, d8
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7f4 ff17 	bl	80001f8 <__aeabi_dsub>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4650      	mov	r0, sl
 800b3d0:	4659      	mov	r1, fp
 800b3d2:	f7f4 ff11 	bl	80001f8 <__aeabi_dsub>
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	f7f5 f8c5 	bl	8000568 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 ff07 	bl	80001f8 <__aeabi_dsub>
 800b3ea:	ec53 2b19 	vmov	r2, r3, d9
 800b3ee:	f7f5 f8bb 	bl	8000568 <__aeabi_dmul>
 800b3f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3f6:	ec41 0b18 	vmov	d8, r0, r1
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	f7f5 f8b3 	bl	8000568 <__aeabi_dmul>
 800b402:	a37d      	add	r3, pc, #500	; (adr r3, 800b5f8 <__ieee754_pow+0x6f0>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	4604      	mov	r4, r0
 800b40a:	460d      	mov	r5, r1
 800b40c:	f7f5 f8ac 	bl	8000568 <__aeabi_dmul>
 800b410:	a37b      	add	r3, pc, #492	; (adr r3, 800b600 <__ieee754_pow+0x6f8>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f4 fef1 	bl	80001fc <__adddf3>
 800b41a:	4622      	mov	r2, r4
 800b41c:	462b      	mov	r3, r5
 800b41e:	f7f5 f8a3 	bl	8000568 <__aeabi_dmul>
 800b422:	a379      	add	r3, pc, #484	; (adr r3, 800b608 <__ieee754_pow+0x700>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f4 fee8 	bl	80001fc <__adddf3>
 800b42c:	4622      	mov	r2, r4
 800b42e:	462b      	mov	r3, r5
 800b430:	f7f5 f89a 	bl	8000568 <__aeabi_dmul>
 800b434:	a376      	add	r3, pc, #472	; (adr r3, 800b610 <__ieee754_pow+0x708>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 fedf 	bl	80001fc <__adddf3>
 800b43e:	4622      	mov	r2, r4
 800b440:	462b      	mov	r3, r5
 800b442:	f7f5 f891 	bl	8000568 <__aeabi_dmul>
 800b446:	a374      	add	r3, pc, #464	; (adr r3, 800b618 <__ieee754_pow+0x710>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f4 fed6 	bl	80001fc <__adddf3>
 800b450:	4622      	mov	r2, r4
 800b452:	462b      	mov	r3, r5
 800b454:	f7f5 f888 	bl	8000568 <__aeabi_dmul>
 800b458:	a371      	add	r3, pc, #452	; (adr r3, 800b620 <__ieee754_pow+0x718>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f7f4 fecd 	bl	80001fc <__adddf3>
 800b462:	4622      	mov	r2, r4
 800b464:	4606      	mov	r6, r0
 800b466:	460f      	mov	r7, r1
 800b468:	462b      	mov	r3, r5
 800b46a:	4620      	mov	r0, r4
 800b46c:	4629      	mov	r1, r5
 800b46e:	f7f5 f87b 	bl	8000568 <__aeabi_dmul>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4630      	mov	r0, r6
 800b478:	4639      	mov	r1, r7
 800b47a:	f7f5 f875 	bl	8000568 <__aeabi_dmul>
 800b47e:	4642      	mov	r2, r8
 800b480:	4604      	mov	r4, r0
 800b482:	460d      	mov	r5, r1
 800b484:	464b      	mov	r3, r9
 800b486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b48a:	f7f4 feb7 	bl	80001fc <__adddf3>
 800b48e:	ec53 2b18 	vmov	r2, r3, d8
 800b492:	f7f5 f869 	bl	8000568 <__aeabi_dmul>
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f4 feaf 	bl	80001fc <__adddf3>
 800b49e:	4642      	mov	r2, r8
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	468b      	mov	fp, r1
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	f7f5 f85d 	bl	8000568 <__aeabi_dmul>
 800b4ae:	4b6c      	ldr	r3, [pc, #432]	; (800b660 <__ieee754_pow+0x758>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	f7f4 fea1 	bl	80001fc <__adddf3>
 800b4ba:	4652      	mov	r2, sl
 800b4bc:	465b      	mov	r3, fp
 800b4be:	f7f4 fe9d 	bl	80001fc <__adddf3>
 800b4c2:	9c04      	ldr	r4, [sp, #16]
 800b4c4:	460d      	mov	r5, r1
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 f84b 	bl	8000568 <__aeabi_dmul>
 800b4d2:	4b63      	ldr	r3, [pc, #396]	; (800b660 <__ieee754_pow+0x758>)
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	4689      	mov	r9, r1
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4620      	mov	r0, r4
 800b4dc:	4629      	mov	r1, r5
 800b4de:	f7f4 fe8b 	bl	80001f8 <__aeabi_dsub>
 800b4e2:	4632      	mov	r2, r6
 800b4e4:	463b      	mov	r3, r7
 800b4e6:	f7f4 fe87 	bl	80001f8 <__aeabi_dsub>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	4659      	mov	r1, fp
 800b4f2:	f7f4 fe81 	bl	80001f8 <__aeabi_dsub>
 800b4f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4fa:	f7f5 f835 	bl	8000568 <__aeabi_dmul>
 800b4fe:	4622      	mov	r2, r4
 800b500:	4606      	mov	r6, r0
 800b502:	460f      	mov	r7, r1
 800b504:	462b      	mov	r3, r5
 800b506:	ec51 0b18 	vmov	r0, r1, d8
 800b50a:	f7f5 f82d 	bl	8000568 <__aeabi_dmul>
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f4 fe71 	bl	80001fc <__adddf3>
 800b51a:	4606      	mov	r6, r0
 800b51c:	460f      	mov	r7, r1
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f4 fe69 	bl	80001fc <__adddf3>
 800b52a:	9c04      	ldr	r4, [sp, #16]
 800b52c:	a33e      	add	r3, pc, #248	; (adr r3, 800b628 <__ieee754_pow+0x720>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	4620      	mov	r0, r4
 800b534:	460d      	mov	r5, r1
 800b536:	f7f5 f817 	bl	8000568 <__aeabi_dmul>
 800b53a:	4642      	mov	r2, r8
 800b53c:	ec41 0b18 	vmov	d8, r0, r1
 800b540:	464b      	mov	r3, r9
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	f7f4 fe57 	bl	80001f8 <__aeabi_dsub>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4630      	mov	r0, r6
 800b550:	4639      	mov	r1, r7
 800b552:	f7f4 fe51 	bl	80001f8 <__aeabi_dsub>
 800b556:	a336      	add	r3, pc, #216	; (adr r3, 800b630 <__ieee754_pow+0x728>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f5 f804 	bl	8000568 <__aeabi_dmul>
 800b560:	a335      	add	r3, pc, #212	; (adr r3, 800b638 <__ieee754_pow+0x730>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	4606      	mov	r6, r0
 800b568:	460f      	mov	r7, r1
 800b56a:	4620      	mov	r0, r4
 800b56c:	4629      	mov	r1, r5
 800b56e:	f7f4 fffb 	bl	8000568 <__aeabi_dmul>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4630      	mov	r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	f7f4 fe3f 	bl	80001fc <__adddf3>
 800b57e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b580:	4b38      	ldr	r3, [pc, #224]	; (800b664 <__ieee754_pow+0x75c>)
 800b582:	4413      	add	r3, r2
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f4 fe38 	bl	80001fc <__adddf3>
 800b58c:	4682      	mov	sl, r0
 800b58e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b590:	468b      	mov	fp, r1
 800b592:	f7f4 ff7f 	bl	8000494 <__aeabi_i2d>
 800b596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b598:	4b33      	ldr	r3, [pc, #204]	; (800b668 <__ieee754_pow+0x760>)
 800b59a:	4413      	add	r3, r2
 800b59c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	460f      	mov	r7, r1
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	ec51 0b18 	vmov	r0, r1, d8
 800b5ac:	f7f4 fe26 	bl	80001fc <__adddf3>
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	f7f4 fe22 	bl	80001fc <__adddf3>
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	f7f4 fe1e 	bl	80001fc <__adddf3>
 800b5c0:	9c04      	ldr	r4, [sp, #16]
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	463b      	mov	r3, r7
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	f7f4 fe15 	bl	80001f8 <__aeabi_dsub>
 800b5ce:	4642      	mov	r2, r8
 800b5d0:	464b      	mov	r3, r9
 800b5d2:	f7f4 fe11 	bl	80001f8 <__aeabi_dsub>
 800b5d6:	ec53 2b18 	vmov	r2, r3, d8
 800b5da:	f7f4 fe0d 	bl	80001f8 <__aeabi_dsub>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4650      	mov	r0, sl
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	e606      	b.n	800b1f6 <__ieee754_pow+0x2ee>
 800b5e8:	2401      	movs	r4, #1
 800b5ea:	e6a0      	b.n	800b32e <__ieee754_pow+0x426>
 800b5ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b640 <__ieee754_pow+0x738>
 800b5f0:	e60d      	b.n	800b20e <__ieee754_pow+0x306>
 800b5f2:	bf00      	nop
 800b5f4:	f3af 8000 	nop.w
 800b5f8:	4a454eef 	.word	0x4a454eef
 800b5fc:	3fca7e28 	.word	0x3fca7e28
 800b600:	93c9db65 	.word	0x93c9db65
 800b604:	3fcd864a 	.word	0x3fcd864a
 800b608:	a91d4101 	.word	0xa91d4101
 800b60c:	3fd17460 	.word	0x3fd17460
 800b610:	518f264d 	.word	0x518f264d
 800b614:	3fd55555 	.word	0x3fd55555
 800b618:	db6fabff 	.word	0xdb6fabff
 800b61c:	3fdb6db6 	.word	0x3fdb6db6
 800b620:	33333303 	.word	0x33333303
 800b624:	3fe33333 	.word	0x3fe33333
 800b628:	e0000000 	.word	0xe0000000
 800b62c:	3feec709 	.word	0x3feec709
 800b630:	dc3a03fd 	.word	0xdc3a03fd
 800b634:	3feec709 	.word	0x3feec709
 800b638:	145b01f5 	.word	0x145b01f5
 800b63c:	be3e2fe0 	.word	0xbe3e2fe0
 800b640:	00000000 	.word	0x00000000
 800b644:	3ff00000 	.word	0x3ff00000
 800b648:	7ff00000 	.word	0x7ff00000
 800b64c:	43400000 	.word	0x43400000
 800b650:	0003988e 	.word	0x0003988e
 800b654:	000bb679 	.word	0x000bb679
 800b658:	0800cc78 	.word	0x0800cc78
 800b65c:	3ff00000 	.word	0x3ff00000
 800b660:	40080000 	.word	0x40080000
 800b664:	0800cc98 	.word	0x0800cc98
 800b668:	0800cc88 	.word	0x0800cc88
 800b66c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b944 <__ieee754_pow+0xa3c>)
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f7f4 fdc1 	bl	80001fc <__adddf3>
 800b67a:	4622      	mov	r2, r4
 800b67c:	ec41 0b1a 	vmov	d10, r0, r1
 800b680:	462b      	mov	r3, r5
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f4 fdb7 	bl	80001f8 <__aeabi_dsub>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	ec51 0b1a 	vmov	r0, r1, d10
 800b692:	f7f5 f9f9 	bl	8000a88 <__aeabi_dcmpgt>
 800b696:	2800      	cmp	r0, #0
 800b698:	f47f adf8 	bne.w	800b28c <__ieee754_pow+0x384>
 800b69c:	4aa4      	ldr	r2, [pc, #656]	; (800b930 <__ieee754_pow+0xa28>)
 800b69e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	f340 810b 	ble.w	800b8be <__ieee754_pow+0x9b6>
 800b6a8:	151b      	asrs	r3, r3, #20
 800b6aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b6ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b6b2:	fa4a f303 	asr.w	r3, sl, r3
 800b6b6:	445b      	add	r3, fp
 800b6b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b6bc:	4e9d      	ldr	r6, [pc, #628]	; (800b934 <__ieee754_pow+0xa2c>)
 800b6be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b6c2:	4116      	asrs	r6, r2
 800b6c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	ea23 0106 	bic.w	r1, r3, r6
 800b6ce:	f1c2 0214 	rsb	r2, r2, #20
 800b6d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b6d6:	fa4a fa02 	asr.w	sl, sl, r2
 800b6da:	f1bb 0f00 	cmp.w	fp, #0
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	bfb8      	it	lt
 800b6e8:	f1ca 0a00 	rsblt	sl, sl, #0
 800b6ec:	f7f4 fd84 	bl	80001f8 <__aeabi_dsub>
 800b6f0:	ec41 0b19 	vmov	d9, r0, r1
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	ec51 0b19 	vmov	r0, r1, d9
 800b6fc:	f7f4 fd7e 	bl	80001fc <__adddf3>
 800b700:	2400      	movs	r4, #0
 800b702:	a379      	add	r3, pc, #484	; (adr r3, 800b8e8 <__ieee754_pow+0x9e0>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	4620      	mov	r0, r4
 800b70a:	460d      	mov	r5, r1
 800b70c:	f7f4 ff2c 	bl	8000568 <__aeabi_dmul>
 800b710:	ec53 2b19 	vmov	r2, r3, d9
 800b714:	4606      	mov	r6, r0
 800b716:	460f      	mov	r7, r1
 800b718:	4620      	mov	r0, r4
 800b71a:	4629      	mov	r1, r5
 800b71c:	f7f4 fd6c 	bl	80001f8 <__aeabi_dsub>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4640      	mov	r0, r8
 800b726:	4649      	mov	r1, r9
 800b728:	f7f4 fd66 	bl	80001f8 <__aeabi_dsub>
 800b72c:	a370      	add	r3, pc, #448	; (adr r3, 800b8f0 <__ieee754_pow+0x9e8>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f7f4 ff19 	bl	8000568 <__aeabi_dmul>
 800b736:	a370      	add	r3, pc, #448	; (adr r3, 800b8f8 <__ieee754_pow+0x9f0>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	4680      	mov	r8, r0
 800b73e:	4689      	mov	r9, r1
 800b740:	4620      	mov	r0, r4
 800b742:	4629      	mov	r1, r5
 800b744:	f7f4 ff10 	bl	8000568 <__aeabi_dmul>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4640      	mov	r0, r8
 800b74e:	4649      	mov	r1, r9
 800b750:	f7f4 fd54 	bl	80001fc <__adddf3>
 800b754:	4604      	mov	r4, r0
 800b756:	460d      	mov	r5, r1
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4630      	mov	r0, r6
 800b75e:	4639      	mov	r1, r7
 800b760:	f7f4 fd4c 	bl	80001fc <__adddf3>
 800b764:	4632      	mov	r2, r6
 800b766:	463b      	mov	r3, r7
 800b768:	4680      	mov	r8, r0
 800b76a:	4689      	mov	r9, r1
 800b76c:	f7f4 fd44 	bl	80001f8 <__aeabi_dsub>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4620      	mov	r0, r4
 800b776:	4629      	mov	r1, r5
 800b778:	f7f4 fd3e 	bl	80001f8 <__aeabi_dsub>
 800b77c:	4642      	mov	r2, r8
 800b77e:	4606      	mov	r6, r0
 800b780:	460f      	mov	r7, r1
 800b782:	464b      	mov	r3, r9
 800b784:	4640      	mov	r0, r8
 800b786:	4649      	mov	r1, r9
 800b788:	f7f4 feee 	bl	8000568 <__aeabi_dmul>
 800b78c:	a35c      	add	r3, pc, #368	; (adr r3, 800b900 <__ieee754_pow+0x9f8>)
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	4604      	mov	r4, r0
 800b794:	460d      	mov	r5, r1
 800b796:	f7f4 fee7 	bl	8000568 <__aeabi_dmul>
 800b79a:	a35b      	add	r3, pc, #364	; (adr r3, 800b908 <__ieee754_pow+0xa00>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f4 fd2a 	bl	80001f8 <__aeabi_dsub>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	f7f4 fede 	bl	8000568 <__aeabi_dmul>
 800b7ac:	a358      	add	r3, pc, #352	; (adr r3, 800b910 <__ieee754_pow+0xa08>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fd23 	bl	80001fc <__adddf3>
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	462b      	mov	r3, r5
 800b7ba:	f7f4 fed5 	bl	8000568 <__aeabi_dmul>
 800b7be:	a356      	add	r3, pc, #344	; (adr r3, 800b918 <__ieee754_pow+0xa10>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f7f4 fd18 	bl	80001f8 <__aeabi_dsub>
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	462b      	mov	r3, r5
 800b7cc:	f7f4 fecc 	bl	8000568 <__aeabi_dmul>
 800b7d0:	a353      	add	r3, pc, #332	; (adr r3, 800b920 <__ieee754_pow+0xa18>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fd11 	bl	80001fc <__adddf3>
 800b7da:	4622      	mov	r2, r4
 800b7dc:	462b      	mov	r3, r5
 800b7de:	f7f4 fec3 	bl	8000568 <__aeabi_dmul>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7f4 fd05 	bl	80001f8 <__aeabi_dsub>
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4640      	mov	r0, r8
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	f7f4 feb5 	bl	8000568 <__aeabi_dmul>
 800b7fe:	2200      	movs	r2, #0
 800b800:	ec41 0b19 	vmov	d9, r0, r1
 800b804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b808:	4620      	mov	r0, r4
 800b80a:	4629      	mov	r1, r5
 800b80c:	f7f4 fcf4 	bl	80001f8 <__aeabi_dsub>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	ec51 0b19 	vmov	r0, r1, d9
 800b818:	f7f4 ffd0 	bl	80007bc <__aeabi_ddiv>
 800b81c:	4632      	mov	r2, r6
 800b81e:	4604      	mov	r4, r0
 800b820:	460d      	mov	r5, r1
 800b822:	463b      	mov	r3, r7
 800b824:	4640      	mov	r0, r8
 800b826:	4649      	mov	r1, r9
 800b828:	f7f4 fe9e 	bl	8000568 <__aeabi_dmul>
 800b82c:	4632      	mov	r2, r6
 800b82e:	463b      	mov	r3, r7
 800b830:	f7f4 fce4 	bl	80001fc <__adddf3>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f4 fcdc 	bl	80001f8 <__aeabi_dsub>
 800b840:	4642      	mov	r2, r8
 800b842:	464b      	mov	r3, r9
 800b844:	f7f4 fcd8 	bl	80001f8 <__aeabi_dsub>
 800b848:	460b      	mov	r3, r1
 800b84a:	4602      	mov	r2, r0
 800b84c:	493a      	ldr	r1, [pc, #232]	; (800b938 <__ieee754_pow+0xa30>)
 800b84e:	2000      	movs	r0, #0
 800b850:	f7f4 fcd2 	bl	80001f8 <__aeabi_dsub>
 800b854:	e9cd 0100 	strd	r0, r1, [sp]
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b862:	da2f      	bge.n	800b8c4 <__ieee754_pow+0x9bc>
 800b864:	4650      	mov	r0, sl
 800b866:	ed9d 0b00 	vldr	d0, [sp]
 800b86a:	f001 f919 	bl	800caa0 <scalbn>
 800b86e:	ec51 0b10 	vmov	r0, r1, d0
 800b872:	ec53 2b18 	vmov	r2, r3, d8
 800b876:	f7ff bbe0 	b.w	800b03a <__ieee754_pow+0x132>
 800b87a:	4b30      	ldr	r3, [pc, #192]	; (800b93c <__ieee754_pow+0xa34>)
 800b87c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b880:	429e      	cmp	r6, r3
 800b882:	f77f af0b 	ble.w	800b69c <__ieee754_pow+0x794>
 800b886:	4b2e      	ldr	r3, [pc, #184]	; (800b940 <__ieee754_pow+0xa38>)
 800b888:	440b      	add	r3, r1
 800b88a:	4303      	orrs	r3, r0
 800b88c:	d00b      	beq.n	800b8a6 <__ieee754_pow+0x99e>
 800b88e:	a326      	add	r3, pc, #152	; (adr r3, 800b928 <__ieee754_pow+0xa20>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	ec51 0b18 	vmov	r0, r1, d8
 800b898:	f7f4 fe66 	bl	8000568 <__aeabi_dmul>
 800b89c:	a322      	add	r3, pc, #136	; (adr r3, 800b928 <__ieee754_pow+0xa20>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f7ff bbca 	b.w	800b03a <__ieee754_pow+0x132>
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	f7f4 fca5 	bl	80001f8 <__aeabi_dsub>
 800b8ae:	4642      	mov	r2, r8
 800b8b0:	464b      	mov	r3, r9
 800b8b2:	f7f5 f8df 	bl	8000a74 <__aeabi_dcmpge>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	f43f aef0 	beq.w	800b69c <__ieee754_pow+0x794>
 800b8bc:	e7e7      	b.n	800b88e <__ieee754_pow+0x986>
 800b8be:	f04f 0a00 	mov.w	sl, #0
 800b8c2:	e717      	b.n	800b6f4 <__ieee754_pow+0x7ec>
 800b8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	e7d2      	b.n	800b872 <__ieee754_pow+0x96a>
 800b8cc:	491a      	ldr	r1, [pc, #104]	; (800b938 <__ieee754_pow+0xa30>)
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f7ff bb9e 	b.w	800b010 <__ieee754_pow+0x108>
 800b8d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d8:	f7ff bb9a 	b.w	800b010 <__ieee754_pow+0x108>
 800b8dc:	9000      	str	r0, [sp, #0]
 800b8de:	f7ff bb76 	b.w	800afce <__ieee754_pow+0xc6>
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	f7ff bb60 	b.w	800afa8 <__ieee754_pow+0xa0>
 800b8e8:	00000000 	.word	0x00000000
 800b8ec:	3fe62e43 	.word	0x3fe62e43
 800b8f0:	fefa39ef 	.word	0xfefa39ef
 800b8f4:	3fe62e42 	.word	0x3fe62e42
 800b8f8:	0ca86c39 	.word	0x0ca86c39
 800b8fc:	be205c61 	.word	0xbe205c61
 800b900:	72bea4d0 	.word	0x72bea4d0
 800b904:	3e663769 	.word	0x3e663769
 800b908:	c5d26bf1 	.word	0xc5d26bf1
 800b90c:	3ebbbd41 	.word	0x3ebbbd41
 800b910:	af25de2c 	.word	0xaf25de2c
 800b914:	3f11566a 	.word	0x3f11566a
 800b918:	16bebd93 	.word	0x16bebd93
 800b91c:	3f66c16c 	.word	0x3f66c16c
 800b920:	5555553e 	.word	0x5555553e
 800b924:	3fc55555 	.word	0x3fc55555
 800b928:	c2f8f359 	.word	0xc2f8f359
 800b92c:	01a56e1f 	.word	0x01a56e1f
 800b930:	3fe00000 	.word	0x3fe00000
 800b934:	000fffff 	.word	0x000fffff
 800b938:	3ff00000 	.word	0x3ff00000
 800b93c:	4090cbff 	.word	0x4090cbff
 800b940:	3f6f3400 	.word	0x3f6f3400
 800b944:	652b82fe 	.word	0x652b82fe
 800b948:	3c971547 	.word	0x3c971547
 800b94c:	00000000 	.word	0x00000000

0800b950 <__ieee754_rem_pio2>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	ed2d 8b02 	vpush	{d8}
 800b958:	ec55 4b10 	vmov	r4, r5, d0
 800b95c:	4bca      	ldr	r3, [pc, #808]	; (800bc88 <__ieee754_rem_pio2+0x338>)
 800b95e:	b08b      	sub	sp, #44	; 0x2c
 800b960:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b964:	4598      	cmp	r8, r3
 800b966:	4682      	mov	sl, r0
 800b968:	9502      	str	r5, [sp, #8]
 800b96a:	dc08      	bgt.n	800b97e <__ieee754_rem_pio2+0x2e>
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	ed80 0b00 	vstr	d0, [r0]
 800b974:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b978:	f04f 0b00 	mov.w	fp, #0
 800b97c:	e028      	b.n	800b9d0 <__ieee754_rem_pio2+0x80>
 800b97e:	4bc3      	ldr	r3, [pc, #780]	; (800bc8c <__ieee754_rem_pio2+0x33c>)
 800b980:	4598      	cmp	r8, r3
 800b982:	dc78      	bgt.n	800ba76 <__ieee754_rem_pio2+0x126>
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	4ec2      	ldr	r6, [pc, #776]	; (800bc90 <__ieee754_rem_pio2+0x340>)
 800b988:	2b00      	cmp	r3, #0
 800b98a:	ee10 0a10 	vmov	r0, s0
 800b98e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x300>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	4629      	mov	r1, r5
 800b996:	dd39      	ble.n	800ba0c <__ieee754_rem_pio2+0xbc>
 800b998:	f7f4 fc2e 	bl	80001f8 <__aeabi_dsub>
 800b99c:	45b0      	cmp	r8, r6
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	d01b      	beq.n	800b9dc <__ieee754_rem_pio2+0x8c>
 800b9a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x308>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f7f4 fc25 	bl	80001f8 <__aeabi_dsub>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	e9ca 2300 	strd	r2, r3, [sl]
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7f4 fc1d 	bl	80001f8 <__aeabi_dsub>
 800b9be:	a3a6      	add	r3, pc, #664	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x308>)
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	f7f4 fc18 	bl	80001f8 <__aeabi_dsub>
 800b9c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9cc:	f04f 0b01 	mov.w	fp, #1
 800b9d0:	4658      	mov	r0, fp
 800b9d2:	b00b      	add	sp, #44	; 0x2c
 800b9d4:	ecbd 8b02 	vpop	{d8}
 800b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x310>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fc09 	bl	80001f8 <__aeabi_dsub>
 800b9e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x318>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	460d      	mov	r5, r1
 800b9f0:	f7f4 fc02 	bl	80001f8 <__aeabi_dsub>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	e9ca 2300 	strd	r2, r3, [sl]
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4629      	mov	r1, r5
 800ba00:	f7f4 fbfa 	bl	80001f8 <__aeabi_dsub>
 800ba04:	a398      	add	r3, pc, #608	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x318>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	e7db      	b.n	800b9c4 <__ieee754_rem_pio2+0x74>
 800ba0c:	f7f4 fbf6 	bl	80001fc <__adddf3>
 800ba10:	45b0      	cmp	r8, r6
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	d016      	beq.n	800ba46 <__ieee754_rem_pio2+0xf6>
 800ba18:	a38f      	add	r3, pc, #572	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x308>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	f7f4 fbed 	bl	80001fc <__adddf3>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	e9ca 2300 	strd	r2, r3, [sl]
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	f7f4 fbe3 	bl	80001f8 <__aeabi_dsub>
 800ba32:	a389      	add	r3, pc, #548	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x308>)
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fbe0 	bl	80001fc <__adddf3>
 800ba3c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ba40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba44:	e7c4      	b.n	800b9d0 <__ieee754_rem_pio2+0x80>
 800ba46:	a386      	add	r3, pc, #536	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x310>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fbd6 	bl	80001fc <__adddf3>
 800ba50:	a385      	add	r3, pc, #532	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x318>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	4604      	mov	r4, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	f7f4 fbcf 	bl	80001fc <__adddf3>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	460b      	mov	r3, r1
 800ba62:	e9ca 2300 	strd	r2, r3, [sl]
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	f7f4 fbc5 	bl	80001f8 <__aeabi_dsub>
 800ba6e:	a37e      	add	r3, pc, #504	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x318>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	e7e0      	b.n	800ba38 <__ieee754_rem_pio2+0xe8>
 800ba76:	4b87      	ldr	r3, [pc, #540]	; (800bc94 <__ieee754_rem_pio2+0x344>)
 800ba78:	4598      	cmp	r8, r3
 800ba7a:	f300 80d9 	bgt.w	800bc30 <__ieee754_rem_pio2+0x2e0>
 800ba7e:	f7fe fd97 	bl	800a5b0 <fabs>
 800ba82:	ec55 4b10 	vmov	r4, r5, d0
 800ba86:	ee10 0a10 	vmov	r0, s0
 800ba8a:	a379      	add	r3, pc, #484	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x320>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	4629      	mov	r1, r5
 800ba92:	f7f4 fd69 	bl	8000568 <__aeabi_dmul>
 800ba96:	4b80      	ldr	r3, [pc, #512]	; (800bc98 <__ieee754_rem_pio2+0x348>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f7f4 fbaf 	bl	80001fc <__adddf3>
 800ba9e:	f7f5 f813 	bl	8000ac8 <__aeabi_d2iz>
 800baa2:	4683      	mov	fp, r0
 800baa4:	f7f4 fcf6 	bl	8000494 <__aeabi_i2d>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	ec43 2b18 	vmov	d8, r2, r3
 800bab0:	a367      	add	r3, pc, #412	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x300>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fd57 	bl	8000568 <__aeabi_dmul>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	4620      	mov	r0, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7f4 fb99 	bl	80001f8 <__aeabi_dsub>
 800bac6:	a364      	add	r3, pc, #400	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x308>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	ec51 0b18 	vmov	r0, r1, d8
 800bad4:	f7f4 fd48 	bl	8000568 <__aeabi_dmul>
 800bad8:	f1bb 0f1f 	cmp.w	fp, #31
 800badc:	4604      	mov	r4, r0
 800bade:	460d      	mov	r5, r1
 800bae0:	dc0d      	bgt.n	800bafe <__ieee754_rem_pio2+0x1ae>
 800bae2:	4b6e      	ldr	r3, [pc, #440]	; (800bc9c <__ieee754_rem_pio2+0x34c>)
 800bae4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800bae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baec:	4543      	cmp	r3, r8
 800baee:	d006      	beq.n	800bafe <__ieee754_rem_pio2+0x1ae>
 800baf0:	4622      	mov	r2, r4
 800baf2:	462b      	mov	r3, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	4639      	mov	r1, r7
 800baf8:	f7f4 fb7e 	bl	80001f8 <__aeabi_dsub>
 800bafc:	e00f      	b.n	800bb1e <__ieee754_rem_pio2+0x1ce>
 800bafe:	462b      	mov	r3, r5
 800bb00:	4622      	mov	r2, r4
 800bb02:	4630      	mov	r0, r6
 800bb04:	4639      	mov	r1, r7
 800bb06:	f7f4 fb77 	bl	80001f8 <__aeabi_dsub>
 800bb0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb0e:	9303      	str	r3, [sp, #12]
 800bb10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb14:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bb18:	f1b8 0f10 	cmp.w	r8, #16
 800bb1c:	dc02      	bgt.n	800bb24 <__ieee754_rem_pio2+0x1d4>
 800bb1e:	e9ca 0100 	strd	r0, r1, [sl]
 800bb22:	e039      	b.n	800bb98 <__ieee754_rem_pio2+0x248>
 800bb24:	a34e      	add	r3, pc, #312	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x310>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	ec51 0b18 	vmov	r0, r1, d8
 800bb2e:	f7f4 fd1b 	bl	8000568 <__aeabi_dmul>
 800bb32:	4604      	mov	r4, r0
 800bb34:	460d      	mov	r5, r1
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	f7f4 fb5b 	bl	80001f8 <__aeabi_dsub>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4680      	mov	r8, r0
 800bb48:	4689      	mov	r9, r1
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	f7f4 fb53 	bl	80001f8 <__aeabi_dsub>
 800bb52:	4622      	mov	r2, r4
 800bb54:	462b      	mov	r3, r5
 800bb56:	f7f4 fb4f 	bl	80001f8 <__aeabi_dsub>
 800bb5a:	a343      	add	r3, pc, #268	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x318>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	4604      	mov	r4, r0
 800bb62:	460d      	mov	r5, r1
 800bb64:	ec51 0b18 	vmov	r0, r1, d8
 800bb68:	f7f4 fcfe 	bl	8000568 <__aeabi_dmul>
 800bb6c:	4622      	mov	r2, r4
 800bb6e:	462b      	mov	r3, r5
 800bb70:	f7f4 fb42 	bl	80001f8 <__aeabi_dsub>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4604      	mov	r4, r0
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	f7f4 fb3a 	bl	80001f8 <__aeabi_dsub>
 800bb84:	9a03      	ldr	r2, [sp, #12]
 800bb86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	2b31      	cmp	r3, #49	; 0x31
 800bb8e:	dc24      	bgt.n	800bbda <__ieee754_rem_pio2+0x28a>
 800bb90:	e9ca 0100 	strd	r0, r1, [sl]
 800bb94:	4646      	mov	r6, r8
 800bb96:	464f      	mov	r7, r9
 800bb98:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	4642      	mov	r2, r8
 800bba0:	464b      	mov	r3, r9
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fb28 	bl	80001f8 <__aeabi_dsub>
 800bba8:	462b      	mov	r3, r5
 800bbaa:	4622      	mov	r2, r4
 800bbac:	f7f4 fb24 	bl	80001f8 <__aeabi_dsub>
 800bbb0:	9b02      	ldr	r3, [sp, #8]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbb8:	f6bf af0a 	bge.w	800b9d0 <__ieee754_rem_pio2+0x80>
 800bbbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bbc0:	f8ca 3004 	str.w	r3, [sl, #4]
 800bbc4:	f8ca 8000 	str.w	r8, [sl]
 800bbc8:	f8ca 0008 	str.w	r0, [sl, #8]
 800bbcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbd0:	f8ca 300c 	str.w	r3, [sl, #12]
 800bbd4:	f1cb 0b00 	rsb	fp, fp, #0
 800bbd8:	e6fa      	b.n	800b9d0 <__ieee754_rem_pio2+0x80>
 800bbda:	a327      	add	r3, pc, #156	; (adr r3, 800bc78 <__ieee754_rem_pio2+0x328>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	ec51 0b18 	vmov	r0, r1, d8
 800bbe4:	f7f4 fcc0 	bl	8000568 <__aeabi_dmul>
 800bbe8:	4604      	mov	r4, r0
 800bbea:	460d      	mov	r5, r1
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	f7f4 fb00 	bl	80001f8 <__aeabi_dsub>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	460f      	mov	r7, r1
 800bc00:	4640      	mov	r0, r8
 800bc02:	4649      	mov	r1, r9
 800bc04:	f7f4 faf8 	bl	80001f8 <__aeabi_dsub>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	f7f4 faf4 	bl	80001f8 <__aeabi_dsub>
 800bc10:	a31b      	add	r3, pc, #108	; (adr r3, 800bc80 <__ieee754_rem_pio2+0x330>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	4604      	mov	r4, r0
 800bc18:	460d      	mov	r5, r1
 800bc1a:	ec51 0b18 	vmov	r0, r1, d8
 800bc1e:	f7f4 fca3 	bl	8000568 <__aeabi_dmul>
 800bc22:	4622      	mov	r2, r4
 800bc24:	462b      	mov	r3, r5
 800bc26:	f7f4 fae7 	bl	80001f8 <__aeabi_dsub>
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	460d      	mov	r5, r1
 800bc2e:	e75f      	b.n	800baf0 <__ieee754_rem_pio2+0x1a0>
 800bc30:	4b1b      	ldr	r3, [pc, #108]	; (800bca0 <__ieee754_rem_pio2+0x350>)
 800bc32:	4598      	cmp	r8, r3
 800bc34:	dd36      	ble.n	800bca4 <__ieee754_rem_pio2+0x354>
 800bc36:	ee10 2a10 	vmov	r2, s0
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fada 	bl	80001f8 <__aeabi_dsub>
 800bc44:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc48:	e9ca 0100 	strd	r0, r1, [sl]
 800bc4c:	e694      	b.n	800b978 <__ieee754_rem_pio2+0x28>
 800bc4e:	bf00      	nop
 800bc50:	54400000 	.word	0x54400000
 800bc54:	3ff921fb 	.word	0x3ff921fb
 800bc58:	1a626331 	.word	0x1a626331
 800bc5c:	3dd0b461 	.word	0x3dd0b461
 800bc60:	1a600000 	.word	0x1a600000
 800bc64:	3dd0b461 	.word	0x3dd0b461
 800bc68:	2e037073 	.word	0x2e037073
 800bc6c:	3ba3198a 	.word	0x3ba3198a
 800bc70:	6dc9c883 	.word	0x6dc9c883
 800bc74:	3fe45f30 	.word	0x3fe45f30
 800bc78:	2e000000 	.word	0x2e000000
 800bc7c:	3ba3198a 	.word	0x3ba3198a
 800bc80:	252049c1 	.word	0x252049c1
 800bc84:	397b839a 	.word	0x397b839a
 800bc88:	3fe921fb 	.word	0x3fe921fb
 800bc8c:	4002d97b 	.word	0x4002d97b
 800bc90:	3ff921fb 	.word	0x3ff921fb
 800bc94:	413921fb 	.word	0x413921fb
 800bc98:	3fe00000 	.word	0x3fe00000
 800bc9c:	0800cca8 	.word	0x0800cca8
 800bca0:	7fefffff 	.word	0x7fefffff
 800bca4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bca8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bcac:	ee10 0a10 	vmov	r0, s0
 800bcb0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bcb4:	ee10 6a10 	vmov	r6, s0
 800bcb8:	460f      	mov	r7, r1
 800bcba:	f7f4 ff05 	bl	8000ac8 <__aeabi_d2iz>
 800bcbe:	f7f4 fbe9 	bl	8000494 <__aeabi_i2d>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcce:	f7f4 fa93 	bl	80001f8 <__aeabi_dsub>
 800bcd2:	4b22      	ldr	r3, [pc, #136]	; (800bd5c <__ieee754_rem_pio2+0x40c>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f7f4 fc47 	bl	8000568 <__aeabi_dmul>
 800bcda:	460f      	mov	r7, r1
 800bcdc:	4606      	mov	r6, r0
 800bcde:	f7f4 fef3 	bl	8000ac8 <__aeabi_d2iz>
 800bce2:	f7f4 fbd7 	bl	8000494 <__aeabi_i2d>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4630      	mov	r0, r6
 800bcec:	4639      	mov	r1, r7
 800bcee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcf2:	f7f4 fa81 	bl	80001f8 <__aeabi_dsub>
 800bcf6:	4b19      	ldr	r3, [pc, #100]	; (800bd5c <__ieee754_rem_pio2+0x40c>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f7f4 fc35 	bl	8000568 <__aeabi_dmul>
 800bcfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd02:	ad04      	add	r5, sp, #16
 800bd04:	f04f 0803 	mov.w	r8, #3
 800bd08:	46a9      	mov	r9, r5
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	2700      	movs	r7, #0
 800bd0e:	4632      	mov	r2, r6
 800bd10:	463b      	mov	r3, r7
 800bd12:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bd16:	46c3      	mov	fp, r8
 800bd18:	3d08      	subs	r5, #8
 800bd1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bd1e:	f7f4 fe8b 	bl	8000a38 <__aeabi_dcmpeq>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d1f3      	bne.n	800bd0e <__ieee754_rem_pio2+0x3be>
 800bd26:	4b0e      	ldr	r3, [pc, #56]	; (800bd60 <__ieee754_rem_pio2+0x410>)
 800bd28:	9301      	str	r3, [sp, #4]
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	4622      	mov	r2, r4
 800bd30:	465b      	mov	r3, fp
 800bd32:	4651      	mov	r1, sl
 800bd34:	4648      	mov	r0, r9
 800bd36:	f000 f993 	bl	800c060 <__kernel_rem_pio2>
 800bd3a:	9b02      	ldr	r3, [sp, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	4683      	mov	fp, r0
 800bd40:	f6bf ae46 	bge.w	800b9d0 <__ieee754_rem_pio2+0x80>
 800bd44:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bd48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd4c:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd50:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bd54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd58:	e73a      	b.n	800bbd0 <__ieee754_rem_pio2+0x280>
 800bd5a:	bf00      	nop
 800bd5c:	41700000 	.word	0x41700000
 800bd60:	0800cd28 	.word	0x0800cd28

0800bd64 <__ieee754_sqrt>:
 800bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd68:	ec55 4b10 	vmov	r4, r5, d0
 800bd6c:	4e56      	ldr	r6, [pc, #344]	; (800bec8 <__ieee754_sqrt+0x164>)
 800bd6e:	43ae      	bics	r6, r5
 800bd70:	ee10 0a10 	vmov	r0, s0
 800bd74:	ee10 3a10 	vmov	r3, s0
 800bd78:	4629      	mov	r1, r5
 800bd7a:	462a      	mov	r2, r5
 800bd7c:	d110      	bne.n	800bda0 <__ieee754_sqrt+0x3c>
 800bd7e:	ee10 2a10 	vmov	r2, s0
 800bd82:	462b      	mov	r3, r5
 800bd84:	f7f4 fbf0 	bl	8000568 <__aeabi_dmul>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	4629      	mov	r1, r5
 800bd90:	f7f4 fa34 	bl	80001fc <__adddf3>
 800bd94:	4604      	mov	r4, r0
 800bd96:	460d      	mov	r5, r1
 800bd98:	ec45 4b10 	vmov	d0, r4, r5
 800bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	dc10      	bgt.n	800bdc6 <__ieee754_sqrt+0x62>
 800bda4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bda8:	4330      	orrs	r0, r6
 800bdaa:	d0f5      	beq.n	800bd98 <__ieee754_sqrt+0x34>
 800bdac:	b15d      	cbz	r5, 800bdc6 <__ieee754_sqrt+0x62>
 800bdae:	ee10 2a10 	vmov	r2, s0
 800bdb2:	462b      	mov	r3, r5
 800bdb4:	ee10 0a10 	vmov	r0, s0
 800bdb8:	f7f4 fa1e 	bl	80001f8 <__aeabi_dsub>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	f7f4 fcfc 	bl	80007bc <__aeabi_ddiv>
 800bdc4:	e7e6      	b.n	800bd94 <__ieee754_sqrt+0x30>
 800bdc6:	1509      	asrs	r1, r1, #20
 800bdc8:	d076      	beq.n	800beb8 <__ieee754_sqrt+0x154>
 800bdca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bdce:	07ce      	lsls	r6, r1, #31
 800bdd0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bdd4:	bf5e      	ittt	pl
 800bdd6:	0fda      	lsrpl	r2, r3, #31
 800bdd8:	005b      	lslpl	r3, r3, #1
 800bdda:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bdde:	0fda      	lsrs	r2, r3, #31
 800bde0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bde4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bde8:	2000      	movs	r0, #0
 800bdea:	106d      	asrs	r5, r5, #1
 800bdec:	005b      	lsls	r3, r3, #1
 800bdee:	f04f 0e16 	mov.w	lr, #22
 800bdf2:	4684      	mov	ip, r0
 800bdf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdf8:	eb0c 0401 	add.w	r4, ip, r1
 800bdfc:	4294      	cmp	r4, r2
 800bdfe:	bfde      	ittt	le
 800be00:	1b12      	suble	r2, r2, r4
 800be02:	eb04 0c01 	addle.w	ip, r4, r1
 800be06:	1840      	addle	r0, r0, r1
 800be08:	0052      	lsls	r2, r2, #1
 800be0a:	f1be 0e01 	subs.w	lr, lr, #1
 800be0e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800be16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be1a:	d1ed      	bne.n	800bdf8 <__ieee754_sqrt+0x94>
 800be1c:	4671      	mov	r1, lr
 800be1e:	2720      	movs	r7, #32
 800be20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800be24:	4562      	cmp	r2, ip
 800be26:	eb04 060e 	add.w	r6, r4, lr
 800be2a:	dc02      	bgt.n	800be32 <__ieee754_sqrt+0xce>
 800be2c:	d113      	bne.n	800be56 <__ieee754_sqrt+0xf2>
 800be2e:	429e      	cmp	r6, r3
 800be30:	d811      	bhi.n	800be56 <__ieee754_sqrt+0xf2>
 800be32:	2e00      	cmp	r6, #0
 800be34:	eb06 0e04 	add.w	lr, r6, r4
 800be38:	da43      	bge.n	800bec2 <__ieee754_sqrt+0x15e>
 800be3a:	f1be 0f00 	cmp.w	lr, #0
 800be3e:	db40      	blt.n	800bec2 <__ieee754_sqrt+0x15e>
 800be40:	f10c 0801 	add.w	r8, ip, #1
 800be44:	eba2 020c 	sub.w	r2, r2, ip
 800be48:	429e      	cmp	r6, r3
 800be4a:	bf88      	it	hi
 800be4c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800be50:	1b9b      	subs	r3, r3, r6
 800be52:	4421      	add	r1, r4
 800be54:	46c4      	mov	ip, r8
 800be56:	0052      	lsls	r2, r2, #1
 800be58:	3f01      	subs	r7, #1
 800be5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800be62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be66:	d1dd      	bne.n	800be24 <__ieee754_sqrt+0xc0>
 800be68:	4313      	orrs	r3, r2
 800be6a:	d006      	beq.n	800be7a <__ieee754_sqrt+0x116>
 800be6c:	1c4c      	adds	r4, r1, #1
 800be6e:	bf13      	iteet	ne
 800be70:	3101      	addne	r1, #1
 800be72:	3001      	addeq	r0, #1
 800be74:	4639      	moveq	r1, r7
 800be76:	f021 0101 	bicne.w	r1, r1, #1
 800be7a:	1043      	asrs	r3, r0, #1
 800be7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be80:	0849      	lsrs	r1, r1, #1
 800be82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be86:	07c2      	lsls	r2, r0, #31
 800be88:	bf48      	it	mi
 800be8a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800be8e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800be92:	460c      	mov	r4, r1
 800be94:	463d      	mov	r5, r7
 800be96:	e77f      	b.n	800bd98 <__ieee754_sqrt+0x34>
 800be98:	0ada      	lsrs	r2, r3, #11
 800be9a:	3815      	subs	r0, #21
 800be9c:	055b      	lsls	r3, r3, #21
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d0fa      	beq.n	800be98 <__ieee754_sqrt+0x134>
 800bea2:	02d7      	lsls	r7, r2, #11
 800bea4:	d50a      	bpl.n	800bebc <__ieee754_sqrt+0x158>
 800bea6:	f1c1 0420 	rsb	r4, r1, #32
 800beaa:	fa23 f404 	lsr.w	r4, r3, r4
 800beae:	1e4d      	subs	r5, r1, #1
 800beb0:	408b      	lsls	r3, r1
 800beb2:	4322      	orrs	r2, r4
 800beb4:	1b41      	subs	r1, r0, r5
 800beb6:	e788      	b.n	800bdca <__ieee754_sqrt+0x66>
 800beb8:	4608      	mov	r0, r1
 800beba:	e7f0      	b.n	800be9e <__ieee754_sqrt+0x13a>
 800bebc:	0052      	lsls	r2, r2, #1
 800bebe:	3101      	adds	r1, #1
 800bec0:	e7ef      	b.n	800bea2 <__ieee754_sqrt+0x13e>
 800bec2:	46e0      	mov	r8, ip
 800bec4:	e7be      	b.n	800be44 <__ieee754_sqrt+0xe0>
 800bec6:	bf00      	nop
 800bec8:	7ff00000 	.word	0x7ff00000
 800becc:	00000000 	.word	0x00000000

0800bed0 <__kernel_cos>:
 800bed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	ec57 6b10 	vmov	r6, r7, d0
 800bed8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bedc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bee0:	ed8d 1b00 	vstr	d1, [sp]
 800bee4:	da07      	bge.n	800bef6 <__kernel_cos+0x26>
 800bee6:	ee10 0a10 	vmov	r0, s0
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fdec 	bl	8000ac8 <__aeabi_d2iz>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	f000 8088 	beq.w	800c006 <__kernel_cos+0x136>
 800bef6:	4632      	mov	r2, r6
 800bef8:	463b      	mov	r3, r7
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 fb33 	bl	8000568 <__aeabi_dmul>
 800bf02:	4b51      	ldr	r3, [pc, #324]	; (800c048 <__kernel_cos+0x178>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	460d      	mov	r5, r1
 800bf0a:	f7f4 fb2d 	bl	8000568 <__aeabi_dmul>
 800bf0e:	a340      	add	r3, pc, #256	; (adr r3, 800c010 <__kernel_cos+0x140>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	4682      	mov	sl, r0
 800bf16:	468b      	mov	fp, r1
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 fb24 	bl	8000568 <__aeabi_dmul>
 800bf20:	a33d      	add	r3, pc, #244	; (adr r3, 800c018 <__kernel_cos+0x148>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 f969 	bl	80001fc <__adddf3>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	f7f4 fb1b 	bl	8000568 <__aeabi_dmul>
 800bf32:	a33b      	add	r3, pc, #236	; (adr r3, 800c020 <__kernel_cos+0x150>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f7f4 f95e 	bl	80001f8 <__aeabi_dsub>
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	462b      	mov	r3, r5
 800bf40:	f7f4 fb12 	bl	8000568 <__aeabi_dmul>
 800bf44:	a338      	add	r3, pc, #224	; (adr r3, 800c028 <__kernel_cos+0x158>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f7f4 f957 	bl	80001fc <__adddf3>
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	f7f4 fb09 	bl	8000568 <__aeabi_dmul>
 800bf56:	a336      	add	r3, pc, #216	; (adr r3, 800c030 <__kernel_cos+0x160>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 f94c 	bl	80001f8 <__aeabi_dsub>
 800bf60:	4622      	mov	r2, r4
 800bf62:	462b      	mov	r3, r5
 800bf64:	f7f4 fb00 	bl	8000568 <__aeabi_dmul>
 800bf68:	a333      	add	r3, pc, #204	; (adr r3, 800c038 <__kernel_cos+0x168>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 f945 	bl	80001fc <__adddf3>
 800bf72:	4622      	mov	r2, r4
 800bf74:	462b      	mov	r3, r5
 800bf76:	f7f4 faf7 	bl	8000568 <__aeabi_dmul>
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	462b      	mov	r3, r5
 800bf7e:	f7f4 faf3 	bl	8000568 <__aeabi_dmul>
 800bf82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf86:	4604      	mov	r4, r0
 800bf88:	460d      	mov	r5, r1
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 faeb 	bl	8000568 <__aeabi_dmul>
 800bf92:	460b      	mov	r3, r1
 800bf94:	4602      	mov	r2, r0
 800bf96:	4629      	mov	r1, r5
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7f4 f92d 	bl	80001f8 <__aeabi_dsub>
 800bf9e:	4b2b      	ldr	r3, [pc, #172]	; (800c04c <__kernel_cos+0x17c>)
 800bfa0:	4598      	cmp	r8, r3
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	460f      	mov	r7, r1
 800bfa6:	dc10      	bgt.n	800bfca <__kernel_cos+0xfa>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4650      	mov	r0, sl
 800bfae:	4659      	mov	r1, fp
 800bfb0:	f7f4 f922 	bl	80001f8 <__aeabi_dsub>
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4926      	ldr	r1, [pc, #152]	; (800c050 <__kernel_cos+0x180>)
 800bfb8:	4602      	mov	r2, r0
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f7f4 f91c 	bl	80001f8 <__aeabi_dsub>
 800bfc0:	ec41 0b10 	vmov	d0, r0, r1
 800bfc4:	b003      	add	sp, #12
 800bfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfca:	4b22      	ldr	r3, [pc, #136]	; (800c054 <__kernel_cos+0x184>)
 800bfcc:	4920      	ldr	r1, [pc, #128]	; (800c050 <__kernel_cos+0x180>)
 800bfce:	4598      	cmp	r8, r3
 800bfd0:	bfcc      	ite	gt
 800bfd2:	4d21      	ldrgt	r5, [pc, #132]	; (800c058 <__kernel_cos+0x188>)
 800bfd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bfd8:	2400      	movs	r4, #0
 800bfda:	4622      	mov	r2, r4
 800bfdc:	462b      	mov	r3, r5
 800bfde:	2000      	movs	r0, #0
 800bfe0:	f7f4 f90a 	bl	80001f8 <__aeabi_dsub>
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4680      	mov	r8, r0
 800bfe8:	4689      	mov	r9, r1
 800bfea:	462b      	mov	r3, r5
 800bfec:	4650      	mov	r0, sl
 800bfee:	4659      	mov	r1, fp
 800bff0:	f7f4 f902 	bl	80001f8 <__aeabi_dsub>
 800bff4:	4632      	mov	r2, r6
 800bff6:	463b      	mov	r3, r7
 800bff8:	f7f4 f8fe 	bl	80001f8 <__aeabi_dsub>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4640      	mov	r0, r8
 800c002:	4649      	mov	r1, r9
 800c004:	e7da      	b.n	800bfbc <__kernel_cos+0xec>
 800c006:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c040 <__kernel_cos+0x170>
 800c00a:	e7db      	b.n	800bfc4 <__kernel_cos+0xf4>
 800c00c:	f3af 8000 	nop.w
 800c010:	be8838d4 	.word	0xbe8838d4
 800c014:	bda8fae9 	.word	0xbda8fae9
 800c018:	bdb4b1c4 	.word	0xbdb4b1c4
 800c01c:	3e21ee9e 	.word	0x3e21ee9e
 800c020:	809c52ad 	.word	0x809c52ad
 800c024:	3e927e4f 	.word	0x3e927e4f
 800c028:	19cb1590 	.word	0x19cb1590
 800c02c:	3efa01a0 	.word	0x3efa01a0
 800c030:	16c15177 	.word	0x16c15177
 800c034:	3f56c16c 	.word	0x3f56c16c
 800c038:	5555554c 	.word	0x5555554c
 800c03c:	3fa55555 	.word	0x3fa55555
 800c040:	00000000 	.word	0x00000000
 800c044:	3ff00000 	.word	0x3ff00000
 800c048:	3fe00000 	.word	0x3fe00000
 800c04c:	3fd33332 	.word	0x3fd33332
 800c050:	3ff00000 	.word	0x3ff00000
 800c054:	3fe90000 	.word	0x3fe90000
 800c058:	3fd20000 	.word	0x3fd20000
 800c05c:	00000000 	.word	0x00000000

0800c060 <__kernel_rem_pio2>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	ed2d 8b02 	vpush	{d8}
 800c068:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c06c:	f112 0f14 	cmn.w	r2, #20
 800c070:	9308      	str	r3, [sp, #32]
 800c072:	9101      	str	r1, [sp, #4]
 800c074:	4bc6      	ldr	r3, [pc, #792]	; (800c390 <__kernel_rem_pio2+0x330>)
 800c076:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c078:	9009      	str	r0, [sp, #36]	; 0x24
 800c07a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c07e:	9304      	str	r3, [sp, #16]
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c086:	bfa8      	it	ge
 800c088:	1ed4      	subge	r4, r2, #3
 800c08a:	9306      	str	r3, [sp, #24]
 800c08c:	bfb2      	itee	lt
 800c08e:	2400      	movlt	r4, #0
 800c090:	2318      	movge	r3, #24
 800c092:	fb94 f4f3 	sdivge	r4, r4, r3
 800c096:	f06f 0317 	mvn.w	r3, #23
 800c09a:	fb04 3303 	mla	r3, r4, r3, r3
 800c09e:	eb03 0a02 	add.w	sl, r3, r2
 800c0a2:	9b04      	ldr	r3, [sp, #16]
 800c0a4:	9a06      	ldr	r2, [sp, #24]
 800c0a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c380 <__kernel_rem_pio2+0x320>
 800c0aa:	eb03 0802 	add.w	r8, r3, r2
 800c0ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c0b0:	1aa7      	subs	r7, r4, r2
 800c0b2:	ae20      	add	r6, sp, #128	; 0x80
 800c0b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c0b8:	2500      	movs	r5, #0
 800c0ba:	4545      	cmp	r5, r8
 800c0bc:	dd18      	ble.n	800c0f0 <__kernel_rem_pio2+0x90>
 800c0be:	9b08      	ldr	r3, [sp, #32]
 800c0c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c0c4:	aa20      	add	r2, sp, #128	; 0x80
 800c0c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c380 <__kernel_rem_pio2+0x320>
 800c0ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c0ce:	f1c3 0301 	rsb	r3, r3, #1
 800c0d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c0d6:	9307      	str	r3, [sp, #28]
 800c0d8:	9b07      	ldr	r3, [sp, #28]
 800c0da:	9a04      	ldr	r2, [sp, #16]
 800c0dc:	4443      	add	r3, r8
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	db2f      	blt.n	800c142 <__kernel_rem_pio2+0xe2>
 800c0e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c0ea:	462f      	mov	r7, r5
 800c0ec:	2600      	movs	r6, #0
 800c0ee:	e01b      	b.n	800c128 <__kernel_rem_pio2+0xc8>
 800c0f0:	42ef      	cmn	r7, r5
 800c0f2:	d407      	bmi.n	800c104 <__kernel_rem_pio2+0xa4>
 800c0f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0f8:	f7f4 f9cc 	bl	8000494 <__aeabi_i2d>
 800c0fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c100:	3501      	adds	r5, #1
 800c102:	e7da      	b.n	800c0ba <__kernel_rem_pio2+0x5a>
 800c104:	ec51 0b18 	vmov	r0, r1, d8
 800c108:	e7f8      	b.n	800c0fc <__kernel_rem_pio2+0x9c>
 800c10a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c10e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c112:	f7f4 fa29 	bl	8000568 <__aeabi_dmul>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c11e:	f7f4 f86d 	bl	80001fc <__adddf3>
 800c122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c126:	3601      	adds	r6, #1
 800c128:	9b06      	ldr	r3, [sp, #24]
 800c12a:	429e      	cmp	r6, r3
 800c12c:	f1a7 0708 	sub.w	r7, r7, #8
 800c130:	ddeb      	ble.n	800c10a <__kernel_rem_pio2+0xaa>
 800c132:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c136:	3508      	adds	r5, #8
 800c138:	ecab 7b02 	vstmia	fp!, {d7}
 800c13c:	f108 0801 	add.w	r8, r8, #1
 800c140:	e7ca      	b.n	800c0d8 <__kernel_rem_pio2+0x78>
 800c142:	9b04      	ldr	r3, [sp, #16]
 800c144:	aa0c      	add	r2, sp, #48	; 0x30
 800c146:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c14a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c14c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c14e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c152:	9c04      	ldr	r4, [sp, #16]
 800c154:	930a      	str	r3, [sp, #40]	; 0x28
 800c156:	ab98      	add	r3, sp, #608	; 0x260
 800c158:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c15c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c160:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c164:	f8cd b008 	str.w	fp, [sp, #8]
 800c168:	4625      	mov	r5, r4
 800c16a:	2d00      	cmp	r5, #0
 800c16c:	dc78      	bgt.n	800c260 <__kernel_rem_pio2+0x200>
 800c16e:	ec47 6b10 	vmov	d0, r6, r7
 800c172:	4650      	mov	r0, sl
 800c174:	f000 fc94 	bl	800caa0 <scalbn>
 800c178:	ec57 6b10 	vmov	r6, r7, d0
 800c17c:	2200      	movs	r2, #0
 800c17e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c182:	ee10 0a10 	vmov	r0, s0
 800c186:	4639      	mov	r1, r7
 800c188:	f7f4 f9ee 	bl	8000568 <__aeabi_dmul>
 800c18c:	ec41 0b10 	vmov	d0, r0, r1
 800c190:	f000 fb72 	bl	800c878 <floor>
 800c194:	4b7f      	ldr	r3, [pc, #508]	; (800c394 <__kernel_rem_pio2+0x334>)
 800c196:	ec51 0b10 	vmov	r0, r1, d0
 800c19a:	2200      	movs	r2, #0
 800c19c:	f7f4 f9e4 	bl	8000568 <__aeabi_dmul>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 f826 	bl	80001f8 <__aeabi_dsub>
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	f7f4 fc8a 	bl	8000ac8 <__aeabi_d2iz>
 800c1b4:	9007      	str	r0, [sp, #28]
 800c1b6:	f7f4 f96d 	bl	8000494 <__aeabi_i2d>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4630      	mov	r0, r6
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	f7f4 f819 	bl	80001f8 <__aeabi_dsub>
 800c1c6:	f1ba 0f00 	cmp.w	sl, #0
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460f      	mov	r7, r1
 800c1ce:	dd70      	ble.n	800c2b2 <__kernel_rem_pio2+0x252>
 800c1d0:	1e62      	subs	r2, r4, #1
 800c1d2:	ab0c      	add	r3, sp, #48	; 0x30
 800c1d4:	9d07      	ldr	r5, [sp, #28]
 800c1d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c1da:	f1ca 0118 	rsb	r1, sl, #24
 800c1de:	fa40 f301 	asr.w	r3, r0, r1
 800c1e2:	441d      	add	r5, r3
 800c1e4:	408b      	lsls	r3, r1
 800c1e6:	1ac0      	subs	r0, r0, r3
 800c1e8:	ab0c      	add	r3, sp, #48	; 0x30
 800c1ea:	9507      	str	r5, [sp, #28]
 800c1ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c1f0:	f1ca 0317 	rsb	r3, sl, #23
 800c1f4:	fa40 f303 	asr.w	r3, r0, r3
 800c1f8:	9302      	str	r3, [sp, #8]
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd66      	ble.n	800c2ce <__kernel_rem_pio2+0x26e>
 800c200:	9b07      	ldr	r3, [sp, #28]
 800c202:	2200      	movs	r2, #0
 800c204:	3301      	adds	r3, #1
 800c206:	9307      	str	r3, [sp, #28]
 800c208:	4615      	mov	r5, r2
 800c20a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c20e:	4294      	cmp	r4, r2
 800c210:	f300 8099 	bgt.w	800c346 <__kernel_rem_pio2+0x2e6>
 800c214:	f1ba 0f00 	cmp.w	sl, #0
 800c218:	dd07      	ble.n	800c22a <__kernel_rem_pio2+0x1ca>
 800c21a:	f1ba 0f01 	cmp.w	sl, #1
 800c21e:	f000 80a5 	beq.w	800c36c <__kernel_rem_pio2+0x30c>
 800c222:	f1ba 0f02 	cmp.w	sl, #2
 800c226:	f000 80c1 	beq.w	800c3ac <__kernel_rem_pio2+0x34c>
 800c22a:	9b02      	ldr	r3, [sp, #8]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d14e      	bne.n	800c2ce <__kernel_rem_pio2+0x26e>
 800c230:	4632      	mov	r2, r6
 800c232:	463b      	mov	r3, r7
 800c234:	4958      	ldr	r1, [pc, #352]	; (800c398 <__kernel_rem_pio2+0x338>)
 800c236:	2000      	movs	r0, #0
 800c238:	f7f3 ffde 	bl	80001f8 <__aeabi_dsub>
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	2d00      	cmp	r5, #0
 800c242:	d044      	beq.n	800c2ce <__kernel_rem_pio2+0x26e>
 800c244:	4650      	mov	r0, sl
 800c246:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c388 <__kernel_rem_pio2+0x328>
 800c24a:	f000 fc29 	bl	800caa0 <scalbn>
 800c24e:	4630      	mov	r0, r6
 800c250:	4639      	mov	r1, r7
 800c252:	ec53 2b10 	vmov	r2, r3, d0
 800c256:	f7f3 ffcf 	bl	80001f8 <__aeabi_dsub>
 800c25a:	4606      	mov	r6, r0
 800c25c:	460f      	mov	r7, r1
 800c25e:	e036      	b.n	800c2ce <__kernel_rem_pio2+0x26e>
 800c260:	4b4e      	ldr	r3, [pc, #312]	; (800c39c <__kernel_rem_pio2+0x33c>)
 800c262:	2200      	movs	r2, #0
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	f7f4 f97e 	bl	8000568 <__aeabi_dmul>
 800c26c:	f7f4 fc2c 	bl	8000ac8 <__aeabi_d2iz>
 800c270:	f7f4 f910 	bl	8000494 <__aeabi_i2d>
 800c274:	4b4a      	ldr	r3, [pc, #296]	; (800c3a0 <__kernel_rem_pio2+0x340>)
 800c276:	2200      	movs	r2, #0
 800c278:	4680      	mov	r8, r0
 800c27a:	4689      	mov	r9, r1
 800c27c:	f7f4 f974 	bl	8000568 <__aeabi_dmul>
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	4630      	mov	r0, r6
 800c286:	4639      	mov	r1, r7
 800c288:	f7f3 ffb6 	bl	80001f8 <__aeabi_dsub>
 800c28c:	f7f4 fc1c 	bl	8000ac8 <__aeabi_d2iz>
 800c290:	9b02      	ldr	r3, [sp, #8]
 800c292:	f843 0b04 	str.w	r0, [r3], #4
 800c296:	3d01      	subs	r5, #1
 800c298:	9302      	str	r3, [sp, #8]
 800c29a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c29c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	f7f3 ffa8 	bl	80001fc <__adddf3>
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	460f      	mov	r7, r1
 800c2b0:	e75b      	b.n	800c16a <__kernel_rem_pio2+0x10a>
 800c2b2:	d105      	bne.n	800c2c0 <__kernel_rem_pio2+0x260>
 800c2b4:	1e63      	subs	r3, r4, #1
 800c2b6:	aa0c      	add	r2, sp, #48	; 0x30
 800c2b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c2bc:	15c3      	asrs	r3, r0, #23
 800c2be:	e79b      	b.n	800c1f8 <__kernel_rem_pio2+0x198>
 800c2c0:	4b38      	ldr	r3, [pc, #224]	; (800c3a4 <__kernel_rem_pio2+0x344>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f7f4 fbd6 	bl	8000a74 <__aeabi_dcmpge>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d139      	bne.n	800c340 <__kernel_rem_pio2+0x2e0>
 800c2cc:	9002      	str	r0, [sp, #8]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	f7f4 fbaf 	bl	8000a38 <__aeabi_dcmpeq>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	f000 80b4 	beq.w	800c448 <__kernel_rem_pio2+0x3e8>
 800c2e0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800c2e4:	465b      	mov	r3, fp
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	9904      	ldr	r1, [sp, #16]
 800c2ea:	428b      	cmp	r3, r1
 800c2ec:	da65      	bge.n	800c3ba <__kernel_rem_pio2+0x35a>
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	d07b      	beq.n	800c3ea <__kernel_rem_pio2+0x38a>
 800c2f2:	ab0c      	add	r3, sp, #48	; 0x30
 800c2f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c2f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 80a0 	beq.w	800c442 <__kernel_rem_pio2+0x3e2>
 800c302:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c388 <__kernel_rem_pio2+0x328>
 800c306:	4650      	mov	r0, sl
 800c308:	f000 fbca 	bl	800caa0 <scalbn>
 800c30c:	4f23      	ldr	r7, [pc, #140]	; (800c39c <__kernel_rem_pio2+0x33c>)
 800c30e:	ec55 4b10 	vmov	r4, r5, d0
 800c312:	46d8      	mov	r8, fp
 800c314:	2600      	movs	r6, #0
 800c316:	f1b8 0f00 	cmp.w	r8, #0
 800c31a:	f280 80cf 	bge.w	800c4bc <__kernel_rem_pio2+0x45c>
 800c31e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c380 <__kernel_rem_pio2+0x320>
 800c322:	465f      	mov	r7, fp
 800c324:	f04f 0800 	mov.w	r8, #0
 800c328:	2f00      	cmp	r7, #0
 800c32a:	f2c0 80fd 	blt.w	800c528 <__kernel_rem_pio2+0x4c8>
 800c32e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c330:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c3a8 <__kernel_rem_pio2+0x348>
 800c334:	ec55 4b18 	vmov	r4, r5, d8
 800c338:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c33c:	2600      	movs	r6, #0
 800c33e:	e0e5      	b.n	800c50c <__kernel_rem_pio2+0x4ac>
 800c340:	2302      	movs	r3, #2
 800c342:	9302      	str	r3, [sp, #8]
 800c344:	e75c      	b.n	800c200 <__kernel_rem_pio2+0x1a0>
 800c346:	f8db 3000 	ldr.w	r3, [fp]
 800c34a:	b955      	cbnz	r5, 800c362 <__kernel_rem_pio2+0x302>
 800c34c:	b123      	cbz	r3, 800c358 <__kernel_rem_pio2+0x2f8>
 800c34e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c352:	f8cb 3000 	str.w	r3, [fp]
 800c356:	2301      	movs	r3, #1
 800c358:	3201      	adds	r2, #1
 800c35a:	f10b 0b04 	add.w	fp, fp, #4
 800c35e:	461d      	mov	r5, r3
 800c360:	e755      	b.n	800c20e <__kernel_rem_pio2+0x1ae>
 800c362:	1acb      	subs	r3, r1, r3
 800c364:	f8cb 3000 	str.w	r3, [fp]
 800c368:	462b      	mov	r3, r5
 800c36a:	e7f5      	b.n	800c358 <__kernel_rem_pio2+0x2f8>
 800c36c:	1e62      	subs	r2, r4, #1
 800c36e:	ab0c      	add	r3, sp, #48	; 0x30
 800c370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c374:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c378:	a90c      	add	r1, sp, #48	; 0x30
 800c37a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c37e:	e754      	b.n	800c22a <__kernel_rem_pio2+0x1ca>
	...
 800c38c:	3ff00000 	.word	0x3ff00000
 800c390:	0800ce70 	.word	0x0800ce70
 800c394:	40200000 	.word	0x40200000
 800c398:	3ff00000 	.word	0x3ff00000
 800c39c:	3e700000 	.word	0x3e700000
 800c3a0:	41700000 	.word	0x41700000
 800c3a4:	3fe00000 	.word	0x3fe00000
 800c3a8:	0800ce30 	.word	0x0800ce30
 800c3ac:	1e62      	subs	r2, r4, #1
 800c3ae:	ab0c      	add	r3, sp, #48	; 0x30
 800c3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c3b8:	e7de      	b.n	800c378 <__kernel_rem_pio2+0x318>
 800c3ba:	a90c      	add	r1, sp, #48	; 0x30
 800c3bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	430a      	orrs	r2, r1
 800c3c4:	e790      	b.n	800c2e8 <__kernel_rem_pio2+0x288>
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c3cc:	2900      	cmp	r1, #0
 800c3ce:	d0fa      	beq.n	800c3c6 <__kernel_rem_pio2+0x366>
 800c3d0:	9a08      	ldr	r2, [sp, #32]
 800c3d2:	18e3      	adds	r3, r4, r3
 800c3d4:	18a6      	adds	r6, r4, r2
 800c3d6:	aa20      	add	r2, sp, #128	; 0x80
 800c3d8:	1c65      	adds	r5, r4, #1
 800c3da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c3de:	9302      	str	r3, [sp, #8]
 800c3e0:	9b02      	ldr	r3, [sp, #8]
 800c3e2:	42ab      	cmp	r3, r5
 800c3e4:	da04      	bge.n	800c3f0 <__kernel_rem_pio2+0x390>
 800c3e6:	461c      	mov	r4, r3
 800c3e8:	e6b5      	b.n	800c156 <__kernel_rem_pio2+0xf6>
 800c3ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e7eb      	b.n	800c3c8 <__kernel_rem_pio2+0x368>
 800c3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3f6:	f7f4 f84d 	bl	8000494 <__aeabi_i2d>
 800c3fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c400:	46b3      	mov	fp, r6
 800c402:	461c      	mov	r4, r3
 800c404:	2700      	movs	r7, #0
 800c406:	f04f 0800 	mov.w	r8, #0
 800c40a:	f04f 0900 	mov.w	r9, #0
 800c40e:	9b06      	ldr	r3, [sp, #24]
 800c410:	429f      	cmp	r7, r3
 800c412:	dd06      	ble.n	800c422 <__kernel_rem_pio2+0x3c2>
 800c414:	ab70      	add	r3, sp, #448	; 0x1c0
 800c416:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c41a:	e9c3 8900 	strd	r8, r9, [r3]
 800c41e:	3501      	adds	r5, #1
 800c420:	e7de      	b.n	800c3e0 <__kernel_rem_pio2+0x380>
 800c422:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c426:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c42a:	f7f4 f89d 	bl	8000568 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4640      	mov	r0, r8
 800c434:	4649      	mov	r1, r9
 800c436:	f7f3 fee1 	bl	80001fc <__adddf3>
 800c43a:	3701      	adds	r7, #1
 800c43c:	4680      	mov	r8, r0
 800c43e:	4689      	mov	r9, r1
 800c440:	e7e5      	b.n	800c40e <__kernel_rem_pio2+0x3ae>
 800c442:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c446:	e754      	b.n	800c2f2 <__kernel_rem_pio2+0x292>
 800c448:	ec47 6b10 	vmov	d0, r6, r7
 800c44c:	f1ca 0000 	rsb	r0, sl, #0
 800c450:	f000 fb26 	bl	800caa0 <scalbn>
 800c454:	ec57 6b10 	vmov	r6, r7, d0
 800c458:	4b9f      	ldr	r3, [pc, #636]	; (800c6d8 <__kernel_rem_pio2+0x678>)
 800c45a:	ee10 0a10 	vmov	r0, s0
 800c45e:	2200      	movs	r2, #0
 800c460:	4639      	mov	r1, r7
 800c462:	f7f4 fb07 	bl	8000a74 <__aeabi_dcmpge>
 800c466:	b300      	cbz	r0, 800c4aa <__kernel_rem_pio2+0x44a>
 800c468:	4b9c      	ldr	r3, [pc, #624]	; (800c6dc <__kernel_rem_pio2+0x67c>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	4630      	mov	r0, r6
 800c46e:	4639      	mov	r1, r7
 800c470:	f7f4 f87a 	bl	8000568 <__aeabi_dmul>
 800c474:	f7f4 fb28 	bl	8000ac8 <__aeabi_d2iz>
 800c478:	4605      	mov	r5, r0
 800c47a:	f7f4 f80b 	bl	8000494 <__aeabi_i2d>
 800c47e:	4b96      	ldr	r3, [pc, #600]	; (800c6d8 <__kernel_rem_pio2+0x678>)
 800c480:	2200      	movs	r2, #0
 800c482:	f7f4 f871 	bl	8000568 <__aeabi_dmul>
 800c486:	460b      	mov	r3, r1
 800c488:	4602      	mov	r2, r0
 800c48a:	4639      	mov	r1, r7
 800c48c:	4630      	mov	r0, r6
 800c48e:	f7f3 feb3 	bl	80001f8 <__aeabi_dsub>
 800c492:	f7f4 fb19 	bl	8000ac8 <__aeabi_d2iz>
 800c496:	f104 0b01 	add.w	fp, r4, #1
 800c49a:	ab0c      	add	r3, sp, #48	; 0x30
 800c49c:	f10a 0a18 	add.w	sl, sl, #24
 800c4a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c4a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c4a8:	e72b      	b.n	800c302 <__kernel_rem_pio2+0x2a2>
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	f7f4 fb0b 	bl	8000ac8 <__aeabi_d2iz>
 800c4b2:	ab0c      	add	r3, sp, #48	; 0x30
 800c4b4:	46a3      	mov	fp, r4
 800c4b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c4ba:	e722      	b.n	800c302 <__kernel_rem_pio2+0x2a2>
 800c4bc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c4be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c4c2:	ab0c      	add	r3, sp, #48	; 0x30
 800c4c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c4c8:	f7f3 ffe4 	bl	8000494 <__aeabi_i2d>
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	462b      	mov	r3, r5
 800c4d0:	f7f4 f84a 	bl	8000568 <__aeabi_dmul>
 800c4d4:	4632      	mov	r2, r6
 800c4d6:	e9c9 0100 	strd	r0, r1, [r9]
 800c4da:	463b      	mov	r3, r7
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	f7f4 f842 	bl	8000568 <__aeabi_dmul>
 800c4e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	460d      	mov	r5, r1
 800c4ec:	e713      	b.n	800c316 <__kernel_rem_pio2+0x2b6>
 800c4ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c4f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c4f6:	f7f4 f837 	bl	8000568 <__aeabi_dmul>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f3 fe7b 	bl	80001fc <__adddf3>
 800c506:	3601      	adds	r6, #1
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	9b04      	ldr	r3, [sp, #16]
 800c50e:	429e      	cmp	r6, r3
 800c510:	dc01      	bgt.n	800c516 <__kernel_rem_pio2+0x4b6>
 800c512:	45b0      	cmp	r8, r6
 800c514:	daeb      	bge.n	800c4ee <__kernel_rem_pio2+0x48e>
 800c516:	ab48      	add	r3, sp, #288	; 0x120
 800c518:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c51c:	e9c3 4500 	strd	r4, r5, [r3]
 800c520:	3f01      	subs	r7, #1
 800c522:	f108 0801 	add.w	r8, r8, #1
 800c526:	e6ff      	b.n	800c328 <__kernel_rem_pio2+0x2c8>
 800c528:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	dc0b      	bgt.n	800c546 <__kernel_rem_pio2+0x4e6>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	dc6e      	bgt.n	800c610 <__kernel_rem_pio2+0x5b0>
 800c532:	d045      	beq.n	800c5c0 <__kernel_rem_pio2+0x560>
 800c534:	9b07      	ldr	r3, [sp, #28]
 800c536:	f003 0007 	and.w	r0, r3, #7
 800c53a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c53e:	ecbd 8b02 	vpop	{d8}
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c546:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c548:	2b03      	cmp	r3, #3
 800c54a:	d1f3      	bne.n	800c534 <__kernel_rem_pio2+0x4d4>
 800c54c:	ab48      	add	r3, sp, #288	; 0x120
 800c54e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c552:	46d0      	mov	r8, sl
 800c554:	46d9      	mov	r9, fp
 800c556:	f1b9 0f00 	cmp.w	r9, #0
 800c55a:	f1a8 0808 	sub.w	r8, r8, #8
 800c55e:	dc64      	bgt.n	800c62a <__kernel_rem_pio2+0x5ca>
 800c560:	465c      	mov	r4, fp
 800c562:	2c01      	cmp	r4, #1
 800c564:	f1aa 0a08 	sub.w	sl, sl, #8
 800c568:	dc7e      	bgt.n	800c668 <__kernel_rem_pio2+0x608>
 800c56a:	2000      	movs	r0, #0
 800c56c:	2100      	movs	r1, #0
 800c56e:	f1bb 0f01 	cmp.w	fp, #1
 800c572:	f300 8097 	bgt.w	800c6a4 <__kernel_rem_pio2+0x644>
 800c576:	9b02      	ldr	r3, [sp, #8]
 800c578:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c57c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 8099 	bne.w	800c6b8 <__kernel_rem_pio2+0x658>
 800c586:	9b01      	ldr	r3, [sp, #4]
 800c588:	e9c3 5600 	strd	r5, r6, [r3]
 800c58c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c590:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c594:	e7ce      	b.n	800c534 <__kernel_rem_pio2+0x4d4>
 800c596:	ab48      	add	r3, sp, #288	; 0x120
 800c598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f7f3 fe2c 	bl	80001fc <__adddf3>
 800c5a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c5a8:	f1bb 0f00 	cmp.w	fp, #0
 800c5ac:	daf3      	bge.n	800c596 <__kernel_rem_pio2+0x536>
 800c5ae:	9b02      	ldr	r3, [sp, #8]
 800c5b0:	b113      	cbz	r3, 800c5b8 <__kernel_rem_pio2+0x558>
 800c5b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	e9c3 0100 	strd	r0, r1, [r3]
 800c5be:	e7b9      	b.n	800c534 <__kernel_rem_pio2+0x4d4>
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	e7f0      	b.n	800c5a8 <__kernel_rem_pio2+0x548>
 800c5c6:	ab48      	add	r3, sp, #288	; 0x120
 800c5c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f3 fe14 	bl	80001fc <__adddf3>
 800c5d4:	3c01      	subs	r4, #1
 800c5d6:	2c00      	cmp	r4, #0
 800c5d8:	daf5      	bge.n	800c5c6 <__kernel_rem_pio2+0x566>
 800c5da:	9b02      	ldr	r3, [sp, #8]
 800c5dc:	b1e3      	cbz	r3, 800c618 <__kernel_rem_pio2+0x5b8>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5e4:	9c01      	ldr	r4, [sp, #4]
 800c5e6:	e9c4 2300 	strd	r2, r3, [r4]
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c5f2:	f7f3 fe01 	bl	80001f8 <__aeabi_dsub>
 800c5f6:	ad4a      	add	r5, sp, #296	; 0x128
 800c5f8:	2401      	movs	r4, #1
 800c5fa:	45a3      	cmp	fp, r4
 800c5fc:	da0f      	bge.n	800c61e <__kernel_rem_pio2+0x5be>
 800c5fe:	9b02      	ldr	r3, [sp, #8]
 800c600:	b113      	cbz	r3, 800c608 <__kernel_rem_pio2+0x5a8>
 800c602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c606:	4619      	mov	r1, r3
 800c608:	9b01      	ldr	r3, [sp, #4]
 800c60a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c60e:	e791      	b.n	800c534 <__kernel_rem_pio2+0x4d4>
 800c610:	465c      	mov	r4, fp
 800c612:	2000      	movs	r0, #0
 800c614:	2100      	movs	r1, #0
 800c616:	e7de      	b.n	800c5d6 <__kernel_rem_pio2+0x576>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	e7e2      	b.n	800c5e4 <__kernel_rem_pio2+0x584>
 800c61e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c622:	f7f3 fdeb 	bl	80001fc <__adddf3>
 800c626:	3401      	adds	r4, #1
 800c628:	e7e7      	b.n	800c5fa <__kernel_rem_pio2+0x59a>
 800c62a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c62e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c632:	4620      	mov	r0, r4
 800c634:	4632      	mov	r2, r6
 800c636:	463b      	mov	r3, r7
 800c638:	4629      	mov	r1, r5
 800c63a:	f7f3 fddf 	bl	80001fc <__adddf3>
 800c63e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4620      	mov	r0, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f3 fdd5 	bl	80001f8 <__aeabi_dsub>
 800c64e:	4632      	mov	r2, r6
 800c650:	463b      	mov	r3, r7
 800c652:	f7f3 fdd3 	bl	80001fc <__adddf3>
 800c656:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c65a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c65e:	ed88 7b00 	vstr	d7, [r8]
 800c662:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c666:	e776      	b.n	800c556 <__kernel_rem_pio2+0x4f6>
 800c668:	e9da 8900 	ldrd	r8, r9, [sl]
 800c66c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c670:	4640      	mov	r0, r8
 800c672:	4632      	mov	r2, r6
 800c674:	463b      	mov	r3, r7
 800c676:	4649      	mov	r1, r9
 800c678:	f7f3 fdc0 	bl	80001fc <__adddf3>
 800c67c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4640      	mov	r0, r8
 800c686:	4649      	mov	r1, r9
 800c688:	f7f3 fdb6 	bl	80001f8 <__aeabi_dsub>
 800c68c:	4632      	mov	r2, r6
 800c68e:	463b      	mov	r3, r7
 800c690:	f7f3 fdb4 	bl	80001fc <__adddf3>
 800c694:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c69c:	ed8a 7b00 	vstr	d7, [sl]
 800c6a0:	3c01      	subs	r4, #1
 800c6a2:	e75e      	b.n	800c562 <__kernel_rem_pio2+0x502>
 800c6a4:	ab48      	add	r3, sp, #288	; 0x120
 800c6a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	f7f3 fda5 	bl	80001fc <__adddf3>
 800c6b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c6b6:	e75a      	b.n	800c56e <__kernel_rem_pio2+0x50e>
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	9a01      	ldr	r2, [sp, #4]
 800c6bc:	601d      	str	r5, [r3, #0]
 800c6be:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c6c2:	605c      	str	r4, [r3, #4]
 800c6c4:	609f      	str	r7, [r3, #8]
 800c6c6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c6ca:	60d3      	str	r3, [r2, #12]
 800c6cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6d0:	6110      	str	r0, [r2, #16]
 800c6d2:	6153      	str	r3, [r2, #20]
 800c6d4:	e72e      	b.n	800c534 <__kernel_rem_pio2+0x4d4>
 800c6d6:	bf00      	nop
 800c6d8:	41700000 	.word	0x41700000
 800c6dc:	3e700000 	.word	0x3e700000

0800c6e0 <__kernel_sin>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	ed2d 8b04 	vpush	{d8-d9}
 800c6e8:	eeb0 8a41 	vmov.f32	s16, s2
 800c6ec:	eef0 8a61 	vmov.f32	s17, s3
 800c6f0:	ec55 4b10 	vmov	r4, r5, d0
 800c6f4:	b083      	sub	sp, #12
 800c6f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c6fe:	9001      	str	r0, [sp, #4]
 800c700:	da06      	bge.n	800c710 <__kernel_sin+0x30>
 800c702:	ee10 0a10 	vmov	r0, s0
 800c706:	4629      	mov	r1, r5
 800c708:	f7f4 f9de 	bl	8000ac8 <__aeabi_d2iz>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d051      	beq.n	800c7b4 <__kernel_sin+0xd4>
 800c710:	4622      	mov	r2, r4
 800c712:	462b      	mov	r3, r5
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f3 ff26 	bl	8000568 <__aeabi_dmul>
 800c71c:	4682      	mov	sl, r0
 800c71e:	468b      	mov	fp, r1
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f7f3 ff1e 	bl	8000568 <__aeabi_dmul>
 800c72c:	a341      	add	r3, pc, #260	; (adr r3, 800c834 <__kernel_sin+0x154>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	4680      	mov	r8, r0
 800c734:	4689      	mov	r9, r1
 800c736:	4650      	mov	r0, sl
 800c738:	4659      	mov	r1, fp
 800c73a:	f7f3 ff15 	bl	8000568 <__aeabi_dmul>
 800c73e:	a33f      	add	r3, pc, #252	; (adr r3, 800c83c <__kernel_sin+0x15c>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7f3 fd58 	bl	80001f8 <__aeabi_dsub>
 800c748:	4652      	mov	r2, sl
 800c74a:	465b      	mov	r3, fp
 800c74c:	f7f3 ff0c 	bl	8000568 <__aeabi_dmul>
 800c750:	a33c      	add	r3, pc, #240	; (adr r3, 800c844 <__kernel_sin+0x164>)
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	f7f3 fd51 	bl	80001fc <__adddf3>
 800c75a:	4652      	mov	r2, sl
 800c75c:	465b      	mov	r3, fp
 800c75e:	f7f3 ff03 	bl	8000568 <__aeabi_dmul>
 800c762:	a33a      	add	r3, pc, #232	; (adr r3, 800c84c <__kernel_sin+0x16c>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 fd46 	bl	80001f8 <__aeabi_dsub>
 800c76c:	4652      	mov	r2, sl
 800c76e:	465b      	mov	r3, fp
 800c770:	f7f3 fefa 	bl	8000568 <__aeabi_dmul>
 800c774:	a337      	add	r3, pc, #220	; (adr r3, 800c854 <__kernel_sin+0x174>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f7f3 fd3f 	bl	80001fc <__adddf3>
 800c77e:	9b01      	ldr	r3, [sp, #4]
 800c780:	4606      	mov	r6, r0
 800c782:	460f      	mov	r7, r1
 800c784:	b9eb      	cbnz	r3, 800c7c2 <__kernel_sin+0xe2>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4650      	mov	r0, sl
 800c78c:	4659      	mov	r1, fp
 800c78e:	f7f3 feeb 	bl	8000568 <__aeabi_dmul>
 800c792:	a325      	add	r3, pc, #148	; (adr r3, 800c828 <__kernel_sin+0x148>)
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	f7f3 fd2e 	bl	80001f8 <__aeabi_dsub>
 800c79c:	4642      	mov	r2, r8
 800c79e:	464b      	mov	r3, r9
 800c7a0:	f7f3 fee2 	bl	8000568 <__aeabi_dmul>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	f7f3 fd26 	bl	80001fc <__adddf3>
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	460d      	mov	r5, r1
 800c7b4:	ec45 4b10 	vmov	d0, r4, r5
 800c7b8:	b003      	add	sp, #12
 800c7ba:	ecbd 8b04 	vpop	{d8-d9}
 800c7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c2:	4b1b      	ldr	r3, [pc, #108]	; (800c830 <__kernel_sin+0x150>)
 800c7c4:	ec51 0b18 	vmov	r0, r1, d8
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f7f3 fecd 	bl	8000568 <__aeabi_dmul>
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	ec41 0b19 	vmov	d9, r0, r1
 800c7d4:	463b      	mov	r3, r7
 800c7d6:	4640      	mov	r0, r8
 800c7d8:	4649      	mov	r1, r9
 800c7da:	f7f3 fec5 	bl	8000568 <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	ec51 0b19 	vmov	r0, r1, d9
 800c7e6:	f7f3 fd07 	bl	80001f8 <__aeabi_dsub>
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	f7f3 febb 	bl	8000568 <__aeabi_dmul>
 800c7f2:	ec53 2b18 	vmov	r2, r3, d8
 800c7f6:	f7f3 fcff 	bl	80001f8 <__aeabi_dsub>
 800c7fa:	a30b      	add	r3, pc, #44	; (adr r3, 800c828 <__kernel_sin+0x148>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	4606      	mov	r6, r0
 800c802:	460f      	mov	r7, r1
 800c804:	4640      	mov	r0, r8
 800c806:	4649      	mov	r1, r9
 800c808:	f7f3 feae 	bl	8000568 <__aeabi_dmul>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4630      	mov	r0, r6
 800c812:	4639      	mov	r1, r7
 800c814:	f7f3 fcf2 	bl	80001fc <__adddf3>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4620      	mov	r0, r4
 800c81e:	4629      	mov	r1, r5
 800c820:	f7f3 fcea 	bl	80001f8 <__aeabi_dsub>
 800c824:	e7c4      	b.n	800c7b0 <__kernel_sin+0xd0>
 800c826:	bf00      	nop
 800c828:	55555549 	.word	0x55555549
 800c82c:	3fc55555 	.word	0x3fc55555
 800c830:	3fe00000 	.word	0x3fe00000
 800c834:	5acfd57c 	.word	0x5acfd57c
 800c838:	3de5d93a 	.word	0x3de5d93a
 800c83c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c840:	3e5ae5e6 	.word	0x3e5ae5e6
 800c844:	57b1fe7d 	.word	0x57b1fe7d
 800c848:	3ec71de3 	.word	0x3ec71de3
 800c84c:	19c161d5 	.word	0x19c161d5
 800c850:	3f2a01a0 	.word	0x3f2a01a0
 800c854:	1110f8a6 	.word	0x1110f8a6
 800c858:	3f811111 	.word	0x3f811111

0800c85c <finite>:
 800c85c:	b082      	sub	sp, #8
 800c85e:	ed8d 0b00 	vstr	d0, [sp]
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c868:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c86c:	0fc0      	lsrs	r0, r0, #31
 800c86e:	b002      	add	sp, #8
 800c870:	4770      	bx	lr
 800c872:	0000      	movs	r0, r0
 800c874:	0000      	movs	r0, r0
	...

0800c878 <floor>:
 800c878:	ec51 0b10 	vmov	r0, r1, d0
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c884:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c888:	2e13      	cmp	r6, #19
 800c88a:	ee10 5a10 	vmov	r5, s0
 800c88e:	ee10 8a10 	vmov	r8, s0
 800c892:	460c      	mov	r4, r1
 800c894:	dc32      	bgt.n	800c8fc <floor+0x84>
 800c896:	2e00      	cmp	r6, #0
 800c898:	da14      	bge.n	800c8c4 <floor+0x4c>
 800c89a:	a333      	add	r3, pc, #204	; (adr r3, 800c968 <floor+0xf0>)
 800c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a0:	f7f3 fcac 	bl	80001fc <__adddf3>
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f7f4 f8ee 	bl	8000a88 <__aeabi_dcmpgt>
 800c8ac:	b138      	cbz	r0, 800c8be <floor+0x46>
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	da57      	bge.n	800c962 <floor+0xea>
 800c8b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c8b6:	431d      	orrs	r5, r3
 800c8b8:	d001      	beq.n	800c8be <floor+0x46>
 800c8ba:	4c2d      	ldr	r4, [pc, #180]	; (800c970 <floor+0xf8>)
 800c8bc:	2500      	movs	r5, #0
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	e025      	b.n	800c910 <floor+0x98>
 800c8c4:	4f2b      	ldr	r7, [pc, #172]	; (800c974 <floor+0xfc>)
 800c8c6:	4137      	asrs	r7, r6
 800c8c8:	ea01 0307 	and.w	r3, r1, r7
 800c8cc:	4303      	orrs	r3, r0
 800c8ce:	d01f      	beq.n	800c910 <floor+0x98>
 800c8d0:	a325      	add	r3, pc, #148	; (adr r3, 800c968 <floor+0xf0>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f3 fc91 	bl	80001fc <__adddf3>
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f7f4 f8d3 	bl	8000a88 <__aeabi_dcmpgt>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d0eb      	beq.n	800c8be <floor+0x46>
 800c8e6:	2c00      	cmp	r4, #0
 800c8e8:	bfbe      	ittt	lt
 800c8ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c8ee:	fa43 f606 	asrlt.w	r6, r3, r6
 800c8f2:	19a4      	addlt	r4, r4, r6
 800c8f4:	ea24 0407 	bic.w	r4, r4, r7
 800c8f8:	2500      	movs	r5, #0
 800c8fa:	e7e0      	b.n	800c8be <floor+0x46>
 800c8fc:	2e33      	cmp	r6, #51	; 0x33
 800c8fe:	dd0b      	ble.n	800c918 <floor+0xa0>
 800c900:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c904:	d104      	bne.n	800c910 <floor+0x98>
 800c906:	ee10 2a10 	vmov	r2, s0
 800c90a:	460b      	mov	r3, r1
 800c90c:	f7f3 fc76 	bl	80001fc <__adddf3>
 800c910:	ec41 0b10 	vmov	d0, r0, r1
 800c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c918:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c920:	fa23 f707 	lsr.w	r7, r3, r7
 800c924:	4207      	tst	r7, r0
 800c926:	d0f3      	beq.n	800c910 <floor+0x98>
 800c928:	a30f      	add	r3, pc, #60	; (adr r3, 800c968 <floor+0xf0>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7f3 fc65 	bl	80001fc <__adddf3>
 800c932:	2200      	movs	r2, #0
 800c934:	2300      	movs	r3, #0
 800c936:	f7f4 f8a7 	bl	8000a88 <__aeabi_dcmpgt>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d0bf      	beq.n	800c8be <floor+0x46>
 800c93e:	2c00      	cmp	r4, #0
 800c940:	da02      	bge.n	800c948 <floor+0xd0>
 800c942:	2e14      	cmp	r6, #20
 800c944:	d103      	bne.n	800c94e <floor+0xd6>
 800c946:	3401      	adds	r4, #1
 800c948:	ea25 0507 	bic.w	r5, r5, r7
 800c94c:	e7b7      	b.n	800c8be <floor+0x46>
 800c94e:	2301      	movs	r3, #1
 800c950:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c954:	fa03 f606 	lsl.w	r6, r3, r6
 800c958:	4435      	add	r5, r6
 800c95a:	4545      	cmp	r5, r8
 800c95c:	bf38      	it	cc
 800c95e:	18e4      	addcc	r4, r4, r3
 800c960:	e7f2      	b.n	800c948 <floor+0xd0>
 800c962:	2500      	movs	r5, #0
 800c964:	462c      	mov	r4, r5
 800c966:	e7aa      	b.n	800c8be <floor+0x46>
 800c968:	8800759c 	.word	0x8800759c
 800c96c:	7e37e43c 	.word	0x7e37e43c
 800c970:	bff00000 	.word	0xbff00000
 800c974:	000fffff 	.word	0x000fffff

0800c978 <nan>:
 800c978:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c980 <nan+0x8>
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	00000000 	.word	0x00000000
 800c984:	7ff80000 	.word	0x7ff80000

0800c988 <rint>:
 800c988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c98a:	ec51 0b10 	vmov	r0, r1, d0
 800c98e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c992:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c996:	2e13      	cmp	r6, #19
 800c998:	ee10 4a10 	vmov	r4, s0
 800c99c:	460b      	mov	r3, r1
 800c99e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c9a2:	dc58      	bgt.n	800ca56 <rint+0xce>
 800c9a4:	2e00      	cmp	r6, #0
 800c9a6:	da2b      	bge.n	800ca00 <rint+0x78>
 800c9a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c9ac:	4302      	orrs	r2, r0
 800c9ae:	d023      	beq.n	800c9f8 <rint+0x70>
 800c9b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c9b4:	4302      	orrs	r2, r0
 800c9b6:	4254      	negs	r4, r2
 800c9b8:	4314      	orrs	r4, r2
 800c9ba:	0c4b      	lsrs	r3, r1, #17
 800c9bc:	0b24      	lsrs	r4, r4, #12
 800c9be:	045b      	lsls	r3, r3, #17
 800c9c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c9c4:	ea44 0103 	orr.w	r1, r4, r3
 800c9c8:	4b32      	ldr	r3, [pc, #200]	; (800ca94 <rint+0x10c>)
 800c9ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c9ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	4639      	mov	r1, r7
 800c9da:	f7f3 fc0f 	bl	80001fc <__adddf3>
 800c9de:	e9cd 0100 	strd	r0, r1, [sp]
 800c9e2:	463b      	mov	r3, r7
 800c9e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	f7f3 fc05 	bl	80001f8 <__aeabi_dsub>
 800c9ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	ec41 0b10 	vmov	d0, r0, r1
 800c9fc:	b003      	add	sp, #12
 800c9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca00:	4a25      	ldr	r2, [pc, #148]	; (800ca98 <rint+0x110>)
 800ca02:	4132      	asrs	r2, r6
 800ca04:	ea01 0702 	and.w	r7, r1, r2
 800ca08:	4307      	orrs	r7, r0
 800ca0a:	d0f5      	beq.n	800c9f8 <rint+0x70>
 800ca0c:	0851      	lsrs	r1, r2, #1
 800ca0e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ca12:	4314      	orrs	r4, r2
 800ca14:	d00c      	beq.n	800ca30 <rint+0xa8>
 800ca16:	ea23 0201 	bic.w	r2, r3, r1
 800ca1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca1e:	2e13      	cmp	r6, #19
 800ca20:	fa43 f606 	asr.w	r6, r3, r6
 800ca24:	bf0c      	ite	eq
 800ca26:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ca2a:	2400      	movne	r4, #0
 800ca2c:	ea42 0306 	orr.w	r3, r2, r6
 800ca30:	4918      	ldr	r1, [pc, #96]	; (800ca94 <rint+0x10c>)
 800ca32:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ca36:	4622      	mov	r2, r4
 800ca38:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7f3 fbdc 	bl	80001fc <__adddf3>
 800ca44:	e9cd 0100 	strd	r0, r1, [sp]
 800ca48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	462b      	mov	r3, r5
 800ca50:	f7f3 fbd2 	bl	80001f8 <__aeabi_dsub>
 800ca54:	e7d0      	b.n	800c9f8 <rint+0x70>
 800ca56:	2e33      	cmp	r6, #51	; 0x33
 800ca58:	dd07      	ble.n	800ca6a <rint+0xe2>
 800ca5a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca5e:	d1cb      	bne.n	800c9f8 <rint+0x70>
 800ca60:	ee10 2a10 	vmov	r2, s0
 800ca64:	f7f3 fbca 	bl	80001fc <__adddf3>
 800ca68:	e7c6      	b.n	800c9f8 <rint+0x70>
 800ca6a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ca6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ca72:	40d6      	lsrs	r6, r2
 800ca74:	4230      	tst	r0, r6
 800ca76:	d0bf      	beq.n	800c9f8 <rint+0x70>
 800ca78:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ca7c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ca80:	bf1f      	itttt	ne
 800ca82:	ea24 0101 	bicne.w	r1, r4, r1
 800ca86:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ca8a:	fa44 f202 	asrne.w	r2, r4, r2
 800ca8e:	ea41 0402 	orrne.w	r4, r1, r2
 800ca92:	e7cd      	b.n	800ca30 <rint+0xa8>
 800ca94:	0800ce80 	.word	0x0800ce80
 800ca98:	000fffff 	.word	0x000fffff
 800ca9c:	00000000 	.word	0x00000000

0800caa0 <scalbn>:
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	ec55 4b10 	vmov	r4, r5, d0
 800caa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800caaa:	4606      	mov	r6, r0
 800caac:	462b      	mov	r3, r5
 800caae:	b99a      	cbnz	r2, 800cad8 <scalbn+0x38>
 800cab0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cab4:	4323      	orrs	r3, r4
 800cab6:	d036      	beq.n	800cb26 <scalbn+0x86>
 800cab8:	4b39      	ldr	r3, [pc, #228]	; (800cba0 <scalbn+0x100>)
 800caba:	4629      	mov	r1, r5
 800cabc:	ee10 0a10 	vmov	r0, s0
 800cac0:	2200      	movs	r2, #0
 800cac2:	f7f3 fd51 	bl	8000568 <__aeabi_dmul>
 800cac6:	4b37      	ldr	r3, [pc, #220]	; (800cba4 <scalbn+0x104>)
 800cac8:	429e      	cmp	r6, r3
 800caca:	4604      	mov	r4, r0
 800cacc:	460d      	mov	r5, r1
 800cace:	da10      	bge.n	800caf2 <scalbn+0x52>
 800cad0:	a32b      	add	r3, pc, #172	; (adr r3, 800cb80 <scalbn+0xe0>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	e03a      	b.n	800cb4e <scalbn+0xae>
 800cad8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cadc:	428a      	cmp	r2, r1
 800cade:	d10c      	bne.n	800cafa <scalbn+0x5a>
 800cae0:	ee10 2a10 	vmov	r2, s0
 800cae4:	4620      	mov	r0, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	f7f3 fb88 	bl	80001fc <__adddf3>
 800caec:	4604      	mov	r4, r0
 800caee:	460d      	mov	r5, r1
 800caf0:	e019      	b.n	800cb26 <scalbn+0x86>
 800caf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800caf6:	460b      	mov	r3, r1
 800caf8:	3a36      	subs	r2, #54	; 0x36
 800cafa:	4432      	add	r2, r6
 800cafc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cb00:	428a      	cmp	r2, r1
 800cb02:	dd08      	ble.n	800cb16 <scalbn+0x76>
 800cb04:	2d00      	cmp	r5, #0
 800cb06:	a120      	add	r1, pc, #128	; (adr r1, 800cb88 <scalbn+0xe8>)
 800cb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb0c:	da1c      	bge.n	800cb48 <scalbn+0xa8>
 800cb0e:	a120      	add	r1, pc, #128	; (adr r1, 800cb90 <scalbn+0xf0>)
 800cb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb14:	e018      	b.n	800cb48 <scalbn+0xa8>
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	dd08      	ble.n	800cb2c <scalbn+0x8c>
 800cb1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb26:	ec45 4b10 	vmov	d0, r4, r5
 800cb2a:	bd70      	pop	{r4, r5, r6, pc}
 800cb2c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb30:	da19      	bge.n	800cb66 <scalbn+0xc6>
 800cb32:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb36:	429e      	cmp	r6, r3
 800cb38:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cb3c:	dd0a      	ble.n	800cb54 <scalbn+0xb4>
 800cb3e:	a112      	add	r1, pc, #72	; (adr r1, 800cb88 <scalbn+0xe8>)
 800cb40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e2      	bne.n	800cb0e <scalbn+0x6e>
 800cb48:	a30f      	add	r3, pc, #60	; (adr r3, 800cb88 <scalbn+0xe8>)
 800cb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4e:	f7f3 fd0b 	bl	8000568 <__aeabi_dmul>
 800cb52:	e7cb      	b.n	800caec <scalbn+0x4c>
 800cb54:	a10a      	add	r1, pc, #40	; (adr r1, 800cb80 <scalbn+0xe0>)
 800cb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0b8      	beq.n	800cad0 <scalbn+0x30>
 800cb5e:	a10e      	add	r1, pc, #56	; (adr r1, 800cb98 <scalbn+0xf8>)
 800cb60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb64:	e7b4      	b.n	800cad0 <scalbn+0x30>
 800cb66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb6a:	3236      	adds	r2, #54	; 0x36
 800cb6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb74:	4620      	mov	r0, r4
 800cb76:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <scalbn+0x108>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	e7e8      	b.n	800cb4e <scalbn+0xae>
 800cb7c:	f3af 8000 	nop.w
 800cb80:	c2f8f359 	.word	0xc2f8f359
 800cb84:	01a56e1f 	.word	0x01a56e1f
 800cb88:	8800759c 	.word	0x8800759c
 800cb8c:	7e37e43c 	.word	0x7e37e43c
 800cb90:	8800759c 	.word	0x8800759c
 800cb94:	fe37e43c 	.word	0xfe37e43c
 800cb98:	c2f8f359 	.word	0xc2f8f359
 800cb9c:	81a56e1f 	.word	0x81a56e1f
 800cba0:	43500000 	.word	0x43500000
 800cba4:	ffff3cb0 	.word	0xffff3cb0
 800cba8:	3c900000 	.word	0x3c900000

0800cbac <_init>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	bf00      	nop
 800cbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb2:	bc08      	pop	{r3}
 800cbb4:	469e      	mov	lr, r3
 800cbb6:	4770      	bx	lr

0800cbb8 <_fini>:
 800cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbba:	bf00      	nop
 800cbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbbe:	bc08      	pop	{r3}
 800cbc0:	469e      	mov	lr, r3
 800cbc2:	4770      	bx	lr
