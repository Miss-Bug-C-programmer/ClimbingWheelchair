
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800625c  0800625c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006264  08006264  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000080  080062e8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080062e8  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d7d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354f  00000000  00000000  00037e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000422b  00000000  00000000  0003d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bb2  00000000  00000000  00041c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e19ac  00000000  00000000  000597b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  0013b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006224 	.word	0x08006224

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006224 	.word	0x08006224

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <ADC_Read+0x30>)
 80004f2:	f003 f817 	bl	8003524 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80004f6:	2302      	movs	r3, #2
 80004f8:	2208      	movs	r2, #8
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <ADC_Read+0x34>)
 80004fe:	f003 ff21 	bl	8004344 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000502:	2201      	movs	r2, #1
 8000504:	2110      	movs	r1, #16
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <ADC_Read+0x30>)
 8000508:	f003 f80c 	bl	8003524 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020000 	.word	0x40020000
 8000518:	200000dc 	.word	0x200000dc

0800051c <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	889b      	ldrh	r3, [r3, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	4610      	mov	r0, r2
 8000532:	f002 ffdf 	bl	80034f4 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	799a      	ldrb	r2, [r3, #6]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	79db      	ldrb	r3, [r3, #7]
 8000546:	429a      	cmp	r2, r3
 8000548:	d004      	beq.n	8000554 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800054a:	f001 fbcb 	bl	8001ce4 <HAL_GetTick>
 800054e:	4602      	mov	r2, r0
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8000554:	f001 fbc6 	bl	8001ce4 <HAL_GetTick>
 8000558:	4602      	mov	r2, r0
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d209      	bcs.n	800057a <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	799a      	ldrb	r2, [r3, #6]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a1b      	ldrb	r3, [r3, #8]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8000576:	2301      	movs	r3, #1
 8000578:	e004      	b.n	8000584 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	799a      	ldrb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_CAN1_Init+0x64>)
 8000592:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <MX_CAN1_Init+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_CAN1_Init+0x64>)
 8000598:	2209      	movs	r2, #9
 800059a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005de:	f001 fbb1 	bl	8001d44 <HAL_CAN_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005e8:	f000 fdba 	bl	8001160 <Error_Handler>
  }

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000015c 	.word	0x2000015c
 80005f4:	40006400 	.word	0x40006400

080005f8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_CAN2_Init+0x64>)
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_CAN2_Init+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_CAN2_Init+0x64>)
 8000604:	2209      	movs	r2, #9
 8000606:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_CAN2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_CAN2_Init+0x64>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_CAN2_Init+0x64>)
 800061e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000622:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_CAN2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_CAN2_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_CAN2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_CAN2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_CAN2_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_CAN2_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_CAN2_Init+0x64>)
 800064a:	f001 fb7b 	bl	8001d44 <HAL_CAN_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000654:	f000 fd84 	bl	8001160 <Error_Handler>
  }

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000134 	.word	0x20000134
 8000660:	40006800 	.word	0x40006800

08000664 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a66      	ldr	r2, [pc, #408]	; (800081c <HAL_CAN_MspInit+0x1b8>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d14d      	bne.n	8000722 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000686:	4b66      	ldr	r3, [pc, #408]	; (8000820 <HAL_CAN_MspInit+0x1bc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	4a64      	ldr	r2, [pc, #400]	; (8000820 <HAL_CAN_MspInit+0x1bc>)
 800068e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000690:	4b63      	ldr	r3, [pc, #396]	; (8000820 <HAL_CAN_MspInit+0x1bc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d10d      	bne.n	80006b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	4b61      	ldr	r3, [pc, #388]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a60      	ldr	r2, [pc, #384]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b5a      	ldr	r3, [pc, #360]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a59      	ldr	r2, [pc, #356]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
 80006c4:	4b57      	ldr	r3, [pc, #348]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d0:	2303      	movs	r3, #3
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006e0:	2309      	movs	r3, #9
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	484f      	ldr	r0, [pc, #316]	; (8000828 <HAL_CAN_MspInit+0x1c4>)
 80006ec:	f002 fd56 	bl	800319c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2013      	movs	r0, #19
 80006f6:	f002 fa14 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006fa:	2013      	movs	r0, #19
 80006fc:	f002 fa2d 	bl	8002b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2014      	movs	r0, #20
 8000706:	f002 fa0c 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800070a:	2014      	movs	r0, #20
 800070c:	f002 fa25 	bl	8002b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2015      	movs	r0, #21
 8000716:	f002 fa04 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800071a:	2015      	movs	r0, #21
 800071c:	f002 fa1d 	bl	8002b5a <HAL_NVIC_EnableIRQ>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_TX_MAILBOX_EMPTY);


  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000720:	e077      	b.n	8000812 <HAL_CAN_MspInit+0x1ae>
  else if(canHandle->Instance==CAN2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a41      	ldr	r2, [pc, #260]	; (800082c <HAL_CAN_MspInit+0x1c8>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d172      	bne.n	8000812 <HAL_CAN_MspInit+0x1ae>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a3b      	ldr	r2, [pc, #236]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 8000736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b39      	ldr	r3, [pc, #228]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <HAL_CAN_MspInit+0x1bc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <HAL_CAN_MspInit+0x1bc>)
 8000750:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <HAL_CAN_MspInit+0x1bc>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d10d      	bne.n	8000776 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a30      	ldr	r2, [pc, #192]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 8000764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a29      	ldr	r2, [pc, #164]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <HAL_CAN_MspInit+0x1c0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000792:	2360      	movs	r3, #96	; 0x60
 8000794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80007a2:	2309      	movs	r3, #9
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <HAL_CAN_MspInit+0x1cc>)
 80007ae:	f002 fcf5 	bl	800319c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	203f      	movs	r0, #63	; 0x3f
 80007b8:	f002 f9b3 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80007bc:	203f      	movs	r0, #63	; 0x3f
 80007be:	f002 f9cc 	bl	8002b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2040      	movs	r0, #64	; 0x40
 80007c8:	f002 f9ab 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007cc:	2040      	movs	r0, #64	; 0x40
 80007ce:	f002 f9c4 	bl	8002b5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2041      	movs	r0, #65	; 0x41
 80007d8:	f002 f9a3 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007dc:	2041      	movs	r0, #65	; 0x41
 80007de:	f002 f9bc 	bl	8002b5a <HAL_NVIC_EnableIRQ>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007e2:	2102      	movs	r1, #2
 80007e4:	4813      	ldr	r0, [pc, #76]	; (8000834 <HAL_CAN_MspInit+0x1d0>)
 80007e6:	f001 fe76 	bl	80024d6 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 80007ea:	2110      	movs	r1, #16
 80007ec:	4811      	ldr	r0, [pc, #68]	; (8000834 <HAL_CAN_MspInit+0x1d0>)
 80007ee:	f001 fe72 	bl	80024d6 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80007f2:	2101      	movs	r1, #1
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <HAL_CAN_MspInit+0x1d0>)
 80007f6:	f001 fe6e 	bl	80024d6 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007fa:	2102      	movs	r1, #2
 80007fc:	480e      	ldr	r0, [pc, #56]	; (8000838 <HAL_CAN_MspInit+0x1d4>)
 80007fe:	f001 fe6a 	bl	80024d6 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000802:	2110      	movs	r1, #16
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <HAL_CAN_MspInit+0x1d4>)
 8000806:	f001 fe66 	bl	80024d6 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_TX_MAILBOX_EMPTY);
 800080a:	2101      	movs	r1, #1
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <HAL_CAN_MspInit+0x1d4>)
 800080e:	f001 fe62 	bl	80024d6 <HAL_CAN_ActivateNotification>
}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	; 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40006400 	.word	0x40006400
 8000820:	2000009c 	.word	0x2000009c
 8000824:	40023800 	.word	0x40023800
 8000828:	40020c00 	.word	0x40020c00
 800082c:	40006800 	.word	0x40006800
 8000830:	40020400 	.word	0x40020400
 8000834:	2000015c 	.word	0x2000015c
 8000838:	20000134 	.word	0x20000134

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_DMA_Init+0x3c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <MX_DMA_Init+0x3c>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_DMA_Init+0x3c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	200c      	movs	r0, #12
 8000864:	f002 f95d 	bl	8002b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000868:	200c      	movs	r0, #12
 800086a:	f002 f976 	bl	8002b5a <HAL_NVIC_EnableIRQ>

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <ENCODER_Init>:
CAN_FilterTypeDef canfil_2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <ENCODER_Init+0xc0>)
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <ENCODER_Init+0xc4>)
 8000884:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan2;
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <ENCODER_Init+0xc8>)
 8000888:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <ENCODER_Init+0xcc>)
 800088a:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 800088c:	2101      	movs	r1, #1
 800088e:	482b      	ldr	r0, [pc, #172]	; (800093c <ENCODER_Init+0xc0>)
 8000890:	f000 f893 	bl	80009ba <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 8000894:	2101      	movs	r1, #1
 8000896:	482b      	ldr	r0, [pc, #172]	; (8000944 <ENCODER_Init+0xc8>)
 8000898:	f000 f88f 	bl	80009ba <ENCODER_Set_TxHeader>
	 
	//Filter Config - FIFO1 is assigned to hcan1_right and FIFO1 is assigned to hcan2_left
	canfil_1.FilterBank = 0;
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <ENCODER_Init+0xd0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <ENCODER_Init+0xd0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <ENCODER_Init+0xd0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
	canfil_1.FilterIdHigh = 0x0000;
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <ENCODER_Init+0xd0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
	canfil_1.FilterIdLow = 0x0000;
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <ENCODER_Init+0xd0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <ENCODER_Init+0xd0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <ENCODER_Init+0xd0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <ENCODER_Init+0xd0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <ENCODER_Init+0xd0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	621a      	str	r2, [r3, #32]
	canfil_1.SlaveStartFilterBank = 14;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <ENCODER_Init+0xd0>)
 80008d4:	220e      	movs	r2, #14
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24

	
	canfil_2.FilterBank = 14;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <ENCODER_Init+0xd4>)
 80008da:	220e      	movs	r2, #14
 80008dc:	615a      	str	r2, [r3, #20]
	canfil_2.FilterMode = CAN_FILTERMODE_IDMASK;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <ENCODER_Init+0xd4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	canfil_2.FilterScale = CAN_FILTERSCALE_32BIT;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <ENCODER_Init+0xd4>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
	canfil_2.FilterIdHigh = 0x0000;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <ENCODER_Init+0xd4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
	canfil_2.FilterIdLow = 0x0000;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <ENCODER_Init+0xd4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
	canfil_2.FilterMaskIdHigh = 0x0000;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <ENCODER_Init+0xd4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
	canfil_2.FilterMaskIdLow = 0x0000;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <ENCODER_Init+0xd4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
	canfil_2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <ENCODER_Init+0xd4>)
 8000904:	2201      	movs	r2, #1
 8000906:	611a      	str	r2, [r3, #16]
	canfil_2.FilterActivation = CAN_FILTER_ENABLE;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <ENCODER_Init+0xd4>)
 800090a:	2201      	movs	r2, #1
 800090c:	621a      	str	r2, [r3, #32]
	canfil_2.SlaveStartFilterBank = 14;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <ENCODER_Init+0xd4>)
 8000910:	220e      	movs	r2, #14
 8000912:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK )	Error_Handler();
 8000914:	490d      	ldr	r1, [pc, #52]	; (800094c <ENCODER_Init+0xd0>)
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <ENCODER_Init+0xc4>)
 8000918:	f001 fb10 	bl	8001f3c <HAL_CAN_ConfigFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <ENCODER_Init+0xaa>
 8000922:	f000 fc1d 	bl	8001160 <Error_Handler>
	if(HAL_CAN_ConfigFilter(&hcan2, &canfil_2) != HAL_OK )	Error_Handler();
 8000926:	490a      	ldr	r1, [pc, #40]	; (8000950 <ENCODER_Init+0xd4>)
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <ENCODER_Init+0xcc>)
 800092a:	f001 fb07 	bl	8001f3c <HAL_CAN_ConfigFilter>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <ENCODER_Init+0xbc>
 8000934:	f000 fc14 	bl	8001160 <Error_Handler>

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001ac 	.word	0x200001ac
 8000940:	2000015c 	.word	0x2000015c
 8000944:	200001fc 	.word	0x200001fc
 8000948:	20000134 	.word	0x20000134
 800094c:	2000024c 	.word	0x2000024c
 8000950:	20000184 	.word	0x20000184

08000954 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	785a      	ldrb	r2, [r3, #1]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	789a      	ldrb	r2, [r3, #2]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->rawRead[3] = incoming_array[3];
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	78da      	ldrb	r2, [r3, #3]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791a      	ldrb	r2, [r3, #4]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	795a      	ldrb	r2, [r3, #5]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[6] = incoming_array[6];
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	799a      	ldrb	r2, [r3, #6]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	79da      	ldrb	r2, [r3, #7]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2204      	movs	r2, #4
 80009c8:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	Encoder_ptr->sendData[2] = 0x01;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Encoder_ptr->sendData[3] = 0x00;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f103 0120 	add.w	r1, r3, #32
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3338      	adds	r3, #56	; 0x38
 8000a3a:	f001 fb5f 	bl	80020fc <HAL_CAN_AddTxMessage>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffd1 	bl	80009f6 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Encoder_ptr->angleDeg = (Encoder_ptr->rawRead[3] + Encoder_ptr->rawRead[4]*0x100 + Encoder_ptr->rawRead[5]*0x10000)*360/0x1000;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	441a      	add	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000a9c:	041b      	lsls	r3, r3, #16
 8000a9e:	4413      	add	r3, r2
 8000aa0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da01      	bge.n	8000ab0 <ENCODER_Get_Angle+0x6a>
 8000aac:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000ab0:	131b      	asrs	r3, r3, #12
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b82      	ldr	r3, [pc, #520]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a81      	ldr	r2, [pc, #516]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b7f      	ldr	r3, [pc, #508]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	4b7b      	ldr	r3, [pc, #492]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a7a      	ldr	r2, [pc, #488]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b78      	ldr	r3, [pc, #480]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b74      	ldr	r3, [pc, #464]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a73      	ldr	r2, [pc, #460]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b71      	ldr	r3, [pc, #452]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a6c      	ldr	r2, [pc, #432]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b66      	ldr	r3, [pc, #408]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a65      	ldr	r2, [pc, #404]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b63      	ldr	r3, [pc, #396]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5e      	ldr	r2, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <MX_GPIO_Init+0x224>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000b7e:	2200      	movs	r2, #0
 8000b80:	213f      	movs	r1, #63	; 0x3f
 8000b82:	4859      	ldr	r0, [pc, #356]	; (8000ce8 <MX_GPIO_Init+0x228>)
 8000b84:	f002 fcce 	bl	8003524 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4857      	ldr	r0, [pc, #348]	; (8000cec <MX_GPIO_Init+0x22c>)
 8000b8e:	f002 fcc9 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000b92:	2200      	movs	r2, #0
 8000b94:	219b      	movs	r1, #155	; 0x9b
 8000b96:	4856      	ldr	r0, [pc, #344]	; (8000cf0 <MX_GPIO_Init+0x230>)
 8000b98:	f002 fcc4 	bl	8003524 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8000ba2:	4854      	ldr	r0, [pc, #336]	; (8000cf4 <MX_GPIO_Init+0x234>)
 8000ba4:	f002 fcbe 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f64e 4108 	movw	r1, #60424	; 0xec08
 8000bae:	4852      	ldr	r0, [pc, #328]	; (8000cf8 <MX_GPIO_Init+0x238>)
 8000bb0:	f002 fcb8 	bl	8003524 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	484b      	ldr	r0, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x234>)
 8000bc8:	f002 fae8 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8000bcc:	f248 1378 	movw	r3, #33144	; 0x8178
 8000bd0:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4844      	ldr	r0, [pc, #272]	; (8000cf4 <MX_GPIO_Init+0x234>)
 8000be2:	f002 fadb 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000be6:	233f      	movs	r3, #63	; 0x3f
 8000be8:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x228>)
 8000bfe:	f002 facd 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8000c02:	2310      	movs	r3, #16
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4834      	ldr	r0, [pc, #208]	; (8000cec <MX_GPIO_Init+0x22c>)
 8000c1a:	f002 fabf 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x23c>)
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482e      	ldr	r0, [pc, #184]	; (8000cec <MX_GPIO_Init+0x22c>)
 8000c32:	f002 fab3 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000c36:	239b      	movs	r3, #155	; 0x9b
 8000c38:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <MX_GPIO_Init+0x230>)
 8000c4e:	f002 faa5 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8000c52:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4822      	ldr	r0, [pc, #136]	; (8000cf4 <MX_GPIO_Init+0x234>)
 8000c6c:	f002 fa96 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8000c70:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c82:	2305      	movs	r3, #5
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <MX_GPIO_Init+0x230>)
 8000c8e:	f002 fa85 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000c92:	f64e 4308 	movw	r3, #60424	; 0xec08
 8000c96:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <MX_GPIO_Init+0x238>)
 8000cac:	f002 fa76 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_GPIO_Init+0x238>)
 8000cc6:	f002 fa69 	bl	800319c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2017      	movs	r0, #23
 8000cd0:	f001 ff27 	bl	8002b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cd4:	2017      	movs	r0, #23
 8000cd6:	f001 ff40 	bl	8002b5a <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	10210000 	.word	0x10210000

08000d00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <MX_I2C1_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <MX_I2C1_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d3e:	f002 fc23 	bl	8003588 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 fa0a 	bl	8001160 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d50:	f002 fd5e 	bl	8003810 <HAL_I2CEx_ConfigAnalogFilter>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d5a:	f000 fa01 	bl	8001160 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d62:	f002 fd91 	bl	8003888 <HAL_I2CEx_ConfigDigitalFilter>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 f9f8 	bl	8001160 <Error_Handler>
  }

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000274 	.word	0x20000274
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	00061a80 	.word	0x00061a80

08000d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_I2C_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_I2C_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <HAL_I2C_MspInit+0x88>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_I2C_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8000dbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc4:	2312      	movs	r3, #18
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <HAL_I2C_MspInit+0x8c>)
 8000ddc:	f002 f9de 	bl	800319c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_I2C_MspInit+0x88>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_I2C_MspInit+0x88>)
 8000dea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_I2C_MspInit+0x88>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40005400 	.word	0x40005400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020400 	.word	0x40020400

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 feff 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f8a7 	bl	8000f6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8000e1e:	f003 f9f9 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <main+0x130>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	099b      	lsrs	r3, r3, #6
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fea2 	bl	8002b76 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e32:	2004      	movs	r0, #4
 8000e34:	f001 feac 	bl	8002b90 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f001 fe6f 	bl	8002b22 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f7ff fe3c 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e48:	f7ff fcf8 	bl	800083c <MX_DMA_Init>
  MX_I2C1_Init();
 8000e4c:	f7ff ff58 	bl	8000d00 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e50:	f000 fac8 	bl	80013e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e54:	f000 fb66 	bl	8001524 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000e58:	f000 fe10 	bl	8001a7c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000e5c:	f000 fbdc 	bl	8001618 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000e60:	f000 fc5c 	bl	800171c <MX_TIM8_Init>
  MX_CAN1_Init();
 8000e64:	f7ff fb92 	bl	800058c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e68:	f7ff fbc6 	bl	80005f8 <MX_CAN2_Init>
  MX_SPI1_Init();
 8000e6c:	f000 f980 	bl	8001170 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Initialize hardware communication
//  joystick_Init();
//  ADC_Init();
//  ADC_DataRequest();
  ENCODER_Init();
 8000e70:	f7ff fd04 	bl	800087c <ENCODER_Init>
//  DWT_Init();
//  while(MPU6050_Init(&hi2c1)==1);
  HAL_Delay(100);
 8000e74:	2064      	movs	r0, #100	; 0x64
 8000e76:	f000 ff41 	bl	8001cfc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8000e7a:	f000 ff33 	bl	8001ce4 <HAL_GetTick>
 8000e7e:	60f8      	str	r0, [r7, #12]


  HAL_Delay(500);
 8000e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e84:	f000 ff3a 	bl	8001cfc <HAL_Delay>
	ENCODER_Get_Angle(&encoderLeft);
 8000e88:	482e      	ldr	r0, [pc, #184]	; (8000f44 <main+0x134>)
 8000e8a:	f7ff fddc 	bl	8000a46 <ENCODER_Get_Angle>
  	ENCODER_Get_Angle(&encoderRight);
 8000e8e:	482e      	ldr	r0, [pc, #184]	; (8000f48 <main+0x138>)
 8000e90:	f7ff fdd9 	bl	8000a46 <ENCODER_Get_Angle>
  	HAL_Delay(500);
 8000e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e98:	f000 ff30 	bl	8001cfc <HAL_Delay>
  //debug variable
  uint32_t debug_prev_time = HAL_GetTick();
 8000e9c:	f000 ff22 	bl	8001ce4 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint8_t led_status = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
//  float speed = 0;
  while (1)
  {
	//Code to debug with blinking LED
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8000ea6:	f000 ff1d 	bl	8001ce4 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eb4:	d317      	bcc.n	8000ee6 <main+0xd6>
	  if (led_status == 0){
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d107      	bne.n	8000ecc <main+0xbc>
//	      count++;
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4822      	ldr	r0, [pc, #136]	; (8000f4c <main+0x13c>)
 8000ec2:	f002 fb2f 	bl	8003524 <HAL_GPIO_WritePin>
	      led_status = 1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e009      	b.n	8000ee0 <main+0xd0>
	  }
	  else if (led_status == 1){
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d106      	bne.n	8000ee0 <main+0xd0>
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <main+0x13c>)
 8000ed8:	f002 fb24 	bl	8003524 <HAL_GPIO_WritePin>
	      led_status = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	71fb      	strb	r3, [r7, #7]
	  }
	  debug_prev_time = HAL_GetTick();
 8000ee0:	f000 ff00 	bl	8001ce4 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
//      runMotor(&backMotor, 100, 1);

//      runMotor(&backMotor, speed++, 1);

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 100)
 8000ee6:	f000 fefd 	bl	8001ce4 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b63      	cmp	r3, #99	; 0x63
 8000ef2:	d9d8      	bls.n	8000ea6 <main+0x96>
    {
//	ADC_DataRequest();

    	ENCODER_Get_Angle(&encoderLeft);
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <main+0x134>)
 8000ef6:	f7ff fda6 	bl	8000a46 <ENCODER_Get_Angle>
    	ENCODER_Get_Angle(&encoderRight);
 8000efa:	4813      	ldr	r0, [pc, #76]	; (8000f48 <main+0x138>)
 8000efc:	f7ff fda3 	bl	8000a46 <ENCODER_Get_Angle>

	//Get kamlan filtered angle from MPU6050
//	MPU6050_Read_All(&hi2c1, &MPU6050);
	GPIO_Digital_Filtered_Input(&button1, 30);
 8000f00:	211e      	movs	r1, #30
 8000f02:	4813      	ldr	r0, [pc, #76]	; (8000f50 <main+0x140>)
 8000f04:	f7ff fb0a 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button2, 30);
 8000f08:	211e      	movs	r1, #30
 8000f0a:	4812      	ldr	r0, [pc, #72]	; (8000f54 <main+0x144>)
 8000f0c:	f7ff fb06 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button3, 30);
 8000f10:	211e      	movs	r1, #30
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <main+0x148>)
 8000f14:	f7ff fb02 	bl	800051c <GPIO_Digital_Filtered_Input>

	GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8000f18:	2105      	movs	r1, #5
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <main+0x14c>)
 8000f1c:	f7ff fafe 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8000f20:	2105      	movs	r1, #5
 8000f22:	480f      	ldr	r0, [pc, #60]	; (8000f60 <main+0x150>)
 8000f24:	f7ff fafa 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS1, 5);
 8000f28:	2105      	movs	r1, #5
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <main+0x154>)
 8000f2c:	f7ff faf6 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS2, 5);
 8000f30:	2105      	movs	r1, #5
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <main+0x158>)
 8000f34:	f7ff faf2 	bl	800051c <GPIO_Digital_Filtered_Input>
//
//	//Climbing phase start



	prev_time = HAL_GetTick();
 8000f38:	f000 fed4 	bl	8001ce4 <HAL_GetTick>
 8000f3c:	60f8      	str	r0, [r7, #12]
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8000f3e:	e7b2      	b.n	8000ea6 <main+0x96>
 8000f40:	10624dd3 	.word	0x10624dd3
 8000f44:	200001ac 	.word	0x200001ac
 8000f48:	200001fc 	.word	0x200001fc
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	20000040 	.word	0x20000040
 8000f54:	20000050 	.word	0x20000050
 8000f58:	20000060 	.word	0x20000060
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000010 	.word	0x20000010
 8000f64:	20000020 	.word	0x20000020
 8000f68:	20000030 	.word	0x20000030

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 f94a 	bl	8006214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <SystemClock_Config+0xd8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <SystemClock_Config+0xd8>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <SystemClock_Config+0xd8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <SystemClock_Config+0xdc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <SystemClock_Config+0xdc>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <SystemClock_Config+0xdc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fe0:	23b4      	movs	r3, #180	; 0xb4
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fcd9 	bl	80039a8 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ffc:	f000 f8b0 	bl	8001160 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001000:	f002 fc82 	bl	8003908 <HAL_PWREx_EnableOverDrive>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800100a:	f000 f8a9 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2105      	movs	r1, #5
 800102c:	4618      	mov	r0, r3
 800102e:	f002 ff2b 	bl	8003e88 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001038:	f000 f892 	bl	8001160 <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	; 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b80      	cmp	r3, #128	; 0x80
 800105a:	d11c      	bne.n	8001096 <HAL_GPIO_EXTI_Callback+0x4a>
    case AD_BUSY_Pin:{
      if (HAL_GetTick()-prev_adc_time > 1){
 800105c:	f000 fe42 	bl	8001ce4 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d916      	bls.n	800109a <HAL_GPIO_EXTI_Callback+0x4e>
	  ADC_Read(&adc_rawData[0]);
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800106e:	f7ff fa39 	bl	80004e4 <ADC_Read>
	  tempJoyRawDataX = adc_rawData[0];
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	461a      	mov	r2, r3
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_GPIO_EXTI_Callback+0x60>)
 800107c:	601a      	str	r2, [r3, #0]
	  tempJoyRawDataY = adc_rawData[1];
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001084:	461a      	mov	r2, r3
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001088:	601a      	str	r2, [r3, #0]
	  prev_adc_time = HAL_GetTick();
 800108a:	f000 fe2b 	bl	8001ce4 <HAL_GetTick>
 800108e:	4603      	mov	r3, r0
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001092:	6013      	str	r3, [r2, #0]
      }
    }

      break;
 8001094:	e001      	b.n	800109a <HAL_GPIO_EXTI_Callback+0x4e>
    default:
      break;
 8001096:	bf00      	nop
 8001098:	e000      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x50>
      break;
 800109a:	bf00      	nop
  }
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200000a0 	.word	0x200000a0
 80010a8:	20000340 	.word	0x20000340
 80010ac:	200003b8 	.word	0x200003b8
 80010b0:	200002c8 	.word	0x200002c8

080010b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d11b      	bne.n	80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f001 f8f0 	bl	80022b2 <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_LEFT)
 80010d2:	7a7b      	ldrb	r3, [r7, #9]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	490b      	ldr	r1, [pc, #44]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fc38 	bl	8000954 <ENCODER_Sort_Incoming>
		if(incoming[1] == ENC_ADDR_RIGHT)
 80010e4:	7a7b      	ldrb	r3, [r7, #9]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
					ENCODER_Sort_Incoming(incoming, &encoderRight);
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fc2f 	bl	8000954 <ENCODER_Sort_Incoming>
		ENCODER_Get_Angle(&encoderLeft);
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80010f8:	f7ff fca5 	bl	8000a46 <ENCODER_Get_Angle>

	}
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000015c 	.word	0x2000015c
 8001108:	200000a4 	.word	0x200000a4
 800110c:	200001ac 	.word	0x200001ac
 8001110:	200001fc 	.word	0x200001fc

08001114 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	//Right encoder callback
	if (hcan == &hcan2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d112      	bne.n	800114a <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, incoming);
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 800112a:	2101      	movs	r1, #1
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f001 f8c0 	bl	80022b2 <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_RIGHT)
 8001132:	7a7b      	ldrb	r3, [r7, #9]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fc08 	bl	8000954 <ENCODER_Sort_Incoming>

		ENCODER_Get_Angle(&encoderRight);
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8001146:	f7ff fc7e 	bl	8000a46 <ENCODER_Get_Angle>

	}
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000134 	.word	0x20000134
 8001158:	200000c0 	.word	0x200000c0
 800115c:	200001fc 	.word	0x200001fc

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_SPI1_Init+0x68>)
 8001176:	4a19      	ldr	r2, [pc, #100]	; (80011dc <MX_SPI1_Init+0x6c>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_SPI1_Init+0x68>)
 800117c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_SPI1_Init+0x68>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_SPI1_Init+0x68>)
 800118c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001190:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_SPI1_Init+0x68>)
 8001194:	2202      	movs	r2, #2
 8001196:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_SPI1_Init+0x68>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011a8:	2228      	movs	r2, #40	; 0x28
 80011aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011c0:	220a      	movs	r2, #10
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_SPI1_Init+0x68>)
 80011c6:	f003 f859 	bl	800427c <HAL_SPI_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80011d0:	f7ff ffc6 	bl	8001160 <Error_Handler>
  }

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200000dc 	.word	0x200000dc
 80011dc:	40013000 	.word	0x40013000

080011e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_SPI_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_SPI_MspInit+0x88>)
 800120c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124a:	2305      	movs	r3, #5
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_SPI_MspInit+0x8c>)
 8001256:	f001 ffa1 	bl	800319c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40013000 	.word	0x40013000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_MspInit+0x4c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_MspInit+0x4c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 fcd2 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Stream1_IRQHandler+0x10>)
 8001322:	f001 fcff 	bl	8002d24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200004bc 	.word	0x200004bc

08001330 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <CAN1_TX_IRQHandler+0x10>)
 8001336:	f001 f8f4 	bl	8002522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000015c 	.word	0x2000015c

08001344 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <CAN1_RX0_IRQHandler+0x10>)
 800134a:	f001 f8ea 	bl	8002522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000015c 	.word	0x2000015c

08001358 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <CAN1_RX1_IRQHandler+0x10>)
 800135e:	f001 f8e0 	bl	8002522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000015c 	.word	0x2000015c

0800136c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001370:	2080      	movs	r0, #128	; 0x80
 8001372:	f002 f8f1 	bl	8003558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <CAN2_TX_IRQHandler+0x10>)
 8001382:	f001 f8ce 	bl	8002522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000134 	.word	0x20000134

08001390 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <CAN2_RX0_IRQHandler+0x10>)
 8001396:	f001 f8c4 	bl	8002522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000134 	.word	0x20000134

080013a4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <CAN2_RX1_IRQHandler+0x10>)
 80013aa:	f001 f8ba 	bl	8002522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000134 	.word	0x20000134

080013b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <SystemInit+0x28>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <SystemInit+0x28>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SystemInit+0x28>)
 80013ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d2:	609a      	str	r2, [r3, #8]
#endif
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b096      	sub	sp, #88	; 0x58
 80013e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2220      	movs	r2, #32
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fef9 	bl	8006214 <memset>

  htim1.Instance = TIM1;
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <MX_TIM1_Init+0x138>)
 8001424:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <MX_TIM1_Init+0x13c>)
 8001426:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_TIM1_Init+0x138>)
 800142a:	22b3      	movs	r2, #179	; 0xb3
 800142c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <MX_TIM1_Init+0x138>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <MX_TIM1_Init+0x138>)
 8001436:	2263      	movs	r2, #99	; 0x63
 8001438:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <MX_TIM1_Init+0x138>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <MX_TIM1_Init+0x138>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_TIM1_Init+0x138>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800144c:	4833      	ldr	r0, [pc, #204]	; (800151c <MX_TIM1_Init+0x138>)
 800144e:	f003 fb35 	bl	8004abc <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001458:	f7ff fe82 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001466:	4619      	mov	r1, r3
 8001468:	482c      	ldr	r0, [pc, #176]	; (800151c <MX_TIM1_Init+0x138>)
 800146a:	f003 fd1f 	bl	8004eac <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001474:	f7ff fe74 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001478:	4828      	ldr	r0, [pc, #160]	; (800151c <MX_TIM1_Init+0x138>)
 800147a:	f003 fb4a 	bl	8004b12 <HAL_TIM_PWM_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001484:	f7ff fe6c 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001490:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001494:	4619      	mov	r1, r3
 8001496:	4821      	ldr	r0, [pc, #132]	; (800151c <MX_TIM1_Init+0x138>)
 8001498:	f004 f9e0 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80014a2:	f7ff fe5d 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	; 0x60
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_TIM1_Init+0x138>)
 80014cc:	f003 fc28 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80014d6:	f7ff fe43 	bl	8001160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_TIM1_Init+0x138>)
 80014fe:	f004 fa29 	bl	8005954 <HAL_TIMEx_ConfigBreakDeadTime>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001508:	f7ff fe2a 	bl	8001160 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_TIM1_Init+0x138>)
 800150e:	f000 fa2b 	bl	8001968 <HAL_TIM_MspPostInit>

}
 8001512:	bf00      	nop
 8001514:	3758      	adds	r7, #88	; 0x58
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000043c 	.word	0x2000043c
 8001520:	40010000 	.word	0x40010000

08001524 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_TIM2_Init+0xf0>)
 8001550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <MX_TIM2_Init+0xf0>)
 8001558:	22b3      	movs	r2, #179	; 0xb3
 800155a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <MX_TIM2_Init+0xf0>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8001562:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <MX_TIM2_Init+0xf0>)
 8001564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001568:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <MX_TIM2_Init+0xf0>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <MX_TIM2_Init+0xf0>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <MX_TIM2_Init+0xf0>)
 8001578:	f003 faa0 	bl	8004abc <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001582:	f7ff fded 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	4619      	mov	r1, r3
 8001592:	4820      	ldr	r0, [pc, #128]	; (8001614 <MX_TIM2_Init+0xf0>)
 8001594:	f003 fc8a 	bl	8004eac <HAL_TIM_ConfigClockSource>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800159e:	f7ff fddf 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_TIM2_Init+0xf0>)
 80015a4:	f003 faea 	bl	8004b7c <HAL_TIM_IC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015ae:	f7ff fdd7 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_TIM2_Init+0xf0>)
 80015c2:	f004 f94b 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80015cc:	f7ff fdc8 	bl	8001160 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015d4:	2301      	movs	r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	2208      	movs	r2, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_TIM2_Init+0xf0>)
 80015e8:	f003 fafd 	bl	8004be6 <HAL_TIM_IC_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80015f2:	f7ff fdb5 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	220c      	movs	r2, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM2_Init+0xf0>)
 80015fe:	f003 faf2 	bl	8004be6 <HAL_TIM_IC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001608:	f7ff fdaa 	bl	8001160 <Error_Handler>
  }

}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2000047c 	.word	0x2000047c

08001618 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	615a      	str	r2, [r3, #20]
 8001646:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <MX_TIM3_Init+0xfc>)
 800164a:	4a33      	ldr	r2, [pc, #204]	; (8001718 <MX_TIM3_Init+0x100>)
 800164c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <MX_TIM3_Init+0xfc>)
 8001650:	2259      	movs	r2, #89	; 0x59
 8001652:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <MX_TIM3_Init+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_TIM3_Init+0xfc>)
 800165c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001660:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <MX_TIM3_Init+0xfc>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <MX_TIM3_Init+0xfc>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800166e:	4829      	ldr	r0, [pc, #164]	; (8001714 <MX_TIM3_Init+0xfc>)
 8001670:	f003 fa24 	bl	8004abc <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800167a:	f7ff fd71 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001688:	4619      	mov	r1, r3
 800168a:	4822      	ldr	r0, [pc, #136]	; (8001714 <MX_TIM3_Init+0xfc>)
 800168c:	f003 fc0e 	bl	8004eac <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001696:	f7ff fd63 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800169a:	481e      	ldr	r0, [pc, #120]	; (8001714 <MX_TIM3_Init+0xfc>)
 800169c:	f003 fa39 	bl	8004b12 <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016a6:	f7ff fd5b 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4619      	mov	r1, r3
 80016b8:	4816      	ldr	r0, [pc, #88]	; (8001714 <MX_TIM3_Init+0xfc>)
 80016ba:	f004 f8cf 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016c4:	f7ff fd4c 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80016cc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80016d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_TIM3_Init+0xfc>)
 80016e2:	f003 fb1d 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80016ec:	f7ff fd38 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2204      	movs	r2, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <MX_TIM3_Init+0xfc>)
 80016f8:	f003 fb12 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001702:	f7ff fd2d 	bl	8001160 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <MX_TIM3_Init+0xfc>)
 8001708:	f000 f92e 	bl	8001968 <HAL_TIM_MspPostInit>

}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200003fc 	.word	0x200003fc
 8001718:	40000400 	.word	0x40000400

0800171c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b096      	sub	sp, #88	; 0x58
 8001720:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2220      	movs	r2, #32
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fd5d 	bl	8006214 <memset>

  htim8.Instance = TIM8;
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <MX_TIM8_Init+0x134>)
 800175c:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <MX_TIM8_Init+0x138>)
 800175e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <MX_TIM8_Init+0x134>)
 8001762:	22b3      	movs	r2, #179	; 0xb3
 8001764:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <MX_TIM8_Init+0x134>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <MX_TIM8_Init+0x134>)
 800176e:	2263      	movs	r2, #99	; 0x63
 8001770:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <MX_TIM8_Init+0x134>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <MX_TIM8_Init+0x134>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <MX_TIM8_Init+0x134>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001784:	4832      	ldr	r0, [pc, #200]	; (8001850 <MX_TIM8_Init+0x134>)
 8001786:	f003 f999 	bl	8004abc <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001790:	f7ff fce6 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800179a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800179e:	4619      	mov	r1, r3
 80017a0:	482b      	ldr	r0, [pc, #172]	; (8001850 <MX_TIM8_Init+0x134>)
 80017a2:	f003 fb83 	bl	8004eac <HAL_TIM_ConfigClockSource>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80017ac:	f7ff fcd8 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017b0:	4827      	ldr	r0, [pc, #156]	; (8001850 <MX_TIM8_Init+0x134>)
 80017b2:	f003 f9ae 	bl	8004b12 <HAL_TIM_PWM_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80017bc:	f7ff fcd0 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017cc:	4619      	mov	r1, r3
 80017ce:	4820      	ldr	r0, [pc, #128]	; (8001850 <MX_TIM8_Init+0x134>)
 80017d0:	f004 f844 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80017da:	f7ff fcc1 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017de:	2360      	movs	r3, #96	; 0x60
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	220c      	movs	r2, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <MX_TIM8_Init+0x134>)
 8001800:	f003 fa8e 	bl	8004d20 <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800180a:	f7ff fca9 	bl	8001160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001826:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM8_Init+0x134>)
 8001832:	f004 f88f 	bl	8005954 <HAL_TIMEx_ConfigBreakDeadTime>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 800183c:	f7ff fc90 	bl	8001160 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM8_Init+0x134>)
 8001842:	f000 f891 	bl	8001968 <HAL_TIM_MspPostInit>

}
 8001846:	bf00      	nop
 8001848:	3758      	adds	r7, #88	; 0x58
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200003bc 	.word	0x200003bc
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a37      	ldr	r2, [pc, #220]	; (8001954 <HAL_TIM_Base_MspInit+0xfc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10e      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	4a35      	ldr	r2, [pc, #212]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001896:	e059      	b.n	800194c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d12d      	bne.n	80018fe <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 80018da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ec:	2301      	movs	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4819      	ldr	r0, [pc, #100]	; (800195c <HAL_TIM_Base_MspInit+0x104>)
 80018f8:	f001 fc50 	bl	800319c <HAL_GPIO_Init>
}
 80018fc:	e026      	b.n	800194c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_TIM_Base_MspInit+0x108>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d10e      	bne.n	8001926 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	e012      	b.n	800194c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_TIM_Base_MspInit+0x10c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d10d      	bne.n	800194c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	6453      	str	r3, [r2, #68]	; 0x44
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_TIM_Base_MspInit+0x100>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
}
 800194c:	bf00      	nop
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40010000 	.word	0x40010000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020400 	.word	0x40020400
 8001960:	40000400 	.word	0x40000400
 8001964:	40010400 	.word	0x40010400

08001968 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <HAL_TIM_MspPostInit+0xfc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11f      	bne.n	80019ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a35      	ldr	r2, [pc, #212]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 80019a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	482a      	ldr	r0, [pc, #168]	; (8001a6c <HAL_TIM_MspPostInit+0x104>)
 80019c4:	f001 fbea 	bl	800319c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80019c8:	e047      	b.n	8001a5a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_TIM_MspPostInit+0x108>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d11e      	bne.n	8001a12 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80019f0:	23c0      	movs	r3, #192	; 0xc0
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a00:	2302      	movs	r3, #2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481a      	ldr	r0, [pc, #104]	; (8001a74 <HAL_TIM_MspPostInit+0x10c>)
 8001a0c:	f001 fbc6 	bl	800319c <HAL_GPIO_Init>
}
 8001a10:	e023      	b.n	8001a5a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_MspPostInit+0x110>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d11e      	bne.n	8001a5a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_TIM_MspPostInit+0x100>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8001a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <HAL_TIM_MspPostInit+0x10c>)
 8001a56:	f001 fba1 	bl	800319c <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40010400 	.word	0x40010400

08001a7c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_USART3_UART_Init+0x50>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART3_UART_Init+0x4c>)
 8001ab4:	f003 ffa0 	bl	80059f8 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001abe:	f7ff fb4f 	bl	8001160 <Error_Handler>
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000051c 	.word	0x2000051c
 8001acc:	40004800 	.word	0x40004800

08001ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <HAL_UART_MspInit+0xe0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d15a      	bne.n	8001ba8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_UART_MspInit+0xe4>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_UART_MspInit+0xe4>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <HAL_UART_MspInit+0xe4>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_UART_MspInit+0xe4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <HAL_UART_MspInit+0xe4>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_UART_MspInit+0xe4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8001b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <HAL_UART_MspInit+0xe8>)
 8001b48:	f001 fb28 	bl	800319c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <HAL_UART_MspInit+0xf0>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b58:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001b8e:	f001 f81b 	bl	8002bc8 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b98:	f7ff fae2 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_UART_MspInit+0xec>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	200004bc 	.word	0x200004bc
 8001bc0:	40026028 	.word	0x40026028

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bca:	e003      	b.n	8001bd4 <LoopCopyDataInit>

08001bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bd2:	3104      	adds	r1, #4

08001bd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bdc:	d3f6      	bcc.n	8001bcc <CopyDataInit>
  ldr  r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001be0:	e002      	b.n	8001be8 <LoopFillZerobss>

08001be2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001be4:	f842 3b04 	str.w	r3, [r2], #4

08001be8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bec:	d3f9      	bcc.n	8001be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bee:	f7ff fbe3 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f004 faeb 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff f90b 	bl	8000e10 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bfc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c00:	0800626c 	.word	0x0800626c
  ldr  r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c08:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001c0c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001c10:	20000560 	.word	0x20000560

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 ff63 	bl	8002b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fb10 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 ff7b 	bl	8002b76 <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c98:	f000 ff43 	bl	8002b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000070 	.word	0x20000070
 8001cb4:	20000078 	.word	0x20000078
 8001cb8:	20000074 	.word	0x20000074

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000078 	.word	0x20000078
 8001ce0:	2000055c 	.word	0x2000055c

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000055c 	.word	0x2000055c

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000078 	.word	0x20000078

08001d44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0ed      	b.n	8001f32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fc7e 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0202 	bic.w	r2, r2, #2
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d78:	f7ff ffb4 	bl	8001ce4 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7e:	e012      	b.n	8001da6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d80:	f7ff ffb0 	bl	8001ce4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	d90b      	bls.n	8001da6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0c5      	b.n	8001f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1e5      	bne.n	8001d80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc4:	f7ff ff8e 	bl	8001ce4 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dca:	e012      	b.n	8001df2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dcc:	f7ff ff8a 	bl	8001ce4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d90b      	bls.n	8001df2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e09f      	b.n	8001f32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0e5      	beq.n	8001dcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e1b      	ldrb	r3, [r3, #24]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d108      	bne.n	8001e1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e007      	b.n	8001e2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7e5b      	ldrb	r3, [r3, #25]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d108      	bne.n	8001e44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e007      	b.n	8001e54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7e9b      	ldrb	r3, [r3, #26]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0220 	orr.w	r2, r2, #32
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e007      	b.n	8001e7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0220 	bic.w	r2, r2, #32
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7edb      	ldrb	r3, [r3, #27]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0210 	bic.w	r2, r2, #16
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e007      	b.n	8001ea8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0210 	orr.w	r2, r2, #16
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7f1b      	ldrb	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d108      	bne.n	8001ec2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e007      	b.n	8001ed2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0208 	bic.w	r2, r2, #8
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7f5b      	ldrb	r3, [r3, #29]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d108      	bne.n	8001eec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0204 	orr.w	r2, r2, #4
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e007      	b.n	8001efc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0204 	bic.w	r2, r2, #4
 8001efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	ea42 0103 	orr.w	r1, r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d003      	beq.n	8001f62 <HAL_CAN_ConfigFilter+0x26>
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	f040 80be 	bne.w	80020de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001f64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	431a      	orrs	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d123      	bne.n	800200c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fe6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3248      	adds	r2, #72	; 0x48
 8001fec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002000:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002002:	6979      	ldr	r1, [r7, #20]
 8002004:	3348      	adds	r3, #72	; 0x48
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d122      	bne.n	800205a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3248      	adds	r2, #72	; 0x48
 800203a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800204e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002050:	6979      	ldr	r1, [r7, #20]
 8002052:	3348      	adds	r3, #72	; 0x48
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002074:	e007      	b.n	8002086 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	401a      	ands	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020a0:	e007      	b.n	80020b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020d0:	f023 0201 	bic.w	r2, r3, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e006      	b.n	80020ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40006400 	.word	0x40006400

080020fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d003      	beq.n	8002128 <HAL_CAN_AddTxMessage+0x2c>
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	2b02      	cmp	r3, #2
 8002124:	f040 80b8 	bne.w	8002298 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80a0 	beq.w	8002288 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	0e1b      	lsrs	r3, r3, #24
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d907      	bls.n	8002168 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e09e      	b.n	80022a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002168:	2201      	movs	r2, #1
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	409a      	lsls	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	6809      	ldr	r1, [r1, #0]
 8002188:	431a      	orrs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3318      	adds	r3, #24
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	440b      	add	r3, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	e00f      	b.n	80021b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3318      	adds	r3, #24
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	440b      	add	r3, r1
 80021b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3318      	adds	r3, #24
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	440b      	add	r3, r1
 80021c6:	3304      	adds	r3, #4
 80021c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	7d1b      	ldrb	r3, [r3, #20]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d111      	bne.n	80021f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3318      	adds	r3, #24
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	6811      	ldr	r1, [r2, #0]
 80021e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3318      	adds	r3, #24
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	3304      	adds	r3, #4
 80021f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3307      	adds	r3, #7
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	061a      	lsls	r2, r3, #24
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3306      	adds	r3, #6
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3305      	adds	r3, #5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4313      	orrs	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	3204      	adds	r2, #4
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	4610      	mov	r0, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	ea43 0200 	orr.w	r2, r3, r0
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	440b      	add	r3, r1
 8002228:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800222c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3303      	adds	r3, #3
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	061a      	lsls	r2, r3, #24
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3302      	adds	r3, #2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4313      	orrs	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	4610      	mov	r0, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	6811      	ldr	r1, [r2, #0]
 8002254:	ea43 0200 	orr.w	r2, r3, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	440b      	add	r3, r1
 800225e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002262:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3318      	adds	r3, #24
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	6811      	ldr	r1, [r2, #0]
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3318      	adds	r3, #24
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	440b      	add	r3, r1
 8002282:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e00e      	b.n	80022a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e006      	b.n	80022a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022b2:	b480      	push	{r7}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_GetRxMessage+0x24>
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f040 80f3 	bne.w	80024bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10e      	bne.n	80022fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0e7      	b.n	80024ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d8      	b.n	80024ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	331b      	adds	r3, #27
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0204 	and.w	r2, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	331b      	adds	r3, #27
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e00b      	b.n	8002368 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	331b      	adds	r3, #27
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	08db      	lsrs	r3, r3, #3
 8002360:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	331b      	adds	r3, #27
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4413      	add	r3, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0202 	and.w	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	331b      	adds	r3, #27
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	331b      	adds	r3, #27
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	3304      	adds	r3, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	331b      	adds	r3, #27
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	3304      	adds	r3, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0a1a      	lsrs	r2, r3, #8
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4413      	add	r3, r2
 8002400:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0c1a      	lsrs	r2, r3, #16
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	3302      	adds	r3, #2
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e1a      	lsrs	r2, r3, #24
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	3303      	adds	r3, #3
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3304      	adds	r3, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0a1a      	lsrs	r2, r3, #8
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3305      	adds	r3, #5
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4413      	add	r3, r2
 8002466:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0c1a      	lsrs	r2, r3, #16
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3306      	adds	r3, #6
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e1a      	lsrs	r2, r3, #24
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	3307      	adds	r3, #7
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	e007      	b.n	80024b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e006      	b.n	80024ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d002      	beq.n	80024f4 <HAL_CAN_ActivateNotification+0x1e>
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d109      	bne.n	8002508 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6959      	ldr	r1, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e006      	b.n	8002516 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b08a      	sub	sp, #40	; 0x28
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d07c      	beq.n	8002662 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d023      	beq.n	80025ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2201      	movs	r2, #1
 8002578:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f983 	bl	8002890 <HAL_CAN_TxMailbox0CompleteCallback>
 800258a:	e016      	b.n	80025ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	e00c      	b.n	80025ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	e002      	b.n	80025ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f989 	bl	80028cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d024      	beq.n	800260e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f963 	bl	80028a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80025de:	e016      	b.n	800260e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
 80025f2:	e00c      	b.n	800260e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	e002      	b.n	800260e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f969 	bl	80028e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d024      	beq.n	8002662 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002620:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f943 	bl	80028b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002632:	e016      	b.n	8002662 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e00c      	b.n	8002662 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	e002      	b.n	8002662 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f949 	bl	80028f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2210      	movs	r2, #16
 8002684:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2208      	movs	r2, #8
 80026a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f930 	bl	8002908 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe fcf7 	bl	80010b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2210      	movs	r2, #16
 80026e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2208      	movs	r2, #8
 8002704:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f908 	bl	800291c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f003 0310 	and.w	r3, r3, #16
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7fe fcf5 	bl	8001114 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8f2 	bl	8002930 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2208      	movs	r2, #8
 8002766:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8eb 	bl	8002944 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d07b      	beq.n	8002870 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d072      	beq.n	8002868 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03e      	beq.n	8002868 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d02b      	beq.n	800284c <HAL_CAN_IRQHandler+0x32a>
 80027f4:	2b60      	cmp	r3, #96	; 0x60
 80027f6:	d82e      	bhi.n	8002856 <HAL_CAN_IRQHandler+0x334>
 80027f8:	2b50      	cmp	r3, #80	; 0x50
 80027fa:	d022      	beq.n	8002842 <HAL_CAN_IRQHandler+0x320>
 80027fc:	2b50      	cmp	r3, #80	; 0x50
 80027fe:	d82a      	bhi.n	8002856 <HAL_CAN_IRQHandler+0x334>
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d019      	beq.n	8002838 <HAL_CAN_IRQHandler+0x316>
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d826      	bhi.n	8002856 <HAL_CAN_IRQHandler+0x334>
 8002808:	2b30      	cmp	r3, #48	; 0x30
 800280a:	d010      	beq.n	800282e <HAL_CAN_IRQHandler+0x30c>
 800280c:	2b30      	cmp	r3, #48	; 0x30
 800280e:	d822      	bhi.n	8002856 <HAL_CAN_IRQHandler+0x334>
 8002810:	2b10      	cmp	r3, #16
 8002812:	d002      	beq.n	800281a <HAL_CAN_IRQHandler+0x2f8>
 8002814:	2b20      	cmp	r3, #32
 8002816:	d005      	beq.n	8002824 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002818:	e01d      	b.n	8002856 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002822:	e019      	b.n	8002858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800282c:	e014      	b.n	8002858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f043 0320 	orr.w	r3, r3, #32
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002836:	e00f      	b.n	8002858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002840:	e00a      	b.n	8002858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284a:	e005      	b.n	8002858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002854:	e000      	b.n	8002858 <HAL_CAN_IRQHandler+0x336>
            break;
 8002856:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002866:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2204      	movs	r2, #4
 800286e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f868 	bl	8002958 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002888:	bf00      	nop
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <__NVIC_EnableIRQ+0x38>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad8:	d301      	bcc.n	8002ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <SysTick_Config+0x40>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aec:	f7ff ff8e 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <SysTick_Config+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <SysTick_Config+0x40>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff29 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b34:	f7ff ff3e 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff8e 	bl	8002a60 <NVIC_EncodePriority>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff5d 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff31 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffa2 	bl	8002ac8 <SysTick_Config>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d106      	bne.n	8002bac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002baa:	e005      	b.n	8002bb8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff f886 	bl	8001ce4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e099      	b.n	8002d18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c04:	e00f      	b.n	8002c26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c06:	f7ff f86d 	bl	8001ce4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d908      	bls.n	8002c26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e078      	b.n	8002d18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e8      	bne.n	8002c06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <HAL_DMA_Init+0x158>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d107      	bne.n	8002c90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d117      	bne.n	8002cea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f9e9 	bl	80030a4 <DMA_CheckFifoParam>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9a0 	bl	8003038 <DMA_CalcBaseAndBitshift>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	223f      	movs	r2, #63	; 0x3f
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	f010803f 	.word	0xf010803f

08002d24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <HAL_DMA_IRQHandler+0x258>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a92      	ldr	r2, [pc, #584]	; (8002f80 <HAL_DMA_IRQHandler+0x25c>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01a      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2204      	movs	r2, #4
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2204      	movs	r2, #4
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	2210      	movs	r2, #16
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d043      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2210      	movs	r2, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d024      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e01f      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e016      	b.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0208 	bic.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2220      	movs	r2, #32
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 808e 	beq.w	8002fc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8086 	beq.w	8002fc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2220      	movs	r2, #32
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b05      	cmp	r3, #5
 8002ecc:	d136      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0216 	bic.w	r2, r2, #22
 8002edc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_DMA_IRQHandler+0x1da>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0208 	bic.w	r2, r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	223f      	movs	r2, #63	; 0x3f
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07d      	beq.n	800302e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
        }
        return;
 8002f3a:	e078      	b.n	800302e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d030      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e02b      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
 8002f7a:	e022      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
 8002f7c:	20000070 	.word	0x20000070
 8002f80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0210 	bic.w	r2, r2, #16
 8002fa0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d032      	beq.n	8003030 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d022      	beq.n	800301c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d307      	bcc.n	800300a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f2      	bne.n	8002fee <HAL_DMA_IRQHandler+0x2ca>
 8003008:	e000      	b.n	800300c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800300a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e000      	b.n	8003030 <HAL_DMA_IRQHandler+0x30c>
        return;
 800302e:	bf00      	nop
    }
  }
}
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop

08003038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3b10      	subs	r3, #16
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <DMA_CalcBaseAndBitshift+0x64>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d909      	bls.n	800307a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	659a      	str	r2, [r3, #88]	; 0x58
 8003078:	e007      	b.n	800308a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	aaaaaaab 	.word	0xaaaaaaab
 80030a0:	08006254 	.word	0x08006254

080030a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11f      	bne.n	80030fe <DMA_CheckFifoParam+0x5a>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d856      	bhi.n	8003172 <DMA_CheckFifoParam+0xce>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <DMA_CheckFifoParam+0x28>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030ef 	.word	0x080030ef
 80030d4:	080030dd 	.word	0x080030dd
 80030d8:	08003173 	.word	0x08003173
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d046      	beq.n	8003176 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e043      	b.n	8003176 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f6:	d140      	bne.n	800317a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e03d      	b.n	800317a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003106:	d121      	bne.n	800314c <DMA_CheckFifoParam+0xa8>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d837      	bhi.n	800317e <DMA_CheckFifoParam+0xda>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <DMA_CheckFifoParam+0x70>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	0800312b 	.word	0x0800312b
 800311c:	08003125 	.word	0x08003125
 8003120:	0800313d 	.word	0x0800313d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e030      	b.n	800318c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d025      	beq.n	8003182 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313a:	e022      	b.n	8003182 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003144:	d11f      	bne.n	8003186 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800314a:	e01c      	b.n	8003186 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d903      	bls.n	800315a <DMA_CheckFifoParam+0xb6>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b03      	cmp	r3, #3
 8003156:	d003      	beq.n	8003160 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003158:	e018      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      break;
 800315e:	e015      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00e      	beq.n	800318a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e00b      	b.n	800318a <DMA_CheckFifoParam+0xe6>
      break;
 8003172:	bf00      	nop
 8003174:	e00a      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
 8003178:	e008      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
 800317c:	e006      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e004      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e002      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;   
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
    }
  } 
  
  return status; 
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e177      	b.n	80034a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f040 8166 	bne.w	80034a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d00b      	beq.n	80031f6 <HAL_GPIO_Init+0x5a>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ea:	2b11      	cmp	r3, #17
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b12      	cmp	r3, #18
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0xfc>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b12      	cmp	r3, #18
 8003296:	d123      	bne.n	80032e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	08da      	lsrs	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3208      	adds	r2, #8
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80c0 	beq.w	80034a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_GPIO_Init+0x324>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333e:	4a61      	ldr	r2, [pc, #388]	; (80034c4 <HAL_GPIO_Init+0x328>)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_GPIO_Init+0x32c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d037      	beq.n	80033da <HAL_GPIO_Init+0x23e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a57      	ldr	r2, [pc, #348]	; (80034cc <HAL_GPIO_Init+0x330>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d031      	beq.n	80033d6 <HAL_GPIO_Init+0x23a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a56      	ldr	r2, [pc, #344]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02b      	beq.n	80033d2 <HAL_GPIO_Init+0x236>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a55      	ldr	r2, [pc, #340]	; (80034d4 <HAL_GPIO_Init+0x338>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d025      	beq.n	80033ce <HAL_GPIO_Init+0x232>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_GPIO_Init+0x33c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01f      	beq.n	80033ca <HAL_GPIO_Init+0x22e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_GPIO_Init+0x340>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d019      	beq.n	80033c6 <HAL_GPIO_Init+0x22a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_GPIO_Init+0x344>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0x226>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <HAL_GPIO_Init+0x348>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00d      	beq.n	80033be <HAL_GPIO_Init+0x222>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a50      	ldr	r2, [pc, #320]	; (80034e8 <HAL_GPIO_Init+0x34c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <HAL_GPIO_Init+0x21e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4f      	ldr	r2, [pc, #316]	; (80034ec <HAL_GPIO_Init+0x350>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x21a>
 80033b2:	2309      	movs	r3, #9
 80033b4:	e012      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033b6:	230a      	movs	r3, #10
 80033b8:	e010      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033ba:	2308      	movs	r3, #8
 80033bc:	e00e      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033be:	2307      	movs	r3, #7
 80033c0:	e00c      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033c2:	2306      	movs	r3, #6
 80033c4:	e00a      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033c6:	2305      	movs	r3, #5
 80033c8:	e008      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e006      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033ce:	2303      	movs	r3, #3
 80033d0:	e004      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e002      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_GPIO_Init+0x240>
 80033da:	2300      	movs	r3, #0
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f002 0203 	and.w	r2, r2, #3
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	4093      	lsls	r3, r2
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ec:	4935      	ldr	r1, [pc, #212]	; (80034c4 <HAL_GPIO_Init+0x328>)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_GPIO_Init+0x354>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003448:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <HAL_GPIO_Init+0x354>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_GPIO_Init+0x354>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_GPIO_Init+0x354>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_GPIO_Init+0x354>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3301      	adds	r3, #1
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	f67f ae84 	bls.w	80031b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3724      	adds	r7, #36	; 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40013800 	.word	0x40013800
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40020400 	.word	0x40020400
 80034d0:	40020800 	.word	0x40020800
 80034d4:	40020c00 	.word	0x40020c00
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40021400 	.word	0x40021400
 80034e0:	40021800 	.word	0x40021800
 80034e4:	40021c00 	.word	0x40021c00
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40022400 	.word	0x40022400
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e001      	b.n	8003516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003540:	e003      	b.n	800354a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	041a      	lsls	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fd68 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e12b      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fbe6 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ec:	f000 fe1e 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a81      	ldr	r2, [pc, #516]	; (80037fc <HAL_I2C_Init+0x274>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d807      	bhi.n	800360c <HAL_I2C_Init+0x84>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a80      	ldr	r2, [pc, #512]	; (8003800 <HAL_I2C_Init+0x278>)
 8003600:	4293      	cmp	r3, r2
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e006      	b.n	800361a <HAL_I2C_Init+0x92>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a7d      	ldr	r2, [pc, #500]	; (8003804 <HAL_I2C_Init+0x27c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	bf94      	ite	ls
 8003614:	2301      	movls	r3, #1
 8003616:	2300      	movhi	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0e7      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a78      	ldr	r2, [pc, #480]	; (8003808 <HAL_I2C_Init+0x280>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a6a      	ldr	r2, [pc, #424]	; (80037fc <HAL_I2C_Init+0x274>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d802      	bhi.n	800365c <HAL_I2C_Init+0xd4>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3301      	adds	r3, #1
 800365a:	e009      	b.n	8003670 <HAL_I2C_Init+0xe8>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	4a69      	ldr	r2, [pc, #420]	; (800380c <HAL_I2C_Init+0x284>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	3301      	adds	r3, #1
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	495c      	ldr	r1, [pc, #368]	; (80037fc <HAL_I2C_Init+0x274>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d819      	bhi.n	80036c4 <HAL_I2C_Init+0x13c>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e59      	subs	r1, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fbb1 f3f3 	udiv	r3, r1, r3
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036a4:	400b      	ands	r3, r1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_I2C_Init+0x138>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e59      	subs	r1, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036be:	e051      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e04f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <HAL_I2C_Init+0x168>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e012      	b.n	8003716 <HAL_I2C_Init+0x18e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x196>
 800371a:	2301      	movs	r3, #1
 800371c:	e022      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10e      	bne.n	8003744 <HAL_I2C_Init+0x1bc>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e58      	subs	r0, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	440b      	add	r3, r1
 8003734:	fbb0 f3f3 	udiv	r3, r0, r3
 8003738:	3301      	adds	r3, #1
 800373a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	0099      	lsls	r1, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	6809      	ldr	r1, [r1, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6911      	ldr	r1, [r2, #16]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	000186a0 	.word	0x000186a0
 8003800:	001e847f 	.word	0x001e847f
 8003804:	003d08ff 	.word	0x003d08ff
 8003808:	431bde83 	.word	0x431bde83
 800380c:	10624dd3 	.word	0x10624dd3

08003810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	d129      	bne.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2224      	movs	r2, #36	; 0x24
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0210 	bic.w	r2, r2, #16
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d12a      	bne.n	80038f8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2224      	movs	r2, #36	; 0x24
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80038c2:	89fb      	ldrh	r3, [r7, #14]
 80038c4:	f023 030f 	bic.w	r3, r3, #15
 80038c8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	89fa      	ldrh	r2, [r7, #14]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_PWREx_EnableOverDrive+0x90>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_PWREx_EnableOverDrive+0x90>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_PWREx_EnableOverDrive+0x90>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_PWREx_EnableOverDrive+0x94>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003934:	f7fe f9d6 	bl	8001ce4 <HAL_GetTick>
 8003938:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800393a:	e009      	b.n	8003950 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800393c:	f7fe f9d2 	bl	8001ce4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800394a:	d901      	bls.n	8003950 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e01f      	b.n	8003990 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003950:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d1ee      	bne.n	800393c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003964:	f7fe f9be 	bl	8001ce4 <HAL_GetTick>
 8003968:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800396a:	e009      	b.n	8003980 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800396c:	f7fe f9ba 	bl	8001ce4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800397a:	d901      	bls.n	8003980 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e007      	b.n	8003990 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800398c:	d1ee      	bne.n	800396c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	420e0040 	.word	0x420e0040
 80039a0:	40007000 	.word	0x40007000
 80039a4:	420e0044 	.word	0x420e0044

080039a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e25b      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d075      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c6:	4ba3      	ldr	r3, [pc, #652]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00c      	beq.n	80039ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4ba0      	ldr	r3, [pc, #640]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d112      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b9d      	ldr	r3, [pc, #628]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	4b99      	ldr	r3, [pc, #612]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05b      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x108>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d157      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e236      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x74>
 8003a0e:	4b91      	ldr	r3, [pc, #580]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a90      	ldr	r2, [pc, #576]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e01d      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x98>
 8003a26:	4b8b      	ldr	r3, [pc, #556]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a8a      	ldr	r2, [pc, #552]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b88      	ldr	r3, [pc, #544]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a87      	ldr	r2, [pc, #540]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0xb0>
 8003a40:	4b84      	ldr	r3, [pc, #528]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a83      	ldr	r2, [pc, #524]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a80      	ldr	r2, [pc, #512]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe f940 	bl	8001ce4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe f93c 	bl	8001ce4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1fb      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b76      	ldr	r3, [pc, #472]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0xc0>
 8003a86:	e014      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f92c 	bl	8001ce4 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a90:	f7fe f928 	bl	8001ce4 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1e7      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0xe8>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d063      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003abe:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b62      	ldr	r3, [pc, #392]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d11c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e1bb      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4952      	ldr	r1, [pc, #328]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	e03a      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <HAL_RCC_OscConfig+0x2b0>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fe f8e1 	bl	8001ce4 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fe f8dd 	bl	8001ce4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e19c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b43      	ldr	r3, [pc, #268]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4940      	ldr	r1, [pc, #256]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	; (8003c58 <HAL_RCC_OscConfig+0x2b0>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fe f8c0 	bl	8001ce4 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b68:	f7fe f8bc 	bl	8001ce4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e17b      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d030      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCC_OscConfig+0x2b4>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe f8a0 	bl	8001ce4 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7fe f89c 	bl	8001ce4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e15b      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x200>
 8003bc6:	e015      	b.n	8003bf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCC_OscConfig+0x2b4>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bce:	f7fe f889 	bl	8001ce4 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe f885 	bl	8001ce4 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e144      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80a0 	beq.w	8003d42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_OscConfig+0x2b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCC_OscConfig+0x2b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <HAL_RCC_OscConfig+0x2b8>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe f84b 	bl	8001ce4 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e011      	b.n	8003c76 <HAL_RCC_OscConfig+0x2ce>
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	42470000 	.word	0x42470000
 8003c5c:	42470e80 	.word	0x42470e80
 8003c60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c64:	f7fe f83e 	bl	8001ce4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0fd      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_RCC_OscConfig+0x4d4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d106      	bne.n	8003c98 <HAL_RCC_OscConfig+0x2f0>
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	e01c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x32a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x312>
 8003ca0:	4b77      	ldr	r3, [pc, #476]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	4b74      	ldr	r3, [pc, #464]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a73      	ldr	r2, [pc, #460]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x32a>
 8003cba:	4b71      	ldr	r3, [pc, #452]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a70      	ldr	r2, [pc, #448]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc6:	4b6e      	ldr	r3, [pc, #440]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a6d      	ldr	r2, [pc, #436]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe f803 	bl	8001ce4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fd ffff 	bl	8001ce4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0bc      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x33a>
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fd ffed 	bl	8001ce4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd ffe9 	bl	8001ce4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0a6      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	4b56      	ldr	r3, [pc, #344]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b52      	ldr	r3, [pc, #328]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a51      	ldr	r2, [pc, #324]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8092 	beq.w	8003e70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4c:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d05c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d141      	bne.n	8003de4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <HAL_RCC_OscConfig+0x4dc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fd ffbd 	bl	8001ce4 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fd ffb9 	bl	8001ce4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e078      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d80:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	019b      	lsls	r3, r3, #6
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	3b01      	subs	r3, #1
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	061b      	lsls	r3, r3, #24
 8003db0:	4933      	ldr	r1, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db6:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_RCC_OscConfig+0x4dc>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd ff92 	bl	8001ce4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd ff8e 	bl	8001ce4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e04d      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x41c>
 8003de2:	e045      	b.n	8003e70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x4dc>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fd ff7b 	bl	8001ce4 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fd ff77 	bl	8001ce4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e036      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e04:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x44a>
 8003e10:	e02e      	b.n	8003e70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e029      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_RCC_OscConfig+0x4d8>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d115      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e46:	4013      	ands	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d106      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	40023800 	.word	0x40023800
 8003e84:	42470060 	.word	0x42470060

08003e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0cc      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b68      	ldr	r3, [pc, #416]	; (8004040 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d90c      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b65      	ldr	r3, [pc, #404]	; (8004040 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b63      	ldr	r3, [pc, #396]	; (8004040 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0b8      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a58      	ldr	r2, [pc, #352]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef4:	4b53      	ldr	r3, [pc, #332]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4a52      	ldr	r2, [pc, #328]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	494d      	ldr	r1, [pc, #308]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d044      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b47      	ldr	r3, [pc, #284]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d119      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e07f      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	4b3f      	ldr	r3, [pc, #252]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e06f      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e067      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4b37      	ldr	r3, [pc, #220]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4934      	ldr	r1, [pc, #208]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f78:	f7fd feb4 	bl	8001ce4 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7fd feb0 	bl	8001ce4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e04f      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 020c 	and.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d1eb      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b25      	ldr	r3, [pc, #148]	; (8004040 <HAL_RCC_ClockConfig+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d20c      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e032      	b.n	8004036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4916      	ldr	r1, [pc, #88]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	490e      	ldr	r1, [pc, #56]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800400e:	f000 f821 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	490a      	ldr	r1, [pc, #40]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a09      	ldr	r2, [pc, #36]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fe14 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023c00 	.word	0x40023c00
 8004044:	40023800 	.word	0x40023800
 8004048:	0800623c 	.word	0x0800623c
 800404c:	20000070 	.word	0x20000070
 8004050:	20000074 	.word	0x20000074

08004054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800406c:	4b67      	ldr	r3, [pc, #412]	; (800420c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b08      	cmp	r3, #8
 8004076:	d00d      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x40>
 8004078:	2b08      	cmp	r3, #8
 800407a:	f200 80bd 	bhi.w	80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x34>
 8004082:	2b04      	cmp	r3, #4
 8004084:	d003      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0x3a>
 8004086:	e0b7      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004088:	4b61      	ldr	r3, [pc, #388]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800408a:	60bb      	str	r3, [r7, #8]
       break;
 800408c:	e0b7      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800408e:	4b60      	ldr	r3, [pc, #384]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004090:	60bb      	str	r3, [r7, #8]
      break;
 8004092:	e0b4      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004094:	4b5d      	ldr	r3, [pc, #372]	; (800420c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800409c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409e:	4b5b      	ldr	r3, [pc, #364]	; (800420c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d04d      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040aa:	4b58      	ldr	r3, [pc, #352]	; (800420c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	461a      	mov	r2, r3
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	ea02 0800 	and.w	r8, r2, r0
 80040c2:	ea03 0901 	and.w	r9, r3, r1
 80040c6:	4640      	mov	r0, r8
 80040c8:	4649      	mov	r1, r9
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	014b      	lsls	r3, r1, #5
 80040d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040d8:	0142      	lsls	r2, r0, #5
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	ebb0 0008 	subs.w	r0, r0, r8
 80040e2:	eb61 0109 	sbc.w	r1, r1, r9
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	018b      	lsls	r3, r1, #6
 80040f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040f4:	0182      	lsls	r2, r0, #6
 80040f6:	1a12      	subs	r2, r2, r0
 80040f8:	eb63 0301 	sbc.w	r3, r3, r1
 80040fc:	f04f 0000 	mov.w	r0, #0
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	00d9      	lsls	r1, r3, #3
 8004106:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800410a:	00d0      	lsls	r0, r2, #3
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	eb12 0208 	adds.w	r2, r2, r8
 8004114:	eb43 0309 	adc.w	r3, r3, r9
 8004118:	f04f 0000 	mov.w	r0, #0
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	0299      	lsls	r1, r3, #10
 8004122:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004126:	0290      	lsls	r0, r2, #10
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	461a      	mov	r2, r3
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	f7fc f858 	bl	80001ec <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e04a      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b31      	ldr	r3, [pc, #196]	; (800420c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	ea02 0400 	and.w	r4, r2, r0
 800415e:	ea03 0501 	and.w	r5, r3, r1
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	014b      	lsls	r3, r1, #5
 8004170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004174:	0142      	lsls	r2, r0, #5
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	1b00      	subs	r0, r0, r4
 800417c:	eb61 0105 	sbc.w	r1, r1, r5
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	018b      	lsls	r3, r1, #6
 800418a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800418e:	0182      	lsls	r2, r0, #6
 8004190:	1a12      	subs	r2, r2, r0
 8004192:	eb63 0301 	sbc.w	r3, r3, r1
 8004196:	f04f 0000 	mov.w	r0, #0
 800419a:	f04f 0100 	mov.w	r1, #0
 800419e:	00d9      	lsls	r1, r3, #3
 80041a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a4:	00d0      	lsls	r0, r2, #3
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	1912      	adds	r2, r2, r4
 80041ac:	eb45 0303 	adc.w	r3, r5, r3
 80041b0:	f04f 0000 	mov.w	r0, #0
 80041b4:	f04f 0100 	mov.w	r1, #0
 80041b8:	0299      	lsls	r1, r3, #10
 80041ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041be:	0290      	lsls	r0, r2, #10
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	f7fc f80c 	bl	80001ec <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	3301      	adds	r3, #1
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	60bb      	str	r3, [r7, #8]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041fa:	60bb      	str	r3, [r7, #8]
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	68bb      	ldr	r3, [r7, #8]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	00f42400 	.word	0x00f42400

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000070 	.word	0x20000070

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800624c 	.word	0x0800624c

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff ffdc 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	0800624c 	.word	0x0800624c

0800427c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e056      	b.n	800433c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fc ff99 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	ea42 0103 	orr.w	r1, r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	f003 0104 	and.w	r1, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69da      	ldr	r2, [r3, #28]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004360:	d112      	bne.n	8004388 <HAL_SPI_Receive+0x44>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10e      	bne.n	8004388 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2204      	movs	r2, #4
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f8e9 	bl	8004556 <HAL_SPI_TransmitReceive>
 8004384:	4603      	mov	r3, r0
 8004386:	e0e2      	b.n	800454e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_SPI_Receive+0x52>
 8004392:	2302      	movs	r3, #2
 8004394:	e0db      	b.n	800454e <HAL_SPI_Receive+0x20a>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800439e:	f7fd fca1 	bl	8001ce4 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
 80043b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043b4:	e0c2      	b.n	800453c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_SPI_Receive+0x7e>
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043c6:	e0b9      	b.n	800453c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2204      	movs	r2, #4
 80043cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440e:	d107      	bne.n	8004420 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800441e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d007      	beq.n	800443e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d162      	bne.n	800450c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004446:	e02e      	b.n	80044a6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d115      	bne.n	8004482 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f103 020c 	add.w	r2, r3, #12
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004480:	e011      	b.n	80044a6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004482:	f7fd fc2f 	bl	8001ce4 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d803      	bhi.n	800449a <HAL_SPI_Receive+0x156>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004498:	d102      	bne.n	80044a0 <HAL_SPI_Receive+0x15c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044a4:	e04a      	b.n	800453c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1cb      	bne.n	8004448 <HAL_SPI_Receive+0x104>
 80044b0:	e031      	b.n	8004516 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d113      	bne.n	80044e8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	b292      	uxth	r2, r2
 80044cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e6:	e011      	b.n	800450c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e8:	f7fd fbfc 	bl	8001ce4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d803      	bhi.n	8004500 <HAL_SPI_Receive+0x1bc>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fe:	d102      	bne.n	8004506 <HAL_SPI_Receive+0x1c2>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	75fb      	strb	r3, [r7, #23]
          goto error;
 800450a:	e017      	b.n	800453c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cd      	bne.n	80044b2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fa27 	bl	800496e <SPI_EndRxTransaction>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
 8004538:	e000      	b.n	800453c <HAL_SPI_Receive+0x1f8>
  }

error :
 800453a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b08c      	sub	sp, #48	; 0x30
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004564:	2301      	movs	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_SPI_TransmitReceive+0x26>
 8004578:	2302      	movs	r3, #2
 800457a:	e18a      	b.n	8004892 <HAL_SPI_TransmitReceive+0x33c>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004584:	f7fd fbae 	bl	8001ce4 <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800459a:	887b      	ldrh	r3, [r7, #2]
 800459c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800459e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d00f      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x70>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ac:	d107      	bne.n	80045be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <HAL_SPI_TransmitReceive+0x68>
 80045b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045be:	2302      	movs	r3, #2
 80045c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045c4:	e15b      	b.n	800487e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x82>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x82>
 80045d2:	887b      	ldrh	r3, [r7, #2]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045de:	e14e      	b.n	800487e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d003      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2205      	movs	r2, #5
 80045f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	887a      	ldrh	r2, [r7, #2]
 8004604:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	887a      	ldrh	r2, [r7, #2]
 800460a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d007      	beq.n	8004648 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004650:	d178      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x10a>
 800465a:	8b7b      	ldrh	r3, [r7, #26]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d166      	bne.n	800472e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004684:	e053      	b.n	800472e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b02      	cmp	r3, #2
 8004692:	d11b      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x176>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x176>
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d113      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	1c9a      	adds	r2, r3, #2
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d119      	bne.n	800470e <HAL_SPI_TransmitReceive+0x1b8>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d014      	beq.n	800470e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	b292      	uxth	r2, r2
 80046f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800470a:	2301      	movs	r3, #1
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800470e:	f7fd fae9 	bl	8001ce4 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800471a:	429a      	cmp	r2, r3
 800471c:	d807      	bhi.n	800472e <HAL_SPI_TransmitReceive+0x1d8>
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004724:	d003      	beq.n	800472e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800472c:	e0a7      	b.n	800487e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1a6      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x130>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1a1      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x130>
 8004742:	e07c      	b.n	800483e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_SPI_TransmitReceive+0x1fc>
 800474c:	8b7b      	ldrh	r3, [r7, #26]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d16b      	bne.n	800482a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004778:	e057      	b.n	800482a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11c      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x26c>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d017      	beq.n	80047c2 <HAL_SPI_TransmitReceive+0x26c>
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d114      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	7812      	ldrb	r2, [r2, #0]
 80047a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d119      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x2ae>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004800:	2301      	movs	r3, #1
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004804:	f7fd fa6e 	bl	8001ce4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004810:	429a      	cmp	r2, r3
 8004812:	d803      	bhi.n	800481c <HAL_SPI_TransmitReceive+0x2c6>
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481a:	d102      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x2cc>
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004828:	e029      	b.n	800487e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1a2      	bne.n	800477a <HAL_SPI_TransmitReceive+0x224>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d19d      	bne.n	800477a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8f8 	bl	8004a38 <SPI_EndRxTxTransaction>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800485a:	e010      	b.n	800487e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	e000      	b.n	800487e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800487c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800488e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004892:	4618      	mov	r0, r3
 8004894:	3730      	adds	r7, #48	; 0x30
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048aa:	e04c      	b.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b2:	d048      	beq.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80048b4:	f7fd fa16 	bl	8001ce4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <SPI_WaitFlagStateUntilTimeout+0x30>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d13d      	bne.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d111      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ec:	d004      	beq.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d107      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004910:	d10f      	bne.n	8004932 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	429a      	cmp	r2, r3
 8004962:	d1a3      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af02      	add	r7, sp, #8
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004982:	d111      	bne.n	80049a8 <SPI_EndRxTransaction+0x3a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498c:	d004      	beq.n	8004998 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d107      	bne.n	80049a8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b0:	d12a      	bne.n	8004a08 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ba:	d012      	beq.n	80049e2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff ff67 	bl	800489a <SPI_WaitFlagStateUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d02d      	beq.n	8004a2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e026      	b.n	8004a30 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2101      	movs	r1, #1
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ff54 	bl	800489a <SPI_WaitFlagStateUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01a      	beq.n	8004a2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e013      	b.n	8004a30 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2101      	movs	r1, #1
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff ff41 	bl	800489a <SPI_WaitFlagStateUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e000      	b.n	8004a30 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <SPI_EndRxTxTransaction+0x7c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <SPI_EndRxTxTransaction+0x80>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0d5b      	lsrs	r3, r3, #21
 8004a50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a62:	d112      	bne.n	8004a8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff ff13 	bl	800489a <SPI_WaitFlagStateUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e00f      	b.n	8004aaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b80      	cmp	r3, #128	; 0x80
 8004aa2:	d0f2      	beq.n	8004a8a <SPI_EndRxTxTransaction+0x52>
 8004aa4:	e000      	b.n	8004aa8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004aa6:	bf00      	nop
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000070 	.word	0x20000070
 8004ab8:	165e9f81 	.word	0x165e9f81

08004abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e01d      	b.n	8004b0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc feb8 	bl	8001858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 fa9a 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e01d      	b.n	8004b60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f815 	bl	8004b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 fa6f 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e01d      	b.n	8004bca <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f815 	bl	8004bd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fa3a 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e08a      	b.n	8004d16 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11b      	bne.n	8004c4e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f000 fc55 	bl	80054d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 020c 	bic.w	r2, r2, #12
 8004c38:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	619a      	str	r2, [r3, #24]
 8004c4c:	e05a      	b.n	8004d04 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d11c      	bne.n	8004c8e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f000 fcd9 	bl	800561a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c76:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	021a      	lsls	r2, r3, #8
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	619a      	str	r2, [r3, #24]
 8004c8c:	e03a      	b.n	8004d04 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6819      	ldr	r1, [r3, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f000 fd26 	bl	80056f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 020c 	bic.w	r2, r2, #12
 8004cb6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69d9      	ldr	r1, [r3, #28]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	61da      	str	r2, [r3, #28]
 8004cca:	e01b      	b.n	8004d04 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f000 fd46 	bl	800576c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69d9      	ldr	r1, [r3, #28]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0b4      	b.n	8004ea4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	f200 809f 	bhi.w	8004e90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004e91 	.word	0x08004e91
 8004d60:	08004e91 	.word	0x08004e91
 8004d64:	08004e91 	.word	0x08004e91
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004e91 	.word	0x08004e91
 8004d70:	08004e91 	.word	0x08004e91
 8004d74:	08004e91 	.word	0x08004e91
 8004d78:	08004e0f 	.word	0x08004e0f
 8004d7c:	08004e91 	.word	0x08004e91
 8004d80:	08004e91 	.word	0x08004e91
 8004d84:	08004e91 	.word	0x08004e91
 8004d88:	08004e4f 	.word	0x08004e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f9ee 	bl	8005174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0208 	orr.w	r2, r2, #8
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	619a      	str	r2, [r3, #24]
      break;
 8004dca:	e062      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa3e 	bl	8005254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6999      	ldr	r1, [r3, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	021a      	lsls	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	619a      	str	r2, [r3, #24]
      break;
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa93 	bl	8005340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0208 	orr.w	r2, r2, #8
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0204 	bic.w	r2, r2, #4
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	61da      	str	r2, [r3, #28]
      break;
 8004e4c:	e021      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fae7 	bl	8005428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	021a      	lsls	r2, r3, #8
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	61da      	str	r2, [r3, #28]
      break;
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_ConfigClockSource+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0b3      	b.n	800502c <HAL_TIM_ConfigClockSource+0x180>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efc:	d03e      	beq.n	8004f7c <HAL_TIM_ConfigClockSource+0xd0>
 8004efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f02:	f200 8087 	bhi.w	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	f000 8085 	beq.w	8005018 <HAL_TIM_ConfigClockSource+0x16c>
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d87f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f14:	2b70      	cmp	r3, #112	; 0x70
 8004f16:	d01a      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xa2>
 8004f18:	2b70      	cmp	r3, #112	; 0x70
 8004f1a:	d87b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f1c:	2b60      	cmp	r3, #96	; 0x60
 8004f1e:	d050      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x116>
 8004f20:	2b60      	cmp	r3, #96	; 0x60
 8004f22:	d877      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f24:	2b50      	cmp	r3, #80	; 0x50
 8004f26:	d03c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0xf6>
 8004f28:	2b50      	cmp	r3, #80	; 0x50
 8004f2a:	d873      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d058      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0x136>
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d86f      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f34:	2b30      	cmp	r3, #48	; 0x30
 8004f36:	d064      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	d86b      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d060      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d867      	bhi.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d05a      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f4c:	e062      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f000 fc5d 	bl	800581c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	609a      	str	r2, [r3, #8]
      break;
 8004f7a:	e04e      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6899      	ldr	r1, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f000 fc46 	bl	800581c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9e:	609a      	str	r2, [r3, #8]
      break;
 8004fa0:	e03b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fb04 	bl	80055bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2150      	movs	r1, #80	; 0x50
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fc13 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e02b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f000 fb60 	bl	8005694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2160      	movs	r1, #96	; 0x60
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fc03 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8004fe0:	e01b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 fae4 	bl	80055bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fbf3 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8005000:	e00b      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f000 fbea 	bl	80057e6 <TIM_ITRx_SetConfig>
      break;
 8005012:	e002      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a40      	ldr	r2, [pc, #256]	; (8005148 <TIM_Base_SetConfig+0x114>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005052:	d00f      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a3d      	ldr	r2, [pc, #244]	; (800514c <TIM_Base_SetConfig+0x118>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <TIM_Base_SetConfig+0x11c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a3b      	ldr	r2, [pc, #236]	; (8005154 <TIM_Base_SetConfig+0x120>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a3a      	ldr	r2, [pc, #232]	; (8005158 <TIM_Base_SetConfig+0x124>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d108      	bne.n	8005086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2f      	ldr	r2, [pc, #188]	; (8005148 <TIM_Base_SetConfig+0x114>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02b      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d027      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2c      	ldr	r2, [pc, #176]	; (800514c <TIM_Base_SetConfig+0x118>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d023      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a2b      	ldr	r2, [pc, #172]	; (8005150 <TIM_Base_SetConfig+0x11c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d01f      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <TIM_Base_SetConfig+0x120>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01b      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a29      	ldr	r2, [pc, #164]	; (8005158 <TIM_Base_SetConfig+0x124>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d017      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a28      	ldr	r2, [pc, #160]	; (800515c <TIM_Base_SetConfig+0x128>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a27      	ldr	r2, [pc, #156]	; (8005160 <TIM_Base_SetConfig+0x12c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00f      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <TIM_Base_SetConfig+0x130>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a25      	ldr	r2, [pc, #148]	; (8005168 <TIM_Base_SetConfig+0x134>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a24      	ldr	r2, [pc, #144]	; (800516c <TIM_Base_SetConfig+0x138>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <TIM_Base_SetConfig+0x13c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0a      	ldr	r2, [pc, #40]	; (8005148 <TIM_Base_SetConfig+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0xf8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <TIM_Base_SetConfig+0x124>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d103      	bne.n	8005134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	615a      	str	r2, [r3, #20]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40010400 	.word	0x40010400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800
 8005168:	40001800 	.word	0x40001800
 800516c:	40001c00 	.word	0x40001c00
 8005170:	40002000 	.word	0x40002000

08005174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a20      	ldr	r2, [pc, #128]	; (800524c <TIM_OC1_SetConfig+0xd8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_OC1_SetConfig+0x64>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <TIM_OC1_SetConfig+0xdc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d10c      	bne.n	80051f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f023 0308 	bic.w	r3, r3, #8
 80051de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 0304 	bic.w	r3, r3, #4
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <TIM_OC1_SetConfig+0xd8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC1_SetConfig+0x8e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <TIM_OC1_SetConfig+0xdc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d111      	bne.n	8005226 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40010000 	.word	0x40010000
 8005250:	40010400 	.word	0x40010400

08005254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0210 	bic.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0320 	bic.w	r3, r3, #32
 800529e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a22      	ldr	r2, [pc, #136]	; (8005338 <TIM_OC2_SetConfig+0xe4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC2_SetConfig+0x68>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a21      	ldr	r2, [pc, #132]	; (800533c <TIM_OC2_SetConfig+0xe8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10d      	bne.n	80052d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <TIM_OC2_SetConfig+0xe4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_OC2_SetConfig+0x94>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a16      	ldr	r2, [pc, #88]	; (800533c <TIM_OC2_SetConfig+0xe8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d113      	bne.n	8005310 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40010000 	.word	0x40010000
 800533c:	40010400 	.word	0x40010400

08005340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a21      	ldr	r2, [pc, #132]	; (8005420 <TIM_OC3_SetConfig+0xe0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <TIM_OC3_SetConfig+0x66>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a20      	ldr	r2, [pc, #128]	; (8005424 <TIM_OC3_SetConfig+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10d      	bne.n	80053c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <TIM_OC3_SetConfig+0xe0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC3_SetConfig+0x92>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC3_SetConfig+0xe4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d113      	bne.n	80053fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400

08005428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a12      	ldr	r2, [pc, #72]	; (80054cc <TIM_OC4_SetConfig+0xa4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d003      	beq.n	8005490 <TIM_OC4_SetConfig+0x68>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a11      	ldr	r2, [pc, #68]	; (80054d0 <TIM_OC4_SetConfig+0xa8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d109      	bne.n	80054a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	019b      	lsls	r3, r3, #6
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <TIM_TI1_SetConfig+0xcc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01b      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d017      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <TIM_TI1_SetConfig+0xd0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <TIM_TI1_SetConfig+0xd4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00f      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <TIM_TI1_SetConfig+0xd8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00b      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <TIM_TI1_SetConfig+0xdc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d007      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <TIM_TI1_SetConfig+0xe0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_TI1_SetConfig+0x66>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <TIM_TI1_SetConfig+0xe4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <TIM_TI1_SetConfig+0x6a>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <TIM_TI1_SetConfig+0x6c>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e003      	b.n	800555e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	b2db      	uxtb	r3, r3
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f023 030a 	bic.w	r3, r3, #10
 8005578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f003 030a 	and.w	r3, r3, #10
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800
 80055ac:	40000c00 	.word	0x40000c00
 80055b0:	40010400 	.word	0x40010400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40001800 	.word	0x40001800

080055bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0201 	bic.w	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f023 030a 	bic.w	r3, r3, #10
 80055f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800561a:	b480      	push	{r7}
 800561c:	b087      	sub	sp, #28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f023 0210 	bic.w	r2, r3, #16
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	031b      	lsls	r3, r3, #12
 800565e:	b29b      	uxth	r3, r3
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800566c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 0210 	bic.w	r2, r3, #16
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	031b      	lsls	r3, r3, #12
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005730:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	b2db      	uxtb	r3, r3
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005744:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	031b      	lsls	r3, r3, #12
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	031b      	lsls	r3, r3, #12
 80057c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	f043 0307 	orr.w	r3, r3, #7
 8005808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	431a      	orrs	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4313      	orrs	r3, r2
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e05a      	b.n	800592a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a21      	ldr	r2, [pc, #132]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d022      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d01d      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1d      	ldr	r2, [pc, #116]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d018      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d10c      	bne.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4313      	orrs	r3, r2
 800590e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	40010000 	.word	0x40010000
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800
 8005944:	40000c00 	.word	0x40000c00
 8005948:	40010400 	.word	0x40010400
 800594c:	40014000 	.word	0x40014000
 8005950:	40001800 	.word	0x40001800

08005954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800596c:	2302      	movs	r3, #2
 800596e:	e03d      	b.n	80059ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e03f      	b.n	8005a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fc f856 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	; 0x24
 8005a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f829 	bl	8005a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	b0bd      	sub	sp, #244	; 0xf4
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab0:	68d9      	ldr	r1, [r3, #12]
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	ea40 0301 	orr.w	r3, r0, r1
 8005abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005aec:	f021 010c 	bic.w	r1, r1, #12
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005afa:	430b      	orrs	r3, r1
 8005afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	6999      	ldr	r1, [r3, #24]
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	ea40 0301 	orr.w	r3, r0, r1
 8005b1a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b26:	f040 81a5 	bne.w	8005e74 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4bcd      	ldr	r3, [pc, #820]	; (8005e68 <UART_SetConfig+0x3d4>)
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d006      	beq.n	8005b44 <UART_SetConfig+0xb0>
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4bcb      	ldr	r3, [pc, #812]	; (8005e6c <UART_SetConfig+0x3d8>)
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	f040 80cb 	bne.w	8005cda <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fe fb86 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8005b48:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b50:	461c      	mov	r4, r3
 8005b52:	f04f 0500 	mov.w	r5, #0
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005b60:	415b      	adcs	r3, r3
 8005b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b66:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005b6a:	1912      	adds	r2, r2, r4
 8005b6c:	eb45 0303 	adc.w	r3, r5, r3
 8005b70:	f04f 0000 	mov.w	r0, #0
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	00d9      	lsls	r1, r3, #3
 8005b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b7e:	00d0      	lsls	r0, r2, #3
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	1911      	adds	r1, r2, r4
 8005b86:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005b8a:	416b      	adcs	r3, r5
 8005b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	1891      	adds	r1, r2, r2
 8005b9e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005ba2:	415b      	adcs	r3, r3
 8005ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ba8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005bac:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005bb0:	f7fa fb1c 	bl	80001ec <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4bad      	ldr	r3, [pc, #692]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005bba:	fba3 2302 	umull	r2, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	011e      	lsls	r6, r3, #4
 8005bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bc6:	461c      	mov	r4, r3
 8005bc8:	f04f 0500 	mov.w	r5, #0
 8005bcc:	4622      	mov	r2, r4
 8005bce:	462b      	mov	r3, r5
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	67b9      	str	r1, [r7, #120]	; 0x78
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bd8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005bdc:	1912      	adds	r2, r2, r4
 8005bde:	eb45 0303 	adc.w	r3, r5, r3
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	00d9      	lsls	r1, r3, #3
 8005bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bf0:	00d0      	lsls	r0, r2, #3
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	1911      	adds	r1, r2, r4
 8005bf8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005bfc:	416b      	adcs	r3, r5
 8005bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	1891      	adds	r1, r2, r2
 8005c10:	6739      	str	r1, [r7, #112]	; 0x70
 8005c12:	415b      	adcs	r3, r3
 8005c14:	677b      	str	r3, [r7, #116]	; 0x74
 8005c16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005c1a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005c1e:	f7fa fae5 	bl	80001ec <__aeabi_uldivmod>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4b92      	ldr	r3, [pc, #584]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005c28:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	2164      	movs	r1, #100	; 0x64
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	3332      	adds	r3, #50	; 0x32
 8005c3a:	4a8d      	ldr	r2, [pc, #564]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c48:	441e      	add	r6, r3
 8005c4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	1894      	adds	r4, r2, r2
 8005c5a:	66bc      	str	r4, [r7, #104]	; 0x68
 8005c5c:	415b      	adcs	r3, r3
 8005c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005c64:	1812      	adds	r2, r2, r0
 8005c66:	eb41 0303 	adc.w	r3, r1, r3
 8005c6a:	f04f 0400 	mov.w	r4, #0
 8005c6e:	f04f 0500 	mov.w	r5, #0
 8005c72:	00dd      	lsls	r5, r3, #3
 8005c74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c78:	00d4      	lsls	r4, r2, #3
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	1814      	adds	r4, r2, r0
 8005c80:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005c84:	414b      	adcs	r3, r1
 8005c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	461a      	mov	r2, r3
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	1891      	adds	r1, r2, r2
 8005c98:	6639      	str	r1, [r7, #96]	; 0x60
 8005c9a:	415b      	adcs	r3, r3
 8005c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ca6:	f7fa faa1 	bl	80001ec <__aeabi_uldivmod>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	4b70      	ldr	r3, [pc, #448]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	2164      	movs	r1, #100	; 0x64
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	3332      	adds	r3, #50	; 0x32
 8005cc2:	4a6b      	ldr	r2, [pc, #428]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	f003 0207 	and.w	r2, r3, #7
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4432      	add	r2, r6
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	e26d      	b.n	80061b6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cda:	f7fe faa7 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005cde:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ce6:	461c      	mov	r4, r3
 8005ce8:	f04f 0500 	mov.w	r5, #0
 8005cec:	4622      	mov	r2, r4
 8005cee:	462b      	mov	r3, r5
 8005cf0:	1891      	adds	r1, r2, r2
 8005cf2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cf8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cfc:	1912      	adds	r2, r2, r4
 8005cfe:	eb45 0303 	adc.w	r3, r5, r3
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f04f 0100 	mov.w	r1, #0
 8005d0a:	00d9      	lsls	r1, r3, #3
 8005d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d10:	00d0      	lsls	r0, r2, #3
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	1911      	adds	r1, r2, r4
 8005d18:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005d1c:	416b      	adcs	r3, r5
 8005d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	1891      	adds	r1, r2, r2
 8005d30:	6539      	str	r1, [r7, #80]	; 0x50
 8005d32:	415b      	adcs	r3, r3
 8005d34:	657b      	str	r3, [r7, #84]	; 0x54
 8005d36:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d3a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005d3e:	f7fa fa55 	bl	80001ec <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005d48:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	011e      	lsls	r6, r3, #4
 8005d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d54:	461c      	mov	r4, r3
 8005d56:	f04f 0500 	mov.w	r5, #0
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	1891      	adds	r1, r2, r2
 8005d60:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d62:	415b      	adcs	r3, r3
 8005d64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d6a:	1912      	adds	r2, r2, r4
 8005d6c:	eb45 0303 	adc.w	r3, r5, r3
 8005d70:	f04f 0000 	mov.w	r0, #0
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	00d9      	lsls	r1, r3, #3
 8005d7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d7e:	00d0      	lsls	r0, r2, #3
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	1911      	adds	r1, r2, r4
 8005d86:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005d8a:	416b      	adcs	r3, r5
 8005d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	1891      	adds	r1, r2, r2
 8005d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8005da0:	415b      	adcs	r3, r3
 8005da2:	647b      	str	r3, [r7, #68]	; 0x44
 8005da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005da8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005dac:	f7fa fa1e 	bl	80001ec <__aeabi_uldivmod>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005db6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	2164      	movs	r1, #100	; 0x64
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	3332      	adds	r3, #50	; 0x32
 8005dc8:	4a29      	ldr	r2, [pc, #164]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dd6:	441e      	add	r6, r3
 8005dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f04f 0100 	mov.w	r1, #0
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	1894      	adds	r4, r2, r2
 8005de8:	63bc      	str	r4, [r7, #56]	; 0x38
 8005dea:	415b      	adcs	r3, r3
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005df2:	1812      	adds	r2, r2, r0
 8005df4:	eb41 0303 	adc.w	r3, r1, r3
 8005df8:	f04f 0400 	mov.w	r4, #0
 8005dfc:	f04f 0500 	mov.w	r5, #0
 8005e00:	00dd      	lsls	r5, r3, #3
 8005e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e06:	00d4      	lsls	r4, r2, #3
 8005e08:	4622      	mov	r2, r4
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	1814      	adds	r4, r2, r0
 8005e0e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005e12:	414b      	adcs	r3, r1
 8005e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	6339      	str	r1, [r7, #48]	; 0x30
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e30:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e34:	f7fa f9da 	bl	80001ec <__aeabi_uldivmod>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2164      	movs	r1, #100	; 0x64
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	3332      	adds	r3, #50	; 0x32
 8005e50:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <UART_SetConfig+0x3dc>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	f003 0207 	and.w	r2, r3, #7
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4432      	add	r2, r6
 8005e64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e66:	e1a6      	b.n	80061b6 <UART_SetConfig+0x722>
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	40011400 	.word	0x40011400
 8005e70:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4bd1      	ldr	r3, [pc, #836]	; (80061c0 <UART_SetConfig+0x72c>)
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d006      	beq.n	8005e8e <UART_SetConfig+0x3fa>
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4bcf      	ldr	r3, [pc, #828]	; (80061c4 <UART_SetConfig+0x730>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f040 80ca 	bne.w	8006022 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e8e:	f7fe f9e1 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8005e92:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e9a:	461c      	mov	r4, r3
 8005e9c:	f04f 0500 	mov.w	r5, #0
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	1891      	adds	r1, r2, r2
 8005ea6:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ea8:	415b      	adcs	r3, r3
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eb0:	1912      	adds	r2, r2, r4
 8005eb2:	eb45 0303 	adc.w	r3, r5, r3
 8005eb6:	f04f 0000 	mov.w	r0, #0
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	00d9      	lsls	r1, r3, #3
 8005ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec4:	00d0      	lsls	r0, r2, #3
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	eb12 0a04 	adds.w	sl, r2, r4
 8005ece:	eb43 0b05 	adc.w	fp, r3, r5
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	008b      	lsls	r3, r1, #2
 8005ee8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005eec:	0082      	lsls	r2, r0, #2
 8005eee:	4650      	mov	r0, sl
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	f7fa f97b 	bl	80001ec <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4bb3      	ldr	r3, [pc, #716]	; (80061c8 <UART_SetConfig+0x734>)
 8005efc:	fba3 2302 	umull	r2, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	011e      	lsls	r6, r3, #4
 8005f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	1894      	adds	r4, r2, r2
 8005f14:	623c      	str	r4, [r7, #32]
 8005f16:	415b      	adcs	r3, r3
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f1e:	1812      	adds	r2, r2, r0
 8005f20:	eb41 0303 	adc.w	r3, r1, r3
 8005f24:	f04f 0400 	mov.w	r4, #0
 8005f28:	f04f 0500 	mov.w	r5, #0
 8005f2c:	00dd      	lsls	r5, r3, #3
 8005f2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f32:	00d4      	lsls	r4, r2, #3
 8005f34:	4622      	mov	r2, r4
 8005f36:	462b      	mov	r3, r5
 8005f38:	1814      	adds	r4, r2, r0
 8005f3a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005f3e:	414b      	adcs	r3, r1
 8005f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f04f 0100 	mov.w	r1, #0
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	008b      	lsls	r3, r1, #2
 8005f5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f5e:	0082      	lsls	r2, r0, #2
 8005f60:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005f64:	f7fa f942 	bl	80001ec <__aeabi_uldivmod>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4b96      	ldr	r3, [pc, #600]	; (80061c8 <UART_SetConfig+0x734>)
 8005f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2164      	movs	r1, #100	; 0x64
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	3332      	adds	r3, #50	; 0x32
 8005f80:	4a91      	ldr	r2, [pc, #580]	; (80061c8 <UART_SetConfig+0x734>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8c:	441e      	add	r6, r3
 8005f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	1894      	adds	r4, r2, r2
 8005f9e:	61bc      	str	r4, [r7, #24]
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa8:	1812      	adds	r2, r2, r0
 8005faa:	eb41 0303 	adc.w	r3, r1, r3
 8005fae:	f04f 0400 	mov.w	r4, #0
 8005fb2:	f04f 0500 	mov.w	r5, #0
 8005fb6:	00dd      	lsls	r5, r3, #3
 8005fb8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fbc:	00d4      	lsls	r4, r2, #3
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	1814      	adds	r4, r2, r0
 8005fc4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005fc8:	414b      	adcs	r3, r1
 8005fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	008b      	lsls	r3, r1, #2
 8005fe4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fe8:	0082      	lsls	r2, r0, #2
 8005fea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005fee:	f7fa f8fd 	bl	80001ec <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4b74      	ldr	r3, [pc, #464]	; (80061c8 <UART_SetConfig+0x734>)
 8005ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	2164      	movs	r1, #100	; 0x64
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	3332      	adds	r3, #50	; 0x32
 800600a:	4a6f      	ldr	r2, [pc, #444]	; (80061c8 <UART_SetConfig+0x734>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4432      	add	r2, r6
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	e0c9      	b.n	80061b6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006022:	f7fe f903 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8006026:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800602a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800602e:	461c      	mov	r4, r3
 8006030:	f04f 0500 	mov.w	r5, #0
 8006034:	4622      	mov	r2, r4
 8006036:	462b      	mov	r3, r5
 8006038:	1891      	adds	r1, r2, r2
 800603a:	6139      	str	r1, [r7, #16]
 800603c:	415b      	adcs	r3, r3
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006044:	1912      	adds	r2, r2, r4
 8006046:	eb45 0303 	adc.w	r3, r5, r3
 800604a:	f04f 0000 	mov.w	r0, #0
 800604e:	f04f 0100 	mov.w	r1, #0
 8006052:	00d9      	lsls	r1, r3, #3
 8006054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006058:	00d0      	lsls	r0, r2, #3
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	eb12 0804 	adds.w	r8, r2, r4
 8006062:	eb43 0905 	adc.w	r9, r3, r5
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4618      	mov	r0, r3
 800606e:	f04f 0100 	mov.w	r1, #0
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	008b      	lsls	r3, r1, #2
 800607c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006080:	0082      	lsls	r2, r0, #2
 8006082:	4640      	mov	r0, r8
 8006084:	4649      	mov	r1, r9
 8006086:	f7fa f8b1 	bl	80001ec <__aeabi_uldivmod>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4b4e      	ldr	r3, [pc, #312]	; (80061c8 <UART_SetConfig+0x734>)
 8006090:	fba3 2302 	umull	r2, r3, r3, r2
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	011e      	lsls	r6, r3, #4
 8006098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800609c:	4618      	mov	r0, r3
 800609e:	f04f 0100 	mov.w	r1, #0
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	1894      	adds	r4, r2, r2
 80060a8:	60bc      	str	r4, [r7, #8]
 80060aa:	415b      	adcs	r3, r3
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060b2:	1812      	adds	r2, r2, r0
 80060b4:	eb41 0303 	adc.w	r3, r1, r3
 80060b8:	f04f 0400 	mov.w	r4, #0
 80060bc:	f04f 0500 	mov.w	r5, #0
 80060c0:	00dd      	lsls	r5, r3, #3
 80060c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060c6:	00d4      	lsls	r4, r2, #3
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	1814      	adds	r4, r2, r0
 80060ce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80060d2:	414b      	adcs	r3, r1
 80060d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	008b      	lsls	r3, r1, #2
 80060ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060f2:	0082      	lsls	r2, r0, #2
 80060f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060f8:	f7fa f878 	bl	80001ec <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <UART_SetConfig+0x734>)
 8006102:	fba3 1302 	umull	r1, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2164      	movs	r1, #100	; 0x64
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	3332      	adds	r3, #50	; 0x32
 8006114:	4a2c      	ldr	r2, [pc, #176]	; (80061c8 <UART_SetConfig+0x734>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006120:	441e      	add	r6, r3
 8006122:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006126:	4618      	mov	r0, r3
 8006128:	f04f 0100 	mov.w	r1, #0
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	1894      	adds	r4, r2, r2
 8006132:	603c      	str	r4, [r7, #0]
 8006134:	415b      	adcs	r3, r3
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	1812      	adds	r2, r2, r0
 800613e:	eb41 0303 	adc.w	r3, r1, r3
 8006142:	f04f 0400 	mov.w	r4, #0
 8006146:	f04f 0500 	mov.w	r5, #0
 800614a:	00dd      	lsls	r5, r3, #3
 800614c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006150:	00d4      	lsls	r4, r2, #3
 8006152:	4622      	mov	r2, r4
 8006154:	462b      	mov	r3, r5
 8006156:	1814      	adds	r4, r2, r0
 8006158:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800615c:	414b      	adcs	r3, r1
 800615e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	4618      	mov	r0, r3
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800617c:	0082      	lsls	r2, r0, #2
 800617e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006182:	f7fa f833 	bl	80001ec <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <UART_SetConfig+0x734>)
 800618c:	fba3 1302 	umull	r1, r3, r3, r2
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	2164      	movs	r1, #100	; 0x64
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	3332      	adds	r3, #50	; 0x32
 800619e:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <UART_SetConfig+0x734>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	f003 020f 	and.w	r2, r3, #15
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4432      	add	r2, r6
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	e7ff      	b.n	80061b6 <UART_SetConfig+0x722>
 80061b6:	bf00      	nop
 80061b8:	37f4      	adds	r7, #244	; 0xf4
 80061ba:	46bd      	mov	sp, r7
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	40011000 	.word	0x40011000
 80061c4:	40011400 	.word	0x40011400
 80061c8:	51eb851f 	.word	0x51eb851f

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4d0d      	ldr	r5, [pc, #52]	; (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d2:	1b64      	subs	r4, r4, r5
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2600      	movs	r6, #0
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4d0b      	ldr	r5, [pc, #44]	; (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	; (8006210 <__libc_init_array+0x44>)
 80061e0:	f000 f820 	bl	8006224 <_init>
 80061e4:	1b64      	subs	r4, r4, r5
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2600      	movs	r6, #0
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08006264 	.word	0x08006264
 8006208:	08006264 	.word	0x08006264
 800620c:	08006264 	.word	0x08006264
 8006210:	08006268 	.word	0x08006268

08006214 <memset>:
 8006214:	4402      	add	r2, r0
 8006216:	4603      	mov	r3, r0
 8006218:	4293      	cmp	r3, r2
 800621a:	d100      	bne.n	800621e <memset+0xa>
 800621c:	4770      	bx	lr
 800621e:	f803 1b01 	strb.w	r1, [r3], #1
 8006222:	e7f9      	b.n	8006218 <memset+0x4>

08006224 <_init>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr

08006230 <_fini>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr
