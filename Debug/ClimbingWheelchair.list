
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b8  080059b8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059bc  080059bc  000159bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080059c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000030  080059ec  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  080059ec  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec1  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021e5  00000000  00000000  00030f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  00033108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024135  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca9e  00000000  00000000  000593ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000debe9  00000000  00000000  00065e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144a34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b20  00000000  00000000  00144ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000030 	.word	0x20000030
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005978 	.word	0x08005978

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000034 	.word	0x20000034
 80001ec:	08005978 	.word	0x08005978

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8000df4:	2200      	movs	r2, #0
 8000df6:	2110      	movs	r1, #16
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <ADC_Read+0x30>)
 8000dfa:	f001 fef7 	bl	8002bec <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8000dfe:	2302      	movs	r3, #2
 8000e00:	2208      	movs	r2, #8
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	4806      	ldr	r0, [pc, #24]	; (8000e20 <ADC_Read+0x34>)
 8000e06:	f002 fdeb 	bl	80039e0 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <ADC_Read+0x30>)
 8000e10:	f001 feec 	bl	8002bec <HAL_GPIO_WritePin>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000054 	.word	0x20000054

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2a:	f001 f88b 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2e:	f000 f86b 	bl	8000f08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8000e32:	f002 fd3d 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 8000e36:	4602      	mov	r2, r0
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <main+0xd4>)
 8000e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8000e3e:	099b      	lsrs	r3, r3, #6
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fa18 	bl	8002276 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e46:	2004      	movs	r0, #4
 8000e48:	f001 fa22 	bl	8002290 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	f001 f9e5 	bl	8002222 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e58:	f000 fb66 	bl	8001528 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e5c:	f000 fb44 	bl	80014e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e60:	f000 f8c2 	bl	8000fe8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e64:	f000 f900 	bl	8001068 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e68:	f000 f936 	bl	80010d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e6c:	f000 f96a 	bl	8001144 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e70:	f000 fa14 	bl	800129c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000e74:	f000 fb0e 	bl	8001494 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000e78:	f000 fa8a 	bl	8001390 <MX_TIM3_Init>
////  encoder_Init();
////  DWT_Init();
//  while(MPU6050_Init(&hi2c1)==1);

//  //Start wheel pwm pin
  HAL_TIM_Base_Start(&MOTOR_TIM);
 8000e7c:	481f      	ldr	r0, [pc, #124]	; (8000efc <main+0xd8>)
 8000e7e:	f003 f996 	bl	80041ae <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8000e82:	2100      	movs	r1, #0
 8000e84:	481d      	ldr	r0, [pc, #116]	; (8000efc <main+0xd8>)
 8000e86:	f003 f9eb 	bl	8004260 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <main+0xd8>)
 8000e8e:	f003 f9e7 	bl	8004260 <HAL_TIM_PWM_Start>
  MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <main+0xd8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
    	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <main+0xd8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8000ea6:	f001 f8b3 	bl	8002010 <HAL_GetTick>
 8000eaa:	6078      	str	r0, [r7, #4]
  while (1)
  {
      count++;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <main+0xdc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <main+0xdc>)
 8000eb4:	6013      	str	r3, [r2, #0]
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <main+0xe0>)
 8000ebc:	f001 fe96 	bl	8002bec <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ec4:	f001 f8b0 	bl	8002028 <HAL_Delay>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2108      	movs	r1, #8
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <main+0xe0>)
 8000ece:	f001 fe8d 	bl	8002bec <HAL_GPIO_WritePin>
////	  HAL_Delay (50);
//      }
//      prev_time = HAL_GetTick();
//      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
  	//Send speed commands to motor
  	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL += 50;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <main+0xd8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <main+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3232      	adds	r2, #50	; 0x32
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
  	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL += 50;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <main+0xd8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <main+0xd8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3232      	adds	r2, #50	; 0x32
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(500);
 8000eee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef2:	f001 f899 	bl	8002028 <HAL_Delay>
      count++;
 8000ef6:	e7d9      	b.n	8000eac <main+0x88>
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	200004fc 	.word	0x200004fc
 8000f00:	2000004c 	.word	0x2000004c
 8000f04:	40020400 	.word	0x40020400

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	; 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fd26 	bl	8005968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <SystemClock_Config+0xd8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <SystemClock_Config+0xd8>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <SystemClock_Config+0xd8>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <SystemClock_Config+0xdc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <SystemClock_Config+0xdc>)
 8000f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <SystemClock_Config+0xdc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f7c:	23b4      	movs	r3, #180	; 0xb4
 8000f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 f863 	bl	8003058 <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f98:	f000 fcf0 	bl	800197c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f9c:	f002 f80c 	bl	8002fb8 <HAL_PWREx_EnableOverDrive>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fa6:	f000 fce9 	bl	800197c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2105      	movs	r1, #5
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fab5 	bl	8003538 <HAL_RCC_ClockConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fd4:	f000 fcd2 	bl	800197c <Error_Handler>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3750      	adds	r7, #80	; 0x50
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_I2C1_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_I2C1_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_I2C1_Init+0x74>)
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_I2C1_Init+0x7c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_I2C1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_I2C1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_I2C1_Init+0x74>)
 8001006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_I2C1_Init+0x74>)
 8001026:	f001 fe13 	bl	8002c50 <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001030:	f000 fca4 	bl	800197c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_I2C1_Init+0x74>)
 8001038:	f001 ff42 	bl	8002ec0 <HAL_I2CEx_ConfigAnalogFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001042:	f000 fc9b 	bl	800197c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_I2C1_Init+0x74>)
 800104a:	f001 ff75 	bl	8002f38 <HAL_I2CEx_ConfigDigitalFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 fc92 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000448 	.word	0x20000448
 8001060:	40005400 	.word	0x40005400
 8001064:	00061a80 	.word	0x00061a80

08001068 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_SPI1_Init+0x68>)
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <MX_SPI1_Init+0x6c>)
 8001070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_SPI1_Init+0x68>)
 8001074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_SPI1_Init+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_SPI1_Init+0x68>)
 8001082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001086:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_SPI1_Init+0x68>)
 800108a:	2202      	movs	r2, #2
 800108c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_SPI1_Init+0x68>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_SPI1_Init+0x68>)
 8001096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_SPI1_Init+0x68>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_SPI1_Init+0x68>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_SPI1_Init+0x68>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_SPI1_Init+0x68>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_SPI1_Init+0x68>)
 80010b6:	220a      	movs	r2, #10
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_SPI1_Init+0x68>)
 80010bc:	f002 fc2c 	bl	8003918 <HAL_SPI_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80010c6:	f000 fc59 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000054 	.word	0x20000054
 80010d4:	40013000 	.word	0x40013000

080010d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_SPI2_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <MX_SPI2_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI2_Init+0x64>)
 80010e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI2_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_SPI2_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI2_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI2_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI2_Init+0x64>)
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI2_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_SPI2_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI2_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_SPI2_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI2_Init+0x64>)
 8001124:	220a      	movs	r2, #10
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_SPI2_Init+0x64>)
 800112a:	f002 fbf5 	bl	8003918 <HAL_SPI_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001134:	f000 fc22 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000200 	.word	0x20000200
 8001140:	40003800 	.word	0x40003800

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	; 0x58
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2220      	movs	r2, #32
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fbf3 	bl	8005968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <MX_TIM1_Init+0x150>)
 8001184:	4a44      	ldr	r2, [pc, #272]	; (8001298 <MX_TIM1_Init+0x154>)
 8001186:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 8001188:	4b42      	ldr	r3, [pc, #264]	; (8001294 <MX_TIM1_Init+0x150>)
 800118a:	22b4      	movs	r2, #180	; 0xb4
 800118c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <MX_TIM1_Init+0x150>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <MX_TIM1_Init+0x150>)
 8001196:	2264      	movs	r2, #100	; 0x64
 8001198:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <MX_TIM1_Init+0x150>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <MX_TIM1_Init+0x150>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <MX_TIM1_Init+0x150>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ac:	4839      	ldr	r0, [pc, #228]	; (8001294 <MX_TIM1_Init+0x150>)
 80011ae:	f002 ffd3 	bl	8004158 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011b8:	f000 fbe0 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	4619      	mov	r1, r3
 80011c8:	4832      	ldr	r0, [pc, #200]	; (8001294 <MX_TIM1_Init+0x150>)
 80011ca:	f003 fa1f 	bl	800460c <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80011d4:	f000 fbd2 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d8:	482e      	ldr	r0, [pc, #184]	; (8001294 <MX_TIM1_Init+0x150>)
 80011da:	f003 f80c 	bl	80041f6 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011e4:	f000 fbca 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f4:	4619      	mov	r1, r3
 80011f6:	4827      	ldr	r0, [pc, #156]	; (8001294 <MX_TIM1_Init+0x150>)
 80011f8:	f003 fefa 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001202:	f000 fbbb 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	; 0x60
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_TIM1_Init+0x150>)
 800122c:	f003 f928 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001236:	f000 fba1 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <MX_TIM1_Init+0x150>)
 8001244:	f003 f91c 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800124e:	f000 fb95 	bl	800197c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM1_Init+0x150>)
 8001276:	f003 ff37 	bl	80050e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001280:	f000 fb7c 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM1_Init+0x150>)
 8001286:	f000 fcff 	bl	8001c88 <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3758      	adds	r7, #88	; 0x58
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000628 	.word	0x20000628
 8001298:	40010000 	.word	0x40010000

0800129c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <MX_TIM2_Init+0xf0>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <MX_TIM2_Init+0xf0>)
 80012d0:	22b4      	movs	r2, #180	; 0xb4
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <MX_TIM2_Init+0xf0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_TIM2_Init+0xf0>)
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <MX_TIM2_Init+0xf0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_TIM2_Init+0xf0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ee:	4827      	ldr	r0, [pc, #156]	; (800138c <MX_TIM2_Init+0xf0>)
 80012f0:	f002 ff32 	bl	8004158 <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80012fa:	f000 fb3f 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4619      	mov	r1, r3
 800130a:	4820      	ldr	r0, [pc, #128]	; (800138c <MX_TIM2_Init+0xf0>)
 800130c:	f003 f97e 	bl	800460c <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001316:	f000 fb31 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800131a:	481c      	ldr	r0, [pc, #112]	; (800138c <MX_TIM2_Init+0xf0>)
 800131c:	f002 ffde 	bl	80042dc <HAL_TIM_IC_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001326:	f000 fb29 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_TIM2_Init+0xf0>)
 800133a:	f003 fe59 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001344:	f000 fb1a 	bl	800197c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800134c:	2301      	movs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	2208      	movs	r2, #8
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <MX_TIM2_Init+0xf0>)
 8001360:	f002 fff1 	bl	8004346 <HAL_TIM_IC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800136a:	f000 fb07 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	220c      	movs	r2, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM2_Init+0xf0>)
 8001376:	f002 ffe6 	bl	8004346 <HAL_TIM_IC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001380:	f000 fafc 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000718 	.word	0x20000718

08001390 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <MX_TIM3_Init+0xfc>)
 80013c2:	4a33      	ldr	r2, [pc, #204]	; (8001490 <MX_TIM3_Init+0x100>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <MX_TIM3_Init+0xfc>)
 80013c8:	22b3      	movs	r2, #179	; 0xb3
 80013ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <MX_TIM3_Init+0xfc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <MX_TIM3_Init+0xfc>)
 80013d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <MX_TIM3_Init+0xfc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_TIM3_Init+0xfc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e6:	4829      	ldr	r0, [pc, #164]	; (800148c <MX_TIM3_Init+0xfc>)
 80013e8:	f002 feb6 	bl	8004158 <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013f2:	f000 fac3 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001400:	4619      	mov	r1, r3
 8001402:	4822      	ldr	r0, [pc, #136]	; (800148c <MX_TIM3_Init+0xfc>)
 8001404:	f003 f902 	bl	800460c <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800140e:	f000 fab5 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <MX_TIM3_Init+0xfc>)
 8001414:	f002 feef 	bl	80041f6 <HAL_TIM_PWM_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800141e:	f000 faad 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	4619      	mov	r1, r3
 8001430:	4816      	ldr	r0, [pc, #88]	; (800148c <MX_TIM3_Init+0xfc>)
 8001432:	f003 fddd 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800143c:	f000 fa9e 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM3_Init+0xfc>)
 8001458:	f003 f812 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001462:	f000 fa8b 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2204      	movs	r2, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_TIM3_Init+0xfc>)
 800146e:	f003 f807 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001478:	f000 fa80 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_TIM3_Init+0xfc>)
 800147e:	f000 fc03 	bl	8001c88 <HAL_TIM_MspPostInit>

}
 8001482:	bf00      	nop
 8001484:	3738      	adds	r7, #56	; 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200004fc 	.word	0x200004fc
 8001490:	40000400 	.word	0x40000400

08001494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_USART3_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART3_UART_Init+0x4c>)
 80014cc:	f003 fe5e 	bl	800518c <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f000 fa51 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000408 	.word	0x20000408
 80014e4:	40004800 	.word	0x40004800

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_DMA_Init+0x3c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <MX_DMA_Init+0x3c>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_DMA_Init+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200c      	movs	r0, #12
 8001510:	f000 fe87 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001514:	200c      	movs	r0, #12
 8001516:	f000 fea0 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a6c      	ldr	r2, [pc, #432]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a50      	ldr	r2, [pc, #320]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a49      	ldr	r2, [pc, #292]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <MX_GPIO_Init+0x1d0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 80015e6:	2200      	movs	r2, #0
 80015e8:	213f      	movs	r1, #63	; 0x3f
 80015ea:	4844      	ldr	r0, [pc, #272]	; (80016fc <MX_GPIO_Init+0x1d4>)
 80015ec:	f001 fafe 	bl	8002bec <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2110      	movs	r1, #16
 80015f4:	4842      	ldr	r0, [pc, #264]	; (8001700 <MX_GPIO_Init+0x1d8>)
 80015f6:	f001 faf9 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80015fa:	2200      	movs	r2, #0
 80015fc:	219b      	movs	r1, #155	; 0x9b
 80015fe:	4841      	ldr	r0, [pc, #260]	; (8001704 <MX_GPIO_Init+0x1dc>)
 8001600:	f001 faf4 	bl	8002bec <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 800160a:	483f      	ldr	r0, [pc, #252]	; (8001708 <MX_GPIO_Init+0x1e0>)
 800160c:	f001 faee 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_ALM_Pin|HubM_IO_SON_Pin
 8001610:	2200      	movs	r2, #0
 8001612:	f64f 4108 	movw	r1, #64520	; 0xfc08
 8001616:	483d      	ldr	r0, [pc, #244]	; (800170c <MX_GPIO_Init+0x1e4>)
 8001618:	f001 fae8 	bl	8002bec <HAL_GPIO_WritePin>
                          |HubM_IO_NOT_Pin|HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button3_Pin LimitSW1_Pin LimitSW2_Pin LimitSW3_Pin
                           LimitSW4_Pin ClimbM_IO_ALM2_Pin ClimbM_IO_ALM1_Pin Button1_Pin
                           Button2_Pin */
  GPIO_InitStruct.Pin = Button3_Pin|LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin
 800161c:	f248 137f 	movw	r3, #33151	; 0x817f
 8001620:	61fb      	str	r3, [r7, #28]
                          |LimitSW4_Pin|ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin|Button1_Pin
                          |Button2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4835      	ldr	r0, [pc, #212]	; (8001708 <MX_GPIO_Init+0x1e0>)
 8001632:	f001 f931 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_RANGE_Pin AD_OS2_Pin AD_OS1_Pin AD_OS0_Pin
                           AD_RST_Pin AD_CV_Pin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001636:	233f      	movs	r3, #63	; 0x3f
 8001638:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163e:	2301      	movs	r3, #1
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	482b      	ldr	r0, [pc, #172]	; (80016fc <MX_GPIO_Init+0x1d4>)
 800164e:	f001 f923 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001652:	2310      	movs	r3, #16
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <MX_GPIO_Init+0x1d8>)
 800166a:	f001 f915 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD_BUSY_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_GPIO_Init+0x1e8>)
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	481f      	ldr	r0, [pc, #124]	; (8001700 <MX_GPIO_Init+0x1d8>)
 8001682:	f001 f909 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : ClimbM_IO_FR2_Pin ClimbM_IO_EN2_Pin LED1_Pin LED2_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001686:	239b      	movs	r3, #155	; 0x9b
 8001688:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168e:	2301      	movs	r3, #1
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4819      	ldr	r0, [pc, #100]	; (8001704 <MX_GPIO_Init+0x1dc>)
 800169e:	f001 f8fb 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : ClimbM_IO_BRK2_Pin ClimbM_IO_FR1_Pin ClimbM_IO_EN1_Pin ClimbM_IO_BRK1_Pin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 80016a2:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_GPIO_Init+0x1e0>)
 80016bc:	f001 f8ec 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : CUI_SPI2_CS1_Pin CUI_SPI2_CS2_Pin HubM_IO_ALM_Pin HubM_IO_SON_Pin
                           HubM_IO_NOT_Pin HubM_IO_POT_Pin Brake_Wheel_Pin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_ALM_Pin|HubM_IO_SON_Pin
 80016c0:	f64f 4308 	movw	r3, #64520	; 0xfc08
 80016c4:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_NOT_Pin|HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <MX_GPIO_Init+0x1e4>)
 80016da:	f001 f8dd 	bl	8002898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2017      	movs	r0, #23
 80016e4:	f000 fd9d 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016e8:	2017      	movs	r0, #23
 80016ea:	f000 fdb6 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 80016ee:	bf00      	nop
 80016f0:	3730      	adds	r7, #48	; 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40021000 	.word	0x40021000
 800170c:	40020c00 	.word	0x40020c00
 8001710:	10210000 	.word	0x10210000
 8001714:	00000000 	.word	0x00000000

08001718 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	d000      	beq.n	800172a <HAL_GPIO_EXTI_Callback+0x12>

    }

      break;
    default:
      break;
 8001728:	e10c      	b.n	8001944 <HAL_GPIO_EXTI_Callback+0x22c>
      ADC_Read(&adc_rawData[0]);
 800172a:	488d      	ldr	r0, [pc, #564]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 800172c:	f7ff fb5e 	bl	8000dec <ADC_Read>
      adc_rawData[0] = adc_rawData[0] * (1 - ADC_EXPONENTIAL_ALPHA) + adc_rawData_prev[0] * ADC_EXPONENTIAL_ALPHA;
 8001730:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe feac 	bl	8000494 <__aeabi_i2d>
 800173c:	a384      	add	r3, pc, #528	; (adr r3, 8001950 <HAL_GPIO_EXTI_Callback+0x238>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff11 	bl	8000568 <__aeabi_dmul>
 8001746:	4603      	mov	r3, r0
 8001748:	460c      	mov	r4, r1
 800174a:	4625      	mov	r5, r4
 800174c:	461c      	mov	r4, r3
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe9d 	bl	8000494 <__aeabi_i2d>
 800175a:	a37f      	add	r3, pc, #508	; (adr r3, 8001958 <HAL_GPIO_EXTI_Callback+0x240>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ff02 	bl	8000568 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fd46 	bl	80001fc <__adddf3>
 8001770:	4603      	mov	r3, r0
 8001772:	460c      	mov	r4, r1
 8001774:	4618      	mov	r0, r3
 8001776:	4621      	mov	r1, r4
 8001778:	f7ff f990 	bl	8000a9c <__aeabi_d2iz>
 800177c:	4603      	mov	r3, r0
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b77      	ldr	r3, [pc, #476]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 8001782:	801a      	strh	r2, [r3, #0]
      adc_rawData[1] = adc_rawData[1] * (1 - ADC_EXPONENTIAL_ALPHA) + adc_rawData_prev[1] * ADC_EXPONENTIAL_ALPHA;
 8001784:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 8001786:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe82 	bl	8000494 <__aeabi_i2d>
 8001790:	a36f      	add	r3, pc, #444	; (adr r3, 8001950 <HAL_GPIO_EXTI_Callback+0x238>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fee7 	bl	8000568 <__aeabi_dmul>
 800179a:	4603      	mov	r3, r0
 800179c:	460c      	mov	r4, r1
 800179e:	4625      	mov	r5, r4
 80017a0:	461c      	mov	r4, r3
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_GPIO_EXTI_Callback+0x24c>)
 80017a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fe73 	bl	8000494 <__aeabi_i2d>
 80017ae:	a36a      	add	r3, pc, #424	; (adr r3, 8001958 <HAL_GPIO_EXTI_Callback+0x240>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe fed8 	bl	8000568 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fd1c 	bl	80001fc <__adddf3>
 80017c4:	4603      	mov	r3, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	4618      	mov	r0, r3
 80017ca:	4621      	mov	r1, r4
 80017cc:	f7ff f966 	bl	8000a9c <__aeabi_d2iz>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b62      	ldr	r3, [pc, #392]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 80017d6:	805a      	strh	r2, [r3, #2]
      adc_rawData_prev[0] = adc_rawData[0];
 80017d8:	4b61      	ldr	r3, [pc, #388]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 80017da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <HAL_GPIO_EXTI_Callback+0x24c>)
 80017e0:	801a      	strh	r2, [r3, #0]
      adc_rawData_prev[1] = adc_rawData[1];
 80017e2:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 80017e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_GPIO_EXTI_Callback+0x24c>)
 80017ea:	805a      	strh	r2, [r3, #2]
      joystick.x = (double) adc_rawData[0] / MAX_JOYSTICK_X;
 80017ec:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe4e 	bl	8000494 <__aeabi_i2d>
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <HAL_GPIO_EXTI_Callback+0x250>)
 80017fe:	f7fe ffdd 	bl	80007bc <__aeabi_ddiv>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4a59      	ldr	r2, [pc, #356]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001808:	e9c2 3400 	strd	r3, r4, [r2]
      joystick.y = (double) adc_rawData[1] / MAX_JOYSTICK_Y;
 800180c:	4b54      	ldr	r3, [pc, #336]	; (8001960 <HAL_GPIO_EXTI_Callback+0x248>)
 800180e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe3e 	bl	8000494 <__aeabi_i2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b52      	ldr	r3, [pc, #328]	; (8001968 <HAL_GPIO_EXTI_Callback+0x250>)
 800181e:	f7fe ffcd 	bl	80007bc <__aeabi_ddiv>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001828:	e9c2 3402 	strd	r3, r4, [r2, #8]
      joystick.x = MAX(-1,MIN(joystick.x, 1));
 800182c:	4b4f      	ldr	r3, [pc, #316]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 800182e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001832:	2301      	movs	r3, #1
 8001834:	461c      	mov	r4, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_GPIO_EXTI_Callback+0x258>)
 800183c:	f7ff f906 	bl	8000a4c <__aeabi_dcmplt>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_GPIO_EXTI_Callback+0x132>
 8001846:	2300      	movs	r3, #0
 8001848:	461c      	mov	r4, r3
 800184a:	b2e3      	uxtb	r3, r4
 800184c:	f083 0301 	eor.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d114      	bne.n	8001880 <HAL_GPIO_EXTI_Callback+0x168>
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185c:	2301      	movs	r3, #1
 800185e:	461c      	mov	r4, r3
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b43      	ldr	r3, [pc, #268]	; (8001974 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001866:	f7ff f8f1 	bl	8000a4c <__aeabi_dcmplt>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_EXTI_Callback+0x15c>
 8001870:	2300      	movs	r3, #0
 8001872:	461c      	mov	r4, r3
 8001874:	b2e3      	uxtb	r3, r4
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d012      	beq.n	80018a6 <HAL_GPIO_EXTI_Callback+0x18e>
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_GPIO_EXTI_Callback+0x258>)
 800188c:	f7ff f8de 	bl	8000a4c <__aeabi_dcmplt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_EXTI_Callback+0x186>
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_EXTI_Callback+0x194>
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	4c33      	ldr	r4, [pc, #204]	; (8001970 <HAL_GPIO_EXTI_Callback+0x258>)
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_EXTI_Callback+0x194>
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	4c32      	ldr	r4, [pc, #200]	; (8001974 <HAL_GPIO_EXTI_Callback+0x25c>)
 80018ac:	4a2f      	ldr	r2, [pc, #188]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 80018ae:	e9c2 3400 	strd	r3, r4, [r2]
      joystick.y = MAX(-1,MIN(joystick.y, 1));
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 80018b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018b8:	2301      	movs	r3, #1
 80018ba:	461c      	mov	r4, r3
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_GPIO_EXTI_Callback+0x258>)
 80018c2:	f7ff f8c3 	bl	8000a4c <__aeabi_dcmplt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_EXTI_Callback+0x1b8>
 80018cc:	2300      	movs	r3, #0
 80018ce:	461c      	mov	r4, r3
 80018d0:	b2e3      	uxtb	r3, r4
 80018d2:	f083 0301 	eor.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d114      	bne.n	8001906 <HAL_GPIO_EXTI_Callback+0x1ee>
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 80018de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018e2:	2301      	movs	r3, #1
 80018e4:	461c      	mov	r4, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_GPIO_EXTI_Callback+0x25c>)
 80018ec:	f7ff f8ae 	bl	8000a4c <__aeabi_dcmplt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_EXTI_Callback+0x1e2>
 80018f6:	2300      	movs	r3, #0
 80018f8:	461c      	mov	r4, r3
 80018fa:	b2e3      	uxtb	r3, r4
 80018fc:	f083 0301 	eor.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d012      	beq.n	800192c <HAL_GPIO_EXTI_Callback+0x214>
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001908:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_GPIO_EXTI_Callback+0x258>)
 8001912:	f7ff f89b 	bl	8000a4c <__aeabi_dcmplt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_EXTI_Callback+0x20c>
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 800191e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001922:	e006      	b.n	8001932 <HAL_GPIO_EXTI_Callback+0x21a>
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	4c11      	ldr	r4, [pc, #68]	; (8001970 <HAL_GPIO_EXTI_Callback+0x258>)
 800192a:	e002      	b.n	8001932 <HAL_GPIO_EXTI_Callback+0x21a>
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	4c10      	ldr	r4, [pc, #64]	; (8001974 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_GPIO_EXTI_Callback+0x254>)
 8001934:	e9c2 3402 	strd	r3, r4, [r2, #8]
      count1++;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_GPIO_EXTI_Callback+0x260>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_GPIO_EXTI_Callback+0x260>)
 8001940:	6013      	str	r3, [r2, #0]
      break;
 8001942:	bf00      	nop
  }

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	33333334 	.word	0x33333334
 8001954:	3fc33333 	.word	0x3fc33333
 8001958:	33333333 	.word	0x33333333
 800195c:	3feb3333 	.word	0x3feb3333
 8001960:	20000548 	.word	0x20000548
 8001964:	20000558 	.word	0x20000558
 8001968:	40590000 	.word	0x40590000
 800196c:	20000000 	.word	0x20000000
 8001970:	3ff00000 	.word	0x3ff00000
 8001974:	bff00000 	.word	0xbff00000
 8001978:	20000050 	.word	0x20000050

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_MspInit+0x4c>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_I2C_MspInit+0x84>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12c      	bne.n	8001a58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001a1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a20:	2312      	movs	r3, #18
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <HAL_I2C_MspInit+0x8c>)
 8001a38:	f000 ff2e 	bl	8002898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_I2C_MspInit+0x88>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005400 	.word	0x40005400
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020400 	.word	0x40020400

08001a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a41      	ldr	r2, [pc, #260]	; (8001b90 <HAL_SPI_MspInit+0x124>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d14a      	bne.n	8001b24 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a3f      	ldr	r2, [pc, #252]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af2:	2305      	movs	r3, #5
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4826      	ldr	r0, [pc, #152]	; (8001b98 <HAL_SPI_MspInit+0x12c>)
 8001afe:	f000 fecb 	bl	8002898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b02:	2320      	movs	r3, #32
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b12:	2305      	movs	r3, #5
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481f      	ldr	r0, [pc, #124]	; (8001b9c <HAL_SPI_MspInit+0x130>)
 8001b1e:	f000 febb 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b22:	e031      	b.n	8001b88 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_SPI_MspInit+0x134>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d12c      	bne.n	8001b88 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_SPI_MspInit+0x128>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001b66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b78:	2305      	movs	r3, #5
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <HAL_SPI_MspInit+0x130>)
 8001b84:	f000 fe88 	bl	8002898 <HAL_GPIO_Init>
}
 8001b88:	bf00      	nop
 8001b8a:	3730      	adds	r7, #48	; 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40013000 	.word	0x40013000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40003800 	.word	0x40003800

08001ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_TIM_Base_MspInit+0xd4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10e      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001be2:	e045      	b.n	8001c70 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d12d      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a1a      	ldr	r2, [pc, #104]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8001c26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	480f      	ldr	r0, [pc, #60]	; (8001c80 <HAL_TIM_Base_MspInit+0xdc>)
 8001c44:	f000 fe28 	bl	8002898 <HAL_GPIO_Init>
}
 8001c48:	e012      	b.n	8001c70 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_TIM_Base_MspInit+0xe0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d10d      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6413      	str	r3, [r2, #64]	; 0x40
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_TIM_Base_MspInit+0xd8>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3730      	adds	r7, #48	; 0x30
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40000400 	.word	0x40000400

08001c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a24      	ldr	r2, [pc, #144]	; (8001d38 <HAL_TIM_MspPostInit+0xb0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d11f      	bne.n	8001cea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_TIM_MspPostInit+0xb4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_TIM_MspPostInit+0xb4>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_TIM_MspPostInit+0xb4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH1_Pin|Climb_TIM1_CH2_Pin;
 8001cc6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <HAL_TIM_MspPostInit+0xb8>)
 8001ce4:	f000 fdd8 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ce8:	e022      	b.n	8001d30 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_TIM_MspPostInit+0xbc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d11d      	bne.n	8001d30 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_TIM_MspPostInit+0xb4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_TIM_MspPostInit+0xb4>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6313      	str	r3, [r2, #48]	; 0x30
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_TIM_MspPostInit+0xb4>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8001d10:	23c0      	movs	r3, #192	; 0xc0
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d20:	2302      	movs	r3, #2
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <HAL_TIM_MspPostInit+0xc0>)
 8001d2c:	f000 fdb4 	bl	8002898 <HAL_GPIO_Init>
}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40020800 	.word	0x40020800

08001d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_UART_MspInit+0xe4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d15b      	bne.n	8001e26 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_UART_MspInit+0xe8>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <HAL_UART_MspInit+0xe8>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_UART_MspInit+0xe8>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <HAL_UART_MspInit+0xe8>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_UART_MspInit+0xe8>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_UART_MspInit+0xe8>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8001da6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db8:	2307      	movs	r3, #7
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481d      	ldr	r0, [pc, #116]	; (8001e38 <HAL_UART_MspInit+0xec>)
 8001dc4:	f000 fd68 	bl	8002898 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_UART_MspInit+0xf4>)
 8001dcc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e0a:	480c      	ldr	r0, [pc, #48]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001e0c:	f000 fa5c 	bl	80022c8 <HAL_DMA_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e16:	f7ff fdb1 	bl	800197c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_UART_MspInit+0xf0>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40004800 	.word	0x40004800
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020c00 	.word	0x40020c00
 8001e3c:	200003a8 	.word	0x200003a8
 8001e40:	40026028 	.word	0x40026028

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f000 f8a6 	bl	8001fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ea6:	f000 fabd 	bl	8002424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200003a8 	.word	0x200003a8

08001eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001eb8:	2080      	movs	r0, #128	; 0x80
 8001eba:	f000 feb1 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <SystemInit+0x28>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <SystemInit+0x28>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SystemInit+0x28>)
 8001eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ede:	609a      	str	r2, [r3, #8]
#endif
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f28 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ef4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ef6:	e003      	b.n	8001f00 <LoopCopyDataInit>

08001ef8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001efa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001efc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001efe:	3104      	adds	r1, #4

08001f00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f08:	d3f6      	bcc.n	8001ef8 <CopyDataInit>
  ldr  r2, =_sbss
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f0c:	e002      	b.n	8001f14 <LoopFillZerobss>

08001f0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f10:	f842 3b04 	str.w	r3, [r2], #4

08001f14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f18:	d3f9      	bcc.n	8001f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f1a:	f7ff ffd3 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1e:	f003 fcff 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f22:	f7fe ff7f 	bl	8000e24 <main>
  bx  lr    
 8001f26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f28:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f2c:	080059c0 	.word	0x080059c0
  ldr  r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f34:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8001f38:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 8001f3c:	2000075c 	.word	0x2000075c

08001f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_Init+0x40>)
 8001f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_Init+0x40>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_Init+0x40>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f000 f94d 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f808 	bl	8001f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f78:	f7ff fd08 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x54>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_InitTick+0x58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f965 	bl	8002276 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00e      	b.n	8001fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d80a      	bhi.n	8001fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc4:	f000 f92d 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_InitTick+0x5c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000020 	.word	0x20000020
 8001fe0:	20000028 	.word	0x20000028
 8001fe4:	20000024 	.word	0x20000024

08001fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_IncTick+0x20>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x24>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_IncTick+0x24>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000028 	.word	0x20000028
 800200c:	20000758 	.word	0x20000758

08002010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTick;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTick+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000758 	.word	0x20000758

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffee 	bl	8002010 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_Delay+0x40>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffde 	bl	8002010 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000028 	.word	0x20000028

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d106      	bne.n	80022ac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80022aa:	e005      	b.n	80022b8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff fe9c 	bl	8002010 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e099      	b.n	8002418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002304:	e00f      	b.n	8002326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002306:	f7ff fe83 	bl	8002010 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b05      	cmp	r3, #5
 8002312:	d908      	bls.n	8002326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e078      	b.n	8002418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e8      	bne.n	8002306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_DMA_Init+0x158>)
 8002340:	4013      	ands	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f023 0307 	bic.w	r3, r3, #7
 80023a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d117      	bne.n	80023ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f9e9 	bl	80027a4 <DMA_CheckFifoParam>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023e6:	2301      	movs	r3, #1
 80023e8:	e016      	b.n	8002418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9a0 	bl	8002738 <DMA_CalcBaseAndBitshift>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	f010803f 	.word	0xf010803f

08002424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_DMA_IRQHandler+0x258>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a92      	ldr	r2, [pc, #584]	; (8002680 <HAL_DMA_IRQHandler+0x25c>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0204 	bic.w	r2, r2, #4
 8002476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2208      	movs	r2, #8
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2201      	movs	r2, #1
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d012      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2201      	movs	r2, #1
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2204      	movs	r2, #4
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2204      	movs	r2, #4
 80024ea:	409a      	lsls	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2210      	movs	r2, #16
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03c      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2210      	movs	r2, #16
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d018      	beq.n	8002566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d024      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
 8002552:	e01f      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e016      	b.n	8002594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0208 	bic.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2220      	movs	r2, #32
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 808e 	beq.w	80026c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2220      	movs	r2, #32
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d136      	bne.n	800263c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_IRQHandler+0x1da>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	223f      	movs	r2, #63	; 0x3f
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d07d      	beq.n	800272e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
        }
        return;
 800263a:	e078      	b.n	800272e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01c      	beq.n	8002684 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	2b00      	cmp	r3, #0
 800265e:	d030      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e02b      	b.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
 800267a:	e022      	b.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
 800267c:	20000020 	.word	0x20000020
 8002680:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0210 	bic.w	r2, r2, #16
 80026a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d032      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d022      	beq.n	800271c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d307      	bcc.n	800270a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f2      	bne.n	80026ee <HAL_DMA_IRQHandler+0x2ca>
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800270a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e000      	b.n	8002730 <HAL_DMA_IRQHandler+0x30c>
        return;
 800272e:	bf00      	nop
    }
  }
}
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3b10      	subs	r3, #16
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <DMA_CalcBaseAndBitshift+0x64>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d909      	bls.n	800277a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800276e:	f023 0303 	bic.w	r3, r3, #3
 8002772:	1d1a      	adds	r2, r3, #4
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	659a      	str	r2, [r3, #88]	; 0x58
 8002778:	e007      	b.n	800278a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	aaaaaaab 	.word	0xaaaaaaab
 80027a0:	080059a8 	.word	0x080059a8

080027a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d11f      	bne.n	80027fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d855      	bhi.n	8002870 <DMA_CheckFifoParam+0xcc>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <DMA_CheckFifoParam+0x28>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	080027dd 	.word	0x080027dd
 80027d0:	080027ef 	.word	0x080027ef
 80027d4:	080027dd 	.word	0x080027dd
 80027d8:	08002871 	.word	0x08002871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d045      	beq.n	8002874 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ec:	e042      	b.n	8002874 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027f6:	d13f      	bne.n	8002878 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fc:	e03c      	b.n	8002878 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002806:	d121      	bne.n	800284c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d836      	bhi.n	800287c <DMA_CheckFifoParam+0xd8>
 800280e:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <DMA_CheckFifoParam+0x70>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	08002825 	.word	0x08002825
 8002818:	0800282b 	.word	0x0800282b
 800281c:	08002825 	.word	0x08002825
 8002820:	0800283d 	.word	0x0800283d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e02f      	b.n	800288a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d024      	beq.n	8002880 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283a:	e021      	b.n	8002880 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002844:	d11e      	bne.n	8002884 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800284a:	e01b      	b.n	8002884 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d902      	bls.n	8002858 <DMA_CheckFifoParam+0xb4>
 8002852:	2b03      	cmp	r3, #3
 8002854:	d003      	beq.n	800285e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002856:	e018      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
      break;
 800285c:	e015      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      break;
 800286e:	e00b      	b.n	8002888 <DMA_CheckFifoParam+0xe4>
      break;
 8002870:	bf00      	nop
 8002872:	e00a      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      break;
 8002874:	bf00      	nop
 8002876:	e008      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      break;
 8002878:	bf00      	nop
 800287a:	e006      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      break;
 800287c:	bf00      	nop
 800287e:	e004      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      break;
 8002880:	bf00      	nop
 8002882:	e002      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      break;   
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <DMA_CheckFifoParam+0xe6>
      break;
 8002888:	bf00      	nop
    }
  } 
  
  return status; 
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e177      	b.n	8002ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 8166 	bne.w	8002b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d00b      	beq.n	80028f2 <HAL_GPIO_Init+0x5a>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e6:	2b11      	cmp	r3, #17
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d130      	bne.n	8002954 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	2203      	movs	r2, #3
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 0201 	and.w	r2, r3, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0xfc>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b12      	cmp	r3, #18
 8002992:	d123      	bne.n	80029dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80c0 	beq.w	8002b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a64      	ldr	r2, [pc, #400]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b62      	ldr	r3, [pc, #392]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	4a60      	ldr	r2, [pc, #384]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_GPIO_Init+0x328>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d037      	beq.n	8002ad6 <HAL_GPIO_Init+0x23e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_GPIO_Init+0x32c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d031      	beq.n	8002ad2 <HAL_GPIO_Init+0x23a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02b      	beq.n	8002ace <HAL_GPIO_Init+0x236>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d025      	beq.n	8002aca <HAL_GPIO_Init+0x232>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a53      	ldr	r2, [pc, #332]	; (8002bd0 <HAL_GPIO_Init+0x338>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <HAL_GPIO_Init+0x22e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_GPIO_Init+0x33c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d019      	beq.n	8002ac2 <HAL_GPIO_Init+0x22a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a51      	ldr	r2, [pc, #324]	; (8002bd8 <HAL_GPIO_Init+0x340>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_GPIO_Init+0x226>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_GPIO_Init+0x344>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00d      	beq.n	8002aba <HAL_GPIO_Init+0x222>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4f      	ldr	r2, [pc, #316]	; (8002be0 <HAL_GPIO_Init+0x348>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <HAL_GPIO_Init+0x21e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4e      	ldr	r2, [pc, #312]	; (8002be4 <HAL_GPIO_Init+0x34c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_GPIO_Init+0x21a>
 8002aae:	2309      	movs	r3, #9
 8002ab0:	e012      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ab2:	230a      	movs	r3, #10
 8002ab4:	e010      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00e      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e00c      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002abe:	2306      	movs	r3, #6
 8002ac0:	e00a      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	e008      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e004      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	f002 0203 	and.w	r2, r2, #3
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4093      	lsls	r3, r2
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae8:	4934      	ldr	r1, [pc, #208]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3302      	adds	r3, #2
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af6:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b1a:	4a33      	ldr	r2, [pc, #204]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b44:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	f67f ae84 	bls.w	80028b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	3724      	adds	r7, #36	; 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40021400 	.word	0x40021400
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40022400 	.word	0x40022400
 8002be8:	40013c00 	.word	0x40013c00

08002bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c08:	e003      	b.n	8002c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	041a      	lsls	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fd6a 	bl	8001718 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e11f      	b.n	8002ea2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe feb0 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f000 fe08 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a7b      	ldr	r2, [pc, #492]	; (8002eac <HAL_I2C_Init+0x25c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_I2C_Init+0x260>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x92>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_I2C_Init+0x264>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0db      	b.n	8002ea2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <HAL_I2C_Init+0x268>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a64      	ldr	r2, [pc, #400]	; (8002eac <HAL_I2C_Init+0x25c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d802      	bhi.n	8002d24 <HAL_I2C_Init+0xd4>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	e009      	b.n	8002d38 <HAL_I2C_Init+0xe8>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a63      	ldr	r2, [pc, #396]	; (8002ebc <HAL_I2C_Init+0x26c>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4956      	ldr	r1, [pc, #344]	; (8002eac <HAL_I2C_Init+0x25c>)
 8002d54:	428b      	cmp	r3, r1
 8002d56:	d80d      	bhi.n	8002d74 <HAL_I2C_Init+0x124>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e59      	subs	r1, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	bf38      	it	cc
 8002d70:	2304      	movcc	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1c4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x150>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x176>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x17e>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1c4>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1a4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1c4>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d129      	bne.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	; 0x24
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0210 	bic.w	r2, r2, #16
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d12a      	bne.n	8002fa8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2224      	movs	r2, #36	; 0x24
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	f023 030f 	bic.w	r3, r3, #15
 8002f78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	89fa      	ldrh	r2, [r7, #14]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_PWREx_EnableOverDrive+0x90>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <HAL_PWREx_EnableOverDrive+0x90>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_PWREx_EnableOverDrive+0x90>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_PWREx_EnableOverDrive+0x94>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe4:	f7ff f814 	bl	8002010 <HAL_GetTick>
 8002fe8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fea:	e009      	b.n	8003000 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fec:	f7ff f810 	bl	8002010 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffa:	d901      	bls.n	8003000 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e01f      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_PWREx_EnableOverDrive+0x98>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d1ee      	bne.n	8002fec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003014:	f7fe fffc 	bl	8002010 <HAL_GetTick>
 8003018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800301a:	e009      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800301c:	f7fe fff8 	bl	8002010 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302a:	d901      	bls.n	8003030 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e007      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003030:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_PWREx_EnableOverDrive+0x98>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800303c:	d1ee      	bne.n	800301c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	420e0040 	.word	0x420e0040
 8003050:	40007000 	.word	0x40007000
 8003054:	420e0044 	.word	0x420e0044

08003058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e25b      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d075      	beq.n	8003162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003076:	4ba3      	ldr	r3, [pc, #652]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d00c      	beq.n	800309c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4ba0      	ldr	r3, [pc, #640]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	2b08      	cmp	r3, #8
 800308c:	d112      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308e:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	4b99      	ldr	r3, [pc, #612]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05b      	beq.n	8003160 <HAL_RCC_OscConfig+0x108>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d157      	bne.n	8003160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e236      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x74>
 80030be:	4b91      	ldr	r3, [pc, #580]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a90      	ldr	r2, [pc, #576]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b8b      	ldr	r3, [pc, #556]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a8a      	ldr	r2, [pc, #552]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a87      	ldr	r2, [pc, #540]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030f0:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a83      	ldr	r2, [pc, #524]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe ff7e 	bl	8002010 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe ff7a 	bl	8002010 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1fb      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xc0>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe ff6a 	bl	8002010 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe ff66 	bl	8002010 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1e7      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0xe8>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316e:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1bb      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4952      	ldr	r1, [pc, #328]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_OscConfig+0x2b0>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe ff1f 	bl	8002010 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fe ff1b 	bl	8002010 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e19c      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b46      	ldr	r3, [pc, #280]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4940      	ldr	r1, [pc, #256]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <HAL_RCC_OscConfig+0x2b0>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fefe 	bl	8002010 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003218:	f7fe fefa 	bl	8002010 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e17b      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d030      	beq.n	80032a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_OscConfig+0x2b4>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe fede 	bl	8002010 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe feda 	bl	8002010 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e15b      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x200>
 8003276:	e015      	b.n	80032a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x2b4>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7fe fec7 	bl	8002010 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003286:	f7fe fec3 	bl	8002010 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e144      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a0 	beq.w	80033f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d121      	bne.n	8003332 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_OscConfig+0x2b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_RCC_OscConfig+0x2b8>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fe89 	bl	8002010 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e011      	b.n	8003326 <HAL_RCC_OscConfig+0x2ce>
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	42470000 	.word	0x42470000
 800330c:	42470e80 	.word	0x42470e80
 8003310:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7fe fe7c 	bl	8002010 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0fd      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_RCC_OscConfig+0x4d4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x2f0>
 800333a:	4b7d      	ldr	r3, [pc, #500]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	4a7c      	ldr	r2, [pc, #496]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6713      	str	r3, [r2, #112]	; 0x70
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x32a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x312>
 8003350:	4b77      	ldr	r3, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a76      	ldr	r2, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	4b74      	ldr	r3, [pc, #464]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a73      	ldr	r2, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x32a>
 800336a:	4b71      	ldr	r3, [pc, #452]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a70      	ldr	r2, [pc, #448]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a6d      	ldr	r2, [pc, #436]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fe fe41 	bl	8002010 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe fe3d 	bl	8002010 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0bc      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b61      	ldr	r3, [pc, #388]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x33a>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fe2b 	bl	8002010 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fe27 	bl	8002010 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0a6      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b52      	ldr	r3, [pc, #328]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8092 	beq.w	8003520 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d05c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d141      	bne.n	8003494 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b48      	ldr	r3, [pc, #288]	; (8003534 <HAL_RCC_OscConfig+0x4dc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fdfb 	bl	8002010 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fdf7 	bl	8002010 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e078      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	019b      	lsls	r3, r3, #6
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	4933      	ldr	r1, [pc, #204]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003466:	4b33      	ldr	r3, [pc, #204]	; (8003534 <HAL_RCC_OscConfig+0x4dc>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fdd0 	bl	8002010 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fdcc 	bl	8002010 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04d      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x41c>
 8003492:	e045      	b.n	8003520 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x4dc>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe fdb9 	bl	8002010 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe fdb5 	bl	8002010 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e036      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x44a>
 80034c0:	e02e      	b.n	8003520 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e029      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d115      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10d      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d106      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	40023800 	.word	0x40023800
 8003534:	42470060 	.word	0x42470060

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0cc      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b68      	ldr	r3, [pc, #416]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d90c      	bls.n	8003574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b65      	ldr	r3, [pc, #404]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a58      	ldr	r2, [pc, #352]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d044      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b3f      	ldr	r3, [pc, #252]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e067      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4934      	ldr	r1, [pc, #208]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7fe fcf2 	bl	8002010 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fe fcee 	bl	8002010 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20c      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4601      	mov	r1, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	fa21 f303 	lsr.w	r3, r1, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fc52 	bl	8001f88 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08005990 	.word	0x08005990
 80036fc:	20000020 	.word	0x20000020
 8003700:	20000024 	.word	0x20000024

08003704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	2300      	movs	r3, #0
 8003714:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371a:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d007      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x32>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d008      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x38>
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 80b4 	bne.w	8003898 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003732:	60bb      	str	r3, [r7, #8]
       break;
 8003734:	e0b3      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003736:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003738:	60bb      	str	r3, [r7, #8]
      break;
 800373a:	e0b0      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b5a      	ldr	r3, [pc, #360]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b58      	ldr	r3, [pc, #352]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04a      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b55      	ldr	r3, [pc, #340]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	ea03 0501 	and.w	r5, r3, r1
 8003768:	ea04 0602 	and.w	r6, r4, r2
 800376c:	4629      	mov	r1, r5
 800376e:	4632      	mov	r2, r6
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	0154      	lsls	r4, r2, #5
 800377a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800377e:	014b      	lsls	r3, r1, #5
 8003780:	4619      	mov	r1, r3
 8003782:	4622      	mov	r2, r4
 8003784:	1b49      	subs	r1, r1, r5
 8003786:	eb62 0206 	sbc.w	r2, r2, r6
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	0194      	lsls	r4, r2, #6
 8003794:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003798:	018b      	lsls	r3, r1, #6
 800379a:	1a5b      	subs	r3, r3, r1
 800379c:	eb64 0402 	sbc.w	r4, r4, r2
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	00e2      	lsls	r2, r4, #3
 80037aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ae:	00d9      	lsls	r1, r3, #3
 80037b0:	460b      	mov	r3, r1
 80037b2:	4614      	mov	r4, r2
 80037b4:	195b      	adds	r3, r3, r5
 80037b6:	eb44 0406 	adc.w	r4, r4, r6
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	02a2      	lsls	r2, r4, #10
 80037c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037c8:	0299      	lsls	r1, r3, #10
 80037ca:	460b      	mov	r3, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	4621      	mov	r1, r4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f04f 0400 	mov.w	r4, #0
 80037d8:	461a      	mov	r2, r3
 80037da:	4623      	mov	r3, r4
 80037dc:	f7fd f986 	bl	8000aec <__aeabi_uldivmod>
 80037e0:	4603      	mov	r3, r0
 80037e2:	460c      	mov	r4, r1
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e049      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	ea03 0501 	and.w	r5, r3, r1
 80037fe:	ea04 0602 	and.w	r6, r4, r2
 8003802:	4629      	mov	r1, r5
 8003804:	4632      	mov	r2, r6
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	0154      	lsls	r4, r2, #5
 8003810:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003814:	014b      	lsls	r3, r1, #5
 8003816:	4619      	mov	r1, r3
 8003818:	4622      	mov	r2, r4
 800381a:	1b49      	subs	r1, r1, r5
 800381c:	eb62 0206 	sbc.w	r2, r2, r6
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	0194      	lsls	r4, r2, #6
 800382a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800382e:	018b      	lsls	r3, r1, #6
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	eb64 0402 	sbc.w	r4, r4, r2
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	00e2      	lsls	r2, r4, #3
 8003840:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003844:	00d9      	lsls	r1, r3, #3
 8003846:	460b      	mov	r3, r1
 8003848:	4614      	mov	r4, r2
 800384a:	195b      	adds	r3, r3, r5
 800384c:	eb44 0406 	adc.w	r4, r4, r6
 8003850:	f04f 0100 	mov.w	r1, #0
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	02a2      	lsls	r2, r4, #10
 800385a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800385e:	0299      	lsls	r1, r3, #10
 8003860:	460b      	mov	r3, r1
 8003862:	4614      	mov	r4, r2
 8003864:	4618      	mov	r0, r3
 8003866:	4621      	mov	r1, r4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f04f 0400 	mov.w	r4, #0
 800386e:	461a      	mov	r2, r3
 8003870:	4623      	mov	r3, r4
 8003872:	f7fd f93b 	bl	8000aec <__aeabi_uldivmod>
 8003876:	4603      	mov	r3, r0
 8003878:	460c      	mov	r4, r1
 800387a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	3301      	adds	r3, #1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	60bb      	str	r3, [r7, #8]
      break;
 8003896:	e002      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800389a:	60bb      	str	r3, [r7, #8]
      break;
 800389c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389e:	68bb      	ldr	r3, [r7, #8]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	00f42400 	.word	0x00f42400

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000020 	.word	0x20000020

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4601      	mov	r1, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4a03      	ldr	r2, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	080059a0 	.word	0x080059a0

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4601      	mov	r1, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4a03      	ldr	r2, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	080059a0 	.word	0x080059a0

08003918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e056      	b.n	80039d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fe f891 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	ea42 0103 	orr.w	r1, r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f003 0104 	and.w	r1, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fc:	d112      	bne.n	8003a24 <HAL_SPI_Receive+0x44>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8e9 	bl	8003bf2 <HAL_SPI_TransmitReceive>
 8003a20:	4603      	mov	r3, r0
 8003a22:	e0e2      	b.n	8003bea <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_SPI_Receive+0x52>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e0db      	b.n	8003bea <HAL_SPI_Receive+0x20a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe fae9 	bl	8002010 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a50:	e0c2      	b.n	8003bd8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_SPI_Receive+0x7e>
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a62:	e0b9      	b.n	8003bd8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2204      	movs	r2, #4
 8003a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aaa:	d107      	bne.n	8003abc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d007      	beq.n	8003ada <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d162      	bne.n	8003ba8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ae2:	e02e      	b.n	8003b42 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d115      	bne.n	8003b1e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f103 020c 	add.w	r2, r3, #12
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1c:	e011      	b.n	8003b42 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1e:	f7fe fa77 	bl	8002010 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d803      	bhi.n	8003b36 <HAL_SPI_Receive+0x156>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_Receive+0x15c>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b40:	e04a      	b.n	8003bd8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1cb      	bne.n	8003ae4 <HAL_SPI_Receive+0x104>
 8003b4c:	e031      	b.n	8003bb2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d113      	bne.n	8003b84 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	b292      	uxth	r2, r2
 8003b68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	1c9a      	adds	r2, r3, #2
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b82:	e011      	b.n	8003ba8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b84:	f7fe fa44 	bl	8002010 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d803      	bhi.n	8003b9c <HAL_SPI_Receive+0x1bc>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Receive+0x1c2>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ba6:	e017      	b.n	8003bd8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cd      	bne.n	8003b4e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fa27 	bl	800400a <SPI_EndRxTransaction>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
 8003bd4:	e000      	b.n	8003bd8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b08c      	sub	sp, #48	; 0x30
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c00:	2301      	movs	r3, #1
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x26>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e18a      	b.n	8003f2e <HAL_SPI_TransmitReceive+0x33c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c20:	f7fe f9f6 	bl	8002010 <HAL_GetTick>
 8003c24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d00f      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x70>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c48:	d107      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x68>
 8003c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d003      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c60:	e15b      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_SPI_TransmitReceive+0x82>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_TransmitReceive+0x82>
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c7a:	e14e      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d003      	beq.n	8003c90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	887a      	ldrh	r2, [r7, #2]
 8003cb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d007      	beq.n	8003ce4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	d178      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x10a>
 8003cf6:	8b7b      	ldrh	r3, [r7, #26]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d166      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d20:	e053      	b.n	8003dca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d11b      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x176>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x176>
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d113      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	1c9a      	adds	r2, r3, #2
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d119      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x1b8>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d014      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da6:	2301      	movs	r3, #1
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003daa:	f7fe f931 	bl	8002010 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d807      	bhi.n	8003dca <HAL_SPI_TransmitReceive+0x1d8>
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc0:	d003      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dc8:	e0a7      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1a6      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x130>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1a1      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x130>
 8003dde:	e07c      	b.n	8003eda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_SPI_TransmitReceive+0x1fc>
 8003de8:	8b7b      	ldrh	r3, [r7, #26]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d16b      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	7812      	ldrb	r2, [r2, #0]
 8003dfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e14:	e057      	b.n	8003ec6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d11c      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x26c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d017      	beq.n	8003e5e <HAL_SPI_TransmitReceive+0x26c>
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d114      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d119      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x2ae>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d014      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ea0:	f7fe f8b6 	bl	8002010 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d803      	bhi.n	8003eb8 <HAL_SPI_TransmitReceive+0x2c6>
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x2cc>
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ec4:	e029      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1a2      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x224>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d19d      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8f8 	bl	80040d4 <SPI_EndRxTxTransaction>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d006      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ef6:	e010      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	e000      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3730      	adds	r7, #48	; 0x30
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f46:	e04c      	b.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4e:	d048      	beq.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f50:	f7fe f85e 	bl	8002010 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d902      	bls.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d13d      	bne.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d111      	bne.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f88:	d004      	beq.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d107      	bne.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fac:	d10f      	bne.n	8003fce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e00f      	b.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d1a3      	bne.n	8003f48 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af02      	add	r7, sp, #8
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401e:	d111      	bne.n	8004044 <SPI_EndRxTransaction+0x3a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d004      	beq.n	8004034 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d107      	bne.n	8004044 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404c:	d12a      	bne.n	80040a4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d012      	beq.n	800407e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff ff67 	bl	8003f36 <SPI_WaitFlagStateUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02d      	beq.n	80040ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e026      	b.n	80040cc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2200      	movs	r2, #0
 8004086:	2101      	movs	r1, #1
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff ff54 	bl	8003f36 <SPI_WaitFlagStateUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01a      	beq.n	80040ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e013      	b.n	80040cc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	2101      	movs	r1, #1
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff41 	bl	8003f36 <SPI_WaitFlagStateUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e000      	b.n	80040cc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <SPI_EndRxTxTransaction+0x7c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <SPI_EndRxTxTransaction+0x80>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0d5b      	lsrs	r3, r3, #21
 80040ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f0:	fb02 f303 	mul.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fe:	d112      	bne.n	8004126 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff ff13 	bl	8003f36 <SPI_WaitFlagStateUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00f      	b.n	8004146 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3b01      	subs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b80      	cmp	r3, #128	; 0x80
 800413e:	d0f2      	beq.n	8004126 <SPI_EndRxTxTransaction+0x52>
 8004140:	e000      	b.n	8004144 <SPI_EndRxTxTransaction+0x70>
        break;
 8004142:	bf00      	nop
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000020 	.word	0x20000020
 8004154:	165e9f81 	.word	0x165e9f81

08004158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e01d      	b.n	80041a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fd10 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f000 faf0 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b06      	cmp	r3, #6
 80041ce:	d007      	beq.n	80041e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e01d      	b.n	8004244 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f815 	bl	800424c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f000 faa1 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe96 	bl	8004fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <HAL_TIM_PWM_Start+0x74>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <HAL_TIM_PWM_Start+0x2c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIM_PWM_Start+0x78>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <HAL_TIM_PWM_Start+0x30>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_TIM_PWM_Start+0x32>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d007      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40010400 	.word	0x40010400

080042dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01d      	b.n	800432a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f815 	bl	8004332 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fa2e 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIM_IC_ConfigChannel+0x1a>
 800435c:	2302      	movs	r3, #2
 800435e:	e08a      	b.n	8004476 <HAL_TIM_IC_ConfigChannel+0x130>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11b      	bne.n	80043ae <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f000 fc49 	bl	8004c1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 020c 	bic.w	r2, r2, #12
 8004398:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6999      	ldr	r1, [r3, #24]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	619a      	str	r2, [r3, #24]
 80043ac:	e05a      	b.n	8004464 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d11c      	bne.n	80043ee <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f000 fccd 	bl	8004d62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043d6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6999      	ldr	r1, [r3, #24]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	021a      	lsls	r2, r3, #8
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
 80043ec:	e03a      	b.n	8004464 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f000 fd1a 	bl	8004e3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 020c 	bic.w	r2, r2, #12
 8004416:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69d9      	ldr	r1, [r3, #28]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	61da      	str	r2, [r3, #28]
 800442a:	e01b      	b.n	8004464 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f000 fd3a 	bl	8004eb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800444e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69d9      	ldr	r1, [r3, #28]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004496:	2302      	movs	r3, #2
 8004498:	e0b4      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x184>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	f200 809f 	bhi.w	80045f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	080045f1 	.word	0x080045f1
 80044c0:	080045f1 	.word	0x080045f1
 80044c4:	080045f1 	.word	0x080045f1
 80044c8:	0800452d 	.word	0x0800452d
 80044cc:	080045f1 	.word	0x080045f1
 80044d0:	080045f1 	.word	0x080045f1
 80044d4:	080045f1 	.word	0x080045f1
 80044d8:	0800456f 	.word	0x0800456f
 80044dc:	080045f1 	.word	0x080045f1
 80044e0:	080045f1 	.word	0x080045f1
 80044e4:	080045f1 	.word	0x080045f1
 80044e8:	080045af 	.word	0x080045af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f9e2 	bl	80048bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0208 	orr.w	r2, r2, #8
 8004506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0204 	bic.w	r2, r2, #4
 8004516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
      break;
 800452a:	e062      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fa32 	bl	800499c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6999      	ldr	r1, [r3, #24]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	619a      	str	r2, [r3, #24]
      break;
 800456c:	e041      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa87 	bl	8004a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0208 	orr.w	r2, r2, #8
 8004588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0204 	bic.w	r2, r2, #4
 8004598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	61da      	str	r2, [r3, #28]
      break;
 80045ac:	e021      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fadb 	bl	8004b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69d9      	ldr	r1, [r3, #28]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	021a      	lsls	r2, r3, #8
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	61da      	str	r2, [r3, #28]
      break;
 80045ee:	e000      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80045f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIM_ConfigClockSource+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e0a6      	b.n	8004772 <HAL_TIM_ConfigClockSource+0x166>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d067      	beq.n	800472c <HAL_TIM_ConfigClockSource+0x120>
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d80b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x6c>
 8004660:	2b10      	cmp	r3, #16
 8004662:	d073      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x140>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d802      	bhi.n	800466e <HAL_TIM_ConfigClockSource+0x62>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d06f      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800466c:	e078      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800466e:	2b20      	cmp	r3, #32
 8004670:	d06c      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x140>
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d06a      	beq.n	800474c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004676:	e073      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004678:	2b70      	cmp	r3, #112	; 0x70
 800467a:	d00d      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0x8c>
 800467c:	2b70      	cmp	r3, #112	; 0x70
 800467e:	d804      	bhi.n	800468a <HAL_TIM_ConfigClockSource+0x7e>
 8004680:	2b50      	cmp	r3, #80	; 0x50
 8004682:	d033      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0xe0>
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d041      	beq.n	800470c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004688:	e06a      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d066      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x152>
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d017      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004696:	e063      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f000 fc5c 	bl	8004f64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	609a      	str	r2, [r3, #8]
      break;
 80046c4:	e04c      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f000 fc45 	bl	8004f64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e8:	609a      	str	r2, [r3, #8]
      break;
 80046ea:	e039      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	461a      	mov	r2, r3
 80046fa:	f000 fb03 	bl	8004d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2150      	movs	r1, #80	; 0x50
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fc12 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 800470a:	e029      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	461a      	mov	r2, r3
 800471a:	f000 fb5f 	bl	8004ddc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2160      	movs	r1, #96	; 0x60
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fc02 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 800472a:	e019      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	461a      	mov	r2, r3
 800473a:	f000 fae3 	bl	8004d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2140      	movs	r1, #64	; 0x40
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fbf2 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 800474a:	e009      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fbe9 	bl	8004f2e <TIM_ITRx_SetConfig>
      break;
 800475c:	e000      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800475e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a40      	ldr	r2, [pc, #256]	; (8004890 <TIM_Base_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479a:	d00f      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <TIM_Base_SetConfig+0x118>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00b      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <TIM_Base_SetConfig+0x11c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3b      	ldr	r2, [pc, #236]	; (800489c <TIM_Base_SetConfig+0x120>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3a      	ldr	r2, [pc, #232]	; (80048a0 <TIM_Base_SetConfig+0x124>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <TIM_Base_SetConfig+0x114>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02b      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d027      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <TIM_Base_SetConfig+0x118>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d023      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <TIM_Base_SetConfig+0x11c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01f      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2a      	ldr	r2, [pc, #168]	; (800489c <TIM_Base_SetConfig+0x120>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01b      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <TIM_Base_SetConfig+0x124>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d017      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <TIM_Base_SetConfig+0x128>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <TIM_Base_SetConfig+0x12c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00f      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <TIM_Base_SetConfig+0x130>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <TIM_Base_SetConfig+0x134>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a24      	ldr	r2, [pc, #144]	; (80048b4 <TIM_Base_SetConfig+0x138>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a23      	ldr	r2, [pc, #140]	; (80048b8 <TIM_Base_SetConfig+0x13c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <TIM_Base_SetConfig+0x114>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0xf8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <TIM_Base_SetConfig+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40001800 	.word	0x40001800
 80048b4:	40001c00 	.word	0x40001c00
 80048b8:	40002000 	.word	0x40002000

080048bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0303 	bic.w	r3, r3, #3
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0302 	bic.w	r3, r3, #2
 8004904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a20      	ldr	r2, [pc, #128]	; (8004994 <TIM_OC1_SetConfig+0xd8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC1_SetConfig+0x64>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <TIM_OC1_SetConfig+0xdc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10c      	bne.n	800493a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0308 	bic.w	r3, r3, #8
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <TIM_OC1_SetConfig+0xd8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC1_SetConfig+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <TIM_OC1_SetConfig+0xdc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d111      	bne.n	800496e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40010000 	.word	0x40010000
 8004998:	40010400 	.word	0x40010400

0800499c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0210 	bic.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0320 	bic.w	r3, r3, #32
 80049e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <TIM_OC2_SetConfig+0xe4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_OC2_SetConfig+0x68>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a21      	ldr	r2, [pc, #132]	; (8004a84 <TIM_OC2_SetConfig+0xe8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <TIM_OC2_SetConfig+0xe4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC2_SetConfig+0x94>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <TIM_OC2_SetConfig+0xe8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d113      	bne.n	8004a58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400

08004a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <TIM_OC3_SetConfig+0xe0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_OC3_SetConfig+0x66>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <TIM_OC3_SetConfig+0xe4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d10d      	bne.n	8004b0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <TIM_OC3_SetConfig+0xe0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC3_SetConfig+0x92>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <TIM_OC3_SetConfig+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d113      	bne.n	8004b42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	621a      	str	r2, [r3, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400

08004b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <TIM_OC4_SetConfig+0xa4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_OC4_SetConfig+0x68>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <TIM_OC4_SetConfig+0xa8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d109      	bne.n	8004bec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	019b      	lsls	r3, r3, #6
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400

08004c1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0201 	bic.w	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a28      	ldr	r2, [pc, #160]	; (8004ce8 <TIM_TI1_SetConfig+0xcc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01b      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c50:	d017      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a25      	ldr	r2, [pc, #148]	; (8004cec <TIM_TI1_SetConfig+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <TIM_TI1_SetConfig+0xd4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a23      	ldr	r2, [pc, #140]	; (8004cf4 <TIM_TI1_SetConfig+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <TIM_TI1_SetConfig+0xdc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <TIM_TI1_SetConfig+0xe0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_TI1_SetConfig+0x66>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a20      	ldr	r2, [pc, #128]	; (8004d00 <TIM_TI1_SetConfig+0xe4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <TIM_TI1_SetConfig+0x6a>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <TIM_TI1_SetConfig+0x6c>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e003      	b.n	8004ca6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f023 030a 	bic.w	r3, r3, #10
 8004cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f003 030a 	and.w	r3, r3, #10
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40001800 	.word	0x40001800

08004d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f023 030a 	bic.w	r3, r3, #10
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f023 0210 	bic.w	r2, r3, #16
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004db4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	621a      	str	r2, [r3, #32]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f023 0210 	bic.w	r2, r3, #16
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	031b      	lsls	r3, r3, #12
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	621a      	str	r2, [r3, #32]
}
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 0303 	bic.w	r3, r3, #3
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	031b      	lsls	r3, r3, #12
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	031b      	lsls	r3, r3, #12
 8004f0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f043 0307 	orr.w	r3, r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	021a      	lsls	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	609a      	str	r2, [r3, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e05a      	b.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a21      	ldr	r2, [pc, #132]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d01d      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a15      	ldr	r2, [pc, #84]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d10c      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40001800 	.word	0x40001800

080050e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005100:	2302      	movs	r3, #2
 8005102:	e03d      	b.n	8005180 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e03f      	b.n	800521e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fdca 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2224      	movs	r2, #36	; 0x24
 80051bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f829 	bl	8005228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800526a:	f023 030c 	bic.w	r3, r3, #12
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	430b      	orrs	r3, r1
 8005276:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005296:	f040 818b 	bne.w	80055b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4ac1      	ldr	r2, [pc, #772]	; (80055a4 <UART_SetConfig+0x37c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d005      	beq.n	80052b0 <UART_SetConfig+0x88>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4abf      	ldr	r2, [pc, #764]	; (80055a8 <UART_SetConfig+0x380>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 80bd 	bne.w	800542a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7fe fb1e 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 80052b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	461d      	mov	r5, r3
 80052ba:	f04f 0600 	mov.w	r6, #0
 80052be:	46a8      	mov	r8, r5
 80052c0:	46b1      	mov	r9, r6
 80052c2:	eb18 0308 	adds.w	r3, r8, r8
 80052c6:	eb49 0409 	adc.w	r4, r9, r9
 80052ca:	4698      	mov	r8, r3
 80052cc:	46a1      	mov	r9, r4
 80052ce:	eb18 0805 	adds.w	r8, r8, r5
 80052d2:	eb49 0906 	adc.w	r9, r9, r6
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052ea:	4688      	mov	r8, r1
 80052ec:	4691      	mov	r9, r2
 80052ee:	eb18 0005 	adds.w	r0, r8, r5
 80052f2:	eb49 0106 	adc.w	r1, r9, r6
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	461d      	mov	r5, r3
 80052fc:	f04f 0600 	mov.w	r6, #0
 8005300:	196b      	adds	r3, r5, r5
 8005302:	eb46 0406 	adc.w	r4, r6, r6
 8005306:	461a      	mov	r2, r3
 8005308:	4623      	mov	r3, r4
 800530a:	f7fb fbef 	bl	8000aec <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	461a      	mov	r2, r3
 8005314:	4ba5      	ldr	r3, [pc, #660]	; (80055ac <UART_SetConfig+0x384>)
 8005316:	fba3 2302 	umull	r2, r3, r3, r2
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	461d      	mov	r5, r3
 8005324:	f04f 0600 	mov.w	r6, #0
 8005328:	46a9      	mov	r9, r5
 800532a:	46b2      	mov	sl, r6
 800532c:	eb19 0309 	adds.w	r3, r9, r9
 8005330:	eb4a 040a 	adc.w	r4, sl, sl
 8005334:	4699      	mov	r9, r3
 8005336:	46a2      	mov	sl, r4
 8005338:	eb19 0905 	adds.w	r9, r9, r5
 800533c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800534c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005354:	4689      	mov	r9, r1
 8005356:	4692      	mov	sl, r2
 8005358:	eb19 0005 	adds.w	r0, r9, r5
 800535c:	eb4a 0106 	adc.w	r1, sl, r6
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	461d      	mov	r5, r3
 8005366:	f04f 0600 	mov.w	r6, #0
 800536a:	196b      	adds	r3, r5, r5
 800536c:	eb46 0406 	adc.w	r4, r6, r6
 8005370:	461a      	mov	r2, r3
 8005372:	4623      	mov	r3, r4
 8005374:	f7fb fbba 	bl	8000aec <__aeabi_uldivmod>
 8005378:	4603      	mov	r3, r0
 800537a:	460c      	mov	r4, r1
 800537c:	461a      	mov	r2, r3
 800537e:	4b8b      	ldr	r3, [pc, #556]	; (80055ac <UART_SetConfig+0x384>)
 8005380:	fba3 1302 	umull	r1, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3332      	adds	r3, #50	; 0x32
 8005392:	4a86      	ldr	r2, [pc, #536]	; (80055ac <UART_SetConfig+0x384>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a0:	4498      	add	r8, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	461d      	mov	r5, r3
 80053a6:	f04f 0600 	mov.w	r6, #0
 80053aa:	46a9      	mov	r9, r5
 80053ac:	46b2      	mov	sl, r6
 80053ae:	eb19 0309 	adds.w	r3, r9, r9
 80053b2:	eb4a 040a 	adc.w	r4, sl, sl
 80053b6:	4699      	mov	r9, r3
 80053b8:	46a2      	mov	sl, r4
 80053ba:	eb19 0905 	adds.w	r9, r9, r5
 80053be:	eb4a 0a06 	adc.w	sl, sl, r6
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053d6:	4689      	mov	r9, r1
 80053d8:	4692      	mov	sl, r2
 80053da:	eb19 0005 	adds.w	r0, r9, r5
 80053de:	eb4a 0106 	adc.w	r1, sl, r6
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	461d      	mov	r5, r3
 80053e8:	f04f 0600 	mov.w	r6, #0
 80053ec:	196b      	adds	r3, r5, r5
 80053ee:	eb46 0406 	adc.w	r4, r6, r6
 80053f2:	461a      	mov	r2, r3
 80053f4:	4623      	mov	r3, r4
 80053f6:	f7fb fb79 	bl	8000aec <__aeabi_uldivmod>
 80053fa:	4603      	mov	r3, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	461a      	mov	r2, r3
 8005400:	4b6a      	ldr	r3, [pc, #424]	; (80055ac <UART_SetConfig+0x384>)
 8005402:	fba3 1302 	umull	r1, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2164      	movs	r1, #100	; 0x64
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	3332      	adds	r3, #50	; 0x32
 8005414:	4a65      	ldr	r2, [pc, #404]	; (80055ac <UART_SetConfig+0x384>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	f003 0207 	and.w	r2, r3, #7
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4442      	add	r2, r8
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	e26f      	b.n	800590a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800542a:	f7fe fa4d 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800542e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	461d      	mov	r5, r3
 8005434:	f04f 0600 	mov.w	r6, #0
 8005438:	46a8      	mov	r8, r5
 800543a:	46b1      	mov	r9, r6
 800543c:	eb18 0308 	adds.w	r3, r8, r8
 8005440:	eb49 0409 	adc.w	r4, r9, r9
 8005444:	4698      	mov	r8, r3
 8005446:	46a1      	mov	r9, r4
 8005448:	eb18 0805 	adds.w	r8, r8, r5
 800544c:	eb49 0906 	adc.w	r9, r9, r6
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800545c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005460:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005464:	4688      	mov	r8, r1
 8005466:	4691      	mov	r9, r2
 8005468:	eb18 0005 	adds.w	r0, r8, r5
 800546c:	eb49 0106 	adc.w	r1, r9, r6
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	461d      	mov	r5, r3
 8005476:	f04f 0600 	mov.w	r6, #0
 800547a:	196b      	adds	r3, r5, r5
 800547c:	eb46 0406 	adc.w	r4, r6, r6
 8005480:	461a      	mov	r2, r3
 8005482:	4623      	mov	r3, r4
 8005484:	f7fb fb32 	bl	8000aec <__aeabi_uldivmod>
 8005488:	4603      	mov	r3, r0
 800548a:	460c      	mov	r4, r1
 800548c:	461a      	mov	r2, r3
 800548e:	4b47      	ldr	r3, [pc, #284]	; (80055ac <UART_SetConfig+0x384>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	461d      	mov	r5, r3
 800549e:	f04f 0600 	mov.w	r6, #0
 80054a2:	46a9      	mov	r9, r5
 80054a4:	46b2      	mov	sl, r6
 80054a6:	eb19 0309 	adds.w	r3, r9, r9
 80054aa:	eb4a 040a 	adc.w	r4, sl, sl
 80054ae:	4699      	mov	r9, r3
 80054b0:	46a2      	mov	sl, r4
 80054b2:	eb19 0905 	adds.w	r9, r9, r5
 80054b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ce:	4689      	mov	r9, r1
 80054d0:	4692      	mov	sl, r2
 80054d2:	eb19 0005 	adds.w	r0, r9, r5
 80054d6:	eb4a 0106 	adc.w	r1, sl, r6
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	461d      	mov	r5, r3
 80054e0:	f04f 0600 	mov.w	r6, #0
 80054e4:	196b      	adds	r3, r5, r5
 80054e6:	eb46 0406 	adc.w	r4, r6, r6
 80054ea:	461a      	mov	r2, r3
 80054ec:	4623      	mov	r3, r4
 80054ee:	f7fb fafd 	bl	8000aec <__aeabi_uldivmod>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <UART_SetConfig+0x384>)
 80054fa:	fba3 1302 	umull	r1, r3, r3, r2
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2164      	movs	r1, #100	; 0x64
 8005502:	fb01 f303 	mul.w	r3, r1, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	3332      	adds	r3, #50	; 0x32
 800550c:	4a27      	ldr	r2, [pc, #156]	; (80055ac <UART_SetConfig+0x384>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800551a:	4498      	add	r8, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	461d      	mov	r5, r3
 8005520:	f04f 0600 	mov.w	r6, #0
 8005524:	46a9      	mov	r9, r5
 8005526:	46b2      	mov	sl, r6
 8005528:	eb19 0309 	adds.w	r3, r9, r9
 800552c:	eb4a 040a 	adc.w	r4, sl, sl
 8005530:	4699      	mov	r9, r3
 8005532:	46a2      	mov	sl, r4
 8005534:	eb19 0905 	adds.w	r9, r9, r5
 8005538:	eb4a 0a06 	adc.w	sl, sl, r6
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005548:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800554c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005550:	4689      	mov	r9, r1
 8005552:	4692      	mov	sl, r2
 8005554:	eb19 0005 	adds.w	r0, r9, r5
 8005558:	eb4a 0106 	adc.w	r1, sl, r6
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	461d      	mov	r5, r3
 8005562:	f04f 0600 	mov.w	r6, #0
 8005566:	196b      	adds	r3, r5, r5
 8005568:	eb46 0406 	adc.w	r4, r6, r6
 800556c:	461a      	mov	r2, r3
 800556e:	4623      	mov	r3, r4
 8005570:	f7fb fabc 	bl	8000aec <__aeabi_uldivmod>
 8005574:	4603      	mov	r3, r0
 8005576:	460c      	mov	r4, r1
 8005578:	461a      	mov	r2, r3
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <UART_SetConfig+0x384>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	; 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	3332      	adds	r3, #50	; 0x32
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <UART_SetConfig+0x384>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f003 0207 	and.w	r2, r3, #7
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4442      	add	r2, r8
 80055a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055a2:	e1b2      	b.n	800590a <UART_SetConfig+0x6e2>
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40011400 	.word	0x40011400
 80055ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4ad7      	ldr	r2, [pc, #860]	; (8005914 <UART_SetConfig+0x6ec>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d005      	beq.n	80055c6 <UART_SetConfig+0x39e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4ad6      	ldr	r2, [pc, #856]	; (8005918 <UART_SetConfig+0x6f0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f040 80d1 	bne.w	8005768 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80055c6:	f7fe f993 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 80055ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	469a      	mov	sl, r3
 80055d0:	f04f 0b00 	mov.w	fp, #0
 80055d4:	46d0      	mov	r8, sl
 80055d6:	46d9      	mov	r9, fp
 80055d8:	eb18 0308 	adds.w	r3, r8, r8
 80055dc:	eb49 0409 	adc.w	r4, r9, r9
 80055e0:	4698      	mov	r8, r3
 80055e2:	46a1      	mov	r9, r4
 80055e4:	eb18 080a 	adds.w	r8, r8, sl
 80055e8:	eb49 090b 	adc.w	r9, r9, fp
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005600:	4688      	mov	r8, r1
 8005602:	4691      	mov	r9, r2
 8005604:	eb1a 0508 	adds.w	r5, sl, r8
 8005608:	eb4b 0609 	adc.w	r6, fp, r9
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	f04f 0400 	mov.w	r4, #0
 800561e:	0094      	lsls	r4, r2, #2
 8005620:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005624:	008b      	lsls	r3, r1, #2
 8005626:	461a      	mov	r2, r3
 8005628:	4623      	mov	r3, r4
 800562a:	4628      	mov	r0, r5
 800562c:	4631      	mov	r1, r6
 800562e:	f7fb fa5d 	bl	8000aec <__aeabi_uldivmod>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	461a      	mov	r2, r3
 8005638:	4bb8      	ldr	r3, [pc, #736]	; (800591c <UART_SetConfig+0x6f4>)
 800563a:	fba3 2302 	umull	r2, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	469b      	mov	fp, r3
 8005648:	f04f 0c00 	mov.w	ip, #0
 800564c:	46d9      	mov	r9, fp
 800564e:	46e2      	mov	sl, ip
 8005650:	eb19 0309 	adds.w	r3, r9, r9
 8005654:	eb4a 040a 	adc.w	r4, sl, sl
 8005658:	4699      	mov	r9, r3
 800565a:	46a2      	mov	sl, r4
 800565c:	eb19 090b 	adds.w	r9, r9, fp
 8005660:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005670:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005674:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005678:	4689      	mov	r9, r1
 800567a:	4692      	mov	sl, r2
 800567c:	eb1b 0509 	adds.w	r5, fp, r9
 8005680:	eb4c 060a 	adc.w	r6, ip, sl
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	4619      	mov	r1, r3
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	f04f 0400 	mov.w	r4, #0
 8005696:	0094      	lsls	r4, r2, #2
 8005698:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800569c:	008b      	lsls	r3, r1, #2
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	4631      	mov	r1, r6
 80056a6:	f7fb fa21 	bl	8000aec <__aeabi_uldivmod>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b9a      	ldr	r3, [pc, #616]	; (800591c <UART_SetConfig+0x6f4>)
 80056b2:	fba3 1302 	umull	r1, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2164      	movs	r1, #100	; 0x64
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	3332      	adds	r3, #50	; 0x32
 80056c4:	4a95      	ldr	r2, [pc, #596]	; (800591c <UART_SetConfig+0x6f4>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d0:	4498      	add	r8, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	469b      	mov	fp, r3
 80056d6:	f04f 0c00 	mov.w	ip, #0
 80056da:	46d9      	mov	r9, fp
 80056dc:	46e2      	mov	sl, ip
 80056de:	eb19 0309 	adds.w	r3, r9, r9
 80056e2:	eb4a 040a 	adc.w	r4, sl, sl
 80056e6:	4699      	mov	r9, r3
 80056e8:	46a2      	mov	sl, r4
 80056ea:	eb19 090b 	adds.w	r9, r9, fp
 80056ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056f2:	f04f 0100 	mov.w	r1, #0
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005702:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005706:	4689      	mov	r9, r1
 8005708:	4692      	mov	sl, r2
 800570a:	eb1b 0509 	adds.w	r5, fp, r9
 800570e:	eb4c 060a 	adc.w	r6, ip, sl
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4619      	mov	r1, r3
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	0094      	lsls	r4, r2, #2
 8005726:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800572a:	008b      	lsls	r3, r1, #2
 800572c:	461a      	mov	r2, r3
 800572e:	4623      	mov	r3, r4
 8005730:	4628      	mov	r0, r5
 8005732:	4631      	mov	r1, r6
 8005734:	f7fb f9da 	bl	8000aec <__aeabi_uldivmod>
 8005738:	4603      	mov	r3, r0
 800573a:	460c      	mov	r4, r1
 800573c:	461a      	mov	r2, r3
 800573e:	4b77      	ldr	r3, [pc, #476]	; (800591c <UART_SetConfig+0x6f4>)
 8005740:	fba3 1302 	umull	r1, r3, r3, r2
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	2164      	movs	r1, #100	; 0x64
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	3332      	adds	r3, #50	; 0x32
 8005752:	4a72      	ldr	r2, [pc, #456]	; (800591c <UART_SetConfig+0x6f4>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f003 020f 	and.w	r2, r3, #15
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4442      	add	r2, r8
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	e0d0      	b.n	800590a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fe f8ae 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800576c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	469a      	mov	sl, r3
 8005772:	f04f 0b00 	mov.w	fp, #0
 8005776:	46d0      	mov	r8, sl
 8005778:	46d9      	mov	r9, fp
 800577a:	eb18 0308 	adds.w	r3, r8, r8
 800577e:	eb49 0409 	adc.w	r4, r9, r9
 8005782:	4698      	mov	r8, r3
 8005784:	46a1      	mov	r9, r4
 8005786:	eb18 080a 	adds.w	r8, r8, sl
 800578a:	eb49 090b 	adc.w	r9, r9, fp
 800578e:	f04f 0100 	mov.w	r1, #0
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800579a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800579e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057a2:	4688      	mov	r8, r1
 80057a4:	4691      	mov	r9, r2
 80057a6:	eb1a 0508 	adds.w	r5, sl, r8
 80057aa:	eb4b 0609 	adc.w	r6, fp, r9
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	4619      	mov	r1, r3
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	f04f 0400 	mov.w	r4, #0
 80057c0:	0094      	lsls	r4, r2, #2
 80057c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057c6:	008b      	lsls	r3, r1, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	4631      	mov	r1, r6
 80057d0:	f7fb f98c 	bl	8000aec <__aeabi_uldivmod>
 80057d4:	4603      	mov	r3, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	461a      	mov	r2, r3
 80057da:	4b50      	ldr	r3, [pc, #320]	; (800591c <UART_SetConfig+0x6f4>)
 80057dc:	fba3 2302 	umull	r2, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	469b      	mov	fp, r3
 80057ea:	f04f 0c00 	mov.w	ip, #0
 80057ee:	46d9      	mov	r9, fp
 80057f0:	46e2      	mov	sl, ip
 80057f2:	eb19 0309 	adds.w	r3, r9, r9
 80057f6:	eb4a 040a 	adc.w	r4, sl, sl
 80057fa:	4699      	mov	r9, r3
 80057fc:	46a2      	mov	sl, r4
 80057fe:	eb19 090b 	adds.w	r9, r9, fp
 8005802:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005806:	f04f 0100 	mov.w	r1, #0
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800581a:	4689      	mov	r9, r1
 800581c:	4692      	mov	sl, r2
 800581e:	eb1b 0509 	adds.w	r5, fp, r9
 8005822:	eb4c 060a 	adc.w	r6, ip, sl
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4619      	mov	r1, r3
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	f04f 0400 	mov.w	r4, #0
 8005838:	0094      	lsls	r4, r2, #2
 800583a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800583e:	008b      	lsls	r3, r1, #2
 8005840:	461a      	mov	r2, r3
 8005842:	4623      	mov	r3, r4
 8005844:	4628      	mov	r0, r5
 8005846:	4631      	mov	r1, r6
 8005848:	f7fb f950 	bl	8000aec <__aeabi_uldivmod>
 800584c:	4603      	mov	r3, r0
 800584e:	460c      	mov	r4, r1
 8005850:	461a      	mov	r2, r3
 8005852:	4b32      	ldr	r3, [pc, #200]	; (800591c <UART_SetConfig+0x6f4>)
 8005854:	fba3 1302 	umull	r1, r3, r3, r2
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	2164      	movs	r1, #100	; 0x64
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	3332      	adds	r3, #50	; 0x32
 8005866:	4a2d      	ldr	r2, [pc, #180]	; (800591c <UART_SetConfig+0x6f4>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005872:	4498      	add	r8, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	469b      	mov	fp, r3
 8005878:	f04f 0c00 	mov.w	ip, #0
 800587c:	46d9      	mov	r9, fp
 800587e:	46e2      	mov	sl, ip
 8005880:	eb19 0309 	adds.w	r3, r9, r9
 8005884:	eb4a 040a 	adc.w	r4, sl, sl
 8005888:	4699      	mov	r9, r3
 800588a:	46a2      	mov	sl, r4
 800588c:	eb19 090b 	adds.w	r9, r9, fp
 8005890:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058a8:	4689      	mov	r9, r1
 80058aa:	4692      	mov	sl, r2
 80058ac:	eb1b 0509 	adds.w	r5, fp, r9
 80058b0:	eb4c 060a 	adc.w	r6, ip, sl
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4619      	mov	r1, r3
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	f04f 0400 	mov.w	r4, #0
 80058c6:	0094      	lsls	r4, r2, #2
 80058c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058cc:	008b      	lsls	r3, r1, #2
 80058ce:	461a      	mov	r2, r3
 80058d0:	4623      	mov	r3, r4
 80058d2:	4628      	mov	r0, r5
 80058d4:	4631      	mov	r1, r6
 80058d6:	f7fb f909 	bl	8000aec <__aeabi_uldivmod>
 80058da:	4603      	mov	r3, r0
 80058dc:	460c      	mov	r4, r1
 80058de:	461a      	mov	r2, r3
 80058e0:	4b0e      	ldr	r3, [pc, #56]	; (800591c <UART_SetConfig+0x6f4>)
 80058e2:	fba3 1302 	umull	r1, r3, r3, r2
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	2164      	movs	r1, #100	; 0x64
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	3332      	adds	r3, #50	; 0x32
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <UART_SetConfig+0x6f4>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4442      	add	r2, r8
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	e7ff      	b.n	800590a <UART_SetConfig+0x6e2>
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	40011000 	.word	0x40011000
 8005918:	40011400 	.word	0x40011400
 800591c:	51eb851f 	.word	0x51eb851f

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4e0d      	ldr	r6, [pc, #52]	; (8005958 <__libc_init_array+0x38>)
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005926:	1ba4      	subs	r4, r4, r6
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	2500      	movs	r5, #0
 800592c:	42a5      	cmp	r5, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	4e0b      	ldr	r6, [pc, #44]	; (8005960 <__libc_init_array+0x40>)
 8005932:	4c0c      	ldr	r4, [pc, #48]	; (8005964 <__libc_init_array+0x44>)
 8005934:	f000 f820 	bl	8005978 <_init>
 8005938:	1ba4      	subs	r4, r4, r6
 800593a:	10a4      	asrs	r4, r4, #2
 800593c:	2500      	movs	r5, #0
 800593e:	42a5      	cmp	r5, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005948:	4798      	blx	r3
 800594a:	3501      	adds	r5, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005952:	4798      	blx	r3
 8005954:	3501      	adds	r5, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	080059b8 	.word	0x080059b8
 800595c:	080059b8 	.word	0x080059b8
 8005960:	080059b8 	.word	0x080059b8
 8005964:	080059bc 	.word	0x080059bc

08005968 <memset>:
 8005968:	4402      	add	r2, r0
 800596a:	4603      	mov	r3, r0
 800596c:	4293      	cmp	r3, r2
 800596e:	d100      	bne.n	8005972 <memset+0xa>
 8005970:	4770      	bx	lr
 8005972:	f803 1b01 	strb.w	r1, [r3], #1
 8005976:	e7f9      	b.n	800596c <memset+0x4>

08005978 <_init>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr

08005984 <_fini>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr
