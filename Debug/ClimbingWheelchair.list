
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f73c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800f8f0  0800f8f0  0001f8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe38  0800fe38  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe38  0800fe38  0001fe38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe40  0800fe40  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe40  0800fe40  0001fe40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe44  0800fe44  0001fe44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800fe48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000248  0801008c  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  0801008c  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3c8  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b8  00000000  00000000  0003d63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000416f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00042c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bb8  00000000  00000000  00043fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edb4  00000000  00000000  0006bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2339  00000000  00000000  0008a914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cc4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  0016cca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000248 	.word	0x20000248
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f8d4 	.word	0x0800f8d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000024c 	.word	0x2000024c
 80001ec:	0800f8d4 	.word	0x0800f8d4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f004 f813 	bl	8004f7c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 fffe 	bl	8004f7c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 ff65 	bl	8004f7c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <hubMotor_Init+0x2c>)
 80013d0:	f005 fffc 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <hubMotor_Init+0x2c>)
 80013dc:	f005 fff6 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4802      	ldr	r0, [pc, #8]	; (80013f0 <hubMotor_Init+0x2c>)
 80013e8:	f005 fff0 	bl	80073cc <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	00000000 	.word	0x00000000

080013f8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f856 	bl	80004b8 <__aeabi_f2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <send_HubMotor+0x1a8>)
 8001412:	f7ff f8a9 	bl	8000568 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a35e      	add	r3, pc, #376	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f9ca 	bl	80007bc <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fb4a 	bl	8000ac8 <__aeabi_d2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	425b      	negs	r3, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff f839 	bl	80004b8 <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <send_HubMotor+0x1a8>)
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	a34f      	add	r3, pc, #316	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f9ad 	bl	80007bc <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb2d 	bl	8000ac8 <__aeabi_d2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001472:	23aa      	movs	r3, #170	; 0xaa
 8001474:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001476:	23a4      	movs	r3, #164	; 0xa4
 8001478:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800147a:	230e      	movs	r3, #14
 800147c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800148a:	23c8      	movs	r3, #200	; 0xc8
 800148c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800148e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
 8001494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800149e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a2:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014a8:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 80014aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c4:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ca:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e0:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e6:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80014e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014ec:	121b      	asrs	r3, r3, #8
 80014ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80014f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80014f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fc:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80014fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001502:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	b29a      	uxth	r2, r3
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7c7b      	ldrb	r3, [r7, #17]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7cbb      	ldrb	r3, [r7, #18]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7d7b      	ldrb	r3, [r7, #21]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7e3b      	ldrb	r3, [r7, #24]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800156c:	4413      	add	r3, r2
 800156e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	2332      	movs	r3, #50	; 0x32
 800157c:	220f      	movs	r2, #15
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <send_HubMotor+0x1ac>)
 8001580:	f00a fe68 	bl	800c254 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001584:	220f      	movs	r2, #15
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <send_HubMotor+0x1b0>)
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <send_HubMotor+0x1ac>)
 800158a:	f00a fefd 	bl	800c388 <HAL_UART_Receive_DMA>
}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	54442d18 	.word	0x54442d18
 800159c:	401921fb 	.word	0x401921fb
 80015a0:	40b00000 	.word	0x40b00000
 80015a4:	20000718 	.word	0x20000718
 80015a8:	2000059c 	.word	0x2000059c

080015ac <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80015b0:	2201      	movs	r2, #1
 80015b2:	2110      	movs	r1, #16
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <ADC_Init+0x7c>)
 80015b6:	f005 ff09 	bl	80073cc <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	481b      	ldr	r0, [pc, #108]	; (800162c <ADC_Init+0x80>)
 80015c0:	f005 ff04 	bl	80073cc <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80015c4:	2200      	movs	r2, #0
 80015c6:	2110      	movs	r1, #16
 80015c8:	4818      	ldr	r0, [pc, #96]	; (800162c <ADC_Init+0x80>)
 80015ca:	f005 feff 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f003 fce0 	bl	8004f94 <HAL_Delay>
	AD7606_RST_HIGH;
 80015d4:	2201      	movs	r2, #1
 80015d6:	2110      	movs	r1, #16
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <ADC_Init+0x80>)
 80015da:	f005 fef7 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f003 fcd8 	bl	8004f94 <HAL_Delay>
	AD7606_RST_LOW;
 80015e4:	2200      	movs	r2, #0
 80015e6:	2110      	movs	r1, #16
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <ADC_Init+0x80>)
 80015ea:	f005 feef 	bl	80073cc <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 80015ee:	2200      	movs	r2, #0
 80015f0:	2101      	movs	r1, #1
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <ADC_Init+0x80>)
 80015f4:	f005 feea 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f003 fccb 	bl	8004f94 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2102      	movs	r1, #2
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <ADC_Init+0x80>)
 8001604:	f005 fee2 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <ADC_Init+0x80>)
 800160e:	f005 fedd 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2108      	movs	r1, #8
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <ADC_Init+0x80>)
 8001618:	f005 fed8 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f003 fcb9 	bl	8004f94 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40020000 	.word	0x40020000
 800162c:	40020800 	.word	0x40020800

08001630 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8001634:	2200      	movs	r2, #0
 8001636:	2120      	movs	r1, #32
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <ADC_DataRequest+0x1c>)
 800163a:	f005 fec7 	bl	80073cc <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <ADC_DataRequest+0x1c>)
 8001644:	f005 fec2 	bl	80073cc <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020800 	.word	0x40020800

08001650 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <ADC_Read+0x30>)
 800165e:	f005 feb5 	bl	80073cc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001662:	2302      	movs	r3, #2
 8001664:	2208      	movs	r2, #8
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <ADC_Read+0x34>)
 800166a:	f007 ff77 	bl	800955c <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <ADC_Read+0x30>)
 8001674:	f005 feaa 	bl	80073cc <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020000 	.word	0x40020000
 8001684:	20000308 	.word	0x20000308

08001688 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f808 	bl	80016a8 <enableMotor>
	brakeMotor(motor, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f828 	bl	80016f0 <brakeMotor>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	4619      	mov	r1, r3
 80016c0:	f005 fe84 	bl	80073cc <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	461a      	mov	r2, r3
 80016da:	2108      	movs	r1, #8
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <emBrakeMotor+0x20>)
 80016de:	f005 fe75 	bl	80073cc <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69d8      	ldr	r0, [r3, #28]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8c1b      	ldrh	r3, [r3, #32]
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	4619      	mov	r1, r3
 8001708:	f005 fe60 	bl	80073cc <HAL_GPIO_WritePin>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	4619      	mov	r1, r3
 800172c:	f005 fe4e 	bl	80073cc <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800174a:	edd7 7a00 	vldr	s15, [r7]
 800174e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001880 <setMotorSpeed+0x148>
 8001752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd01      	ble.n	8001760 <setMotorSpeed+0x28>
 800175c:	4b49      	ldr	r3, [pc, #292]	; (8001884 <setMotorSpeed+0x14c>)
 800175e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001760:	6838      	ldr	r0, [r7, #0]
 8001762:	f7fe fea9 	bl	80004b8 <__aeabi_f2d>
 8001766:	a340      	add	r3, pc, #256	; (adr r3, 8001868 <setMotorSpeed+0x130>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe fd44 	bl	80001f8 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	a33d      	add	r3, pc, #244	; (adr r3, 8001870 <setMotorSpeed+0x138>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7ff f81d 	bl	80007bc <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff f9c5 	bl	8000b18 <__aeabi_d2uiz>
 800178e:	4603      	mov	r3, r0
 8001790:	b29b      	uxth	r3, r3
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7fe fe8a 	bl	80004b8 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	a133      	add	r1, pc, #204	; (adr r1, 8001878 <setMotorSpeed+0x140>)
 80017aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ae:	f7ff f805 	bl	80007bc <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f985 	bl	8000ac8 <__aeabi_d2iz>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017c6:	8a7b      	ldrh	r3, [r7, #18]
 80017c8:	085b      	lsrs	r3, r3, #1
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017ce:	edd7 7a00 	vldr	s15, [r7]
 80017d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	d503      	bpl.n	80017e8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80017e0:	2101      	movs	r1, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff84 	bl	80016f0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	8a7a      	ldrh	r2, [r7, #18]
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8b1b      	ldrh	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	e01c      	b.n	8001840 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8b1b      	ldrh	r3, [r3, #24]
 800180a:	2b04      	cmp	r3, #4
 800180c:	d105      	bne.n	800181a <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
 8001818:	e012      	b.n	8001840 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b1b      	ldrh	r3, [r3, #24]
 800181e:	2b08      	cmp	r3, #8
 8001820:	d105      	bne.n	800182e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
 800182c:	e008      	b.n	8001840 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	8b1b      	ldrh	r3, [r3, #24]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d104      	bne.n	8001840 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8b1b      	ldrh	r3, [r3, #24]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f008 fc7c 	bl	800a148 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	bfb15b57 	.word	0xbfb15b57
 800186c:	3fd09eec 	.word	0x3fd09eec
 8001870:	1172ef0b 	.word	0x1172ef0b
 8001874:	3f9989df 	.word	0x3f9989df
 8001878:	00000000 	.word	0x00000000
 800187c:	412e8480 	.word	0x412e8480
 8001880:	42c80000 	.word	0x42c80000
 8001884:	42c80000 	.word	0x42c80000

08001888 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800189a:	2b01      	cmp	r3, #1
 800189c:	d129      	bne.n	80018f2 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800189e:	edd7 7a00 	vldr	s15, [r7]
 80018a2:	eef0 7ae7 	vabs.f32	s15, s15
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe05 	bl	80004b8 <__aeabi_f2d>
 80018ae:	4604      	mov	r4, r0
 80018b0:	460d      	mov	r5, r1
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f7fe fe00 	bl	80004b8 <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe ff7c 	bl	80007bc <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f7ff f8ce 	bl	8000a74 <__aeabi_dcmpge>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff17 	bl	8001714 <setMotorDir>
 80018e6:	e032      	b.n	800194e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80018e8:	2101      	movs	r1, #1
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff12 	bl	8001714 <setMotorDir>
 80018f0:	e02d      	b.n	800194e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d128      	bne.n	800194e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fdd6 	bl	80004b8 <__aeabi_f2d>
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
 8001910:	6838      	ldr	r0, [r7, #0]
 8001912:	f7fe fdd1 	bl	80004b8 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7fe ff4d 	bl	80007bc <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f7ff f89f 	bl	8000a74 <__aeabi_dcmpge>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800193c:	2101      	movs	r1, #1
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fee8 	bl	8001714 <setMotorDir>
 8001944:	e003      	b.n	800194e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fee3 	bl	8001714 <setMotorDir>
    }

    HAL_Delay(50);
 800194e:	2032      	movs	r0, #50	; 0x32
 8001950:	f003 fb20 	bl	8004f94 <HAL_Delay>
    brakeMotor(motor, 0);
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff feca 	bl	80016f0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800195c:	edd7 7a00 	vldr	s15, [r7]
 8001960:	eef0 7ae7 	vabs.f32	s15, s15
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fee5 	bl	8001738 <setMotorSpeed>

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bdb0      	pop	{r4, r5, r7, pc}

08001976 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f005 fcf8 	bl	8007380 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	799a      	ldrb	r2, [r3, #6]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	79db      	ldrb	r3, [r3, #7]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d004      	beq.n	80019ae <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80019a4:	f003 faea 	bl	8004f7c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80019ae:	f003 fae5 	bl	8004f7c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d209      	bcs.n	80019d4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	799a      	ldrb	r2, [r3, #6]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a1b      	ldrb	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e004      	b.n	80019de <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	799a      	ldrb	r2, [r3, #6]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 80019f0:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <MX_CAN1_Init+0xcc>)
 80019f2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 80019f6:	2209      	movs	r2, #9
 80019f8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a14:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a3c:	f003 face 	bl	8004fdc <HAL_CAN_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a46:	f001 fd7d 	bl	8003544 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	4619      	mov	r1, r3
 8001a76:	480e      	ldr	r0, [pc, #56]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a78:	f003 fccc 	bl	8005414 <HAL_CAN_ConfigFilter>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001a82:	f001 fd5f 	bl	8003544 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001a86:	2102      	movs	r1, #2
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a8a:	f004 f897 	bl	8005bbc <HAL_CAN_ActivateNotification>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001a94:	f001 fd56 	bl	8003544 <Error_Handler>
 8001a98:	e007      	b.n	8001aaa <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_CAN1_Init+0xc8>)
 8001a9c:	f003 fe08 	bl	80056b0 <HAL_CAN_Start>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001aa6:	f001 fd4d 	bl	8003544 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000360 	.word	0x20000360
 8001ab4:	40006400 	.word	0x40006400

08001ab8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_CAN_MspInit+0x94>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d133      	bne.n	8001b42 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_CAN_MspInit+0x98>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b12:	2303      	movs	r3, #3
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b22:	2309      	movs	r3, #9
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <HAL_CAN_MspInit+0x9c>)
 8001b2e:	f005 f8fb 	bl	8006d28 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2014      	movs	r0, #20
 8001b38:	f004 fb92 	bl	8006260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b3c:	2014      	movs	r0, #20
 8001b3e:	f004 fbbb 	bl	80062b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40006400 	.word	0x40006400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_DMA_Init+0x3c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <MX_DMA_Init+0x3c>)
 8001b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_DMA_Init+0x3c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	200c      	movs	r0, #12
 8001b80:	f004 fb6e 	bl	8006260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b84:	200c      	movs	r0, #12
 8001b86:	f004 fb97 	bl	80062b8 <HAL_NVIC_EnableIRQ>

}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <ENCODER_Init+0x24>)
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <ENCODER_Init+0x28>)
 8001ba0:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <ENCODER_Init+0x2c>)
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <ENCODER_Init+0x28>)
 8001ba6:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4804      	ldr	r0, [pc, #16]	; (8001bbc <ENCODER_Init+0x24>)
 8001bac:	f000 f83f 	bl	8001c2e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <ENCODER_Init+0x2c>)
 8001bb4:	f000 f83b 	bl	8001c2e <ENCODER_Set_TxHeader>

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000404 	.word	0x20000404
 8001bc0:	20000360 	.word	0x20000360
 8001bc4:	200003b0 	.word	0x200003b0

08001bc8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	785a      	ldrb	r2, [r3, #1]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	789a      	ldrb	r2, [r3, #2]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	78da      	ldrb	r2, [r3, #3]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	791a      	ldrb	r2, [r3, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	795a      	ldrb	r2, [r3, #5]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	799a      	ldrb	r2, [r3, #6]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	79da      	ldrb	r2, [r3, #7]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f103 0120 	add.w	r1, r3, #32
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3338      	adds	r3, #56	; 0x38
 8001cae:	f003 fd43 	bl	8005738 <HAL_CAN_AddTxMessage>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffd1 	bl	8001c6a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001cfe:	461a      	mov	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	4413      	add	r3, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	; 0x30
 8001d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a89      	ldr	r2, [pc, #548]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b87      	ldr	r3, [pc, #540]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a82      	ldr	r2, [pc, #520]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a7b      	ldr	r2, [pc, #492]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a74      	ldr	r2, [pc, #464]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b6e      	ldr	r3, [pc, #440]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a6d      	ldr	r2, [pc, #436]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b64      	ldr	r3, [pc, #400]	; (8001f68 <MX_GPIO_Init+0x244>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001de2:	2200      	movs	r2, #0
 8001de4:	213f      	movs	r1, #63	; 0x3f
 8001de6:	4861      	ldr	r0, [pc, #388]	; (8001f6c <MX_GPIO_Init+0x248>)
 8001de8:	f005 faf0 	bl	80073cc <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2110      	movs	r1, #16
 8001df0:	485f      	ldr	r0, [pc, #380]	; (8001f70 <MX_GPIO_Init+0x24c>)
 8001df2:	f005 faeb 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001df6:	2200      	movs	r2, #0
 8001df8:	219b      	movs	r1, #155	; 0x9b
 8001dfa:	485e      	ldr	r0, [pc, #376]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001dfc:	f005 fae6 	bl	80073cc <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001e06:	485c      	ldr	r0, [pc, #368]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001e08:	f005 fae0 	bl	80073cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001e12:	485a      	ldr	r0, [pc, #360]	; (8001f7c <MX_GPIO_Init+0x258>)
 8001e14:	f005 fada 	bl	80073cc <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e20:	2302      	movs	r3, #2
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4853      	ldr	r0, [pc, #332]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001e2c:	f004 ff7c 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e30:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e34:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	484c      	ldr	r0, [pc, #304]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001e46:	f004 ff6f 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e4a:	233f      	movs	r3, #63	; 0x3f
 8001e4c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4842      	ldr	r0, [pc, #264]	; (8001f6c <MX_GPIO_Init+0x248>)
 8001e62:	f004 ff61 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e66:	2310      	movs	r3, #16
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	483c      	ldr	r0, [pc, #240]	; (8001f70 <MX_GPIO_Init+0x24c>)
 8001e7e:	f004 ff53 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <MX_GPIO_Init+0x25c>)
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4836      	ldr	r0, [pc, #216]	; (8001f70 <MX_GPIO_Init+0x24c>)
 8001e96:	f004 ff47 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e9a:	239b      	movs	r3, #155	; 0x9b
 8001e9c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4830      	ldr	r0, [pc, #192]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001eb2:	f004 ff39 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001eb6:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	482a      	ldr	r0, [pc, #168]	; (8001f78 <MX_GPIO_Init+0x254>)
 8001ed0:	f004 ff2a 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001ed4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4820      	ldr	r0, [pc, #128]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001ef2:	f004 ff19 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001ef6:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001efa:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	481b      	ldr	r0, [pc, #108]	; (8001f7c <MX_GPIO_Init+0x258>)
 8001f10:	f004 ff0a 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <MX_GPIO_Init+0x258>)
 8001f2a:	f004 fefd 	bl	8006d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f3e:	2309      	movs	r3, #9
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	480a      	ldr	r0, [pc, #40]	; (8001f74 <MX_GPIO_Init+0x250>)
 8001f4a:	f004 feed 	bl	8006d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	2017      	movs	r0, #23
 8001f54:	f004 f984 	bl	8006260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f58:	2017      	movs	r0, #23
 8001f5a:	f004 f9ad 	bl	80062b8 <HAL_NVIC_EnableIRQ>

}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	10210000 	.word	0x10210000

08001f84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <MX_I2C1_Init+0x78>)
 8001f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <MX_I2C1_Init+0x7c>)
 8001f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fc2:	f005 fa4d 	bl	8007460 <HAL_I2C_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fcc:	f001 faba 	bl	8003544 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fd4:	f006 faa4 	bl	8008520 <HAL_I2CEx_ConfigAnalogFilter>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001fde:	f001 fab1 	bl	8003544 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_I2C1_Init+0x74>)
 8001fe6:	f006 fafb 	bl	80085e0 <HAL_I2CEx_ConfigDigitalFilter>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f001 faa8 	bl	8003544 <Error_Handler>
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000458 	.word	0x20000458
 8001ffc:	40005400 	.word	0x40005400
 8002000:	00061a80 	.word	0x00061a80

08002004 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_I2C_MspInit+0x84>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_I2C_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204c:	2301      	movs	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002054:	2304      	movs	r3, #4
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <HAL_I2C_MspInit+0x8c>)
 8002060:	f004 fe62 	bl	8006d28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_I2C_MspInit+0x88>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_I2C_MspInit+0x88>)
 800206e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002072:	6413      	str	r3, [r2, #64]	; 0x40
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40005400 	.word	0x40005400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020400 	.word	0x40020400
 8002094:	00000000 	.word	0x00000000

08002098 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800209e:	f002 ff07 	bl	8004eb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80020a2:	f000 fccd 	bl	8002a40 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 80020a6:	f007 f8f1 	bl	800928c <HAL_RCC_GetHCLKFreq>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4aa9      	ldr	r2, [pc, #676]	; (8002354 <main+0x2bc>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	099b      	lsrs	r3, r3, #6
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 f917 	bl	80062e8 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020ba:	2004      	movs	r0, #4
 80020bc:	f004 f920 	bl	8006300 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c8:	f004 f8ca 	bl	8006260 <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020cc:	f7ff fe2a 	bl	8001d24 <MX_GPIO_Init>
	MX_DMA_Init();
 80020d0:	f7ff fd42 	bl	8001b58 <MX_DMA_Init>
	MX_I2C1_Init();
 80020d4:	f7ff ff56 	bl	8001f84 <MX_I2C1_Init>
	MX_TIM1_Init();
 80020d8:	f001 fee8 	bl	8003eac <MX_TIM1_Init>
	MX_TIM2_Init();
 80020dc:	f001 ff86 	bl	8003fec <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80020e0:	f002 fa30 	bl	8004544 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80020e4:	f001 fffc 	bl	80040e0 <MX_TIM3_Init>
	MX_TIM8_Init();
 80020e8:	f002 f87c 	bl	80041e4 <MX_TIM8_Init>
	MX_CAN1_Init();
 80020ec:	f7ff fc7c 	bl	80019e8 <MX_CAN1_Init>
	MX_SPI1_Init();
 80020f0:	f001 fdd4 	bl	8003c9c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 80020f4:	f002 faca 	bl	800468c <joystick_Init>
	ADC_Init();
 80020f8:	f7ff fa58 	bl	80015ac <ADC_Init>
	ADC_DataRequest();
 80020fc:	f7ff fa98 	bl	8001630 <ADC_DataRequest>
	ENCODER_Init();
 8002100:	f7ff fd4a 	bl	8001b98 <ENCODER_Init>
//	  DWT_Init();

	uint32_t state_count = HAL_GetTick();
 8002104:	f002 ff3a 	bl	8004f7c <HAL_GetTick>
 8002108:	6078      	str	r0, [r7, #4]
	while (MPU6050_Init(&hi2c1) == 1)
 800210a:	e00a      	b.n	8002122 <main+0x8a>
	{
		if (HAL_GetTick() - state_count > 5000)
 800210c:	f002 ff36 	bl	8004f7c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <main+0x8a>
			Error_Handler();
 800211e:	f001 fa11 	bl	8003544 <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1)
 8002122:	488d      	ldr	r0, [pc, #564]	; (8002358 <main+0x2c0>)
 8002124:	f001 fa20 	bl	8003568 <MPU6050_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d0ee      	beq.n	800210c <main+0x74>
	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <main+0x2c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a8b      	ldr	r2, [pc, #556]	; (8002360 <main+0x2c8>)
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	4b87      	ldr	r3, [pc, #540]	; (800235c <main+0x2c4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a88      	ldr	r2, [pc, #544]	; (8002364 <main+0x2cc>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	ed93 7a00 	vldr	s14, [r3]
 800214a:	eef0 0a47 	vmov.f32	s1, s14
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	4885      	ldr	r0, [pc, #532]	; (8002368 <main+0x2d0>)
 8002154:	f002 fc62 	bl	8004a1c <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8002158:	4884      	ldr	r0, [pc, #528]	; (800236c <main+0x2d4>)
 800215a:	f007 fe95 	bl	8009e88 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 800215e:	2100      	movs	r1, #0
 8002160:	4882      	ldr	r0, [pc, #520]	; (800236c <main+0x2d4>)
 8002162:	f007 fff1 	bl	800a148 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002166:	2104      	movs	r1, #4
 8002168:	4880      	ldr	r0, [pc, #512]	; (800236c <main+0x2d4>)
 800216a:	f007 ffed 	bl	800a148 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <main+0x2d4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002178:	4b7c      	ldr	r3, [pc, #496]	; (800236c <main+0x2d4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002180:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002182:	487b      	ldr	r0, [pc, #492]	; (8002370 <main+0x2d8>)
 8002184:	f7ff fa80 	bl	8001688 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002188:	487a      	ldr	r0, [pc, #488]	; (8002374 <main+0x2dc>)
 800218a:	f7ff fa7d 	bl	8001688 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800218e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8002378 <main+0x2e0>
 8002192:	4877      	ldr	r0, [pc, #476]	; (8002370 <main+0x2d8>)
 8002194:	f7ff fb78 	bl	8001888 <runMotor>
	runMotor(&backMotor, 0);
 8002198:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002378 <main+0x2e0>
 800219c:	4875      	ldr	r0, [pc, #468]	; (8002374 <main+0x2dc>)
 800219e:	f7ff fb73 	bl	8001888 <runMotor>
	emBrakeMotor(0);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff fa92 	bl	80016cc <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 80021a8:	f7ff f90c 	bl	80013c4 <hubMotor_Init>
	send_HubMotor(0, 0);
 80021ac:	eddf 0a72 	vldr	s1, [pc, #456]	; 8002378 <main+0x2e0>
 80021b0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8002378 <main+0x2e0>
 80021b4:	f7ff f920 	bl	80013f8 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80021b8:	4b70      	ldr	r3, [pc, #448]	; (800237c <main+0x2e4>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <main+0x2e8>)
 80021c0:	ed93 7a00 	vldr	s14, [r3]
 80021c4:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <main+0x2ec>)
 80021c6:	edd3 6a00 	vldr	s13, [r3]
 80021ca:	eeb0 1a66 	vmov.f32	s2, s13
 80021ce:	eef0 0a47 	vmov.f32	s1, s14
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	4b6c      	ldr	r3, [pc, #432]	; (8002388 <main+0x2f0>)
 80021d8:	4a6c      	ldr	r2, [pc, #432]	; (800238c <main+0x2f4>)
 80021da:	496d      	ldr	r1, [pc, #436]	; (8002390 <main+0x2f8>)
 80021dc:	486d      	ldr	r0, [pc, #436]	; (8002394 <main+0x2fc>)
 80021de:	f7fe fe87 	bl	8000ef0 <pid_create>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a6c      	ldr	r2, [pc, #432]	; (8002398 <main+0x300>)
 80021e6:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 80021e8:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <main+0x300>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800239c <main+0x304>
 80021f0:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80023a0 <main+0x308>
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f807 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <main+0x300>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2101      	movs	r1, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ffcd 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 8002206:	4b64      	ldr	r3, [pc, #400]	; (8002398 <main+0x300>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f861 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002210:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <main+0x30c>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <main+0x310>)
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	4b63      	ldr	r3, [pc, #396]	; (80023ac <main+0x314>)
 800221e:	edd3 6a00 	vldr	s13, [r3]
 8002222:	eeb0 1a66 	vmov.f32	s2, s13
 8002226:	eef0 0a47 	vmov.f32	s1, s14
 800222a:	eeb0 0a67 	vmov.f32	s0, s15
 800222e:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <main+0x318>)
 8002230:	4a60      	ldr	r2, [pc, #384]	; (80023b4 <main+0x31c>)
 8002232:	4961      	ldr	r1, [pc, #388]	; (80023b8 <main+0x320>)
 8002234:	4861      	ldr	r0, [pc, #388]	; (80023bc <main+0x324>)
 8002236:	f7fe fe5b 	bl	8000ef0 <pid_create>
 800223a:	4603      	mov	r3, r0
 800223c:	4a60      	ldr	r2, [pc, #384]	; (80023c0 <main+0x328>)
 800223e:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 8002240:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <main+0x328>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	eddf 0a55 	vldr	s1, [pc, #340]	; 800239c <main+0x304>
 8002248:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80023a0 <main+0x308>
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe ffdb 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002252:	4b5b      	ldr	r3, [pc, #364]	; (80023c0 <main+0x328>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe ffa1 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 800225e:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <main+0x328>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f835 	bl	80012d2 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8002268:	f002 fe88 	bl	8004f7c <HAL_GetTick>
 800226c:	6038      	str	r0, [r7, #0]
	ENCODER_Get_Angle(&encoderBack);
 800226e:	4855      	ldr	r0, [pc, #340]	; (80023c4 <main+0x32c>)
 8002270:	f7ff fd23 	bl	8001cba <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 8002274:	4854      	ldr	r0, [pc, #336]	; (80023c8 <main+0x330>)
 8002276:	f7ff fd20 	bl	8001cba <ENCODER_Get_Angle>
	while (state_count++ < 1000)
 800227a:	e003      	b.n	8002284 <main+0x1ec>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800227c:	4953      	ldr	r1, [pc, #332]	; (80023cc <main+0x334>)
 800227e:	4836      	ldr	r0, [pc, #216]	; (8002358 <main+0x2c0>)
 8002280:	f001 f9ca 	bl	8003618 <MPU6050_Read_All>
	while (state_count++ < 1000)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800228e:	d3f5      	bcc.n	800227c <main+0x1e4>
	initial_angle = MPU6050.KalmanAngleX;
 8002290:	4b4e      	ldr	r3, [pc, #312]	; (80023cc <main+0x334>)
 8002292:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002296:	494e      	ldr	r1, [pc, #312]	; (80023d0 <main+0x338>)
 8002298:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
	emBrakeMotor(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fa13 	bl	80016cc <emBrakeMotor>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 80022a6:	f002 fe69 	bl	8004f7c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d0f9      	beq.n	80022a6 <main+0x20e>
		{
			ADC_DataRequest();
 80022b2:	f7ff f9bd 	bl	8001630 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 80022b6:	4843      	ldr	r0, [pc, #268]	; (80023c4 <main+0x32c>)
 80022b8:	f7ff fcd7 	bl	8001c6a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 80022bc:	4842      	ldr	r0, [pc, #264]	; (80023c8 <main+0x330>)
 80022be:	f7ff fcd4 	bl	8001c6a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 80022c2:	4942      	ldr	r1, [pc, #264]	; (80023cc <main+0x334>)
 80022c4:	4824      	ldr	r0, [pc, #144]	; (8002358 <main+0x2c0>)
 80022c6:	f001 f9a7 	bl	8003618 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 80022ca:	211e      	movs	r1, #30
 80022cc:	4841      	ldr	r0, [pc, #260]	; (80023d4 <main+0x33c>)
 80022ce:	f7ff fb52 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 80022d2:	211e      	movs	r1, #30
 80022d4:	4840      	ldr	r0, [pc, #256]	; (80023d8 <main+0x340>)
 80022d6:	f7ff fb4e 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 80022da:	211e      	movs	r1, #30
 80022dc:	483f      	ldr	r0, [pc, #252]	; (80023dc <main+0x344>)
 80022de:	f7ff fb4a 	bl	8001976 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 80022e2:	2105      	movs	r1, #5
 80022e4:	483e      	ldr	r0, [pc, #248]	; (80023e0 <main+0x348>)
 80022e6:	f7ff fb46 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80022ea:	2105      	movs	r1, #5
 80022ec:	483d      	ldr	r0, [pc, #244]	; (80023e4 <main+0x34c>)
 80022ee:	f7ff fb42 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022f2:	2105      	movs	r1, #5
 80022f4:	483c      	ldr	r0, [pc, #240]	; (80023e8 <main+0x350>)
 80022f6:	f7ff fb3e 	bl	8001976 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022fa:	2105      	movs	r1, #5
 80022fc:	483b      	ldr	r0, [pc, #236]	; (80023ec <main+0x354>)
 80022fe:	f7ff fb3a 	bl	8001976 <GPIO_Digital_Filtered_Input>
			//1. Climbing wheel extension
			//2. Wheelchair lifting/dropping
			//3. Climbing wheel retraction
			//---------------------------------------------------------------------------------------------------
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if (button3.state == 1 && front_touchdown == false
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <main+0x344>)
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 8134 	bne.w	8002574 <main+0x4dc>
 800230c:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <main+0x358>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 812c 	beq.w	8002574 <main+0x4dc>
					&& back_touchdown == false && lifting_mode == NORMAL)
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <main+0x35c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f083 0301 	eor.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8124 	beq.w	8002574 <main+0x4dc>
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <main+0x360>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 811f 	bne.w	8002574 <main+0x4dc>
			{
				//Stop the base wheel completely
				baseWheelSpeed.cur_r = 0;
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <main+0x2d0>)
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	605a      	str	r2, [r3, #4]
				baseWheelSpeed.cur_l = 0;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <main+0x2d0>)
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
				baseMotorCommand();
 8002346:	f000 fdb7 	bl	8002eb8 <baseMotorCommand>

				//Disengage the motor brake
				emBrakeMotor(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff f9be 	bl	80016cc <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 8002350:	e0df      	b.n	8002512 <main+0x47a>
 8002352:	bf00      	nop
 8002354:	10624dd3 	.word	0x10624dd3
 8002358:	20000458 	.word	0x20000458
 800235c:	20000108 	.word	0x20000108
 8002360:	0800fb6c 	.word	0x0800fb6c
 8002364:	0800fb78 	.word	0x0800fb78
 8002368:	200000d8 	.word	0x200000d8
 800236c:	200005f8 	.word	0x200005f8
 8002370:	20000000 	.word	0x20000000
 8002374:	20000034 	.word	0x20000034
 8002378:	00000000 	.word	0x00000000
 800237c:	2000011c 	.word	0x2000011c
 8002380:	20000120 	.word	0x20000120
 8002384:	20000124 	.word	0x20000124
 8002388:	20000288 	.word	0x20000288
 800238c:	20000284 	.word	0x20000284
 8002390:	20000280 	.word	0x20000280
 8002394:	20000568 	.word	0x20000568
 8002398:	20000564 	.word	0x20000564
 800239c:	42480000 	.word	0x42480000
 80023a0:	c2480000 	.word	0xc2480000
 80023a4:	20000128 	.word	0x20000128
 80023a8:	2000012c 	.word	0x2000012c
 80023ac:	20000130 	.word	0x20000130
 80023b0:	20000294 	.word	0x20000294
 80023b4:	20000290 	.word	0x20000290
 80023b8:	2000028c 	.word	0x2000028c
 80023bc:	20000520 	.word	0x20000520
 80023c0:	200005b0 	.word	0x200005b0
 80023c4:	20000404 	.word	0x20000404
 80023c8:	200003b0 	.word	0x200003b0
 80023cc:	200004c0 	.word	0x200004c0
 80023d0:	20000270 	.word	0x20000270
 80023d4:	200000a8 	.word	0x200000a8
 80023d8:	200000b8 	.word	0x200000b8
 80023dc:	200000c8 	.word	0x200000c8
 80023e0:	20000068 	.word	0x20000068
 80023e4:	20000078 	.word	0x20000078
 80023e8:	20000088 	.word	0x20000088
 80023ec:	20000098 	.word	0x20000098
 80023f0:	20000268 	.word	0x20000268
 80023f4:	20000269 	.word	0x20000269
 80023f8:	2000010c 	.word	0x2000010c
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 80023fc:	2105      	movs	r1, #5
 80023fe:	484f      	ldr	r0, [pc, #316]	; (800253c <main+0x4a4>)
 8002400:	f7ff fab9 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <main+0x380>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 800240a:	2105      	movs	r1, #5
 800240c:	484c      	ldr	r0, [pc, #304]	; (8002540 <main+0x4a8>)
 800240e:	f7ff fab2 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <main+0x386>
						front_touchdown = 1;
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <main+0x4ac>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 800241e:	2105      	movs	r1, #5
 8002420:	4849      	ldr	r0, [pc, #292]	; (8002548 <main+0x4b0>)
 8002422:	f7ff faa8 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <main+0x3a2>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 800242c:	2105      	movs	r1, #5
 800242e:	4847      	ldr	r0, [pc, #284]	; (800254c <main+0x4b4>)
 8002430:	f7ff faa1 	bl	8001976 <GPIO_Digital_Filtered_Input>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <main+0x3a8>
						back_touchdown = 1;
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <main+0x4b8>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1)
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <main+0x4b8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <main+0x3c6>
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <main+0x4ac>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <main+0x3c6>
						lifting_mode = CLIMB_UP;
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <main+0x4bc>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e00d      	b.n	800247a <main+0x3e2>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0)
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <main+0x4b8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <main+0x3e2>
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <main+0x4ac>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	f083 0301 	eor.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <main+0x3e2>
						lifting_mode = CLIMB_DOWN;
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <main+0x4bc>)
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]

					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <main+0x4c0>)
 800247c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <main+0x4c4>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f86f 	bl	8000568 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4614      	mov	r4, r2
 8002490:	461d      	mov	r5, r3
							+ (1 - exp_angle_filter) * initial_angle;
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <main+0x4c4>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f04f 0000 	mov.w	r0, #0
 800249c:	4930      	ldr	r1, [pc, #192]	; (8002560 <main+0x4c8>)
 800249e:	f7fd feab 	bl	80001f8 <__aeabi_dsub>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <main+0x4cc>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f85a 	bl	8000568 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fd fe9e 	bl	80001fc <__adddf3>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 80024c4:	4927      	ldr	r1, [pc, #156]	; (8002564 <main+0x4cc>)
 80024c6:	e9c1 2300 	strd	r2, r3, [r1]

					if (back_touchdown == false)
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <main+0x4b8>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <main+0x44c>
						runMotor(&backMotor, 5);
 80024d8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80024dc:	4822      	ldr	r0, [pc, #136]	; (8002568 <main+0x4d0>)
 80024de:	f7ff f9d3 	bl	8001888 <runMotor>
 80024e2:	e004      	b.n	80024ee <main+0x456>
					else
						runMotor(&backMotor, 0);
 80024e4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800256c <main+0x4d4>
 80024e8:	481f      	ldr	r0, [pc, #124]	; (8002568 <main+0x4d0>)
 80024ea:	f7ff f9cd 	bl	8001888 <runMotor>

					if (front_touchdown == false)
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <main+0x4ac>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	f083 0301 	eor.w	r3, r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <main+0x470>
						runMotor(&rearMotor, 5);
 80024fc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002500:	481b      	ldr	r0, [pc, #108]	; (8002570 <main+0x4d8>)
 8002502:	f7ff f9c1 	bl	8001888 <runMotor>
 8002506:	e004      	b.n	8002512 <main+0x47a>
					else
						runMotor(&rearMotor, 0);
 8002508:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800256c <main+0x4d4>
 800250c:	4818      	ldr	r0, [pc, #96]	; (8002570 <main+0x4d8>)
 800250e:	f7ff f9bb 	bl	8001888 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <main+0x4ac>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	f47f af6d 	bne.w	80023fc <main+0x364>
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <main+0x4b8>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f af65 	bne.w	80023fc <main+0x364>
				}

				HAL_Delay(500);
 8002532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002536:	f002 fd2d 	bl	8004f94 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 800253a:	e26d      	b.n	8002a18 <main+0x980>
 800253c:	20000068 	.word	0x20000068
 8002540:	20000078 	.word	0x20000078
 8002544:	20000268 	.word	0x20000268
 8002548:	20000088 	.word	0x20000088
 800254c:	20000098 	.word	0x20000098
 8002550:	20000269 	.word	0x20000269
 8002554:	2000010c 	.word	0x2000010c
 8002558:	200004c0 	.word	0x200004c0
 800255c:	20000110 	.word	0x20000110
 8002560:	3ff00000 	.word	0x3ff00000
 8002564:	20000270 	.word	0x20000270
 8002568:	20000034 	.word	0x20000034
 800256c:	00000000 	.word	0x00000000
 8002570:	20000000 	.word	0x20000000
			}
			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 8002574:	4bc0      	ldr	r3, [pc, #768]	; (8002878 <main+0x7e0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d117      	bne.n	80025ac <main+0x514>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	2108      	movs	r1, #8
 8002580:	48be      	ldr	r0, [pc, #760]	; (800287c <main+0x7e4>)
 8002582:	f004 ff23 	bl	80073cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	2110      	movs	r1, #16
 800258a:	48bc      	ldr	r0, [pc, #752]	; (800287c <main+0x7e4>)
 800258c:	f004 ff1e 	bl	80073cc <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 8002590:	48bb      	ldr	r0, [pc, #748]	; (8002880 <main+0x7e8>)
 8002592:	f002 fa6d 	bl	8004a70 <wheel_Control>
				baseMotorCommand();
 8002596:	f000 fc8f 	bl	8002eb8 <baseMotorCommand>
				front_touchdown = false;
 800259a:	4bba      	ldr	r3, [pc, #744]	; (8002884 <main+0x7ec>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 80025a0:	4bb9      	ldr	r3, [pc, #740]	; (8002888 <main+0x7f0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 80025a6:	4bb9      	ldr	r3, [pc, #740]	; (800288c <main+0x7f4>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
			}
			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 80025ac:	4bb2      	ldr	r3, [pc, #712]	; (8002878 <main+0x7e0>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	f040 811e 	bne.w	80027f2 <main+0x75a>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80025b6:	2201      	movs	r2, #1
 80025b8:	2108      	movs	r1, #8
 80025ba:	48b0      	ldr	r0, [pc, #704]	; (800287c <main+0x7e4>)
 80025bc:	f004 ff06 	bl	80073cc <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 80025c0:	4bb2      	ldr	r3, [pc, #712]	; (800288c <main+0x7f4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80ee 	beq.w	80027a6 <main+0x70e>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 80025ca:	4bb1      	ldr	r3, [pc, #708]	; (8002890 <main+0x7f8>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ff73 	bl	80004b8 <__aeabi_f2d>
 80025d2:	4604      	mov	r4, r0
 80025d4:	460d      	mov	r5, r1
 80025d6:	4baf      	ldr	r3, [pc, #700]	; (8002894 <main+0x7fc>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff6c 	bl	80004b8 <__aeabi_f2d>
 80025e0:	a39b      	add	r3, pc, #620	; (adr r3, 8002850 <main+0x7b8>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fd ffbf 	bl	8000568 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4ba8      	ldr	r3, [pc, #672]	; (8002898 <main+0x800>)
 80025f8:	f7fe f8e0 	bl	80007bc <__aeabi_ddiv>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	ec43 2b17 	vmov	d7, r2, r3
 8002604:	eeb0 0a47 	vmov.f32	s0, s14
 8002608:	eef0 0a67 	vmov.f32	s1, s15
 800260c:	f00a fe14 	bl	800d238 <cos>
 8002610:	ec53 2b10 	vmov	r2, r3, d0
 8002614:	4620      	mov	r0, r4
 8002616:	4629      	mov	r1, r5
 8002618:	f7fd ffa6 	bl	8000568 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4614      	mov	r4, r2
 8002622:	461d      	mov	r5, r3
 8002624:	4b9d      	ldr	r3, [pc, #628]	; (800289c <main+0x804>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff46 	bl	80004b8 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fde2 	bl	80001fc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <main+0x808>)
 8002646:	f7fd fdd7 	bl	80001f8 <__aeabi_dsub>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f7fe fa81 	bl	8000b58 <__aeabi_d2f>
 8002656:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 8002658:	4a92      	ldr	r2, [pc, #584]	; (80028a4 <main+0x80c>)
 800265a:	6013      	str	r3, [r2, #0]
					curb_height += 0.0205; //Small error correction 10%
 800265c:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <main+0x80c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff29 	bl	80004b8 <__aeabi_f2d>
 8002666:	a37c      	add	r3, pc, #496	; (adr r3, 8002858 <main+0x7c0>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fdc6 	bl	80001fc <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa6e 	bl	8000b58 <__aeabi_d2f>
 800267c:	4603      	mov	r3, r0
 800267e:	4a89      	ldr	r2, [pc, #548]	; (80028a4 <main+0x80c>)
 8002680:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 8002682:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80028a8 <main+0x810>
 8002686:	4b87      	ldr	r3, [pc, #540]	; (80028a4 <main+0x80c>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	ee17 0a90 	vmov	r0, s15
 8002694:	f7fd ff10 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 8002698:	a371      	add	r3, pc, #452	; (adr r3, 8002860 <main+0x7c8>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fdab 	bl	80001f8 <__aeabi_dsub>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fa55 	bl	8000b58 <__aeabi_d2f>
 80026ae:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026b0:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <main+0x814>)
 80026b2:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <main+0x814>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	eef1 7a67 	vneg.f32	s15, s15
 80026be:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80028b0 <main+0x818>
 80026c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026c6:	ee16 0a90 	vmov	r0, s13
 80026ca:	f7fd fef5 	bl	80004b8 <__aeabi_f2d>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ec43 2b10 	vmov	d0, r2, r3
 80026d6:	f00a fe5f 	bl	800d398 <acos>
 80026da:	ec53 2b10 	vmov	r2, r3, d0
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7fe fa39 	bl	8000b58 <__aeabi_d2f>
 80026e6:	ee07 0a10 	vmov	s14, r0
 80026ea:	eddf 7a72 	vldr	s15, [pc, #456]	; 80028b4 <main+0x81c>
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	ee17 0a90 	vmov	r0, s15
 80026f6:	f7fd fedf 	bl	80004b8 <__aeabi_f2d>
 80026fa:	a355      	add	r3, pc, #340	; (adr r3, 8002850 <main+0x7b8>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fe f85c 	bl	80007bc <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4b69      	ldr	r3, [pc, #420]	; (80028b8 <main+0x820>)
 8002712:	f7fd fd71 	bl	80001f8 <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fa1b 	bl	8000b58 <__aeabi_d2f>
 8002722:	4603      	mov	r3, r0
					back_lifting_angle =
 8002724:	4a65      	ldr	r2, [pc, #404]	; (80028bc <main+0x824>)
 8002726:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002728:	4b64      	ldr	r3, [pc, #400]	; (80028bc <main+0x824>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fec3 	bl	80004b8 <__aeabi_f2d>
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <main+0x828>)
 8002738:	f7fe f840 	bl	80007bc <__aeabi_ddiv>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <main+0x82c>)
 800274a:	f7fd ff0d 	bl	8000568 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe f9b7 	bl	8000ac8 <__aeabi_d2iz>
 800275a:	4603      	mov	r3, r0
 800275c:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <main+0x830>)
 800275e:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 8002760:	4b56      	ldr	r3, [pc, #344]	; (80028bc <main+0x824>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eef4 7a67 	vcmp.f32	s15, s15
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	d613      	bvs.n	8002798 <main+0x700>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 8002770:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <main+0x830>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <main+0x700>
								|| curb_height <= 0.05 )
 800277e:	4b49      	ldr	r3, [pc, #292]	; (80028a4 <main+0x80c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fe98 	bl	80004b8 <__aeabi_f2d>
 8002788:	a337      	add	r3, pc, #220	; (adr r3, 8002868 <main+0x7d0>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fe f967 	bl	8000a60 <__aeabi_dcmple>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <main+0x708>
					{
						lifting_mode = NORMAL;
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <main+0x7e0>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
						continue;
 800279e:	e13b      	b.n	8002a18 <main+0x980>
					}
					climb_first_iteration = false;
 80027a0:	4b3a      	ldr	r3, [pc, #232]	; (800288c <main+0x7f4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
				}

				if (!in_climb_process(MAX_FRONT_CLIMBING_ENC, back_encoder_input) && !(climbingForward(forward_distance)))
 80027a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <main+0x830>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 fda8 	bl	8003308 <in_climb_process>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80ac 	beq.w	800291e <main+0x886>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <main+0x834>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	eeb0 0a67 	vmov.f32	s0, s15
 80027d0:	f000 fb96 	bl	8002f00 <climbingForward>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 809e 	beq.w	800291e <main+0x886>
				{
					lifting_mode = RETRACTION;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <main+0x7e0>)
 80027e4:	2203      	movs	r2, #3
 80027e6:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80027e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ec:	f002 fbd2 	bl	8004f94 <HAL_Delay>
 80027f0:	e095      	b.n	800291e <main+0x886>
				}
			}

			else if (lifting_mode == CLIMB_DOWN)
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <main+0x7e0>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f040 8091 	bne.w	800291e <main+0x886>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80027fc:	2201      	movs	r2, #1
 80027fe:	2110      	movs	r1, #16
 8002800:	481e      	ldr	r0, [pc, #120]	; (800287c <main+0x7e4>)
 8002802:	f004 fde3 	bl	80073cc <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <main+0x7f4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d065      	beq.n	80028da <main+0x842>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <main+0x7fc>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 3.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe2e 	bl	8000474 <__aeabi_ui2d>
 8002818:	a315      	add	r3, pc, #84	; (adr r3, 8002870 <main+0x7d8>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fced 	bl	80001fc <__adddf3>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f94d 	bl	8000ac8 <__aeabi_d2iz>
 800282e:	4603      	mov	r3, r0
 8002830:	4a27      	ldr	r2, [pc, #156]	; (80028d0 <main+0x838>)
 8002832:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC)
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <main+0x838>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	f640 431c 	movw	r3, #3100	; 0xc1c
 800283e:	429a      	cmp	r2, r3
 8002840:	d948      	bls.n	80028d4 <main+0x83c>
					{
						lifting_mode = NORMAL;
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <main+0x7e0>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
						continue;
 8002848:	e0e6      	b.n	8002a18 <main+0x980>
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w
 8002850:	54442d18 	.word	0x54442d18
 8002854:	400921fb 	.word	0x400921fb
 8002858:	b645a1cb 	.word	0xb645a1cb
 800285c:	3f94fdf3 	.word	0x3f94fdf3
 8002860:	916872b0 	.word	0x916872b0
 8002864:	3faf7ced 	.word	0x3faf7ced
 8002868:	9999999a 	.word	0x9999999a
 800286c:	3fa99999 	.word	0x3fa99999
 8002870:	2c5f92c6 	.word	0x2c5f92c6
 8002874:	4052c5f9 	.word	0x4052c5f9
 8002878:	2000010c 	.word	0x2000010c
 800287c:	40020400 	.word	0x40020400
 8002880:	200000d8 	.word	0x200000d8
 8002884:	20000268 	.word	0x20000268
 8002888:	20000269 	.word	0x20000269
 800288c:	20000118 	.word	0x20000118
 8002890:	3eb2b021 	.word	0x3eb2b021
 8002894:	200003b0 	.word	0x200003b0
 8002898:	40668000 	.word	0x40668000
 800289c:	3e19999a 	.word	0x3e19999a
 80028a0:	3fb00000 	.word	0x3fb00000
 80028a4:	20000298 	.word	0x20000298
 80028a8:	3e19999a 	.word	0x3e19999a
 80028ac:	200002a0 	.word	0x200002a0
 80028b0:	3eb2b021 	.word	0x3eb2b021
 80028b4:	43340000 	.word	0x43340000
 80028b8:	403e0000 	.word	0x403e0000
 80028bc:	200002a4 	.word	0x200002a4
 80028c0:	40768000 	.word	0x40768000
 80028c4:	40c00000 	.word	0x40c00000
 80028c8:	200002a8 	.word	0x200002a8
 80028cc:	20000134 	.word	0x20000134
 80028d0:	2000029c 	.word	0x2000029c
					}
					climb_first_iteration = false;
 80028d4:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <main+0x984>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
				}

				if (!in_climb_process(front_climbDown_enc, MAX_BACK_CLIMBING_ENC) && !(climbingForward(forward_distance)))
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <main+0x988>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fd0f 	bl	8003308 <in_climb_process>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d013      	beq.n	800291e <main+0x886>
 80028f6:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <main+0x98c>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002900:	f000 fafe 	bl	8002f00 <climbingForward>
 8002904:	4603      	mov	r3, r0
 8002906:	f083 0301 	eor.w	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <main+0x886>
				{
					lifting_mode = RETRACTION;
 8002910:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <main+0x990>)
 8002912:	2203      	movs	r2, #3
 8002914:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800291a:	f002 fb3b 	bl	8004f94 <HAL_Delay>
				}
			}

			if (lifting_mode == RETRACTION)
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <main+0x990>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d12e      	bne.n	8002984 <main+0x8ec>
			{
				//retraction process
				goto_pos(MIN_BACK_ALLOWABLE_ENC + 300, backClimb_pid);
 8002926:	f641 3358 	movw	r3, #7000	; 0x1b58
 800292a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800292e:	461a      	mov	r2, r3
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <main+0x994>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f000 fbd2 	bl	80030e0 <goto_pos>
				goto_pos(MIN_FRONT_ALLOWABLE_ENC + 300, frontClimb_pid);
 800293c:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002940:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002944:	461a      	mov	r2, r3
 8002946:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <main+0x998>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f000 fbc7 	bl	80030e0 <goto_pos>
				if (fabs(speed[FRONT_INDEX] < 4) && fabs(speed[BACK_INDEX]) < 4)
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <main+0x99c>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800295c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	d50e      	bpl.n	8002984 <main+0x8ec>
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <main+0x99c>)
 8002968:	edd3 7a01 	vldr	s15, [r3, #4]
 800296c:	eef0 7ae7 	vabs.f32	s15, s15
 8002970:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	d502      	bpl.n	8002984 <main+0x8ec>
				{
					lifting_mode = NORMAL;
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <main+0x990>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
				}
			}

			if (fabs(speed[FRONT_INDEX]) < 4)
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <main+0x99c>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eef0 7ae7 	vabs.f32	s15, s15
 800298e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299a:	d503      	bpl.n	80029a4 <main+0x90c>
				speed[FRONT_INDEX] = 0;
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <main+0x99c>)
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 4)
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <main+0x99c>)
 80029a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80029aa:	eef0 7ae7 	vabs.f32	s15, s15
 80029ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80029b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d503      	bpl.n	80029c4 <main+0x92c>
				speed[BACK_INDEX] = 0;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <main+0x99c>)
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <main+0x99c>)
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	eeb0 0a67 	vmov.f32	s0, s15
 80029ce:	481a      	ldr	r0, [pc, #104]	; (8002a38 <main+0x9a0>)
 80029d0:	f7fe ff5a 	bl	8001888 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <main+0x99c>)
 80029d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80029da:	eeb0 0a67 	vmov.f32	s0, s15
 80029de:	4817      	ldr	r0, [pc, #92]	; (8002a3c <main+0x9a4>)
 80029e0:	f7fe ff52 	bl	8001888 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <main+0x99c>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d10b      	bne.n	8002a0c <main+0x974>
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <main+0x99c>)
 80029f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80029fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d103      	bne.n	8002a0c <main+0x974>
				emBrakeMotor(0);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fe61 	bl	80016cc <emBrakeMotor>
 8002a0a:	e002      	b.n	8002a12 <main+0x97a>
			else
				emBrakeMotor(1);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7fe fe5d 	bl	80016cc <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002a12:	f002 fab3 	bl	8004f7c <HAL_GetTick>
 8002a16:	6038      	str	r0, [r7, #0]
		if (HAL_GetTick() - prev_time >= 1)
 8002a18:	e445      	b.n	80022a6 <main+0x20e>
 8002a1a:	bf00      	nop
 8002a1c:	20000118 	.word	0x20000118
 8002a20:	2000029c 	.word	0x2000029c
 8002a24:	20000134 	.word	0x20000134
 8002a28:	2000010c 	.word	0x2000010c
 8002a2c:	200005b0 	.word	0x200005b0
 8002a30:	20000564 	.word	0x20000564
 8002a34:	20000278 	.word	0x20000278
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000034 	.word	0x20000034

08002a40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b094      	sub	sp, #80	; 0x50
 8002a44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002a46:	f107 0320 	add.w	r3, r7, #32
 8002a4a:	2230      	movs	r2, #48	; 0x30
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f00a fa48 	bl	800cee4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <SystemClock_Config+0xd8>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	; (8002b18 <SystemClock_Config+0xd8>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6413      	str	r3, [r2, #64]	; 0x40
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <SystemClock_Config+0xd8>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <SystemClock_Config+0xdc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <SystemClock_Config+0xdc>)
 8002a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <SystemClock_Config+0xdc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002ab4:	23b4      	movs	r3, #180	; 0xb4
 8002ab6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002abc:	2304      	movs	r3, #4
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac0:	f107 0320 	add.w	r3, r7, #32
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f005 fe3b 	bl	8008740 <HAL_RCC_OscConfig>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002ad0:	f000 fd38 	bl	8003544 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ad4:	f005 fde4 	bl	80086a0 <HAL_PWREx_EnableOverDrive>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8002ade:	f000 fd31 	bl	8003544 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ae2:	230f      	movs	r3, #15
 8002ae4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002af2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	2105      	movs	r1, #5
 8002b00:	4618      	mov	r0, r3
 8002b02:	f006 f93d 	bl	8008d80 <HAL_RCC_ClockConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8002b0c:	f000 fd1a 	bl	8003544 <Error_Handler>
	}
}
 8002b10:	bf00      	nop
 8002b12:	3750      	adds	r7, #80	; 0x50
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40007000 	.word	0x40007000

08002b20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d11c      	bne.n	8002b6a <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002b30:	f002 fa24 	bl	8004f7c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d916      	bls.n	8002b6e <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002b40:	480e      	ldr	r0, [pc, #56]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b42:	f7fe fd85 	bl	8001650 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b50:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x64>)
 8002b5c:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002b5e:	f002 fa0d 	bl	8004f7c <HAL_GetTick>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b66:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002b6e:	bf00      	nop
	}
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000264 	.word	0x20000264
 8002b7c:	20000554 	.word	0x20000554
 8002b80:	200005ac 	.word	0x200005ac
 8002b84:	200004b0 	.word	0x200004b0

08002b88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <HAL_UART_RxCpltCallback+0x10c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d175      	bne.n	8002c86 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bac:	789b      	ldrb	r3, [r3, #2]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bb6:	78db      	ldrb	r3, [r3, #3]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bc0:	791b      	ldrb	r3, [r3, #4]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bca:	795b      	ldrb	r3, [r3, #5]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bd4:	799b      	ldrb	r3, [r3, #6]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bde:	79db      	ldrb	r3, [r3, #7]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002be8:	7a1b      	ldrb	r3, [r3, #8]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bf2:	7a5b      	ldrb	r3, [r3, #9]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002bfc:	7a9b      	ldrb	r3, [r3, #10]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c06:	7adb      	ldrb	r3, [r3, #11]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c10:	7b1b      	ldrb	r3, [r3, #12]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c1a:	7b5b      	ldrb	r3, [r3, #13]
 8002c1c:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002c1e:	4413      	add	r3, r2
 8002c20:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c28:	7b9b      	ldrb	r3, [r3, #14]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d12b      	bne.n	8002c86 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2baa      	cmp	r3, #170	; 0xaa
 8002c34:	d127      	bne.n	8002c86 <HAL_UART_RxCpltCallback+0xfe>
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c38:	785b      	ldrb	r3, [r3, #1]
 8002c3a:	2ba4      	cmp	r3, #164	; 0xa4
 8002c3c:	d123      	bne.n	8002c86 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d11f      	bne.n	8002c86 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c48:	7a5b      	ldrb	r3, [r3, #9]
 8002c4a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c4e:	7a1b      	ldrb	r3, [r3, #8]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	441a      	add	r2, r3
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c56:	79db      	ldrb	r3, [r3, #7]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c5e:	7992      	ldrb	r2, [r2, #6]
 8002c60:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_UART_RxCpltCallback+0x114>)
 8002c64:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c68:	7b5b      	ldrb	r3, [r3, #13]
 8002c6a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c6e:	7b1b      	ldrb	r3, [r3, #12]
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	441a      	add	r2, r3
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c76:	7adb      	ldrb	r3, [r3, #11]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <HAL_UART_RxCpltCallback+0x110>)
 8002c7e:	7a92      	ldrb	r2, [r2, #10]
 8002c80:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002c82:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_UART_RxCpltCallback+0x114>)
 8002c84:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40004800 	.word	0x40004800
 8002c98:	2000059c 	.word	0x2000059c
 8002c9c:	200004b4 	.word	0x200004b4

08002ca0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a7b      	ldr	r2, [pc, #492]	; (8002e98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	f040 80e6 	bne.w	8002e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4a79      	ldr	r2, [pc, #484]	; (8002e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8002cb8:	2100      	movs	r1, #0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f002 fe60 	bl	8005980 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002cc0:	7a7b      	ldrb	r3, [r7, #9]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d144      	bne.n	8002d50 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	4975      	ldr	r1, [pc, #468]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe ff7b 	bl	8001bc8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002cd2:	4873      	ldr	r0, [pc, #460]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cd4:	f7fe fff1 	bl	8001cba <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 8002cd8:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 8002cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 8002ce0:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 8002ce4:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002ce6:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002ce8:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002cf4:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8002cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfc:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d04:	ee17 0a90 	vmov	r0, s15
 8002d08:	f7fd fbd6 	bl	80004b8 <__aeabi_f2d>
 8002d0c:	a35e      	add	r3, pc, #376	; (adr r3, 8002e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fa73 	bl	80001fc <__adddf3>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f7fd ff1b 	bl	8000b58 <__aeabi_d2f>
 8002d22:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002d24:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002d28:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d2a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d2e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	dd09      	ble.n	8002d50 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002d3c:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d3e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d42:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d4c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002d50:	7a7b      	ldrb	r3, [r7, #9]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	f040 8093 	bne.w	8002e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	4953      	ldr	r1, [pc, #332]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ff32 	bl	8001bc8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002d64:	4851      	ldr	r0, [pc, #324]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d66:	f7fe ffa8 	bl	8001cba <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002d6a:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002d72:	f247 522f 	movw	r2, #29999	; 0x752f
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d839      	bhi.n	8002dee <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002d7a:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002d82:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	0b5b      	lsrs	r3, r3, #13
 8002d8a:	f242 3133 	movw	r1, #9011	; 0x2333
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002d94:	4a45      	ldr	r2, [pc, #276]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d96:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002d98:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da4:	ee17 0a90 	vmov	r0, s15
 8002da8:	f7fd fb86 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002dac:	a338      	add	r3, pc, #224	; (adr r3, 8002e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f7fd fd03 	bl	80007bc <__aeabi_ddiv>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002dc4:	f7fd fbd0 	bl	8000568 <__aeabi_dmul>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	a32d      	add	r3, pc, #180	; (adr r3, 8002e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fa11 	bl	80001fc <__adddf3>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fd feb9 	bl	8000b58 <__aeabi_d2f>
 8002de6:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002de8:	4a30      	ldr	r2, [pc, #192]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002dea:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 8002dec:	e047      	b.n	8002e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fb3e 	bl	8000474 <__aeabi_ui2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	a124      	add	r1, pc, #144	; (adr r1, 8002e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e02:	f7fd f9f9 	bl	80001f8 <__aeabi_dsub>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7fd fe83 	bl	8000b18 <__aeabi_d2uiz>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e16:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e24:	ee17 0a90 	vmov	r0, s15
 8002e28:	f7fd fb46 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002e2c:	a318      	add	r3, pc, #96	; (adr r3, 8002e90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	f7fd fcc3 	bl	80007bc <__aeabi_ddiv>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002e44:	f7fd fb90 	bl	8000568 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	a30d      	add	r3, pc, #52	; (adr r3, 8002e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd f9d1 	bl	80001fc <__adddf3>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002e68:	f7fd f9c6 	bl	80001f8 <__aeabi_dsub>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fe70 	bl	8000b58 <__aeabi_d2f>
 8002e78:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	d0e56042 	.word	0xd0e56042
 8002e8c:	40424b22 	.word	0x40424b22
 8002e90:	9999999a 	.word	0x9999999a
 8002e94:	40c19999 	.word	0x40c19999
 8002e98:	20000360 	.word	0x20000360
 8002e9c:	200002ac 	.word	0x200002ac
 8002ea0:	20000404 	.word	0x20000404
 8002ea4:	46000000 	.word	0x46000000
 8002ea8:	43b40000 	.word	0x43b40000
 8002eac:	200003b0 	.word	0x200003b0
 8002eb0:	e8bb8111 	.word	0xe8bb8111
 8002eb4:	40768000 	.word	0x40768000

08002eb8 <baseMotorCommand>:

void baseMotorCommand(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <baseMotorCommand+0x40>)
 8002ebe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec6:	ee17 3a90 	vmov	r3, s15
 8002eca:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <baseMotorCommand+0x44>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <baseMotorCommand+0x40>)
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ede:	ee17 3a90 	vmov	r3, s15
 8002ee2:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <baseMotorCommand+0x44>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200000d8 	.word	0x200000d8
 8002efc:	200005f8 	.word	0x200005f8

08002f00 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 8002f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	ed87 0a01 	vstr	s0, [r7, #4]
	static int prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8002f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	db02      	blt.n	8002f20 <climbingForward+0x20>
 8002f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f1e:	e000      	b.n	8002f22 <climbingForward+0x22>
 8002f20:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <climbingForward+0x1b8>)
 8002f22:	617b      	str	r3, [r7, #20]

	if (first_loop)
 8002f24:	4b65      	ldr	r3, [pc, #404]	; (80030bc <climbingForward+0x1bc>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00f      	beq.n	8002f4c <climbingForward+0x4c>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 8002f2c:	4b64      	ldr	r3, [pc, #400]	; (80030c0 <climbingForward+0x1c0>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a64      	ldr	r2, [pc, #400]	; (80030c4 <climbingForward+0x1c4>)
 8002f32:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 8002f34:	f002 f822 	bl	8004f7c <HAL_GetTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <climbingForward+0x1c8>)
 8002f3e:	601a      	str	r2, [r3, #0]
		first_loop = false;
 8002f40:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <climbingForward+0x1bc>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 8002f46:	4a61      	ldr	r2, [pc, #388]	; (80030cc <climbingForward+0x1cc>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 8002f4c:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <climbingForward+0x1cc>)
 8002f4e:	ed93 7a00 	vldr	s14, [r3]
 8002f52:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	f2c0 8090 	blt.w	8003086 <climbingForward+0x186>
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <climbingForward+0x1bc>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	f083 0301 	eor.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8088 	beq.w	8003086 <climbingForward+0x186>
	{
		send_HubMotor(rps, rps);
 8002f76:	edd7 0a05 	vldr	s1, [r7, #20]
 8002f7a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f7e:	f7fe fa3b 	bl	80013f8 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 8002f82:	f001 fffb 	bl	8004f7c <HAL_GetTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a4f      	ldr	r2, [pc, #316]	; (80030c8 <climbingForward+0x1c8>)
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d977      	bls.n	8003082 <climbingForward+0x182>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 8002f92:	f001 fff3 	bl	8004f7c <HAL_GetTick>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <climbingForward+0x1c8>)
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa6:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80030d0 <climbingForward+0x1d0>
 8002faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fae:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002fb2:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <climbingForward+0x1c0>)
 8002fb4:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8002fb6:	4b43      	ldr	r3, [pc, #268]	; (80030c4 <climbingForward+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8002fc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fd0:	ee17 0a90 	vmov	r0, s15
 8002fd4:	f7fd fa70 	bl	80004b8 <__aeabi_f2d>
 8002fd8:	a333      	add	r3, pc, #204	; (adr r3, 80030a8 <climbingForward+0x1a8>)
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	f7fd fac3 	bl	8000568 <__aeabi_dmul>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <climbingForward+0x1d4>)
 8002ff0:	f7fd fbe4 	bl	80007bc <__aeabi_ddiv>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7fd fdac 	bl	8000b58 <__aeabi_d2f>
 8003000:	4603      	mov	r3, r0
 8003002:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <climbingForward+0x1cc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa55 	bl	80004b8 <__aeabi_f2d>
 800300e:	4604      	mov	r4, r0
 8003010:	460d      	mov	r5, r1
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7fd fa50 	bl	80004b8 <__aeabi_f2d>
 8003018:	a325      	add	r3, pc, #148	; (adr r3, 80030b0 <climbingForward+0x1b0>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f7fd faa3 	bl	8000568 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	6938      	ldr	r0, [r7, #16]
 800302c:	f7fd fa44 	bl	80004b8 <__aeabi_f2d>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4640      	mov	r0, r8
 8003036:	4649      	mov	r1, r9
 8003038:	f7fd fa96 	bl	8000568 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800304c:	f7fd fbb6 	bl	80007bc <__aeabi_ddiv>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd f8ce 	bl	80001f8 <__aeabi_dsub>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fd78 	bl	8000b58 <__aeabi_d2f>
 8003068:	4603      	mov	r3, r0
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <climbingForward+0x1cc>)
 800306c:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 800306e:	f001 ff85 	bl	8004f7c <HAL_GetTick>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <climbingForward+0x1c8>)
 8003078:	601a      	str	r2, [r3, #0]
			prev_enc = hub_encoder_feedback.encoder_2;
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <climbingForward+0x1c0>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <climbingForward+0x1c4>)
 8003080:	6013      	str	r3, [r2, #0]
		}
		return true;
 8003082:	2301      	movs	r3, #1
 8003084:	e009      	b.n	800309a <climbingForward+0x19a>
	}
	else
	{
		first_loop = true;
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <climbingForward+0x1bc>)
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 800308c:	eddf 0a12 	vldr	s1, [pc, #72]	; 80030d8 <climbingForward+0x1d8>
 8003090:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80030d8 <climbingForward+0x1d8>
 8003094:	f7fe f9b0 	bl	80013f8 <send_HubMotor>
		return false;
 8003098:	2300      	movs	r3, #0
	}
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030a4:	f3af 8000 	nop.w
 80030a8:	54442d18 	.word	0x54442d18
 80030ac:	400921fb 	.word	0x400921fb
 80030b0:	916872b0 	.word	0x916872b0
 80030b4:	3fbf7ced 	.word	0x3fbf7ced
 80030b8:	bf800000 	.word	0xbf800000
 80030bc:	20000138 	.word	0x20000138
 80030c0:	200004b4 	.word	0x200004b4
 80030c4:	200002c8 	.word	0x200002c8
 80030c8:	200002cc 	.word	0x200002cc
 80030cc:	200002d0 	.word	0x200002d0
 80030d0:	447a0000 	.word	0x447a0000
 80030d4:	40b00000 	.word	0x40b00000
	...

080030e0 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 80030e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;

	if (pid_t == frontClimb_pid)
 80030ec:	4b7a      	ldr	r3, [pc, #488]	; (80032d8 <goto_pos+0x1f8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d17c      	bne.n	80031f0 <goto_pos+0x110>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 80030f6:	4b79      	ldr	r3, [pc, #484]	; (80032dc <goto_pos+0x1fc>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 10
 80030fc:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <goto_pos+0x1f8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd ff37 	bl	8000f74 <pid_need_compute>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d06b      	beq.n	80031e4 <goto_pos+0x104>
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f9be 	bl	8000494 <__aeabi_i2d>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4690      	mov	r8, r2
 800311e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <goto_pos+0x200>)
 8003128:	4640      	mov	r0, r8
 800312a:	4649      	mov	r1, r9
 800312c:	f7fd fcac 	bl	8000a88 <__aeabi_dcmpgt>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d056      	beq.n	80031e4 <goto_pos+0x104>
				&& ((encoderFront.encoder_pos >= 0 && encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
 8003136:	4b69      	ldr	r3, [pc, #420]	; (80032dc <goto_pos+0x1fc>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f640 421c 	movw	r2, #3100	; 0xc1c
 800313e:	4293      	cmp	r3, r2
 8003140:	d30b      	bcc.n	800315a <goto_pos+0x7a>
						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC && encoderFront.encoder_pos <= 4096 * FRONT_GEAR_RATIO)))
 8003142:	4b66      	ldr	r3, [pc, #408]	; (80032dc <goto_pos+0x1fc>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f641 3258 	movw	r2, #7000	; 0x1b58
 800314a:	4293      	cmp	r3, r2
 800314c:	d94a      	bls.n	80031e4 <goto_pos+0x104>
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <goto_pos+0x1fc>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f242 3233 	movw	r2, #9011	; 0x2333
 8003156:	4293      	cmp	r3, r2
 8003158:	d844      	bhi.n	80031e4 <goto_pos+0x104>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003160:	4293      	cmp	r3, r2
 8003162:	d90f      	bls.n	8003184 <goto_pos+0xa4>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7fd f995 	bl	8000494 <__aeabi_i2d>
 800316a:	a359      	add	r3, pc, #356	; (adr r3, 80032d0 <goto_pos+0x1f0>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f842 	bl	80001f8 <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7fd fca4 	bl	8000ac8 <__aeabi_d2iz>
 8003180:	4603      	mov	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f640 421c 	movw	r2, #3100	; 0xc1c
 800318a:	4293      	cmp	r3, r2
 800318c:	d30f      	bcc.n	80031ae <goto_pos+0xce>
				enc -= 4096 * FRONT_GEAR_RATIO;
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd f980 	bl	8000494 <__aeabi_i2d>
 8003194:	a34e      	add	r3, pc, #312	; (adr r3, 80032d0 <goto_pos+0x1f0>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f7fd f82d 	bl	80001f8 <__aeabi_dsub>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fd fc8f 	bl	8000ac8 <__aeabi_d2iz>
 80031aa:	4603      	mov	r3, r0
 80031ac:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b8:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <goto_pos+0x204>)
 80031ba:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <goto_pos+0x208>)
 80031ca:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 80031ce:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <goto_pos+0x1f8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fee3 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 80031d8:	4b44      	ldr	r3, [pc, #272]	; (80032ec <goto_pos+0x20c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <goto_pos+0x210>)
 80031de:	6013      	str	r3, [r2, #0]
			return true;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e06f      	b.n	80032c4 <goto_pos+0x1e4>

		}
		else
		{
			speed[FRONT_INDEX] = 0;
 80031e4:	4b42      	ldr	r3, [pc, #264]	; (80032f0 <goto_pos+0x210>)
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
			return false;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e069      	b.n	80032c4 <goto_pos+0x1e4>
		}
	}
	else if (pid_t == backClimb_pid)
 80031f0:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <goto_pos+0x214>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d163      	bne.n	80032c2 <goto_pos+0x1e2>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <goto_pos+0x218>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 10
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <goto_pos+0x214>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd feb5 	bl	8000f74 <pid_need_compute>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d052      	beq.n	80032b6 <goto_pos+0x1d6>
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f93c 	bl	8000494 <__aeabi_i2d>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <goto_pos+0x200>)
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fd fc2a 	bl	8000a88 <__aeabi_dcmpgt>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03d      	beq.n	80032b6 <goto_pos+0x1d6>
				&& ((encoderBack.encoder_pos >= 0 && encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
 800323a:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <goto_pos+0x218>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003242:	4293      	cmp	r3, r2
 8003244:	d30a      	bcc.n	800325c <goto_pos+0x17c>
						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC && encoderBack.encoder_pos <= 4096 * BACK_GEAR_RATIO)))
 8003246:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <goto_pos+0x218>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800324e:	4293      	cmp	r3, r2
 8003250:	d931      	bls.n	80032b6 <goto_pos+0x1d6>
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <goto_pos+0x218>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325a:	d82c      	bhi.n	80032b6 <goto_pos+0x1d6>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003262:	4293      	cmp	r3, r2
 8003264:	d903      	bls.n	800326e <goto_pos+0x18e>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800326c:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003274:	4293      	cmp	r3, r2
 8003276:	d303      	bcc.n	8003280 <goto_pos+0x1a0>
				enc -= 4096 * BACK_GEAR_RATIO;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800327e:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <goto_pos+0x21c>)
 800328c:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329a:	4b19      	ldr	r3, [pc, #100]	; (8003300 <goto_pos+0x220>)
 800329c:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <goto_pos+0x214>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd fe7a 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <goto_pos+0x224>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <goto_pos+0x210>)
 80032b0:	6053      	str	r3, [r2, #4]
			return true;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e006      	b.n	80032c4 <goto_pos+0x1e4>
		}
		else
		{
			speed[BACK_INDEX] = 0;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <goto_pos+0x210>)
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
			return false;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <goto_pos+0x1e4>
		}
	}
	return false;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032ce:	bf00      	nop
 80032d0:	9999999a 	.word	0x9999999a
 80032d4:	40c19999 	.word	0x40c19999
 80032d8:	20000564 	.word	0x20000564
 80032dc:	200003b0 	.word	0x200003b0
 80032e0:	40240000 	.word	0x40240000
 80032e4:	20000288 	.word	0x20000288
 80032e8:	20000280 	.word	0x20000280
 80032ec:	20000284 	.word	0x20000284
 80032f0:	20000278 	.word	0x20000278
 80032f4:	200005b0 	.word	0x200005b0
 80032f8:	20000404 	.word	0x20000404
 80032fc:	20000294 	.word	0x20000294
 8003300:	2000028c 	.word	0x2000028c
 8003304:	20000290 	.word	0x20000290

08003308 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc){
 8003308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	613b      	str	r3, [r7, #16]

	if (first_loop)
 800331a:	4b7f      	ldr	r3, [pc, #508]	; (8003518 <in_climb_process+0x210>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 8003322:	4b7e      	ldr	r3, [pc, #504]	; (800351c <in_climb_process+0x214>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	4a7e      	ldr	r2, [pc, #504]	; (8003520 <in_climb_process+0x218>)
 8003328:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 800332a:	f001 fe27 	bl	8004f7c <HAL_GetTick>
 800332e:	4603      	mov	r3, r0
 8003330:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <in_climb_process+0x21c>)
 8003332:	6013      	str	r3, [r2, #0]
		first_loop = false;
 8003334:	4b78      	ldr	r3, [pc, #480]	; (8003518 <in_climb_process+0x210>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 800333a:	4b7b      	ldr	r3, [pc, #492]	; (8003528 <in_climb_process+0x220>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fecd 	bl	80030e0 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 8003346:	4b79      	ldr	r3, [pc, #484]	; (800352c <in_climb_process+0x224>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	6838      	ldr	r0, [r7, #0]
 800334e:	f7ff fec7 	bl	80030e0 <goto_pos>

	if (fabs(speed[FRONT_INDEX] >= 4)
 8003352:	4b77      	ldr	r3, [pc, #476]	; (8003530 <in_climb_process+0x228>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	da09      	bge.n	800337a <in_climb_process+0x72>
			|| fabs(speed[BACK_INDEX] >= 4))
 8003366:	4b72      	ldr	r3, [pc, #456]	; (8003530 <in_climb_process+0x228>)
 8003368:	edd3 7a01 	vldr	s15, [r3, #4]
 800336c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	db02      	blt.n	8003380 <in_climb_process+0x78>
		is_lifting = true;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
 800337e:	e001      	b.n	8003384 <in_climb_process+0x7c>
	else
		is_lifting = false;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 809d 	beq.w	80034c6 <in_climb_process+0x1be>
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <in_climb_process+0x228>)
 800338e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003392:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	f000 8094 	beq.w	80034c6 <in_climb_process+0x1be>
	{
		double dt = (HAL_GetTick() - prev_angle_tick)
 800339e:	f001 fded 	bl	8004f7c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <in_climb_process+0x21c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
				/ (float) FREQUENCY;
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003534 <in_climb_process+0x22c>
 80033b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
		double dt = (HAL_GetTick() - prev_angle_tick)
 80033ba:	ee16 0a90 	vmov	r0, s13
 80033be:	f7fd f87b 	bl	80004b8 <__aeabi_f2d>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle))
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <in_climb_process+0x230>)
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f873 	bl	80004b8 <__aeabi_f2d>
 80033d2:	4604      	mov	r4, r0
 80033d4:	460d      	mov	r5, r1
 80033d6:	4b52      	ldr	r3, [pc, #328]	; (8003520 <in_climb_process+0x218>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f86c 	bl	80004b8 <__aeabi_f2d>
 80033e0:	a349      	add	r3, pc, #292	; (adr r3, 8003508 <in_climb_process+0x200>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd f8bf 	bl	8000568 <__aeabi_dmul>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	4b51      	ldr	r3, [pc, #324]	; (800353c <in_climb_process+0x234>)
 80033f8:	f7fd f9e0 	bl	80007bc <__aeabi_ddiv>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	ec43 2b17 	vmov	d7, r2, r3
 8003404:	eeb0 0a47 	vmov.f32	s0, s14
 8003408:	eef0 0a67 	vmov.f32	s1, s15
 800340c:	f009 ff70 	bl	800d2f0 <sin>
 8003410:	ec59 8b10 	vmov	r8, r9, d0
						- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <in_climb_process+0x214>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f84d 	bl	80004b8 <__aeabi_f2d>
 800341e:	a33a      	add	r3, pc, #232	; (adr r3, 8003508 <in_climb_process+0x200>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fd f8a0 	bl	8000568 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	4b41      	ldr	r3, [pc, #260]	; (800353c <in_climb_process+0x234>)
 8003436:	f7fd f9c1 	bl	80007bc <__aeabi_ddiv>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	ec43 2b17 	vmov	d7, r2, r3
 8003442:	eeb0 0a47 	vmov.f32	s0, s14
 8003446:	eef0 0a67 	vmov.f32	s1, s15
 800344a:	f009 ff51 	bl	800d2f0 <sin>
 800344e:	ec53 2b10 	vmov	r2, r3, d0
 8003452:	4640      	mov	r0, r8
 8003454:	4649      	mov	r1, r9
 8003456:	f7fc fecf 	bl	80001f8 <__aeabi_dsub>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
				* (sin(TO_RAD(prev_angle))
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f7fd f881 	bl	8000568 <__aeabi_dmul>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
						- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 800346e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003472:	f7fd f9a3 	bl	80007bc <__aeabi_ddiv>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f7fd fb6b 	bl	8000b58 <__aeabi_d2f>
 8003482:	4603      	mov	r3, r0
 8003484:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed
				/ (HUB_DIAMETER / 2);
 8003486:	6938      	ldr	r0, [r7, #16]
 8003488:	f7fd f816 	bl	80004b8 <__aeabi_f2d>
 800348c:	a320      	add	r3, pc, #128	; (adr r3, 8003510 <in_climb_process+0x208>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd f993 	bl	80007bc <__aeabi_ddiv>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
		climbForward_speed = climbForward_speed
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd fb5b 	bl	8000b58 <__aeabi_d2f>
 80034a2:	4603      	mov	r3, r0
 80034a4:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 80034a6:	edd7 0a04 	vldr	s1, [r7, #16]
 80034aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80034ae:	f7fd ffa3 	bl	80013f8 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <in_climb_process+0x214>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <in_climb_process+0x218>)
 80034b8:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 80034ba:	f001 fd5f 	bl	8004f7c <HAL_GetTick>
 80034be:	4603      	mov	r3, r0
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <in_climb_process+0x21c>)
 80034c2:	6013      	str	r3, [r2, #0]
	{
 80034c4:	e010      	b.n	80034e8 <in_climb_process+0x1e0>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <in_climb_process+0x1e0>
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <in_climb_process+0x228>)
 80034ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80034d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	d105      	bne.n	80034e8 <in_climb_process+0x1e0>
		send_HubMotor(0, 0);
 80034dc:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003540 <in_climb_process+0x238>
 80034e0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003540 <in_climb_process+0x238>
 80034e4:	f7fd ff88 	bl	80013f8 <send_HubMotor>

	if (!is_lifting) first_loop = true;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <in_climb_process+0x1f2>
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <in_climb_process+0x210>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]

}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003506:	bf00      	nop
 8003508:	54442d18 	.word	0x54442d18
 800350c:	400921fb 	.word	0x400921fb
 8003510:	916872b0 	.word	0x916872b0
 8003514:	3faf7ced 	.word	0x3faf7ced
 8003518:	20000139 	.word	0x20000139
 800351c:	20000404 	.word	0x20000404
 8003520:	200002d4 	.word	0x200002d4
 8003524:	200002d8 	.word	0x200002d8
 8003528:	20000564 	.word	0x20000564
 800352c:	200005b0 	.word	0x200005b0
 8003530:	20000278 	.word	0x20000278
 8003534:	447a0000 	.word	0x447a0000
 8003538:	3eb2b021 	.word	0x3eb2b021
 800353c:	40668000 	.word	0x40668000
 8003540:	00000000 	.word	0x00000000

08003544 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af04      	add	r7, sp, #16
 800356e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003570:	2364      	movs	r3, #100	; 0x64
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	2301      	movs	r3, #1
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	f107 030f 	add.w	r3, r7, #15
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2301      	movs	r3, #1
 8003580:	2275      	movs	r2, #117	; 0x75
 8003582:	21d0      	movs	r1, #208	; 0xd0
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f004 fa3d 	bl	8007a04 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b68      	cmp	r3, #104	; 0x68
 800358e:	d13d      	bne.n	800360c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003594:	2364      	movs	r3, #100	; 0x64
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	2301      	movs	r3, #1
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	f107 030e 	add.w	r3, r7, #14
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	226b      	movs	r2, #107	; 0x6b
 80035a6:	21d0      	movs	r1, #208	; 0xd0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f004 f925 	bl	80077f8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80035ae:	2307      	movs	r3, #7
 80035b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80035b2:	2364      	movs	r3, #100	; 0x64
 80035b4:	9302      	str	r3, [sp, #8]
 80035b6:	2301      	movs	r3, #1
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	f107 030e 	add.w	r3, r7, #14
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2301      	movs	r3, #1
 80035c2:	2219      	movs	r2, #25
 80035c4:	21d0      	movs	r1, #208	; 0xd0
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f004 f916 	bl	80077f8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80035d0:	2364      	movs	r3, #100	; 0x64
 80035d2:	9302      	str	r3, [sp, #8]
 80035d4:	2301      	movs	r3, #1
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	f107 030e 	add.w	r3, r7, #14
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2301      	movs	r3, #1
 80035e0:	221c      	movs	r2, #28
 80035e2:	21d0      	movs	r1, #208	; 0xd0
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f004 f907 	bl	80077f8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80035ee:	2364      	movs	r3, #100	; 0x64
 80035f0:	9302      	str	r3, [sp, #8]
 80035f2:	2301      	movs	r3, #1
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	f107 030e 	add.w	r3, r7, #14
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2301      	movs	r3, #1
 80035fe:	221b      	movs	r2, #27
 8003600:	21d0      	movs	r1, #208	; 0xd0
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f004 f8f8 	bl	80077f8 <HAL_I2C_Mem_Write>
        return 0;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <MPU6050_Init+0xa6>
    }
    return 1;
 800360c:	2301      	movs	r3, #1
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b094      	sub	sp, #80	; 0x50
 800361e:	af04      	add	r7, sp, #16
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003624:	2364      	movs	r3, #100	; 0x64
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	230e      	movs	r3, #14
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f107 0308 	add.w	r3, r7, #8
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2301      	movs	r3, #1
 8003634:	223b      	movs	r2, #59	; 0x3b
 8003636:	21d0      	movs	r1, #208	; 0xd0
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f004 f9e3 	bl	8007a04 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800363e:	7a3b      	ldrb	r3, [r7, #8]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	b21a      	sxth	r2, r3
 8003644:	7a7b      	ldrb	r3, [r7, #9]
 8003646:	b21b      	sxth	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b21a      	sxth	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003650:	7abb      	ldrb	r3, [r7, #10]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b21a      	sxth	r2, r3
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	b21b      	sxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	b21a      	sxth	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8003662:	7b3b      	ldrb	r3, [r7, #12]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	b21a      	sxth	r2, r3
 8003668:	7b7b      	ldrb	r3, [r7, #13]
 800366a:	b21b      	sxth	r3, r3
 800366c:	4313      	orrs	r3, r2
 800366e:	b21a      	sxth	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	b21a      	sxth	r2, r3
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	b21b      	sxth	r3, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8003682:	7c3b      	ldrb	r3, [r7, #16]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	b21a      	sxth	r2, r3
 8003688:	7c7b      	ldrb	r3, [r7, #17]
 800368a:	b21b      	sxth	r3, r3
 800368c:	4313      	orrs	r3, r2
 800368e:	b21a      	sxth	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8003694:	7cbb      	ldrb	r3, [r7, #18]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	b21a      	sxth	r2, r3
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	b21b      	sxth	r3, r3
 800369e:	4313      	orrs	r3, r2
 80036a0:	b21a      	sxth	r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80036a6:	7d3b      	ldrb	r3, [r7, #20]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	b21a      	sxth	r2, r3
 80036ac:	7d7b      	ldrb	r3, [r7, #21]
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b21a      	sxth	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc fee8 	bl	8000494 <__aeabi_i2d>
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	4bbd      	ldr	r3, [pc, #756]	; (80039c0 <MPU6050_Read_All+0x3a8>)
 80036ca:	f7fd f877 	bl	80007bc <__aeabi_ddiv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fc fed8 	bl	8000494 <__aeabi_i2d>
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	4bb5      	ldr	r3, [pc, #724]	; (80039c0 <MPU6050_Read_All+0x3a8>)
 80036ea:	f7fd f867 	bl	80007bc <__aeabi_ddiv>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc fec8 	bl	8000494 <__aeabi_i2d>
 8003704:	a3a8      	add	r3, pc, #672	; (adr r3, 80039a8 <MPU6050_Read_All+0x390>)
 8003706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370a:	f7fd f857 	bl	80007bc <__aeabi_ddiv>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003718:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003724:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80039c4 <MPU6050_Read_All+0x3ac>
 8003728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800372c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80039c8 <MPU6050_Read_All+0x3b0>
 8003730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fc fea7 	bl	8000494 <__aeabi_i2d>
 8003746:	a39a      	add	r3, pc, #616	; (adr r3, 80039b0 <MPU6050_Read_All+0x398>)
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f7fd f836 	bl	80007bc <__aeabi_ddiv>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003760:	4618      	mov	r0, r3
 8003762:	f7fc fe97 	bl	8000494 <__aeabi_i2d>
 8003766:	a392      	add	r3, pc, #584	; (adr r3, 80039b0 <MPU6050_Read_All+0x398>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fd f826 	bl	80007bc <__aeabi_ddiv>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fe87 	bl	8000494 <__aeabi_i2d>
 8003786:	a38a      	add	r3, pc, #552	; (adr r3, 80039b0 <MPU6050_Read_All+0x398>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fd f816 	bl	80007bc <__aeabi_ddiv>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800379a:	f001 fbef 	bl	8004f7c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b8a      	ldr	r3, [pc, #552]	; (80039cc <MPU6050_Read_All+0x3b4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fe64 	bl	8000474 <__aeabi_ui2d>
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	4b87      	ldr	r3, [pc, #540]	; (80039d0 <MPU6050_Read_All+0x3b8>)
 80037b2:	f7fd f803 	bl	80007bc <__aeabi_ddiv>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80037be:	f001 fbdd 	bl	8004f7c <HAL_GetTick>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4a81      	ldr	r2, [pc, #516]	; (80039cc <MPU6050_Read_All+0x3b4>)
 80037c6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ce:	461a      	mov	r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e0:	4619      	mov	r1, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037e8:	fb03 f301 	mul.w	r3, r3, r1
 80037ec:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fe50 	bl	8000494 <__aeabi_i2d>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	ec43 2b10 	vmov	d0, r2, r3
 80037fc:	f009 feb6 	bl	800d56c <sqrt>
 8003800:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003810:	f7fd f912 	bl	8000a38 <__aeabi_dcmpeq>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11f      	bne.n	800385a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fe37 	bl	8000494 <__aeabi_i2d>
 8003826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800382a:	f7fc ffc7 	bl	80007bc <__aeabi_ddiv>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	ec43 2b17 	vmov	d7, r2, r3
 8003836:	eeb0 0a47 	vmov.f32	s0, s14
 800383a:	eef0 0a67 	vmov.f32	s1, s15
 800383e:	f009 fb5b 	bl	800cef8 <atan>
 8003842:	ec51 0b10 	vmov	r0, r1, d0
 8003846:	a35c      	add	r3, pc, #368	; (adr r3, 80039b8 <MPU6050_Read_All+0x3a0>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f7fc fe8c 	bl	8000568 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003858:	e005      	b.n	8003866 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386c:	425b      	negs	r3, r3
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fe10 	bl	8000494 <__aeabi_i2d>
 8003874:	4682      	mov	sl, r0
 8003876:	468b      	mov	fp, r1
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fe08 	bl	8000494 <__aeabi_i2d>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	ec43 2b11 	vmov	d1, r2, r3
 800388c:	ec4b ab10 	vmov	d0, sl, fp
 8003890:	f009 fdbc 	bl	800d40c <atan2>
 8003894:	ec51 0b10 	vmov	r0, r1, d0
 8003898:	a347      	add	r3, pc, #284	; (adr r3, 80039b8 <MPU6050_Read_All+0x3a0>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fe63 	bl	8000568 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <MPU6050_Read_All+0x3bc>)
 80038b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038b4:	f7fd f8ca 	bl	8000a4c <__aeabi_dcmplt>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <MPU6050_Read_All+0x2bc>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <MPU6050_Read_All+0x3c0>)
 80038ca:	f7fd f8dd 	bl	8000a88 <__aeabi_dcmpgt>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d114      	bne.n	80038fe <MPU6050_Read_All+0x2e6>
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <MPU6050_Read_All+0x3c0>)
 80038da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038de:	f7fd f8d3 	bl	8000a88 <__aeabi_dcmpgt>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <MPU6050_Read_All+0x2fc>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <MPU6050_Read_All+0x3bc>)
 80038f4:	f7fd f8aa 	bl	8000a4c <__aeabi_dcmplt>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80038fe:	4937      	ldr	r1, [pc, #220]	; (80039dc <MPU6050_Read_All+0x3c4>)
 8003900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003904:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003912:	e014      	b.n	800393e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800391a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800391e:	eeb0 1a47 	vmov.f32	s2, s14
 8003922:	eef0 1a67 	vmov.f32	s3, s15
 8003926:	ed97 0b06 	vldr	d0, [r7, #24]
 800392a:	482c      	ldr	r0, [pc, #176]	; (80039dc <MPU6050_Read_All+0x3c4>)
 800392c:	f000 f85a 	bl	80039e4 <Kalman_getAngle>
 8003930:	eeb0 7a40 	vmov.f32	s14, s0
 8003934:	eef0 7a60 	vmov.f32	s15, s1
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003944:	4690      	mov	r8, r2
 8003946:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <MPU6050_Read_All+0x3c0>)
 8003950:	4640      	mov	r0, r8
 8003952:	4649      	mov	r1, r9
 8003954:	f7fd f898 	bl	8000a88 <__aeabi_dcmpgt>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003964:	4614      	mov	r4, r2
 8003966:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003976:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800397a:	eeb0 1a47 	vmov.f32	s2, s14
 800397e:	eef0 1a67 	vmov.f32	s3, s15
 8003982:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003986:	4816      	ldr	r0, [pc, #88]	; (80039e0 <MPU6050_Read_All+0x3c8>)
 8003988:	f000 f82c 	bl	80039e4 <Kalman_getAngle>
 800398c:	eeb0 7a40 	vmov.f32	s14, s0
 8003990:	eef0 7a60 	vmov.f32	s15, s1
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800399a:	bf00      	nop
 800399c:	3740      	adds	r7, #64	; 0x40
 800399e:	46bd      	mov	sp, r7
 80039a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a4:	f3af 8000 	nop.w
 80039a8:	00000000 	.word	0x00000000
 80039ac:	40cc2900 	.word	0x40cc2900
 80039b0:	00000000 	.word	0x00000000
 80039b4:	40606000 	.word	0x40606000
 80039b8:	1a63c1f8 	.word	0x1a63c1f8
 80039bc:	404ca5dc 	.word	0x404ca5dc
 80039c0:	40d00000 	.word	0x40d00000
 80039c4:	43aa0000 	.word	0x43aa0000
 80039c8:	42121eb8 	.word	0x42121eb8
 80039cc:	200005b4 	.word	0x200005b4
 80039d0:	408f4000 	.word	0x408f4000
 80039d4:	c0568000 	.word	0xc0568000
 80039d8:	40568000 	.word	0x40568000
 80039dc:	20000188 	.word	0x20000188
 80039e0:	20000140 	.word	0x20000140

080039e4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80039e4:	b5b0      	push	{r4, r5, r7, lr}
 80039e6:	b096      	sub	sp, #88	; 0x58
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	61f8      	str	r0, [r7, #28]
 80039ec:	ed87 0b04 	vstr	d0, [r7, #16]
 80039f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80039f4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a02:	f7fc fbf9 	bl	80001f8 <__aeabi_dsub>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a1c:	f7fc fda4 	bl	8000568 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4620      	mov	r0, r4
 8003a26:	4629      	mov	r1, r5
 8003a28:	f7fc fbe8 	bl	80001fc <__adddf3>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a46:	f7fc fd8f 	bl	8000568 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003a58:	f7fc fbce 	bl	80001f8 <__aeabi_dsub>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a6a:	f7fc fbc5 	bl	80001f8 <__aeabi_dsub>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f7fc fbbe 	bl	80001fc <__adddf3>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8c:	f7fc fd6c 	bl	8000568 <__aeabi_dmul>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4620      	mov	r0, r4
 8003a96:	4629      	mov	r1, r5
 8003a98:	f7fc fbb0 	bl	80001fc <__adddf3>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	69f9      	ldr	r1, [r7, #28]
 8003aa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab6:	f7fc fd57 	bl	8000568 <__aeabi_dmul>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fb99 	bl	80001f8 <__aeabi_dsub>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae0:	f7fc fd42 	bl	8000568 <__aeabi_dmul>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7fc fb84 	bl	80001f8 <__aeabi_dsub>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b0a:	f7fc fd2d 	bl	8000568 <__aeabi_dmul>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4620      	mov	r0, r4
 8003b14:	4629      	mov	r1, r5
 8003b16:	f7fc fb71 	bl	80001fc <__adddf3>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	69f9      	ldr	r1, [r7, #28]
 8003b20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b30:	f7fc fb64 	bl	80001fc <__adddf3>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b46:	f7fc fe39 	bl	80007bc <__aeabi_ddiv>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b5c:	f7fc fe2e 	bl	80007bc <__aeabi_ddiv>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b72:	f7fc fb41 	bl	80001f8 <__aeabi_dsub>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b8c:	f7fc fcec 	bl	8000568 <__aeabi_dmul>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7fc fb30 	bl	80001fc <__adddf3>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	69f9      	ldr	r1, [r7, #28]
 8003ba2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003bac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bb4:	f7fc fcd8 	bl	8000568 <__aeabi_dmul>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7fc fb1c 	bl	80001fc <__adddf3>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003bd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003bde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf0:	f7fc fcba 	bl	8000568 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc fafc 	bl	80001f8 <__aeabi_dsub>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	69f9      	ldr	r1, [r7, #28]
 8003c06:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c18:	f7fc fca6 	bl	8000568 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4620      	mov	r0, r4
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7fc fae8 	bl	80001f8 <__aeabi_dsub>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	69f9      	ldr	r1, [r7, #28]
 8003c2e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c40:	f7fc fc92 	bl	8000568 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fad4 	bl	80001f8 <__aeabi_dsub>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	69f9      	ldr	r1, [r7, #28]
 8003c56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003c60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c68:	f7fc fc7e 	bl	8000568 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4620      	mov	r0, r4
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7fc fac0 	bl	80001f8 <__aeabi_dsub>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	69f9      	ldr	r1, [r7, #28]
 8003c7e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c88:	ec43 2b17 	vmov	d7, r2, r3
};
 8003c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c90:	eef0 0a67 	vmov.f32	s1, s15
 8003c94:	3758      	adds	r7, #88	; 0x58
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003ca0:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003ca2:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <MX_SPI1_Init+0x6c>)
 8003ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ca6:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003cb6:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cd4:	2228      	movs	r2, #40	; 0x28
 8003cd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cec:	220a      	movs	r2, #10
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cf0:	4804      	ldr	r0, [pc, #16]	; (8003d04 <MX_SPI1_Init+0x68>)
 8003cf2:	f005 faff 	bl	80092f4 <HAL_SPI_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003cfc:	f7ff fc22 	bl	8003544 <Error_Handler>
  }

}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000308 	.word	0x20000308
 8003d08:	40013000 	.word	0x40013000

08003d0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_SPI_MspInit+0x84>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12b      	bne.n	8003d86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_SPI_MspInit+0x88>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_SPI_MspInit+0x88>)
 8003d38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_SPI_MspInit+0x88>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_SPI_MspInit+0x88>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <HAL_SPI_MspInit+0x88>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_SPI_MspInit+0x88>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003d66:	2360      	movs	r3, #96	; 0x60
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d76:	2305      	movs	r3, #5
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <HAL_SPI_MspInit+0x8c>)
 8003d82:	f002 ffd1 	bl	8006d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d86:	bf00      	nop
 8003d88:	3728      	adds	r7, #40	; 0x28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40013000 	.word	0x40013000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40020000 	.word	0x40020000

08003d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_MspInit+0x4c>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <HAL_MspInit+0x4c>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	; 0x44
 8003db2:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_MspInit+0x4c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_MspInit+0x4c>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_MspInit+0x4c>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_MspInit+0x4c>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800

08003dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dfe:	e7fe      	b.n	8003dfe <HardFault_Handler+0x4>

08003e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <MemManage_Handler+0x4>

08003e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e0a:	e7fe      	b.n	8003e0a <BusFault_Handler+0x4>

08003e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <UsageFault_Handler+0x4>

08003e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e40:	f001 f888 	bl	8004f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <DMA1_Stream1_IRQHandler+0x10>)
 8003e4e:	f002 fd01 	bl	8006854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200006b8 	.word	0x200006b8

08003e5c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <CAN1_RX0_IRQHandler+0x10>)
 8003e62:	f001 fedd 	bl	8005c20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000360 	.word	0x20000360

08003e70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e74:	2080      	movs	r0, #128	; 0x80
 8003e76:	f003 fadb 	bl	8007430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <SystemInit+0x28>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <SystemInit+0x28>)
 8003e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <SystemInit+0x28>)
 8003e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e9a:	609a      	str	r2, [r3, #8]
#endif
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b096      	sub	sp, #88	; 0x58
 8003eb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	615a      	str	r2, [r3, #20]
 8003edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f008 fffd 	bl	800cee4 <memset>

  htim1.Instance = TIM1;
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003eec:	4a3e      	ldr	r2, [pc, #248]	; (8003fe8 <MX_TIM1_Init+0x13c>)
 8003eee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003ef0:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003ef2:	22b3      	movs	r2, #179	; 0xb3
 8003ef4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003efe:	2263      	movs	r2, #99	; 0x63
 8003f00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f14:	4833      	ldr	r0, [pc, #204]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f16:	f005 feeb 	bl	8009cf0 <HAL_TIM_Base_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003f20:	f7ff fb10 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f2e:	4619      	mov	r1, r3
 8003f30:	482c      	ldr	r0, [pc, #176]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f32:	f006 fe69 	bl	800ac08 <HAL_TIM_ConfigClockSource>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003f3c:	f7ff fb02 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f40:	4828      	ldr	r0, [pc, #160]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f42:	f006 f82b 	bl	8009f9c <HAL_TIM_PWM_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003f4c:	f7ff fafa 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4821      	ldr	r0, [pc, #132]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f60:	f007 fef0 	bl	800bd44 <HAL_TIMEx_MasterConfigSynchronization>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003f6a:	f7ff faeb 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f6e:	2360      	movs	r3, #96	; 0x60
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f76:	2300      	movs	r3, #0
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003f94:	f006 fc5c 	bl	800a850 <HAL_TIM_PWM_ConfigChannel>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003f9e:	f7ff fad1 	bl	8003544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003fc6:	f007 ff9b 	bl	800bf00 <HAL_TIMEx_ConfigBreakDeadTime>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003fd0:	f7ff fab8 	bl	8003544 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003fd4:	4803      	ldr	r0, [pc, #12]	; (8003fe4 <MX_TIM1_Init+0x138>)
 8003fd6:	f000 fa2b 	bl	8004430 <HAL_TIM_MspPostInit>

}
 8003fda:	bf00      	nop
 8003fdc:	3758      	adds	r7, #88	; 0x58
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000638 	.word	0x20000638
 8003fe8:	40010000 	.word	0x40010000

08003fec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ff2:	f107 0318 	add.w	r3, r7, #24
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800400a:	463b      	mov	r3, r7
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8004016:	4b31      	ldr	r3, [pc, #196]	; (80040dc <MX_TIM2_Init+0xf0>)
 8004018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800401c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800401e:	4b2f      	ldr	r3, [pc, #188]	; (80040dc <MX_TIM2_Init+0xf0>)
 8004020:	22b3      	movs	r2, #179	; 0xb3
 8004022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <MX_TIM2_Init+0xf0>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <MX_TIM2_Init+0xf0>)
 800402c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004032:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <MX_TIM2_Init+0xf0>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004038:	4b28      	ldr	r3, [pc, #160]	; (80040dc <MX_TIM2_Init+0xf0>)
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800403e:	4827      	ldr	r0, [pc, #156]	; (80040dc <MX_TIM2_Init+0xf0>)
 8004040:	f005 fe56 	bl	8009cf0 <HAL_TIM_Base_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800404a:	f7ff fa7b 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800404e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004052:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004054:	f107 0318 	add.w	r3, r7, #24
 8004058:	4619      	mov	r1, r3
 800405a:	4820      	ldr	r0, [pc, #128]	; (80040dc <MX_TIM2_Init+0xf0>)
 800405c:	f006 fdd4 	bl	800ac08 <HAL_TIM_ConfigClockSource>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004066:	f7ff fa6d 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800406a:	481c      	ldr	r0, [pc, #112]	; (80040dc <MX_TIM2_Init+0xf0>)
 800406c:	f006 f966 	bl	800a33c <HAL_TIM_IC_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004076:	f7ff fa65 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004082:	f107 0310 	add.w	r3, r7, #16
 8004086:	4619      	mov	r1, r3
 8004088:	4814      	ldr	r0, [pc, #80]	; (80040dc <MX_TIM2_Init+0xf0>)
 800408a:	f007 fe5b 	bl	800bd44 <HAL_TIMEx_MasterConfigSynchronization>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8004094:	f7ff fa56 	bl	8003544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004098:	2300      	movs	r3, #0
 800409a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800409c:	2301      	movs	r3, #1
 800409e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80040a8:	463b      	mov	r3, r7
 80040aa:	2208      	movs	r2, #8
 80040ac:	4619      	mov	r1, r3
 80040ae:	480b      	ldr	r0, [pc, #44]	; (80040dc <MX_TIM2_Init+0xf0>)
 80040b0:	f006 fa1a 	bl	800a4e8 <HAL_TIM_IC_ConfigChannel>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80040ba:	f7ff fa43 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80040be:	463b      	mov	r3, r7
 80040c0:	220c      	movs	r2, #12
 80040c2:	4619      	mov	r1, r3
 80040c4:	4805      	ldr	r0, [pc, #20]	; (80040dc <MX_TIM2_Init+0xf0>)
 80040c6:	f006 fa0f 	bl	800a4e8 <HAL_TIM_IC_ConfigChannel>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80040d0:	f7ff fa38 	bl	8003544 <Error_Handler>
  }

}
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000678 	.word	0x20000678

080040e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	609a      	str	r2, [r3, #8]
 80040f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f4:	f107 0320 	add.w	r3, r7, #32
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
 800410c:	615a      	str	r2, [r3, #20]
 800410e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004112:	4a33      	ldr	r2, [pc, #204]	; (80041e0 <MX_TIM3_Init+0x100>)
 8004114:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8004116:	4b31      	ldr	r3, [pc, #196]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004118:	2259      	movs	r2, #89	; 0x59
 800411a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411c:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <MX_TIM3_Init+0xfc>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004124:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004128:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <MX_TIM3_Init+0xfc>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004132:	2200      	movs	r2, #0
 8004134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004136:	4829      	ldr	r0, [pc, #164]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004138:	f005 fdda 	bl	8009cf0 <HAL_TIM_Base_Init>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004142:	f7ff f9ff 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800414c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004150:	4619      	mov	r1, r3
 8004152:	4822      	ldr	r0, [pc, #136]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004154:	f006 fd58 	bl	800ac08 <HAL_TIM_ConfigClockSource>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800415e:	f7ff f9f1 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004162:	481e      	ldr	r0, [pc, #120]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004164:	f005 ff1a 	bl	8009f9c <HAL_TIM_PWM_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800416e:	f7ff f9e9 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800417a:	f107 0320 	add.w	r3, r7, #32
 800417e:	4619      	mov	r1, r3
 8004180:	4816      	ldr	r0, [pc, #88]	; (80041dc <MX_TIM3_Init+0xfc>)
 8004182:	f007 fddf 	bl	800bd44 <HAL_TIMEx_MasterConfigSynchronization>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800418c:	f7ff f9da 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004190:	2360      	movs	r3, #96	; 0x60
 8004192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8004194:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	2200      	movs	r2, #0
 80041a6:	4619      	mov	r1, r3
 80041a8:	480c      	ldr	r0, [pc, #48]	; (80041dc <MX_TIM3_Init+0xfc>)
 80041aa:	f006 fb51 	bl	800a850 <HAL_TIM_PWM_ConfigChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80041b4:	f7ff f9c6 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041b8:	1d3b      	adds	r3, r7, #4
 80041ba:	2204      	movs	r2, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4807      	ldr	r0, [pc, #28]	; (80041dc <MX_TIM3_Init+0xfc>)
 80041c0:	f006 fb46 	bl	800a850 <HAL_TIM_PWM_ConfigChannel>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80041ca:	f7ff f9bb 	bl	8003544 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <MX_TIM3_Init+0xfc>)
 80041d0:	f000 f92e 	bl	8004430 <HAL_TIM_MspPostInit>

}
 80041d4:	bf00      	nop
 80041d6:	3738      	adds	r7, #56	; 0x38
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	200005f8 	.word	0x200005f8
 80041e0:	40000400 	.word	0x40000400

080041e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b096      	sub	sp, #88	; 0x58
 80041e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	60da      	str	r2, [r3, #12]
 8004210:	611a      	str	r2, [r3, #16]
 8004212:	615a      	str	r2, [r3, #20]
 8004214:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	2220      	movs	r2, #32
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f008 fe61 	bl	800cee4 <memset>

  htim8.Instance = TIM8;
 8004222:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <MX_TIM8_Init+0x134>)
 8004224:	4a3d      	ldr	r2, [pc, #244]	; (800431c <MX_TIM8_Init+0x138>)
 8004226:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <MX_TIM8_Init+0x134>)
 800422a:	22b3      	movs	r2, #179	; 0xb3
 800422c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800422e:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <MX_TIM8_Init+0x134>)
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8004234:	4b38      	ldr	r3, [pc, #224]	; (8004318 <MX_TIM8_Init+0x134>)
 8004236:	2263      	movs	r2, #99	; 0x63
 8004238:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800423a:	4b37      	ldr	r3, [pc, #220]	; (8004318 <MX_TIM8_Init+0x134>)
 800423c:	2200      	movs	r2, #0
 800423e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004240:	4b35      	ldr	r3, [pc, #212]	; (8004318 <MX_TIM8_Init+0x134>)
 8004242:	2200      	movs	r2, #0
 8004244:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004246:	4b34      	ldr	r3, [pc, #208]	; (8004318 <MX_TIM8_Init+0x134>)
 8004248:	2200      	movs	r2, #0
 800424a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800424c:	4832      	ldr	r0, [pc, #200]	; (8004318 <MX_TIM8_Init+0x134>)
 800424e:	f005 fd4f 	bl	8009cf0 <HAL_TIM_Base_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8004258:	f7ff f974 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800425c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004260:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004262:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004266:	4619      	mov	r1, r3
 8004268:	482b      	ldr	r0, [pc, #172]	; (8004318 <MX_TIM8_Init+0x134>)
 800426a:	f006 fccd 	bl	800ac08 <HAL_TIM_ConfigClockSource>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8004274:	f7ff f966 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004278:	4827      	ldr	r0, [pc, #156]	; (8004318 <MX_TIM8_Init+0x134>)
 800427a:	f005 fe8f 	bl	8009f9c <HAL_TIM_PWM_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8004284:	f7ff f95e 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004290:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004294:	4619      	mov	r1, r3
 8004296:	4820      	ldr	r0, [pc, #128]	; (8004318 <MX_TIM8_Init+0x134>)
 8004298:	f007 fd54 	bl	800bd44 <HAL_TIMEx_MasterConfigSynchronization>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80042a2:	f7ff f94f 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042a6:	2360      	movs	r3, #96	; 0x60
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ae:	2300      	movs	r3, #0
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c2:	220c      	movs	r2, #12
 80042c4:	4619      	mov	r1, r3
 80042c6:	4814      	ldr	r0, [pc, #80]	; (8004318 <MX_TIM8_Init+0x134>)
 80042c8:	f006 fac2 	bl	800a850 <HAL_TIM_PWM_ConfigChannel>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80042d2:	f7ff f937 	bl	8003544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80042f4:	1d3b      	adds	r3, r7, #4
 80042f6:	4619      	mov	r1, r3
 80042f8:	4807      	ldr	r0, [pc, #28]	; (8004318 <MX_TIM8_Init+0x134>)
 80042fa:	f007 fe01 	bl	800bf00 <HAL_TIMEx_ConfigBreakDeadTime>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8004304:	f7ff f91e 	bl	8003544 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8004308:	4803      	ldr	r0, [pc, #12]	; (8004318 <MX_TIM8_Init+0x134>)
 800430a:	f000 f891 	bl	8004430 <HAL_TIM_MspPostInit>

}
 800430e:	bf00      	nop
 8004310:	3758      	adds	r7, #88	; 0x58
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200005b8 	.word	0x200005b8
 800431c:	40010400 	.word	0x40010400

08004320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	; 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a37      	ldr	r2, [pc, #220]	; (800441c <HAL_TIM_Base_MspInit+0xfc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	4a35      	ldr	r2, [pc, #212]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6453      	str	r3, [r2, #68]	; 0x44
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800435e:	e059      	b.n	8004414 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d12d      	bne.n	80043c6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a2b      	ldr	r2, [pc, #172]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	4b25      	ldr	r3, [pc, #148]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a24      	ldr	r2, [pc, #144]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 80043a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043b4:	2301      	movs	r3, #1
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b8:	f107 031c 	add.w	r3, r7, #28
 80043bc:	4619      	mov	r1, r3
 80043be:	4819      	ldr	r0, [pc, #100]	; (8004424 <HAL_TIM_Base_MspInit+0x104>)
 80043c0:	f002 fcb2 	bl	8006d28 <HAL_GPIO_Init>
}
 80043c4:	e026      	b.n	8004414 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_TIM_Base_MspInit+0x108>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10e      	bne.n	80043ee <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	6413      	str	r3, [r2, #64]	; 0x40
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
}
 80043ec:	e012      	b.n	8004414 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a0e      	ldr	r2, [pc, #56]	; (800442c <HAL_TIM_Base_MspInit+0x10c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10d      	bne.n	8004414 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	4a07      	ldr	r2, [pc, #28]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	6453      	str	r3, [r2, #68]	; 0x44
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_TIM_Base_MspInit+0x100>)
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
}
 8004414:	bf00      	nop
 8004416:	3730      	adds	r7, #48	; 0x30
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40010000 	.word	0x40010000
 8004420:	40023800 	.word	0x40023800
 8004424:	40020400 	.word	0x40020400
 8004428:	40000400 	.word	0x40000400
 800442c:	40010400 	.word	0x40010400

08004430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a37      	ldr	r2, [pc, #220]	; (800452c <HAL_TIM_MspPostInit+0xfc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d11f      	bne.n	8004492 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	4b36      	ldr	r3, [pc, #216]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a35      	ldr	r2, [pc, #212]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b33      	ldr	r3, [pc, #204]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 800446e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	2300      	movs	r3, #0
 800447e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004480:	2301      	movs	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4619      	mov	r1, r3
 800448a:	482a      	ldr	r0, [pc, #168]	; (8004534 <HAL_TIM_MspPostInit+0x104>)
 800448c:	f002 fc4c 	bl	8006d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004490:	e047      	b.n	8004522 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a28      	ldr	r2, [pc, #160]	; (8004538 <HAL_TIM_MspPostInit+0x108>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d11e      	bne.n	80044da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 80044a6:	f043 0304 	orr.w	r3, r3, #4
 80044aa:	6313      	str	r3, [r2, #48]	; 0x30
 80044ac:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80044b8:	23c0      	movs	r3, #192	; 0xc0
 80044ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c4:	2300      	movs	r3, #0
 80044c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044c8:	2302      	movs	r3, #2
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	4619      	mov	r1, r3
 80044d2:	481a      	ldr	r0, [pc, #104]	; (800453c <HAL_TIM_MspPostInit+0x10c>)
 80044d4:	f002 fc28 	bl	8006d28 <HAL_GPIO_Init>
}
 80044d8:	e023      	b.n	8004522 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_TIM_MspPostInit+0x110>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d11e      	bne.n	8004522 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_TIM_MspPostInit+0x100>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8004500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004512:	2303      	movs	r3, #3
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8004516:	f107 0314 	add.w	r3, r7, #20
 800451a:	4619      	mov	r1, r3
 800451c:	4807      	ldr	r0, [pc, #28]	; (800453c <HAL_TIM_MspPostInit+0x10c>)
 800451e:	f002 fc03 	bl	8006d28 <HAL_GPIO_Init>
}
 8004522:	bf00      	nop
 8004524:	3728      	adds	r7, #40	; 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40023800 	.word	0x40023800
 8004534:	40020000 	.word	0x40020000
 8004538:	40000400 	.word	0x40000400
 800453c:	40020800 	.word	0x40020800
 8004540:	40010400 	.word	0x40010400

08004544 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <MX_USART3_UART_Init+0x50>)
 800454c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 8004550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004556:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 800455e:	2200      	movs	r2, #0
 8004560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 800456a:	220c      	movs	r2, #12
 800456c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 8004576:	2200      	movs	r2, #0
 8004578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800457a:	4805      	ldr	r0, [pc, #20]	; (8004590 <MX_USART3_UART_Init+0x4c>)
 800457c:	f007 fd8c 	bl	800c098 <HAL_UART_Init>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004586:	f7fe ffdd 	bl	8003544 <Error_Handler>
  }

}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000718 	.word	0x20000718
 8004594:	40004800 	.word	0x40004800

08004598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a30      	ldr	r2, [pc, #192]	; (8004678 <HAL_UART_MspInit+0xe0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d15a      	bne.n	8004670 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	4b2f      	ldr	r3, [pc, #188]	; (800467c <HAL_UART_MspInit+0xe4>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a2e      	ldr	r2, [pc, #184]	; (800467c <HAL_UART_MspInit+0xe4>)
 80045c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b2c      	ldr	r3, [pc, #176]	; (800467c <HAL_UART_MspInit+0xe4>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b28      	ldr	r3, [pc, #160]	; (800467c <HAL_UART_MspInit+0xe4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a27      	ldr	r2, [pc, #156]	; (800467c <HAL_UART_MspInit+0xe4>)
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_UART_MspInit+0xe4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80045f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f8:	2302      	movs	r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004600:	2303      	movs	r3, #3
 8004602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004604:	2307      	movs	r3, #7
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4619      	mov	r1, r3
 800460e:	481c      	ldr	r0, [pc, #112]	; (8004680 <HAL_UART_MspInit+0xe8>)
 8004610:	f002 fb8a 	bl	8006d28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <HAL_UART_MspInit+0xf0>)
 8004618:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800461a:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <HAL_UART_MspInit+0xec>)
 800461c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004620:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004628:	4b16      	ldr	r3, [pc, #88]	; (8004684 <HAL_UART_MspInit+0xec>)
 800462a:	2200      	movs	r2, #0
 800462c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004634:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004638:	2200      	movs	r2, #0
 800463a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800463c:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_UART_MspInit+0xec>)
 800463e:	2200      	movs	r2, #0
 8004640:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004644:	2200      	movs	r2, #0
 8004646:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_UART_MspInit+0xec>)
 800464a:	2200      	movs	r2, #0
 800464c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004650:	2200      	movs	r2, #0
 8004652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004654:	480b      	ldr	r0, [pc, #44]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004656:	f001 fe7b 	bl	8006350 <HAL_DMA_Init>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004660:	f7fe ff70 	bl	8003544 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <HAL_UART_MspInit+0xec>)
 8004668:	635a      	str	r2, [r3, #52]	; 0x34
 800466a:	4a06      	ldr	r2, [pc, #24]	; (8004684 <HAL_UART_MspInit+0xec>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004670:	bf00      	nop
 8004672:	3728      	adds	r7, #40	; 0x28
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40004800 	.word	0x40004800
 800467c:	40023800 	.word	0x40023800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	200006b8 	.word	0x200006b8
 8004688:	40026028 	.word	0x40026028

0800468c <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8004690:	2228      	movs	r2, #40	; 0x28
 8004692:	2100      	movs	r1, #0
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <joystick_Init+0x14>)
 8004696:	f008 fc25 	bl	800cee4 <memset>
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	200002dc 	.word	0x200002dc
 80046a4:	00000000 	.word	0x00000000

080046a8 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 80046a8:	b5b0      	push	{r4, r5, r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <joystickCalculatePos+0x88>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2205      	movs	r2, #5
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d102      	bne.n	80046be <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <joystickCalculatePos+0x88>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <joystickCalculatePos+0x8c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da05      	bge.n	80046d2 <joystickCalculatePos+0x2a>
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <joystickCalculatePos+0x8c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046ce:	4413      	add	r3, r2
 80046d0:	e004      	b.n	80046dc <joystickCalculatePos+0x34>
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <joystickCalculatePos+0x8c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <joystickCalculatePos+0x8c>)
 80046de:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <joystickCalculatePos+0x90>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	dd05      	ble.n	80046f4 <joystickCalculatePos+0x4c>
 80046e8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <joystickCalculatePos+0x90>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	e005      	b.n	8004700 <joystickCalculatePos+0x58>
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <joystickCalculatePos+0x90>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	425b      	negs	r3, r3
 80046fa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <joystickCalculatePos+0x90>)
 8004702:	6013      	str	r3, [r2, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <joystickCalculatePos+0x88>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <joystickCalculatePos+0x8c>)
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	490b      	ldr	r1, [pc, #44]	; (800473c <joystickCalculatePos+0x94>)
 800470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <joystickCalculatePos+0x88>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <joystickCalculatePos+0x90>)
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	4908      	ldr	r1, [pc, #32]	; (800473c <joystickCalculatePos+0x94>)
 800471c:	3305      	adds	r3, #5
 800471e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e019      	b.n	8004764 <joystickCalculatePos+0xbc>
 8004730:	20000304 	.word	0x20000304
 8004734:	200005ac 	.word	0x200005ac
 8004738:	200004b0 	.word	0x200004b0
 800473c:	200002dc 	.word	0x200002dc
  {
    sum_x += joyPosBuffer[0][i];
 8004740:	4aaf      	ldr	r2, [pc, #700]	; (8004a00 <joystickCalculatePos+0x358>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 800474e:	4aac      	ldr	r2, [pc, #688]	; (8004a00 <joystickCalculatePos+0x358>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3305      	adds	r3, #5
 8004754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	4413      	add	r3, r2
 800475c:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3301      	adds	r3, #1
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	2205      	movs	r2, #5
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4293      	cmp	r3, r2
 800476a:	dbe9      	blt.n	8004740 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 800476c:	2205      	movs	r2, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	fb93 f3f2 	sdiv	r3, r3, r2
 8004774:	b21a      	sxth	r2, r3
 8004776:	4ba3      	ldr	r3, [pc, #652]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004778:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 800477a:	2205      	movs	r2, #5
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004782:	b21a      	sxth	r2, r3
 8004784:	4b9f      	ldr	r3, [pc, #636]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004786:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 8004788:	4b9e      	ldr	r3, [pc, #632]	; (8004a04 <joystickCalculatePos+0x35c>)
 800478a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fb fe80 	bl	8000494 <__aeabi_i2d>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	ed9f 1b95 	vldr	d1, [pc, #596]	; 80049f0 <joystickCalculatePos+0x348>
 800479c:	ec43 2b10 	vmov	d0, r2, r3
 80047a0:	f008 fe36 	bl	800d410 <pow>
 80047a4:	ec55 4b10 	vmov	r4, r5, d0
 80047a8:	4b96      	ldr	r3, [pc, #600]	; (8004a04 <joystickCalculatePos+0x35c>)
 80047aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fe70 	bl	8000494 <__aeabi_i2d>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 80049f0 <joystickCalculatePos+0x348>
 80047bc:	ec43 2b10 	vmov	d0, r2, r3
 80047c0:	f008 fe26 	bl	800d410 <pow>
 80047c4:	ec53 2b10 	vmov	r2, r3, d0
 80047c8:	4620      	mov	r0, r4
 80047ca:	4629      	mov	r1, r5
 80047cc:	f7fb fd16 	bl	80001fc <__adddf3>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	ec43 2b17 	vmov	d7, r2, r3
 80047d8:	eeb0 0a47 	vmov.f32	s0, s14
 80047dc:	eef0 0a67 	vmov.f32	s1, s15
 80047e0:	f008 fec4 	bl	800d56c <sqrt>
 80047e4:	ec53 2b10 	vmov	r2, r3, d0
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	f7fc f9b4 	bl	8000b58 <__aeabi_d2f>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4a84      	ldr	r2, [pc, #528]	; (8004a04 <joystickCalculatePos+0x35c>)
 80047f4:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 80047f6:	4b83      	ldr	r3, [pc, #524]	; (8004a04 <joystickCalculatePos+0x35c>)
 80047f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fb fe49 	bl	8000494 <__aeabi_i2d>
 8004802:	4604      	mov	r4, r0
 8004804:	460d      	mov	r5, r1
 8004806:	4b7f      	ldr	r3, [pc, #508]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fb fe41 	bl	8000494 <__aeabi_i2d>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	ec43 2b11 	vmov	d1, r2, r3
 800481a:	ec45 4b10 	vmov	d0, r4, r5
 800481e:	f008 fdf5 	bl	800d40c <atan2>
 8004822:	ec53 2b10 	vmov	r2, r3, d0
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	f7fc f995 	bl	8000b58 <__aeabi_d2f>
 800482e:	4603      	mov	r3, r0
 8004830:	4a74      	ldr	r2, [pc, #464]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004832:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 8004834:	4b73      	ldr	r3, [pc, #460]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004836:	ed93 7a01 	vldr	s14, [r3, #4]
 800483a:	eddf 7a73 	vldr	s15, [pc, #460]	; 8004a08 <joystickCalculatePos+0x360>
 800483e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	dd06      	ble.n	800485a <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 800484c:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8004a08 <joystickCalculatePos+0x360>
 8004850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004854:	4b6b      	ldr	r3, [pc, #428]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004856:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 800485a:	4b6a      	ldr	r3, [pc, #424]	; (8004a04 <joystickCalculatePos+0x35c>)
 800485c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004860:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004a0c <joystickCalculatePos+0x364>
 8004864:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8004a10 <joystickCalculatePos+0x368>
 8004868:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800486c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	dd10      	ble.n	8004898 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004878:	ed93 7a02 	vldr	s14, [r3, #8]
 800487c:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004a0c <joystickCalculatePos+0x364>
 8004880:	eddf 7a63 	vldr	s15, [pc, #396]	; 8004a10 <joystickCalculatePos+0x368>
 8004884:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8004888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004890:	d502      	bpl.n	8004898 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 8004892:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <joystickCalculatePos+0x36c>)
 8004894:	4b5b      	ldr	r3, [pc, #364]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004896:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8004898:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <joystickCalculatePos+0x35c>)
 800489a:	ed93 7a02 	vldr	s14, [r3, #8]
 800489e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8004a0c <joystickCalculatePos+0x364>
 80048a2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004a10 <joystickCalculatePos+0x368>
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef1 7a67 	vneg.f32	s15, s15
 80048ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	dd16      	ble.n	80048e6 <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <joystickCalculatePos+0x35c>)
 80048ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80048be:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004a0c <joystickCalculatePos+0x364>
 80048c2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004a10 <joystickCalculatePos+0x368>
 80048c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048ca:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80048ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d6:	d506      	bpl.n	80048e6 <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 80048d8:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8004a0c <joystickCalculatePos+0x364>
 80048dc:	eef1 7a67 	vneg.f32	s15, s15
 80048e0:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <joystickCalculatePos+0x35c>)
 80048e2:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <joystickCalculatePos+0x35c>)
 80048e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ec:	eddf 7a46 	vldr	s15, [pc, #280]	; 8004a08 <joystickCalculatePos+0x360>
 80048f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048f8:	ee16 0a90 	vmov	r0, s13
 80048fc:	f7fb fddc 	bl	80004b8 <__aeabi_f2d>
 8004900:	4604      	mov	r4, r0
 8004902:	460d      	mov	r5, r1
 8004904:	4b3f      	ldr	r3, [pc, #252]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fdd5 	bl	80004b8 <__aeabi_f2d>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	ec43 2b10 	vmov	d0, r2, r3
 8004916:	f008 fceb 	bl	800d2f0 <sin>
 800491a:	ec53 2b10 	vmov	r2, r3, d0
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb fe21 	bl	8000568 <__aeabi_dmul>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f7fc f913 	bl	8000b58 <__aeabi_d2f>
 8004932:	4603      	mov	r3, r0
 8004934:	4a33      	ldr	r2, [pc, #204]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004936:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8004938:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <joystickCalculatePos+0x35c>)
 800493a:	ed93 7a01 	vldr	s14, [r3, #4]
 800493e:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004a08 <joystickCalculatePos+0x360>
 8004942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004946:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800494a:	ee16 0a90 	vmov	r0, s13
 800494e:	f7fb fdb3 	bl	80004b8 <__aeabi_f2d>
 8004952:	4604      	mov	r4, r0
 8004954:	460d      	mov	r5, r1
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fb fdac 	bl	80004b8 <__aeabi_f2d>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	ec43 2b10 	vmov	d0, r2, r3
 8004968:	f008 fc66 	bl	800d238 <cos>
 800496c:	ec53 2b10 	vmov	r2, r3, d0
 8004970:	4620      	mov	r0, r4
 8004972:	4629      	mov	r1, r5
 8004974:	f7fb fdf8 	bl	8000568 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	f7fc f8ea 	bl	8000b58 <__aeabi_d2f>
 8004984:	4603      	mov	r3, r0
 8004986:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <joystickCalculatePos+0x35c>)
 8004988:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 800498a:	4b1e      	ldr	r3, [pc, #120]	; (8004a04 <joystickCalculatePos+0x35c>)
 800498c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004990:	eef0 7ae7 	vabs.f32	s15, s15
 8004994:	ee17 0a90 	vmov	r0, s15
 8004998:	f7fb fd8e 	bl	80004b8 <__aeabi_f2d>
 800499c:	a316      	add	r3, pc, #88	; (adr r3, 80049f8 <joystickCalculatePos+0x350>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fc f853 	bl	8000a4c <__aeabi_dcmplt>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <joystickCalculatePos+0x30c>
    hJoystick.linear = 0;
 80049ac:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <joystickCalculatePos+0x35c>)
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <joystickCalculatePos+0x35c>)
 80049b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80049ba:	eef0 7ae7 	vabs.f32	s15, s15
 80049be:	ee17 0a90 	vmov	r0, s15
 80049c2:	f7fb fd79 	bl	80004b8 <__aeabi_f2d>
 80049c6:	a30c      	add	r3, pc, #48	; (adr r3, 80049f8 <joystickCalculatePos+0x350>)
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f7fc f83e 	bl	8000a4c <__aeabi_dcmplt>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <joystickCalculatePos+0x336>
    hJoystick.angular = 0;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <joystickCalculatePos+0x35c>)
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <joystickCalculatePos+0x370>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <joystickCalculatePos+0x370>)
 80049e6:	6013      	str	r3, [r2, #0]
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bdb0      	pop	{r4, r5, r7, pc}
 80049f0:	00000000 	.word	0x00000000
 80049f4:	40000000 	.word	0x40000000
 80049f8:	9999999a 	.word	0x9999999a
 80049fc:	3fa99999 	.word	0x3fa99999
 8004a00:	200002dc 	.word	0x200002dc
 8004a04:	20000758 	.word	0x20000758
 8004a08:	00004650 	.word	0x00004650
 8004a0c:	3fc8f5c3 	.word	0x3fc8f5c3
 8004a10:	3dcccccd 	.word	0x3dcccccd
 8004a14:	3fc8f5c3 	.word	0x3fc8f5c3
 8004a18:	20000304 	.word	0x20000304

08004a1c <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a28:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 25)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b18      	cmp	r3, #24
 8004a7e:	dc05      	bgt.n	8004a8c <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]
    return;
 8004a8a:	e18a      	b.n	8004da2 <wheel_Control+0x332>
  }

  joystickCalculatePos();
 8004a8c:	f7ff fe0c 	bl	80046a8 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f98f 	bl	8004db4 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	d10a      	bne.n	8004abc <wheel_Control+0x4c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004aac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab4:	d102      	bne.n	8004abc <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 8004abc:	4bba      	ldr	r3, [pc, #744]	; (8004da8 <wheel_Control+0x338>)
 8004abe:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ac2:	eddf 7aba 	vldr	s15, [pc, #744]	; 8004dac <wheel_Control+0x33c>
 8004ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	f340 80b2 	ble.w	8004c3a <wheel_Control+0x1ca>
  {
    float left_speed_step = wheel->left_speed_step;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	617b      	str	r3, [r7, #20]
    float right_speed_step = wheel->right_speed_step;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	613b      	str	r3, [r7, #16]

    if (wheel->start_from_stationary)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7f1b      	ldrb	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d03c      	beq.n	8004b64 <wheel_Control+0xf4>
    {
      left_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	edd3 7a00 	vldr	s15, [r3]
 8004af0:	eef0 6ae7 	vabs.f32	s13, s15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	ed93 7a08 	vldr	s14, [r3, #32]
 8004afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afe:	edc7 7a05 	vstr	s15, [r7, #20]
      right_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	edd3 7a00 	vldr	s15, [r3]
 8004b08:	eef0 6ae7 	vabs.f32	s13, s15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b16:	edc7 7a04 	vstr	s15, [r7, #16]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b20:	eeb0 7ae7 	vabs.f32	s14, s15
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b2a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	dd13      	ble.n	8004b64 <wheel_Control+0xf4>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b42:	eeb0 7ae7 	vabs.f32	s14, s15
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b4c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b50:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	dd02      	ble.n	8004b64 <wheel_Control+0xf4>
      {
	  wheel->start_from_stationary = false;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	ed93 7a00 	vldr	s14, [r3]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b74:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	d50a      	bpl.n	8004b98 <wheel_Control+0x128>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b88:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	edc3 7a00 	vstr	s15, [r3]
 8004b96:	e01a      	b.n	8004bce <wheel_Control+0x15e>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	ed93 7a00 	vldr	s14, [r3]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ba8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bac:	eef1 7a67 	vneg.f32	s15, s15
 8004bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb8:	d509      	bpl.n	8004bce <wheel_Control+0x15e>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8004be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	d50a      	bpl.n	8004c02 <wheel_Control+0x192>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	ed93 7a03 	vldr	s14, [r3, #12]
 8004bf2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c00:	e07f      	b.n	8004d02 <wheel_Control+0x292>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c12:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c16:	eef1 7a67 	vneg.f32	s15, s15
 8004c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	d56e      	bpl.n	8004d02 <wheel_Control+0x292>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	ed93 7a03 	vldr	s14, [r3, #12]
 8004c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c38:	e063      	b.n	8004d02 <wheel_Control+0x292>
//      wheel->cur_r = 0;

//    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
//    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
//
    float left_speed_step = 10;
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	; (8004db0 <wheel_Control+0x340>)
 8004c3c:	60fb      	str	r3, [r7, #12]
    float right_speed_step = 10;
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <wheel_Control+0x340>)
 8004c40:	60bb      	str	r3, [r7, #8]
//    else if (wheel->cur_r < -right_speed_step)
//      wheel->cur_r = wheel->pre_r + right_speed_step;
//    else
//      wheel->cur_r = 0;

    if (wheel->pre_l > left_speed_step)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c48:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d50a      	bpl.n	8004c6c <wheel_Control+0x1fc>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	edc3 7a00 	vstr	s15, [r3]
 8004c6a:	e01a      	b.n	8004ca2 <wheel_Control+0x232>
    else if (wheel->pre_l < -left_speed_step)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c76:	eef1 7a67 	vneg.f32	s15, s15
 8004c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c82:	d50a      	bpl.n	8004c9a <wheel_Control+0x22a>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	edc3 7a00 	vstr	s15, [r3]
 8004c98:	e003      	b.n	8004ca2 <wheel_Control+0x232>
    else
      wheel->cur_l = 0;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    
    if (wheel->pre_r > right_speed_step)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ca8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	d50a      	bpl.n	8004ccc <wheel_Control+0x25c>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	edc3 7a01 	vstr	s15, [r3, #4]
 8004cca:	e01a      	b.n	8004d02 <wheel_Control+0x292>
    else if (wheel->pre_r < -right_speed_step)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cd6:	eef1 7a67 	vneg.f32	s15, s15
 8004cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	d50a      	bpl.n	8004cfa <wheel_Control+0x28a>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	edc3 7a01 	vstr	s15, [r3, #4]
 8004cf8:	e003      	b.n	8004d02 <wheel_Control+0x292>
    else
      wheel->cur_r = 0;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]



  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	ed93 7a00 	vldr	s14, [r3]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d16:	dd03      	ble.n	8004d20 <wheel_Control+0x2b0>
    wheel->cur_l = wheel->max_linear_speed;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d34:	dd03      	ble.n	8004d3e <wheel_Control+0x2ce>
    wheel->cur_r = wheel->max_linear_speed;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	ed93 7a00 	vldr	s14, [r3]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d4a:	eef1 7a67 	vneg.f32	s15, s15
 8004d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d56:	d507      	bpl.n	8004d68 <wheel_Control+0x2f8>
    wheel->cur_l = -wheel->max_linear_speed;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d5e:	eef1 7a67 	vneg.f32	s15, s15
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d74:	eef1 7a67 	vneg.f32	s15, s15
 8004d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d80:	d507      	bpl.n	8004d92 <wheel_Control+0x322>
    wheel->cur_r = -wheel->max_linear_speed;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d88:	eef1 7a67 	vneg.f32	s15, s15
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]
  
}
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000758 	.word	0x20000758
 8004dac:	00000bb8 	.word	0x00000bb8
 8004db0:	41200000 	.word	0x41200000

08004db4 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	ed93 7a05 	vldr	s14, [r3, #20]
 8004dc2:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <wheelCalculateSpeed+0xa4>)
 8004dc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dcc:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	ed93 7a06 	vldr	s14, [r3, #24]
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <wheelCalculateSpeed+0xa4>)
 8004dd8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de0:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8004de4:	ed97 7a03 	vldr	s14, [r7, #12]
 8004de8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8004df6:	ed97 7a03 	vldr	s14, [r7, #12]
 8004dfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough50
  // direct step to 0 if speed is small enough50
  if(fabs(wheel->cur_l) < 25)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8004e12:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1e:	d503      	bpl.n	8004e28 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 25)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8004e32:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	d400      	bmi.n	8004e42 <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004e40:	e003      	b.n	8004e4a <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	605a      	str	r2, [r3, #4]
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000758 	.word	0x20000758

08004e5c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e94 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e62:	e003      	b.n	8004e6c <LoopCopyDataInit>

08004e64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e6a:	3104      	adds	r1, #4

08004e6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e6c:	480b      	ldr	r0, [pc, #44]	; (8004e9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e74:	d3f6      	bcc.n	8004e64 <CopyDataInit>
  ldr  r2, =_sbss
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e78:	e002      	b.n	8004e80 <LoopFillZerobss>

08004e7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e7c:	f842 3b04 	str.w	r3, [r2], #4

08004e80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e84:	d3f9      	bcc.n	8004e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e86:	f7fe fffb 	bl	8003e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e8a:	f008 f807 	bl	800ce9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e8e:	f7fd f903 	bl	8002098 <main>
  bx  lr    
 8004e92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004e94:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004e98:	0800fe48 	.word	0x0800fe48
  ldr  r0, =_sdata
 8004e9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ea0:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8004ea4:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8004ea8:	20000770 	.word	0x20000770

08004eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eac:	e7fe      	b.n	8004eac <ADC_IRQHandler>
	...

08004eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_Init+0x40>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <HAL_Init+0x40>)
 8004eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <HAL_Init+0x40>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <HAL_Init+0x40>)
 8004ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ecc:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <HAL_Init+0x40>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a07      	ldr	r2, [pc, #28]	; (8004ef0 <HAL_Init+0x40>)
 8004ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ed8:	2003      	movs	r0, #3
 8004eda:	f001 f9a1 	bl	8006220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f000 f808 	bl	8004ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ee4:	f7fe ff5a 	bl	8003d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023c00 	.word	0x40023c00

08004ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_InitTick+0x54>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_InitTick+0x58>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 f9e8 	bl	80062e8 <HAL_SYSTICK_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e00e      	b.n	8004f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b0f      	cmp	r3, #15
 8004f26:	d80a      	bhi.n	8004f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f30:	f001 f996 	bl	8006260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f34:	4a06      	ldr	r2, [pc, #24]	; (8004f50 <HAL_InitTick+0x5c>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e000      	b.n	8004f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	200001d0 	.word	0x200001d0
 8004f4c:	200001d8 	.word	0x200001d8
 8004f50:	200001d4 	.word	0x200001d4

08004f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_IncTick+0x20>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_IncTick+0x24>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <HAL_IncTick+0x24>)
 8004f66:	6013      	str	r3, [r2, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	200001d8 	.word	0x200001d8
 8004f78:	2000076c 	.word	0x2000076c

08004f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_GetTick+0x14>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	2000076c 	.word	0x2000076c

08004f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f9c:	f7ff ffee 	bl	8004f7c <HAL_GetTick>
 8004fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fac:	d005      	beq.n	8004fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <HAL_Delay+0x44>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fba:	bf00      	nop
 8004fbc:	f7ff ffde 	bl	8004f7c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d8f7      	bhi.n	8004fbc <HAL_Delay+0x28>
  {
  }
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200001d8 	.word	0x200001d8

08004fdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e20e      	b.n	800540c <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4aa0      	ldr	r2, [pc, #640]	; (8005274 <HAL_CAN_Init+0x298>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d009      	beq.n	800500c <HAL_CAN_Init+0x30>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a9e      	ldr	r2, [pc, #632]	; (8005278 <HAL_CAN_Init+0x29c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_CAN_Init+0x30>
 8005002:	f240 111d 	movw	r1, #285	; 0x11d
 8005006:	489d      	ldr	r0, [pc, #628]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005008:	f7fe faa3 	bl	8003552 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7e1b      	ldrb	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_CAN_Init+0x4a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7e1b      	ldrb	r3, [r3, #24]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d004      	beq.n	8005026 <HAL_CAN_Init+0x4a>
 800501c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005020:	4896      	ldr	r0, [pc, #600]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005022:	f7fe fa96 	bl	8003552 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7e5b      	ldrb	r3, [r3, #25]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_CAN_Init+0x64>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7e5b      	ldrb	r3, [r3, #25]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d004      	beq.n	8005040 <HAL_CAN_Init+0x64>
 8005036:	f240 111f 	movw	r1, #287	; 0x11f
 800503a:	4890      	ldr	r0, [pc, #576]	; (800527c <HAL_CAN_Init+0x2a0>)
 800503c:	f7fe fa89 	bl	8003552 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7e9b      	ldrb	r3, [r3, #26]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_CAN_Init+0x7e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7e9b      	ldrb	r3, [r3, #26]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d004      	beq.n	800505a <HAL_CAN_Init+0x7e>
 8005050:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005054:	4889      	ldr	r0, [pc, #548]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005056:	f7fe fa7c 	bl	8003552 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7edb      	ldrb	r3, [r3, #27]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_CAN_Init+0x98>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7edb      	ldrb	r3, [r3, #27]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d004      	beq.n	8005074 <HAL_CAN_Init+0x98>
 800506a:	f240 1121 	movw	r1, #289	; 0x121
 800506e:	4883      	ldr	r0, [pc, #524]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005070:	f7fe fa6f 	bl	8003552 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	7f1b      	ldrb	r3, [r3, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_CAN_Init+0xb2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	7f1b      	ldrb	r3, [r3, #28]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d004      	beq.n	800508e <HAL_CAN_Init+0xb2>
 8005084:	f44f 7191 	mov.w	r1, #290	; 0x122
 8005088:	487c      	ldr	r0, [pc, #496]	; (800527c <HAL_CAN_Init+0x2a0>)
 800508a:	f7fe fa62 	bl	8003552 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	7f5b      	ldrb	r3, [r3, #29]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_CAN_Init+0xcc>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7f5b      	ldrb	r3, [r3, #29]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d004      	beq.n	80050a8 <HAL_CAN_Init+0xcc>
 800509e:	f240 1123 	movw	r1, #291	; 0x123
 80050a2:	4876      	ldr	r0, [pc, #472]	; (800527c <HAL_CAN_Init+0x2a0>)
 80050a4:	f7fe fa55 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_CAN_Init+0xfc>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d00e      	beq.n	80050d8 <HAL_CAN_Init+0xfc>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c2:	d009      	beq.n	80050d8 <HAL_CAN_Init+0xfc>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80050cc:	d004      	beq.n	80050d8 <HAL_CAN_Init+0xfc>
 80050ce:	f44f 7192 	mov.w	r1, #292	; 0x124
 80050d2:	486a      	ldr	r0, [pc, #424]	; (800527c <HAL_CAN_Init+0x2a0>)
 80050d4:	f7fe fa3d 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_CAN_Init+0x12c>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e8:	d00e      	beq.n	8005108 <HAL_CAN_Init+0x12c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050f2:	d009      	beq.n	8005108 <HAL_CAN_Init+0x12c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050fc:	d004      	beq.n	8005108 <HAL_CAN_Init+0x12c>
 80050fe:	f240 1125 	movw	r1, #293	; 0x125
 8005102:	485e      	ldr	r0, [pc, #376]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005104:	f7fe fa25 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d04f      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d04a      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005122:	d045      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800512c:	d040      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005136:	d03b      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005140:	d036      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800514a:	d031      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8005154:	d02c      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800515e:	d027      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8005168:	d022      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8005172:	d01d      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800517c:	d018      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005186:	d013      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8005190:	d00e      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800519a:	d009      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80051a4:	d004      	beq.n	80051b0 <HAL_CAN_Init+0x1d4>
 80051a6:	f44f 7193 	mov.w	r1, #294	; 0x126
 80051aa:	4834      	ldr	r0, [pc, #208]	; (800527c <HAL_CAN_Init+0x2a0>)
 80051ac:	f7fe f9d1 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d027      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c0:	d022      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ca:	d01d      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051d4:	d018      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051de:	d013      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80051e8:	d00e      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051f2:	d009      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80051fc:	d004      	beq.n	8005208 <HAL_CAN_Init+0x22c>
 80051fe:	f240 1127 	movw	r1, #295	; 0x127
 8005202:	481e      	ldr	r0, [pc, #120]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005204:	f7fe f9a5 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_CAN_Init+0x23e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	d904      	bls.n	8005224 <HAL_CAN_Init+0x248>
 800521a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800521e:	4817      	ldr	r0, [pc, #92]	; (800527c <HAL_CAN_Init+0x2a0>)
 8005220:	f7fe f997 	bl	8003552 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fc fc41 	bl	8001ab8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0202 	bic.w	r2, r2, #2
 8005244:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005246:	f7ff fe99 	bl	8004f7c <HAL_GetTick>
 800524a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800524c:	e018      	b.n	8005280 <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800524e:	f7ff fe95 	bl	8004f7c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b0a      	cmp	r3, #10
 800525a:	d911      	bls.n	8005280 <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2205      	movs	r2, #5
 800526c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0cb      	b.n	800540c <HAL_CAN_Init+0x430>
 8005274:	40006400 	.word	0x40006400
 8005278:	40006800 	.word	0x40006800
 800527c:	0800f8f0 	.word	0x0800f8f0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1df      	bne.n	800524e <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800529e:	f7ff fe6d 	bl	8004f7c <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80052a4:	e012      	b.n	80052cc <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80052a6:	f7ff fe69 	bl	8004f7c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b0a      	cmp	r3, #10
 80052b2:	d90b      	bls.n	80052cc <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2205      	movs	r2, #5
 80052c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e09f      	b.n	800540c <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0e5      	beq.n	80052a6 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	7e1b      	ldrb	r3, [r3, #24]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d108      	bne.n	80052f4 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e007      	b.n	8005304 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7e5b      	ldrb	r3, [r3, #25]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d108      	bne.n	800531e <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e007      	b.n	800532e <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7e9b      	ldrb	r3, [r3, #26]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d108      	bne.n	8005348 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0220 	orr.w	r2, r2, #32
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e007      	b.n	8005358 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0220 	bic.w	r2, r2, #32
 8005356:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7edb      	ldrb	r3, [r3, #27]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d108      	bne.n	8005372 <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0210 	bic.w	r2, r2, #16
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e007      	b.n	8005382 <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0210 	orr.w	r2, r2, #16
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	7f1b      	ldrb	r3, [r3, #28]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d108      	bne.n	800539c <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e007      	b.n	80053ac <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0208 	bic.w	r2, r2, #8
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	7f5b      	ldrb	r3, [r3, #29]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d108      	bne.n	80053c6 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0204 	orr.w	r2, r2, #4
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e007      	b.n	80053d6 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0204 	bic.w	r2, r2, #4
 80053d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	ea42 0103 	orr.w	r1, r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	1e5a      	subs	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800542a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800542c:	7cfb      	ldrb	r3, [r7, #19]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d003      	beq.n	800543a <HAL_CAN_ConfigFilter+0x26>
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f040 812c 	bne.w	8005692 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005442:	d304      	bcc.n	800544e <HAL_CAN_ConfigFilter+0x3a>
 8005444:	f44f 7154 	mov.w	r1, #848	; 0x350
 8005448:	4897      	ldr	r0, [pc, #604]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 800544a:	f7fe f882 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005456:	d304      	bcc.n	8005462 <HAL_CAN_ConfigFilter+0x4e>
 8005458:	f240 3151 	movw	r1, #849	; 0x351
 800545c:	4892      	ldr	r0, [pc, #584]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 800545e:	f7fe f878 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546a:	d304      	bcc.n	8005476 <HAL_CAN_ConfigFilter+0x62>
 800546c:	f240 3152 	movw	r1, #850	; 0x352
 8005470:	488d      	ldr	r0, [pc, #564]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 8005472:	f7fe f86e 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547e:	d304      	bcc.n	800548a <HAL_CAN_ConfigFilter+0x76>
 8005480:	f240 3153 	movw	r1, #851	; 0x353
 8005484:	4888      	ldr	r0, [pc, #544]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 8005486:	f7fe f864 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_CAN_ConfigFilter+0x90>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d004      	beq.n	80054a4 <HAL_CAN_ConfigFilter+0x90>
 800549a:	f44f 7155 	mov.w	r1, #852	; 0x354
 800549e:	4882      	ldr	r0, [pc, #520]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 80054a0:	f7fe f857 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_CAN_ConfigFilter+0xaa>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d004      	beq.n	80054be <HAL_CAN_ConfigFilter+0xaa>
 80054b4:	f240 3155 	movw	r1, #853	; 0x355
 80054b8:	487b      	ldr	r0, [pc, #492]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 80054ba:	f7fe f84a 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_CAN_ConfigFilter+0xc4>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d004      	beq.n	80054d8 <HAL_CAN_ConfigFilter+0xc4>
 80054ce:	f240 3156 	movw	r1, #854	; 0x356
 80054d2:	4875      	ldr	r0, [pc, #468]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 80054d4:	f7fe f83d 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <HAL_CAN_ConfigFilter+0xde>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d004      	beq.n	80054f2 <HAL_CAN_ConfigFilter+0xde>
 80054e8:	f240 3157 	movw	r1, #855	; 0x357
 80054ec:	486e      	ldr	r0, [pc, #440]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 80054ee:	f7fe f830 	bl	8003552 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80054f2:	4b6e      	ldr	r3, [pc, #440]	; (80056ac <HAL_CAN_ConfigFilter+0x298>)
 80054f4:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	2b1b      	cmp	r3, #27
 80054fc:	d904      	bls.n	8005508 <HAL_CAN_ConfigFilter+0xf4>
 80054fe:	f240 3172 	movw	r1, #882	; 0x372
 8005502:	4869      	ldr	r0, [pc, #420]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 8005504:	f7fe f825 	bl	8003552 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b1b      	cmp	r3, #27
 800550e:	d904      	bls.n	800551a <HAL_CAN_ConfigFilter+0x106>
 8005510:	f240 3173 	movw	r1, #883	; 0x373
 8005514:	4864      	ldr	r0, [pc, #400]	; (80056a8 <HAL_CAN_ConfigFilter+0x294>)
 8005516:	f7fe f81c 	bl	8003552 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005520:	f043 0201 	orr.w	r2, r3, #1
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005530:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	431a      	orrs	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2201      	movs	r2, #1
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	43db      	mvns	r3, r3
 8005568:	401a      	ands	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d123      	bne.n	80055c0 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	43db      	mvns	r3, r3
 8005582:	401a      	ands	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800559a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3248      	adds	r2, #72	; 0x48
 80055a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	3348      	adds	r3, #72	; 0x48
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d122      	bne.n	800560e <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80055e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	3248      	adds	r2, #72	; 0x48
 80055ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005602:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005604:	6979      	ldr	r1, [r7, #20]
 8005606:	3348      	adds	r3, #72	; 0x48
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	43db      	mvns	r3, r3
 8005620:	401a      	ands	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005628:	e007      	b.n	800563a <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	431a      	orrs	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	43db      	mvns	r3, r3
 800564c:	401a      	ands	r2, r3
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005654:	e007      	b.n	8005666 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	431a      	orrs	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	431a      	orrs	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005684:	f023 0201 	bic.w	r2, r3, #1
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e006      	b.n	80056a0 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	0800f8f0 	.word	0x0800f8f0
 80056ac:	40006400 	.word	0x40006400

080056b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d12e      	bne.n	8005722 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056dc:	f7ff fc4e 	bl	8004f7c <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80056e2:	e012      	b.n	800570a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056e4:	f7ff fc4a 	bl	8004f7c <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b0a      	cmp	r3, #10
 80056f0:	d90b      	bls.n	800570a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2205      	movs	r2, #5
 8005702:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e012      	b.n	8005730 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e006      	b.n	8005730 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
  }
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800574c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_CAN_AddTxMessage+0x38>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d004      	beq.n	8005770 <HAL_CAN_AddTxMessage+0x38>
 8005766:	f240 41e9 	movw	r1, #1257	; 0x4e9
 800576a:	4884      	ldr	r0, [pc, #528]	; (800597c <HAL_CAN_AddTxMessage+0x244>)
 800576c:	f7fd fef1 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_CAN_AddTxMessage+0x52>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d004      	beq.n	800578a <HAL_CAN_AddTxMessage+0x52>
 8005780:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8005784:	487d      	ldr	r0, [pc, #500]	; (800597c <HAL_CAN_AddTxMessage+0x244>)
 8005786:	f7fd fee4 	bl	8003552 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d904      	bls.n	800579c <HAL_CAN_AddTxMessage+0x64>
 8005792:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8005796:	4879      	ldr	r0, [pc, #484]	; (800597c <HAL_CAN_AddTxMessage+0x244>)
 8005798:	f7fd fedb 	bl	8003552 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ac:	d30f      	bcc.n	80057ce <HAL_CAN_AddTxMessage+0x96>
 80057ae:	f240 41ee 	movw	r1, #1262	; 0x4ee
 80057b2:	4872      	ldr	r0, [pc, #456]	; (800597c <HAL_CAN_AddTxMessage+0x244>)
 80057b4:	f7fd fecd 	bl	8003552 <assert_failed>
 80057b8:	e009      	b.n	80057ce <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c2:	d304      	bcc.n	80057ce <HAL_CAN_AddTxMessage+0x96>
 80057c4:	f240 41f2 	movw	r1, #1266	; 0x4f2
 80057c8:	486c      	ldr	r0, [pc, #432]	; (800597c <HAL_CAN_AddTxMessage+0x244>)
 80057ca:	f7fd fec2 	bl	8003552 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	7d1b      	ldrb	r3, [r3, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_CAN_AddTxMessage+0xb0>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	7d1b      	ldrb	r3, [r3, #20]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d004      	beq.n	80057e8 <HAL_CAN_AddTxMessage+0xb0>
 80057de:	f240 41f4 	movw	r1, #1268	; 0x4f4
 80057e2:	4866      	ldr	r0, [pc, #408]	; (800597c <HAL_CAN_AddTxMessage+0x244>)
 80057e4:	f7fd feb5 	bl	8003552 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80057e8:	7ffb      	ldrb	r3, [r7, #31]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d003      	beq.n	80057f6 <HAL_CAN_AddTxMessage+0xbe>
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	f040 80b8 	bne.w	8005966 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a0 	beq.w	8005956 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	0e1b      	lsrs	r3, r3, #24
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d907      	bls.n	8005836 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e09e      	b.n	8005974 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005836:	2201      	movs	r2, #1
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	409a      	lsls	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	6809      	ldr	r1, [r1, #0]
 8005856:	431a      	orrs	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3318      	adds	r3, #24
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	440b      	add	r3, r1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	e00f      	b.n	8005884 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800586e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005878:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	3318      	adds	r3, #24
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	440b      	add	r3, r1
 8005882:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6819      	ldr	r1, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3318      	adds	r3, #24
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	440b      	add	r3, r1
 8005894:	3304      	adds	r3, #4
 8005896:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	7d1b      	ldrb	r3, [r3, #20]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d111      	bne.n	80058c4 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	3318      	adds	r3, #24
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	4413      	add	r3, r2
 80058ac:	3304      	adds	r3, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	6811      	ldr	r1, [r2, #0]
 80058b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	3318      	adds	r3, #24
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	440b      	add	r3, r1
 80058c0:	3304      	adds	r3, #4
 80058c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3307      	adds	r3, #7
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	061a      	lsls	r2, r3, #24
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3306      	adds	r3, #6
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	041b      	lsls	r3, r3, #16
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3305      	adds	r3, #5
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	4313      	orrs	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	3204      	adds	r2, #4
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	4610      	mov	r0, r2
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	6811      	ldr	r1, [r2, #0]
 80058ec:	ea43 0200 	orr.w	r2, r3, r0
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	440b      	add	r3, r1
 80058f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80058fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3303      	adds	r3, #3
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	061a      	lsls	r2, r3, #24
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3302      	adds	r3, #2
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3301      	adds	r3, #1
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	4313      	orrs	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	4610      	mov	r0, r2
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	6811      	ldr	r1, [r2, #0]
 8005922:	ea43 0200 	orr.w	r2, r3, r0
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	440b      	add	r3, r1
 800592c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005930:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	3318      	adds	r3, #24
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	4413      	add	r3, r2
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	6811      	ldr	r1, [r2, #0]
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3318      	adds	r3, #24
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	440b      	add	r3, r1
 8005950:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	e00e      	b.n	8005974 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e006      	b.n	8005974 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
  }
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	0800f8f0 	.word	0x0800f8f0

08005980 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005994:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <HAL_CAN_GetRxMessage+0x2c>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d004      	beq.n	80059ac <HAL_CAN_GetRxMessage+0x2c>
 80059a2:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 80059a6:	4884      	ldr	r0, [pc, #528]	; (8005bb8 <HAL_CAN_GetRxMessage+0x238>)
 80059a8:	f7fd fdd3 	bl	8003552 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d003      	beq.n	80059ba <HAL_CAN_GetRxMessage+0x3a>
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f040 80f3 	bne.w	8005ba0 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d116      	bne.n	80059fc <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e0e7      	b.n	8005bae <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0d8      	b.n	8005bae <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	331b      	adds	r3, #27
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	4413      	add	r3, r2
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0204 	and.w	r2, r3, #4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10c      	bne.n	8005a34 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	331b      	adds	r3, #27
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	4413      	add	r3, r2
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	0d5b      	lsrs	r3, r3, #21
 8005a2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e00b      	b.n	8005a4c <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	331b      	adds	r3, #27
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	4413      	add	r3, r2
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	331b      	adds	r3, #27
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	4413      	add	r3, r2
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0202 	and.w	r2, r3, #2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	331b      	adds	r3, #27
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 020f 	and.w	r2, r3, #15
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	331b      	adds	r3, #27
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	4413      	add	r3, r2
 8005a86:	3304      	adds	r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	331b      	adds	r3, #27
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	0a1a      	lsrs	r2, r3, #8
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	0c1a      	lsrs	r2, r3, #16
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	3302      	adds	r3, #2
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	0e1a      	lsrs	r2, r3, #24
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	3303      	adds	r3, #3
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	0a1a      	lsrs	r2, r3, #8
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3305      	adds	r3, #5
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	0c1a      	lsrs	r2, r3, #16
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	3306      	adds	r3, #6
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	0e1a      	lsrs	r2, r3, #24
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	3307      	adds	r3, #7
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0220 	orr.w	r2, r2, #32
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	e007      	b.n	8005b9c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0220 	orr.w	r2, r2, #32
 8005b9a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e006      	b.n	8005bae <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	0800f8f0 	.word	0x0800f8f0

08005bbc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bcc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <HAL_CAN_ActivateNotification+0x5c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d904      	bls.n	8005be0 <HAL_CAN_ActivateNotification+0x24>
 8005bd6:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8005bda:	4810      	ldr	r0, [pc, #64]	; (8005c1c <HAL_CAN_ActivateNotification+0x60>)
 8005bdc:	f7fd fcb9 	bl	8003552 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d002      	beq.n	8005bec <HAL_CAN_ActivateNotification+0x30>
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d109      	bne.n	8005c00 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e006      	b.n	8005c0e <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	00038f7f 	.word	0x00038f7f
 8005c1c:	0800f8f0 	.word	0x0800f8f0

08005c20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d07c      	beq.n	8005d60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d023      	beq.n	8005cb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2201      	movs	r2, #1
 8005c76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f983 	bl	8005f8e <HAL_CAN_TxMailbox0CompleteCallback>
 8005c88:	e016      	b.n	8005cb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	e00c      	b.n	8005cb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb0:	e002      	b.n	8005cb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f989 	bl	8005fca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d024      	beq.n	8005d0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f963 	bl	8005fa2 <HAL_CAN_TxMailbox1CompleteCallback>
 8005cdc:	e016      	b.n	8005d0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf0:	e00c      	b.n	8005d0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
 8005d04:	e002      	b.n	8005d0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f969 	bl	8005fde <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d024      	beq.n	8005d60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f943 	bl	8005fb6 <HAL_CAN_TxMailbox2CompleteCallback>
 8005d30:	e016      	b.n	8005d60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	e00c      	b.n	8005d60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
 8005d58:	e002      	b.n	8005d60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f949 	bl	8005ff2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2210      	movs	r2, #16
 8005d82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f930 	bl	8006006 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc ff6e 	bl	8002ca0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2210      	movs	r2, #16
 8005de6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2208      	movs	r2, #8
 8005e02:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f912 	bl	800602e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8f9 	bl	800601a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8fc 	bl	8006042 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2208      	movs	r2, #8
 8005e64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8f5 	bl	8006056 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d07b      	beq.n	8005f6e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d072      	beq.n	8005f66 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	f043 0304 	orr.w	r3, r3, #4
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d043      	beq.n	8005f66 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03e      	beq.n	8005f66 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eee:	2b60      	cmp	r3, #96	; 0x60
 8005ef0:	d02b      	beq.n	8005f4a <HAL_CAN_IRQHandler+0x32a>
 8005ef2:	2b60      	cmp	r3, #96	; 0x60
 8005ef4:	d82e      	bhi.n	8005f54 <HAL_CAN_IRQHandler+0x334>
 8005ef6:	2b50      	cmp	r3, #80	; 0x50
 8005ef8:	d022      	beq.n	8005f40 <HAL_CAN_IRQHandler+0x320>
 8005efa:	2b50      	cmp	r3, #80	; 0x50
 8005efc:	d82a      	bhi.n	8005f54 <HAL_CAN_IRQHandler+0x334>
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d019      	beq.n	8005f36 <HAL_CAN_IRQHandler+0x316>
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d826      	bhi.n	8005f54 <HAL_CAN_IRQHandler+0x334>
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	d010      	beq.n	8005f2c <HAL_CAN_IRQHandler+0x30c>
 8005f0a:	2b30      	cmp	r3, #48	; 0x30
 8005f0c:	d822      	bhi.n	8005f54 <HAL_CAN_IRQHandler+0x334>
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d002      	beq.n	8005f18 <HAL_CAN_IRQHandler+0x2f8>
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d005      	beq.n	8005f22 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005f16:	e01d      	b.n	8005f54 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f043 0308 	orr.w	r3, r3, #8
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f20:	e019      	b.n	8005f56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	f043 0310 	orr.w	r3, r3, #16
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f2a:	e014      	b.n	8005f56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f043 0320 	orr.w	r3, r3, #32
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f34:	e00f      	b.n	8005f56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f3e:	e00a      	b.n	8005f56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f48:	e005      	b.n	8005f56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f52:	e000      	b.n	8005f56 <HAL_CAN_IRQHandler+0x336>
            break;
 8005f54:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f64:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f872 	bl	800606a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f86:	bf00      	nop
 8005f88:	3728      	adds	r7, #40	; 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800609c:	4013      	ands	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060b2:	4a04      	ldr	r2, [pc, #16]	; (80060c4 <__NVIC_SetPriorityGrouping+0x44>)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	60d3      	str	r3, [r2, #12]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	e000ed00 	.word	0xe000ed00

080060c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060cc:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <__NVIC_GetPriorityGrouping+0x18>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	0a1b      	lsrs	r3, r3, #8
 80060d2:	f003 0307 	and.w	r3, r3, #7
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	e000ed00 	.word	0xe000ed00

080060e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	db0b      	blt.n	800610e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	f003 021f 	and.w	r2, r3, #31
 80060fc:	4907      	ldr	r1, [pc, #28]	; (800611c <__NVIC_EnableIRQ+0x38>)
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	2001      	movs	r0, #1
 8006106:	fa00 f202 	lsl.w	r2, r0, r2
 800610a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	e000e100 	.word	0xe000e100

08006120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800612c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006130:	2b00      	cmp	r3, #0
 8006132:	db0a      	blt.n	800614a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	490c      	ldr	r1, [pc, #48]	; (800616c <__NVIC_SetPriority+0x4c>)
 800613a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613e:	0112      	lsls	r2, r2, #4
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	440b      	add	r3, r1
 8006144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006148:	e00a      	b.n	8006160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	4908      	ldr	r1, [pc, #32]	; (8006170 <__NVIC_SetPriority+0x50>)
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	3b04      	subs	r3, #4
 8006158:	0112      	lsls	r2, r2, #4
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	440b      	add	r3, r1
 800615e:	761a      	strb	r2, [r3, #24]
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	e000e100 	.word	0xe000e100
 8006170:	e000ed00 	.word	0xe000ed00

08006174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006174:	b480      	push	{r7}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f1c3 0307 	rsb	r3, r3, #7
 800618e:	2b04      	cmp	r3, #4
 8006190:	bf28      	it	cs
 8006192:	2304      	movcs	r3, #4
 8006194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3304      	adds	r3, #4
 800619a:	2b06      	cmp	r3, #6
 800619c:	d902      	bls.n	80061a4 <NVIC_EncodePriority+0x30>
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3b03      	subs	r3, #3
 80061a2:	e000      	b.n	80061a6 <NVIC_EncodePriority+0x32>
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43da      	mvns	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	401a      	ands	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	fa01 f303 	lsl.w	r3, r1, r3
 80061c6:	43d9      	mvns	r1, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061cc:	4313      	orrs	r3, r2
         );
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3724      	adds	r7, #36	; 0x24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ec:	d301      	bcc.n	80061f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ee:	2301      	movs	r3, #1
 80061f0:	e00f      	b.n	8006212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061f2:	4a0a      	ldr	r2, [pc, #40]	; (800621c <SysTick_Config+0x40>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061fa:	210f      	movs	r1, #15
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006200:	f7ff ff8e 	bl	8006120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <SysTick_Config+0x40>)
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800620a:	4b04      	ldr	r3, [pc, #16]	; (800621c <SysTick_Config+0x40>)
 800620c:	2207      	movs	r2, #7
 800620e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	e000e010 	.word	0xe000e010

08006220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b07      	cmp	r3, #7
 800622c:	d00f      	beq.n	800624e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b06      	cmp	r3, #6
 8006232:	d00c      	beq.n	800624e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b05      	cmp	r3, #5
 8006238:	d009      	beq.n	800624e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d006      	beq.n	800624e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d003      	beq.n	800624e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006246:	2192      	movs	r1, #146	; 0x92
 8006248:	4804      	ldr	r0, [pc, #16]	; (800625c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800624a:	f7fd f982 	bl	8003552 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff ff16 	bl	8006080 <__NVIC_SetPriorityGrouping>
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	0800f928 	.word	0x0800f928

08006260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b0f      	cmp	r3, #15
 8006276:	d903      	bls.n	8006280 <HAL_NVIC_SetPriority+0x20>
 8006278:	21aa      	movs	r1, #170	; 0xaa
 800627a:	480e      	ldr	r0, [pc, #56]	; (80062b4 <HAL_NVIC_SetPriority+0x54>)
 800627c:	f7fd f969 	bl	8003552 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b0f      	cmp	r3, #15
 8006284:	d903      	bls.n	800628e <HAL_NVIC_SetPriority+0x2e>
 8006286:	21ab      	movs	r1, #171	; 0xab
 8006288:	480a      	ldr	r0, [pc, #40]	; (80062b4 <HAL_NVIC_SetPriority+0x54>)
 800628a:	f7fd f962 	bl	8003552 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800628e:	f7ff ff1b 	bl	80060c8 <__NVIC_GetPriorityGrouping>
 8006292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	6978      	ldr	r0, [r7, #20]
 800629a:	f7ff ff6b 	bl	8006174 <NVIC_EncodePriority>
 800629e:	4602      	mov	r2, r0
 80062a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff ff3a 	bl	8006120 <__NVIC_SetPriority>
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	0800f928 	.word	0x0800f928

080062b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80062c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da03      	bge.n	80062d2 <HAL_NVIC_EnableIRQ+0x1a>
 80062ca:	21be      	movs	r1, #190	; 0xbe
 80062cc:	4805      	ldr	r0, [pc, #20]	; (80062e4 <HAL_NVIC_EnableIRQ+0x2c>)
 80062ce:	f7fd f940 	bl	8003552 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff ff04 	bl	80060e4 <__NVIC_EnableIRQ>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	0800f928 	.word	0x0800f928

080062e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff73 	bl	80061dc <SysTick_Config>
 80062f6:	4603      	mov	r3, r0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b04      	cmp	r3, #4
 800630c:	d007      	beq.n	800631e <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8006314:	f240 11c9 	movw	r1, #457	; 0x1c9
 8006318:	480b      	ldr	r0, [pc, #44]	; (8006348 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 800631a:	f7fd f91a 	bl	8003552 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d106      	bne.n	8006332 <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 800632a:	f043 0304 	orr.w	r3, r3, #4
 800632e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8006330:	e005      	b.n	800633e <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a05      	ldr	r2, [pc, #20]	; (800634c <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8006338:	f023 0304 	bic.w	r3, r3, #4
 800633c:	6013      	str	r3, [r2, #0]
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	0800f928 	.word	0x0800f928
 800634c:	e000e010 	.word	0xe000e010

08006350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800635c:	f7fe fe0e 	bl	8004f7c <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e204      	b.n	8006776 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a97      	ldr	r2, [pc, #604]	; (80065d0 <HAL_DMA_Init+0x280>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d04e      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a96      	ldr	r2, [pc, #600]	; (80065d4 <HAL_DMA_Init+0x284>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d049      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a94      	ldr	r2, [pc, #592]	; (80065d8 <HAL_DMA_Init+0x288>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d044      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a93      	ldr	r2, [pc, #588]	; (80065dc <HAL_DMA_Init+0x28c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d03f      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a91      	ldr	r2, [pc, #580]	; (80065e0 <HAL_DMA_Init+0x290>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d03a      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a90      	ldr	r2, [pc, #576]	; (80065e4 <HAL_DMA_Init+0x294>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d035      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a8e      	ldr	r2, [pc, #568]	; (80065e8 <HAL_DMA_Init+0x298>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d030      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a8d      	ldr	r2, [pc, #564]	; (80065ec <HAL_DMA_Init+0x29c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d02b      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a8b      	ldr	r2, [pc, #556]	; (80065f0 <HAL_DMA_Init+0x2a0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d026      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a8a      	ldr	r2, [pc, #552]	; (80065f4 <HAL_DMA_Init+0x2a4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d021      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a88      	ldr	r2, [pc, #544]	; (80065f8 <HAL_DMA_Init+0x2a8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01c      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a87      	ldr	r2, [pc, #540]	; (80065fc <HAL_DMA_Init+0x2ac>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d017      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a85      	ldr	r2, [pc, #532]	; (8006600 <HAL_DMA_Init+0x2b0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d012      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a84      	ldr	r2, [pc, #528]	; (8006604 <HAL_DMA_Init+0x2b4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00d      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a82      	ldr	r2, [pc, #520]	; (8006608 <HAL_DMA_Init+0x2b8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d008      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a81      	ldr	r2, [pc, #516]	; (800660c <HAL_DMA_Init+0x2bc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <HAL_DMA_Init+0xc4>
 800640c:	21b8      	movs	r1, #184	; 0xb8
 800640e:	4880      	ldr	r0, [pc, #512]	; (8006610 <HAL_DMA_Init+0x2c0>)
 8006410:	f7fd f89f 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d026      	beq.n	800646a <HAL_DMA_Init+0x11a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006424:	d021      	beq.n	800646a <HAL_DMA_Init+0x11a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800642e:	d01c      	beq.n	800646a <HAL_DMA_Init+0x11a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006438:	d017      	beq.n	800646a <HAL_DMA_Init+0x11a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006442:	d012      	beq.n	800646a <HAL_DMA_Init+0x11a>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800644c:	d00d      	beq.n	800646a <HAL_DMA_Init+0x11a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006456:	d008      	beq.n	800646a <HAL_DMA_Init+0x11a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8006460:	d003      	beq.n	800646a <HAL_DMA_Init+0x11a>
 8006462:	21b9      	movs	r1, #185	; 0xb9
 8006464:	486a      	ldr	r0, [pc, #424]	; (8006610 <HAL_DMA_Init+0x2c0>)
 8006466:	f7fd f874 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <HAL_DMA_Init+0x13a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d007      	beq.n	800648a <HAL_DMA_Init+0x13a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d003      	beq.n	800648a <HAL_DMA_Init+0x13a>
 8006482:	21ba      	movs	r1, #186	; 0xba
 8006484:	4862      	ldr	r0, [pc, #392]	; (8006610 <HAL_DMA_Init+0x2c0>)
 8006486:	f7fd f864 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006492:	d007      	beq.n	80064a4 <HAL_DMA_Init+0x154>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_DMA_Init+0x154>
 800649c:	21bb      	movs	r1, #187	; 0xbb
 800649e:	485c      	ldr	r0, [pc, #368]	; (8006610 <HAL_DMA_Init+0x2c0>)
 80064a0:	f7fd f857 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ac:	d007      	beq.n	80064be <HAL_DMA_Init+0x16e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_DMA_Init+0x16e>
 80064b6:	21bc      	movs	r1, #188	; 0xbc
 80064b8:	4855      	ldr	r0, [pc, #340]	; (8006610 <HAL_DMA_Init+0x2c0>)
 80064ba:	f7fd f84a 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00d      	beq.n	80064e2 <HAL_DMA_Init+0x192>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ce:	d008      	beq.n	80064e2 <HAL_DMA_Init+0x192>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d003      	beq.n	80064e2 <HAL_DMA_Init+0x192>
 80064da:	21bd      	movs	r1, #189	; 0xbd
 80064dc:	484c      	ldr	r0, [pc, #304]	; (8006610 <HAL_DMA_Init+0x2c0>)
 80064de:	f7fd f838 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <HAL_DMA_Init+0x1b6>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f2:	d008      	beq.n	8006506 <HAL_DMA_Init+0x1b6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064fc:	d003      	beq.n	8006506 <HAL_DMA_Init+0x1b6>
 80064fe:	21be      	movs	r1, #190	; 0xbe
 8006500:	4843      	ldr	r0, [pc, #268]	; (8006610 <HAL_DMA_Init+0x2c0>)
 8006502:	f7fd f826 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00c      	beq.n	8006528 <HAL_DMA_Init+0x1d8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d007      	beq.n	8006528 <HAL_DMA_Init+0x1d8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b20      	cmp	r3, #32
 800651e:	d003      	beq.n	8006528 <HAL_DMA_Init+0x1d8>
 8006520:	21bf      	movs	r1, #191	; 0xbf
 8006522:	483b      	ldr	r0, [pc, #236]	; (8006610 <HAL_DMA_Init+0x2c0>)
 8006524:	f7fd f815 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d012      	beq.n	8006556 <HAL_DMA_Init+0x206>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006538:	d00d      	beq.n	8006556 <HAL_DMA_Init+0x206>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006542:	d008      	beq.n	8006556 <HAL_DMA_Init+0x206>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800654c:	d003      	beq.n	8006556 <HAL_DMA_Init+0x206>
 800654e:	21c0      	movs	r1, #192	; 0xc0
 8006550:	482f      	ldr	r0, [pc, #188]	; (8006610 <HAL_DMA_Init+0x2c0>)
 8006552:	f7fc fffe 	bl	8003552 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_DMA_Init+0x21e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b04      	cmp	r3, #4
 8006564:	d003      	beq.n	800656e <HAL_DMA_Init+0x21e>
 8006566:	21c1      	movs	r1, #193	; 0xc1
 8006568:	4829      	ldr	r0, [pc, #164]	; (8006610 <HAL_DMA_Init+0x2c0>)
 800656a:	f7fc fff2 	bl	8003552 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d065      	beq.n	8006642 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <HAL_DMA_Init+0x24e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	2b01      	cmp	r3, #1
 8006584:	d00b      	beq.n	800659e <HAL_DMA_Init+0x24e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	2b02      	cmp	r3, #2
 800658c:	d007      	beq.n	800659e <HAL_DMA_Init+0x24e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	2b03      	cmp	r3, #3
 8006594:	d003      	beq.n	800659e <HAL_DMA_Init+0x24e>
 8006596:	21c6      	movs	r1, #198	; 0xc6
 8006598:	481d      	ldr	r0, [pc, #116]	; (8006610 <HAL_DMA_Init+0x2c0>)
 800659a:	f7fc ffda 	bl	8003552 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d036      	beq.n	8006614 <HAL_DMA_Init+0x2c4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ae:	d031      	beq.n	8006614 <HAL_DMA_Init+0x2c4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065b8:	d02c      	beq.n	8006614 <HAL_DMA_Init+0x2c4>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065c2:	d027      	beq.n	8006614 <HAL_DMA_Init+0x2c4>
 80065c4:	21c7      	movs	r1, #199	; 0xc7
 80065c6:	4812      	ldr	r0, [pc, #72]	; (8006610 <HAL_DMA_Init+0x2c0>)
 80065c8:	f7fc ffc3 	bl	8003552 <assert_failed>
 80065cc:	e022      	b.n	8006614 <HAL_DMA_Init+0x2c4>
 80065ce:	bf00      	nop
 80065d0:	40026010 	.word	0x40026010
 80065d4:	40026028 	.word	0x40026028
 80065d8:	40026040 	.word	0x40026040
 80065dc:	40026058 	.word	0x40026058
 80065e0:	40026070 	.word	0x40026070
 80065e4:	40026088 	.word	0x40026088
 80065e8:	400260a0 	.word	0x400260a0
 80065ec:	400260b8 	.word	0x400260b8
 80065f0:	40026410 	.word	0x40026410
 80065f4:	40026428 	.word	0x40026428
 80065f8:	40026440 	.word	0x40026440
 80065fc:	40026458 	.word	0x40026458
 8006600:	40026470 	.word	0x40026470
 8006604:	40026488 	.word	0x40026488
 8006608:	400264a0 	.word	0x400264a0
 800660c:	400264b8 	.word	0x400264b8
 8006610:	0800f964 	.word	0x0800f964
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	2b00      	cmp	r3, #0
 800661a:	d012      	beq.n	8006642 <HAL_DMA_Init+0x2f2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006624:	d00d      	beq.n	8006642 <HAL_DMA_Init+0x2f2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800662e:	d008      	beq.n	8006642 <HAL_DMA_Init+0x2f2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006638:	d003      	beq.n	8006642 <HAL_DMA_Init+0x2f2>
 800663a:	21c8      	movs	r1, #200	; 0xc8
 800663c:	4850      	ldr	r0, [pc, #320]	; (8006780 <HAL_DMA_Init+0x430>)
 800663e:	f7fc ff88 	bl	8003552 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006662:	e00f      	b.n	8006684 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006664:	f7fe fc8a 	bl	8004f7c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b05      	cmp	r3, #5
 8006670:	d908      	bls.n	8006684 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2203      	movs	r2, #3
 800667c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e078      	b.n	8006776 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e8      	bne.n	8006664 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4b39      	ldr	r3, [pc, #228]	; (8006784 <HAL_DMA_Init+0x434>)
 800669e:	4013      	ands	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d107      	bne.n	80066ee <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	4313      	orrs	r3, r2
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b04      	cmp	r3, #4
 8006716:	d117      	bne.n	8006748 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa80 	bl	8006c30 <DMA_CheckFifoParam>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2240      	movs	r2, #64	; 0x40
 800673a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006744:	2301      	movs	r3, #1
 8006746:	e016      	b.n	8006776 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fa37 	bl	8006bc4 <DMA_CalcBaseAndBitshift>
 8006756:	4603      	mov	r3, r0
 8006758:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675e:	223f      	movs	r2, #63	; 0x3f
 8006760:	409a      	lsls	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	0800f964 	.word	0x0800f964
 8006784:	f010803f 	.word	0xf010803f

08006788 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_DMA_Start_IT+0x26>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d304      	bcc.n	80067b8 <HAL_DMA_Start_IT+0x30>
 80067ae:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80067b2:	4827      	ldr	r0, [pc, #156]	; (8006850 <HAL_DMA_Start_IT+0xc8>)
 80067b4:	f7fc fecd 	bl	8003552 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_DMA_Start_IT+0x3e>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e040      	b.n	8006848 <HAL_DMA_Start_IT+0xc0>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d12f      	bne.n	800683a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2202      	movs	r2, #2
 80067de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f9ba 	bl	8006b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f8:	223f      	movs	r2, #63	; 0x3f
 80067fa:	409a      	lsls	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0216 	orr.w	r2, r2, #22
 800680e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0208 	orr.w	r2, r2, #8
 8006826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	e005      	b.n	8006846 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006842:	2302      	movs	r3, #2
 8006844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	0800f964 	.word	0x0800f964

08006854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006860:	4b92      	ldr	r3, [pc, #584]	; (8006aac <HAL_DMA_IRQHandler+0x258>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a92      	ldr	r2, [pc, #584]	; (8006ab0 <HAL_DMA_IRQHandler+0x25c>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687e:	2208      	movs	r2, #8
 8006880:	409a      	lsls	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4013      	ands	r3, r2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01a      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0204 	bic.w	r2, r2, #4
 80068a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ac:	2208      	movs	r2, #8
 80068ae:	409a      	lsls	r2, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b8:	f043 0201 	orr.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	2201      	movs	r2, #1
 80068c6:	409a      	lsls	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4013      	ands	r3, r2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	2201      	movs	r2, #1
 80068e4:	409a      	lsls	r2, r3
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	f043 0202 	orr.w	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	2204      	movs	r2, #4
 80068fc:	409a      	lsls	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d012      	beq.n	800692c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	2204      	movs	r2, #4
 800691a:	409a      	lsls	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006924:	f043 0204 	orr.w	r2, r3, #4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	2210      	movs	r2, #16
 8006932:	409a      	lsls	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d043      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d03c      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	2210      	movs	r2, #16
 8006950:	409a      	lsls	r2, r3
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d018      	beq.n	8006996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d024      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
 8006982:	e01f      	b.n	80069c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
 8006994:	e016      	b.n	80069c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d107      	bne.n	80069b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0208 	bic.w	r2, r2, #8
 80069b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	2220      	movs	r2, #32
 80069ca:	409a      	lsls	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 808e 	beq.w	8006af2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8086 	beq.w	8006af2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	2220      	movs	r2, #32
 80069ec:	409a      	lsls	r2, r3
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d136      	bne.n	8006a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0216 	bic.w	r2, r2, #22
 8006a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <HAL_DMA_IRQHandler+0x1da>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0208 	bic.w	r2, r2, #8
 8006a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a42:	223f      	movs	r2, #63	; 0x3f
 8006a44:	409a      	lsls	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d07d      	beq.n	8006b5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
        }
        return;
 8006a6a:	e078      	b.n	8006b5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01c      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d108      	bne.n	8006a9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d030      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
 8006a98:	e02b      	b.n	8006af2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d027      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
 8006aaa:	e022      	b.n	8006af2 <HAL_DMA_IRQHandler+0x29e>
 8006aac:	200001d0 	.word	0x200001d0
 8006ab0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10f      	bne.n	8006ae2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0210 	bic.w	r2, r2, #16
 8006ad0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d032      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d022      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2205      	movs	r2, #5
 8006b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0201 	bic.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d307      	bcc.n	8006b3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f2      	bne.n	8006b1e <HAL_DMA_IRQHandler+0x2ca>
 8006b38:	e000      	b.n	8006b3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006b3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
 8006b5c:	e000      	b.n	8006b60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006b5e:	bf00      	nop
    }
  }
}
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop

08006b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d108      	bne.n	8006ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ba6:	e007      	b.n	8006bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	60da      	str	r2, [r3, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3b10      	subs	r3, #16
 8006bd4:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <DMA_CalcBaseAndBitshift+0x64>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	091b      	lsrs	r3, r3, #4
 8006bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006bde:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <DMA_CalcBaseAndBitshift+0x68>)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d909      	bls.n	8006c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006bfa:	f023 0303 	bic.w	r3, r3, #3
 8006bfe:	1d1a      	adds	r2, r3, #4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	659a      	str	r2, [r3, #88]	; 0x58
 8006c04:	e007      	b.n	8006c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	aaaaaaab 	.word	0xaaaaaaab
 8006c2c:	0800fb9c 	.word	0x0800fb9c

08006c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d11f      	bne.n	8006c8a <DMA_CheckFifoParam+0x5a>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d856      	bhi.n	8006cfe <DMA_CheckFifoParam+0xce>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <DMA_CheckFifoParam+0x28>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006c7b 	.word	0x08006c7b
 8006c60:	08006c69 	.word	0x08006c69
 8006c64:	08006cff 	.word	0x08006cff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d046      	beq.n	8006d02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c78:	e043      	b.n	8006d02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c82:	d140      	bne.n	8006d06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c88:	e03d      	b.n	8006d06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	d121      	bne.n	8006cd8 <DMA_CheckFifoParam+0xa8>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d837      	bhi.n	8006d0a <DMA_CheckFifoParam+0xda>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <DMA_CheckFifoParam+0x70>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cb7 	.word	0x08006cb7
 8006ca8:	08006cb1 	.word	0x08006cb1
 8006cac:	08006cc9 	.word	0x08006cc9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb4:	e030      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d025      	beq.n	8006d0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc6:	e022      	b.n	8006d0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cd0:	d11f      	bne.n	8006d12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006cd6:	e01c      	b.n	8006d12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d903      	bls.n	8006ce6 <DMA_CheckFifoParam+0xb6>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d003      	beq.n	8006cec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ce4:	e018      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cea:	e015      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00e      	beq.n	8006d16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e00b      	b.n	8006d16 <DMA_CheckFifoParam+0xe6>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e00a      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      break;
 8006d02:	bf00      	nop
 8006d04:	e008      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      break;
 8006d06:	bf00      	nop
 8006d08:	e006      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e004      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e002      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      break;   
 8006d12:	bf00      	nop
 8006d14:	e000      	b.n	8006d18 <DMA_CheckFifoParam+0xe8>
      break;
 8006d16:	bf00      	nop
    }
  } 
  
  return status; 
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b088      	sub	sp, #32
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a45      	ldr	r2, [pc, #276]	; (8006e58 <HAL_GPIO_Init+0x130>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d02b      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a44      	ldr	r2, [pc, #272]	; (8006e5c <HAL_GPIO_Init+0x134>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a43      	ldr	r2, [pc, #268]	; (8006e60 <HAL_GPIO_Init+0x138>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d023      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a42      	ldr	r2, [pc, #264]	; (8006e64 <HAL_GPIO_Init+0x13c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01f      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a41      	ldr	r2, [pc, #260]	; (8006e68 <HAL_GPIO_Init+0x140>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01b      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a40      	ldr	r2, [pc, #256]	; (8006e6c <HAL_GPIO_Init+0x144>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d017      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a3f      	ldr	r2, [pc, #252]	; (8006e70 <HAL_GPIO_Init+0x148>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a3e      	ldr	r2, [pc, #248]	; (8006e74 <HAL_GPIO_Init+0x14c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00f      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a3d      	ldr	r2, [pc, #244]	; (8006e78 <HAL_GPIO_Init+0x150>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <HAL_GPIO_Init+0x154>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d007      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a3b      	ldr	r2, [pc, #236]	; (8006e80 <HAL_GPIO_Init+0x158>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_Init+0x76>
 8006d96:	21b3      	movs	r1, #179	; 0xb3
 8006d98:	483a      	ldr	r0, [pc, #232]	; (8006e84 <HAL_GPIO_Init+0x15c>)
 8006d9a:	f7fc fbda 	bl	8003552 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_GPIO_Init+0x8c>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	041b      	lsls	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_GPIO_Init+0x94>
 8006db4:	21b4      	movs	r1, #180	; 0xb4
 8006db6:	4833      	ldr	r0, [pc, #204]	; (8006e84 <HAL_GPIO_Init+0x15c>)
 8006db8:	f7fc fbcb 	bl	8003552 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d035      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d031      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b11      	cmp	r3, #17
 8006dd2:	d02d      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d029      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b12      	cmp	r3, #18
 8006de2:	d025      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a27      	ldr	r2, [pc, #156]	; (8006e88 <HAL_GPIO_Init+0x160>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d020      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <HAL_GPIO_Init+0x164>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d01b      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a24      	ldr	r2, [pc, #144]	; (8006e90 <HAL_GPIO_Init+0x168>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d016      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4a23      	ldr	r2, [pc, #140]	; (8006e94 <HAL_GPIO_Init+0x16c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d011      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a21      	ldr	r2, [pc, #132]	; (8006e98 <HAL_GPIO_Init+0x170>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00c      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4a20      	ldr	r2, [pc, #128]	; (8006e9c <HAL_GPIO_Init+0x174>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d003      	beq.n	8006e30 <HAL_GPIO_Init+0x108>
 8006e28:	21b5      	movs	r1, #181	; 0xb5
 8006e2a:	4816      	ldr	r0, [pc, #88]	; (8006e84 <HAL_GPIO_Init+0x15c>)
 8006e2c:	f7fc fb91 	bl	8003552 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <HAL_GPIO_Init+0x128>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d007      	beq.n	8006e50 <HAL_GPIO_Init+0x128>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d003      	beq.n	8006e50 <HAL_GPIO_Init+0x128>
 8006e48:	21b6      	movs	r1, #182	; 0xb6
 8006e4a:	480e      	ldr	r0, [pc, #56]	; (8006e84 <HAL_GPIO_Init+0x15c>)
 8006e4c:	f7fc fb81 	bl	8003552 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e270      	b.n	8007338 <HAL_GPIO_Init+0x610>
 8006e56:	bf00      	nop
 8006e58:	40020000 	.word	0x40020000
 8006e5c:	40020400 	.word	0x40020400
 8006e60:	40020800 	.word	0x40020800
 8006e64:	40020c00 	.word	0x40020c00
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40021400 	.word	0x40021400
 8006e70:	40021800 	.word	0x40021800
 8006e74:	40021c00 	.word	0x40021c00
 8006e78:	40022000 	.word	0x40022000
 8006e7c:	40022400 	.word	0x40022400
 8006e80:	40022800 	.word	0x40022800
 8006e84:	0800f99c 	.word	0x0800f99c
 8006e88:	10110000 	.word	0x10110000
 8006e8c:	10210000 	.word	0x10210000
 8006e90:	10310000 	.word	0x10310000
 8006e94:	10120000 	.word	0x10120000
 8006e98:	10220000 	.word	0x10220000
 8006e9c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	f040 823a 	bne.w	8007332 <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d00b      	beq.n	8006ede <HAL_GPIO_Init+0x1b6>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d007      	beq.n	8006ede <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ed2:	2b11      	cmp	r3, #17
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b12      	cmp	r3, #18
 8006edc:	d144      	bne.n	8006f68 <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00f      	beq.n	8006f06 <HAL_GPIO_Init+0x1de>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d00b      	beq.n	8006f06 <HAL_GPIO_Init+0x1de>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d007      	beq.n	8006f06 <HAL_GPIO_Init+0x1de>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d003      	beq.n	8006f06 <HAL_GPIO_Init+0x1de>
 8006efe:	21c8      	movs	r1, #200	; 0xc8
 8006f00:	489a      	ldr	r0, [pc, #616]	; (800716c <HAL_GPIO_Init+0x444>)
 8006f02:	f7fc fb26 	bl	8003552 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	2203      	movs	r2, #3
 8006f12:	fa02 f303 	lsl.w	r3, r2, r3
 8006f16:	43db      	mvns	r3, r3
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	43db      	mvns	r3, r3
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	091b      	lsrs	r3, r3, #4
 8006f52:	f003 0201 	and.w	r2, r3, #1
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	2203      	movs	r2, #3
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d004      	beq.n	8006faa <HAL_GPIO_Init+0x282>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b12      	cmp	r3, #18
 8006fa6:	f040 80e3 	bne.w	8007170 <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80b6 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b09      	cmp	r3, #9
 8006fba:	f000 80b1 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80ac 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80a7 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80a2 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 809d 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	f000 8098 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	f000 8093 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	f000 808e 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b02      	cmp	r3, #2
 800700a:	f000 8089 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b02      	cmp	r3, #2
 8007014:	f000 8084 	beq.w	8007120 <HAL_GPIO_Init+0x3f8>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d07f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b04      	cmp	r3, #4
 8007026:	d07b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d077      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b04      	cmp	r3, #4
 8007036:	d073      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b05      	cmp	r3, #5
 800703e:	d06f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b05      	cmp	r3, #5
 8007046:	d06b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b09      	cmp	r3, #9
 800704e:	d067      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b06      	cmp	r3, #6
 8007056:	d063      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b09      	cmp	r3, #9
 800705e:	d05f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b07      	cmp	r3, #7
 8007066:	d05b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b07      	cmp	r3, #7
 800706e:	d057      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b07      	cmp	r3, #7
 8007076:	d053      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d04f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d04b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d047      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b09      	cmp	r3, #9
 8007096:	d043      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b09      	cmp	r3, #9
 800709e:	d03f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b0a      	cmp	r3, #10
 80070a6:	d03b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b0a      	cmp	r3, #10
 80070ae:	d037      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b0b      	cmp	r3, #11
 80070b6:	d033      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b0c      	cmp	r3, #12
 80070be:	d02f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b0c      	cmp	r3, #12
 80070c6:	d02b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b0d      	cmp	r3, #13
 80070ce:	d027      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b0f      	cmp	r3, #15
 80070d6:	d023      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b05      	cmp	r3, #5
 80070de:	d01f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b05      	cmp	r3, #5
 80070e6:	d01b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b05      	cmp	r3, #5
 80070ee:	d017      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d013      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d00f      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d00b      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	2b06      	cmp	r3, #6
 800710e:	d007      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b0e      	cmp	r3, #14
 8007116:	d003      	beq.n	8007120 <HAL_GPIO_Init+0x3f8>
 8007118:	21e0      	movs	r1, #224	; 0xe0
 800711a:	4814      	ldr	r0, [pc, #80]	; (800716c <HAL_GPIO_Init+0x444>)
 800711c:	f7fc fa19 	bl	8003552 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	08da      	lsrs	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3208      	adds	r2, #8
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	220f      	movs	r2, #15
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	4313      	orrs	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	08da      	lsrs	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3208      	adds	r2, #8
 8007162:	69b9      	ldr	r1, [r7, #24]
 8007164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007168:	e002      	b.n	8007170 <HAL_GPIO_Init+0x448>
 800716a:	bf00      	nop
 800716c:	0800f99c 	.word	0x0800f99c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	2203      	movs	r2, #3
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	43db      	mvns	r3, r3
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	4013      	ands	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f003 0203 	and.w	r2, r3, #3
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	fa02 f303 	lsl.w	r3, r2, r3
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	4313      	orrs	r3, r2
 800719c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80c0 	beq.w	8007332 <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	4b65      	ldr	r3, [pc, #404]	; (800734c <HAL_GPIO_Init+0x624>)
 80071b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ba:	4a64      	ldr	r2, [pc, #400]	; (800734c <HAL_GPIO_Init+0x624>)
 80071bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c0:	6453      	str	r3, [r2, #68]	; 0x44
 80071c2:	4b62      	ldr	r3, [pc, #392]	; (800734c <HAL_GPIO_Init+0x624>)
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071ce:	4a60      	ldr	r2, [pc, #384]	; (8007350 <HAL_GPIO_Init+0x628>)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	089b      	lsrs	r3, r3, #2
 80071d4:	3302      	adds	r3, #2
 80071d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	220f      	movs	r2, #15
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	43db      	mvns	r3, r3
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	4013      	ands	r3, r2
 80071f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a57      	ldr	r2, [pc, #348]	; (8007354 <HAL_GPIO_Init+0x62c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d037      	beq.n	800726a <HAL_GPIO_Init+0x542>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a56      	ldr	r2, [pc, #344]	; (8007358 <HAL_GPIO_Init+0x630>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d031      	beq.n	8007266 <HAL_GPIO_Init+0x53e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a55      	ldr	r2, [pc, #340]	; (800735c <HAL_GPIO_Init+0x634>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d02b      	beq.n	8007262 <HAL_GPIO_Init+0x53a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a54      	ldr	r2, [pc, #336]	; (8007360 <HAL_GPIO_Init+0x638>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d025      	beq.n	800725e <HAL_GPIO_Init+0x536>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a53      	ldr	r2, [pc, #332]	; (8007364 <HAL_GPIO_Init+0x63c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01f      	beq.n	800725a <HAL_GPIO_Init+0x532>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a52      	ldr	r2, [pc, #328]	; (8007368 <HAL_GPIO_Init+0x640>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d019      	beq.n	8007256 <HAL_GPIO_Init+0x52e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a51      	ldr	r2, [pc, #324]	; (800736c <HAL_GPIO_Init+0x644>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_GPIO_Init+0x52a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a50      	ldr	r2, [pc, #320]	; (8007370 <HAL_GPIO_Init+0x648>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00d      	beq.n	800724e <HAL_GPIO_Init+0x526>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a4f      	ldr	r2, [pc, #316]	; (8007374 <HAL_GPIO_Init+0x64c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <HAL_GPIO_Init+0x522>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a4e      	ldr	r2, [pc, #312]	; (8007378 <HAL_GPIO_Init+0x650>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d101      	bne.n	8007246 <HAL_GPIO_Init+0x51e>
 8007242:	2309      	movs	r3, #9
 8007244:	e012      	b.n	800726c <HAL_GPIO_Init+0x544>
 8007246:	230a      	movs	r3, #10
 8007248:	e010      	b.n	800726c <HAL_GPIO_Init+0x544>
 800724a:	2308      	movs	r3, #8
 800724c:	e00e      	b.n	800726c <HAL_GPIO_Init+0x544>
 800724e:	2307      	movs	r3, #7
 8007250:	e00c      	b.n	800726c <HAL_GPIO_Init+0x544>
 8007252:	2306      	movs	r3, #6
 8007254:	e00a      	b.n	800726c <HAL_GPIO_Init+0x544>
 8007256:	2305      	movs	r3, #5
 8007258:	e008      	b.n	800726c <HAL_GPIO_Init+0x544>
 800725a:	2304      	movs	r3, #4
 800725c:	e006      	b.n	800726c <HAL_GPIO_Init+0x544>
 800725e:	2303      	movs	r3, #3
 8007260:	e004      	b.n	800726c <HAL_GPIO_Init+0x544>
 8007262:	2302      	movs	r3, #2
 8007264:	e002      	b.n	800726c <HAL_GPIO_Init+0x544>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <HAL_GPIO_Init+0x544>
 800726a:	2300      	movs	r3, #0
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	f002 0203 	and.w	r2, r2, #3
 8007272:	0092      	lsls	r2, r2, #2
 8007274:	4093      	lsls	r3, r2
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	4313      	orrs	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800727c:	4934      	ldr	r1, [pc, #208]	; (8007350 <HAL_GPIO_Init+0x628>)
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	089b      	lsrs	r3, r3, #2
 8007282:	3302      	adds	r3, #2
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800728a:	4b3c      	ldr	r3, [pc, #240]	; (800737c <HAL_GPIO_Init+0x654>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	43db      	mvns	r3, r3
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	4013      	ands	r3, r2
 8007298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072ae:	4a33      	ldr	r2, [pc, #204]	; (800737c <HAL_GPIO_Init+0x654>)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80072b4:	4b31      	ldr	r3, [pc, #196]	; (800737c <HAL_GPIO_Init+0x654>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	43db      	mvns	r3, r3
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	4013      	ands	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072d8:	4a28      	ldr	r2, [pc, #160]	; (800737c <HAL_GPIO_Init+0x654>)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072de:	4b27      	ldr	r3, [pc, #156]	; (800737c <HAL_GPIO_Init+0x654>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	43db      	mvns	r3, r3
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	4013      	ands	r3, r2
 80072ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007302:	4a1e      	ldr	r2, [pc, #120]	; (800737c <HAL_GPIO_Init+0x654>)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007308:	4b1c      	ldr	r3, [pc, #112]	; (800737c <HAL_GPIO_Init+0x654>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	43db      	mvns	r3, r3
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	4013      	ands	r3, r2
 8007316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <HAL_GPIO_Init+0x654>)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3301      	adds	r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	2b0f      	cmp	r3, #15
 800733c:	f67f adb0 	bls.w	8006ea0 <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40023800 	.word	0x40023800
 8007350:	40013800 	.word	0x40013800
 8007354:	40020000 	.word	0x40020000
 8007358:	40020400 	.word	0x40020400
 800735c:	40020800 	.word	0x40020800
 8007360:	40020c00 	.word	0x40020c00
 8007364:	40021000 	.word	0x40021000
 8007368:	40021400 	.word	0x40021400
 800736c:	40021800 	.word	0x40021800
 8007370:	40021c00 	.word	0x40021c00
 8007374:	40022000 	.word	0x40022000
 8007378:	40022400 	.word	0x40022400
 800737c:	40013c00 	.word	0x40013c00

08007380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800738c:	887b      	ldrh	r3, [r7, #2]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <HAL_GPIO_ReadPin+0x1c>
 8007392:	887b      	ldrh	r3, [r7, #2]
 8007394:	0c1b      	lsrs	r3, r3, #16
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_GPIO_ReadPin+0x26>
 800739c:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80073a0:	4809      	ldr	r0, [pc, #36]	; (80073c8 <HAL_GPIO_ReadPin+0x48>)
 80073a2:	f7fc f8d6 	bl	8003552 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	887b      	ldrh	r3, [r7, #2]
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
 80073b6:	e001      	b.n	80073bc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	0800f99c 	.word	0x0800f99c

080073cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
 80073d8:	4613      	mov	r3, r2
 80073da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80073dc:	887b      	ldrh	r3, [r7, #2]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <HAL_GPIO_WritePin+0x20>
 80073e2:	887b      	ldrh	r3, [r7, #2]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <HAL_GPIO_WritePin+0x2a>
 80073ec:	f240 119f 	movw	r1, #415	; 0x19f
 80073f0:	480e      	ldr	r0, [pc, #56]	; (800742c <HAL_GPIO_WritePin+0x60>)
 80073f2:	f7fc f8ae 	bl	8003552 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80073f6:	787b      	ldrb	r3, [r7, #1]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d007      	beq.n	800740c <HAL_GPIO_WritePin+0x40>
 80073fc:	787b      	ldrb	r3, [r7, #1]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d004      	beq.n	800740c <HAL_GPIO_WritePin+0x40>
 8007402:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8007406:	4809      	ldr	r0, [pc, #36]	; (800742c <HAL_GPIO_WritePin+0x60>)
 8007408:	f7fc f8a3 	bl	8003552 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800740c:	787b      	ldrb	r3, [r7, #1]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007418:	e003      	b.n	8007422 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800741a:	887b      	ldrh	r3, [r7, #2]
 800741c:	041a      	lsls	r2, r3, #16
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	619a      	str	r2, [r3, #24]
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	0800f99c 	.word	0x0800f99c

08007430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	4013      	ands	r3, r2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d006      	beq.n	8007454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007446:	4a05      	ldr	r2, [pc, #20]	; (800745c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fb fb66 	bl	8002b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40013c00 	.word	0x40013c00

08007460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e1be      	b.n	80077f0 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a9f      	ldr	r2, [pc, #636]	; (80076f4 <HAL_I2C_Init+0x294>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00e      	beq.n	800749a <HAL_I2C_Init+0x3a>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a9d      	ldr	r2, [pc, #628]	; (80076f8 <HAL_I2C_Init+0x298>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_I2C_Init+0x3a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a9c      	ldr	r2, [pc, #624]	; (80076fc <HAL_I2C_Init+0x29c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d004      	beq.n	800749a <HAL_I2C_Init+0x3a>
 8007490:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007494:	489a      	ldr	r0, [pc, #616]	; (8007700 <HAL_I2C_Init+0x2a0>)
 8007496:	f7fc f85c 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <HAL_I2C_Init+0x4c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4a97      	ldr	r2, [pc, #604]	; (8007704 <HAL_I2C_Init+0x2a4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d904      	bls.n	80074b6 <HAL_I2C_Init+0x56>
 80074ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80074b0:	4893      	ldr	r0, [pc, #588]	; (8007700 <HAL_I2C_Init+0x2a0>)
 80074b2:	f7fc f84e 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <HAL_I2C_Init+0x72>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c6:	d004      	beq.n	80074d2 <HAL_I2C_Init+0x72>
 80074c8:	f240 11c1 	movw	r1, #449	; 0x1c1
 80074cc:	488c      	ldr	r0, [pc, #560]	; (8007700 <HAL_I2C_Init+0x2a0>)
 80074ce:	f7fc f840 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_I2C_Init+0x8c>
 80074e2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80074e6:	4886      	ldr	r0, [pc, #536]	; (8007700 <HAL_I2C_Init+0x2a0>)
 80074e8:	f7fc f833 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f4:	d009      	beq.n	800750a <HAL_I2C_Init+0xaa>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074fe:	d004      	beq.n	800750a <HAL_I2C_Init+0xaa>
 8007500:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007504:	487e      	ldr	r0, [pc, #504]	; (8007700 <HAL_I2C_Init+0x2a0>)
 8007506:	f7fc f824 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d008      	beq.n	8007524 <HAL_I2C_Init+0xc4>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d004      	beq.n	8007524 <HAL_I2C_Init+0xc4>
 800751a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800751e:	4878      	ldr	r0, [pc, #480]	; (8007700 <HAL_I2C_Init+0x2a0>)
 8007520:	f7fc f817 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <HAL_I2C_Init+0xda>
 8007530:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007534:	4872      	ldr	r0, [pc, #456]	; (8007700 <HAL_I2C_Init+0x2a0>)
 8007536:	f7fc f80c 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d008      	beq.n	8007554 <HAL_I2C_Init+0xf4>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d004      	beq.n	8007554 <HAL_I2C_Init+0xf4>
 800754a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800754e:	486c      	ldr	r0, [pc, #432]	; (8007700 <HAL_I2C_Init+0x2a0>)
 8007550:	f7fb ffff 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_I2C_Init+0x10e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d004      	beq.n	800756e <HAL_I2C_Init+0x10e>
 8007564:	f240 11c7 	movw	r1, #455	; 0x1c7
 8007568:	4865      	ldr	r0, [pc, #404]	; (8007700 <HAL_I2C_Init+0x2a0>)
 800756a:	f7fb fff2 	bl	8003552 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fa fd3e 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2224      	movs	r2, #36	; 0x24
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0201 	bic.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075c0:	f001 fe70 	bl	80092a4 <HAL_RCC_GetPCLK1Freq>
 80075c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	4a4f      	ldr	r2, [pc, #316]	; (8007708 <HAL_I2C_Init+0x2a8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d807      	bhi.n	80075e0 <HAL_I2C_Init+0x180>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a4e      	ldr	r2, [pc, #312]	; (800770c <HAL_I2C_Init+0x2ac>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	bf94      	ite	ls
 80075d8:	2301      	movls	r3, #1
 80075da:	2300      	movhi	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e006      	b.n	80075ee <HAL_I2C_Init+0x18e>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4a4b      	ldr	r2, [pc, #300]	; (8007710 <HAL_I2C_Init+0x2b0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	bf94      	ite	ls
 80075e8:	2301      	movls	r3, #1
 80075ea:	2300      	movhi	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0fc      	b.n	80077f0 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a46      	ldr	r2, [pc, #280]	; (8007714 <HAL_I2C_Init+0x2b4>)
 80075fa:	fba2 2303 	umull	r2, r3, r2, r3
 80075fe:	0c9b      	lsrs	r3, r3, #18
 8007600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a38      	ldr	r2, [pc, #224]	; (8007708 <HAL_I2C_Init+0x2a8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d802      	bhi.n	8007630 <HAL_I2C_Init+0x1d0>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3301      	adds	r3, #1
 800762e:	e009      	b.n	8007644 <HAL_I2C_Init+0x1e4>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	4a37      	ldr	r2, [pc, #220]	; (8007718 <HAL_I2C_Init+0x2b8>)
 800763c:	fba2 2303 	umull	r2, r3, r2, r3
 8007640:	099b      	lsrs	r3, r3, #6
 8007642:	3301      	adds	r3, #1
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	430b      	orrs	r3, r1
 800764a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	492a      	ldr	r1, [pc, #168]	; (8007708 <HAL_I2C_Init+0x2a8>)
 8007660:	428b      	cmp	r3, r1
 8007662:	d819      	bhi.n	8007698 <HAL_I2C_Init+0x238>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1e59      	subs	r1, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007672:	1c59      	adds	r1, r3, #1
 8007674:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007678:	400b      	ands	r3, r1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <HAL_I2C_Init+0x234>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1e59      	subs	r1, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	fbb1 f3f3 	udiv	r3, r1, r3
 800768c:	3301      	adds	r3, #1
 800768e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007692:	e066      	b.n	8007762 <HAL_I2C_Init+0x302>
 8007694:	2304      	movs	r3, #4
 8007696:	e064      	b.n	8007762 <HAL_I2C_Init+0x302>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d111      	bne.n	80076c4 <HAL_I2C_Init+0x264>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	1e58      	subs	r0, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6859      	ldr	r1, [r3, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	440b      	add	r3, r1
 80076ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80076b2:	3301      	adds	r3, #1
 80076b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	e012      	b.n	80076ea <HAL_I2C_Init+0x28a>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	1e58      	subs	r0, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6859      	ldr	r1, [r3, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	0099      	lsls	r1, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80076da:	3301      	adds	r3, #1
 80076dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bf0c      	ite	eq
 80076e4:	2301      	moveq	r3, #1
 80076e6:	2300      	movne	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d016      	beq.n	800771c <HAL_I2C_Init+0x2bc>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e037      	b.n	8007762 <HAL_I2C_Init+0x302>
 80076f2:	bf00      	nop
 80076f4:	40005400 	.word	0x40005400
 80076f8:	40005800 	.word	0x40005800
 80076fc:	40005c00 	.word	0x40005c00
 8007700:	0800f9d8 	.word	0x0800f9d8
 8007704:	00061a80 	.word	0x00061a80
 8007708:	000186a0 	.word	0x000186a0
 800770c:	001e847f 	.word	0x001e847f
 8007710:	003d08ff 	.word	0x003d08ff
 8007714:	431bde83 	.word	0x431bde83
 8007718:	10624dd3 	.word	0x10624dd3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10e      	bne.n	8007742 <HAL_I2C_Init+0x2e2>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1e58      	subs	r0, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6859      	ldr	r1, [r3, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	440b      	add	r3, r1
 8007732:	fbb0 f3f3 	udiv	r3, r0, r3
 8007736:	3301      	adds	r3, #1
 8007738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007740:	e00f      	b.n	8007762 <HAL_I2C_Init+0x302>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1e58      	subs	r0, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	0099      	lsls	r1, r3, #2
 8007752:	440b      	add	r3, r1
 8007754:	fbb0 f3f3 	udiv	r3, r0, r3
 8007758:	3301      	adds	r3, #1
 800775a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	6809      	ldr	r1, [r1, #0]
 8007766:	4313      	orrs	r3, r2
 8007768:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69da      	ldr	r2, [r3, #28]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007790:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6911      	ldr	r1, [r2, #16]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	68d2      	ldr	r2, [r2, #12]
 800779c:	4311      	orrs	r1, r2
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	430b      	orrs	r3, r1
 80077a4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4603      	mov	r3, r0
 8007808:	817b      	strh	r3, [r7, #10]
 800780a:	460b      	mov	r3, r1
 800780c:	813b      	strh	r3, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007812:	f7fd fbb3 	bl	8004f7c <HAL_GetTick>
 8007816:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d007      	beq.n	800782e <HAL_I2C_Mem_Write+0x36>
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2b10      	cmp	r3, #16
 8007822:	d004      	beq.n	800782e <HAL_I2C_Mem_Write+0x36>
 8007824:	f640 1175 	movw	r1, #2421	; 0x975
 8007828:	4873      	ldr	r0, [pc, #460]	; (80079f8 <HAL_I2C_Mem_Write+0x200>)
 800782a:	f7fb fe92 	bl	8003552 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b20      	cmp	r3, #32
 8007838:	f040 80d9 	bne.w	80079ee <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2319      	movs	r3, #25
 8007842:	2201      	movs	r2, #1
 8007844:	496d      	ldr	r1, [pc, #436]	; (80079fc <HAL_I2C_Mem_Write+0x204>)
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fc8c 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8007852:	2302      	movs	r3, #2
 8007854:	e0cc      	b.n	80079f0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_I2C_Mem_Write+0x6c>
 8007860:	2302      	movs	r3, #2
 8007862:	e0c5      	b.n	80079f0 <HAL_I2C_Mem_Write+0x1f8>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b01      	cmp	r3, #1
 8007878:	d007      	beq.n	800788a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0201 	orr.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007898:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2221      	movs	r2, #33	; 0x21
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2240      	movs	r2, #64	; 0x40
 80078a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a3a      	ldr	r2, [r7, #32]
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a4d      	ldr	r2, [pc, #308]	; (8007a00 <HAL_I2C_Mem_Write+0x208>)
 80078ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078cc:	88f8      	ldrh	r0, [r7, #6]
 80078ce:	893a      	ldrh	r2, [r7, #8]
 80078d0:	8979      	ldrh	r1, [r7, #10]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	4603      	mov	r3, r0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fac3 	bl	8007e68 <I2C_RequestMemoryWrite>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d052      	beq.n	800798e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e081      	b.n	80079f0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fd0d 	bl	8008310 <I2C_WaitOnTXEFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00d      	beq.n	8007918 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	2b04      	cmp	r3, #4
 8007902:	d107      	bne.n	8007914 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e06b      	b.n	80079f0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	781a      	ldrb	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b04      	cmp	r3, #4
 8007954:	d11b      	bne.n	800798e <HAL_I2C_Mem_Write+0x196>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795a:	2b00      	cmp	r3, #0
 800795c:	d017      	beq.n	800798e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	781a      	ldrb	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1aa      	bne.n	80078ec <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fcf9 	bl	8008392 <I2C_WaitOnBTFFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d107      	bne.n	80079be <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e016      	b.n	80079f0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e000      	b.n	80079f0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80079ee:	2302      	movs	r3, #2
  }
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	0800f9d8 	.word	0x0800f9d8
 80079fc:	00100002 	.word	0x00100002
 8007a00:	ffff0000 	.word	0xffff0000

08007a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08c      	sub	sp, #48	; 0x30
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	461a      	mov	r2, r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	817b      	strh	r3, [r7, #10]
 8007a16:	460b      	mov	r3, r1
 8007a18:	813b      	strh	r3, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a1e:	f7fd faad 	bl	8004f7c <HAL_GetTick>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d007      	beq.n	8007a3a <HAL_I2C_Mem_Read+0x36>
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d004      	beq.n	8007a3a <HAL_I2C_Mem_Read+0x36>
 8007a30:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8007a34:	4881      	ldr	r0, [pc, #516]	; (8007c3c <HAL_I2C_Mem_Read+0x238>)
 8007a36:	f7fb fd8c 	bl	8003552 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	f040 8209 	bne.w	8007e5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	2319      	movs	r3, #25
 8007a4e:	2201      	movs	r2, #1
 8007a50:	497b      	ldr	r1, [pc, #492]	; (8007c40 <HAL_I2C_Mem_Read+0x23c>)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fb86 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e1fc      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_I2C_Mem_Read+0x6c>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e1f5      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d007      	beq.n	8007a96 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0201 	orr.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aa4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2222      	movs	r2, #34	; 0x22
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2240      	movs	r2, #64	; 0x40
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a5b      	ldr	r2, [pc, #364]	; (8007c44 <HAL_I2C_Mem_Read+0x240>)
 8007ad6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ad8:	88f8      	ldrh	r0, [r7, #6]
 8007ada:	893a      	ldrh	r2, [r7, #8]
 8007adc:	8979      	ldrh	r1, [r7, #10]
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fa53 	bl	8007f94 <I2C_RequestMemoryRead>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e1b1      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d113      	bne.n	8007b28 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b00:	2300      	movs	r3, #0
 8007b02:	623b      	str	r3, [r7, #32]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	623b      	str	r3, [r7, #32]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	623b      	str	r3, [r7, #32]
 8007b14:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e185      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d11b      	bne.n	8007b68 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b3e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b40:	2300      	movs	r3, #0
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	61fb      	str	r3, [r7, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e165      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b7e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b8e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b90:	2300      	movs	r3, #0
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	61bb      	str	r3, [r7, #24]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	e145      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007bbe:	e139      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	f200 80f2 	bhi.w	8007dae <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d123      	bne.n	8007c1a <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 fc1c 	bl	8008414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e13a      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	b2d2      	uxtb	r2, r2
 8007bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c18:	e10c      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d14f      	bne.n	8007cc2 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4907      	ldr	r1, [pc, #28]	; (8007c48 <HAL_I2C_Mem_Read+0x244>)
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fa99 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d009      	beq.n	8007c4c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e10f      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
 8007c3c:	0800f9d8 	.word	0x0800f9d8
 8007c40:	00100002 	.word	0x00100002
 8007c44:	ffff0000 	.word	0xffff0000
 8007c48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691a      	ldr	r2, [r3, #16]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cc0:	e0b8      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4966      	ldr	r1, [pc, #408]	; (8007e64 <HAL_I2C_Mem_Read+0x460>)
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fa49 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0bf      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d24:	2200      	movs	r2, #0
 8007d26:	494f      	ldr	r1, [pc, #316]	; (8007e64 <HAL_I2C_Mem_Read+0x460>)
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fa1b 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e091      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dac:	e042      	b.n	8007e34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 fb2e 	bl	8008414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e04c      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d118      	bne.n	8007e34 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f47f aec1 	bne.w	8007bc0 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e000      	b.n	8007e5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	00010004 	.word	0x00010004

08007e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	461a      	mov	r2, r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	817b      	strh	r3, [r7, #10]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	813b      	strh	r3, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f960 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00d      	beq.n	8007ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb8:	d103      	bne.n	8007ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e05f      	b.n	8007f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ec6:	897b      	ldrh	r3, [r7, #10]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	492d      	ldr	r1, [pc, #180]	; (8007f90 <I2C_RequestMemoryWrite+0x128>)
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f998 	bl	8008212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e04c      	b.n	8007f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f04:	6a39      	ldr	r1, [r7, #32]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fa02 	bl	8008310 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d107      	bne.n	8007f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e02b      	b.n	8007f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f2e:	88fb      	ldrh	r3, [r7, #6]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d105      	bne.n	8007f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f34:	893b      	ldrh	r3, [r7, #8]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	611a      	str	r2, [r3, #16]
 8007f3e:	e021      	b.n	8007f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f40:	893b      	ldrh	r3, [r7, #8]
 8007f42:	0a1b      	lsrs	r3, r3, #8
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f50:	6a39      	ldr	r1, [r7, #32]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f9dc 	bl	8008310 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00d      	beq.n	8007f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d107      	bne.n	8007f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e005      	b.n	8007f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f7a:	893b      	ldrh	r3, [r7, #8]
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	00010002 	.word	0x00010002

08007f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	817b      	strh	r3, [r7, #10]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	813b      	strh	r3, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f8c2 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff4:	d103      	bne.n	8007ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e0aa      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008002:	897b      	ldrh	r3, [r7, #10]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	4952      	ldr	r1, [pc, #328]	; (8008160 <I2C_RequestMemoryRead+0x1cc>)
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f8fa 	bl	8008212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e097      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800803e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008040:	6a39      	ldr	r1, [r7, #32]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f964 	bl	8008310 <I2C_WaitOnTXEFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	2b04      	cmp	r3, #4
 8008054:	d107      	bne.n	8008066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e076      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d105      	bne.n	800807c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008070:	893b      	ldrh	r3, [r7, #8]
 8008072:	b2da      	uxtb	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	611a      	str	r2, [r3, #16]
 800807a:	e021      	b.n	80080c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800807c:	893b      	ldrh	r3, [r7, #8]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	b2da      	uxtb	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800808a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808c:	6a39      	ldr	r1, [r7, #32]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 f93e 	bl	8008310 <I2C_WaitOnTXEFlagUntilTimeout>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00d      	beq.n	80080b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d107      	bne.n	80080b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e050      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080b6:	893b      	ldrh	r3, [r7, #8]
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c2:	6a39      	ldr	r1, [r7, #32]
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 f923 	bl	8008310 <I2C_WaitOnTXEFlagUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00d      	beq.n	80080ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d107      	bne.n	80080e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e035      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	2200      	movs	r2, #0
 8008104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f82b 	bl	8008164 <I2C_WaitOnFlagUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00d      	beq.n	8008130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008122:	d103      	bne.n	800812c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e013      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f043 0301 	orr.w	r3, r3, #1
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	4906      	ldr	r1, [pc, #24]	; (8008160 <I2C_RequestMemoryRead+0x1cc>)
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f863 	bl	8008212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	00010002 	.word	0x00010002

08008164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	4613      	mov	r3, r2
 8008172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008174:	e025      	b.n	80081c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800817c:	d021      	beq.n	80081c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817e:	f7fc fefd 	bl	8004f7c <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d302      	bcc.n	8008194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d116      	bne.n	80081c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f043 0220 	orr.w	r2, r3, #32
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e023      	b.n	800820a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d10d      	bne.n	80081e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	43da      	mvns	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bf0c      	ite	eq
 80081de:	2301      	moveq	r3, #1
 80081e0:	2300      	movne	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	e00c      	b.n	8008202 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	43da      	mvns	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4013      	ands	r3, r2
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bf0c      	ite	eq
 80081fa:	2301      	moveq	r3, #1
 80081fc:	2300      	movne	r3, #0
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	429a      	cmp	r2, r3
 8008206:	d0b6      	beq.n	8008176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008220:	e051      	b.n	80082c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008230:	d123      	bne.n	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008240:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800824a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f043 0204 	orr.w	r2, r3, #4
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e046      	b.n	8008308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008280:	d021      	beq.n	80082c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008282:	f7fc fe7b 	bl	8004f7c <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d302      	bcc.n	8008298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d116      	bne.n	80082c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	f043 0220 	orr.w	r2, r3, #32
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e020      	b.n	8008308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d10c      	bne.n	80082ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	43da      	mvns	r2, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	b29b      	uxth	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bf14      	ite	ne
 80082e2:	2301      	movne	r3, #1
 80082e4:	2300      	moveq	r3, #0
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	e00b      	b.n	8008302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	43da      	mvns	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	4013      	ands	r3, r2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bf14      	ite	ne
 80082fc:	2301      	movne	r3, #1
 80082fe:	2300      	moveq	r3, #0
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d18d      	bne.n	8008222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800831c:	e02d      	b.n	800837a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 f8ce 	bl	80084c0 <I2C_IsAcknowledgeFailed>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e02d      	b.n	800838a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008334:	d021      	beq.n	800837a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008336:	f7fc fe21 	bl	8004f7c <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d116      	bne.n	800837a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2220      	movs	r2, #32
 8008356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e007      	b.n	800838a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008384:	2b80      	cmp	r3, #128	; 0x80
 8008386:	d1ca      	bne.n	800831e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800839e:	e02d      	b.n	80083fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f88d 	bl	80084c0 <I2C_IsAcknowledgeFailed>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e02d      	b.n	800840c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b6:	d021      	beq.n	80083fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b8:	f7fc fde0 	bl	8004f7c <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d302      	bcc.n	80083ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d116      	bne.n	80083fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	f043 0220 	orr.w	r2, r3, #32
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e007      	b.n	800840c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b04      	cmp	r3, #4
 8008408:	d1ca      	bne.n	80083a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008420:	e042      	b.n	80084a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d119      	bne.n	8008464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0210 	mvn.w	r2, #16
 8008438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e029      	b.n	80084b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008464:	f7fc fd8a 	bl	8004f7c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d116      	bne.n	80084a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	f043 0220 	orr.w	r2, r3, #32
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e007      	b.n	80084b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d1b5      	bne.n	8008422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d6:	d11b      	bne.n	8008510 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	f043 0204 	orr.w	r2, r3, #4
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a28      	ldr	r2, [pc, #160]	; (80085d0 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00d      	beq.n	8008550 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d008      	beq.n	8008550 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a25      	ldr	r2, [pc, #148]	; (80085d8 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8008548:	215c      	movs	r1, #92	; 0x5c
 800854a:	4824      	ldr	r0, [pc, #144]	; (80085dc <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 800854c:	f7fb f801 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d006      	beq.n	8008564 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b10      	cmp	r3, #16
 800855a:	d003      	beq.n	8008564 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 800855c:	215d      	movs	r1, #93	; 0x5d
 800855e:	481f      	ldr	r0, [pc, #124]	; (80085dc <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 8008560:	f7fa fff7 	bl	8003552 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b20      	cmp	r3, #32
 800856e:	d129      	bne.n	80085c4 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	; 0x24
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0201 	bic.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0210 	bic.w	r2, r2, #16
 8008596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0201 	orr.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	e000      	b.n	80085c6 <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80085c4:	2302      	movs	r3, #2
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40005400 	.word	0x40005400
 80085d4:	40005800 	.word	0x40005800
 80085d8:	40005c00 	.word	0x40005c00
 80085dc:	0800fa10 	.word	0x0800fa10

080085e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a27      	ldr	r2, [pc, #156]	; (8008690 <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00d      	beq.n	8008614 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a25      	ldr	r2, [pc, #148]	; (8008694 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d008      	beq.n	8008614 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a24      	ldr	r2, [pc, #144]	; (8008698 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 800860c:	2184      	movs	r1, #132	; 0x84
 800860e:	4823      	ldr	r0, [pc, #140]	; (800869c <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8008610:	f7fa ff9f 	bl	8003552 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b0f      	cmp	r3, #15
 8008618:	d903      	bls.n	8008622 <HAL_I2CEx_ConfigDigitalFilter+0x42>
 800861a:	2185      	movs	r1, #133	; 0x85
 800861c:	481f      	ldr	r0, [pc, #124]	; (800869c <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 800861e:	f7fa ff98 	bl	8003552 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b20      	cmp	r3, #32
 800862c:	d12a      	bne.n	8008684 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2224      	movs	r2, #36	; 0x24
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0201 	bic.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800864e:	89fb      	ldrh	r3, [r7, #14]
 8008650:	f023 030f 	bic.w	r3, r3, #15
 8008654:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	b29a      	uxth	r2, r3
 800865a:	89fb      	ldrh	r3, [r7, #14]
 800865c:	4313      	orrs	r3, r2
 800865e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	89fa      	ldrh	r2, [r7, #14]
 8008666:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e000      	b.n	8008686 <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008684:	2302      	movs	r3, #2
  }
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	40005400 	.word	0x40005400
 8008694:	40005800 	.word	0x40005800
 8008698:	40005c00 	.word	0x40005c00
 800869c:	0800fa10 	.word	0x0800fa10

080086a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80086aa:	2300      	movs	r3, #0
 80086ac:	603b      	str	r3, [r7, #0]
 80086ae:	4b20      	ldr	r3, [pc, #128]	; (8008730 <HAL_PWREx_EnableOverDrive+0x90>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <HAL_PWREx_EnableOverDrive+0x90>)
 80086b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086b8:	6413      	str	r3, [r2, #64]	; 0x40
 80086ba:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <HAL_PWREx_EnableOverDrive+0x90>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80086c6:	4b1b      	ldr	r3, [pc, #108]	; (8008734 <HAL_PWREx_EnableOverDrive+0x94>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086cc:	f7fc fc56 	bl	8004f7c <HAL_GetTick>
 80086d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086d2:	e009      	b.n	80086e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086d4:	f7fc fc52 	bl	8004f7c <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086e2:	d901      	bls.n	80086e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e01f      	b.n	8008728 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086e8:	4b13      	ldr	r3, [pc, #76]	; (8008738 <HAL_PWREx_EnableOverDrive+0x98>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f4:	d1ee      	bne.n	80086d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <HAL_PWREx_EnableOverDrive+0x9c>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086fc:	f7fc fc3e 	bl	8004f7c <HAL_GetTick>
 8008700:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008702:	e009      	b.n	8008718 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008704:	f7fc fc3a 	bl	8004f7c <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008712:	d901      	bls.n	8008718 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e007      	b.n	8008728 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008718:	4b07      	ldr	r3, [pc, #28]	; (8008738 <HAL_PWREx_EnableOverDrive+0x98>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008724:	d1ee      	bne.n	8008704 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40023800 	.word	0x40023800
 8008734:	420e0040 	.word	0x420e0040
 8008738:	40007000 	.word	0x40007000
 800873c:	420e0044 	.word	0x420e0044

08008740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e30d      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b0f      	cmp	r3, #15
 8008758:	d903      	bls.n	8008762 <HAL_RCC_OscConfig+0x22>
 800875a:	21e8      	movs	r1, #232	; 0xe8
 800875c:	48a3      	ldr	r0, [pc, #652]	; (80089ec <HAL_RCC_OscConfig+0x2ac>)
 800875e:	f7fa fef8 	bl	8003552 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8088 	beq.w	8008880 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00d      	beq.n	8008794 <HAL_RCC_OscConfig+0x54>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008780:	d008      	beq.n	8008794 <HAL_RCC_OscConfig+0x54>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800878a:	d003      	beq.n	8008794 <HAL_RCC_OscConfig+0x54>
 800878c:	21ed      	movs	r1, #237	; 0xed
 800878e:	4897      	ldr	r0, [pc, #604]	; (80089ec <HAL_RCC_OscConfig+0x2ac>)
 8008790:	f7fa fedf 	bl	8003552 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008794:	4b96      	ldr	r3, [pc, #600]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 030c 	and.w	r3, r3, #12
 800879c:	2b04      	cmp	r3, #4
 800879e:	d00c      	beq.n	80087ba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087a0:	4b93      	ldr	r3, [pc, #588]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d112      	bne.n	80087d2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ac:	4b90      	ldr	r3, [pc, #576]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087b8:	d10b      	bne.n	80087d2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ba:	4b8d      	ldr	r3, [pc, #564]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d05b      	beq.n	800887e <HAL_RCC_OscConfig+0x13e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d157      	bne.n	800887e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e2cd      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087da:	d106      	bne.n	80087ea <HAL_RCC_OscConfig+0xaa>
 80087dc:	4b84      	ldr	r3, [pc, #528]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a83      	ldr	r2, [pc, #524]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	e01d      	b.n	8008826 <HAL_RCC_OscConfig+0xe6>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087f2:	d10c      	bne.n	800880e <HAL_RCC_OscConfig+0xce>
 80087f4:	4b7e      	ldr	r3, [pc, #504]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a7d      	ldr	r2, [pc, #500]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80087fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	4b7b      	ldr	r3, [pc, #492]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a7a      	ldr	r2, [pc, #488]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	e00b      	b.n	8008826 <HAL_RCC_OscConfig+0xe6>
 800880e:	4b78      	ldr	r3, [pc, #480]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a77      	ldr	r2, [pc, #476]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	4b75      	ldr	r3, [pc, #468]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a74      	ldr	r2, [pc, #464]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008824:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d013      	beq.n	8008856 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882e:	f7fc fba5 	bl	8004f7c <HAL_GetTick>
 8008832:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008836:	f7fc fba1 	bl	8004f7c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b64      	cmp	r3, #100	; 0x64
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e292      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008848:	4b69      	ldr	r3, [pc, #420]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0f0      	beq.n	8008836 <HAL_RCC_OscConfig+0xf6>
 8008854:	e014      	b.n	8008880 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008856:	f7fc fb91 	bl	8004f7c <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800885c:	e008      	b.n	8008870 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800885e:	f7fc fb8d 	bl	8004f7c <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b64      	cmp	r3, #100	; 0x64
 800886a:	d901      	bls.n	8008870 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e27e      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008870:	4b5f      	ldr	r3, [pc, #380]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f0      	bne.n	800885e <HAL_RCC_OscConfig+0x11e>
 800887c:	e000      	b.n	8008880 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800887e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d079      	beq.n	8008980 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_RCC_OscConfig+0x166>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d004      	beq.n	80088a6 <HAL_RCC_OscConfig+0x166>
 800889c:	f240 111f 	movw	r1, #287	; 0x11f
 80088a0:	4852      	ldr	r0, [pc, #328]	; (80089ec <HAL_RCC_OscConfig+0x2ac>)
 80088a2:	f7fa fe56 	bl	8003552 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b1f      	cmp	r3, #31
 80088ac:	d904      	bls.n	80088b8 <HAL_RCC_OscConfig+0x178>
 80088ae:	f44f 7190 	mov.w	r1, #288	; 0x120
 80088b2:	484e      	ldr	r0, [pc, #312]	; (80089ec <HAL_RCC_OscConfig+0x2ac>)
 80088b4:	f7fa fe4d 	bl	8003552 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088b8:	4b4d      	ldr	r3, [pc, #308]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 030c 	and.w	r3, r3, #12
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088c4:	4b4a      	ldr	r3, [pc, #296]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d11c      	bne.n	800890a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088d0:	4b47      	ldr	r3, [pc, #284]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d116      	bne.n	800890a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088dc:	4b44      	ldr	r3, [pc, #272]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_RCC_OscConfig+0x1b4>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e23c      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f4:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	493b      	ldr	r1, [pc, #236]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008908:	e03a      	b.n	8008980 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d020      	beq.n	8008954 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008912:	4b38      	ldr	r3, [pc, #224]	; (80089f4 <HAL_RCC_OscConfig+0x2b4>)
 8008914:	2201      	movs	r2, #1
 8008916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008918:	f7fc fb30 	bl	8004f7c <HAL_GetTick>
 800891c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800891e:	e008      	b.n	8008932 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008920:	f7fc fb2c 	bl	8004f7c <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e21d      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008932:	4b2f      	ldr	r3, [pc, #188]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0f0      	beq.n	8008920 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800893e:	4b2c      	ldr	r3, [pc, #176]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	4928      	ldr	r1, [pc, #160]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 800894e:	4313      	orrs	r3, r2
 8008950:	600b      	str	r3, [r1, #0]
 8008952:	e015      	b.n	8008980 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008954:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <HAL_RCC_OscConfig+0x2b4>)
 8008956:	2200      	movs	r2, #0
 8008958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895a:	f7fc fb0f 	bl	8004f7c <HAL_GetTick>
 800895e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008960:	e008      	b.n	8008974 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008962:	f7fc fb0b 	bl	8004f7c <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e1fc      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f0      	bne.n	8008962 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d046      	beq.n	8008a1a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <HAL_RCC_OscConfig+0x266>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d004      	beq.n	80089a6 <HAL_RCC_OscConfig+0x266>
 800899c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80089a0:	4812      	ldr	r0, [pc, #72]	; (80089ec <HAL_RCC_OscConfig+0x2ac>)
 80089a2:	f7fa fdd6 	bl	8003552 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d016      	beq.n	80089dc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ae:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <HAL_RCC_OscConfig+0x2b8>)
 80089b0:	2201      	movs	r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b4:	f7fc fae2 	bl	8004f7c <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089bc:	f7fc fade 	bl	8004f7c <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e1cf      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <HAL_RCC_OscConfig+0x2b0>)
 80089d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f0      	beq.n	80089bc <HAL_RCC_OscConfig+0x27c>
 80089da:	e01e      	b.n	8008a1a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <HAL_RCC_OscConfig+0x2b8>)
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089e2:	f7fc facb 	bl	8004f7c <HAL_GetTick>
 80089e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089e8:	e011      	b.n	8008a0e <HAL_RCC_OscConfig+0x2ce>
 80089ea:	bf00      	nop
 80089ec:	0800fa4c 	.word	0x0800fa4c
 80089f0:	40023800 	.word	0x40023800
 80089f4:	42470000 	.word	0x42470000
 80089f8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089fc:	f7fc fabe 	bl	8004f7c <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e1af      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a0e:	4b97      	ldr	r3, [pc, #604]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80a8 	beq.w	8008b78 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00c      	beq.n	8008a4e <HAL_RCC_OscConfig+0x30e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d008      	beq.n	8008a4e <HAL_RCC_OscConfig+0x30e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b05      	cmp	r3, #5
 8008a42:	d004      	beq.n	8008a4e <HAL_RCC_OscConfig+0x30e>
 8008a44:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008a48:	4889      	ldr	r0, [pc, #548]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008a4a:	f7fa fd82 	bl	8003552 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a4e:	4b87      	ldr	r3, [pc, #540]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10f      	bne.n	8008a7a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60bb      	str	r3, [r7, #8]
 8008a5e:	4b83      	ldr	r3, [pc, #524]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	4a82      	ldr	r2, [pc, #520]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a68:	6413      	str	r3, [r2, #64]	; 0x40
 8008a6a:	4b80      	ldr	r3, [pc, #512]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a72:	60bb      	str	r3, [r7, #8]
 8008a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a76:	2301      	movs	r3, #1
 8008a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a7a:	4b7e      	ldr	r3, [pc, #504]	; (8008c74 <HAL_RCC_OscConfig+0x534>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d118      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a86:	4b7b      	ldr	r3, [pc, #492]	; (8008c74 <HAL_RCC_OscConfig+0x534>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a7a      	ldr	r2, [pc, #488]	; (8008c74 <HAL_RCC_OscConfig+0x534>)
 8008a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a92:	f7fc fa73 	bl	8004f7c <HAL_GetTick>
 8008a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a98:	e008      	b.n	8008aac <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a9a:	f7fc fa6f 	bl	8004f7c <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e160      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aac:	4b71      	ldr	r3, [pc, #452]	; (8008c74 <HAL_RCC_OscConfig+0x534>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0f0      	beq.n	8008a9a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d106      	bne.n	8008ace <HAL_RCC_OscConfig+0x38e>
 8008ac0:	4b6a      	ldr	r3, [pc, #424]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac4:	4a69      	ldr	r2, [pc, #420]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	6713      	str	r3, [r2, #112]	; 0x70
 8008acc:	e01c      	b.n	8008b08 <HAL_RCC_OscConfig+0x3c8>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d10c      	bne.n	8008af0 <HAL_RCC_OscConfig+0x3b0>
 8008ad6:	4b65      	ldr	r3, [pc, #404]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ada:	4a64      	ldr	r2, [pc, #400]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008adc:	f043 0304 	orr.w	r3, r3, #4
 8008ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ae2:	4b62      	ldr	r3, [pc, #392]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae6:	4a61      	ldr	r2, [pc, #388]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008ae8:	f043 0301 	orr.w	r3, r3, #1
 8008aec:	6713      	str	r3, [r2, #112]	; 0x70
 8008aee:	e00b      	b.n	8008b08 <HAL_RCC_OscConfig+0x3c8>
 8008af0:	4b5e      	ldr	r3, [pc, #376]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af4:	4a5d      	ldr	r2, [pc, #372]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008af6:	f023 0301 	bic.w	r3, r3, #1
 8008afa:	6713      	str	r3, [r2, #112]	; 0x70
 8008afc:	4b5b      	ldr	r3, [pc, #364]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b00:	4a5a      	ldr	r2, [pc, #360]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008b02:	f023 0304 	bic.w	r3, r3, #4
 8008b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d015      	beq.n	8008b3c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b10:	f7fc fa34 	bl	8004f7c <HAL_GetTick>
 8008b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b16:	e00a      	b.n	8008b2e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b18:	f7fc fa30 	bl	8004f7c <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e11f      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b2e:	4b4f      	ldr	r3, [pc, #316]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0ee      	beq.n	8008b18 <HAL_RCC_OscConfig+0x3d8>
 8008b3a:	e014      	b.n	8008b66 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b3c:	f7fc fa1e 	bl	8004f7c <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b42:	e00a      	b.n	8008b5a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b44:	f7fc fa1a 	bl	8004f7c <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d901      	bls.n	8008b5a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e109      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b5a:	4b44      	ldr	r3, [pc, #272]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1ee      	bne.n	8008b44 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d105      	bne.n	8008b78 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b6c:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	4a3e      	ldr	r2, [pc, #248]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00c      	beq.n	8008b9a <HAL_RCC_OscConfig+0x45a>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d008      	beq.n	8008b9a <HAL_RCC_OscConfig+0x45a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d004      	beq.n	8008b9a <HAL_RCC_OscConfig+0x45a>
 8008b90:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008b94:	4836      	ldr	r0, [pc, #216]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008b96:	f7fa fcdc 	bl	8003552 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80e4 	beq.w	8008d6c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ba4:	4b31      	ldr	r3, [pc, #196]	; (8008c6c <HAL_RCC_OscConfig+0x52c>)
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f003 030c 	and.w	r3, r3, #12
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	f000 80ae 	beq.w	8008d0e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	f040 8092 	bne.w	8008ce0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x498>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bcc:	d004      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x498>
 8008bce:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8008bd2:	4827      	ldr	r0, [pc, #156]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008bd4:	f7fa fcbd 	bl	8003552 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	2b3f      	cmp	r3, #63	; 0x3f
 8008bde:	d904      	bls.n	8008bea <HAL_RCC_OscConfig+0x4aa>
 8008be0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008be4:	4822      	ldr	r0, [pc, #136]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008be6:	f7fa fcb4 	bl	8003552 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b31      	cmp	r3, #49	; 0x31
 8008bf0:	d904      	bls.n	8008bfc <HAL_RCC_OscConfig+0x4bc>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008bfa:	d904      	bls.n	8008c06 <HAL_RCC_OscConfig+0x4c6>
 8008bfc:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8008c00:	481b      	ldr	r0, [pc, #108]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008c02:	f7fa fca6 	bl	8003552 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d010      	beq.n	8008c30 <HAL_RCC_OscConfig+0x4f0>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d00c      	beq.n	8008c30 <HAL_RCC_OscConfig+0x4f0>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1a:	2b06      	cmp	r3, #6
 8008c1c:	d008      	beq.n	8008c30 <HAL_RCC_OscConfig+0x4f0>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	2b08      	cmp	r3, #8
 8008c24:	d004      	beq.n	8008c30 <HAL_RCC_OscConfig+0x4f0>
 8008c26:	f240 11db 	movw	r1, #475	; 0x1db
 8008c2a:	4811      	ldr	r0, [pc, #68]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008c2c:	f7fa fc91 	bl	8003552 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d903      	bls.n	8008c40 <HAL_RCC_OscConfig+0x500>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	2b0f      	cmp	r3, #15
 8008c3e:	d904      	bls.n	8008c4a <HAL_RCC_OscConfig+0x50a>
 8008c40:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8008c44:	480a      	ldr	r0, [pc, #40]	; (8008c70 <HAL_RCC_OscConfig+0x530>)
 8008c46:	f7fa fc84 	bl	8003552 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	; (8008c78 <HAL_RCC_OscConfig+0x538>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c50:	f7fc f994 	bl	8004f7c <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c56:	e011      	b.n	8008c7c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c58:	f7fc f990 	bl	8004f7c <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d90a      	bls.n	8008c7c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e081      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
 8008c6a:	bf00      	nop
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	0800fa4c 	.word	0x0800fa4c
 8008c74:	40007000 	.word	0x40007000
 8008c78:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7c:	4b3e      	ldr	r3, [pc, #248]	; (8008d78 <HAL_RCC_OscConfig+0x638>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e7      	bne.n	8008c58 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	69da      	ldr	r2, [r3, #28]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	019b      	lsls	r3, r3, #6
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	085b      	lsrs	r3, r3, #1
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	041b      	lsls	r3, r3, #16
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	061b      	lsls	r3, r3, #24
 8008cac:	4932      	ldr	r1, [pc, #200]	; (8008d78 <HAL_RCC_OscConfig+0x638>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cb2:	4b32      	ldr	r3, [pc, #200]	; (8008d7c <HAL_RCC_OscConfig+0x63c>)
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb8:	f7fc f960 	bl	8004f7c <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cc0:	f7fc f95c 	bl	8004f7c <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e04d      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cd2:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <HAL_RCC_OscConfig+0x638>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0f0      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x580>
 8008cde:	e045      	b.n	8008d6c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ce0:	4b26      	ldr	r3, [pc, #152]	; (8008d7c <HAL_RCC_OscConfig+0x63c>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce6:	f7fc f949 	bl	8004f7c <HAL_GetTick>
 8008cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cec:	e008      	b.n	8008d00 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cee:	f7fc f945 	bl	8004f7c <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e036      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d00:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <HAL_RCC_OscConfig+0x638>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f0      	bne.n	8008cee <HAL_RCC_OscConfig+0x5ae>
 8008d0c:	e02e      	b.n	8008d6c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e029      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d1a:	4b17      	ldr	r3, [pc, #92]	; (8008d78 <HAL_RCC_OscConfig+0x638>)
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d11c      	bne.n	8008d68 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d115      	bne.n	8008d68 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d42:	4013      	ands	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d10d      	bne.n	8008d68 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d106      	bne.n	8008d68 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d001      	beq.n	8008d6c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e000      	b.n	8008d6e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	42470060 	.word	0x42470060

08008d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e18c      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_RCC_ClockConfig+0x24>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d904      	bls.n	8008dae <HAL_RCC_ClockConfig+0x2e>
 8008da4:	f240 2151 	movw	r1, #593	; 0x251
 8008da8:	4887      	ldr	r0, [pc, #540]	; (8008fc8 <HAL_RCC_ClockConfig+0x248>)
 8008daa:	f7fa fbd2 	bl	8003552 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d031      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d02e      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d02b      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d028      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d025      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b05      	cmp	r3, #5
 8008dd0:	d022      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b06      	cmp	r3, #6
 8008dd6:	d01f      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b07      	cmp	r3, #7
 8008ddc:	d01c      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d019      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d016      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b0a      	cmp	r3, #10
 8008dee:	d013      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b0b      	cmp	r3, #11
 8008df4:	d010      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b0c      	cmp	r3, #12
 8008dfa:	d00d      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b0d      	cmp	r3, #13
 8008e00:	d00a      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b0e      	cmp	r3, #14
 8008e06:	d007      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b0f      	cmp	r3, #15
 8008e0c:	d004      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x98>
 8008e0e:	f240 2152 	movw	r1, #594	; 0x252
 8008e12:	486d      	ldr	r0, [pc, #436]	; (8008fc8 <HAL_RCC_ClockConfig+0x248>)
 8008e14:	f7fa fb9d 	bl	8003552 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e18:	4b6c      	ldr	r3, [pc, #432]	; (8008fcc <HAL_RCC_ClockConfig+0x24c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d90c      	bls.n	8008e40 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e26:	4b69      	ldr	r3, [pc, #420]	; (8008fcc <HAL_RCC_ClockConfig+0x24c>)
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2e:	4b67      	ldr	r3, [pc, #412]	; (8008fcc <HAL_RCC_ClockConfig+0x24c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d001      	beq.n	8008e40 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e136      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d049      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e58:	4b5d      	ldr	r3, [pc, #372]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	4a5c      	ldr	r2, [pc, #368]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0308 	and.w	r3, r3, #8
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e70:	4b57      	ldr	r3, [pc, #348]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	4a56      	ldr	r2, [pc, #344]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d024      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	2b80      	cmp	r3, #128	; 0x80
 8008e8a:	d020      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b90      	cmp	r3, #144	; 0x90
 8008e92:	d01c      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2ba0      	cmp	r3, #160	; 0xa0
 8008e9a:	d018      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	2bb0      	cmp	r3, #176	; 0xb0
 8008ea2:	d014      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8008eaa:	d010      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2bd0      	cmp	r3, #208	; 0xd0
 8008eb2:	d00c      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2be0      	cmp	r3, #224	; 0xe0
 8008eba:	d008      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2bf0      	cmp	r3, #240	; 0xf0
 8008ec2:	d004      	beq.n	8008ece <HAL_RCC_ClockConfig+0x14e>
 8008ec4:	f240 2175 	movw	r1, #629	; 0x275
 8008ec8:	483f      	ldr	r0, [pc, #252]	; (8008fc8 <HAL_RCC_ClockConfig+0x248>)
 8008eca:	f7fa fb42 	bl	8003552 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ece:	4b40      	ldr	r3, [pc, #256]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	493d      	ldr	r1, [pc, #244]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d059      	beq.n	8008fa0 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d010      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x196>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d00c      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x196>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d008      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x196>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d004      	beq.n	8008f16 <HAL_RCC_ClockConfig+0x196>
 8008f0c:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8008f10:	482d      	ldr	r0, [pc, #180]	; (8008fc8 <HAL_RCC_ClockConfig+0x248>)
 8008f12:	f7fa fb1e 	bl	8003552 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d107      	bne.n	8008f2e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f1e:	4b2c      	ldr	r3, [pc, #176]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d119      	bne.n	8008f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e0bf      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d003      	beq.n	8008f3e <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f3e:	4b24      	ldr	r3, [pc, #144]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e0af      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f4e:	4b20      	ldr	r3, [pc, #128]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0a7      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f023 0203 	bic.w	r2, r3, #3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	4919      	ldr	r1, [pc, #100]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f70:	f7fc f804 	bl	8004f7c <HAL_GetTick>
 8008f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f76:	e00a      	b.n	8008f8e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f78:	f7fc f800 	bl	8004f7c <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e08f      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f8e:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <HAL_RCC_ClockConfig+0x250>)
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 020c 	and.w	r2, r3, #12
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d1eb      	bne.n	8008f78 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <HAL_RCC_ClockConfig+0x24c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 030f 	and.w	r3, r3, #15
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d212      	bcs.n	8008fd4 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <HAL_RCC_ClockConfig+0x24c>)
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fb6:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <HAL_RCC_ClockConfig+0x24c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d007      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e072      	b.n	80090ae <HAL_RCC_ClockConfig+0x32e>
 8008fc8:	0800fa4c 	.word	0x0800fa4c
 8008fcc:	40023c00 	.word	0x40023c00
 8008fd0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d025      	beq.n	800902c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d018      	beq.n	800901a <HAL_RCC_ClockConfig+0x29a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff0:	d013      	beq.n	800901a <HAL_RCC_ClockConfig+0x29a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ffa:	d00e      	beq.n	800901a <HAL_RCC_ClockConfig+0x29a>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009004:	d009      	beq.n	800901a <HAL_RCC_ClockConfig+0x29a>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800900e:	d004      	beq.n	800901a <HAL_RCC_ClockConfig+0x29a>
 8009010:	f240 21ba 	movw	r1, #698	; 0x2ba
 8009014:	4828      	ldr	r0, [pc, #160]	; (80090b8 <HAL_RCC_ClockConfig+0x338>)
 8009016:	f7fa fa9c 	bl	8003552 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800901a:	4b28      	ldr	r3, [pc, #160]	; (80090bc <HAL_RCC_ClockConfig+0x33c>)
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	4925      	ldr	r1, [pc, #148]	; (80090bc <HAL_RCC_ClockConfig+0x33c>)
 8009028:	4313      	orrs	r3, r2
 800902a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b00      	cmp	r3, #0
 8009036:	d026      	beq.n	8009086 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d018      	beq.n	8009072 <HAL_RCC_ClockConfig+0x2f2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009048:	d013      	beq.n	8009072 <HAL_RCC_ClockConfig+0x2f2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009052:	d00e      	beq.n	8009072 <HAL_RCC_ClockConfig+0x2f2>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800905c:	d009      	beq.n	8009072 <HAL_RCC_ClockConfig+0x2f2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009066:	d004      	beq.n	8009072 <HAL_RCC_ClockConfig+0x2f2>
 8009068:	f240 21c1 	movw	r1, #705	; 0x2c1
 800906c:	4812      	ldr	r0, [pc, #72]	; (80090b8 <HAL_RCC_ClockConfig+0x338>)
 800906e:	f7fa fa70 	bl	8003552 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <HAL_RCC_ClockConfig+0x33c>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	490e      	ldr	r1, [pc, #56]	; (80090bc <HAL_RCC_ClockConfig+0x33c>)
 8009082:	4313      	orrs	r3, r2
 8009084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009086:	f000 f821 	bl	80090cc <HAL_RCC_GetSysClockFreq>
 800908a:	4602      	mov	r2, r0
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <HAL_RCC_ClockConfig+0x33c>)
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	091b      	lsrs	r3, r3, #4
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	490a      	ldr	r1, [pc, #40]	; (80090c0 <HAL_RCC_ClockConfig+0x340>)
 8009098:	5ccb      	ldrb	r3, [r1, r3]
 800909a:	fa22 f303 	lsr.w	r3, r2, r3
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <HAL_RCC_ClockConfig+0x344>)
 80090a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <HAL_RCC_ClockConfig+0x348>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fb ff24 	bl	8004ef4 <HAL_InitTick>

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	0800fa4c 	.word	0x0800fa4c
 80090bc:	40023800 	.word	0x40023800
 80090c0:	0800fb84 	.word	0x0800fb84
 80090c4:	200001d0 	.word	0x200001d0
 80090c8:	200001d4 	.word	0x200001d4

080090cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	2300      	movs	r3, #0
 80090de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090e4:	4b67      	ldr	r3, [pc, #412]	; (8009284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 030c 	and.w	r3, r3, #12
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d00d      	beq.n	800910c <HAL_RCC_GetSysClockFreq+0x40>
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	f200 80bd 	bhi.w	8009270 <HAL_RCC_GetSysClockFreq+0x1a4>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <HAL_RCC_GetSysClockFreq+0x34>
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	d003      	beq.n	8009106 <HAL_RCC_GetSysClockFreq+0x3a>
 80090fe:	e0b7      	b.n	8009270 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009100:	4b61      	ldr	r3, [pc, #388]	; (8009288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009102:	60bb      	str	r3, [r7, #8]
       break;
 8009104:	e0b7      	b.n	8009276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009106:	4b60      	ldr	r3, [pc, #384]	; (8009288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009108:	60bb      	str	r3, [r7, #8]
      break;
 800910a:	e0b4      	b.n	8009276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800910c:	4b5d      	ldr	r3, [pc, #372]	; (8009284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009114:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009116:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d04d      	beq.n	80091be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009122:	4b58      	ldr	r3, [pc, #352]	; (8009284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	461a      	mov	r2, r3
 800912a:	f04f 0300 	mov.w	r3, #0
 800912e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009132:	f04f 0100 	mov.w	r1, #0
 8009136:	ea02 0800 	and.w	r8, r2, r0
 800913a:	ea03 0901 	and.w	r9, r3, r1
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	014b      	lsls	r3, r1, #5
 800914c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009150:	0142      	lsls	r2, r0, #5
 8009152:	4610      	mov	r0, r2
 8009154:	4619      	mov	r1, r3
 8009156:	ebb0 0008 	subs.w	r0, r0, r8
 800915a:	eb61 0109 	sbc.w	r1, r1, r9
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	018b      	lsls	r3, r1, #6
 8009168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800916c:	0182      	lsls	r2, r0, #6
 800916e:	1a12      	subs	r2, r2, r0
 8009170:	eb63 0301 	sbc.w	r3, r3, r1
 8009174:	f04f 0000 	mov.w	r0, #0
 8009178:	f04f 0100 	mov.w	r1, #0
 800917c:	00d9      	lsls	r1, r3, #3
 800917e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009182:	00d0      	lsls	r0, r2, #3
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	eb12 0208 	adds.w	r2, r2, r8
 800918c:	eb43 0309 	adc.w	r3, r3, r9
 8009190:	f04f 0000 	mov.w	r0, #0
 8009194:	f04f 0100 	mov.w	r1, #0
 8009198:	0299      	lsls	r1, r3, #10
 800919a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800919e:	0290      	lsls	r0, r2, #10
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4610      	mov	r0, r2
 80091a6:	4619      	mov	r1, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f04f 0300 	mov.w	r3, #0
 80091b0:	f7f7 fd22 	bl	8000bf8 <__aeabi_uldivmod>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4613      	mov	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e04a      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091be:	4b31      	ldr	r3, [pc, #196]	; (8009284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	099b      	lsrs	r3, r3, #6
 80091c4:	461a      	mov	r2, r3
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80091ce:	f04f 0100 	mov.w	r1, #0
 80091d2:	ea02 0400 	and.w	r4, r2, r0
 80091d6:	ea03 0501 	and.w	r5, r3, r1
 80091da:	4620      	mov	r0, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	014b      	lsls	r3, r1, #5
 80091e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80091ec:	0142      	lsls	r2, r0, #5
 80091ee:	4610      	mov	r0, r2
 80091f0:	4619      	mov	r1, r3
 80091f2:	1b00      	subs	r0, r0, r4
 80091f4:	eb61 0105 	sbc.w	r1, r1, r5
 80091f8:	f04f 0200 	mov.w	r2, #0
 80091fc:	f04f 0300 	mov.w	r3, #0
 8009200:	018b      	lsls	r3, r1, #6
 8009202:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009206:	0182      	lsls	r2, r0, #6
 8009208:	1a12      	subs	r2, r2, r0
 800920a:	eb63 0301 	sbc.w	r3, r3, r1
 800920e:	f04f 0000 	mov.w	r0, #0
 8009212:	f04f 0100 	mov.w	r1, #0
 8009216:	00d9      	lsls	r1, r3, #3
 8009218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800921c:	00d0      	lsls	r0, r2, #3
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	1912      	adds	r2, r2, r4
 8009224:	eb45 0303 	adc.w	r3, r5, r3
 8009228:	f04f 0000 	mov.w	r0, #0
 800922c:	f04f 0100 	mov.w	r1, #0
 8009230:	0299      	lsls	r1, r3, #10
 8009232:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009236:	0290      	lsls	r0, r2, #10
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4610      	mov	r0, r2
 800923e:	4619      	mov	r1, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	461a      	mov	r2, r3
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	f7f7 fcd6 	bl	8000bf8 <__aeabi_uldivmod>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4613      	mov	r3, r2
 8009252:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009254:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	0c1b      	lsrs	r3, r3, #16
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	3301      	adds	r3, #1
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	fbb2 f3f3 	udiv	r3, r2, r3
 800926c:	60bb      	str	r3, [r7, #8]
      break;
 800926e:	e002      	b.n	8009276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009272:	60bb      	str	r3, [r7, #8]
      break;
 8009274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009276:	68bb      	ldr	r3, [r7, #8]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009282:	bf00      	nop
 8009284:	40023800 	.word	0x40023800
 8009288:	00f42400 	.word	0x00f42400

0800928c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009292:	681b      	ldr	r3, [r3, #0]
}
 8009294:	4618      	mov	r0, r3
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	200001d0 	.word	0x200001d0

080092a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80092a8:	f7ff fff0 	bl	800928c <HAL_RCC_GetHCLKFreq>
 80092ac:	4602      	mov	r2, r0
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	0a9b      	lsrs	r3, r3, #10
 80092b4:	f003 0307 	and.w	r3, r3, #7
 80092b8:	4903      	ldr	r1, [pc, #12]	; (80092c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092ba:	5ccb      	ldrb	r3, [r1, r3]
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40023800 	.word	0x40023800
 80092c8:	0800fb94 	.word	0x0800fb94

080092cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80092d0:	f7ff ffdc 	bl	800928c <HAL_RCC_GetHCLKFreq>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	0b5b      	lsrs	r3, r3, #13
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	4903      	ldr	r1, [pc, #12]	; (80092f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092e2:	5ccb      	ldrb	r3, [r1, r3]
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	40023800 	.word	0x40023800
 80092f0:	0800fb94 	.word	0x0800fb94

080092f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e118      	b.n	8009538 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a8d      	ldr	r2, [pc, #564]	; (8009540 <HAL_SPI_Init+0x24c>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d01d      	beq.n	800934c <HAL_SPI_Init+0x58>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a8b      	ldr	r2, [pc, #556]	; (8009544 <HAL_SPI_Init+0x250>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d018      	beq.n	800934c <HAL_SPI_Init+0x58>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a8a      	ldr	r2, [pc, #552]	; (8009548 <HAL_SPI_Init+0x254>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <HAL_SPI_Init+0x58>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a88      	ldr	r2, [pc, #544]	; (800954c <HAL_SPI_Init+0x258>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00e      	beq.n	800934c <HAL_SPI_Init+0x58>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a87      	ldr	r2, [pc, #540]	; (8009550 <HAL_SPI_Init+0x25c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d009      	beq.n	800934c <HAL_SPI_Init+0x58>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a85      	ldr	r2, [pc, #532]	; (8009554 <HAL_SPI_Init+0x260>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <HAL_SPI_Init+0x58>
 8009342:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009346:	4884      	ldr	r0, [pc, #528]	; (8009558 <HAL_SPI_Init+0x264>)
 8009348:	f7fa f903 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <HAL_SPI_Init+0x74>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800935c:	d004      	beq.n	8009368 <HAL_SPI_Init+0x74>
 800935e:	f240 1143 	movw	r1, #323	; 0x143
 8009362:	487d      	ldr	r0, [pc, #500]	; (8009558 <HAL_SPI_Init+0x264>)
 8009364:	f7fa f8f5 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00e      	beq.n	800938e <HAL_SPI_Init+0x9a>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009378:	d009      	beq.n	800938e <HAL_SPI_Init+0x9a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009382:	d004      	beq.n	800938e <HAL_SPI_Init+0x9a>
 8009384:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009388:	4873      	ldr	r0, [pc, #460]	; (8009558 <HAL_SPI_Init+0x264>)
 800938a:	f7fa f8e2 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009396:	d008      	beq.n	80093aa <HAL_SPI_Init+0xb6>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <HAL_SPI_Init+0xb6>
 80093a0:	f240 1145 	movw	r1, #325	; 0x145
 80093a4:	486c      	ldr	r0, [pc, #432]	; (8009558 <HAL_SPI_Init+0x264>)
 80093a6:	f7fa f8d4 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b2:	d00d      	beq.n	80093d0 <HAL_SPI_Init+0xdc>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d009      	beq.n	80093d0 <HAL_SPI_Init+0xdc>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093c4:	d004      	beq.n	80093d0 <HAL_SPI_Init+0xdc>
 80093c6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80093ca:	4863      	ldr	r0, [pc, #396]	; (8009558 <HAL_SPI_Init+0x264>)
 80093cc:	f7fa f8c1 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d020      	beq.n	800941a <HAL_SPI_Init+0x126>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d01c      	beq.n	800941a <HAL_SPI_Init+0x126>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	2b10      	cmp	r3, #16
 80093e6:	d018      	beq.n	800941a <HAL_SPI_Init+0x126>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	2b18      	cmp	r3, #24
 80093ee:	d014      	beq.n	800941a <HAL_SPI_Init+0x126>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	d010      	beq.n	800941a <HAL_SPI_Init+0x126>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	2b28      	cmp	r3, #40	; 0x28
 80093fe:	d00c      	beq.n	800941a <HAL_SPI_Init+0x126>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	2b30      	cmp	r3, #48	; 0x30
 8009406:	d008      	beq.n	800941a <HAL_SPI_Init+0x126>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	2b38      	cmp	r3, #56	; 0x38
 800940e:	d004      	beq.n	800941a <HAL_SPI_Init+0x126>
 8009410:	f240 1147 	movw	r1, #327	; 0x147
 8009414:	4850      	ldr	r0, [pc, #320]	; (8009558 <HAL_SPI_Init+0x264>)
 8009416:	f7fa f89c 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <HAL_SPI_Init+0x140>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	2b80      	cmp	r3, #128	; 0x80
 8009428:	d004      	beq.n	8009434 <HAL_SPI_Init+0x140>
 800942a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800942e:	484a      	ldr	r0, [pc, #296]	; (8009558 <HAL_SPI_Init+0x264>)
 8009430:	f7fa f88f 	bl	8003552 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d008      	beq.n	800944e <HAL_SPI_Init+0x15a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b10      	cmp	r3, #16
 8009442:	d004      	beq.n	800944e <HAL_SPI_Init+0x15a>
 8009444:	f240 1149 	movw	r1, #329	; 0x149
 8009448:	4843      	ldr	r0, [pc, #268]	; (8009558 <HAL_SPI_Init+0x264>)
 800944a:	f7fa f882 	bl	8003552 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	2b00      	cmp	r3, #0
 8009454:	d119      	bne.n	800948a <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d008      	beq.n	8009470 <HAL_SPI_Init+0x17c>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d004      	beq.n	8009470 <HAL_SPI_Init+0x17c>
 8009466:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800946a:	483b      	ldr	r0, [pc, #236]	; (8009558 <HAL_SPI_Init+0x264>)
 800946c:	f7fa f871 	bl	8003552 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <HAL_SPI_Init+0x196>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d004      	beq.n	800948a <HAL_SPI_Init+0x196>
 8009480:	f240 114d 	movw	r1, #333	; 0x14d
 8009484:	4834      	ldr	r0, [pc, #208]	; (8009558 <HAL_SPI_Init+0x264>)
 8009486:	f7fa f864 	bl	8003552 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fa fc31 	bl	8003d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2202      	movs	r2, #2
 80094ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	431a      	orrs	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	ea42 0103 	orr.w	r1, r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	f003 0104 	and.w	r1, r3, #4
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69da      	ldr	r2, [r3, #28]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009526:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40013000 	.word	0x40013000
 8009544:	40003800 	.word	0x40003800
 8009548:	40003c00 	.word	0x40003c00
 800954c:	40013400 	.word	0x40013400
 8009550:	40015000 	.word	0x40015000
 8009554:	40015400 	.word	0x40015400
 8009558:	0800fa84 	.word	0x0800fa84

0800955c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af02      	add	r7, sp, #8
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	4613      	mov	r3, r2
 800956a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009578:	d112      	bne.n	80095a0 <HAL_SPI_Receive+0x44>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10e      	bne.n	80095a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2204      	movs	r2, #4
 8009586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800958a:	88fa      	ldrh	r2, [r7, #6]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f8ea 	bl	8009770 <HAL_SPI_TransmitReceive>
 800959c:	4603      	mov	r3, r0
 800959e:	e0e2      	b.n	8009766 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_SPI_Receive+0x52>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e0db      	b.n	8009766 <HAL_SPI_Receive+0x20a>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095b6:	f7fb fce1 	bl	8004f7c <HAL_GetTick>
 80095ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d002      	beq.n	80095ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80095c8:	2302      	movs	r3, #2
 80095ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095cc:	e0c2      	b.n	8009754 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <HAL_SPI_Receive+0x7e>
 80095d4:	88fb      	ldrh	r3, [r7, #6]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d102      	bne.n	80095e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095de:	e0b9      	b.n	8009754 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2204      	movs	r2, #4
 80095e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	88fa      	ldrh	r2, [r7, #6]
 80095f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	88fa      	ldrh	r2, [r7, #6]
 80095fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009626:	d107      	bne.n	8009638 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009636:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009642:	2b40      	cmp	r3, #64	; 0x40
 8009644:	d007      	beq.n	8009656 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009654:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d162      	bne.n	8009724 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800965e:	e02e      	b.n	80096be <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	2b01      	cmp	r3, #1
 800966c:	d115      	bne.n	800969a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f103 020c 	add.w	r2, r3, #12
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009698:	e011      	b.n	80096be <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800969a:	f7fb fc6f 	bl	8004f7c <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d803      	bhi.n	80096b2 <HAL_SPI_Receive+0x156>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096b0:	d102      	bne.n	80096b8 <HAL_SPI_Receive+0x15c>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80096bc:	e04a      	b.n	8009754 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1cb      	bne.n	8009660 <HAL_SPI_Receive+0x104>
 80096c8:	e031      	b.n	800972e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d113      	bne.n	8009700 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	b292      	uxth	r2, r2
 80096e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	1c9a      	adds	r2, r3, #2
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096fe:	e011      	b.n	8009724 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009700:	f7fb fc3c 	bl	8004f7c <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d803      	bhi.n	8009718 <HAL_SPI_Receive+0x1bc>
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009716:	d102      	bne.n	800971e <HAL_SPI_Receive+0x1c2>
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d102      	bne.n	8009724 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009722:	e017      	b.n	8009754 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009728:	b29b      	uxth	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1cd      	bne.n	80096ca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fa34 	bl	8009ba0 <SPI_EndRxTransaction>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2220      	movs	r2, #32
 8009742:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
 8009750:	e000      	b.n	8009754 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08c      	sub	sp, #48	; 0x30
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800977e:	2301      	movs	r3, #1
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d004      	beq.n	800979a <HAL_SPI_TransmitReceive+0x2a>
 8009790:	f240 415a 	movw	r1, #1114	; 0x45a
 8009794:	4884      	ldr	r0, [pc, #528]	; (80099a8 <HAL_SPI_TransmitReceive+0x238>)
 8009796:	f7f9 fedc 	bl	8003552 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x38>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e18d      	b.n	8009ac4 <HAL_SPI_TransmitReceive+0x354>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097b0:	f7fb fbe4 	bl	8004f7c <HAL_GetTick>
 80097b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80097c6:	887b      	ldrh	r3, [r7, #2]
 80097c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d00f      	beq.n	80097f2 <HAL_SPI_TransmitReceive+0x82>
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d8:	d107      	bne.n	80097ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <HAL_SPI_TransmitReceive+0x7a>
 80097e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d003      	beq.n	80097f2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80097ea:	2302      	movs	r3, #2
 80097ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80097f0:	e15e      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <HAL_SPI_TransmitReceive+0x94>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <HAL_SPI_TransmitReceive+0x94>
 80097fe:	887b      	ldrh	r3, [r7, #2]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800980a:	e151      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b04      	cmp	r3, #4
 8009816:	d003      	beq.n	8009820 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2205      	movs	r2, #5
 800981c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	887a      	ldrh	r2, [r7, #2]
 8009830:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	887a      	ldrh	r2, [r7, #2]
 8009836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	887a      	ldrh	r2, [r7, #2]
 8009842:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	887a      	ldrh	r2, [r7, #2]
 8009848:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009860:	2b40      	cmp	r3, #64	; 0x40
 8009862:	d007      	beq.n	8009874 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800987c:	d178      	bne.n	8009970 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_SPI_TransmitReceive+0x11c>
 8009886:	8b7b      	ldrh	r3, [r7, #26]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d166      	bne.n	800995a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	881a      	ldrh	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989c:	1c9a      	adds	r2, r3, #2
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098b0:	e053      	b.n	800995a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d11b      	bne.n	80098f8 <HAL_SPI_TransmitReceive+0x188>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d016      	beq.n	80098f8 <HAL_SPI_TransmitReceive+0x188>
 80098ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d113      	bne.n	80098f8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	881a      	ldrh	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b01      	cmp	r3, #1
 8009904:	d119      	bne.n	800993a <HAL_SPI_TransmitReceive+0x1ca>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800990a:	b29b      	uxth	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d014      	beq.n	800993a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991a:	b292      	uxth	r2, r2
 800991c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	1c9a      	adds	r2, r3, #2
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800992c:	b29b      	uxth	r3, r3
 800992e:	3b01      	subs	r3, #1
 8009930:	b29a      	uxth	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009936:	2301      	movs	r3, #1
 8009938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800993a:	f7fb fb1f 	bl	8004f7c <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009946:	429a      	cmp	r2, r3
 8009948:	d807      	bhi.n	800995a <HAL_SPI_TransmitReceive+0x1ea>
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009950:	d003      	beq.n	800995a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009958:	e0aa      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800995e:	b29b      	uxth	r3, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1a6      	bne.n	80098b2 <HAL_SPI_TransmitReceive+0x142>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009968:	b29b      	uxth	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1a1      	bne.n	80098b2 <HAL_SPI_TransmitReceive+0x142>
 800996e:	e07f      	b.n	8009a70 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_SPI_TransmitReceive+0x20e>
 8009978:	8b7b      	ldrh	r3, [r7, #26]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d16e      	bne.n	8009a5c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	330c      	adds	r3, #12
 8009988:	7812      	ldrb	r2, [r2, #0]
 800998a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800999a:	b29b      	uxth	r3, r3
 800999c:	3b01      	subs	r3, #1
 800999e:	b29a      	uxth	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099a4:	e05a      	b.n	8009a5c <HAL_SPI_TransmitReceive+0x2ec>
 80099a6:	bf00      	nop
 80099a8:	0800fa84 	.word	0x0800fa84
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d11c      	bne.n	80099f4 <HAL_SPI_TransmitReceive+0x284>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d017      	beq.n	80099f4 <HAL_SPI_TransmitReceive+0x284>
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d114      	bne.n	80099f4 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	330c      	adds	r3, #12
 80099d4:	7812      	ldrb	r2, [r2, #0]
 80099d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d119      	bne.n	8009a36 <HAL_SPI_TransmitReceive+0x2c6>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d014      	beq.n	8009a36 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a32:	2301      	movs	r3, #1
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a36:	f7fb faa1 	bl	8004f7c <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d803      	bhi.n	8009a4e <HAL_SPI_TransmitReceive+0x2de>
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a4c:	d102      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x2e4>
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a5a:	e029      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1a2      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x23c>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d19d      	bne.n	80099ac <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f8f9 	bl	8009c6c <SPI_EndRxTxTransaction>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d006      	beq.n	8009a8e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2220      	movs	r2, #32
 8009a8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009a8c:	e010      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a96:	2300      	movs	r3, #0
 8009a98:	617b      	str	r3, [r7, #20]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	e000      	b.n	8009ab0 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8009aae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3730      	adds	r7, #48	; 0x30
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009adc:	e04c      	b.n	8009b78 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ae4:	d048      	beq.n	8009b78 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009ae6:	f7fb fa49 	bl	8004f7c <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d902      	bls.n	8009afc <SPI_WaitFlagStateUntilTimeout+0x30>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d13d      	bne.n	8009b78 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b14:	d111      	bne.n	8009b3a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b1e:	d004      	beq.n	8009b2a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b28:	d107      	bne.n	8009b3a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b42:	d10f      	bne.n	8009b64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e00f      	b.n	8009b98 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4013      	ands	r3, r2
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bf0c      	ite	eq
 8009b88:	2301      	moveq	r3, #1
 8009b8a:	2300      	movne	r3, #0
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d1a3      	bne.n	8009ade <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bb4:	d111      	bne.n	8009bda <SPI_EndRxTransaction+0x3a>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bbe:	d004      	beq.n	8009bca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc8:	d107      	bne.n	8009bda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009be2:	d12a      	bne.n	8009c3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bec:	d012      	beq.n	8009c14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2180      	movs	r1, #128	; 0x80
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f7ff ff67 	bl	8009acc <SPI_WaitFlagStateUntilTimeout>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d02d      	beq.n	8009c60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c08:	f043 0220 	orr.w	r2, r3, #32
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e026      	b.n	8009c62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff ff54 	bl	8009acc <SPI_WaitFlagStateUntilTimeout>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01a      	beq.n	8009c60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2e:	f043 0220 	orr.w	r2, r3, #32
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e013      	b.n	8009c62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2101      	movs	r1, #1
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff ff41 	bl	8009acc <SPI_WaitFlagStateUntilTimeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c54:	f043 0220 	orr.w	r2, r3, #32
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e000      	b.n	8009c62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c78:	4b1b      	ldr	r3, [pc, #108]	; (8009ce8 <SPI_EndRxTxTransaction+0x7c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	; (8009cec <SPI_EndRxTxTransaction+0x80>)
 8009c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c82:	0d5b      	lsrs	r3, r3, #21
 8009c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c88:	fb02 f303 	mul.w	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c96:	d112      	bne.n	8009cbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2180      	movs	r1, #128	; 0x80
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff ff12 	bl	8009acc <SPI_WaitFlagStateUntilTimeout>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d016      	beq.n	8009cdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb2:	f043 0220 	orr.w	r2, r3, #32
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e00f      	b.n	8009cde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00a      	beq.n	8009cda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d0f2      	beq.n	8009cbe <SPI_EndRxTxTransaction+0x52>
 8009cd8:	e000      	b.n	8009cdc <SPI_EndRxTxTransaction+0x70>
        break;
 8009cda:	bf00      	nop
  }

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200001d0 	.word	0x200001d0
 8009cec:	165e9f81 	.word	0x165e9f81

08009cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e0a1      	b.n	8009e46 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a52      	ldr	r2, [pc, #328]	; (8009e50 <HAL_TIM_Base_Init+0x160>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d045      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d14:	d040      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a4e      	ldr	r2, [pc, #312]	; (8009e54 <HAL_TIM_Base_Init+0x164>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d03b      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a4c      	ldr	r2, [pc, #304]	; (8009e58 <HAL_TIM_Base_Init+0x168>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d036      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a4b      	ldr	r2, [pc, #300]	; (8009e5c <HAL_TIM_Base_Init+0x16c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d031      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a49      	ldr	r2, [pc, #292]	; (8009e60 <HAL_TIM_Base_Init+0x170>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d02c      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a48      	ldr	r2, [pc, #288]	; (8009e64 <HAL_TIM_Base_Init+0x174>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d027      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a46      	ldr	r2, [pc, #280]	; (8009e68 <HAL_TIM_Base_Init+0x178>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d022      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a45      	ldr	r2, [pc, #276]	; (8009e6c <HAL_TIM_Base_Init+0x17c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d01d      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a43      	ldr	r2, [pc, #268]	; (8009e70 <HAL_TIM_Base_Init+0x180>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d018      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a42      	ldr	r2, [pc, #264]	; (8009e74 <HAL_TIM_Base_Init+0x184>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d013      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a40      	ldr	r2, [pc, #256]	; (8009e78 <HAL_TIM_Base_Init+0x188>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00e      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a3f      	ldr	r2, [pc, #252]	; (8009e7c <HAL_TIM_Base_Init+0x18c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d009      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a3d      	ldr	r2, [pc, #244]	; (8009e80 <HAL_TIM_Base_Init+0x190>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <HAL_TIM_Base_Init+0xa8>
 8009d8e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8009d92:	483c      	ldr	r0, [pc, #240]	; (8009e84 <HAL_TIM_Base_Init+0x194>)
 8009d94:	f7f9 fbdd 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d014      	beq.n	8009dca <HAL_TIM_Base_Init+0xda>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	d010      	beq.n	8009dca <HAL_TIM_Base_Init+0xda>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b20      	cmp	r3, #32
 8009dae:	d00c      	beq.n	8009dca <HAL_TIM_Base_Init+0xda>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	2b40      	cmp	r3, #64	; 0x40
 8009db6:	d008      	beq.n	8009dca <HAL_TIM_Base_Init+0xda>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b60      	cmp	r3, #96	; 0x60
 8009dbe:	d004      	beq.n	8009dca <HAL_TIM_Base_Init+0xda>
 8009dc0:	f240 1113 	movw	r1, #275	; 0x113
 8009dc4:	482f      	ldr	r0, [pc, #188]	; (8009e84 <HAL_TIM_Base_Init+0x194>)
 8009dc6:	f7f9 fbc4 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00e      	beq.n	8009df0 <HAL_TIM_Base_Init+0x100>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dda:	d009      	beq.n	8009df0 <HAL_TIM_Base_Init+0x100>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de4:	d004      	beq.n	8009df0 <HAL_TIM_Base_Init+0x100>
 8009de6:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009dea:	4826      	ldr	r0, [pc, #152]	; (8009e84 <HAL_TIM_Base_Init+0x194>)
 8009dec:	f7f9 fbb1 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d008      	beq.n	8009e0a <HAL_TIM_Base_Init+0x11a>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	2b80      	cmp	r3, #128	; 0x80
 8009dfe:	d004      	beq.n	8009e0a <HAL_TIM_Base_Init+0x11a>
 8009e00:	f240 1115 	movw	r1, #277	; 0x115
 8009e04:	481f      	ldr	r0, [pc, #124]	; (8009e84 <HAL_TIM_Base_Init+0x194>)
 8009e06:	f7f9 fba4 	bl	8003552 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fa fa7e 	bl	8004320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f001 fa62 	bl	800b300 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40000400 	.word	0x40000400
 8009e58:	40000800 	.word	0x40000800
 8009e5c:	40000c00 	.word	0x40000c00
 8009e60:	40001000 	.word	0x40001000
 8009e64:	40001400 	.word	0x40001400
 8009e68:	40010400 	.word	0x40010400
 8009e6c:	40014000 	.word	0x40014000
 8009e70:	40014400 	.word	0x40014400
 8009e74:	40014800 	.word	0x40014800
 8009e78:	40001800 	.word	0x40001800
 8009e7c:	40001c00 	.word	0x40001c00
 8009e80:	40002000 	.word	0x40002000
 8009e84:	0800fabc 	.word	0x0800fabc

08009e88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a33      	ldr	r2, [pc, #204]	; (8009f64 <HAL_TIM_Base_Start+0xdc>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d045      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea2:	d040      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a2f      	ldr	r2, [pc, #188]	; (8009f68 <HAL_TIM_Base_Start+0xe0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d03b      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a2e      	ldr	r2, [pc, #184]	; (8009f6c <HAL_TIM_Base_Start+0xe4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d036      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a2c      	ldr	r2, [pc, #176]	; (8009f70 <HAL_TIM_Base_Start+0xe8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d031      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a2b      	ldr	r2, [pc, #172]	; (8009f74 <HAL_TIM_Base_Start+0xec>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d02c      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a29      	ldr	r2, [pc, #164]	; (8009f78 <HAL_TIM_Base_Start+0xf0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d027      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a28      	ldr	r2, [pc, #160]	; (8009f7c <HAL_TIM_Base_Start+0xf4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d022      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a26      	ldr	r2, [pc, #152]	; (8009f80 <HAL_TIM_Base_Start+0xf8>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d01d      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a25      	ldr	r2, [pc, #148]	; (8009f84 <HAL_TIM_Base_Start+0xfc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d018      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a23      	ldr	r2, [pc, #140]	; (8009f88 <HAL_TIM_Base_Start+0x100>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d013      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a22      	ldr	r2, [pc, #136]	; (8009f8c <HAL_TIM_Base_Start+0x104>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00e      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a20      	ldr	r2, [pc, #128]	; (8009f90 <HAL_TIM_Base_Start+0x108>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d009      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a1f      	ldr	r2, [pc, #124]	; (8009f94 <HAL_TIM_Base_Start+0x10c>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d004      	beq.n	8009f26 <HAL_TIM_Base_Start+0x9e>
 8009f1c:	f240 1185 	movw	r1, #389	; 0x185
 8009f20:	481d      	ldr	r0, [pc, #116]	; (8009f98 <HAL_TIM_Base_Start+0x110>)
 8009f22:	f7f9 fb16 	bl	8003552 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2202      	movs	r2, #2
 8009f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f003 0307 	and.w	r3, r3, #7
 8009f38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b06      	cmp	r3, #6
 8009f3e:	d007      	beq.n	8009f50 <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40000400 	.word	0x40000400
 8009f6c:	40000800 	.word	0x40000800
 8009f70:	40000c00 	.word	0x40000c00
 8009f74:	40001000 	.word	0x40001000
 8009f78:	40001400 	.word	0x40001400
 8009f7c:	40010400 	.word	0x40010400
 8009f80:	40014000 	.word	0x40014000
 8009f84:	40014400 	.word	0x40014400
 8009f88:	40014800 	.word	0x40014800
 8009f8c:	40001800 	.word	0x40001800
 8009f90:	40001c00 	.word	0x40001c00
 8009f94:	40002000 	.word	0x40002000
 8009f98:	0800fabc 	.word	0x0800fabc

08009f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d101      	bne.n	8009fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e0a1      	b.n	800a0f2 <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a52      	ldr	r2, [pc, #328]	; (800a0fc <HAL_TIM_PWM_Init+0x160>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d045      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc0:	d040      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a4e      	ldr	r2, [pc, #312]	; (800a100 <HAL_TIM_PWM_Init+0x164>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d03b      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a4c      	ldr	r2, [pc, #304]	; (800a104 <HAL_TIM_PWM_Init+0x168>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d036      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a4b      	ldr	r2, [pc, #300]	; (800a108 <HAL_TIM_PWM_Init+0x16c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d031      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a49      	ldr	r2, [pc, #292]	; (800a10c <HAL_TIM_PWM_Init+0x170>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d02c      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a48      	ldr	r2, [pc, #288]	; (800a110 <HAL_TIM_PWM_Init+0x174>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d027      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a46      	ldr	r2, [pc, #280]	; (800a114 <HAL_TIM_PWM_Init+0x178>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d022      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a45      	ldr	r2, [pc, #276]	; (800a118 <HAL_TIM_PWM_Init+0x17c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d01d      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a43      	ldr	r2, [pc, #268]	; (800a11c <HAL_TIM_PWM_Init+0x180>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d018      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a42      	ldr	r2, [pc, #264]	; (800a120 <HAL_TIM_PWM_Init+0x184>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a40      	ldr	r2, [pc, #256]	; (800a124 <HAL_TIM_PWM_Init+0x188>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00e      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a3f      	ldr	r2, [pc, #252]	; (800a128 <HAL_TIM_PWM_Init+0x18c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d009      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a3d      	ldr	r2, [pc, #244]	; (800a12c <HAL_TIM_PWM_Init+0x190>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d004      	beq.n	800a044 <HAL_TIM_PWM_Init+0xa8>
 800a03a:	f240 419b 	movw	r1, #1179	; 0x49b
 800a03e:	483c      	ldr	r0, [pc, #240]	; (800a130 <HAL_TIM_PWM_Init+0x194>)
 800a040:	f7f9 fa87 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d014      	beq.n	800a076 <HAL_TIM_PWM_Init+0xda>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	2b10      	cmp	r3, #16
 800a052:	d010      	beq.n	800a076 <HAL_TIM_PWM_Init+0xda>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d00c      	beq.n	800a076 <HAL_TIM_PWM_Init+0xda>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	2b40      	cmp	r3, #64	; 0x40
 800a062:	d008      	beq.n	800a076 <HAL_TIM_PWM_Init+0xda>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	2b60      	cmp	r3, #96	; 0x60
 800a06a:	d004      	beq.n	800a076 <HAL_TIM_PWM_Init+0xda>
 800a06c:	f240 419c 	movw	r1, #1180	; 0x49c
 800a070:	482f      	ldr	r0, [pc, #188]	; (800a130 <HAL_TIM_PWM_Init+0x194>)
 800a072:	f7f9 fa6e 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00e      	beq.n	800a09c <HAL_TIM_PWM_Init+0x100>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a086:	d009      	beq.n	800a09c <HAL_TIM_PWM_Init+0x100>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a090:	d004      	beq.n	800a09c <HAL_TIM_PWM_Init+0x100>
 800a092:	f240 419d 	movw	r1, #1181	; 0x49d
 800a096:	4826      	ldr	r0, [pc, #152]	; (800a130 <HAL_TIM_PWM_Init+0x194>)
 800a098:	f7f9 fa5b 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d008      	beq.n	800a0b6 <HAL_TIM_PWM_Init+0x11a>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b80      	cmp	r3, #128	; 0x80
 800a0aa:	d004      	beq.n	800a0b6 <HAL_TIM_PWM_Init+0x11a>
 800a0ac:	f240 419e 	movw	r1, #1182	; 0x49e
 800a0b0:	481f      	ldr	r0, [pc, #124]	; (800a130 <HAL_TIM_PWM_Init+0x194>)
 800a0b2:	f7f9 fa4e 	bl	8003552 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d106      	bne.n	800a0d0 <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f832 	bl	800a134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	f001 f90c 	bl	800b300 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40000400 	.word	0x40000400
 800a104:	40000800 	.word	0x40000800
 800a108:	40000c00 	.word	0x40000c00
 800a10c:	40001000 	.word	0x40001000
 800a110:	40001400 	.word	0x40001400
 800a114:	40010400 	.word	0x40010400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40014400 	.word	0x40014400
 800a120:	40014800 	.word	0x40014800
 800a124:	40001800 	.word	0x40001800
 800a128:	40001c00 	.word	0x40001c00
 800a12c:	40002000 	.word	0x40002000
 800a130:	0800fabc 	.word	0x0800fabc

0800a134 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a6d      	ldr	r2, [pc, #436]	; (800a30c <HAL_TIM_PWM_Start+0x1c4>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d10f      	bne.n	800a17c <HAL_TIM_PWM_Start+0x34>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 809f 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b04      	cmp	r3, #4
 800a168:	f000 809b 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b08      	cmp	r3, #8
 800a170:	f000 8097 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b0c      	cmp	r3, #12
 800a178:	f000 8093 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a184:	d10e      	bne.n	800a1a4 <HAL_TIM_PWM_Start+0x5c>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 808a 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b04      	cmp	r3, #4
 800a192:	f000 8086 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b08      	cmp	r3, #8
 800a19a:	f000 8082 	beq.w	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b0c      	cmp	r3, #12
 800a1a2:	d07e      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a59      	ldr	r2, [pc, #356]	; (800a310 <HAL_TIM_PWM_Start+0x1c8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d10b      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0x7e>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d076      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d073      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d070      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b0c      	cmp	r3, #12
 800a1c4:	d06d      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a52      	ldr	r2, [pc, #328]	; (800a314 <HAL_TIM_PWM_Start+0x1cc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d10b      	bne.n	800a1e8 <HAL_TIM_PWM_Start+0xa0>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d065      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d062      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d05f      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b0c      	cmp	r3, #12
 800a1e6:	d05c      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a4a      	ldr	r2, [pc, #296]	; (800a318 <HAL_TIM_PWM_Start+0x1d0>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d10b      	bne.n	800a20a <HAL_TIM_PWM_Start+0xc2>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d054      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d051      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b08      	cmp	r3, #8
 800a202:	d04e      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b0c      	cmp	r3, #12
 800a208:	d04b      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a43      	ldr	r2, [pc, #268]	; (800a31c <HAL_TIM_PWM_Start+0x1d4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d10b      	bne.n	800a22c <HAL_TIM_PWM_Start+0xe4>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d043      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d040      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b08      	cmp	r3, #8
 800a224:	d03d      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b0c      	cmp	r3, #12
 800a22a:	d03a      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a3b      	ldr	r2, [pc, #236]	; (800a320 <HAL_TIM_PWM_Start+0x1d8>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d105      	bne.n	800a242 <HAL_TIM_PWM_Start+0xfa>
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d032      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d02f      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a37      	ldr	r2, [pc, #220]	; (800a324 <HAL_TIM_PWM_Start+0x1dc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d102      	bne.n	800a252 <HAL_TIM_PWM_Start+0x10a>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d027      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a34      	ldr	r2, [pc, #208]	; (800a328 <HAL_TIM_PWM_Start+0x1e0>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d102      	bne.n	800a262 <HAL_TIM_PWM_Start+0x11a>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d01f      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a31      	ldr	r2, [pc, #196]	; (800a32c <HAL_TIM_PWM_Start+0x1e4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d105      	bne.n	800a278 <HAL_TIM_PWM_Start+0x130>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d017      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b04      	cmp	r3, #4
 800a276:	d014      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a2c      	ldr	r2, [pc, #176]	; (800a330 <HAL_TIM_PWM_Start+0x1e8>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d102      	bne.n	800a288 <HAL_TIM_PWM_Start+0x140>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00c      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a29      	ldr	r2, [pc, #164]	; (800a334 <HAL_TIM_PWM_Start+0x1ec>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d102      	bne.n	800a298 <HAL_TIM_PWM_Start+0x150>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d004      	beq.n	800a2a2 <HAL_TIM_PWM_Start+0x15a>
 800a298:	f240 5113 	movw	r1, #1299	; 0x513
 800a29c:	4826      	ldr	r0, [pc, #152]	; (800a338 <HAL_TIM_PWM_Start+0x1f0>)
 800a29e:	f7f9 f958 	bl	8003552 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 fcc6 	bl	800bc3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a15      	ldr	r2, [pc, #84]	; (800a30c <HAL_TIM_PWM_Start+0x1c4>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d004      	beq.n	800a2c4 <HAL_TIM_PWM_Start+0x17c>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a17      	ldr	r2, [pc, #92]	; (800a31c <HAL_TIM_PWM_Start+0x1d4>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d101      	bne.n	800a2c8 <HAL_TIM_PWM_Start+0x180>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e000      	b.n	800a2ca <HAL_TIM_PWM_Start+0x182>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d007      	beq.n	800a2de <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f003 0307 	and.w	r3, r3, #7
 800a2e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b06      	cmp	r3, #6
 800a2ee:	d007      	beq.n	800a300 <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f042 0201 	orr.w	r2, r2, #1
 800a2fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40010000 	.word	0x40010000
 800a310:	40000400 	.word	0x40000400
 800a314:	40000800 	.word	0x40000800
 800a318:	40000c00 	.word	0x40000c00
 800a31c:	40010400 	.word	0x40010400
 800a320:	40014000 	.word	0x40014000
 800a324:	40014400 	.word	0x40014400
 800a328:	40014800 	.word	0x40014800
 800a32c:	40001800 	.word	0x40001800
 800a330:	40001c00 	.word	0x40001c00
 800a334:	40002000 	.word	0x40002000
 800a338:	0800fabc 	.word	0x0800fabc

0800a33c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e0a1      	b.n	800a492 <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a52      	ldr	r2, [pc, #328]	; (800a49c <HAL_TIM_IC_Init+0x160>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d045      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a360:	d040      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a4e      	ldr	r2, [pc, #312]	; (800a4a0 <HAL_TIM_IC_Init+0x164>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d03b      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a4c      	ldr	r2, [pc, #304]	; (800a4a4 <HAL_TIM_IC_Init+0x168>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d036      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a4b      	ldr	r2, [pc, #300]	; (800a4a8 <HAL_TIM_IC_Init+0x16c>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d031      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a49      	ldr	r2, [pc, #292]	; (800a4ac <HAL_TIM_IC_Init+0x170>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d02c      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a48      	ldr	r2, [pc, #288]	; (800a4b0 <HAL_TIM_IC_Init+0x174>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d027      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a46      	ldr	r2, [pc, #280]	; (800a4b4 <HAL_TIM_IC_Init+0x178>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d022      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a45      	ldr	r2, [pc, #276]	; (800a4b8 <HAL_TIM_IC_Init+0x17c>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d01d      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a43      	ldr	r2, [pc, #268]	; (800a4bc <HAL_TIM_IC_Init+0x180>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d018      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a42      	ldr	r2, [pc, #264]	; (800a4c0 <HAL_TIM_IC_Init+0x184>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d013      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a40      	ldr	r2, [pc, #256]	; (800a4c4 <HAL_TIM_IC_Init+0x188>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d00e      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a3f      	ldr	r2, [pc, #252]	; (800a4c8 <HAL_TIM_IC_Init+0x18c>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d009      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a3d      	ldr	r2, [pc, #244]	; (800a4cc <HAL_TIM_IC_Init+0x190>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d004      	beq.n	800a3e4 <HAL_TIM_IC_Init+0xa8>
 800a3da:	f240 61d9 	movw	r1, #1753	; 0x6d9
 800a3de:	483c      	ldr	r0, [pc, #240]	; (800a4d0 <HAL_TIM_IC_Init+0x194>)
 800a3e0:	f7f9 f8b7 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d014      	beq.n	800a416 <HAL_TIM_IC_Init+0xda>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d010      	beq.n	800a416 <HAL_TIM_IC_Init+0xda>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d00c      	beq.n	800a416 <HAL_TIM_IC_Init+0xda>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	2b40      	cmp	r3, #64	; 0x40
 800a402:	d008      	beq.n	800a416 <HAL_TIM_IC_Init+0xda>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	2b60      	cmp	r3, #96	; 0x60
 800a40a:	d004      	beq.n	800a416 <HAL_TIM_IC_Init+0xda>
 800a40c:	f240 61da 	movw	r1, #1754	; 0x6da
 800a410:	482f      	ldr	r0, [pc, #188]	; (800a4d0 <HAL_TIM_IC_Init+0x194>)
 800a412:	f7f9 f89e 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00e      	beq.n	800a43c <HAL_TIM_IC_Init+0x100>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a426:	d009      	beq.n	800a43c <HAL_TIM_IC_Init+0x100>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a430:	d004      	beq.n	800a43c <HAL_TIM_IC_Init+0x100>
 800a432:	f240 61db 	movw	r1, #1755	; 0x6db
 800a436:	4826      	ldr	r0, [pc, #152]	; (800a4d0 <HAL_TIM_IC_Init+0x194>)
 800a438:	f7f9 f88b 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_TIM_IC_Init+0x11a>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	2b80      	cmp	r3, #128	; 0x80
 800a44a:	d004      	beq.n	800a456 <HAL_TIM_IC_Init+0x11a>
 800a44c:	f240 61dc 	movw	r1, #1756	; 0x6dc
 800a450:	481f      	ldr	r0, [pc, #124]	; (800a4d0 <HAL_TIM_IC_Init+0x194>)
 800a452:	f7f9 f87e 	bl	8003552 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f832 	bl	800a4d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f000 ff3c 	bl	800b300 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	40010000 	.word	0x40010000
 800a4a0:	40000400 	.word	0x40000400
 800a4a4:	40000800 	.word	0x40000800
 800a4a8:	40000c00 	.word	0x40000c00
 800a4ac:	40001000 	.word	0x40001000
 800a4b0:	40001400 	.word	0x40001400
 800a4b4:	40010400 	.word	0x40010400
 800a4b8:	40014000 	.word	0x40014000
 800a4bc:	40014400 	.word	0x40014400
 800a4c0:	40014800 	.word	0x40014800
 800a4c4:	40001800 	.word	0x40001800
 800a4c8:	40001c00 	.word	0x40001c00
 800a4cc:	40002000 	.word	0x40002000
 800a4d0:	0800fabc 	.word	0x0800fabc

0800a4d4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a7c      	ldr	r2, [pc, #496]	; (800a6ec <HAL_TIM_IC_ConfigChannel+0x204>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d03b      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a506:	d036      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a78      	ldr	r2, [pc, #480]	; (800a6f0 <HAL_TIM_IC_ConfigChannel+0x208>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d031      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a77      	ldr	r2, [pc, #476]	; (800a6f4 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d02c      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a75      	ldr	r2, [pc, #468]	; (800a6f8 <HAL_TIM_IC_ConfigChannel+0x210>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d027      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a74      	ldr	r2, [pc, #464]	; (800a6fc <HAL_TIM_IC_ConfigChannel+0x214>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d022      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a72      	ldr	r2, [pc, #456]	; (800a700 <HAL_TIM_IC_ConfigChannel+0x218>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d01d      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a71      	ldr	r2, [pc, #452]	; (800a704 <HAL_TIM_IC_ConfigChannel+0x21c>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d018      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a6f      	ldr	r2, [pc, #444]	; (800a708 <HAL_TIM_IC_ConfigChannel+0x220>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d013      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a6e      	ldr	r2, [pc, #440]	; (800a70c <HAL_TIM_IC_ConfigChannel+0x224>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00e      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a6c      	ldr	r2, [pc, #432]	; (800a710 <HAL_TIM_IC_ConfigChannel+0x228>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d009      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a6b      	ldr	r2, [pc, #428]	; (800a714 <HAL_TIM_IC_ConfigChannel+0x22c>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d004      	beq.n	800a576 <HAL_TIM_IC_ConfigChannel+0x8e>
 800a56c:	f640 5189 	movw	r1, #3465	; 0xd89
 800a570:	4869      	ldr	r0, [pc, #420]	; (800a718 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a572:	f7f8 ffee 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <HAL_TIM_IC_ConfigChannel+0xb0>
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b02      	cmp	r3, #2
 800a584:	d008      	beq.n	800a598 <HAL_TIM_IC_ConfigChannel+0xb0>
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b0a      	cmp	r3, #10
 800a58c:	d004      	beq.n	800a598 <HAL_TIM_IC_ConfigChannel+0xb0>
 800a58e:	f640 518a 	movw	r1, #3466	; 0xd8a
 800a592:	4861      	ldr	r0, [pc, #388]	; (800a718 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a594:	f7f8 ffdd 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d00c      	beq.n	800a5ba <HAL_TIM_IC_ConfigChannel+0xd2>
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d008      	beq.n	800a5ba <HAL_TIM_IC_ConfigChannel+0xd2>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d004      	beq.n	800a5ba <HAL_TIM_IC_ConfigChannel+0xd2>
 800a5b0:	f640 518b 	movw	r1, #3467	; 0xd8b
 800a5b4:	4858      	ldr	r0, [pc, #352]	; (800a718 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a5b6:	f7f8 ffcc 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d010      	beq.n	800a5e4 <HAL_TIM_IC_ConfigChannel+0xfc>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d00c      	beq.n	800a5e4 <HAL_TIM_IC_ConfigChannel+0xfc>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	2b08      	cmp	r3, #8
 800a5d0:	d008      	beq.n	800a5e4 <HAL_TIM_IC_ConfigChannel+0xfc>
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b0c      	cmp	r3, #12
 800a5d8:	d004      	beq.n	800a5e4 <HAL_TIM_IC_ConfigChannel+0xfc>
 800a5da:	f640 518c 	movw	r1, #3468	; 0xd8c
 800a5de:	484e      	ldr	r0, [pc, #312]	; (800a718 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a5e0:	f7f8 ffb7 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	2b0f      	cmp	r3, #15
 800a5ea:	d904      	bls.n	800a5f6 <HAL_TIM_IC_ConfigChannel+0x10e>
 800a5ec:	f640 518d 	movw	r1, #3469	; 0xd8d
 800a5f0:	4849      	ldr	r0, [pc, #292]	; (800a718 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a5f2:	f7f8 ffae 	bl	8003552 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <HAL_TIM_IC_ConfigChannel+0x11c>
 800a600:	2302      	movs	r3, #2
 800a602:	e115      	b.n	800a830 <HAL_TIM_IC_ConfigChannel+0x348>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d11b      	bne.n	800a652 <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	6819      	ldr	r1, [r3, #0]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f001 f943 	bl	800b8b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 020c 	bic.w	r2, r2, #12
 800a63c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6999      	ldr	r1, [r3, #24]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	619a      	str	r2, [r3, #24]
 800a650:	e0e5      	b.n	800a81e <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b04      	cmp	r3, #4
 800a656:	d161      	bne.n	800a71c <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a23      	ldr	r2, [pc, #140]	; (800a6ec <HAL_TIM_IC_ConfigChannel+0x204>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d027      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a66a:	d022      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1f      	ldr	r2, [pc, #124]	; (800a6f0 <HAL_TIM_IC_ConfigChannel+0x208>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d01d      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a1e      	ldr	r2, [pc, #120]	; (800a6f4 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d018      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a1c      	ldr	r2, [pc, #112]	; (800a6f8 <HAL_TIM_IC_ConfigChannel+0x210>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d013      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a1b      	ldr	r2, [pc, #108]	; (800a6fc <HAL_TIM_IC_ConfigChannel+0x214>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00e      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a19      	ldr	r2, [pc, #100]	; (800a700 <HAL_TIM_IC_ConfigChannel+0x218>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d009      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a1a      	ldr	r2, [pc, #104]	; (800a70c <HAL_TIM_IC_ConfigChannel+0x224>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d004      	beq.n	800a6b2 <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a6a8:	f640 51a5 	movw	r1, #3493	; 0xda5
 800a6ac:	481a      	ldr	r0, [pc, #104]	; (800a718 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a6ae:	f7f8 ff50 	bl	8003552 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	6819      	ldr	r1, [r3, #0]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f001 f99a 	bl	800b9fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	699a      	ldr	r2, [r3, #24]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a6d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6999      	ldr	r1, [r3, #24]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	021a      	lsls	r2, r3, #8
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	619a      	str	r2, [r3, #24]
 800a6ea:	e098      	b.n	800a81e <HAL_TIM_IC_ConfigChannel+0x336>
 800a6ec:	40010000 	.word	0x40010000
 800a6f0:	40000400 	.word	0x40000400
 800a6f4:	40000800 	.word	0x40000800
 800a6f8:	40000c00 	.word	0x40000c00
 800a6fc:	40010400 	.word	0x40010400
 800a700:	40014000 	.word	0x40014000
 800a704:	40014400 	.word	0x40014400
 800a708:	40014800 	.word	0x40014800
 800a70c:	40001800 	.word	0x40001800
 800a710:	40001c00 	.word	0x40001c00
 800a714:	40002000 	.word	0x40002000
 800a718:	0800fabc 	.word	0x0800fabc
  }
  else if (Channel == TIM_CHANNEL_3)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b08      	cmp	r3, #8
 800a720:	d13e      	bne.n	800a7a0 <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a44      	ldr	r2, [pc, #272]	; (800a838 <HAL_TIM_IC_ConfigChannel+0x350>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d01d      	beq.n	800a768 <HAL_TIM_IC_ConfigChannel+0x280>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a734:	d018      	beq.n	800a768 <HAL_TIM_IC_ConfigChannel+0x280>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a40      	ldr	r2, [pc, #256]	; (800a83c <HAL_TIM_IC_ConfigChannel+0x354>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d013      	beq.n	800a768 <HAL_TIM_IC_ConfigChannel+0x280>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a3e      	ldr	r2, [pc, #248]	; (800a840 <HAL_TIM_IC_ConfigChannel+0x358>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00e      	beq.n	800a768 <HAL_TIM_IC_ConfigChannel+0x280>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a3d      	ldr	r2, [pc, #244]	; (800a844 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d009      	beq.n	800a768 <HAL_TIM_IC_ConfigChannel+0x280>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a3b      	ldr	r2, [pc, #236]	; (800a848 <HAL_TIM_IC_ConfigChannel+0x360>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_TIM_IC_ConfigChannel+0x280>
 800a75e:	f640 51b5 	movw	r1, #3509	; 0xdb5
 800a762:	483a      	ldr	r0, [pc, #232]	; (800a84c <HAL_TIM_IC_ConfigChannel+0x364>)
 800a764:	f7f8 fef5 	bl	8003552 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6818      	ldr	r0, [r3, #0]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	6819      	ldr	r1, [r3, #0]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f001 f9ac 	bl	800bad4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	69da      	ldr	r2, [r3, #28]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f022 020c 	bic.w	r2, r2, #12
 800a78a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69d9      	ldr	r1, [r3, #28]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	61da      	str	r2, [r3, #28]
 800a79e:	e03e      	b.n	800a81e <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a24      	ldr	r2, [pc, #144]	; (800a838 <HAL_TIM_IC_ConfigChannel+0x350>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d01d      	beq.n	800a7e6 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b2:	d018      	beq.n	800a7e6 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a20      	ldr	r2, [pc, #128]	; (800a83c <HAL_TIM_IC_ConfigChannel+0x354>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d013      	beq.n	800a7e6 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a1f      	ldr	r2, [pc, #124]	; (800a840 <HAL_TIM_IC_ConfigChannel+0x358>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00e      	beq.n	800a7e6 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a1d      	ldr	r2, [pc, #116]	; (800a844 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d009      	beq.n	800a7e6 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a1c      	ldr	r2, [pc, #112]	; (800a848 <HAL_TIM_IC_ConfigChannel+0x360>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d004      	beq.n	800a7e6 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a7dc:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800a7e0:	481a      	ldr	r0, [pc, #104]	; (800a84c <HAL_TIM_IC_ConfigChannel+0x364>)
 800a7e2:	f7f8 feb6 	bl	8003552 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6819      	ldr	r1, [r3, #0]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	f001 f9a9 	bl	800bb4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	69da      	ldr	r2, [r3, #28]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a808:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69d9      	ldr	r1, [r3, #28]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	021a      	lsls	r2, r3, #8
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	40010000 	.word	0x40010000
 800a83c:	40000400 	.word	0x40000400
 800a840:	40000800 	.word	0x40000800
 800a844:	40000c00 	.word	0x40000c00
 800a848:	40010400 	.word	0x40010400
 800a84c:	0800fabc 	.word	0x0800fabc

0800a850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d010      	beq.n	800a884 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b04      	cmp	r3, #4
 800a866:	d00d      	beq.n	800a884 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	d00a      	beq.n	800a884 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b0c      	cmp	r3, #12
 800a872:	d007      	beq.n	800a884 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b3c      	cmp	r3, #60	; 0x3c
 800a878:	d004      	beq.n	800a884 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a87a:	f640 51ec 	movw	r1, #3564	; 0xdec
 800a87e:	4885      	ldr	r0, [pc, #532]	; (800aa94 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a880:	f7f8 fe67 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b60      	cmp	r3, #96	; 0x60
 800a88a:	d008      	beq.n	800a89e <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b70      	cmp	r3, #112	; 0x70
 800a892:	d004      	beq.n	800a89e <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a894:	f640 51ed 	movw	r1, #3565	; 0xded
 800a898:	487e      	ldr	r0, [pc, #504]	; (800aa94 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a89a:	f7f8 fe5a 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d008      	beq.n	800a8b8 <HAL_TIM_PWM_ConfigChannel+0x68>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d004      	beq.n	800a8b8 <HAL_TIM_PWM_ConfigChannel+0x68>
 800a8ae:	f640 51ee 	movw	r1, #3566	; 0xdee
 800a8b2:	4878      	ldr	r0, [pc, #480]	; (800aa94 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a8b4:	f7f8 fe4d 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d008      	beq.n	800a8d2 <HAL_TIM_PWM_ConfigChannel+0x82>
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d004      	beq.n	800a8d2 <HAL_TIM_PWM_ConfigChannel+0x82>
 800a8c8:	f640 51ef 	movw	r1, #3567	; 0xdef
 800a8cc:	4871      	ldr	r0, [pc, #452]	; (800aa94 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a8ce:	f7f8 fe40 	bl	8003552 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_TIM_PWM_ConfigChannel+0x90>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e182      	b.n	800abe6 <HAL_TIM_PWM_ConfigChannel+0x396>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b0c      	cmp	r3, #12
 800a8f4:	f200 816d 	bhi.w	800abd2 <HAL_TIM_PWM_ConfigChannel+0x382>
 800a8f8:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800a8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fe:	bf00      	nop
 800a900:	0800a935 	.word	0x0800a935
 800a904:	0800abd3 	.word	0x0800abd3
 800a908:	0800abd3 	.word	0x0800abd3
 800a90c:	0800abd3 	.word	0x0800abd3
 800a910:	0800a9f7 	.word	0x0800a9f7
 800a914:	0800abd3 	.word	0x0800abd3
 800a918:	0800abd3 	.word	0x0800abd3
 800a91c:	0800abd3 	.word	0x0800abd3
 800a920:	0800aac5 	.word	0x0800aac5
 800a924:	0800abd3 	.word	0x0800abd3
 800a928:	0800abd3 	.word	0x0800abd3
 800a92c:	0800abd3 	.word	0x0800abd3
 800a930:	0800ab4b 	.word	0x0800ab4b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a57      	ldr	r2, [pc, #348]	; (800aa98 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d03b      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a946:	d036      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a53      	ldr	r2, [pc, #332]	; (800aa9c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d031      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a52      	ldr	r2, [pc, #328]	; (800aaa0 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d02c      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a50      	ldr	r2, [pc, #320]	; (800aaa4 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d027      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a4f      	ldr	r2, [pc, #316]	; (800aaa8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d022      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a4d      	ldr	r2, [pc, #308]	; (800aaac <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d01d      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a4c      	ldr	r2, [pc, #304]	; (800aab0 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d018      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a4a      	ldr	r2, [pc, #296]	; (800aab4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d013      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a49      	ldr	r2, [pc, #292]	; (800aab8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00e      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a47      	ldr	r2, [pc, #284]	; (800aabc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d009      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a46      	ldr	r2, [pc, #280]	; (800aac0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d004      	beq.n	800a9b6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a9ac:	f640 51fb 	movw	r1, #3579	; 0xdfb
 800a9b0:	4838      	ldr	r0, [pc, #224]	; (800aa94 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a9b2:	f7f8 fdce 	bl	8003552 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fd3f 	bl	800b440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	699a      	ldr	r2, [r3, #24]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0208 	orr.w	r2, r2, #8
 800a9d0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0204 	bic.w	r2, r2, #4
 800a9e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6999      	ldr	r1, [r3, #24]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	691a      	ldr	r2, [r3, #16]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	619a      	str	r2, [r3, #24]
      break;
 800a9f4:	e0ee      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a27      	ldr	r2, [pc, #156]	; (800aa98 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d027      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa08:	d022      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a23      	ldr	r2, [pc, #140]	; (800aa9c <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d01d      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a21      	ldr	r2, [pc, #132]	; (800aaa0 <HAL_TIM_PWM_ConfigChannel+0x250>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d018      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a20      	ldr	r2, [pc, #128]	; (800aaa4 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d013      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a1e      	ldr	r2, [pc, #120]	; (800aaa8 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d00e      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1d      	ldr	r2, [pc, #116]	; (800aaac <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d009      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1d      	ldr	r2, [pc, #116]	; (800aab8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d004      	beq.n	800aa50 <HAL_TIM_PWM_ConfigChannel+0x200>
 800aa46:	f640 610c 	movw	r1, #3596	; 0xe0c
 800aa4a:	4812      	ldr	r0, [pc, #72]	; (800aa94 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800aa4c:	f7f8 fd81 	bl	8003552 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68b9      	ldr	r1, [r7, #8]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fd8c 	bl	800b574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	699a      	ldr	r2, [r3, #24]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699a      	ldr	r2, [r3, #24]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6999      	ldr	r1, [r3, #24]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	021a      	lsls	r2, r3, #8
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	619a      	str	r2, [r3, #24]
      break;
 800aa90:	e0a0      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x384>
 800aa92:	bf00      	nop
 800aa94:	0800fabc 	.word	0x0800fabc
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	40000400 	.word	0x40000400
 800aaa0:	40000800 	.word	0x40000800
 800aaa4:	40000c00 	.word	0x40000c00
 800aaa8:	40010400 	.word	0x40010400
 800aaac:	40014000 	.word	0x40014000
 800aab0:	40014400 	.word	0x40014400
 800aab4:	40014800 	.word	0x40014800
 800aab8:	40001800 	.word	0x40001800
 800aabc:	40001c00 	.word	0x40001c00
 800aac0:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a49      	ldr	r2, [pc, #292]	; (800abf0 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d01d      	beq.n	800ab0a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad6:	d018      	beq.n	800ab0a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a45      	ldr	r2, [pc, #276]	; (800abf4 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d013      	beq.n	800ab0a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a44      	ldr	r2, [pc, #272]	; (800abf8 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00e      	beq.n	800ab0a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a42      	ldr	r2, [pc, #264]	; (800abfc <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d009      	beq.n	800ab0a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a41      	ldr	r2, [pc, #260]	; (800ac00 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d004      	beq.n	800ab0a <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800ab00:	f640 611d 	movw	r1, #3613	; 0xe1d
 800ab04:	483f      	ldr	r0, [pc, #252]	; (800ac04 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800ab06:	f7f8 fd24 	bl	8003552 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f000 fdcd 	bl	800b6b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69da      	ldr	r2, [r3, #28]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0208 	orr.w	r2, r2, #8
 800ab24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69da      	ldr	r2, [r3, #28]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f022 0204 	bic.w	r2, r2, #4
 800ab34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69d9      	ldr	r1, [r3, #28]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	691a      	ldr	r2, [r3, #16]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	430a      	orrs	r2, r1
 800ab46:	61da      	str	r2, [r3, #28]
      break;
 800ab48:	e044      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a28      	ldr	r2, [pc, #160]	; (800abf0 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d01d      	beq.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab5c:	d018      	beq.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a24      	ldr	r2, [pc, #144]	; (800abf4 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d013      	beq.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a22      	ldr	r2, [pc, #136]	; (800abf8 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d00e      	beq.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a21      	ldr	r2, [pc, #132]	; (800abfc <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d009      	beq.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a1f      	ldr	r2, [pc, #124]	; (800ac00 <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d004      	beq.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x340>
 800ab86:	f640 612e 	movw	r1, #3630	; 0xe2e
 800ab8a:	481e      	ldr	r0, [pc, #120]	; (800ac04 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800ab8c:	f7f8 fce1 	bl	8003552 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 fe28 	bl	800b7ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69da      	ldr	r2, [r3, #28]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abaa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	69da      	ldr	r2, [r3, #28]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	69d9      	ldr	r1, [r3, #28]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	021a      	lsls	r2, r3, #8
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	61da      	str	r2, [r3, #28]
      break;
 800abd0:	e000      	b.n	800abd4 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 800abd2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40010000 	.word	0x40010000
 800abf4:	40000400 	.word	0x40000400
 800abf8:	40000800 	.word	0x40000800
 800abfc:	40000c00 	.word	0x40000c00
 800ac00:	40010400 	.word	0x40010400
 800ac04:	0800fabc 	.word	0x0800fabc

0800ac08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d101      	bne.n	800ac20 <HAL_TIM_ConfigClockSource+0x18>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e35b      	b.n	800b2d8 <HAL_TIM_ConfigClockSource+0x6d0>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac38:	d029      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac42:	d024      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d020      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b10      	cmp	r3, #16
 800ac52:	d01c      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d018      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b30      	cmp	r3, #48	; 0x30
 800ac62:	d014      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d010      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b50      	cmp	r3, #80	; 0x50
 800ac72:	d00c      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b60      	cmp	r3, #96	; 0x60
 800ac7a:	d008      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b70      	cmp	r3, #112	; 0x70
 800ac82:	d004      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0x86>
 800ac84:	f241 118b 	movw	r1, #4491	; 0x118b
 800ac88:	4893      	ldr	r0, [pc, #588]	; (800aed8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ac8a:	f7f8 fc62 	bl	8003552 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac9c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aca4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acb6:	f000 812b 	beq.w	800af10 <HAL_TIM_ConfigClockSource+0x308>
 800acba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acbe:	f200 82ff 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800acc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc6:	d02e      	beq.n	800ad26 <HAL_TIM_ConfigClockSource+0x11e>
 800acc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800accc:	f200 82f8 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800acd0:	2b70      	cmp	r3, #112	; 0x70
 800acd2:	f000 8082 	beq.w	800adda <HAL_TIM_ConfigClockSource+0x1d2>
 800acd6:	2b70      	cmp	r3, #112	; 0x70
 800acd8:	f200 82f2 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800acdc:	2b60      	cmp	r3, #96	; 0x60
 800acde:	f000 81e8 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x4aa>
 800ace2:	2b60      	cmp	r3, #96	; 0x60
 800ace4:	f200 82ec 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800ace8:	2b50      	cmp	r3, #80	; 0x50
 800acea:	f000 8182 	beq.w	800aff2 <HAL_TIM_ConfigClockSource+0x3ea>
 800acee:	2b50      	cmp	r3, #80	; 0x50
 800acf0:	f200 82e6 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800acf4:	2b40      	cmp	r3, #64	; 0x40
 800acf6:	f000 824d 	beq.w	800b194 <HAL_TIM_ConfigClockSource+0x58c>
 800acfa:	2b40      	cmp	r3, #64	; 0x40
 800acfc:	f200 82e0 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad00:	2b30      	cmp	r3, #48	; 0x30
 800ad02:	f000 82a7 	beq.w	800b254 <HAL_TIM_ConfigClockSource+0x64c>
 800ad06:	2b30      	cmp	r3, #48	; 0x30
 800ad08:	f200 82da 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad0c:	2b20      	cmp	r3, #32
 800ad0e:	f000 82a1 	beq.w	800b254 <HAL_TIM_ConfigClockSource+0x64c>
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	f200 82d4 	bhi.w	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 829b 	beq.w	800b254 <HAL_TIM_ConfigClockSource+0x64c>
 800ad1e:	2b10      	cmp	r3, #16
 800ad20:	f000 8298 	beq.w	800b254 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ad24:	e2cc      	b.n	800b2c0 <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a6c      	ldr	r2, [pc, #432]	; (800aedc <HAL_TIM_ConfigClockSource+0x2d4>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	f000 82c9 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3a:	f000 82c3 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a67      	ldr	r2, [pc, #412]	; (800aee0 <HAL_TIM_ConfigClockSource+0x2d8>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	f000 82bd 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a65      	ldr	r2, [pc, #404]	; (800aee4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	f000 82b7 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a63      	ldr	r2, [pc, #396]	; (800aee8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	f000 82b1 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a61      	ldr	r2, [pc, #388]	; (800aeec <HAL_TIM_ConfigClockSource+0x2e4>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	f000 82ab 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a5f      	ldr	r2, [pc, #380]	; (800aef0 <HAL_TIM_ConfigClockSource+0x2e8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	f000 82a5 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a5d      	ldr	r2, [pc, #372]	; (800aef4 <HAL_TIM_ConfigClockSource+0x2ec>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	f000 829f 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a5b      	ldr	r2, [pc, #364]	; (800aef8 <HAL_TIM_ConfigClockSource+0x2f0>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	f000 8299 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a59      	ldr	r2, [pc, #356]	; (800aefc <HAL_TIM_ConfigClockSource+0x2f4>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	f000 8293 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a57      	ldr	r2, [pc, #348]	; (800af00 <HAL_TIM_ConfigClockSource+0x2f8>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	f000 828d 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a55      	ldr	r2, [pc, #340]	; (800af04 <HAL_TIM_ConfigClockSource+0x2fc>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	f000 8287 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a53      	ldr	r2, [pc, #332]	; (800af08 <HAL_TIM_ConfigClockSource+0x300>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	f000 8281 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a51      	ldr	r2, [pc, #324]	; (800af0c <HAL_TIM_ConfigClockSource+0x304>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	f000 827b 	beq.w	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
 800adce:	f241 1197 	movw	r1, #4503	; 0x1197
 800add2:	4841      	ldr	r0, [pc, #260]	; (800aed8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800add4:	f7f8 fbbd 	bl	8003552 <assert_failed>
      break;
 800add8:	e274      	b.n	800b2c4 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a3f      	ldr	r2, [pc, #252]	; (800aedc <HAL_TIM_ConfigClockSource+0x2d4>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d027      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adec:	d022      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a3b      	ldr	r2, [pc, #236]	; (800aee0 <HAL_TIM_ConfigClockSource+0x2d8>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d01d      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a39      	ldr	r2, [pc, #228]	; (800aee4 <HAL_TIM_ConfigClockSource+0x2dc>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d018      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a38      	ldr	r2, [pc, #224]	; (800aee8 <HAL_TIM_ConfigClockSource+0x2e0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d013      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a38      	ldr	r2, [pc, #224]	; (800aef4 <HAL_TIM_ConfigClockSource+0x2ec>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d00e      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a37      	ldr	r2, [pc, #220]	; (800aef8 <HAL_TIM_ConfigClockSource+0x2f0>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d009      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a37      	ldr	r2, [pc, #220]	; (800af04 <HAL_TIM_ConfigClockSource+0x2fc>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d004      	beq.n	800ae34 <HAL_TIM_ConfigClockSource+0x22c>
 800ae2a:	f241 119e 	movw	r1, #4510	; 0x119e
 800ae2e:	482a      	ldr	r0, [pc, #168]	; (800aed8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ae30:	f7f8 fb8f 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d013      	beq.n	800ae64 <HAL_TIM_ConfigClockSource+0x25c>
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae44:	d00e      	beq.n	800ae64 <HAL_TIM_ConfigClockSource+0x25c>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae4e:	d009      	beq.n	800ae64 <HAL_TIM_ConfigClockSource+0x25c>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae58:	d004      	beq.n	800ae64 <HAL_TIM_ConfigClockSource+0x25c>
 800ae5a:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800ae5e:	481e      	ldr	r0, [pc, #120]	; (800aed8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ae60:	f7f8 fb77 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae6c:	d014      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0x290>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d010      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0x290>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00c      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0x290>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d008      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0x290>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	2b0a      	cmp	r3, #10
 800ae8c:	d004      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0x290>
 800ae8e:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800ae92:	4811      	ldr	r0, [pc, #68]	; (800aed8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800ae94:	f7f8 fb5d 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	2b0f      	cmp	r3, #15
 800ae9e:	d904      	bls.n	800aeaa <HAL_TIM_ConfigClockSource+0x2a2>
 800aea0:	f241 11a3 	movw	r1, #4515	; 0x11a3
 800aea4:	480c      	ldr	r0, [pc, #48]	; (800aed8 <HAL_TIM_ConfigClockSource+0x2d0>)
 800aea6:	f7f8 fb54 	bl	8003552 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	6899      	ldr	r1, [r3, #8]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f000 fe9f 	bl	800bbfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aecc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	609a      	str	r2, [r3, #8]
      break;
 800aed6:	e1f6      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
 800aed8:	0800fabc 	.word	0x0800fabc
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40001000 	.word	0x40001000
 800aef0:	40001400 	.word	0x40001400
 800aef4:	40010400 	.word	0x40010400
 800aef8:	40014000 	.word	0x40014000
 800aefc:	40014400 	.word	0x40014400
 800af00:	40014800 	.word	0x40014800
 800af04:	40001800 	.word	0x40001800
 800af08:	40001c00 	.word	0x40001c00
 800af0c:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a97      	ldr	r2, [pc, #604]	; (800b174 <HAL_TIM_ConfigClockSource+0x56c>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d01d      	beq.n	800af56 <HAL_TIM_ConfigClockSource+0x34e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af22:	d018      	beq.n	800af56 <HAL_TIM_ConfigClockSource+0x34e>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a93      	ldr	r2, [pc, #588]	; (800b178 <HAL_TIM_ConfigClockSource+0x570>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d013      	beq.n	800af56 <HAL_TIM_ConfigClockSource+0x34e>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a92      	ldr	r2, [pc, #584]	; (800b17c <HAL_TIM_ConfigClockSource+0x574>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00e      	beq.n	800af56 <HAL_TIM_ConfigClockSource+0x34e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a90      	ldr	r2, [pc, #576]	; (800b180 <HAL_TIM_ConfigClockSource+0x578>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d009      	beq.n	800af56 <HAL_TIM_ConfigClockSource+0x34e>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a8f      	ldr	r2, [pc, #572]	; (800b184 <HAL_TIM_ConfigClockSource+0x57c>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d004      	beq.n	800af56 <HAL_TIM_ConfigClockSource+0x34e>
 800af4c:	f241 11b6 	movw	r1, #4534	; 0x11b6
 800af50:	488d      	ldr	r0, [pc, #564]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800af52:	f7f8 fafe 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d013      	beq.n	800af86 <HAL_TIM_ConfigClockSource+0x37e>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af66:	d00e      	beq.n	800af86 <HAL_TIM_ConfigClockSource+0x37e>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af70:	d009      	beq.n	800af86 <HAL_TIM_ConfigClockSource+0x37e>
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af7a:	d004      	beq.n	800af86 <HAL_TIM_ConfigClockSource+0x37e>
 800af7c:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800af80:	4881      	ldr	r0, [pc, #516]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800af82:	f7f8 fae6 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af8e:	d014      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x3b2>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d010      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x3b2>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00c      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x3b2>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d008      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x3b2>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	2b0a      	cmp	r3, #10
 800afae:	d004      	beq.n	800afba <HAL_TIM_ConfigClockSource+0x3b2>
 800afb0:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800afb4:	4874      	ldr	r0, [pc, #464]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800afb6:	f7f8 facc 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	2b0f      	cmp	r3, #15
 800afc0:	d904      	bls.n	800afcc <HAL_TIM_ConfigClockSource+0x3c4>
 800afc2:	f241 11bb 	movw	r1, #4539	; 0x11bb
 800afc6:	4870      	ldr	r0, [pc, #448]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800afc8:	f7f8 fac3 	bl	8003552 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	6899      	ldr	r1, [r3, #8]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f000 fe0e 	bl	800bbfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689a      	ldr	r2, [r3, #8]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afee:	609a      	str	r2, [r3, #8]
      break;
 800aff0:	e169      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a5f      	ldr	r2, [pc, #380]	; (800b174 <HAL_TIM_ConfigClockSource+0x56c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d027      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b004:	d022      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a5b      	ldr	r2, [pc, #364]	; (800b178 <HAL_TIM_ConfigClockSource+0x570>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d01d      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a59      	ldr	r2, [pc, #356]	; (800b17c <HAL_TIM_ConfigClockSource+0x574>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d018      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a58      	ldr	r2, [pc, #352]	; (800b180 <HAL_TIM_ConfigClockSource+0x578>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d013      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a56      	ldr	r2, [pc, #344]	; (800b184 <HAL_TIM_ConfigClockSource+0x57c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00e      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a56      	ldr	r2, [pc, #344]	; (800b18c <HAL_TIM_ConfigClockSource+0x584>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d009      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a54      	ldr	r2, [pc, #336]	; (800b190 <HAL_TIM_ConfigClockSource+0x588>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d004      	beq.n	800b04c <HAL_TIM_ConfigClockSource+0x444>
 800b042:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800b046:	4850      	ldr	r0, [pc, #320]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800b048:	f7f8 fa83 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b054:	d014      	beq.n	800b080 <HAL_TIM_ConfigClockSource+0x478>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d010      	beq.n	800b080 <HAL_TIM_ConfigClockSource+0x478>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00c      	beq.n	800b080 <HAL_TIM_ConfigClockSource+0x478>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d008      	beq.n	800b080 <HAL_TIM_ConfigClockSource+0x478>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	2b0a      	cmp	r3, #10
 800b074:	d004      	beq.n	800b080 <HAL_TIM_ConfigClockSource+0x478>
 800b076:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800b07a:	4843      	ldr	r0, [pc, #268]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800b07c:	f7f8 fa69 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	2b0f      	cmp	r3, #15
 800b086:	d904      	bls.n	800b092 <HAL_TIM_ConfigClockSource+0x48a>
 800b088:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800b08c:	483e      	ldr	r0, [pc, #248]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800b08e:	f7f8 fa60 	bl	8003552 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	6859      	ldr	r1, [r3, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f000 fc7c 	bl	800b99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2150      	movs	r1, #80	; 0x50
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fd8b 	bl	800bbc6 <TIM_ITRx_SetConfig>
      break;
 800b0b0:	e109      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a2f      	ldr	r2, [pc, #188]	; (800b174 <HAL_TIM_ConfigClockSource+0x56c>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d027      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0c4:	d022      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a2b      	ldr	r2, [pc, #172]	; (800b178 <HAL_TIM_ConfigClockSource+0x570>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d01d      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a29      	ldr	r2, [pc, #164]	; (800b17c <HAL_TIM_ConfigClockSource+0x574>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d018      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a28      	ldr	r2, [pc, #160]	; (800b180 <HAL_TIM_ConfigClockSource+0x578>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d013      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a26      	ldr	r2, [pc, #152]	; (800b184 <HAL_TIM_ConfigClockSource+0x57c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d00e      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a26      	ldr	r2, [pc, #152]	; (800b18c <HAL_TIM_ConfigClockSource+0x584>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d009      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a24      	ldr	r2, [pc, #144]	; (800b190 <HAL_TIM_ConfigClockSource+0x588>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d004      	beq.n	800b10c <HAL_TIM_ConfigClockSource+0x504>
 800b102:	f241 11da 	movw	r1, #4570	; 0x11da
 800b106:	4820      	ldr	r0, [pc, #128]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800b108:	f7f8 fa23 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b114:	d014      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x538>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d010      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x538>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00c      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x538>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d008      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x538>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	2b0a      	cmp	r3, #10
 800b134:	d004      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0x538>
 800b136:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800b13a:	4813      	ldr	r0, [pc, #76]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800b13c:	f7f8 fa09 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	2b0f      	cmp	r3, #15
 800b146:	d904      	bls.n	800b152 <HAL_TIM_ConfigClockSource+0x54a>
 800b148:	f241 11de 	movw	r1, #4574	; 0x11de
 800b14c:	480e      	ldr	r0, [pc, #56]	; (800b188 <HAL_TIM_ConfigClockSource+0x580>)
 800b14e:	f7f8 fa00 	bl	8003552 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	6859      	ldr	r1, [r3, #4]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	461a      	mov	r2, r3
 800b160:	f000 fc88 	bl	800ba74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2160      	movs	r1, #96	; 0x60
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 fd2b 	bl	800bbc6 <TIM_ITRx_SetConfig>
      break;
 800b170:	e0a9      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
 800b172:	bf00      	nop
 800b174:	40010000 	.word	0x40010000
 800b178:	40000400 	.word	0x40000400
 800b17c:	40000800 	.word	0x40000800
 800b180:	40000c00 	.word	0x40000c00
 800b184:	40010400 	.word	0x40010400
 800b188:	0800fabc 	.word	0x0800fabc
 800b18c:	40014000 	.word	0x40014000
 800b190:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a51      	ldr	r2, [pc, #324]	; (800b2e0 <HAL_TIM_ConfigClockSource+0x6d8>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d027      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a6:	d022      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a4d      	ldr	r2, [pc, #308]	; (800b2e4 <HAL_TIM_ConfigClockSource+0x6dc>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d01d      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a4c      	ldr	r2, [pc, #304]	; (800b2e8 <HAL_TIM_ConfigClockSource+0x6e0>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d018      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a4a      	ldr	r2, [pc, #296]	; (800b2ec <HAL_TIM_ConfigClockSource+0x6e4>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d013      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a49      	ldr	r2, [pc, #292]	; (800b2f0 <HAL_TIM_ConfigClockSource+0x6e8>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00e      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a47      	ldr	r2, [pc, #284]	; (800b2f4 <HAL_TIM_ConfigClockSource+0x6ec>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d009      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a46      	ldr	r2, [pc, #280]	; (800b2f8 <HAL_TIM_ConfigClockSource+0x6f0>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d004      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x5e6>
 800b1e4:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800b1e8:	4844      	ldr	r0, [pc, #272]	; (800b2fc <HAL_TIM_ConfigClockSource+0x6f4>)
 800b1ea:	f7f8 f9b2 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1f6:	d014      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x61a>
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d010      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x61a>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00c      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x61a>
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d008      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x61a>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	2b0a      	cmp	r3, #10
 800b216:	d004      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x61a>
 800b218:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800b21c:	4837      	ldr	r0, [pc, #220]	; (800b2fc <HAL_TIM_ConfigClockSource+0x6f4>)
 800b21e:	f7f8 f998 	bl	8003552 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	2b0f      	cmp	r3, #15
 800b228:	d904      	bls.n	800b234 <HAL_TIM_ConfigClockSource+0x62c>
 800b22a:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800b22e:	4833      	ldr	r0, [pc, #204]	; (800b2fc <HAL_TIM_ConfigClockSource+0x6f4>)
 800b230:	f7f8 f98f 	bl	8003552 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6818      	ldr	r0, [r3, #0]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	6859      	ldr	r1, [r3, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	461a      	mov	r2, r3
 800b242:	f000 fbab 	bl	800b99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2140      	movs	r1, #64	; 0x40
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 fcba 	bl	800bbc6 <TIM_ITRx_SetConfig>
      break;
 800b252:	e038      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a21      	ldr	r2, [pc, #132]	; (800b2e0 <HAL_TIM_ConfigClockSource+0x6d8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d027      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b266:	d022      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <HAL_TIM_ConfigClockSource+0x6dc>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d01d      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a1c      	ldr	r2, [pc, #112]	; (800b2e8 <HAL_TIM_ConfigClockSource+0x6e0>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d018      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1a      	ldr	r2, [pc, #104]	; (800b2ec <HAL_TIM_ConfigClockSource+0x6e4>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d013      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a19      	ldr	r2, [pc, #100]	; (800b2f0 <HAL_TIM_ConfigClockSource+0x6e8>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00e      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a17      	ldr	r2, [pc, #92]	; (800b2f4 <HAL_TIM_ConfigClockSource+0x6ec>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d009      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a16      	ldr	r2, [pc, #88]	; (800b2f8 <HAL_TIM_ConfigClockSource+0x6f0>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d004      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x6a6>
 800b2a4:	f241 11fd 	movw	r1, #4605	; 0x11fd
 800b2a8:	4814      	ldr	r0, [pc, #80]	; (800b2fc <HAL_TIM_ConfigClockSource+0x6f4>)
 800b2aa:	f7f8 f952 	bl	8003552 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f000 fc84 	bl	800bbc6 <TIM_ITRx_SetConfig>
      break;
 800b2be:	e002      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800b2c0:	bf00      	nop
 800b2c2:	e000      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800b2c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	40010000 	.word	0x40010000
 800b2e4:	40000400 	.word	0x40000400
 800b2e8:	40000800 	.word	0x40000800
 800b2ec:	40000c00 	.word	0x40000c00
 800b2f0:	40010400 	.word	0x40010400
 800b2f4:	40014000 	.word	0x40014000
 800b2f8:	40001800 	.word	0x40001800
 800b2fc:	0800fabc 	.word	0x0800fabc

0800b300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a40      	ldr	r2, [pc, #256]	; (800b414 <TIM_Base_SetConfig+0x114>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d013      	beq.n	800b340 <TIM_Base_SetConfig+0x40>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31e:	d00f      	beq.n	800b340 <TIM_Base_SetConfig+0x40>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a3d      	ldr	r2, [pc, #244]	; (800b418 <TIM_Base_SetConfig+0x118>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00b      	beq.n	800b340 <TIM_Base_SetConfig+0x40>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a3c      	ldr	r2, [pc, #240]	; (800b41c <TIM_Base_SetConfig+0x11c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d007      	beq.n	800b340 <TIM_Base_SetConfig+0x40>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a3b      	ldr	r2, [pc, #236]	; (800b420 <TIM_Base_SetConfig+0x120>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d003      	beq.n	800b340 <TIM_Base_SetConfig+0x40>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a3a      	ldr	r2, [pc, #232]	; (800b424 <TIM_Base_SetConfig+0x124>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d108      	bne.n	800b352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a2f      	ldr	r2, [pc, #188]	; (800b414 <TIM_Base_SetConfig+0x114>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d02b      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b360:	d027      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a2c      	ldr	r2, [pc, #176]	; (800b418 <TIM_Base_SetConfig+0x118>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d023      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a2b      	ldr	r2, [pc, #172]	; (800b41c <TIM_Base_SetConfig+0x11c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d01f      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a2a      	ldr	r2, [pc, #168]	; (800b420 <TIM_Base_SetConfig+0x120>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d01b      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a29      	ldr	r2, [pc, #164]	; (800b424 <TIM_Base_SetConfig+0x124>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d017      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a28      	ldr	r2, [pc, #160]	; (800b428 <TIM_Base_SetConfig+0x128>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d013      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a27      	ldr	r2, [pc, #156]	; (800b42c <TIM_Base_SetConfig+0x12c>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d00f      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a26      	ldr	r2, [pc, #152]	; (800b430 <TIM_Base_SetConfig+0x130>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d00b      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a25      	ldr	r2, [pc, #148]	; (800b434 <TIM_Base_SetConfig+0x134>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d007      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a24      	ldr	r2, [pc, #144]	; (800b438 <TIM_Base_SetConfig+0x138>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d003      	beq.n	800b3b2 <TIM_Base_SetConfig+0xb2>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a23      	ldr	r2, [pc, #140]	; (800b43c <TIM_Base_SetConfig+0x13c>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d108      	bne.n	800b3c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	689a      	ldr	r2, [r3, #8]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a0a      	ldr	r2, [pc, #40]	; (800b414 <TIM_Base_SetConfig+0x114>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d003      	beq.n	800b3f8 <TIM_Base_SetConfig+0xf8>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <TIM_Base_SetConfig+0x124>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d103      	bne.n	800b400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	691a      	ldr	r2, [r3, #16]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	615a      	str	r2, [r3, #20]
}
 800b406:	bf00      	nop
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	40010000 	.word	0x40010000
 800b418:	40000400 	.word	0x40000400
 800b41c:	40000800 	.word	0x40000800
 800b420:	40000c00 	.word	0x40000c00
 800b424:	40010400 	.word	0x40010400
 800b428:	40014000 	.word	0x40014000
 800b42c:	40014400 	.word	0x40014400
 800b430:	40014800 	.word	0x40014800
 800b434:	40001800 	.word	0x40001800
 800b438:	40001c00 	.word	0x40001c00
 800b43c:	40002000 	.word	0x40002000

0800b440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	f023 0201 	bic.w	r2, r3, #1
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0303 	bic.w	r3, r3, #3
 800b476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f023 0302 	bic.w	r3, r3, #2
 800b488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	4313      	orrs	r3, r2
 800b492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a34      	ldr	r2, [pc, #208]	; (800b568 <TIM_OC1_SetConfig+0x128>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_OC1_SetConfig+0x64>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a33      	ldr	r2, [pc, #204]	; (800b56c <TIM_OC1_SetConfig+0x12c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d119      	bne.n	800b4d8 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d008      	beq.n	800b4be <TIM_OC1_SetConfig+0x7e>
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b08      	cmp	r3, #8
 800b4b2:	d004      	beq.n	800b4be <TIM_OC1_SetConfig+0x7e>
 800b4b4:	f241 7102 	movw	r1, #5890	; 0x1702
 800b4b8:	482d      	ldr	r0, [pc, #180]	; (800b570 <TIM_OC1_SetConfig+0x130>)
 800b4ba:	f7f8 f84a 	bl	8003552 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f023 0308 	bic.w	r3, r3, #8
 800b4c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f023 0304 	bic.w	r3, r3, #4
 800b4d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a23      	ldr	r2, [pc, #140]	; (800b568 <TIM_OC1_SetConfig+0x128>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d003      	beq.n	800b4e8 <TIM_OC1_SetConfig+0xa8>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a22      	ldr	r2, [pc, #136]	; (800b56c <TIM_OC1_SetConfig+0x12c>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d12d      	bne.n	800b544 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f0:	d008      	beq.n	800b504 <TIM_OC1_SetConfig+0xc4>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d004      	beq.n	800b504 <TIM_OC1_SetConfig+0xc4>
 800b4fa:	f241 710f 	movw	r1, #5903	; 0x170f
 800b4fe:	481c      	ldr	r0, [pc, #112]	; (800b570 <TIM_OC1_SetConfig+0x130>)
 800b500:	f7f8 f827 	bl	8003552 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50c:	d008      	beq.n	800b520 <TIM_OC1_SetConfig+0xe0>
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d004      	beq.n	800b520 <TIM_OC1_SetConfig+0xe0>
 800b516:	f241 7110 	movw	r1, #5904	; 0x1710
 800b51a:	4815      	ldr	r0, [pc, #84]	; (800b570 <TIM_OC1_SetConfig+0x130>)
 800b51c:	f7f8 f819 	bl	8003552 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b52e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	4313      	orrs	r3, r2
 800b542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	621a      	str	r2, [r3, #32]
}
 800b55e:	bf00      	nop
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	40010000 	.word	0x40010000
 800b56c:	40010400 	.word	0x40010400
 800b570:	0800fabc 	.word	0x0800fabc

0800b574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	f023 0210 	bic.w	r2, r3, #16
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	021b      	lsls	r3, r3, #8
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f023 0320 	bic.w	r3, r3, #32
 800b5be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a35      	ldr	r2, [pc, #212]	; (800b6a4 <TIM_OC2_SetConfig+0x130>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_OC2_SetConfig+0x68>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a34      	ldr	r2, [pc, #208]	; (800b6a8 <TIM_OC2_SetConfig+0x134>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d11a      	bne.n	800b612 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d008      	beq.n	800b5f6 <TIM_OC2_SetConfig+0x82>
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	2b08      	cmp	r3, #8
 800b5ea:	d004      	beq.n	800b5f6 <TIM_OC2_SetConfig+0x82>
 800b5ec:	f241 714d 	movw	r1, #5965	; 0x174d
 800b5f0:	482e      	ldr	r0, [pc, #184]	; (800b6ac <TIM_OC2_SetConfig+0x138>)
 800b5f2:	f7f7 ffae 	bl	8003552 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	4313      	orrs	r3, r2
 800b608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b610:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a23      	ldr	r2, [pc, #140]	; (800b6a4 <TIM_OC2_SetConfig+0x130>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d003      	beq.n	800b622 <TIM_OC2_SetConfig+0xae>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a22      	ldr	r2, [pc, #136]	; (800b6a8 <TIM_OC2_SetConfig+0x134>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d12f      	bne.n	800b682 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	699b      	ldr	r3, [r3, #24]
 800b626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62a:	d008      	beq.n	800b63e <TIM_OC2_SetConfig+0xca>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <TIM_OC2_SetConfig+0xca>
 800b634:	f241 715b 	movw	r1, #5979	; 0x175b
 800b638:	481c      	ldr	r0, [pc, #112]	; (800b6ac <TIM_OC2_SetConfig+0x138>)
 800b63a:	f7f7 ff8a 	bl	8003552 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b646:	d008      	beq.n	800b65a <TIM_OC2_SetConfig+0xe6>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d004      	beq.n	800b65a <TIM_OC2_SetConfig+0xe6>
 800b650:	f241 715c 	movw	r1, #5980	; 0x175c
 800b654:	4815      	ldr	r0, [pc, #84]	; (800b6ac <TIM_OC2_SetConfig+0x138>)
 800b656:	f7f7 ff7c 	bl	8003552 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	4313      	orrs	r3, r2
 800b674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	4313      	orrs	r3, r2
 800b680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	621a      	str	r2, [r3, #32]
}
 800b69c:	bf00      	nop
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	40010000 	.word	0x40010000
 800b6a8:	40010400 	.word	0x40010400
 800b6ac:	0800fabc 	.word	0x0800fabc

0800b6b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a1b      	ldr	r3, [r3, #32]
 800b6ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f023 0303 	bic.w	r3, r3, #3
 800b6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	021b      	lsls	r3, r3, #8
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	4313      	orrs	r3, r2
 800b704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a35      	ldr	r2, [pc, #212]	; (800b7e0 <TIM_OC3_SetConfig+0x130>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d003      	beq.n	800b716 <TIM_OC3_SetConfig+0x66>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a34      	ldr	r2, [pc, #208]	; (800b7e4 <TIM_OC3_SetConfig+0x134>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d11a      	bne.n	800b74c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d008      	beq.n	800b730 <TIM_OC3_SetConfig+0x80>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	2b08      	cmp	r3, #8
 800b724:	d004      	beq.n	800b730 <TIM_OC3_SetConfig+0x80>
 800b726:	f241 7198 	movw	r1, #6040	; 0x1798
 800b72a:	482f      	ldr	r0, [pc, #188]	; (800b7e8 <TIM_OC3_SetConfig+0x138>)
 800b72c:	f7f7 ff11 	bl	8003552 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	4313      	orrs	r3, r2
 800b742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b74a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a24      	ldr	r2, [pc, #144]	; (800b7e0 <TIM_OC3_SetConfig+0x130>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d003      	beq.n	800b75c <TIM_OC3_SetConfig+0xac>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a23      	ldr	r2, [pc, #140]	; (800b7e4 <TIM_OC3_SetConfig+0x134>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d12f      	bne.n	800b7bc <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b764:	d008      	beq.n	800b778 <TIM_OC3_SetConfig+0xc8>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d004      	beq.n	800b778 <TIM_OC3_SetConfig+0xc8>
 800b76e:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800b772:	481d      	ldr	r0, [pc, #116]	; (800b7e8 <TIM_OC3_SetConfig+0x138>)
 800b774:	f7f7 feed 	bl	8003552 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	695b      	ldr	r3, [r3, #20]
 800b77c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b780:	d008      	beq.n	800b794 <TIM_OC3_SetConfig+0xe4>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d004      	beq.n	800b794 <TIM_OC3_SetConfig+0xe4>
 800b78a:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800b78e:	4816      	ldr	r0, [pc, #88]	; (800b7e8 <TIM_OC3_SetConfig+0x138>)
 800b790:	f7f7 fedf 	bl	8003552 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b79a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	621a      	str	r2, [r3, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	40010000 	.word	0x40010000
 800b7e4:	40010400 	.word	0x40010400
 800b7e8:	0800fabc 	.word	0x0800fabc

0800b7ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	021b      	lsls	r3, r3, #8
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	031b      	lsls	r3, r3, #12
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	4313      	orrs	r3, r2
 800b842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a18      	ldr	r2, [pc, #96]	; (800b8a8 <TIM_OC4_SetConfig+0xbc>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d003      	beq.n	800b854 <TIM_OC4_SetConfig+0x68>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a17      	ldr	r2, [pc, #92]	; (800b8ac <TIM_OC4_SetConfig+0xc0>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d117      	bne.n	800b884 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85c:	d008      	beq.n	800b870 <TIM_OC4_SetConfig+0x84>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d004      	beq.n	800b870 <TIM_OC4_SetConfig+0x84>
 800b866:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800b86a:	4811      	ldr	r0, [pc, #68]	; (800b8b0 <TIM_OC4_SetConfig+0xc4>)
 800b86c:	f7f7 fe71 	bl	8003552 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	019b      	lsls	r3, r3, #6
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	621a      	str	r2, [r3, #32]
}
 800b89e:	bf00      	nop
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	40010000 	.word	0x40010000
 800b8ac:	40010400 	.word	0x40010400
 800b8b0:	0800fabc 	.word	0x0800fabc

0800b8b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	f023 0201 	bic.w	r2, r3, #1
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4a28      	ldr	r2, [pc, #160]	; (800b980 <TIM_TI1_SetConfig+0xcc>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d01b      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e8:	d017      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	4a25      	ldr	r2, [pc, #148]	; (800b984 <TIM_TI1_SetConfig+0xd0>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d013      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4a24      	ldr	r2, [pc, #144]	; (800b988 <TIM_TI1_SetConfig+0xd4>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d00f      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4a23      	ldr	r2, [pc, #140]	; (800b98c <TIM_TI1_SetConfig+0xd8>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d00b      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4a22      	ldr	r2, [pc, #136]	; (800b990 <TIM_TI1_SetConfig+0xdc>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d007      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	4a21      	ldr	r2, [pc, #132]	; (800b994 <TIM_TI1_SetConfig+0xe0>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d003      	beq.n	800b91a <TIM_TI1_SetConfig+0x66>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4a20      	ldr	r2, [pc, #128]	; (800b998 <TIM_TI1_SetConfig+0xe4>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d101      	bne.n	800b91e <TIM_TI1_SetConfig+0x6a>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e000      	b.n	800b920 <TIM_TI1_SetConfig+0x6c>
 800b91e:	2300      	movs	r3, #0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d008      	beq.n	800b936 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	f023 0303 	bic.w	r3, r3, #3
 800b92a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4313      	orrs	r3, r2
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e003      	b.n	800b93e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f043 0301 	orr.w	r3, r3, #1
 800b93c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	4313      	orrs	r3, r2
 800b950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f023 030a 	bic.w	r3, r3, #10
 800b958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f003 030a 	and.w	r3, r3, #10
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	621a      	str	r2, [r3, #32]
}
 800b972:	bf00      	nop
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	40010000 	.word	0x40010000
 800b984:	40000400 	.word	0x40000400
 800b988:	40000800 	.word	0x40000800
 800b98c:	40000c00 	.word	0x40000c00
 800b990:	40010400 	.word	0x40010400
 800b994:	40014000 	.word	0x40014000
 800b998:	40001800 	.word	0x40001800

0800b99c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	f023 0201 	bic.w	r2, r3, #1
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f023 030a 	bic.w	r3, r3, #10
 800b9d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	693a      	ldr	r2, [r7, #16]
 800b9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	621a      	str	r2, [r3, #32]
}
 800b9ee:	bf00      	nop
 800b9f0:	371c      	adds	r7, #28
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b087      	sub	sp, #28
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	f023 0210 	bic.w	r2, r3, #16
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	031b      	lsls	r3, r3, #12
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	621a      	str	r2, [r3, #32]
}
 800ba68:	bf00      	nop
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	f023 0210 	bic.w	r2, r3, #16
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	031b      	lsls	r3, r3, #12
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	011b      	lsls	r3, r3, #4
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	4313      	orrs	r3, r2
 800baba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	621a      	str	r2, [r3, #32]
}
 800bac8:	bf00      	nop
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b087      	sub	sp, #28
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bb24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	021b      	lsls	r3, r3, #8
 800bb2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	621a      	str	r2, [r3, #32]
}
 800bb40:	bf00      	nop
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	031b      	lsls	r3, r3, #12
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bb9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	031b      	lsls	r3, r3, #12
 800bba4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	621a      	str	r2, [r3, #32]
}
 800bbba:	bf00      	nop
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b085      	sub	sp, #20
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	f043 0307 	orr.w	r3, r3, #7
 800bbe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	609a      	str	r2, [r3, #8]
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	021a      	lsls	r2, r3, #8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	609a      	str	r2, [r3, #8]
}
 800bc30:	bf00      	nop
 800bc32:	371c      	adds	r7, #28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4a32      	ldr	r2, [pc, #200]	; (800bd14 <TIM_CCxChannelCmd+0xd8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d030      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc56:	d02c      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a2f      	ldr	r2, [pc, #188]	; (800bd18 <TIM_CCxChannelCmd+0xdc>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d028      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4a2e      	ldr	r2, [pc, #184]	; (800bd1c <TIM_CCxChannelCmd+0xe0>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d024      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4a2d      	ldr	r2, [pc, #180]	; (800bd20 <TIM_CCxChannelCmd+0xe4>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d020      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4a2c      	ldr	r2, [pc, #176]	; (800bd24 <TIM_CCxChannelCmd+0xe8>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d01c      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4a2b      	ldr	r2, [pc, #172]	; (800bd28 <TIM_CCxChannelCmd+0xec>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d018      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	4a2a      	ldr	r2, [pc, #168]	; (800bd2c <TIM_CCxChannelCmd+0xf0>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d014      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4a29      	ldr	r2, [pc, #164]	; (800bd30 <TIM_CCxChannelCmd+0xf4>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d010      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4a28      	ldr	r2, [pc, #160]	; (800bd34 <TIM_CCxChannelCmd+0xf8>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00c      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4a27      	ldr	r2, [pc, #156]	; (800bd38 <TIM_CCxChannelCmd+0xfc>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d008      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a26      	ldr	r2, [pc, #152]	; (800bd3c <TIM_CCxChannelCmd+0x100>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d004      	beq.n	800bcb2 <TIM_CCxChannelCmd+0x76>
 800bca8:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800bcac:	4824      	ldr	r0, [pc, #144]	; (800bd40 <TIM_CCxChannelCmd+0x104>)
 800bcae:	f7f7 fc50 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d010      	beq.n	800bcda <TIM_CCxChannelCmd+0x9e>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d00d      	beq.n	800bcda <TIM_CCxChannelCmd+0x9e>
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	2b08      	cmp	r3, #8
 800bcc2:	d00a      	beq.n	800bcda <TIM_CCxChannelCmd+0x9e>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b0c      	cmp	r3, #12
 800bcc8:	d007      	beq.n	800bcda <TIM_CCxChannelCmd+0x9e>
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	2b3c      	cmp	r3, #60	; 0x3c
 800bcce:	d004      	beq.n	800bcda <TIM_CCxChannelCmd+0x9e>
 800bcd0:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800bcd4:	481a      	ldr	r0, [pc, #104]	; (800bd40 <TIM_CCxChannelCmd+0x104>)
 800bcd6:	f7f7 fc3c 	bl	8003552 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f003 031f 	and.w	r3, r3, #31
 800bce0:	2201      	movs	r2, #1
 800bce2:	fa02 f303 	lsl.w	r3, r2, r3
 800bce6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6a1a      	ldr	r2, [r3, #32]
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	43db      	mvns	r3, r3
 800bcf0:	401a      	ands	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6a1a      	ldr	r2, [r3, #32]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f003 031f 	and.w	r3, r3, #31
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	fa01 f303 	lsl.w	r3, r1, r3
 800bd06:	431a      	orrs	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	621a      	str	r2, [r3, #32]
}
 800bd0c:	bf00      	nop
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	40010000 	.word	0x40010000
 800bd18:	40000400 	.word	0x40000400
 800bd1c:	40000800 	.word	0x40000800
 800bd20:	40000c00 	.word	0x40000c00
 800bd24:	40010400 	.word	0x40010400
 800bd28:	40014000 	.word	0x40014000
 800bd2c:	40014400 	.word	0x40014400
 800bd30:	40014800 	.word	0x40014800
 800bd34:	40001800 	.word	0x40001800
 800bd38:	40001c00 	.word	0x40001c00
 800bd3c:	40002000 	.word	0x40002000
 800bd40:	0800fabc 	.word	0x0800fabc

0800bd44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a61      	ldr	r2, [pc, #388]	; (800bed8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d027      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd60:	d022      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a5d      	ldr	r2, [pc, #372]	; (800bedc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d01d      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a5b      	ldr	r2, [pc, #364]	; (800bee0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d018      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a5a      	ldr	r2, [pc, #360]	; (800bee4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d013      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a58      	ldr	r2, [pc, #352]	; (800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d00e      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a57      	ldr	r2, [pc, #348]	; (800beec <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d009      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a55      	ldr	r2, [pc, #340]	; (800bef0 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d004      	beq.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bd9e:	f240 6164 	movw	r1, #1636	; 0x664
 800bda2:	4854      	ldr	r0, [pc, #336]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800bda4:	f7f7 fbd5 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d020      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b10      	cmp	r3, #16
 800bdb6:	d01c      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b20      	cmp	r3, #32
 800bdbe:	d018      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b30      	cmp	r3, #48	; 0x30
 800bdc6:	d014      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b40      	cmp	r3, #64	; 0x40
 800bdce:	d010      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b50      	cmp	r3, #80	; 0x50
 800bdd6:	d00c      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b60      	cmp	r3, #96	; 0x60
 800bdde:	d008      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b70      	cmp	r3, #112	; 0x70
 800bde6:	d004      	beq.n	800bdf2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800bde8:	f240 6165 	movw	r1, #1637	; 0x665
 800bdec:	4841      	ldr	r0, [pc, #260]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800bdee:	f7f7 fbb0 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b80      	cmp	r3, #128	; 0x80
 800bdf8:	d008      	beq.n	800be0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d004      	beq.n	800be0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be02:	f240 6166 	movw	r1, #1638	; 0x666
 800be06:	483b      	ldr	r0, [pc, #236]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800be08:	f7f7 fba3 	bl	8003552 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be12:	2b01      	cmp	r3, #1
 800be14:	d101      	bne.n	800be1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be16:	2302      	movs	r3, #2
 800be18:	e05a      	b.n	800bed0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2202      	movs	r2, #2
 800be26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	4313      	orrs	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a1f      	ldr	r2, [pc, #124]	; (800bed8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d022      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be66:	d01d      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a1b      	ldr	r2, [pc, #108]	; (800bedc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d018      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a1a      	ldr	r2, [pc, #104]	; (800bee0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d013      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a18      	ldr	r2, [pc, #96]	; (800bee4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d00e      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a19      	ldr	r2, [pc, #100]	; (800bef0 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d009      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a18      	ldr	r2, [pc, #96]	; (800bef8 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d004      	beq.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a17      	ldr	r2, [pc, #92]	; (800befc <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d10c      	bne.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	40010000 	.word	0x40010000
 800bedc:	40000400 	.word	0x40000400
 800bee0:	40000800 	.word	0x40000800
 800bee4:	40000c00 	.word	0x40000c00
 800bee8:	40001000 	.word	0x40001000
 800beec:	40001400 	.word	0x40001400
 800bef0:	40010400 	.word	0x40010400
 800bef4:	0800faf4 	.word	0x0800faf4
 800bef8:	40014000 	.word	0x40014000
 800befc:	40001800 	.word	0x40001800

0800bf00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a5e      	ldr	r2, [pc, #376]	; (800c08c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d009      	beq.n	800bf2c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a5c      	ldr	r2, [pc, #368]	; (800c090 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d004      	beq.n	800bf2c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800bf22:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800bf26:	485b      	ldr	r0, [pc, #364]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bf28:	f7f7 fb13 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf34:	d008      	beq.n	800bf48 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d004      	beq.n	800bf48 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800bf3e:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800bf42:	4854      	ldr	r0, [pc, #336]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bf44:	f7f7 fb05 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf50:	d008      	beq.n	800bf64 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d004      	beq.n	800bf64 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800bf5a:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800bf5e:	484d      	ldr	r0, [pc, #308]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bf60:	f7f7 faf7 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d013      	beq.n	800bf94 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf74:	d00e      	beq.n	800bf94 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf7e:	d009      	beq.n	800bf94 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf88:	d004      	beq.n	800bf94 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800bf8a:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800bf8e:	4841      	ldr	r0, [pc, #260]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bf90:	f7f7 fadf 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	2bff      	cmp	r3, #255	; 0xff
 800bf9a:	d904      	bls.n	800bfa6 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800bf9c:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800bfa0:	483c      	ldr	r0, [pc, #240]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bfa2:	f7f7 fad6 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfae:	d008      	beq.n	800bfc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bfb8:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800bfbc:	4835      	ldr	r0, [pc, #212]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bfbe:	f7f7 fac8 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d009      	beq.n	800bfde <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfd2:	d004      	beq.n	800bfde <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800bfd4:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800bfd8:	482e      	ldr	r0, [pc, #184]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bfda:	f7f7 faba 	bl	8003552 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe6:	d008      	beq.n	800bffa <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	69db      	ldr	r3, [r3, #28]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d004      	beq.n	800bffa <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800bff0:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800bff4:	4827      	ldr	r0, [pc, #156]	; (800c094 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800bff6:	f7f7 faac 	bl	8003552 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c000:	2b01      	cmp	r3, #1
 800c002:	d101      	bne.n	800c008 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800c004:	2302      	movs	r3, #2
 800c006:	e03d      	b.n	800c084 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	4313      	orrs	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4313      	orrs	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	4313      	orrs	r3, r2
 800c054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	40010000 	.word	0x40010000
 800c090:	40010400 	.word	0x40010400
 800c094:	0800faf4 	.word	0x0800faf4

0800c098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e0be      	b.n	800c228 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d031      	beq.n	800c116 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a5e      	ldr	r2, [pc, #376]	; (800c230 <HAL_UART_Init+0x198>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d013      	beq.n	800c0e4 <HAL_UART_Init+0x4c>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a5c      	ldr	r2, [pc, #368]	; (800c234 <HAL_UART_Init+0x19c>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d00e      	beq.n	800c0e4 <HAL_UART_Init+0x4c>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a5b      	ldr	r2, [pc, #364]	; (800c238 <HAL_UART_Init+0x1a0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d009      	beq.n	800c0e4 <HAL_UART_Init+0x4c>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a59      	ldr	r2, [pc, #356]	; (800c23c <HAL_UART_Init+0x1a4>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d004      	beq.n	800c0e4 <HAL_UART_Init+0x4c>
 800c0da:	f240 114b 	movw	r1, #331	; 0x14b
 800c0de:	4858      	ldr	r0, [pc, #352]	; (800c240 <HAL_UART_Init+0x1a8>)
 800c0e0:	f7f7 fa37 	bl	8003552 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d041      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f4:	d03c      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0fe:	d037      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c108:	d032      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c10a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c10e:	484c      	ldr	r0, [pc, #304]	; (800c240 <HAL_UART_Init+0x1a8>)
 800c110:	f7f7 fa1f 	bl	8003552 <assert_failed>
 800c114:	e02c      	b.n	800c170 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a45      	ldr	r2, [pc, #276]	; (800c230 <HAL_UART_Init+0x198>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d027      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a43      	ldr	r2, [pc, #268]	; (800c234 <HAL_UART_Init+0x19c>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d022      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a42      	ldr	r2, [pc, #264]	; (800c238 <HAL_UART_Init+0x1a0>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d01d      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a42      	ldr	r2, [pc, #264]	; (800c244 <HAL_UART_Init+0x1ac>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d018      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a41      	ldr	r2, [pc, #260]	; (800c248 <HAL_UART_Init+0x1b0>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d013      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a3b      	ldr	r2, [pc, #236]	; (800c23c <HAL_UART_Init+0x1a4>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d00e      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a3d      	ldr	r2, [pc, #244]	; (800c24c <HAL_UART_Init+0x1b4>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d009      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a3b      	ldr	r2, [pc, #236]	; (800c250 <HAL_UART_Init+0x1b8>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d004      	beq.n	800c170 <HAL_UART_Init+0xd8>
 800c166:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c16a:	4835      	ldr	r0, [pc, #212]	; (800c240 <HAL_UART_Init+0x1a8>)
 800c16c:	f7f7 f9f1 	bl	8003552 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d009      	beq.n	800c18c <HAL_UART_Init+0xf4>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c180:	d004      	beq.n	800c18c <HAL_UART_Init+0xf4>
 800c182:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800c186:	482e      	ldr	r0, [pc, #184]	; (800c240 <HAL_UART_Init+0x1a8>)
 800c188:	f7f7 f9e3 	bl	8003552 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	69db      	ldr	r3, [r3, #28]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <HAL_UART_Init+0x110>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c19c:	d004      	beq.n	800c1a8 <HAL_UART_Init+0x110>
 800c19e:	f240 1153 	movw	r1, #339	; 0x153
 800c1a2:	4827      	ldr	r0, [pc, #156]	; (800c240 <HAL_UART_Init+0x1a8>)
 800c1a4:	f7f7 f9d5 	bl	8003552 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d106      	bne.n	800c1c2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7f8 f9eb 	bl	8004598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2224      	movs	r2, #36	; 0x24
 800c1c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68da      	ldr	r2, [r3, #12]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa72 	bl	800c6c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	691a      	ldr	r2, [r3, #16]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	695a      	ldr	r2, [r3, #20]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c20e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2220      	movs	r2, #32
 800c21a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2220      	movs	r2, #32
 800c222:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	40011000 	.word	0x40011000
 800c234:	40004400 	.word	0x40004400
 800c238:	40004800 	.word	0x40004800
 800c23c:	40011400 	.word	0x40011400
 800c240:	0800fb30 	.word	0x0800fb30
 800c244:	40004c00 	.word	0x40004c00
 800c248:	40005000 	.word	0x40005000
 800c24c:	40007800 	.word	0x40007800
 800c250:	40007c00 	.word	0x40007c00

0800c254 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af02      	add	r7, sp, #8
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	4613      	mov	r3, r2
 800c262:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b20      	cmp	r3, #32
 800c272:	f040 8083 	bne.w	800c37c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <HAL_UART_Transmit+0x2e>
 800c27c:	88fb      	ldrh	r3, [r7, #6]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e07b      	b.n	800c37e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d101      	bne.n	800c294 <HAL_UART_Transmit+0x40>
 800c290:	2302      	movs	r3, #2
 800c292:	e074      	b.n	800c37e <HAL_UART_Transmit+0x12a>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2221      	movs	r2, #33	; 0x21
 800c2a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c2aa:	f7f8 fe67 	bl	8004f7c <HAL_GetTick>
 800c2ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	88fa      	ldrh	r2, [r7, #6]
 800c2b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	88fa      	ldrh	r2, [r7, #6]
 800c2ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c2c4:	e042      	b.n	800c34c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2dc:	d122      	bne.n	800c324 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2180      	movs	r1, #128	; 0x80
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 f96d 	bl	800c5c8 <UART_WaitOnFlagUntilTimeout>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e042      	b.n	800c37e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c30a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d103      	bne.n	800c31c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3302      	adds	r3, #2
 800c318:	60bb      	str	r3, [r7, #8]
 800c31a:	e017      	b.n	800c34c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	3301      	adds	r3, #1
 800c320:	60bb      	str	r3, [r7, #8]
 800c322:	e013      	b.n	800c34c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2200      	movs	r2, #0
 800c32c:	2180      	movs	r1, #128	; 0x80
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f000 f94a 	bl	800c5c8 <UART_WaitOnFlagUntilTimeout>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e01f      	b.n	800c37e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	60ba      	str	r2, [r7, #8]
 800c344:	781a      	ldrb	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c350:	b29b      	uxth	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1b7      	bne.n	800c2c6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2200      	movs	r2, #0
 800c35e:	2140      	movs	r1, #64	; 0x40
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f000 f931 	bl	800c5c8 <UART_WaitOnFlagUntilTimeout>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e006      	b.n	800c37e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2220      	movs	r2, #32
 800c374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	e000      	b.n	800c37e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c37c:	2302      	movs	r3, #2
  }
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b20      	cmp	r3, #32
 800c3a0:	d166      	bne.n	800c470 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <HAL_UART_Receive_DMA+0x26>
 800c3a8:	88fb      	ldrh	r3, [r7, #6]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e05f      	b.n	800c472 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d101      	bne.n	800c3c0 <HAL_UART_Receive_DMA+0x38>
 800c3bc:	2302      	movs	r3, #2
 800c3be:	e058      	b.n	800c472 <HAL_UART_Receive_DMA+0xea>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	88fa      	ldrh	r2, [r7, #6]
 800c3d2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2222      	movs	r2, #34	; 0x22
 800c3de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e6:	4a25      	ldr	r2, [pc, #148]	; (800c47c <HAL_UART_Receive_DMA+0xf4>)
 800c3e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ee:	4a24      	ldr	r2, [pc, #144]	; (800c480 <HAL_UART_Receive_DMA+0xf8>)
 800c3f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f6:	4a23      	ldr	r2, [pc, #140]	; (800c484 <HAL_UART_Receive_DMA+0xfc>)
 800c3f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fe:	2200      	movs	r2, #0
 800c400:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800c402:	f107 0308 	add.w	r3, r7, #8
 800c406:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3304      	adds	r3, #4
 800c412:	4619      	mov	r1, r3
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	f7fa f9b5 	bl	8006788 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800c41e:	2300      	movs	r3, #0
 800c420:	613b      	str	r3, [r7, #16]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	613b      	str	r3, [r7, #16]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c44a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	695a      	ldr	r2, [r3, #20]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f042 0201 	orr.w	r2, r2, #1
 800c45a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	695a      	ldr	r2, [r3, #20]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c46a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	e000      	b.n	800c472 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c470:	2302      	movs	r3, #2
  }
}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	0800c4b1 	.word	0x0800c4b1
 800c480:	0800c519 	.word	0x0800c519
 800c484:	0800c535 	.word	0x0800c535

0800c488 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d11e      	bne.n	800c50a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68da      	ldr	r2, [r3, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4e0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	695a      	ldr	r2, [r3, #20]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f022 0201 	bic.w	r2, r2, #1
 800c4f0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	695a      	ldr	r2, [r3, #20]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c500:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2220      	movs	r2, #32
 800c506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f7f6 fb3c 	bl	8002b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c510:	bf00      	nop
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f7ff ffae 	bl	800c488 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c544:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	695b      	ldr	r3, [r3, #20]
 800c54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c550:	2b80      	cmp	r3, #128	; 0x80
 800c552:	bf0c      	ite	eq
 800c554:	2301      	moveq	r3, #1
 800c556:	2300      	movne	r3, #0
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c562:	b2db      	uxtb	r3, r3
 800c564:	2b21      	cmp	r3, #33	; 0x21
 800c566:	d108      	bne.n	800c57a <UART_DMAError+0x46>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2200      	movs	r2, #0
 800c572:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c574:	68b8      	ldr	r0, [r7, #8]
 800c576:	f000 f871 	bl	800c65c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	695b      	ldr	r3, [r3, #20]
 800c580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c584:	2b40      	cmp	r3, #64	; 0x40
 800c586:	bf0c      	ite	eq
 800c588:	2301      	moveq	r3, #1
 800c58a:	2300      	movne	r3, #0
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b22      	cmp	r3, #34	; 0x22
 800c59a:	d108      	bne.n	800c5ae <UART_DMAError+0x7a>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d005      	beq.n	800c5ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c5a8:	68b8      	ldr	r0, [r7, #8]
 800c5aa:	f000 f86d 	bl	800c688 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b2:	f043 0210 	orr.w	r2, r3, #16
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5ba:	68b8      	ldr	r0, [r7, #8]
 800c5bc:	f7ff ff6e 	bl	800c49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	603b      	str	r3, [r7, #0]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5d8:	e02c      	b.n	800c634 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e0:	d028      	beq.n	800c634 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d007      	beq.n	800c5f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5e8:	f7f8 fcc8 	bl	8004f7c <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d21d      	bcs.n	800c634 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c606:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	695a      	ldr	r2, [r3, #20]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f022 0201 	bic.w	r2, r2, #1
 800c616:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2220      	movs	r2, #32
 800c624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e00f      	b.n	800c654 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	4013      	ands	r3, r2
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	429a      	cmp	r2, r3
 800c642:	bf0c      	ite	eq
 800c644:	2301      	moveq	r3, #1
 800c646:	2300      	movne	r3, #0
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	461a      	mov	r2, r3
 800c64c:	79fb      	ldrb	r3, [r7, #7]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d0c3      	beq.n	800c5da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c672:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2220      	movs	r2, #32
 800c678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68da      	ldr	r2, [r3, #12]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c69e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	695a      	ldr	r2, [r3, #20]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0201 	bic.w	r2, r2, #1
 800c6ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	b0bd      	sub	sp, #244	; 0xf4
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	4bae      	ldr	r3, [pc, #696]	; (800c990 <UART_SetConfig+0x2cc>)
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d904      	bls.n	800c6e6 <UART_SetConfig+0x22>
 800c6dc:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800c6e0:	48ac      	ldr	r0, [pc, #688]	; (800c994 <UART_SetConfig+0x2d0>)
 800c6e2:	f7f6 ff36 	bl	8003552 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00a      	beq.n	800c706 <UART_SetConfig+0x42>
 800c6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6fa:	d004      	beq.n	800c706 <UART_SetConfig+0x42>
 800c6fc:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800c700:	48a4      	ldr	r0, [pc, #656]	; (800c994 <UART_SetConfig+0x2d0>)
 800c702:	f7f6 ff26 	bl	8003552 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d010      	beq.n	800c732 <UART_SetConfig+0x6e>
 800c710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c71a:	d00a      	beq.n	800c732 <UART_SetConfig+0x6e>
 800c71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c726:	d004      	beq.n	800c732 <UART_SetConfig+0x6e>
 800c728:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800c72c:	4899      	ldr	r0, [pc, #612]	; (800c994 <UART_SetConfig+0x2d0>)
 800c72e:	f7f6 ff10 	bl	8003552 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c736:	695a      	ldr	r2, [r3, #20]
 800c738:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800c73c:	4013      	ands	r3, r2
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d104      	bne.n	800c74c <UART_SetConfig+0x88>
 800c742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d104      	bne.n	800c756 <UART_SetConfig+0x92>
 800c74c:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800c750:	4890      	ldr	r0, [pc, #576]	; (800c994 <UART_SetConfig+0x2d0>)
 800c752:	f7f6 fefe 	bl	8003552 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c766:	68d9      	ldr	r1, [r3, #12]
 800c768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	ea40 0301 	orr.w	r3, r0, r1
 800c772:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c778:	689a      	ldr	r2, [r3, #8]
 800c77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	431a      	orrs	r2, r3
 800c782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	431a      	orrs	r2, r3
 800c78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	4313      	orrs	r3, r2
 800c792:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800c796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c7a2:	f021 010c 	bic.w	r1, r1, #12
 800c7a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	695b      	ldr	r3, [r3, #20]
 800c7bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c4:	6999      	ldr	r1, [r3, #24]
 800c7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	ea40 0301 	orr.w	r3, r0, r1
 800c7d0:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7d6:	69db      	ldr	r3, [r3, #28]
 800c7d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7dc:	f040 81a9 	bne.w	800cb32 <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4b6c      	ldr	r3, [pc, #432]	; (800c998 <UART_SetConfig+0x2d4>)
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d006      	beq.n	800c7fa <UART_SetConfig+0x136>
 800c7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	4b6a      	ldr	r3, [pc, #424]	; (800c99c <UART_SetConfig+0x2d8>)
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	f040 80d5 	bne.w	800c9a4 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7fa:	f7fc fd67 	bl	80092cc <HAL_RCC_GetPCLK2Freq>
 800c7fe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c802:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c806:	461c      	mov	r4, r3
 800c808:	f04f 0500 	mov.w	r5, #0
 800c80c:	4622      	mov	r2, r4
 800c80e:	462b      	mov	r3, r5
 800c810:	1891      	adds	r1, r2, r2
 800c812:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c816:	415b      	adcs	r3, r3
 800c818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c81c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c820:	1912      	adds	r2, r2, r4
 800c822:	eb45 0303 	adc.w	r3, r5, r3
 800c826:	f04f 0000 	mov.w	r0, #0
 800c82a:	f04f 0100 	mov.w	r1, #0
 800c82e:	00d9      	lsls	r1, r3, #3
 800c830:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c834:	00d0      	lsls	r0, r2, #3
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	1911      	adds	r1, r2, r4
 800c83c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800c840:	416b      	adcs	r3, r5
 800c842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	461a      	mov	r2, r3
 800c84e:	f04f 0300 	mov.w	r3, #0
 800c852:	1891      	adds	r1, r2, r2
 800c854:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c858:	415b      	adcs	r3, r3
 800c85a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c85e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c862:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c866:	f7f4 f9c7 	bl	8000bf8 <__aeabi_uldivmod>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	4b4c      	ldr	r3, [pc, #304]	; (800c9a0 <UART_SetConfig+0x2dc>)
 800c870:	fba3 2302 	umull	r2, r3, r3, r2
 800c874:	095b      	lsrs	r3, r3, #5
 800c876:	011e      	lsls	r6, r3, #4
 800c878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c87c:	461c      	mov	r4, r3
 800c87e:	f04f 0500 	mov.w	r5, #0
 800c882:	4622      	mov	r2, r4
 800c884:	462b      	mov	r3, r5
 800c886:	1891      	adds	r1, r2, r2
 800c888:	67b9      	str	r1, [r7, #120]	; 0x78
 800c88a:	415b      	adcs	r3, r3
 800c88c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c88e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800c892:	1912      	adds	r2, r2, r4
 800c894:	eb45 0303 	adc.w	r3, r5, r3
 800c898:	f04f 0000 	mov.w	r0, #0
 800c89c:	f04f 0100 	mov.w	r1, #0
 800c8a0:	00d9      	lsls	r1, r3, #3
 800c8a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c8a6:	00d0      	lsls	r0, r2, #3
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	1911      	adds	r1, r2, r4
 800c8ae:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800c8b2:	416b      	adcs	r3, r5
 800c8b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f04f 0300 	mov.w	r3, #0
 800c8c4:	1891      	adds	r1, r2, r2
 800c8c6:	6739      	str	r1, [r7, #112]	; 0x70
 800c8c8:	415b      	adcs	r3, r3
 800c8ca:	677b      	str	r3, [r7, #116]	; 0x74
 800c8cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c8d0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c8d4:	f7f4 f990 	bl	8000bf8 <__aeabi_uldivmod>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4b30      	ldr	r3, [pc, #192]	; (800c9a0 <UART_SetConfig+0x2dc>)
 800c8de:	fba3 1302 	umull	r1, r3, r3, r2
 800c8e2:	095b      	lsrs	r3, r3, #5
 800c8e4:	2164      	movs	r1, #100	; 0x64
 800c8e6:	fb01 f303 	mul.w	r3, r1, r3
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	3332      	adds	r3, #50	; 0x32
 800c8f0:	4a2b      	ldr	r2, [pc, #172]	; (800c9a0 <UART_SetConfig+0x2dc>)
 800c8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f6:	095b      	lsrs	r3, r3, #5
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8fe:	441e      	add	r6, r3
 800c900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c904:	4618      	mov	r0, r3
 800c906:	f04f 0100 	mov.w	r1, #0
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	1894      	adds	r4, r2, r2
 800c910:	66bc      	str	r4, [r7, #104]	; 0x68
 800c912:	415b      	adcs	r3, r3
 800c914:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c916:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c91a:	1812      	adds	r2, r2, r0
 800c91c:	eb41 0303 	adc.w	r3, r1, r3
 800c920:	f04f 0400 	mov.w	r4, #0
 800c924:	f04f 0500 	mov.w	r5, #0
 800c928:	00dd      	lsls	r5, r3, #3
 800c92a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c92e:	00d4      	lsls	r4, r2, #3
 800c930:	4622      	mov	r2, r4
 800c932:	462b      	mov	r3, r5
 800c934:	1814      	adds	r4, r2, r0
 800c936:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c93a:	414b      	adcs	r3, r1
 800c93c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	461a      	mov	r2, r3
 800c948:	f04f 0300 	mov.w	r3, #0
 800c94c:	1891      	adds	r1, r2, r2
 800c94e:	6639      	str	r1, [r7, #96]	; 0x60
 800c950:	415b      	adcs	r3, r3
 800c952:	667b      	str	r3, [r7, #100]	; 0x64
 800c954:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c958:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c95c:	f7f4 f94c 	bl	8000bf8 <__aeabi_uldivmod>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <UART_SetConfig+0x2dc>)
 800c966:	fba3 1302 	umull	r1, r3, r3, r2
 800c96a:	095b      	lsrs	r3, r3, #5
 800c96c:	2164      	movs	r1, #100	; 0x64
 800c96e:	fb01 f303 	mul.w	r3, r1, r3
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	3332      	adds	r3, #50	; 0x32
 800c978:	4a09      	ldr	r2, [pc, #36]	; (800c9a0 <UART_SetConfig+0x2dc>)
 800c97a:	fba2 2303 	umull	r2, r3, r2, r3
 800c97e:	095b      	lsrs	r3, r3, #5
 800c980:	f003 0207 	and.w	r2, r3, #7
 800c984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4432      	add	r2, r6
 800c98c:	609a      	str	r2, [r3, #8]
 800c98e:	e277      	b.n	800ce80 <UART_SetConfig+0x7bc>
 800c990:	00a037a0 	.word	0x00a037a0
 800c994:	0800fb30 	.word	0x0800fb30
 800c998:	40011000 	.word	0x40011000
 800c99c:	40011400 	.word	0x40011400
 800c9a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9a4:	f7fc fc7e 	bl	80092a4 <HAL_RCC_GetPCLK1Freq>
 800c9a8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c9ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	f04f 0500 	mov.w	r5, #0
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	1891      	adds	r1, r2, r2
 800c9bc:	65b9      	str	r1, [r7, #88]	; 0x58
 800c9be:	415b      	adcs	r3, r3
 800c9c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c9c6:	1912      	adds	r2, r2, r4
 800c9c8:	eb45 0303 	adc.w	r3, r5, r3
 800c9cc:	f04f 0000 	mov.w	r0, #0
 800c9d0:	f04f 0100 	mov.w	r1, #0
 800c9d4:	00d9      	lsls	r1, r3, #3
 800c9d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c9da:	00d0      	lsls	r0, r2, #3
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	1911      	adds	r1, r2, r4
 800c9e2:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800c9e6:	416b      	adcs	r3, r5
 800c9e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f04f 0300 	mov.w	r3, #0
 800c9f8:	1891      	adds	r1, r2, r2
 800c9fa:	6539      	str	r1, [r7, #80]	; 0x50
 800c9fc:	415b      	adcs	r3, r3
 800c9fe:	657b      	str	r3, [r7, #84]	; 0x54
 800ca00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca04:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800ca08:	f7f4 f8f6 	bl	8000bf8 <__aeabi_uldivmod>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4bb3      	ldr	r3, [pc, #716]	; (800cce0 <UART_SetConfig+0x61c>)
 800ca12:	fba3 2302 	umull	r2, r3, r3, r2
 800ca16:	095b      	lsrs	r3, r3, #5
 800ca18:	011e      	lsls	r6, r3, #4
 800ca1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ca1e:	461c      	mov	r4, r3
 800ca20:	f04f 0500 	mov.w	r5, #0
 800ca24:	4622      	mov	r2, r4
 800ca26:	462b      	mov	r3, r5
 800ca28:	1891      	adds	r1, r2, r2
 800ca2a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca2c:	415b      	adcs	r3, r3
 800ca2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca34:	1912      	adds	r2, r2, r4
 800ca36:	eb45 0303 	adc.w	r3, r5, r3
 800ca3a:	f04f 0000 	mov.w	r0, #0
 800ca3e:	f04f 0100 	mov.w	r1, #0
 800ca42:	00d9      	lsls	r1, r3, #3
 800ca44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca48:	00d0      	lsls	r0, r2, #3
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	1911      	adds	r1, r2, r4
 800ca50:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800ca54:	416b      	adcs	r3, r5
 800ca56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ca5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	461a      	mov	r2, r3
 800ca62:	f04f 0300 	mov.w	r3, #0
 800ca66:	1891      	adds	r1, r2, r2
 800ca68:	6439      	str	r1, [r7, #64]	; 0x40
 800ca6a:	415b      	adcs	r3, r3
 800ca6c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ca72:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ca76:	f7f4 f8bf 	bl	8000bf8 <__aeabi_uldivmod>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	4b98      	ldr	r3, [pc, #608]	; (800cce0 <UART_SetConfig+0x61c>)
 800ca80:	fba3 1302 	umull	r1, r3, r3, r2
 800ca84:	095b      	lsrs	r3, r3, #5
 800ca86:	2164      	movs	r1, #100	; 0x64
 800ca88:	fb01 f303 	mul.w	r3, r1, r3
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	3332      	adds	r3, #50	; 0x32
 800ca92:	4a93      	ldr	r2, [pc, #588]	; (800cce0 <UART_SetConfig+0x61c>)
 800ca94:	fba2 2303 	umull	r2, r3, r2, r3
 800ca98:	095b      	lsrs	r3, r3, #5
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800caa0:	441e      	add	r6, r3
 800caa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800caa6:	4618      	mov	r0, r3
 800caa8:	f04f 0100 	mov.w	r1, #0
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	1894      	adds	r4, r2, r2
 800cab2:	63bc      	str	r4, [r7, #56]	; 0x38
 800cab4:	415b      	adcs	r3, r3
 800cab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cabc:	1812      	adds	r2, r2, r0
 800cabe:	eb41 0303 	adc.w	r3, r1, r3
 800cac2:	f04f 0400 	mov.w	r4, #0
 800cac6:	f04f 0500 	mov.w	r5, #0
 800caca:	00dd      	lsls	r5, r3, #3
 800cacc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cad0:	00d4      	lsls	r4, r2, #3
 800cad2:	4622      	mov	r2, r4
 800cad4:	462b      	mov	r3, r5
 800cad6:	1814      	adds	r4, r2, r0
 800cad8:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800cadc:	414b      	adcs	r3, r1
 800cade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	461a      	mov	r2, r3
 800caea:	f04f 0300 	mov.w	r3, #0
 800caee:	1891      	adds	r1, r2, r2
 800caf0:	6339      	str	r1, [r7, #48]	; 0x30
 800caf2:	415b      	adcs	r3, r3
 800caf4:	637b      	str	r3, [r7, #52]	; 0x34
 800caf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cafa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cafe:	f7f4 f87b 	bl	8000bf8 <__aeabi_uldivmod>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4b76      	ldr	r3, [pc, #472]	; (800cce0 <UART_SetConfig+0x61c>)
 800cb08:	fba3 1302 	umull	r1, r3, r3, r2
 800cb0c:	095b      	lsrs	r3, r3, #5
 800cb0e:	2164      	movs	r1, #100	; 0x64
 800cb10:	fb01 f303 	mul.w	r3, r1, r3
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	3332      	adds	r3, #50	; 0x32
 800cb1a:	4a71      	ldr	r2, [pc, #452]	; (800cce0 <UART_SetConfig+0x61c>)
 800cb1c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb20:	095b      	lsrs	r3, r3, #5
 800cb22:	f003 0207 	and.w	r2, r3, #7
 800cb26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4432      	add	r2, r6
 800cb2e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cb30:	e1a6      	b.n	800ce80 <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	4b6a      	ldr	r3, [pc, #424]	; (800cce4 <UART_SetConfig+0x620>)
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d006      	beq.n	800cb4c <UART_SetConfig+0x488>
 800cb3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	4b68      	ldr	r3, [pc, #416]	; (800cce8 <UART_SetConfig+0x624>)
 800cb46:	429a      	cmp	r2, r3
 800cb48:	f040 80d0 	bne.w	800ccec <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cb4c:	f7fc fbbe 	bl	80092cc <HAL_RCC_GetPCLK2Freq>
 800cb50:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb58:	461c      	mov	r4, r3
 800cb5a:	f04f 0500 	mov.w	r5, #0
 800cb5e:	4622      	mov	r2, r4
 800cb60:	462b      	mov	r3, r5
 800cb62:	1891      	adds	r1, r2, r2
 800cb64:	62b9      	str	r1, [r7, #40]	; 0x28
 800cb66:	415b      	adcs	r3, r3
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb6e:	1912      	adds	r2, r2, r4
 800cb70:	eb45 0303 	adc.w	r3, r5, r3
 800cb74:	f04f 0000 	mov.w	r0, #0
 800cb78:	f04f 0100 	mov.w	r1, #0
 800cb7c:	00d9      	lsls	r1, r3, #3
 800cb7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cb82:	00d0      	lsls	r0, r2, #3
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	eb12 0a04 	adds.w	sl, r2, r4
 800cb8c:	eb43 0b05 	adc.w	fp, r3, r5
 800cb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f04f 0100 	mov.w	r1, #0
 800cb9c:	f04f 0200 	mov.w	r2, #0
 800cba0:	f04f 0300 	mov.w	r3, #0
 800cba4:	008b      	lsls	r3, r1, #2
 800cba6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cbaa:	0082      	lsls	r2, r0, #2
 800cbac:	4650      	mov	r0, sl
 800cbae:	4659      	mov	r1, fp
 800cbb0:	f7f4 f822 	bl	8000bf8 <__aeabi_uldivmod>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4b49      	ldr	r3, [pc, #292]	; (800cce0 <UART_SetConfig+0x61c>)
 800cbba:	fba3 2302 	umull	r2, r3, r3, r2
 800cbbe:	095b      	lsrs	r3, r3, #5
 800cbc0:	011e      	lsls	r6, r3, #4
 800cbc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f04f 0100 	mov.w	r1, #0
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	1894      	adds	r4, r2, r2
 800cbd2:	623c      	str	r4, [r7, #32]
 800cbd4:	415b      	adcs	r3, r3
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbdc:	1812      	adds	r2, r2, r0
 800cbde:	eb41 0303 	adc.w	r3, r1, r3
 800cbe2:	f04f 0400 	mov.w	r4, #0
 800cbe6:	f04f 0500 	mov.w	r5, #0
 800cbea:	00dd      	lsls	r5, r3, #3
 800cbec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cbf0:	00d4      	lsls	r4, r2, #3
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	1814      	adds	r4, r2, r0
 800cbf8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800cbfc:	414b      	adcs	r3, r1
 800cbfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f04f 0100 	mov.w	r1, #0
 800cc0e:	f04f 0200 	mov.w	r2, #0
 800cc12:	f04f 0300 	mov.w	r3, #0
 800cc16:	008b      	lsls	r3, r1, #2
 800cc18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cc1c:	0082      	lsls	r2, r0, #2
 800cc1e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800cc22:	f7f3 ffe9 	bl	8000bf8 <__aeabi_uldivmod>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4b2d      	ldr	r3, [pc, #180]	; (800cce0 <UART_SetConfig+0x61c>)
 800cc2c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc30:	095b      	lsrs	r3, r3, #5
 800cc32:	2164      	movs	r1, #100	; 0x64
 800cc34:	fb01 f303 	mul.w	r3, r1, r3
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	011b      	lsls	r3, r3, #4
 800cc3c:	3332      	adds	r3, #50	; 0x32
 800cc3e:	4a28      	ldr	r2, [pc, #160]	; (800cce0 <UART_SetConfig+0x61c>)
 800cc40:	fba2 2303 	umull	r2, r3, r2, r3
 800cc44:	095b      	lsrs	r3, r3, #5
 800cc46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc4a:	441e      	add	r6, r3
 800cc4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc50:	4618      	mov	r0, r3
 800cc52:	f04f 0100 	mov.w	r1, #0
 800cc56:	4602      	mov	r2, r0
 800cc58:	460b      	mov	r3, r1
 800cc5a:	1894      	adds	r4, r2, r2
 800cc5c:	61bc      	str	r4, [r7, #24]
 800cc5e:	415b      	adcs	r3, r3
 800cc60:	61fb      	str	r3, [r7, #28]
 800cc62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc66:	1812      	adds	r2, r2, r0
 800cc68:	eb41 0303 	adc.w	r3, r1, r3
 800cc6c:	f04f 0400 	mov.w	r4, #0
 800cc70:	f04f 0500 	mov.w	r5, #0
 800cc74:	00dd      	lsls	r5, r3, #3
 800cc76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cc7a:	00d4      	lsls	r4, r2, #3
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	462b      	mov	r3, r5
 800cc80:	1814      	adds	r4, r2, r0
 800cc82:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800cc86:	414b      	adcs	r3, r1
 800cc88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cc8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f04f 0100 	mov.w	r1, #0
 800cc98:	f04f 0200 	mov.w	r2, #0
 800cc9c:	f04f 0300 	mov.w	r3, #0
 800cca0:	008b      	lsls	r3, r1, #2
 800cca2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cca6:	0082      	lsls	r2, r0, #2
 800cca8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ccac:	f7f3 ffa4 	bl	8000bf8 <__aeabi_uldivmod>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <UART_SetConfig+0x61c>)
 800ccb6:	fba3 1302 	umull	r1, r3, r3, r2
 800ccba:	095b      	lsrs	r3, r3, #5
 800ccbc:	2164      	movs	r1, #100	; 0x64
 800ccbe:	fb01 f303 	mul.w	r3, r1, r3
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	3332      	adds	r3, #50	; 0x32
 800ccc8:	4a05      	ldr	r2, [pc, #20]	; (800cce0 <UART_SetConfig+0x61c>)
 800ccca:	fba2 2303 	umull	r2, r3, r2, r3
 800ccce:	095b      	lsrs	r3, r3, #5
 800ccd0:	f003 020f 	and.w	r2, r3, #15
 800ccd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4432      	add	r2, r6
 800ccdc:	609a      	str	r2, [r3, #8]
 800ccde:	e0cf      	b.n	800ce80 <UART_SetConfig+0x7bc>
 800cce0:	51eb851f 	.word	0x51eb851f
 800cce4:	40011000 	.word	0x40011000
 800cce8:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800ccec:	f7fc fada 	bl	80092a4 <HAL_RCC_GetPCLK1Freq>
 800ccf0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ccf8:	461c      	mov	r4, r3
 800ccfa:	f04f 0500 	mov.w	r5, #0
 800ccfe:	4622      	mov	r2, r4
 800cd00:	462b      	mov	r3, r5
 800cd02:	1891      	adds	r1, r2, r2
 800cd04:	6139      	str	r1, [r7, #16]
 800cd06:	415b      	adcs	r3, r3
 800cd08:	617b      	str	r3, [r7, #20]
 800cd0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd0e:	1912      	adds	r2, r2, r4
 800cd10:	eb45 0303 	adc.w	r3, r5, r3
 800cd14:	f04f 0000 	mov.w	r0, #0
 800cd18:	f04f 0100 	mov.w	r1, #0
 800cd1c:	00d9      	lsls	r1, r3, #3
 800cd1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd22:	00d0      	lsls	r0, r2, #3
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	eb12 0804 	adds.w	r8, r2, r4
 800cd2c:	eb43 0905 	adc.w	r9, r3, r5
 800cd30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f04f 0100 	mov.w	r1, #0
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	f04f 0300 	mov.w	r3, #0
 800cd44:	008b      	lsls	r3, r1, #2
 800cd46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cd4a:	0082      	lsls	r2, r0, #2
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	4649      	mov	r1, r9
 800cd50:	f7f3 ff52 	bl	8000bf8 <__aeabi_uldivmod>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4b4c      	ldr	r3, [pc, #304]	; (800ce8c <UART_SetConfig+0x7c8>)
 800cd5a:	fba3 2302 	umull	r2, r3, r3, r2
 800cd5e:	095b      	lsrs	r3, r3, #5
 800cd60:	011e      	lsls	r6, r3, #4
 800cd62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cd66:	4618      	mov	r0, r3
 800cd68:	f04f 0100 	mov.w	r1, #0
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	1894      	adds	r4, r2, r2
 800cd72:	60bc      	str	r4, [r7, #8]
 800cd74:	415b      	adcs	r3, r3
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd7c:	1812      	adds	r2, r2, r0
 800cd7e:	eb41 0303 	adc.w	r3, r1, r3
 800cd82:	f04f 0400 	mov.w	r4, #0
 800cd86:	f04f 0500 	mov.w	r5, #0
 800cd8a:	00dd      	lsls	r5, r3, #3
 800cd8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cd90:	00d4      	lsls	r4, r2, #3
 800cd92:	4622      	mov	r2, r4
 800cd94:	462b      	mov	r3, r5
 800cd96:	1814      	adds	r4, r2, r0
 800cd98:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800cd9c:	414b      	adcs	r3, r1
 800cd9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f04f 0100 	mov.w	r1, #0
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	008b      	lsls	r3, r1, #2
 800cdb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cdbc:	0082      	lsls	r2, r0, #2
 800cdbe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cdc2:	f7f3 ff19 	bl	8000bf8 <__aeabi_uldivmod>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4b30      	ldr	r3, [pc, #192]	; (800ce8c <UART_SetConfig+0x7c8>)
 800cdcc:	fba3 1302 	umull	r1, r3, r3, r2
 800cdd0:	095b      	lsrs	r3, r3, #5
 800cdd2:	2164      	movs	r1, #100	; 0x64
 800cdd4:	fb01 f303 	mul.w	r3, r1, r3
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	011b      	lsls	r3, r3, #4
 800cddc:	3332      	adds	r3, #50	; 0x32
 800cdde:	4a2b      	ldr	r2, [pc, #172]	; (800ce8c <UART_SetConfig+0x7c8>)
 800cde0:	fba2 2303 	umull	r2, r3, r2, r3
 800cde4:	095b      	lsrs	r3, r3, #5
 800cde6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdea:	441e      	add	r6, r3
 800cdec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f04f 0100 	mov.w	r1, #0
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	1894      	adds	r4, r2, r2
 800cdfc:	603c      	str	r4, [r7, #0]
 800cdfe:	415b      	adcs	r3, r3
 800ce00:	607b      	str	r3, [r7, #4]
 800ce02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce06:	1812      	adds	r2, r2, r0
 800ce08:	eb41 0303 	adc.w	r3, r1, r3
 800ce0c:	f04f 0400 	mov.w	r4, #0
 800ce10:	f04f 0500 	mov.w	r5, #0
 800ce14:	00dd      	lsls	r5, r3, #3
 800ce16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ce1a:	00d4      	lsls	r4, r2, #3
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	462b      	mov	r3, r5
 800ce20:	1814      	adds	r4, r2, r0
 800ce22:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800ce26:	414b      	adcs	r3, r1
 800ce28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f04f 0100 	mov.w	r1, #0
 800ce38:	f04f 0200 	mov.w	r2, #0
 800ce3c:	f04f 0300 	mov.w	r3, #0
 800ce40:	008b      	lsls	r3, r1, #2
 800ce42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce46:	0082      	lsls	r2, r0, #2
 800ce48:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ce4c:	f7f3 fed4 	bl	8000bf8 <__aeabi_uldivmod>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4b0d      	ldr	r3, [pc, #52]	; (800ce8c <UART_SetConfig+0x7c8>)
 800ce56:	fba3 1302 	umull	r1, r3, r3, r2
 800ce5a:	095b      	lsrs	r3, r3, #5
 800ce5c:	2164      	movs	r1, #100	; 0x64
 800ce5e:	fb01 f303 	mul.w	r3, r1, r3
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	011b      	lsls	r3, r3, #4
 800ce66:	3332      	adds	r3, #50	; 0x32
 800ce68:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <UART_SetConfig+0x7c8>)
 800ce6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6e:	095b      	lsrs	r3, r3, #5
 800ce70:	f003 020f 	and.w	r2, r3, #15
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4432      	add	r2, r6
 800ce7c:	609a      	str	r2, [r3, #8]
}
 800ce7e:	e7ff      	b.n	800ce80 <UART_SetConfig+0x7bc>
 800ce80:	bf00      	nop
 800ce82:	37f4      	adds	r7, #244	; 0xf4
 800ce84:	46bd      	mov	sp, r7
 800ce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8a:	bf00      	nop
 800ce8c:	51eb851f 	.word	0x51eb851f

0800ce90 <__errno>:
 800ce90:	4b01      	ldr	r3, [pc, #4]	; (800ce98 <__errno+0x8>)
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	200001dc 	.word	0x200001dc

0800ce9c <__libc_init_array>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	4d0d      	ldr	r5, [pc, #52]	; (800ced4 <__libc_init_array+0x38>)
 800cea0:	4c0d      	ldr	r4, [pc, #52]	; (800ced8 <__libc_init_array+0x3c>)
 800cea2:	1b64      	subs	r4, r4, r5
 800cea4:	10a4      	asrs	r4, r4, #2
 800cea6:	2600      	movs	r6, #0
 800cea8:	42a6      	cmp	r6, r4
 800ceaa:	d109      	bne.n	800cec0 <__libc_init_array+0x24>
 800ceac:	4d0b      	ldr	r5, [pc, #44]	; (800cedc <__libc_init_array+0x40>)
 800ceae:	4c0c      	ldr	r4, [pc, #48]	; (800cee0 <__libc_init_array+0x44>)
 800ceb0:	f002 fd10 	bl	800f8d4 <_init>
 800ceb4:	1b64      	subs	r4, r4, r5
 800ceb6:	10a4      	asrs	r4, r4, #2
 800ceb8:	2600      	movs	r6, #0
 800ceba:	42a6      	cmp	r6, r4
 800cebc:	d105      	bne.n	800ceca <__libc_init_array+0x2e>
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
 800cec0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec4:	4798      	blx	r3
 800cec6:	3601      	adds	r6, #1
 800cec8:	e7ee      	b.n	800cea8 <__libc_init_array+0xc>
 800ceca:	f855 3b04 	ldr.w	r3, [r5], #4
 800cece:	4798      	blx	r3
 800ced0:	3601      	adds	r6, #1
 800ced2:	e7f2      	b.n	800ceba <__libc_init_array+0x1e>
 800ced4:	0800fe40 	.word	0x0800fe40
 800ced8:	0800fe40 	.word	0x0800fe40
 800cedc:	0800fe40 	.word	0x0800fe40
 800cee0:	0800fe44 	.word	0x0800fe44

0800cee4 <memset>:
 800cee4:	4402      	add	r2, r0
 800cee6:	4603      	mov	r3, r0
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d100      	bne.n	800ceee <memset+0xa>
 800ceec:	4770      	bx	lr
 800ceee:	f803 1b01 	strb.w	r1, [r3], #1
 800cef2:	e7f9      	b.n	800cee8 <memset+0x4>
 800cef4:	0000      	movs	r0, r0
	...

0800cef8 <atan>:
 800cef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	ec55 4b10 	vmov	r4, r5, d0
 800cf00:	4bc3      	ldr	r3, [pc, #780]	; (800d210 <atan+0x318>)
 800cf02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf06:	429e      	cmp	r6, r3
 800cf08:	46ab      	mov	fp, r5
 800cf0a:	dd18      	ble.n	800cf3e <atan+0x46>
 800cf0c:	4bc1      	ldr	r3, [pc, #772]	; (800d214 <atan+0x31c>)
 800cf0e:	429e      	cmp	r6, r3
 800cf10:	dc01      	bgt.n	800cf16 <atan+0x1e>
 800cf12:	d109      	bne.n	800cf28 <atan+0x30>
 800cf14:	b144      	cbz	r4, 800cf28 <atan+0x30>
 800cf16:	4622      	mov	r2, r4
 800cf18:	462b      	mov	r3, r5
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	f7f3 f96d 	bl	80001fc <__adddf3>
 800cf22:	4604      	mov	r4, r0
 800cf24:	460d      	mov	r5, r1
 800cf26:	e006      	b.n	800cf36 <atan+0x3e>
 800cf28:	f1bb 0f00 	cmp.w	fp, #0
 800cf2c:	f300 8131 	bgt.w	800d192 <atan+0x29a>
 800cf30:	a59b      	add	r5, pc, #620	; (adr r5, 800d1a0 <atan+0x2a8>)
 800cf32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf36:	ec45 4b10 	vmov	d0, r4, r5
 800cf3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3e:	4bb6      	ldr	r3, [pc, #728]	; (800d218 <atan+0x320>)
 800cf40:	429e      	cmp	r6, r3
 800cf42:	dc14      	bgt.n	800cf6e <atan+0x76>
 800cf44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cf48:	429e      	cmp	r6, r3
 800cf4a:	dc0d      	bgt.n	800cf68 <atan+0x70>
 800cf4c:	a396      	add	r3, pc, #600	; (adr r3, 800d1a8 <atan+0x2b0>)
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	ee10 0a10 	vmov	r0, s0
 800cf56:	4629      	mov	r1, r5
 800cf58:	f7f3 f950 	bl	80001fc <__adddf3>
 800cf5c:	4baf      	ldr	r3, [pc, #700]	; (800d21c <atan+0x324>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f7f3 fd92 	bl	8000a88 <__aeabi_dcmpgt>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d1e6      	bne.n	800cf36 <atan+0x3e>
 800cf68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cf6c:	e02b      	b.n	800cfc6 <atan+0xce>
 800cf6e:	f000 f9b3 	bl	800d2d8 <fabs>
 800cf72:	4bab      	ldr	r3, [pc, #684]	; (800d220 <atan+0x328>)
 800cf74:	429e      	cmp	r6, r3
 800cf76:	ec55 4b10 	vmov	r4, r5, d0
 800cf7a:	f300 80bf 	bgt.w	800d0fc <atan+0x204>
 800cf7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cf82:	429e      	cmp	r6, r3
 800cf84:	f300 80a0 	bgt.w	800d0c8 <atan+0x1d0>
 800cf88:	ee10 2a10 	vmov	r2, s0
 800cf8c:	ee10 0a10 	vmov	r0, s0
 800cf90:	462b      	mov	r3, r5
 800cf92:	4629      	mov	r1, r5
 800cf94:	f7f3 f932 	bl	80001fc <__adddf3>
 800cf98:	4ba0      	ldr	r3, [pc, #640]	; (800d21c <atan+0x324>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f7f3 f92c 	bl	80001f8 <__aeabi_dsub>
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	460f      	mov	r7, r1
 800cfa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfaa:	4620      	mov	r0, r4
 800cfac:	4629      	mov	r1, r5
 800cfae:	f7f3 f925 	bl	80001fc <__adddf3>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	4639      	mov	r1, r7
 800cfba:	f7f3 fbff 	bl	80007bc <__aeabi_ddiv>
 800cfbe:	f04f 0a00 	mov.w	sl, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	462b      	mov	r3, r5
 800cfca:	4620      	mov	r0, r4
 800cfcc:	4629      	mov	r1, r5
 800cfce:	f7f3 facb 	bl	8000568 <__aeabi_dmul>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4680      	mov	r8, r0
 800cfd8:	4689      	mov	r9, r1
 800cfda:	f7f3 fac5 	bl	8000568 <__aeabi_dmul>
 800cfde:	a374      	add	r3, pc, #464	; (adr r3, 800d1b0 <atan+0x2b8>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	4606      	mov	r6, r0
 800cfe6:	460f      	mov	r7, r1
 800cfe8:	f7f3 fabe 	bl	8000568 <__aeabi_dmul>
 800cfec:	a372      	add	r3, pc, #456	; (adr r3, 800d1b8 <atan+0x2c0>)
 800cfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff2:	f7f3 f903 	bl	80001fc <__adddf3>
 800cff6:	4632      	mov	r2, r6
 800cff8:	463b      	mov	r3, r7
 800cffa:	f7f3 fab5 	bl	8000568 <__aeabi_dmul>
 800cffe:	a370      	add	r3, pc, #448	; (adr r3, 800d1c0 <atan+0x2c8>)
 800d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d004:	f7f3 f8fa 	bl	80001fc <__adddf3>
 800d008:	4632      	mov	r2, r6
 800d00a:	463b      	mov	r3, r7
 800d00c:	f7f3 faac 	bl	8000568 <__aeabi_dmul>
 800d010:	a36d      	add	r3, pc, #436	; (adr r3, 800d1c8 <atan+0x2d0>)
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f7f3 f8f1 	bl	80001fc <__adddf3>
 800d01a:	4632      	mov	r2, r6
 800d01c:	463b      	mov	r3, r7
 800d01e:	f7f3 faa3 	bl	8000568 <__aeabi_dmul>
 800d022:	a36b      	add	r3, pc, #428	; (adr r3, 800d1d0 <atan+0x2d8>)
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f7f3 f8e8 	bl	80001fc <__adddf3>
 800d02c:	4632      	mov	r2, r6
 800d02e:	463b      	mov	r3, r7
 800d030:	f7f3 fa9a 	bl	8000568 <__aeabi_dmul>
 800d034:	a368      	add	r3, pc, #416	; (adr r3, 800d1d8 <atan+0x2e0>)
 800d036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03a:	f7f3 f8df 	bl	80001fc <__adddf3>
 800d03e:	4642      	mov	r2, r8
 800d040:	464b      	mov	r3, r9
 800d042:	f7f3 fa91 	bl	8000568 <__aeabi_dmul>
 800d046:	a366      	add	r3, pc, #408	; (adr r3, 800d1e0 <atan+0x2e8>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	4680      	mov	r8, r0
 800d04e:	4689      	mov	r9, r1
 800d050:	4630      	mov	r0, r6
 800d052:	4639      	mov	r1, r7
 800d054:	f7f3 fa88 	bl	8000568 <__aeabi_dmul>
 800d058:	a363      	add	r3, pc, #396	; (adr r3, 800d1e8 <atan+0x2f0>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7f3 f8cb 	bl	80001f8 <__aeabi_dsub>
 800d062:	4632      	mov	r2, r6
 800d064:	463b      	mov	r3, r7
 800d066:	f7f3 fa7f 	bl	8000568 <__aeabi_dmul>
 800d06a:	a361      	add	r3, pc, #388	; (adr r3, 800d1f0 <atan+0x2f8>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	f7f3 f8c2 	bl	80001f8 <__aeabi_dsub>
 800d074:	4632      	mov	r2, r6
 800d076:	463b      	mov	r3, r7
 800d078:	f7f3 fa76 	bl	8000568 <__aeabi_dmul>
 800d07c:	a35e      	add	r3, pc, #376	; (adr r3, 800d1f8 <atan+0x300>)
 800d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d082:	f7f3 f8b9 	bl	80001f8 <__aeabi_dsub>
 800d086:	4632      	mov	r2, r6
 800d088:	463b      	mov	r3, r7
 800d08a:	f7f3 fa6d 	bl	8000568 <__aeabi_dmul>
 800d08e:	a35c      	add	r3, pc, #368	; (adr r3, 800d200 <atan+0x308>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	f7f3 f8b0 	bl	80001f8 <__aeabi_dsub>
 800d098:	4632      	mov	r2, r6
 800d09a:	463b      	mov	r3, r7
 800d09c:	f7f3 fa64 	bl	8000568 <__aeabi_dmul>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	f7f3 f8a8 	bl	80001fc <__adddf3>
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f7f3 fa5a 	bl	8000568 <__aeabi_dmul>
 800d0b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	d14b      	bne.n	800d156 <atan+0x25e>
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 f899 	bl	80001f8 <__aeabi_dsub>
 800d0c6:	e72c      	b.n	800cf22 <atan+0x2a>
 800d0c8:	ee10 0a10 	vmov	r0, s0
 800d0cc:	4b53      	ldr	r3, [pc, #332]	; (800d21c <atan+0x324>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	f7f3 f891 	bl	80001f8 <__aeabi_dsub>
 800d0d6:	4b51      	ldr	r3, [pc, #324]	; (800d21c <atan+0x324>)
 800d0d8:	4606      	mov	r6, r0
 800d0da:	460f      	mov	r7, r1
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4620      	mov	r0, r4
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	f7f3 f88b 	bl	80001fc <__adddf3>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	f7f3 fb65 	bl	80007bc <__aeabi_ddiv>
 800d0f2:	f04f 0a01 	mov.w	sl, #1
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	460d      	mov	r5, r1
 800d0fa:	e764      	b.n	800cfc6 <atan+0xce>
 800d0fc:	4b49      	ldr	r3, [pc, #292]	; (800d224 <atan+0x32c>)
 800d0fe:	429e      	cmp	r6, r3
 800d100:	da1d      	bge.n	800d13e <atan+0x246>
 800d102:	ee10 0a10 	vmov	r0, s0
 800d106:	4b48      	ldr	r3, [pc, #288]	; (800d228 <atan+0x330>)
 800d108:	2200      	movs	r2, #0
 800d10a:	4629      	mov	r1, r5
 800d10c:	f7f3 f874 	bl	80001f8 <__aeabi_dsub>
 800d110:	4b45      	ldr	r3, [pc, #276]	; (800d228 <atan+0x330>)
 800d112:	4606      	mov	r6, r0
 800d114:	460f      	mov	r7, r1
 800d116:	2200      	movs	r2, #0
 800d118:	4620      	mov	r0, r4
 800d11a:	4629      	mov	r1, r5
 800d11c:	f7f3 fa24 	bl	8000568 <__aeabi_dmul>
 800d120:	4b3e      	ldr	r3, [pc, #248]	; (800d21c <atan+0x324>)
 800d122:	2200      	movs	r2, #0
 800d124:	f7f3 f86a 	bl	80001fc <__adddf3>
 800d128:	4602      	mov	r2, r0
 800d12a:	460b      	mov	r3, r1
 800d12c:	4630      	mov	r0, r6
 800d12e:	4639      	mov	r1, r7
 800d130:	f7f3 fb44 	bl	80007bc <__aeabi_ddiv>
 800d134:	f04f 0a02 	mov.w	sl, #2
 800d138:	4604      	mov	r4, r0
 800d13a:	460d      	mov	r5, r1
 800d13c:	e743      	b.n	800cfc6 <atan+0xce>
 800d13e:	462b      	mov	r3, r5
 800d140:	ee10 2a10 	vmov	r2, s0
 800d144:	4939      	ldr	r1, [pc, #228]	; (800d22c <atan+0x334>)
 800d146:	2000      	movs	r0, #0
 800d148:	f7f3 fb38 	bl	80007bc <__aeabi_ddiv>
 800d14c:	f04f 0a03 	mov.w	sl, #3
 800d150:	4604      	mov	r4, r0
 800d152:	460d      	mov	r5, r1
 800d154:	e737      	b.n	800cfc6 <atan+0xce>
 800d156:	4b36      	ldr	r3, [pc, #216]	; (800d230 <atan+0x338>)
 800d158:	4e36      	ldr	r6, [pc, #216]	; (800d234 <atan+0x33c>)
 800d15a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d15e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d162:	e9da 2300 	ldrd	r2, r3, [sl]
 800d166:	f7f3 f847 	bl	80001f8 <__aeabi_dsub>
 800d16a:	4622      	mov	r2, r4
 800d16c:	462b      	mov	r3, r5
 800d16e:	f7f3 f843 	bl	80001f8 <__aeabi_dsub>
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d17a:	f7f3 f83d 	bl	80001f8 <__aeabi_dsub>
 800d17e:	f1bb 0f00 	cmp.w	fp, #0
 800d182:	4604      	mov	r4, r0
 800d184:	460d      	mov	r5, r1
 800d186:	f6bf aed6 	bge.w	800cf36 <atan+0x3e>
 800d18a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d18e:	461d      	mov	r5, r3
 800d190:	e6d1      	b.n	800cf36 <atan+0x3e>
 800d192:	a51d      	add	r5, pc, #116	; (adr r5, 800d208 <atan+0x310>)
 800d194:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d198:	e6cd      	b.n	800cf36 <atan+0x3e>
 800d19a:	bf00      	nop
 800d19c:	f3af 8000 	nop.w
 800d1a0:	54442d18 	.word	0x54442d18
 800d1a4:	bff921fb 	.word	0xbff921fb
 800d1a8:	8800759c 	.word	0x8800759c
 800d1ac:	7e37e43c 	.word	0x7e37e43c
 800d1b0:	e322da11 	.word	0xe322da11
 800d1b4:	3f90ad3a 	.word	0x3f90ad3a
 800d1b8:	24760deb 	.word	0x24760deb
 800d1bc:	3fa97b4b 	.word	0x3fa97b4b
 800d1c0:	a0d03d51 	.word	0xa0d03d51
 800d1c4:	3fb10d66 	.word	0x3fb10d66
 800d1c8:	c54c206e 	.word	0xc54c206e
 800d1cc:	3fb745cd 	.word	0x3fb745cd
 800d1d0:	920083ff 	.word	0x920083ff
 800d1d4:	3fc24924 	.word	0x3fc24924
 800d1d8:	5555550d 	.word	0x5555550d
 800d1dc:	3fd55555 	.word	0x3fd55555
 800d1e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d1e4:	bfa2b444 	.word	0xbfa2b444
 800d1e8:	52defd9a 	.word	0x52defd9a
 800d1ec:	3fadde2d 	.word	0x3fadde2d
 800d1f0:	af749a6d 	.word	0xaf749a6d
 800d1f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d1f8:	fe231671 	.word	0xfe231671
 800d1fc:	3fbc71c6 	.word	0x3fbc71c6
 800d200:	9998ebc4 	.word	0x9998ebc4
 800d204:	3fc99999 	.word	0x3fc99999
 800d208:	54442d18 	.word	0x54442d18
 800d20c:	3ff921fb 	.word	0x3ff921fb
 800d210:	440fffff 	.word	0x440fffff
 800d214:	7ff00000 	.word	0x7ff00000
 800d218:	3fdbffff 	.word	0x3fdbffff
 800d21c:	3ff00000 	.word	0x3ff00000
 800d220:	3ff2ffff 	.word	0x3ff2ffff
 800d224:	40038000 	.word	0x40038000
 800d228:	3ff80000 	.word	0x3ff80000
 800d22c:	bff00000 	.word	0xbff00000
 800d230:	0800fbc8 	.word	0x0800fbc8
 800d234:	0800fba8 	.word	0x0800fba8

0800d238 <cos>:
 800d238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d23a:	ec53 2b10 	vmov	r2, r3, d0
 800d23e:	4824      	ldr	r0, [pc, #144]	; (800d2d0 <cos+0x98>)
 800d240:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d244:	4281      	cmp	r1, r0
 800d246:	dc06      	bgt.n	800d256 <cos+0x1e>
 800d248:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d2c8 <cos+0x90>
 800d24c:	f001 fcd4 	bl	800ebf8 <__kernel_cos>
 800d250:	ec51 0b10 	vmov	r0, r1, d0
 800d254:	e007      	b.n	800d266 <cos+0x2e>
 800d256:	481f      	ldr	r0, [pc, #124]	; (800d2d4 <cos+0x9c>)
 800d258:	4281      	cmp	r1, r0
 800d25a:	dd09      	ble.n	800d270 <cos+0x38>
 800d25c:	ee10 0a10 	vmov	r0, s0
 800d260:	4619      	mov	r1, r3
 800d262:	f7f2 ffc9 	bl	80001f8 <__aeabi_dsub>
 800d266:	ec41 0b10 	vmov	d0, r0, r1
 800d26a:	b005      	add	sp, #20
 800d26c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d270:	4668      	mov	r0, sp
 800d272:	f001 fa01 	bl	800e678 <__ieee754_rem_pio2>
 800d276:	f000 0003 	and.w	r0, r0, #3
 800d27a:	2801      	cmp	r0, #1
 800d27c:	d007      	beq.n	800d28e <cos+0x56>
 800d27e:	2802      	cmp	r0, #2
 800d280:	d012      	beq.n	800d2a8 <cos+0x70>
 800d282:	b9c0      	cbnz	r0, 800d2b6 <cos+0x7e>
 800d284:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d288:	ed9d 0b00 	vldr	d0, [sp]
 800d28c:	e7de      	b.n	800d24c <cos+0x14>
 800d28e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d292:	ed9d 0b00 	vldr	d0, [sp]
 800d296:	f002 f8b7 	bl	800f408 <__kernel_sin>
 800d29a:	ec53 2b10 	vmov	r2, r3, d0
 800d29e:	ee10 0a10 	vmov	r0, s0
 800d2a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2a6:	e7de      	b.n	800d266 <cos+0x2e>
 800d2a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ac:	ed9d 0b00 	vldr	d0, [sp]
 800d2b0:	f001 fca2 	bl	800ebf8 <__kernel_cos>
 800d2b4:	e7f1      	b.n	800d29a <cos+0x62>
 800d2b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ba:	ed9d 0b00 	vldr	d0, [sp]
 800d2be:	2001      	movs	r0, #1
 800d2c0:	f002 f8a2 	bl	800f408 <__kernel_sin>
 800d2c4:	e7c4      	b.n	800d250 <cos+0x18>
 800d2c6:	bf00      	nop
	...
 800d2d0:	3fe921fb 	.word	0x3fe921fb
 800d2d4:	7fefffff 	.word	0x7fefffff

0800d2d8 <fabs>:
 800d2d8:	ec51 0b10 	vmov	r0, r1, d0
 800d2dc:	ee10 2a10 	vmov	r2, s0
 800d2e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2e4:	ec43 2b10 	vmov	d0, r2, r3
 800d2e8:	4770      	bx	lr
 800d2ea:	0000      	movs	r0, r0
 800d2ec:	0000      	movs	r0, r0
	...

0800d2f0 <sin>:
 800d2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2f2:	ec53 2b10 	vmov	r2, r3, d0
 800d2f6:	4826      	ldr	r0, [pc, #152]	; (800d390 <sin+0xa0>)
 800d2f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2fc:	4281      	cmp	r1, r0
 800d2fe:	dc07      	bgt.n	800d310 <sin+0x20>
 800d300:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d388 <sin+0x98>
 800d304:	2000      	movs	r0, #0
 800d306:	f002 f87f 	bl	800f408 <__kernel_sin>
 800d30a:	ec51 0b10 	vmov	r0, r1, d0
 800d30e:	e007      	b.n	800d320 <sin+0x30>
 800d310:	4820      	ldr	r0, [pc, #128]	; (800d394 <sin+0xa4>)
 800d312:	4281      	cmp	r1, r0
 800d314:	dd09      	ble.n	800d32a <sin+0x3a>
 800d316:	ee10 0a10 	vmov	r0, s0
 800d31a:	4619      	mov	r1, r3
 800d31c:	f7f2 ff6c 	bl	80001f8 <__aeabi_dsub>
 800d320:	ec41 0b10 	vmov	d0, r0, r1
 800d324:	b005      	add	sp, #20
 800d326:	f85d fb04 	ldr.w	pc, [sp], #4
 800d32a:	4668      	mov	r0, sp
 800d32c:	f001 f9a4 	bl	800e678 <__ieee754_rem_pio2>
 800d330:	f000 0003 	and.w	r0, r0, #3
 800d334:	2801      	cmp	r0, #1
 800d336:	d008      	beq.n	800d34a <sin+0x5a>
 800d338:	2802      	cmp	r0, #2
 800d33a:	d00d      	beq.n	800d358 <sin+0x68>
 800d33c:	b9d0      	cbnz	r0, 800d374 <sin+0x84>
 800d33e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d342:	ed9d 0b00 	vldr	d0, [sp]
 800d346:	2001      	movs	r0, #1
 800d348:	e7dd      	b.n	800d306 <sin+0x16>
 800d34a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d34e:	ed9d 0b00 	vldr	d0, [sp]
 800d352:	f001 fc51 	bl	800ebf8 <__kernel_cos>
 800d356:	e7d8      	b.n	800d30a <sin+0x1a>
 800d358:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d35c:	ed9d 0b00 	vldr	d0, [sp]
 800d360:	2001      	movs	r0, #1
 800d362:	f002 f851 	bl	800f408 <__kernel_sin>
 800d366:	ec53 2b10 	vmov	r2, r3, d0
 800d36a:	ee10 0a10 	vmov	r0, s0
 800d36e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d372:	e7d5      	b.n	800d320 <sin+0x30>
 800d374:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d378:	ed9d 0b00 	vldr	d0, [sp]
 800d37c:	f001 fc3c 	bl	800ebf8 <__kernel_cos>
 800d380:	e7f1      	b.n	800d366 <sin+0x76>
 800d382:	bf00      	nop
 800d384:	f3af 8000 	nop.w
	...
 800d390:	3fe921fb 	.word	0x3fe921fb
 800d394:	7fefffff 	.word	0x7fefffff

0800d398 <acos>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	ed2d 8b02 	vpush	{d8}
 800d39e:	ec55 4b10 	vmov	r4, r5, d0
 800d3a2:	f000 f919 	bl	800d5d8 <__ieee754_acos>
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <acos+0x68>)
 800d3a8:	eeb0 8a40 	vmov.f32	s16, s0
 800d3ac:	eef0 8a60 	vmov.f32	s17, s1
 800d3b0:	f993 3000 	ldrsb.w	r3, [r3]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	d01c      	beq.n	800d3f2 <acos+0x5a>
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	462b      	mov	r3, r5
 800d3bc:	4620      	mov	r0, r4
 800d3be:	4629      	mov	r1, r5
 800d3c0:	f7f3 fb6c 	bl	8000a9c <__aeabi_dcmpun>
 800d3c4:	b9a8      	cbnz	r0, 800d3f2 <acos+0x5a>
 800d3c6:	ec45 4b10 	vmov	d0, r4, r5
 800d3ca:	f7ff ff85 	bl	800d2d8 <fabs>
 800d3ce:	4b0d      	ldr	r3, [pc, #52]	; (800d404 <acos+0x6c>)
 800d3d0:	ec51 0b10 	vmov	r0, r1, d0
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f7f3 fb57 	bl	8000a88 <__aeabi_dcmpgt>
 800d3da:	b150      	cbz	r0, 800d3f2 <acos+0x5a>
 800d3dc:	f7ff fd58 	bl	800ce90 <__errno>
 800d3e0:	ecbd 8b02 	vpop	{d8}
 800d3e4:	2321      	movs	r3, #33	; 0x21
 800d3e6:	6003      	str	r3, [r0, #0]
 800d3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ec:	4806      	ldr	r0, [pc, #24]	; (800d408 <acos+0x70>)
 800d3ee:	f002 b957 	b.w	800f6a0 <nan>
 800d3f2:	eeb0 0a48 	vmov.f32	s0, s16
 800d3f6:	eef0 0a68 	vmov.f32	s1, s17
 800d3fa:	ecbd 8b02 	vpop	{d8}
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20000240 	.word	0x20000240
 800d404:	3ff00000 	.word	0x3ff00000
 800d408:	0800fbe8 	.word	0x0800fbe8

0800d40c <atan2>:
 800d40c:	f000 bb44 	b.w	800da98 <__ieee754_atan2>

0800d410 <pow>:
 800d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d414:	ec59 8b10 	vmov	r8, r9, d0
 800d418:	ec57 6b11 	vmov	r6, r7, d1
 800d41c:	f000 fc08 	bl	800dc30 <__ieee754_pow>
 800d420:	4b4e      	ldr	r3, [pc, #312]	; (800d55c <pow+0x14c>)
 800d422:	f993 3000 	ldrsb.w	r3, [r3]
 800d426:	3301      	adds	r3, #1
 800d428:	ec55 4b10 	vmov	r4, r5, d0
 800d42c:	d015      	beq.n	800d45a <pow+0x4a>
 800d42e:	4632      	mov	r2, r6
 800d430:	463b      	mov	r3, r7
 800d432:	4630      	mov	r0, r6
 800d434:	4639      	mov	r1, r7
 800d436:	f7f3 fb31 	bl	8000a9c <__aeabi_dcmpun>
 800d43a:	b970      	cbnz	r0, 800d45a <pow+0x4a>
 800d43c:	4642      	mov	r2, r8
 800d43e:	464b      	mov	r3, r9
 800d440:	4640      	mov	r0, r8
 800d442:	4649      	mov	r1, r9
 800d444:	f7f3 fb2a 	bl	8000a9c <__aeabi_dcmpun>
 800d448:	2200      	movs	r2, #0
 800d44a:	2300      	movs	r3, #0
 800d44c:	b148      	cbz	r0, 800d462 <pow+0x52>
 800d44e:	4630      	mov	r0, r6
 800d450:	4639      	mov	r1, r7
 800d452:	f7f3 faf1 	bl	8000a38 <__aeabi_dcmpeq>
 800d456:	2800      	cmp	r0, #0
 800d458:	d17d      	bne.n	800d556 <pow+0x146>
 800d45a:	ec45 4b10 	vmov	d0, r4, r5
 800d45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d462:	4640      	mov	r0, r8
 800d464:	4649      	mov	r1, r9
 800d466:	f7f3 fae7 	bl	8000a38 <__aeabi_dcmpeq>
 800d46a:	b1e0      	cbz	r0, 800d4a6 <pow+0x96>
 800d46c:	2200      	movs	r2, #0
 800d46e:	2300      	movs	r3, #0
 800d470:	4630      	mov	r0, r6
 800d472:	4639      	mov	r1, r7
 800d474:	f7f3 fae0 	bl	8000a38 <__aeabi_dcmpeq>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d16c      	bne.n	800d556 <pow+0x146>
 800d47c:	ec47 6b10 	vmov	d0, r6, r7
 800d480:	f002 f880 	bl	800f584 <finite>
 800d484:	2800      	cmp	r0, #0
 800d486:	d0e8      	beq.n	800d45a <pow+0x4a>
 800d488:	2200      	movs	r2, #0
 800d48a:	2300      	movs	r3, #0
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	f7f3 fadc 	bl	8000a4c <__aeabi_dcmplt>
 800d494:	2800      	cmp	r0, #0
 800d496:	d0e0      	beq.n	800d45a <pow+0x4a>
 800d498:	f7ff fcfa 	bl	800ce90 <__errno>
 800d49c:	2321      	movs	r3, #33	; 0x21
 800d49e:	6003      	str	r3, [r0, #0]
 800d4a0:	2400      	movs	r4, #0
 800d4a2:	4d2f      	ldr	r5, [pc, #188]	; (800d560 <pow+0x150>)
 800d4a4:	e7d9      	b.n	800d45a <pow+0x4a>
 800d4a6:	ec45 4b10 	vmov	d0, r4, r5
 800d4aa:	f002 f86b 	bl	800f584 <finite>
 800d4ae:	bbb8      	cbnz	r0, 800d520 <pow+0x110>
 800d4b0:	ec49 8b10 	vmov	d0, r8, r9
 800d4b4:	f002 f866 	bl	800f584 <finite>
 800d4b8:	b390      	cbz	r0, 800d520 <pow+0x110>
 800d4ba:	ec47 6b10 	vmov	d0, r6, r7
 800d4be:	f002 f861 	bl	800f584 <finite>
 800d4c2:	b368      	cbz	r0, 800d520 <pow+0x110>
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	462b      	mov	r3, r5
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	f7f3 fae6 	bl	8000a9c <__aeabi_dcmpun>
 800d4d0:	b160      	cbz	r0, 800d4ec <pow+0xdc>
 800d4d2:	f7ff fcdd 	bl	800ce90 <__errno>
 800d4d6:	2321      	movs	r3, #33	; 0x21
 800d4d8:	6003      	str	r3, [r0, #0]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4610      	mov	r0, r2
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f7f3 f96b 	bl	80007bc <__aeabi_ddiv>
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	e7b6      	b.n	800d45a <pow+0x4a>
 800d4ec:	f7ff fcd0 	bl	800ce90 <__errno>
 800d4f0:	2322      	movs	r3, #34	; 0x22
 800d4f2:	6003      	str	r3, [r0, #0]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	4640      	mov	r0, r8
 800d4fa:	4649      	mov	r1, r9
 800d4fc:	f7f3 faa6 	bl	8000a4c <__aeabi_dcmplt>
 800d500:	2400      	movs	r4, #0
 800d502:	b158      	cbz	r0, 800d51c <pow+0x10c>
 800d504:	ec47 6b10 	vmov	d0, r6, r7
 800d508:	f002 f8d2 	bl	800f6b0 <rint>
 800d50c:	4632      	mov	r2, r6
 800d50e:	ec51 0b10 	vmov	r0, r1, d0
 800d512:	463b      	mov	r3, r7
 800d514:	f7f3 fa90 	bl	8000a38 <__aeabi_dcmpeq>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d0c2      	beq.n	800d4a2 <pow+0x92>
 800d51c:	4d11      	ldr	r5, [pc, #68]	; (800d564 <pow+0x154>)
 800d51e:	e79c      	b.n	800d45a <pow+0x4a>
 800d520:	2200      	movs	r2, #0
 800d522:	2300      	movs	r3, #0
 800d524:	4620      	mov	r0, r4
 800d526:	4629      	mov	r1, r5
 800d528:	f7f3 fa86 	bl	8000a38 <__aeabi_dcmpeq>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d094      	beq.n	800d45a <pow+0x4a>
 800d530:	ec49 8b10 	vmov	d0, r8, r9
 800d534:	f002 f826 	bl	800f584 <finite>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d08e      	beq.n	800d45a <pow+0x4a>
 800d53c:	ec47 6b10 	vmov	d0, r6, r7
 800d540:	f002 f820 	bl	800f584 <finite>
 800d544:	2800      	cmp	r0, #0
 800d546:	d088      	beq.n	800d45a <pow+0x4a>
 800d548:	f7ff fca2 	bl	800ce90 <__errno>
 800d54c:	2322      	movs	r3, #34	; 0x22
 800d54e:	6003      	str	r3, [r0, #0]
 800d550:	2400      	movs	r4, #0
 800d552:	2500      	movs	r5, #0
 800d554:	e781      	b.n	800d45a <pow+0x4a>
 800d556:	4d04      	ldr	r5, [pc, #16]	; (800d568 <pow+0x158>)
 800d558:	2400      	movs	r4, #0
 800d55a:	e77e      	b.n	800d45a <pow+0x4a>
 800d55c:	20000240 	.word	0x20000240
 800d560:	fff00000 	.word	0xfff00000
 800d564:	7ff00000 	.word	0x7ff00000
 800d568:	3ff00000 	.word	0x3ff00000

0800d56c <sqrt>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	ed2d 8b02 	vpush	{d8}
 800d572:	ec55 4b10 	vmov	r4, r5, d0
 800d576:	f001 fa89 	bl	800ea8c <__ieee754_sqrt>
 800d57a:	4b15      	ldr	r3, [pc, #84]	; (800d5d0 <sqrt+0x64>)
 800d57c:	eeb0 8a40 	vmov.f32	s16, s0
 800d580:	eef0 8a60 	vmov.f32	s17, s1
 800d584:	f993 3000 	ldrsb.w	r3, [r3]
 800d588:	3301      	adds	r3, #1
 800d58a:	d019      	beq.n	800d5c0 <sqrt+0x54>
 800d58c:	4622      	mov	r2, r4
 800d58e:	462b      	mov	r3, r5
 800d590:	4620      	mov	r0, r4
 800d592:	4629      	mov	r1, r5
 800d594:	f7f3 fa82 	bl	8000a9c <__aeabi_dcmpun>
 800d598:	b990      	cbnz	r0, 800d5c0 <sqrt+0x54>
 800d59a:	2200      	movs	r2, #0
 800d59c:	2300      	movs	r3, #0
 800d59e:	4620      	mov	r0, r4
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	f7f3 fa53 	bl	8000a4c <__aeabi_dcmplt>
 800d5a6:	b158      	cbz	r0, 800d5c0 <sqrt+0x54>
 800d5a8:	f7ff fc72 	bl	800ce90 <__errno>
 800d5ac:	2321      	movs	r3, #33	; 0x21
 800d5ae:	6003      	str	r3, [r0, #0]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	f7f3 f900 	bl	80007bc <__aeabi_ddiv>
 800d5bc:	ec41 0b18 	vmov	d8, r0, r1
 800d5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800d5c4:	eef0 0a68 	vmov.f32	s1, s17
 800d5c8:	ecbd 8b02 	vpop	{d8}
 800d5cc:	bd38      	pop	{r3, r4, r5, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20000240 	.word	0x20000240
 800d5d4:	00000000 	.word	0x00000000

0800d5d8 <__ieee754_acos>:
 800d5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	ec55 4b10 	vmov	r4, r5, d0
 800d5e0:	49b7      	ldr	r1, [pc, #732]	; (800d8c0 <__ieee754_acos+0x2e8>)
 800d5e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d5e6:	428b      	cmp	r3, r1
 800d5e8:	dd1b      	ble.n	800d622 <__ieee754_acos+0x4a>
 800d5ea:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d5ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d5f2:	4323      	orrs	r3, r4
 800d5f4:	d106      	bne.n	800d604 <__ieee754_acos+0x2c>
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	f300 8211 	bgt.w	800da1e <__ieee754_acos+0x446>
 800d5fc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d858 <__ieee754_acos+0x280>
 800d600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d604:	ee10 2a10 	vmov	r2, s0
 800d608:	462b      	mov	r3, r5
 800d60a:	ee10 0a10 	vmov	r0, s0
 800d60e:	4629      	mov	r1, r5
 800d610:	f7f2 fdf2 	bl	80001f8 <__aeabi_dsub>
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	f7f3 f8d0 	bl	80007bc <__aeabi_ddiv>
 800d61c:	ec41 0b10 	vmov	d0, r0, r1
 800d620:	e7ee      	b.n	800d600 <__ieee754_acos+0x28>
 800d622:	49a8      	ldr	r1, [pc, #672]	; (800d8c4 <__ieee754_acos+0x2ec>)
 800d624:	428b      	cmp	r3, r1
 800d626:	f300 8087 	bgt.w	800d738 <__ieee754_acos+0x160>
 800d62a:	4aa7      	ldr	r2, [pc, #668]	; (800d8c8 <__ieee754_acos+0x2f0>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	f340 81f9 	ble.w	800da24 <__ieee754_acos+0x44c>
 800d632:	ee10 2a10 	vmov	r2, s0
 800d636:	ee10 0a10 	vmov	r0, s0
 800d63a:	462b      	mov	r3, r5
 800d63c:	4629      	mov	r1, r5
 800d63e:	f7f2 ff93 	bl	8000568 <__aeabi_dmul>
 800d642:	a387      	add	r3, pc, #540	; (adr r3, 800d860 <__ieee754_acos+0x288>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	4606      	mov	r6, r0
 800d64a:	460f      	mov	r7, r1
 800d64c:	f7f2 ff8c 	bl	8000568 <__aeabi_dmul>
 800d650:	a385      	add	r3, pc, #532	; (adr r3, 800d868 <__ieee754_acos+0x290>)
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	f7f2 fdd1 	bl	80001fc <__adddf3>
 800d65a:	4632      	mov	r2, r6
 800d65c:	463b      	mov	r3, r7
 800d65e:	f7f2 ff83 	bl	8000568 <__aeabi_dmul>
 800d662:	a383      	add	r3, pc, #524	; (adr r3, 800d870 <__ieee754_acos+0x298>)
 800d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d668:	f7f2 fdc6 	bl	80001f8 <__aeabi_dsub>
 800d66c:	4632      	mov	r2, r6
 800d66e:	463b      	mov	r3, r7
 800d670:	f7f2 ff7a 	bl	8000568 <__aeabi_dmul>
 800d674:	a380      	add	r3, pc, #512	; (adr r3, 800d878 <__ieee754_acos+0x2a0>)
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	f7f2 fdbf 	bl	80001fc <__adddf3>
 800d67e:	4632      	mov	r2, r6
 800d680:	463b      	mov	r3, r7
 800d682:	f7f2 ff71 	bl	8000568 <__aeabi_dmul>
 800d686:	a37e      	add	r3, pc, #504	; (adr r3, 800d880 <__ieee754_acos+0x2a8>)
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	f7f2 fdb4 	bl	80001f8 <__aeabi_dsub>
 800d690:	4632      	mov	r2, r6
 800d692:	463b      	mov	r3, r7
 800d694:	f7f2 ff68 	bl	8000568 <__aeabi_dmul>
 800d698:	a37b      	add	r3, pc, #492	; (adr r3, 800d888 <__ieee754_acos+0x2b0>)
 800d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69e:	f7f2 fdad 	bl	80001fc <__adddf3>
 800d6a2:	4632      	mov	r2, r6
 800d6a4:	463b      	mov	r3, r7
 800d6a6:	f7f2 ff5f 	bl	8000568 <__aeabi_dmul>
 800d6aa:	a379      	add	r3, pc, #484	; (adr r3, 800d890 <__ieee754_acos+0x2b8>)
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	4689      	mov	r9, r1
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	4639      	mov	r1, r7
 800d6b8:	f7f2 ff56 	bl	8000568 <__aeabi_dmul>
 800d6bc:	a376      	add	r3, pc, #472	; (adr r3, 800d898 <__ieee754_acos+0x2c0>)
 800d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c2:	f7f2 fd99 	bl	80001f8 <__aeabi_dsub>
 800d6c6:	4632      	mov	r2, r6
 800d6c8:	463b      	mov	r3, r7
 800d6ca:	f7f2 ff4d 	bl	8000568 <__aeabi_dmul>
 800d6ce:	a374      	add	r3, pc, #464	; (adr r3, 800d8a0 <__ieee754_acos+0x2c8>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f7f2 fd92 	bl	80001fc <__adddf3>
 800d6d8:	4632      	mov	r2, r6
 800d6da:	463b      	mov	r3, r7
 800d6dc:	f7f2 ff44 	bl	8000568 <__aeabi_dmul>
 800d6e0:	a371      	add	r3, pc, #452	; (adr r3, 800d8a8 <__ieee754_acos+0x2d0>)
 800d6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e6:	f7f2 fd87 	bl	80001f8 <__aeabi_dsub>
 800d6ea:	4632      	mov	r2, r6
 800d6ec:	463b      	mov	r3, r7
 800d6ee:	f7f2 ff3b 	bl	8000568 <__aeabi_dmul>
 800d6f2:	4b76      	ldr	r3, [pc, #472]	; (800d8cc <__ieee754_acos+0x2f4>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f7f2 fd81 	bl	80001fc <__adddf3>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4640      	mov	r0, r8
 800d700:	4649      	mov	r1, r9
 800d702:	f7f3 f85b 	bl	80007bc <__aeabi_ddiv>
 800d706:	4622      	mov	r2, r4
 800d708:	462b      	mov	r3, r5
 800d70a:	f7f2 ff2d 	bl	8000568 <__aeabi_dmul>
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	a167      	add	r1, pc, #412	; (adr r1, 800d8b0 <__ieee754_acos+0x2d8>)
 800d714:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d718:	f7f2 fd6e 	bl	80001f8 <__aeabi_dsub>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4620      	mov	r0, r4
 800d722:	4629      	mov	r1, r5
 800d724:	f7f2 fd68 	bl	80001f8 <__aeabi_dsub>
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	a162      	add	r1, pc, #392	; (adr r1, 800d8b8 <__ieee754_acos+0x2e0>)
 800d72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d732:	f7f2 fd61 	bl	80001f8 <__aeabi_dsub>
 800d736:	e771      	b.n	800d61c <__ieee754_acos+0x44>
 800d738:	2d00      	cmp	r5, #0
 800d73a:	f280 80cb 	bge.w	800d8d4 <__ieee754_acos+0x2fc>
 800d73e:	ee10 0a10 	vmov	r0, s0
 800d742:	4b62      	ldr	r3, [pc, #392]	; (800d8cc <__ieee754_acos+0x2f4>)
 800d744:	2200      	movs	r2, #0
 800d746:	4629      	mov	r1, r5
 800d748:	f7f2 fd58 	bl	80001fc <__adddf3>
 800d74c:	4b60      	ldr	r3, [pc, #384]	; (800d8d0 <__ieee754_acos+0x2f8>)
 800d74e:	2200      	movs	r2, #0
 800d750:	f7f2 ff0a 	bl	8000568 <__aeabi_dmul>
 800d754:	a342      	add	r3, pc, #264	; (adr r3, 800d860 <__ieee754_acos+0x288>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	4604      	mov	r4, r0
 800d75c:	460d      	mov	r5, r1
 800d75e:	f7f2 ff03 	bl	8000568 <__aeabi_dmul>
 800d762:	a341      	add	r3, pc, #260	; (adr r3, 800d868 <__ieee754_acos+0x290>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	f7f2 fd48 	bl	80001fc <__adddf3>
 800d76c:	4622      	mov	r2, r4
 800d76e:	462b      	mov	r3, r5
 800d770:	f7f2 fefa 	bl	8000568 <__aeabi_dmul>
 800d774:	a33e      	add	r3, pc, #248	; (adr r3, 800d870 <__ieee754_acos+0x298>)
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f7f2 fd3d 	bl	80001f8 <__aeabi_dsub>
 800d77e:	4622      	mov	r2, r4
 800d780:	462b      	mov	r3, r5
 800d782:	f7f2 fef1 	bl	8000568 <__aeabi_dmul>
 800d786:	a33c      	add	r3, pc, #240	; (adr r3, 800d878 <__ieee754_acos+0x2a0>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f2 fd36 	bl	80001fc <__adddf3>
 800d790:	4622      	mov	r2, r4
 800d792:	462b      	mov	r3, r5
 800d794:	f7f2 fee8 	bl	8000568 <__aeabi_dmul>
 800d798:	a339      	add	r3, pc, #228	; (adr r3, 800d880 <__ieee754_acos+0x2a8>)
 800d79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79e:	f7f2 fd2b 	bl	80001f8 <__aeabi_dsub>
 800d7a2:	4622      	mov	r2, r4
 800d7a4:	462b      	mov	r3, r5
 800d7a6:	f7f2 fedf 	bl	8000568 <__aeabi_dmul>
 800d7aa:	a337      	add	r3, pc, #220	; (adr r3, 800d888 <__ieee754_acos+0x2b0>)
 800d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b0:	f7f2 fd24 	bl	80001fc <__adddf3>
 800d7b4:	4622      	mov	r2, r4
 800d7b6:	462b      	mov	r3, r5
 800d7b8:	f7f2 fed6 	bl	8000568 <__aeabi_dmul>
 800d7bc:	ec45 4b10 	vmov	d0, r4, r5
 800d7c0:	4680      	mov	r8, r0
 800d7c2:	4689      	mov	r9, r1
 800d7c4:	f001 f962 	bl	800ea8c <__ieee754_sqrt>
 800d7c8:	a331      	add	r3, pc, #196	; (adr r3, 800d890 <__ieee754_acos+0x2b8>)
 800d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	ec57 6b10 	vmov	r6, r7, d0
 800d7d6:	f7f2 fec7 	bl	8000568 <__aeabi_dmul>
 800d7da:	a32f      	add	r3, pc, #188	; (adr r3, 800d898 <__ieee754_acos+0x2c0>)
 800d7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e0:	f7f2 fd0a 	bl	80001f8 <__aeabi_dsub>
 800d7e4:	4622      	mov	r2, r4
 800d7e6:	462b      	mov	r3, r5
 800d7e8:	f7f2 febe 	bl	8000568 <__aeabi_dmul>
 800d7ec:	a32c      	add	r3, pc, #176	; (adr r3, 800d8a0 <__ieee754_acos+0x2c8>)
 800d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f2:	f7f2 fd03 	bl	80001fc <__adddf3>
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	462b      	mov	r3, r5
 800d7fa:	f7f2 feb5 	bl	8000568 <__aeabi_dmul>
 800d7fe:	a32a      	add	r3, pc, #168	; (adr r3, 800d8a8 <__ieee754_acos+0x2d0>)
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	f7f2 fcf8 	bl	80001f8 <__aeabi_dsub>
 800d808:	4622      	mov	r2, r4
 800d80a:	462b      	mov	r3, r5
 800d80c:	f7f2 feac 	bl	8000568 <__aeabi_dmul>
 800d810:	4b2e      	ldr	r3, [pc, #184]	; (800d8cc <__ieee754_acos+0x2f4>)
 800d812:	2200      	movs	r2, #0
 800d814:	f7f2 fcf2 	bl	80001fc <__adddf3>
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	4640      	mov	r0, r8
 800d81e:	4649      	mov	r1, r9
 800d820:	f7f2 ffcc 	bl	80007bc <__aeabi_ddiv>
 800d824:	4632      	mov	r2, r6
 800d826:	463b      	mov	r3, r7
 800d828:	f7f2 fe9e 	bl	8000568 <__aeabi_dmul>
 800d82c:	a320      	add	r3, pc, #128	; (adr r3, 800d8b0 <__ieee754_acos+0x2d8>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fce1 	bl	80001f8 <__aeabi_dsub>
 800d836:	4632      	mov	r2, r6
 800d838:	463b      	mov	r3, r7
 800d83a:	f7f2 fcdf 	bl	80001fc <__adddf3>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	f7f2 fcdb 	bl	80001fc <__adddf3>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	a103      	add	r1, pc, #12	; (adr r1, 800d858 <__ieee754_acos+0x280>)
 800d84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d850:	e76f      	b.n	800d732 <__ieee754_acos+0x15a>
 800d852:	bf00      	nop
 800d854:	f3af 8000 	nop.w
 800d858:	54442d18 	.word	0x54442d18
 800d85c:	400921fb 	.word	0x400921fb
 800d860:	0dfdf709 	.word	0x0dfdf709
 800d864:	3f023de1 	.word	0x3f023de1
 800d868:	7501b288 	.word	0x7501b288
 800d86c:	3f49efe0 	.word	0x3f49efe0
 800d870:	b5688f3b 	.word	0xb5688f3b
 800d874:	3fa48228 	.word	0x3fa48228
 800d878:	0e884455 	.word	0x0e884455
 800d87c:	3fc9c155 	.word	0x3fc9c155
 800d880:	03eb6f7d 	.word	0x03eb6f7d
 800d884:	3fd4d612 	.word	0x3fd4d612
 800d888:	55555555 	.word	0x55555555
 800d88c:	3fc55555 	.word	0x3fc55555
 800d890:	b12e9282 	.word	0xb12e9282
 800d894:	3fb3b8c5 	.word	0x3fb3b8c5
 800d898:	1b8d0159 	.word	0x1b8d0159
 800d89c:	3fe6066c 	.word	0x3fe6066c
 800d8a0:	9c598ac8 	.word	0x9c598ac8
 800d8a4:	40002ae5 	.word	0x40002ae5
 800d8a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800d8ac:	40033a27 	.word	0x40033a27
 800d8b0:	33145c07 	.word	0x33145c07
 800d8b4:	3c91a626 	.word	0x3c91a626
 800d8b8:	54442d18 	.word	0x54442d18
 800d8bc:	3ff921fb 	.word	0x3ff921fb
 800d8c0:	3fefffff 	.word	0x3fefffff
 800d8c4:	3fdfffff 	.word	0x3fdfffff
 800d8c8:	3c600000 	.word	0x3c600000
 800d8cc:	3ff00000 	.word	0x3ff00000
 800d8d0:	3fe00000 	.word	0x3fe00000
 800d8d4:	ee10 2a10 	vmov	r2, s0
 800d8d8:	462b      	mov	r3, r5
 800d8da:	496d      	ldr	r1, [pc, #436]	; (800da90 <__ieee754_acos+0x4b8>)
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f7f2 fc8b 	bl	80001f8 <__aeabi_dsub>
 800d8e2:	4b6c      	ldr	r3, [pc, #432]	; (800da94 <__ieee754_acos+0x4bc>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f7f2 fe3f 	bl	8000568 <__aeabi_dmul>
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	460d      	mov	r5, r1
 800d8ee:	ec45 4b10 	vmov	d0, r4, r5
 800d8f2:	f001 f8cb 	bl	800ea8c <__ieee754_sqrt>
 800d8f6:	a34e      	add	r3, pc, #312	; (adr r3, 800da30 <__ieee754_acos+0x458>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	4629      	mov	r1, r5
 800d900:	ec59 8b10 	vmov	r8, r9, d0
 800d904:	f7f2 fe30 	bl	8000568 <__aeabi_dmul>
 800d908:	a34b      	add	r3, pc, #300	; (adr r3, 800da38 <__ieee754_acos+0x460>)
 800d90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90e:	f7f2 fc75 	bl	80001fc <__adddf3>
 800d912:	4622      	mov	r2, r4
 800d914:	462b      	mov	r3, r5
 800d916:	f7f2 fe27 	bl	8000568 <__aeabi_dmul>
 800d91a:	a349      	add	r3, pc, #292	; (adr r3, 800da40 <__ieee754_acos+0x468>)
 800d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d920:	f7f2 fc6a 	bl	80001f8 <__aeabi_dsub>
 800d924:	4622      	mov	r2, r4
 800d926:	462b      	mov	r3, r5
 800d928:	f7f2 fe1e 	bl	8000568 <__aeabi_dmul>
 800d92c:	a346      	add	r3, pc, #280	; (adr r3, 800da48 <__ieee754_acos+0x470>)
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	f7f2 fc63 	bl	80001fc <__adddf3>
 800d936:	4622      	mov	r2, r4
 800d938:	462b      	mov	r3, r5
 800d93a:	f7f2 fe15 	bl	8000568 <__aeabi_dmul>
 800d93e:	a344      	add	r3, pc, #272	; (adr r3, 800da50 <__ieee754_acos+0x478>)
 800d940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d944:	f7f2 fc58 	bl	80001f8 <__aeabi_dsub>
 800d948:	4622      	mov	r2, r4
 800d94a:	462b      	mov	r3, r5
 800d94c:	f7f2 fe0c 	bl	8000568 <__aeabi_dmul>
 800d950:	a341      	add	r3, pc, #260	; (adr r3, 800da58 <__ieee754_acos+0x480>)
 800d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d956:	f7f2 fc51 	bl	80001fc <__adddf3>
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	f7f2 fe03 	bl	8000568 <__aeabi_dmul>
 800d962:	a33f      	add	r3, pc, #252	; (adr r3, 800da60 <__ieee754_acos+0x488>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	4682      	mov	sl, r0
 800d96a:	468b      	mov	fp, r1
 800d96c:	4620      	mov	r0, r4
 800d96e:	4629      	mov	r1, r5
 800d970:	f7f2 fdfa 	bl	8000568 <__aeabi_dmul>
 800d974:	a33c      	add	r3, pc, #240	; (adr r3, 800da68 <__ieee754_acos+0x490>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	f7f2 fc3d 	bl	80001f8 <__aeabi_dsub>
 800d97e:	4622      	mov	r2, r4
 800d980:	462b      	mov	r3, r5
 800d982:	f7f2 fdf1 	bl	8000568 <__aeabi_dmul>
 800d986:	a33a      	add	r3, pc, #232	; (adr r3, 800da70 <__ieee754_acos+0x498>)
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	f7f2 fc36 	bl	80001fc <__adddf3>
 800d990:	4622      	mov	r2, r4
 800d992:	462b      	mov	r3, r5
 800d994:	f7f2 fde8 	bl	8000568 <__aeabi_dmul>
 800d998:	a337      	add	r3, pc, #220	; (adr r3, 800da78 <__ieee754_acos+0x4a0>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	f7f2 fc2b 	bl	80001f8 <__aeabi_dsub>
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	f7f2 fddf 	bl	8000568 <__aeabi_dmul>
 800d9aa:	4b39      	ldr	r3, [pc, #228]	; (800da90 <__ieee754_acos+0x4b8>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f7f2 fc25 	bl	80001fc <__adddf3>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	4659      	mov	r1, fp
 800d9ba:	f7f2 feff 	bl	80007bc <__aeabi_ddiv>
 800d9be:	4642      	mov	r2, r8
 800d9c0:	464b      	mov	r3, r9
 800d9c2:	f7f2 fdd1 	bl	8000568 <__aeabi_dmul>
 800d9c6:	2600      	movs	r6, #0
 800d9c8:	4682      	mov	sl, r0
 800d9ca:	468b      	mov	fp, r1
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	464b      	mov	r3, r9
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	f7f2 fdc8 	bl	8000568 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4620      	mov	r0, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f7f2 fc0a 	bl	80001f8 <__aeabi_dsub>
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	464b      	mov	r3, r9
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7f2 fc04 	bl	80001fc <__adddf3>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	f7f2 fede 	bl	80007bc <__aeabi_ddiv>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	4650      	mov	r0, sl
 800da06:	4659      	mov	r1, fp
 800da08:	f7f2 fbf8 	bl	80001fc <__adddf3>
 800da0c:	4632      	mov	r2, r6
 800da0e:	464b      	mov	r3, r9
 800da10:	f7f2 fbf4 	bl	80001fc <__adddf3>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	f7f2 fbf0 	bl	80001fc <__adddf3>
 800da1c:	e5fe      	b.n	800d61c <__ieee754_acos+0x44>
 800da1e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800da80 <__ieee754_acos+0x4a8>
 800da22:	e5ed      	b.n	800d600 <__ieee754_acos+0x28>
 800da24:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800da88 <__ieee754_acos+0x4b0>
 800da28:	e5ea      	b.n	800d600 <__ieee754_acos+0x28>
 800da2a:	bf00      	nop
 800da2c:	f3af 8000 	nop.w
 800da30:	0dfdf709 	.word	0x0dfdf709
 800da34:	3f023de1 	.word	0x3f023de1
 800da38:	7501b288 	.word	0x7501b288
 800da3c:	3f49efe0 	.word	0x3f49efe0
 800da40:	b5688f3b 	.word	0xb5688f3b
 800da44:	3fa48228 	.word	0x3fa48228
 800da48:	0e884455 	.word	0x0e884455
 800da4c:	3fc9c155 	.word	0x3fc9c155
 800da50:	03eb6f7d 	.word	0x03eb6f7d
 800da54:	3fd4d612 	.word	0x3fd4d612
 800da58:	55555555 	.word	0x55555555
 800da5c:	3fc55555 	.word	0x3fc55555
 800da60:	b12e9282 	.word	0xb12e9282
 800da64:	3fb3b8c5 	.word	0x3fb3b8c5
 800da68:	1b8d0159 	.word	0x1b8d0159
 800da6c:	3fe6066c 	.word	0x3fe6066c
 800da70:	9c598ac8 	.word	0x9c598ac8
 800da74:	40002ae5 	.word	0x40002ae5
 800da78:	1c8a2d4b 	.word	0x1c8a2d4b
 800da7c:	40033a27 	.word	0x40033a27
	...
 800da88:	54442d18 	.word	0x54442d18
 800da8c:	3ff921fb 	.word	0x3ff921fb
 800da90:	3ff00000 	.word	0x3ff00000
 800da94:	3fe00000 	.word	0x3fe00000

0800da98 <__ieee754_atan2>:
 800da98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da9c:	ec57 6b11 	vmov	r6, r7, d1
 800daa0:	4273      	negs	r3, r6
 800daa2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800dc28 <__ieee754_atan2+0x190>
 800daa6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800daaa:	4333      	orrs	r3, r6
 800daac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dab0:	4573      	cmp	r3, lr
 800dab2:	ec51 0b10 	vmov	r0, r1, d0
 800dab6:	ee11 8a10 	vmov	r8, s2
 800daba:	d80a      	bhi.n	800dad2 <__ieee754_atan2+0x3a>
 800dabc:	4244      	negs	r4, r0
 800dabe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dac2:	4304      	orrs	r4, r0
 800dac4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dac8:	4574      	cmp	r4, lr
 800daca:	ee10 9a10 	vmov	r9, s0
 800dace:	468c      	mov	ip, r1
 800dad0:	d907      	bls.n	800dae2 <__ieee754_atan2+0x4a>
 800dad2:	4632      	mov	r2, r6
 800dad4:	463b      	mov	r3, r7
 800dad6:	f7f2 fb91 	bl	80001fc <__adddf3>
 800dada:	ec41 0b10 	vmov	d0, r0, r1
 800dade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800dae6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800daea:	4334      	orrs	r4, r6
 800daec:	d103      	bne.n	800daf6 <__ieee754_atan2+0x5e>
 800daee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf2:	f7ff ba01 	b.w	800cef8 <atan>
 800daf6:	17bc      	asrs	r4, r7, #30
 800daf8:	f004 0402 	and.w	r4, r4, #2
 800dafc:	ea53 0909 	orrs.w	r9, r3, r9
 800db00:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800db04:	d107      	bne.n	800db16 <__ieee754_atan2+0x7e>
 800db06:	2c02      	cmp	r4, #2
 800db08:	d060      	beq.n	800dbcc <__ieee754_atan2+0x134>
 800db0a:	2c03      	cmp	r4, #3
 800db0c:	d1e5      	bne.n	800dada <__ieee754_atan2+0x42>
 800db0e:	a142      	add	r1, pc, #264	; (adr r1, 800dc18 <__ieee754_atan2+0x180>)
 800db10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db14:	e7e1      	b.n	800dada <__ieee754_atan2+0x42>
 800db16:	ea52 0808 	orrs.w	r8, r2, r8
 800db1a:	d106      	bne.n	800db2a <__ieee754_atan2+0x92>
 800db1c:	f1bc 0f00 	cmp.w	ip, #0
 800db20:	da5f      	bge.n	800dbe2 <__ieee754_atan2+0x14a>
 800db22:	a13f      	add	r1, pc, #252	; (adr r1, 800dc20 <__ieee754_atan2+0x188>)
 800db24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db28:	e7d7      	b.n	800dada <__ieee754_atan2+0x42>
 800db2a:	4572      	cmp	r2, lr
 800db2c:	d10f      	bne.n	800db4e <__ieee754_atan2+0xb6>
 800db2e:	4293      	cmp	r3, r2
 800db30:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800db34:	d107      	bne.n	800db46 <__ieee754_atan2+0xae>
 800db36:	2c02      	cmp	r4, #2
 800db38:	d84c      	bhi.n	800dbd4 <__ieee754_atan2+0x13c>
 800db3a:	4b35      	ldr	r3, [pc, #212]	; (800dc10 <__ieee754_atan2+0x178>)
 800db3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800db40:	e9d4 0100 	ldrd	r0, r1, [r4]
 800db44:	e7c9      	b.n	800dada <__ieee754_atan2+0x42>
 800db46:	2c02      	cmp	r4, #2
 800db48:	d848      	bhi.n	800dbdc <__ieee754_atan2+0x144>
 800db4a:	4b32      	ldr	r3, [pc, #200]	; (800dc14 <__ieee754_atan2+0x17c>)
 800db4c:	e7f6      	b.n	800db3c <__ieee754_atan2+0xa4>
 800db4e:	4573      	cmp	r3, lr
 800db50:	d0e4      	beq.n	800db1c <__ieee754_atan2+0x84>
 800db52:	1a9b      	subs	r3, r3, r2
 800db54:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800db58:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db5c:	da1e      	bge.n	800db9c <__ieee754_atan2+0x104>
 800db5e:	2f00      	cmp	r7, #0
 800db60:	da01      	bge.n	800db66 <__ieee754_atan2+0xce>
 800db62:	323c      	adds	r2, #60	; 0x3c
 800db64:	db1e      	blt.n	800dba4 <__ieee754_atan2+0x10c>
 800db66:	4632      	mov	r2, r6
 800db68:	463b      	mov	r3, r7
 800db6a:	f7f2 fe27 	bl	80007bc <__aeabi_ddiv>
 800db6e:	ec41 0b10 	vmov	d0, r0, r1
 800db72:	f7ff fbb1 	bl	800d2d8 <fabs>
 800db76:	f7ff f9bf 	bl	800cef8 <atan>
 800db7a:	ec51 0b10 	vmov	r0, r1, d0
 800db7e:	2c01      	cmp	r4, #1
 800db80:	d013      	beq.n	800dbaa <__ieee754_atan2+0x112>
 800db82:	2c02      	cmp	r4, #2
 800db84:	d015      	beq.n	800dbb2 <__ieee754_atan2+0x11a>
 800db86:	2c00      	cmp	r4, #0
 800db88:	d0a7      	beq.n	800dada <__ieee754_atan2+0x42>
 800db8a:	a319      	add	r3, pc, #100	; (adr r3, 800dbf0 <__ieee754_atan2+0x158>)
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	f7f2 fb32 	bl	80001f8 <__aeabi_dsub>
 800db94:	a318      	add	r3, pc, #96	; (adr r3, 800dbf8 <__ieee754_atan2+0x160>)
 800db96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9a:	e014      	b.n	800dbc6 <__ieee754_atan2+0x12e>
 800db9c:	a118      	add	r1, pc, #96	; (adr r1, 800dc00 <__ieee754_atan2+0x168>)
 800db9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dba2:	e7ec      	b.n	800db7e <__ieee754_atan2+0xe6>
 800dba4:	2000      	movs	r0, #0
 800dba6:	2100      	movs	r1, #0
 800dba8:	e7e9      	b.n	800db7e <__ieee754_atan2+0xe6>
 800dbaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbae:	4619      	mov	r1, r3
 800dbb0:	e793      	b.n	800dada <__ieee754_atan2+0x42>
 800dbb2:	a30f      	add	r3, pc, #60	; (adr r3, 800dbf0 <__ieee754_atan2+0x158>)
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f7f2 fb1e 	bl	80001f8 <__aeabi_dsub>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	a10d      	add	r1, pc, #52	; (adr r1, 800dbf8 <__ieee754_atan2+0x160>)
 800dbc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbc6:	f7f2 fb17 	bl	80001f8 <__aeabi_dsub>
 800dbca:	e786      	b.n	800dada <__ieee754_atan2+0x42>
 800dbcc:	a10a      	add	r1, pc, #40	; (adr r1, 800dbf8 <__ieee754_atan2+0x160>)
 800dbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbd2:	e782      	b.n	800dada <__ieee754_atan2+0x42>
 800dbd4:	a10c      	add	r1, pc, #48	; (adr r1, 800dc08 <__ieee754_atan2+0x170>)
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	e77e      	b.n	800dada <__ieee754_atan2+0x42>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	2100      	movs	r1, #0
 800dbe0:	e77b      	b.n	800dada <__ieee754_atan2+0x42>
 800dbe2:	a107      	add	r1, pc, #28	; (adr r1, 800dc00 <__ieee754_atan2+0x168>)
 800dbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe8:	e777      	b.n	800dada <__ieee754_atan2+0x42>
 800dbea:	bf00      	nop
 800dbec:	f3af 8000 	nop.w
 800dbf0:	33145c07 	.word	0x33145c07
 800dbf4:	3ca1a626 	.word	0x3ca1a626
 800dbf8:	54442d18 	.word	0x54442d18
 800dbfc:	400921fb 	.word	0x400921fb
 800dc00:	54442d18 	.word	0x54442d18
 800dc04:	3ff921fb 	.word	0x3ff921fb
 800dc08:	54442d18 	.word	0x54442d18
 800dc0c:	3fe921fb 	.word	0x3fe921fb
 800dc10:	0800fbf0 	.word	0x0800fbf0
 800dc14:	0800fc08 	.word	0x0800fc08
 800dc18:	54442d18 	.word	0x54442d18
 800dc1c:	c00921fb 	.word	0xc00921fb
 800dc20:	54442d18 	.word	0x54442d18
 800dc24:	bff921fb 	.word	0xbff921fb
 800dc28:	7ff00000 	.word	0x7ff00000
 800dc2c:	00000000 	.word	0x00000000

0800dc30 <__ieee754_pow>:
 800dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc34:	ed2d 8b06 	vpush	{d8-d10}
 800dc38:	b08d      	sub	sp, #52	; 0x34
 800dc3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dc3e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dc42:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dc46:	ea56 0100 	orrs.w	r1, r6, r0
 800dc4a:	ec53 2b10 	vmov	r2, r3, d0
 800dc4e:	f000 84d1 	beq.w	800e5f4 <__ieee754_pow+0x9c4>
 800dc52:	497f      	ldr	r1, [pc, #508]	; (800de50 <__ieee754_pow+0x220>)
 800dc54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dc58:	428c      	cmp	r4, r1
 800dc5a:	ee10 8a10 	vmov	r8, s0
 800dc5e:	4699      	mov	r9, r3
 800dc60:	dc09      	bgt.n	800dc76 <__ieee754_pow+0x46>
 800dc62:	d103      	bne.n	800dc6c <__ieee754_pow+0x3c>
 800dc64:	b97a      	cbnz	r2, 800dc86 <__ieee754_pow+0x56>
 800dc66:	42a6      	cmp	r6, r4
 800dc68:	dd02      	ble.n	800dc70 <__ieee754_pow+0x40>
 800dc6a:	e00c      	b.n	800dc86 <__ieee754_pow+0x56>
 800dc6c:	428e      	cmp	r6, r1
 800dc6e:	dc02      	bgt.n	800dc76 <__ieee754_pow+0x46>
 800dc70:	428e      	cmp	r6, r1
 800dc72:	d110      	bne.n	800dc96 <__ieee754_pow+0x66>
 800dc74:	b178      	cbz	r0, 800dc96 <__ieee754_pow+0x66>
 800dc76:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dc7a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dc7e:	ea54 0308 	orrs.w	r3, r4, r8
 800dc82:	f000 84b7 	beq.w	800e5f4 <__ieee754_pow+0x9c4>
 800dc86:	4873      	ldr	r0, [pc, #460]	; (800de54 <__ieee754_pow+0x224>)
 800dc88:	b00d      	add	sp, #52	; 0x34
 800dc8a:	ecbd 8b06 	vpop	{d8-d10}
 800dc8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc92:	f001 bd05 	b.w	800f6a0 <nan>
 800dc96:	f1b9 0f00 	cmp.w	r9, #0
 800dc9a:	da36      	bge.n	800dd0a <__ieee754_pow+0xda>
 800dc9c:	496e      	ldr	r1, [pc, #440]	; (800de58 <__ieee754_pow+0x228>)
 800dc9e:	428e      	cmp	r6, r1
 800dca0:	dc51      	bgt.n	800dd46 <__ieee754_pow+0x116>
 800dca2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800dca6:	428e      	cmp	r6, r1
 800dca8:	f340 84af 	ble.w	800e60a <__ieee754_pow+0x9da>
 800dcac:	1531      	asrs	r1, r6, #20
 800dcae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dcb2:	2914      	cmp	r1, #20
 800dcb4:	dd0f      	ble.n	800dcd6 <__ieee754_pow+0xa6>
 800dcb6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800dcba:	fa20 fc01 	lsr.w	ip, r0, r1
 800dcbe:	fa0c f101 	lsl.w	r1, ip, r1
 800dcc2:	4281      	cmp	r1, r0
 800dcc4:	f040 84a1 	bne.w	800e60a <__ieee754_pow+0x9da>
 800dcc8:	f00c 0c01 	and.w	ip, ip, #1
 800dccc:	f1cc 0102 	rsb	r1, ip, #2
 800dcd0:	9100      	str	r1, [sp, #0]
 800dcd2:	b180      	cbz	r0, 800dcf6 <__ieee754_pow+0xc6>
 800dcd4:	e059      	b.n	800dd8a <__ieee754_pow+0x15a>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d155      	bne.n	800dd86 <__ieee754_pow+0x156>
 800dcda:	f1c1 0114 	rsb	r1, r1, #20
 800dcde:	fa46 fc01 	asr.w	ip, r6, r1
 800dce2:	fa0c f101 	lsl.w	r1, ip, r1
 800dce6:	42b1      	cmp	r1, r6
 800dce8:	f040 848c 	bne.w	800e604 <__ieee754_pow+0x9d4>
 800dcec:	f00c 0c01 	and.w	ip, ip, #1
 800dcf0:	f1cc 0102 	rsb	r1, ip, #2
 800dcf4:	9100      	str	r1, [sp, #0]
 800dcf6:	4959      	ldr	r1, [pc, #356]	; (800de5c <__ieee754_pow+0x22c>)
 800dcf8:	428e      	cmp	r6, r1
 800dcfa:	d12d      	bne.n	800dd58 <__ieee754_pow+0x128>
 800dcfc:	2f00      	cmp	r7, #0
 800dcfe:	da79      	bge.n	800ddf4 <__ieee754_pow+0x1c4>
 800dd00:	4956      	ldr	r1, [pc, #344]	; (800de5c <__ieee754_pow+0x22c>)
 800dd02:	2000      	movs	r0, #0
 800dd04:	f7f2 fd5a 	bl	80007bc <__aeabi_ddiv>
 800dd08:	e016      	b.n	800dd38 <__ieee754_pow+0x108>
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	9100      	str	r1, [sp, #0]
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d13b      	bne.n	800dd8a <__ieee754_pow+0x15a>
 800dd12:	494f      	ldr	r1, [pc, #316]	; (800de50 <__ieee754_pow+0x220>)
 800dd14:	428e      	cmp	r6, r1
 800dd16:	d1ee      	bne.n	800dcf6 <__ieee754_pow+0xc6>
 800dd18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dd1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd20:	ea53 0308 	orrs.w	r3, r3, r8
 800dd24:	f000 8466 	beq.w	800e5f4 <__ieee754_pow+0x9c4>
 800dd28:	4b4d      	ldr	r3, [pc, #308]	; (800de60 <__ieee754_pow+0x230>)
 800dd2a:	429c      	cmp	r4, r3
 800dd2c:	dd0d      	ble.n	800dd4a <__ieee754_pow+0x11a>
 800dd2e:	2f00      	cmp	r7, #0
 800dd30:	f280 8464 	bge.w	800e5fc <__ieee754_pow+0x9cc>
 800dd34:	2000      	movs	r0, #0
 800dd36:	2100      	movs	r1, #0
 800dd38:	ec41 0b10 	vmov	d0, r0, r1
 800dd3c:	b00d      	add	sp, #52	; 0x34
 800dd3e:	ecbd 8b06 	vpop	{d8-d10}
 800dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd46:	2102      	movs	r1, #2
 800dd48:	e7e0      	b.n	800dd0c <__ieee754_pow+0xdc>
 800dd4a:	2f00      	cmp	r7, #0
 800dd4c:	daf2      	bge.n	800dd34 <__ieee754_pow+0x104>
 800dd4e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800dd52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd56:	e7ef      	b.n	800dd38 <__ieee754_pow+0x108>
 800dd58:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800dd5c:	d104      	bne.n	800dd68 <__ieee754_pow+0x138>
 800dd5e:	4610      	mov	r0, r2
 800dd60:	4619      	mov	r1, r3
 800dd62:	f7f2 fc01 	bl	8000568 <__aeabi_dmul>
 800dd66:	e7e7      	b.n	800dd38 <__ieee754_pow+0x108>
 800dd68:	493e      	ldr	r1, [pc, #248]	; (800de64 <__ieee754_pow+0x234>)
 800dd6a:	428f      	cmp	r7, r1
 800dd6c:	d10d      	bne.n	800dd8a <__ieee754_pow+0x15a>
 800dd6e:	f1b9 0f00 	cmp.w	r9, #0
 800dd72:	db0a      	blt.n	800dd8a <__ieee754_pow+0x15a>
 800dd74:	ec43 2b10 	vmov	d0, r2, r3
 800dd78:	b00d      	add	sp, #52	; 0x34
 800dd7a:	ecbd 8b06 	vpop	{d8-d10}
 800dd7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd82:	f000 be83 	b.w	800ea8c <__ieee754_sqrt>
 800dd86:	2100      	movs	r1, #0
 800dd88:	9100      	str	r1, [sp, #0]
 800dd8a:	ec43 2b10 	vmov	d0, r2, r3
 800dd8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd92:	f7ff faa1 	bl	800d2d8 <fabs>
 800dd96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd9a:	ec51 0b10 	vmov	r0, r1, d0
 800dd9e:	f1b8 0f00 	cmp.w	r8, #0
 800dda2:	d12a      	bne.n	800ddfa <__ieee754_pow+0x1ca>
 800dda4:	b12c      	cbz	r4, 800ddb2 <__ieee754_pow+0x182>
 800dda6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800de5c <__ieee754_pow+0x22c>
 800ddaa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800ddae:	45e6      	cmp	lr, ip
 800ddb0:	d123      	bne.n	800ddfa <__ieee754_pow+0x1ca>
 800ddb2:	2f00      	cmp	r7, #0
 800ddb4:	da05      	bge.n	800ddc2 <__ieee754_pow+0x192>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	2000      	movs	r0, #0
 800ddbc:	4927      	ldr	r1, [pc, #156]	; (800de5c <__ieee754_pow+0x22c>)
 800ddbe:	f7f2 fcfd 	bl	80007bc <__aeabi_ddiv>
 800ddc2:	f1b9 0f00 	cmp.w	r9, #0
 800ddc6:	dab7      	bge.n	800dd38 <__ieee754_pow+0x108>
 800ddc8:	9b00      	ldr	r3, [sp, #0]
 800ddca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ddce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ddd2:	4323      	orrs	r3, r4
 800ddd4:	d108      	bne.n	800dde8 <__ieee754_pow+0x1b8>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4610      	mov	r0, r2
 800dddc:	4619      	mov	r1, r3
 800ddde:	f7f2 fa0b 	bl	80001f8 <__aeabi_dsub>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	e78d      	b.n	800dd04 <__ieee754_pow+0xd4>
 800dde8:	9b00      	ldr	r3, [sp, #0]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d1a4      	bne.n	800dd38 <__ieee754_pow+0x108>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	e79e      	b.n	800dd38 <__ieee754_pow+0x108>
 800ddfa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800ddfe:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800de02:	950a      	str	r5, [sp, #40]	; 0x28
 800de04:	9d00      	ldr	r5, [sp, #0]
 800de06:	46ac      	mov	ip, r5
 800de08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800de0a:	ea5c 0505 	orrs.w	r5, ip, r5
 800de0e:	d0e4      	beq.n	800ddda <__ieee754_pow+0x1aa>
 800de10:	4b15      	ldr	r3, [pc, #84]	; (800de68 <__ieee754_pow+0x238>)
 800de12:	429e      	cmp	r6, r3
 800de14:	f340 80fc 	ble.w	800e010 <__ieee754_pow+0x3e0>
 800de18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800de1c:	429e      	cmp	r6, r3
 800de1e:	4b10      	ldr	r3, [pc, #64]	; (800de60 <__ieee754_pow+0x230>)
 800de20:	dd07      	ble.n	800de32 <__ieee754_pow+0x202>
 800de22:	429c      	cmp	r4, r3
 800de24:	dc0a      	bgt.n	800de3c <__ieee754_pow+0x20c>
 800de26:	2f00      	cmp	r7, #0
 800de28:	da84      	bge.n	800dd34 <__ieee754_pow+0x104>
 800de2a:	a307      	add	r3, pc, #28	; (adr r3, 800de48 <__ieee754_pow+0x218>)
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	e795      	b.n	800dd5e <__ieee754_pow+0x12e>
 800de32:	429c      	cmp	r4, r3
 800de34:	dbf7      	blt.n	800de26 <__ieee754_pow+0x1f6>
 800de36:	4b09      	ldr	r3, [pc, #36]	; (800de5c <__ieee754_pow+0x22c>)
 800de38:	429c      	cmp	r4, r3
 800de3a:	dd17      	ble.n	800de6c <__ieee754_pow+0x23c>
 800de3c:	2f00      	cmp	r7, #0
 800de3e:	dcf4      	bgt.n	800de2a <__ieee754_pow+0x1fa>
 800de40:	e778      	b.n	800dd34 <__ieee754_pow+0x104>
 800de42:	bf00      	nop
 800de44:	f3af 8000 	nop.w
 800de48:	8800759c 	.word	0x8800759c
 800de4c:	7e37e43c 	.word	0x7e37e43c
 800de50:	7ff00000 	.word	0x7ff00000
 800de54:	0800fbe8 	.word	0x0800fbe8
 800de58:	433fffff 	.word	0x433fffff
 800de5c:	3ff00000 	.word	0x3ff00000
 800de60:	3fefffff 	.word	0x3fefffff
 800de64:	3fe00000 	.word	0x3fe00000
 800de68:	41e00000 	.word	0x41e00000
 800de6c:	4b64      	ldr	r3, [pc, #400]	; (800e000 <__ieee754_pow+0x3d0>)
 800de6e:	2200      	movs	r2, #0
 800de70:	f7f2 f9c2 	bl	80001f8 <__aeabi_dsub>
 800de74:	a356      	add	r3, pc, #344	; (adr r3, 800dfd0 <__ieee754_pow+0x3a0>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	4604      	mov	r4, r0
 800de7c:	460d      	mov	r5, r1
 800de7e:	f7f2 fb73 	bl	8000568 <__aeabi_dmul>
 800de82:	a355      	add	r3, pc, #340	; (adr r3, 800dfd8 <__ieee754_pow+0x3a8>)
 800de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de88:	4606      	mov	r6, r0
 800de8a:	460f      	mov	r7, r1
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 fb6a 	bl	8000568 <__aeabi_dmul>
 800de94:	4b5b      	ldr	r3, [pc, #364]	; (800e004 <__ieee754_pow+0x3d4>)
 800de96:	4682      	mov	sl, r0
 800de98:	468b      	mov	fp, r1
 800de9a:	2200      	movs	r2, #0
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	f7f2 fb62 	bl	8000568 <__aeabi_dmul>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	a14d      	add	r1, pc, #308	; (adr r1, 800dfe0 <__ieee754_pow+0x3b0>)
 800deaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deae:	f7f2 f9a3 	bl	80001f8 <__aeabi_dsub>
 800deb2:	4622      	mov	r2, r4
 800deb4:	462b      	mov	r3, r5
 800deb6:	f7f2 fb57 	bl	8000568 <__aeabi_dmul>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	2000      	movs	r0, #0
 800dec0:	4951      	ldr	r1, [pc, #324]	; (800e008 <__ieee754_pow+0x3d8>)
 800dec2:	f7f2 f999 	bl	80001f8 <__aeabi_dsub>
 800dec6:	4622      	mov	r2, r4
 800dec8:	4680      	mov	r8, r0
 800deca:	4689      	mov	r9, r1
 800decc:	462b      	mov	r3, r5
 800dece:	4620      	mov	r0, r4
 800ded0:	4629      	mov	r1, r5
 800ded2:	f7f2 fb49 	bl	8000568 <__aeabi_dmul>
 800ded6:	4602      	mov	r2, r0
 800ded8:	460b      	mov	r3, r1
 800deda:	4640      	mov	r0, r8
 800dedc:	4649      	mov	r1, r9
 800dede:	f7f2 fb43 	bl	8000568 <__aeabi_dmul>
 800dee2:	a341      	add	r3, pc, #260	; (adr r3, 800dfe8 <__ieee754_pow+0x3b8>)
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	f7f2 fb3e 	bl	8000568 <__aeabi_dmul>
 800deec:	4602      	mov	r2, r0
 800deee:	460b      	mov	r3, r1
 800def0:	4650      	mov	r0, sl
 800def2:	4659      	mov	r1, fp
 800def4:	f7f2 f980 	bl	80001f8 <__aeabi_dsub>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	4680      	mov	r8, r0
 800defe:	4689      	mov	r9, r1
 800df00:	4630      	mov	r0, r6
 800df02:	4639      	mov	r1, r7
 800df04:	f7f2 f97a 	bl	80001fc <__adddf3>
 800df08:	2400      	movs	r4, #0
 800df0a:	4632      	mov	r2, r6
 800df0c:	463b      	mov	r3, r7
 800df0e:	4620      	mov	r0, r4
 800df10:	460d      	mov	r5, r1
 800df12:	f7f2 f971 	bl	80001f8 <__aeabi_dsub>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4640      	mov	r0, r8
 800df1c:	4649      	mov	r1, r9
 800df1e:	f7f2 f96b 	bl	80001f8 <__aeabi_dsub>
 800df22:	9b00      	ldr	r3, [sp, #0]
 800df24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df26:	3b01      	subs	r3, #1
 800df28:	4313      	orrs	r3, r2
 800df2a:	4682      	mov	sl, r0
 800df2c:	468b      	mov	fp, r1
 800df2e:	f040 81f1 	bne.w	800e314 <__ieee754_pow+0x6e4>
 800df32:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dff0 <__ieee754_pow+0x3c0>
 800df36:	eeb0 8a47 	vmov.f32	s16, s14
 800df3a:	eef0 8a67 	vmov.f32	s17, s15
 800df3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df42:	2600      	movs	r6, #0
 800df44:	4632      	mov	r2, r6
 800df46:	463b      	mov	r3, r7
 800df48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df4c:	f7f2 f954 	bl	80001f8 <__aeabi_dsub>
 800df50:	4622      	mov	r2, r4
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 fb08 	bl	8000568 <__aeabi_dmul>
 800df58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df5c:	4680      	mov	r8, r0
 800df5e:	4689      	mov	r9, r1
 800df60:	4650      	mov	r0, sl
 800df62:	4659      	mov	r1, fp
 800df64:	f7f2 fb00 	bl	8000568 <__aeabi_dmul>
 800df68:	4602      	mov	r2, r0
 800df6a:	460b      	mov	r3, r1
 800df6c:	4640      	mov	r0, r8
 800df6e:	4649      	mov	r1, r9
 800df70:	f7f2 f944 	bl	80001fc <__adddf3>
 800df74:	4632      	mov	r2, r6
 800df76:	463b      	mov	r3, r7
 800df78:	4680      	mov	r8, r0
 800df7a:	4689      	mov	r9, r1
 800df7c:	4620      	mov	r0, r4
 800df7e:	4629      	mov	r1, r5
 800df80:	f7f2 faf2 	bl	8000568 <__aeabi_dmul>
 800df84:	460b      	mov	r3, r1
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	4602      	mov	r2, r0
 800df8c:	4649      	mov	r1, r9
 800df8e:	4640      	mov	r0, r8
 800df90:	f7f2 f934 	bl	80001fc <__adddf3>
 800df94:	4b1d      	ldr	r3, [pc, #116]	; (800e00c <__ieee754_pow+0x3dc>)
 800df96:	4299      	cmp	r1, r3
 800df98:	ec45 4b19 	vmov	d9, r4, r5
 800df9c:	4606      	mov	r6, r0
 800df9e:	460f      	mov	r7, r1
 800dfa0:	468b      	mov	fp, r1
 800dfa2:	f340 82fe 	ble.w	800e5a2 <__ieee754_pow+0x972>
 800dfa6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dfaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dfae:	4303      	orrs	r3, r0
 800dfb0:	f000 81f0 	beq.w	800e394 <__ieee754_pow+0x764>
 800dfb4:	a310      	add	r3, pc, #64	; (adr r3, 800dff8 <__ieee754_pow+0x3c8>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	ec51 0b18 	vmov	r0, r1, d8
 800dfbe:	f7f2 fad3 	bl	8000568 <__aeabi_dmul>
 800dfc2:	a30d      	add	r3, pc, #52	; (adr r3, 800dff8 <__ieee754_pow+0x3c8>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	e6cb      	b.n	800dd62 <__ieee754_pow+0x132>
 800dfca:	bf00      	nop
 800dfcc:	f3af 8000 	nop.w
 800dfd0:	60000000 	.word	0x60000000
 800dfd4:	3ff71547 	.word	0x3ff71547
 800dfd8:	f85ddf44 	.word	0xf85ddf44
 800dfdc:	3e54ae0b 	.word	0x3e54ae0b
 800dfe0:	55555555 	.word	0x55555555
 800dfe4:	3fd55555 	.word	0x3fd55555
 800dfe8:	652b82fe 	.word	0x652b82fe
 800dfec:	3ff71547 	.word	0x3ff71547
 800dff0:	00000000 	.word	0x00000000
 800dff4:	bff00000 	.word	0xbff00000
 800dff8:	8800759c 	.word	0x8800759c
 800dffc:	7e37e43c 	.word	0x7e37e43c
 800e000:	3ff00000 	.word	0x3ff00000
 800e004:	3fd00000 	.word	0x3fd00000
 800e008:	3fe00000 	.word	0x3fe00000
 800e00c:	408fffff 	.word	0x408fffff
 800e010:	4bd7      	ldr	r3, [pc, #860]	; (800e370 <__ieee754_pow+0x740>)
 800e012:	ea03 0309 	and.w	r3, r3, r9
 800e016:	2200      	movs	r2, #0
 800e018:	b92b      	cbnz	r3, 800e026 <__ieee754_pow+0x3f6>
 800e01a:	4bd6      	ldr	r3, [pc, #856]	; (800e374 <__ieee754_pow+0x744>)
 800e01c:	f7f2 faa4 	bl	8000568 <__aeabi_dmul>
 800e020:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e024:	460c      	mov	r4, r1
 800e026:	1523      	asrs	r3, r4, #20
 800e028:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e02c:	4413      	add	r3, r2
 800e02e:	9309      	str	r3, [sp, #36]	; 0x24
 800e030:	4bd1      	ldr	r3, [pc, #836]	; (800e378 <__ieee754_pow+0x748>)
 800e032:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e036:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e03a:	429c      	cmp	r4, r3
 800e03c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e040:	dd08      	ble.n	800e054 <__ieee754_pow+0x424>
 800e042:	4bce      	ldr	r3, [pc, #824]	; (800e37c <__ieee754_pow+0x74c>)
 800e044:	429c      	cmp	r4, r3
 800e046:	f340 8163 	ble.w	800e310 <__ieee754_pow+0x6e0>
 800e04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e04c:	3301      	adds	r3, #1
 800e04e:	9309      	str	r3, [sp, #36]	; 0x24
 800e050:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e054:	2400      	movs	r4, #0
 800e056:	00e3      	lsls	r3, r4, #3
 800e058:	930b      	str	r3, [sp, #44]	; 0x2c
 800e05a:	4bc9      	ldr	r3, [pc, #804]	; (800e380 <__ieee754_pow+0x750>)
 800e05c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e060:	ed93 7b00 	vldr	d7, [r3]
 800e064:	4629      	mov	r1, r5
 800e066:	ec53 2b17 	vmov	r2, r3, d7
 800e06a:	eeb0 8a47 	vmov.f32	s16, s14
 800e06e:	eef0 8a67 	vmov.f32	s17, s15
 800e072:	4682      	mov	sl, r0
 800e074:	f7f2 f8c0 	bl	80001f8 <__aeabi_dsub>
 800e078:	4652      	mov	r2, sl
 800e07a:	4606      	mov	r6, r0
 800e07c:	460f      	mov	r7, r1
 800e07e:	462b      	mov	r3, r5
 800e080:	ec51 0b18 	vmov	r0, r1, d8
 800e084:	f7f2 f8ba 	bl	80001fc <__adddf3>
 800e088:	4602      	mov	r2, r0
 800e08a:	460b      	mov	r3, r1
 800e08c:	2000      	movs	r0, #0
 800e08e:	49bd      	ldr	r1, [pc, #756]	; (800e384 <__ieee754_pow+0x754>)
 800e090:	f7f2 fb94 	bl	80007bc <__aeabi_ddiv>
 800e094:	ec41 0b19 	vmov	d9, r0, r1
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	4630      	mov	r0, r6
 800e09e:	4639      	mov	r1, r7
 800e0a0:	f7f2 fa62 	bl	8000568 <__aeabi_dmul>
 800e0a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e0a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	9304      	str	r3, [sp, #16]
 800e0b4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e0b8:	46ab      	mov	fp, r5
 800e0ba:	106d      	asrs	r5, r5, #1
 800e0bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e0c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e0c4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	4649      	mov	r1, r9
 800e0ce:	4614      	mov	r4, r2
 800e0d0:	461d      	mov	r5, r3
 800e0d2:	f7f2 fa49 	bl	8000568 <__aeabi_dmul>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	4630      	mov	r0, r6
 800e0dc:	4639      	mov	r1, r7
 800e0de:	f7f2 f88b 	bl	80001f8 <__aeabi_dsub>
 800e0e2:	ec53 2b18 	vmov	r2, r3, d8
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 f883 	bl	80001f8 <__aeabi_dsub>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4650      	mov	r0, sl
 800e0f8:	4659      	mov	r1, fp
 800e0fa:	f7f2 f87d 	bl	80001f8 <__aeabi_dsub>
 800e0fe:	4642      	mov	r2, r8
 800e100:	464b      	mov	r3, r9
 800e102:	f7f2 fa31 	bl	8000568 <__aeabi_dmul>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	f7f2 f873 	bl	80001f8 <__aeabi_dsub>
 800e112:	ec53 2b19 	vmov	r2, r3, d9
 800e116:	f7f2 fa27 	bl	8000568 <__aeabi_dmul>
 800e11a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e11e:	ec41 0b18 	vmov	d8, r0, r1
 800e122:	4610      	mov	r0, r2
 800e124:	4619      	mov	r1, r3
 800e126:	f7f2 fa1f 	bl	8000568 <__aeabi_dmul>
 800e12a:	a37d      	add	r3, pc, #500	; (adr r3, 800e320 <__ieee754_pow+0x6f0>)
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	4604      	mov	r4, r0
 800e132:	460d      	mov	r5, r1
 800e134:	f7f2 fa18 	bl	8000568 <__aeabi_dmul>
 800e138:	a37b      	add	r3, pc, #492	; (adr r3, 800e328 <__ieee754_pow+0x6f8>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 f85d 	bl	80001fc <__adddf3>
 800e142:	4622      	mov	r2, r4
 800e144:	462b      	mov	r3, r5
 800e146:	f7f2 fa0f 	bl	8000568 <__aeabi_dmul>
 800e14a:	a379      	add	r3, pc, #484	; (adr r3, 800e330 <__ieee754_pow+0x700>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	f7f2 f854 	bl	80001fc <__adddf3>
 800e154:	4622      	mov	r2, r4
 800e156:	462b      	mov	r3, r5
 800e158:	f7f2 fa06 	bl	8000568 <__aeabi_dmul>
 800e15c:	a376      	add	r3, pc, #472	; (adr r3, 800e338 <__ieee754_pow+0x708>)
 800e15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e162:	f7f2 f84b 	bl	80001fc <__adddf3>
 800e166:	4622      	mov	r2, r4
 800e168:	462b      	mov	r3, r5
 800e16a:	f7f2 f9fd 	bl	8000568 <__aeabi_dmul>
 800e16e:	a374      	add	r3, pc, #464	; (adr r3, 800e340 <__ieee754_pow+0x710>)
 800e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e174:	f7f2 f842 	bl	80001fc <__adddf3>
 800e178:	4622      	mov	r2, r4
 800e17a:	462b      	mov	r3, r5
 800e17c:	f7f2 f9f4 	bl	8000568 <__aeabi_dmul>
 800e180:	a371      	add	r3, pc, #452	; (adr r3, 800e348 <__ieee754_pow+0x718>)
 800e182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e186:	f7f2 f839 	bl	80001fc <__adddf3>
 800e18a:	4622      	mov	r2, r4
 800e18c:	4606      	mov	r6, r0
 800e18e:	460f      	mov	r7, r1
 800e190:	462b      	mov	r3, r5
 800e192:	4620      	mov	r0, r4
 800e194:	4629      	mov	r1, r5
 800e196:	f7f2 f9e7 	bl	8000568 <__aeabi_dmul>
 800e19a:	4602      	mov	r2, r0
 800e19c:	460b      	mov	r3, r1
 800e19e:	4630      	mov	r0, r6
 800e1a0:	4639      	mov	r1, r7
 800e1a2:	f7f2 f9e1 	bl	8000568 <__aeabi_dmul>
 800e1a6:	4642      	mov	r2, r8
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	464b      	mov	r3, r9
 800e1ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1b2:	f7f2 f823 	bl	80001fc <__adddf3>
 800e1b6:	ec53 2b18 	vmov	r2, r3, d8
 800e1ba:	f7f2 f9d5 	bl	8000568 <__aeabi_dmul>
 800e1be:	4622      	mov	r2, r4
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	f7f2 f81b 	bl	80001fc <__adddf3>
 800e1c6:	4642      	mov	r2, r8
 800e1c8:	4682      	mov	sl, r0
 800e1ca:	468b      	mov	fp, r1
 800e1cc:	464b      	mov	r3, r9
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	f7f2 f9c9 	bl	8000568 <__aeabi_dmul>
 800e1d6:	4b6c      	ldr	r3, [pc, #432]	; (800e388 <__ieee754_pow+0x758>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	4606      	mov	r6, r0
 800e1dc:	460f      	mov	r7, r1
 800e1de:	f7f2 f80d 	bl	80001fc <__adddf3>
 800e1e2:	4652      	mov	r2, sl
 800e1e4:	465b      	mov	r3, fp
 800e1e6:	f7f2 f809 	bl	80001fc <__adddf3>
 800e1ea:	9c04      	ldr	r4, [sp, #16]
 800e1ec:	460d      	mov	r5, r1
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4640      	mov	r0, r8
 800e1f4:	4649      	mov	r1, r9
 800e1f6:	f7f2 f9b7 	bl	8000568 <__aeabi_dmul>
 800e1fa:	4b63      	ldr	r3, [pc, #396]	; (800e388 <__ieee754_pow+0x758>)
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	4689      	mov	r9, r1
 800e200:	2200      	movs	r2, #0
 800e202:	4620      	mov	r0, r4
 800e204:	4629      	mov	r1, r5
 800e206:	f7f1 fff7 	bl	80001f8 <__aeabi_dsub>
 800e20a:	4632      	mov	r2, r6
 800e20c:	463b      	mov	r3, r7
 800e20e:	f7f1 fff3 	bl	80001f8 <__aeabi_dsub>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4650      	mov	r0, sl
 800e218:	4659      	mov	r1, fp
 800e21a:	f7f1 ffed 	bl	80001f8 <__aeabi_dsub>
 800e21e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e222:	f7f2 f9a1 	bl	8000568 <__aeabi_dmul>
 800e226:	4622      	mov	r2, r4
 800e228:	4606      	mov	r6, r0
 800e22a:	460f      	mov	r7, r1
 800e22c:	462b      	mov	r3, r5
 800e22e:	ec51 0b18 	vmov	r0, r1, d8
 800e232:	f7f2 f999 	bl	8000568 <__aeabi_dmul>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4630      	mov	r0, r6
 800e23c:	4639      	mov	r1, r7
 800e23e:	f7f1 ffdd 	bl	80001fc <__adddf3>
 800e242:	4606      	mov	r6, r0
 800e244:	460f      	mov	r7, r1
 800e246:	4602      	mov	r2, r0
 800e248:	460b      	mov	r3, r1
 800e24a:	4640      	mov	r0, r8
 800e24c:	4649      	mov	r1, r9
 800e24e:	f7f1 ffd5 	bl	80001fc <__adddf3>
 800e252:	9c04      	ldr	r4, [sp, #16]
 800e254:	a33e      	add	r3, pc, #248	; (adr r3, 800e350 <__ieee754_pow+0x720>)
 800e256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25a:	4620      	mov	r0, r4
 800e25c:	460d      	mov	r5, r1
 800e25e:	f7f2 f983 	bl	8000568 <__aeabi_dmul>
 800e262:	4642      	mov	r2, r8
 800e264:	ec41 0b18 	vmov	d8, r0, r1
 800e268:	464b      	mov	r3, r9
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f1 ffc3 	bl	80001f8 <__aeabi_dsub>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4630      	mov	r0, r6
 800e278:	4639      	mov	r1, r7
 800e27a:	f7f1 ffbd 	bl	80001f8 <__aeabi_dsub>
 800e27e:	a336      	add	r3, pc, #216	; (adr r3, 800e358 <__ieee754_pow+0x728>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f970 	bl	8000568 <__aeabi_dmul>
 800e288:	a335      	add	r3, pc, #212	; (adr r3, 800e360 <__ieee754_pow+0x730>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	4606      	mov	r6, r0
 800e290:	460f      	mov	r7, r1
 800e292:	4620      	mov	r0, r4
 800e294:	4629      	mov	r1, r5
 800e296:	f7f2 f967 	bl	8000568 <__aeabi_dmul>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	4630      	mov	r0, r6
 800e2a0:	4639      	mov	r1, r7
 800e2a2:	f7f1 ffab 	bl	80001fc <__adddf3>
 800e2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2a8:	4b38      	ldr	r3, [pc, #224]	; (800e38c <__ieee754_pow+0x75c>)
 800e2aa:	4413      	add	r3, r2
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f7f1 ffa4 	bl	80001fc <__adddf3>
 800e2b4:	4682      	mov	sl, r0
 800e2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b8:	468b      	mov	fp, r1
 800e2ba:	f7f2 f8eb 	bl	8000494 <__aeabi_i2d>
 800e2be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2c0:	4b33      	ldr	r3, [pc, #204]	; (800e390 <__ieee754_pow+0x760>)
 800e2c2:	4413      	add	r3, r2
 800e2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	460f      	mov	r7, r1
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	ec51 0b18 	vmov	r0, r1, d8
 800e2d4:	f7f1 ff92 	bl	80001fc <__adddf3>
 800e2d8:	4642      	mov	r2, r8
 800e2da:	464b      	mov	r3, r9
 800e2dc:	f7f1 ff8e 	bl	80001fc <__adddf3>
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	f7f1 ff8a 	bl	80001fc <__adddf3>
 800e2e8:	9c04      	ldr	r4, [sp, #16]
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	463b      	mov	r3, r7
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	f7f1 ff81 	bl	80001f8 <__aeabi_dsub>
 800e2f6:	4642      	mov	r2, r8
 800e2f8:	464b      	mov	r3, r9
 800e2fa:	f7f1 ff7d 	bl	80001f8 <__aeabi_dsub>
 800e2fe:	ec53 2b18 	vmov	r2, r3, d8
 800e302:	f7f1 ff79 	bl	80001f8 <__aeabi_dsub>
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	4650      	mov	r0, sl
 800e30c:	4659      	mov	r1, fp
 800e30e:	e606      	b.n	800df1e <__ieee754_pow+0x2ee>
 800e310:	2401      	movs	r4, #1
 800e312:	e6a0      	b.n	800e056 <__ieee754_pow+0x426>
 800e314:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e368 <__ieee754_pow+0x738>
 800e318:	e60d      	b.n	800df36 <__ieee754_pow+0x306>
 800e31a:	bf00      	nop
 800e31c:	f3af 8000 	nop.w
 800e320:	4a454eef 	.word	0x4a454eef
 800e324:	3fca7e28 	.word	0x3fca7e28
 800e328:	93c9db65 	.word	0x93c9db65
 800e32c:	3fcd864a 	.word	0x3fcd864a
 800e330:	a91d4101 	.word	0xa91d4101
 800e334:	3fd17460 	.word	0x3fd17460
 800e338:	518f264d 	.word	0x518f264d
 800e33c:	3fd55555 	.word	0x3fd55555
 800e340:	db6fabff 	.word	0xdb6fabff
 800e344:	3fdb6db6 	.word	0x3fdb6db6
 800e348:	33333303 	.word	0x33333303
 800e34c:	3fe33333 	.word	0x3fe33333
 800e350:	e0000000 	.word	0xe0000000
 800e354:	3feec709 	.word	0x3feec709
 800e358:	dc3a03fd 	.word	0xdc3a03fd
 800e35c:	3feec709 	.word	0x3feec709
 800e360:	145b01f5 	.word	0x145b01f5
 800e364:	be3e2fe0 	.word	0xbe3e2fe0
 800e368:	00000000 	.word	0x00000000
 800e36c:	3ff00000 	.word	0x3ff00000
 800e370:	7ff00000 	.word	0x7ff00000
 800e374:	43400000 	.word	0x43400000
 800e378:	0003988e 	.word	0x0003988e
 800e37c:	000bb679 	.word	0x000bb679
 800e380:	0800fc20 	.word	0x0800fc20
 800e384:	3ff00000 	.word	0x3ff00000
 800e388:	40080000 	.word	0x40080000
 800e38c:	0800fc40 	.word	0x0800fc40
 800e390:	0800fc30 	.word	0x0800fc30
 800e394:	a3b5      	add	r3, pc, #724	; (adr r3, 800e66c <__ieee754_pow+0xa3c>)
 800e396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	f7f1 ff2d 	bl	80001fc <__adddf3>
 800e3a2:	4622      	mov	r2, r4
 800e3a4:	ec41 0b1a 	vmov	d10, r0, r1
 800e3a8:	462b      	mov	r3, r5
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7f1 ff23 	bl	80001f8 <__aeabi_dsub>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	ec51 0b1a 	vmov	r0, r1, d10
 800e3ba:	f7f2 fb65 	bl	8000a88 <__aeabi_dcmpgt>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f47f adf8 	bne.w	800dfb4 <__ieee754_pow+0x384>
 800e3c4:	4aa4      	ldr	r2, [pc, #656]	; (800e658 <__ieee754_pow+0xa28>)
 800e3c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	f340 810b 	ble.w	800e5e6 <__ieee754_pow+0x9b6>
 800e3d0:	151b      	asrs	r3, r3, #20
 800e3d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e3d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e3da:	fa4a f303 	asr.w	r3, sl, r3
 800e3de:	445b      	add	r3, fp
 800e3e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e3e4:	4e9d      	ldr	r6, [pc, #628]	; (800e65c <__ieee754_pow+0xa2c>)
 800e3e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e3ea:	4116      	asrs	r6, r2
 800e3ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	ea23 0106 	bic.w	r1, r3, r6
 800e3f6:	f1c2 0214 	rsb	r2, r2, #20
 800e3fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e3fe:	fa4a fa02 	asr.w	sl, sl, r2
 800e402:	f1bb 0f00 	cmp.w	fp, #0
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	4620      	mov	r0, r4
 800e40c:	4629      	mov	r1, r5
 800e40e:	bfb8      	it	lt
 800e410:	f1ca 0a00 	rsblt	sl, sl, #0
 800e414:	f7f1 fef0 	bl	80001f8 <__aeabi_dsub>
 800e418:	ec41 0b19 	vmov	d9, r0, r1
 800e41c:	4642      	mov	r2, r8
 800e41e:	464b      	mov	r3, r9
 800e420:	ec51 0b19 	vmov	r0, r1, d9
 800e424:	f7f1 feea 	bl	80001fc <__adddf3>
 800e428:	2400      	movs	r4, #0
 800e42a:	a379      	add	r3, pc, #484	; (adr r3, 800e610 <__ieee754_pow+0x9e0>)
 800e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e430:	4620      	mov	r0, r4
 800e432:	460d      	mov	r5, r1
 800e434:	f7f2 f898 	bl	8000568 <__aeabi_dmul>
 800e438:	ec53 2b19 	vmov	r2, r3, d9
 800e43c:	4606      	mov	r6, r0
 800e43e:	460f      	mov	r7, r1
 800e440:	4620      	mov	r0, r4
 800e442:	4629      	mov	r1, r5
 800e444:	f7f1 fed8 	bl	80001f8 <__aeabi_dsub>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4640      	mov	r0, r8
 800e44e:	4649      	mov	r1, r9
 800e450:	f7f1 fed2 	bl	80001f8 <__aeabi_dsub>
 800e454:	a370      	add	r3, pc, #448	; (adr r3, 800e618 <__ieee754_pow+0x9e8>)
 800e456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45a:	f7f2 f885 	bl	8000568 <__aeabi_dmul>
 800e45e:	a370      	add	r3, pc, #448	; (adr r3, 800e620 <__ieee754_pow+0x9f0>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	4680      	mov	r8, r0
 800e466:	4689      	mov	r9, r1
 800e468:	4620      	mov	r0, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f2 f87c 	bl	8000568 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4640      	mov	r0, r8
 800e476:	4649      	mov	r1, r9
 800e478:	f7f1 fec0 	bl	80001fc <__adddf3>
 800e47c:	4604      	mov	r4, r0
 800e47e:	460d      	mov	r5, r1
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f7f1 feb8 	bl	80001fc <__adddf3>
 800e48c:	4632      	mov	r2, r6
 800e48e:	463b      	mov	r3, r7
 800e490:	4680      	mov	r8, r0
 800e492:	4689      	mov	r9, r1
 800e494:	f7f1 feb0 	bl	80001f8 <__aeabi_dsub>
 800e498:	4602      	mov	r2, r0
 800e49a:	460b      	mov	r3, r1
 800e49c:	4620      	mov	r0, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7f1 feaa 	bl	80001f8 <__aeabi_dsub>
 800e4a4:	4642      	mov	r2, r8
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	460f      	mov	r7, r1
 800e4aa:	464b      	mov	r3, r9
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	f7f2 f85a 	bl	8000568 <__aeabi_dmul>
 800e4b4:	a35c      	add	r3, pc, #368	; (adr r3, 800e628 <__ieee754_pow+0x9f8>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	460d      	mov	r5, r1
 800e4be:	f7f2 f853 	bl	8000568 <__aeabi_dmul>
 800e4c2:	a35b      	add	r3, pc, #364	; (adr r3, 800e630 <__ieee754_pow+0xa00>)
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	f7f1 fe96 	bl	80001f8 <__aeabi_dsub>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	462b      	mov	r3, r5
 800e4d0:	f7f2 f84a 	bl	8000568 <__aeabi_dmul>
 800e4d4:	a358      	add	r3, pc, #352	; (adr r3, 800e638 <__ieee754_pow+0xa08>)
 800e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4da:	f7f1 fe8f 	bl	80001fc <__adddf3>
 800e4de:	4622      	mov	r2, r4
 800e4e0:	462b      	mov	r3, r5
 800e4e2:	f7f2 f841 	bl	8000568 <__aeabi_dmul>
 800e4e6:	a356      	add	r3, pc, #344	; (adr r3, 800e640 <__ieee754_pow+0xa10>)
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	f7f1 fe84 	bl	80001f8 <__aeabi_dsub>
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	462b      	mov	r3, r5
 800e4f4:	f7f2 f838 	bl	8000568 <__aeabi_dmul>
 800e4f8:	a353      	add	r3, pc, #332	; (adr r3, 800e648 <__ieee754_pow+0xa18>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	f7f1 fe7d 	bl	80001fc <__adddf3>
 800e502:	4622      	mov	r2, r4
 800e504:	462b      	mov	r3, r5
 800e506:	f7f2 f82f 	bl	8000568 <__aeabi_dmul>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	4640      	mov	r0, r8
 800e510:	4649      	mov	r1, r9
 800e512:	f7f1 fe71 	bl	80001f8 <__aeabi_dsub>
 800e516:	4604      	mov	r4, r0
 800e518:	460d      	mov	r5, r1
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	4640      	mov	r0, r8
 800e520:	4649      	mov	r1, r9
 800e522:	f7f2 f821 	bl	8000568 <__aeabi_dmul>
 800e526:	2200      	movs	r2, #0
 800e528:	ec41 0b19 	vmov	d9, r0, r1
 800e52c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e530:	4620      	mov	r0, r4
 800e532:	4629      	mov	r1, r5
 800e534:	f7f1 fe60 	bl	80001f8 <__aeabi_dsub>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	ec51 0b19 	vmov	r0, r1, d9
 800e540:	f7f2 f93c 	bl	80007bc <__aeabi_ddiv>
 800e544:	4632      	mov	r2, r6
 800e546:	4604      	mov	r4, r0
 800e548:	460d      	mov	r5, r1
 800e54a:	463b      	mov	r3, r7
 800e54c:	4640      	mov	r0, r8
 800e54e:	4649      	mov	r1, r9
 800e550:	f7f2 f80a 	bl	8000568 <__aeabi_dmul>
 800e554:	4632      	mov	r2, r6
 800e556:	463b      	mov	r3, r7
 800e558:	f7f1 fe50 	bl	80001fc <__adddf3>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	4620      	mov	r0, r4
 800e562:	4629      	mov	r1, r5
 800e564:	f7f1 fe48 	bl	80001f8 <__aeabi_dsub>
 800e568:	4642      	mov	r2, r8
 800e56a:	464b      	mov	r3, r9
 800e56c:	f7f1 fe44 	bl	80001f8 <__aeabi_dsub>
 800e570:	460b      	mov	r3, r1
 800e572:	4602      	mov	r2, r0
 800e574:	493a      	ldr	r1, [pc, #232]	; (800e660 <__ieee754_pow+0xa30>)
 800e576:	2000      	movs	r0, #0
 800e578:	f7f1 fe3e 	bl	80001f8 <__aeabi_dsub>
 800e57c:	e9cd 0100 	strd	r0, r1, [sp]
 800e580:	9b01      	ldr	r3, [sp, #4]
 800e582:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e58a:	da2f      	bge.n	800e5ec <__ieee754_pow+0x9bc>
 800e58c:	4650      	mov	r0, sl
 800e58e:	ed9d 0b00 	vldr	d0, [sp]
 800e592:	f001 f919 	bl	800f7c8 <scalbn>
 800e596:	ec51 0b10 	vmov	r0, r1, d0
 800e59a:	ec53 2b18 	vmov	r2, r3, d8
 800e59e:	f7ff bbe0 	b.w	800dd62 <__ieee754_pow+0x132>
 800e5a2:	4b30      	ldr	r3, [pc, #192]	; (800e664 <__ieee754_pow+0xa34>)
 800e5a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e5a8:	429e      	cmp	r6, r3
 800e5aa:	f77f af0b 	ble.w	800e3c4 <__ieee754_pow+0x794>
 800e5ae:	4b2e      	ldr	r3, [pc, #184]	; (800e668 <__ieee754_pow+0xa38>)
 800e5b0:	440b      	add	r3, r1
 800e5b2:	4303      	orrs	r3, r0
 800e5b4:	d00b      	beq.n	800e5ce <__ieee754_pow+0x99e>
 800e5b6:	a326      	add	r3, pc, #152	; (adr r3, 800e650 <__ieee754_pow+0xa20>)
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	ec51 0b18 	vmov	r0, r1, d8
 800e5c0:	f7f1 ffd2 	bl	8000568 <__aeabi_dmul>
 800e5c4:	a322      	add	r3, pc, #136	; (adr r3, 800e650 <__ieee754_pow+0xa20>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	f7ff bbca 	b.w	800dd62 <__ieee754_pow+0x132>
 800e5ce:	4622      	mov	r2, r4
 800e5d0:	462b      	mov	r3, r5
 800e5d2:	f7f1 fe11 	bl	80001f8 <__aeabi_dsub>
 800e5d6:	4642      	mov	r2, r8
 800e5d8:	464b      	mov	r3, r9
 800e5da:	f7f2 fa4b 	bl	8000a74 <__aeabi_dcmpge>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f43f aef0 	beq.w	800e3c4 <__ieee754_pow+0x794>
 800e5e4:	e7e7      	b.n	800e5b6 <__ieee754_pow+0x986>
 800e5e6:	f04f 0a00 	mov.w	sl, #0
 800e5ea:	e717      	b.n	800e41c <__ieee754_pow+0x7ec>
 800e5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	e7d2      	b.n	800e59a <__ieee754_pow+0x96a>
 800e5f4:	491a      	ldr	r1, [pc, #104]	; (800e660 <__ieee754_pow+0xa30>)
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	f7ff bb9e 	b.w	800dd38 <__ieee754_pow+0x108>
 800e5fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e600:	f7ff bb9a 	b.w	800dd38 <__ieee754_pow+0x108>
 800e604:	9000      	str	r0, [sp, #0]
 800e606:	f7ff bb76 	b.w	800dcf6 <__ieee754_pow+0xc6>
 800e60a:	2100      	movs	r1, #0
 800e60c:	f7ff bb60 	b.w	800dcd0 <__ieee754_pow+0xa0>
 800e610:	00000000 	.word	0x00000000
 800e614:	3fe62e43 	.word	0x3fe62e43
 800e618:	fefa39ef 	.word	0xfefa39ef
 800e61c:	3fe62e42 	.word	0x3fe62e42
 800e620:	0ca86c39 	.word	0x0ca86c39
 800e624:	be205c61 	.word	0xbe205c61
 800e628:	72bea4d0 	.word	0x72bea4d0
 800e62c:	3e663769 	.word	0x3e663769
 800e630:	c5d26bf1 	.word	0xc5d26bf1
 800e634:	3ebbbd41 	.word	0x3ebbbd41
 800e638:	af25de2c 	.word	0xaf25de2c
 800e63c:	3f11566a 	.word	0x3f11566a
 800e640:	16bebd93 	.word	0x16bebd93
 800e644:	3f66c16c 	.word	0x3f66c16c
 800e648:	5555553e 	.word	0x5555553e
 800e64c:	3fc55555 	.word	0x3fc55555
 800e650:	c2f8f359 	.word	0xc2f8f359
 800e654:	01a56e1f 	.word	0x01a56e1f
 800e658:	3fe00000 	.word	0x3fe00000
 800e65c:	000fffff 	.word	0x000fffff
 800e660:	3ff00000 	.word	0x3ff00000
 800e664:	4090cbff 	.word	0x4090cbff
 800e668:	3f6f3400 	.word	0x3f6f3400
 800e66c:	652b82fe 	.word	0x652b82fe
 800e670:	3c971547 	.word	0x3c971547
 800e674:	00000000 	.word	0x00000000

0800e678 <__ieee754_rem_pio2>:
 800e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67c:	ed2d 8b02 	vpush	{d8}
 800e680:	ec55 4b10 	vmov	r4, r5, d0
 800e684:	4bca      	ldr	r3, [pc, #808]	; (800e9b0 <__ieee754_rem_pio2+0x338>)
 800e686:	b08b      	sub	sp, #44	; 0x2c
 800e688:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e68c:	4598      	cmp	r8, r3
 800e68e:	4682      	mov	sl, r0
 800e690:	9502      	str	r5, [sp, #8]
 800e692:	dc08      	bgt.n	800e6a6 <__ieee754_rem_pio2+0x2e>
 800e694:	2200      	movs	r2, #0
 800e696:	2300      	movs	r3, #0
 800e698:	ed80 0b00 	vstr	d0, [r0]
 800e69c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e6a0:	f04f 0b00 	mov.w	fp, #0
 800e6a4:	e028      	b.n	800e6f8 <__ieee754_rem_pio2+0x80>
 800e6a6:	4bc3      	ldr	r3, [pc, #780]	; (800e9b4 <__ieee754_rem_pio2+0x33c>)
 800e6a8:	4598      	cmp	r8, r3
 800e6aa:	dc78      	bgt.n	800e79e <__ieee754_rem_pio2+0x126>
 800e6ac:	9b02      	ldr	r3, [sp, #8]
 800e6ae:	4ec2      	ldr	r6, [pc, #776]	; (800e9b8 <__ieee754_rem_pio2+0x340>)
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	ee10 0a10 	vmov	r0, s0
 800e6b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e978 <__ieee754_rem_pio2+0x300>)
 800e6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6bc:	4629      	mov	r1, r5
 800e6be:	dd39      	ble.n	800e734 <__ieee754_rem_pio2+0xbc>
 800e6c0:	f7f1 fd9a 	bl	80001f8 <__aeabi_dsub>
 800e6c4:	45b0      	cmp	r8, r6
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	d01b      	beq.n	800e704 <__ieee754_rem_pio2+0x8c>
 800e6cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800e980 <__ieee754_rem_pio2+0x308>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	f7f1 fd91 	bl	80001f8 <__aeabi_dsub>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
 800e6da:	e9ca 2300 	strd	r2, r3, [sl]
 800e6de:	4620      	mov	r0, r4
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	f7f1 fd89 	bl	80001f8 <__aeabi_dsub>
 800e6e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e980 <__ieee754_rem_pio2+0x308>)
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	f7f1 fd84 	bl	80001f8 <__aeabi_dsub>
 800e6f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6f4:	f04f 0b01 	mov.w	fp, #1
 800e6f8:	4658      	mov	r0, fp
 800e6fa:	b00b      	add	sp, #44	; 0x2c
 800e6fc:	ecbd 8b02 	vpop	{d8}
 800e700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e704:	a3a0      	add	r3, pc, #640	; (adr r3, 800e988 <__ieee754_rem_pio2+0x310>)
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	f7f1 fd75 	bl	80001f8 <__aeabi_dsub>
 800e70e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e990 <__ieee754_rem_pio2+0x318>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	4604      	mov	r4, r0
 800e716:	460d      	mov	r5, r1
 800e718:	f7f1 fd6e 	bl	80001f8 <__aeabi_dsub>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	e9ca 2300 	strd	r2, r3, [sl]
 800e724:	4620      	mov	r0, r4
 800e726:	4629      	mov	r1, r5
 800e728:	f7f1 fd66 	bl	80001f8 <__aeabi_dsub>
 800e72c:	a398      	add	r3, pc, #608	; (adr r3, 800e990 <__ieee754_rem_pio2+0x318>)
 800e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e732:	e7db      	b.n	800e6ec <__ieee754_rem_pio2+0x74>
 800e734:	f7f1 fd62 	bl	80001fc <__adddf3>
 800e738:	45b0      	cmp	r8, r6
 800e73a:	4604      	mov	r4, r0
 800e73c:	460d      	mov	r5, r1
 800e73e:	d016      	beq.n	800e76e <__ieee754_rem_pio2+0xf6>
 800e740:	a38f      	add	r3, pc, #572	; (adr r3, 800e980 <__ieee754_rem_pio2+0x308>)
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	f7f1 fd59 	bl	80001fc <__adddf3>
 800e74a:	4602      	mov	r2, r0
 800e74c:	460b      	mov	r3, r1
 800e74e:	e9ca 2300 	strd	r2, r3, [sl]
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f1 fd4f 	bl	80001f8 <__aeabi_dsub>
 800e75a:	a389      	add	r3, pc, #548	; (adr r3, 800e980 <__ieee754_rem_pio2+0x308>)
 800e75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e760:	f7f1 fd4c 	bl	80001fc <__adddf3>
 800e764:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e768:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e76c:	e7c4      	b.n	800e6f8 <__ieee754_rem_pio2+0x80>
 800e76e:	a386      	add	r3, pc, #536	; (adr r3, 800e988 <__ieee754_rem_pio2+0x310>)
 800e770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e774:	f7f1 fd42 	bl	80001fc <__adddf3>
 800e778:	a385      	add	r3, pc, #532	; (adr r3, 800e990 <__ieee754_rem_pio2+0x318>)
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	4604      	mov	r4, r0
 800e780:	460d      	mov	r5, r1
 800e782:	f7f1 fd3b 	bl	80001fc <__adddf3>
 800e786:	4602      	mov	r2, r0
 800e788:	460b      	mov	r3, r1
 800e78a:	e9ca 2300 	strd	r2, r3, [sl]
 800e78e:	4620      	mov	r0, r4
 800e790:	4629      	mov	r1, r5
 800e792:	f7f1 fd31 	bl	80001f8 <__aeabi_dsub>
 800e796:	a37e      	add	r3, pc, #504	; (adr r3, 800e990 <__ieee754_rem_pio2+0x318>)
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	e7e0      	b.n	800e760 <__ieee754_rem_pio2+0xe8>
 800e79e:	4b87      	ldr	r3, [pc, #540]	; (800e9bc <__ieee754_rem_pio2+0x344>)
 800e7a0:	4598      	cmp	r8, r3
 800e7a2:	f300 80d9 	bgt.w	800e958 <__ieee754_rem_pio2+0x2e0>
 800e7a6:	f7fe fd97 	bl	800d2d8 <fabs>
 800e7aa:	ec55 4b10 	vmov	r4, r5, d0
 800e7ae:	ee10 0a10 	vmov	r0, s0
 800e7b2:	a379      	add	r3, pc, #484	; (adr r3, 800e998 <__ieee754_rem_pio2+0x320>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	f7f1 fed5 	bl	8000568 <__aeabi_dmul>
 800e7be:	4b80      	ldr	r3, [pc, #512]	; (800e9c0 <__ieee754_rem_pio2+0x348>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f7f1 fd1b 	bl	80001fc <__adddf3>
 800e7c6:	f7f2 f97f 	bl	8000ac8 <__aeabi_d2iz>
 800e7ca:	4683      	mov	fp, r0
 800e7cc:	f7f1 fe62 	bl	8000494 <__aeabi_i2d>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	ec43 2b18 	vmov	d8, r2, r3
 800e7d8:	a367      	add	r3, pc, #412	; (adr r3, 800e978 <__ieee754_rem_pio2+0x300>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	f7f1 fec3 	bl	8000568 <__aeabi_dmul>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	f7f1 fd05 	bl	80001f8 <__aeabi_dsub>
 800e7ee:	a364      	add	r3, pc, #400	; (adr r3, 800e980 <__ieee754_rem_pio2+0x308>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	460f      	mov	r7, r1
 800e7f8:	ec51 0b18 	vmov	r0, r1, d8
 800e7fc:	f7f1 feb4 	bl	8000568 <__aeabi_dmul>
 800e800:	f1bb 0f1f 	cmp.w	fp, #31
 800e804:	4604      	mov	r4, r0
 800e806:	460d      	mov	r5, r1
 800e808:	dc0d      	bgt.n	800e826 <__ieee754_rem_pio2+0x1ae>
 800e80a:	4b6e      	ldr	r3, [pc, #440]	; (800e9c4 <__ieee754_rem_pio2+0x34c>)
 800e80c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	4543      	cmp	r3, r8
 800e816:	d006      	beq.n	800e826 <__ieee754_rem_pio2+0x1ae>
 800e818:	4622      	mov	r2, r4
 800e81a:	462b      	mov	r3, r5
 800e81c:	4630      	mov	r0, r6
 800e81e:	4639      	mov	r1, r7
 800e820:	f7f1 fcea 	bl	80001f8 <__aeabi_dsub>
 800e824:	e00f      	b.n	800e846 <__ieee754_rem_pio2+0x1ce>
 800e826:	462b      	mov	r3, r5
 800e828:	4622      	mov	r2, r4
 800e82a:	4630      	mov	r0, r6
 800e82c:	4639      	mov	r1, r7
 800e82e:	f7f1 fce3 	bl	80001f8 <__aeabi_dsub>
 800e832:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e836:	9303      	str	r3, [sp, #12]
 800e838:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e83c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e840:	f1b8 0f10 	cmp.w	r8, #16
 800e844:	dc02      	bgt.n	800e84c <__ieee754_rem_pio2+0x1d4>
 800e846:	e9ca 0100 	strd	r0, r1, [sl]
 800e84a:	e039      	b.n	800e8c0 <__ieee754_rem_pio2+0x248>
 800e84c:	a34e      	add	r3, pc, #312	; (adr r3, 800e988 <__ieee754_rem_pio2+0x310>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	ec51 0b18 	vmov	r0, r1, d8
 800e856:	f7f1 fe87 	bl	8000568 <__aeabi_dmul>
 800e85a:	4604      	mov	r4, r0
 800e85c:	460d      	mov	r5, r1
 800e85e:	4602      	mov	r2, r0
 800e860:	460b      	mov	r3, r1
 800e862:	4630      	mov	r0, r6
 800e864:	4639      	mov	r1, r7
 800e866:	f7f1 fcc7 	bl	80001f8 <__aeabi_dsub>
 800e86a:	4602      	mov	r2, r0
 800e86c:	460b      	mov	r3, r1
 800e86e:	4680      	mov	r8, r0
 800e870:	4689      	mov	r9, r1
 800e872:	4630      	mov	r0, r6
 800e874:	4639      	mov	r1, r7
 800e876:	f7f1 fcbf 	bl	80001f8 <__aeabi_dsub>
 800e87a:	4622      	mov	r2, r4
 800e87c:	462b      	mov	r3, r5
 800e87e:	f7f1 fcbb 	bl	80001f8 <__aeabi_dsub>
 800e882:	a343      	add	r3, pc, #268	; (adr r3, 800e990 <__ieee754_rem_pio2+0x318>)
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	4604      	mov	r4, r0
 800e88a:	460d      	mov	r5, r1
 800e88c:	ec51 0b18 	vmov	r0, r1, d8
 800e890:	f7f1 fe6a 	bl	8000568 <__aeabi_dmul>
 800e894:	4622      	mov	r2, r4
 800e896:	462b      	mov	r3, r5
 800e898:	f7f1 fcae 	bl	80001f8 <__aeabi_dsub>
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	4640      	mov	r0, r8
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	f7f1 fca6 	bl	80001f8 <__aeabi_dsub>
 800e8ac:	9a03      	ldr	r2, [sp, #12]
 800e8ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e8b2:	1ad3      	subs	r3, r2, r3
 800e8b4:	2b31      	cmp	r3, #49	; 0x31
 800e8b6:	dc24      	bgt.n	800e902 <__ieee754_rem_pio2+0x28a>
 800e8b8:	e9ca 0100 	strd	r0, r1, [sl]
 800e8bc:	4646      	mov	r6, r8
 800e8be:	464f      	mov	r7, r9
 800e8c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	4642      	mov	r2, r8
 800e8c8:	464b      	mov	r3, r9
 800e8ca:	4639      	mov	r1, r7
 800e8cc:	f7f1 fc94 	bl	80001f8 <__aeabi_dsub>
 800e8d0:	462b      	mov	r3, r5
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	f7f1 fc90 	bl	80001f8 <__aeabi_dsub>
 800e8d8:	9b02      	ldr	r3, [sp, #8]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e8e0:	f6bf af0a 	bge.w	800e6f8 <__ieee754_rem_pio2+0x80>
 800e8e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e8e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e8ec:	f8ca 8000 	str.w	r8, [sl]
 800e8f0:	f8ca 0008 	str.w	r0, [sl, #8]
 800e8f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800e8fc:	f1cb 0b00 	rsb	fp, fp, #0
 800e900:	e6fa      	b.n	800e6f8 <__ieee754_rem_pio2+0x80>
 800e902:	a327      	add	r3, pc, #156	; (adr r3, 800e9a0 <__ieee754_rem_pio2+0x328>)
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	ec51 0b18 	vmov	r0, r1, d8
 800e90c:	f7f1 fe2c 	bl	8000568 <__aeabi_dmul>
 800e910:	4604      	mov	r4, r0
 800e912:	460d      	mov	r5, r1
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4640      	mov	r0, r8
 800e91a:	4649      	mov	r1, r9
 800e91c:	f7f1 fc6c 	bl	80001f8 <__aeabi_dsub>
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	4606      	mov	r6, r0
 800e926:	460f      	mov	r7, r1
 800e928:	4640      	mov	r0, r8
 800e92a:	4649      	mov	r1, r9
 800e92c:	f7f1 fc64 	bl	80001f8 <__aeabi_dsub>
 800e930:	4622      	mov	r2, r4
 800e932:	462b      	mov	r3, r5
 800e934:	f7f1 fc60 	bl	80001f8 <__aeabi_dsub>
 800e938:	a31b      	add	r3, pc, #108	; (adr r3, 800e9a8 <__ieee754_rem_pio2+0x330>)
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	4604      	mov	r4, r0
 800e940:	460d      	mov	r5, r1
 800e942:	ec51 0b18 	vmov	r0, r1, d8
 800e946:	f7f1 fe0f 	bl	8000568 <__aeabi_dmul>
 800e94a:	4622      	mov	r2, r4
 800e94c:	462b      	mov	r3, r5
 800e94e:	f7f1 fc53 	bl	80001f8 <__aeabi_dsub>
 800e952:	4604      	mov	r4, r0
 800e954:	460d      	mov	r5, r1
 800e956:	e75f      	b.n	800e818 <__ieee754_rem_pio2+0x1a0>
 800e958:	4b1b      	ldr	r3, [pc, #108]	; (800e9c8 <__ieee754_rem_pio2+0x350>)
 800e95a:	4598      	cmp	r8, r3
 800e95c:	dd36      	ble.n	800e9cc <__ieee754_rem_pio2+0x354>
 800e95e:	ee10 2a10 	vmov	r2, s0
 800e962:	462b      	mov	r3, r5
 800e964:	4620      	mov	r0, r4
 800e966:	4629      	mov	r1, r5
 800e968:	f7f1 fc46 	bl	80001f8 <__aeabi_dsub>
 800e96c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e970:	e9ca 0100 	strd	r0, r1, [sl]
 800e974:	e694      	b.n	800e6a0 <__ieee754_rem_pio2+0x28>
 800e976:	bf00      	nop
 800e978:	54400000 	.word	0x54400000
 800e97c:	3ff921fb 	.word	0x3ff921fb
 800e980:	1a626331 	.word	0x1a626331
 800e984:	3dd0b461 	.word	0x3dd0b461
 800e988:	1a600000 	.word	0x1a600000
 800e98c:	3dd0b461 	.word	0x3dd0b461
 800e990:	2e037073 	.word	0x2e037073
 800e994:	3ba3198a 	.word	0x3ba3198a
 800e998:	6dc9c883 	.word	0x6dc9c883
 800e99c:	3fe45f30 	.word	0x3fe45f30
 800e9a0:	2e000000 	.word	0x2e000000
 800e9a4:	3ba3198a 	.word	0x3ba3198a
 800e9a8:	252049c1 	.word	0x252049c1
 800e9ac:	397b839a 	.word	0x397b839a
 800e9b0:	3fe921fb 	.word	0x3fe921fb
 800e9b4:	4002d97b 	.word	0x4002d97b
 800e9b8:	3ff921fb 	.word	0x3ff921fb
 800e9bc:	413921fb 	.word	0x413921fb
 800e9c0:	3fe00000 	.word	0x3fe00000
 800e9c4:	0800fc50 	.word	0x0800fc50
 800e9c8:	7fefffff 	.word	0x7fefffff
 800e9cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e9d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e9d4:	ee10 0a10 	vmov	r0, s0
 800e9d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e9dc:	ee10 6a10 	vmov	r6, s0
 800e9e0:	460f      	mov	r7, r1
 800e9e2:	f7f2 f871 	bl	8000ac8 <__aeabi_d2iz>
 800e9e6:	f7f1 fd55 	bl	8000494 <__aeabi_i2d>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9f6:	f7f1 fbff 	bl	80001f8 <__aeabi_dsub>
 800e9fa:	4b22      	ldr	r3, [pc, #136]	; (800ea84 <__ieee754_rem_pio2+0x40c>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f7f1 fdb3 	bl	8000568 <__aeabi_dmul>
 800ea02:	460f      	mov	r7, r1
 800ea04:	4606      	mov	r6, r0
 800ea06:	f7f2 f85f 	bl	8000ac8 <__aeabi_d2iz>
 800ea0a:	f7f1 fd43 	bl	8000494 <__aeabi_i2d>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4630      	mov	r0, r6
 800ea14:	4639      	mov	r1, r7
 800ea16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea1a:	f7f1 fbed 	bl	80001f8 <__aeabi_dsub>
 800ea1e:	4b19      	ldr	r3, [pc, #100]	; (800ea84 <__ieee754_rem_pio2+0x40c>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	f7f1 fda1 	bl	8000568 <__aeabi_dmul>
 800ea26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea2a:	ad04      	add	r5, sp, #16
 800ea2c:	f04f 0803 	mov.w	r8, #3
 800ea30:	46a9      	mov	r9, r5
 800ea32:	2600      	movs	r6, #0
 800ea34:	2700      	movs	r7, #0
 800ea36:	4632      	mov	r2, r6
 800ea38:	463b      	mov	r3, r7
 800ea3a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ea3e:	46c3      	mov	fp, r8
 800ea40:	3d08      	subs	r5, #8
 800ea42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ea46:	f7f1 fff7 	bl	8000a38 <__aeabi_dcmpeq>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d1f3      	bne.n	800ea36 <__ieee754_rem_pio2+0x3be>
 800ea4e:	4b0e      	ldr	r3, [pc, #56]	; (800ea88 <__ieee754_rem_pio2+0x410>)
 800ea50:	9301      	str	r3, [sp, #4]
 800ea52:	2302      	movs	r3, #2
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	4622      	mov	r2, r4
 800ea58:	465b      	mov	r3, fp
 800ea5a:	4651      	mov	r1, sl
 800ea5c:	4648      	mov	r0, r9
 800ea5e:	f000 f993 	bl	800ed88 <__kernel_rem_pio2>
 800ea62:	9b02      	ldr	r3, [sp, #8]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	4683      	mov	fp, r0
 800ea68:	f6bf ae46 	bge.w	800e6f8 <__ieee754_rem_pio2+0x80>
 800ea6c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ea70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea74:	f8ca 3004 	str.w	r3, [sl, #4]
 800ea78:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ea7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea80:	e73a      	b.n	800e8f8 <__ieee754_rem_pio2+0x280>
 800ea82:	bf00      	nop
 800ea84:	41700000 	.word	0x41700000
 800ea88:	0800fcd0 	.word	0x0800fcd0

0800ea8c <__ieee754_sqrt>:
 800ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	ec55 4b10 	vmov	r4, r5, d0
 800ea94:	4e56      	ldr	r6, [pc, #344]	; (800ebf0 <__ieee754_sqrt+0x164>)
 800ea96:	43ae      	bics	r6, r5
 800ea98:	ee10 0a10 	vmov	r0, s0
 800ea9c:	ee10 3a10 	vmov	r3, s0
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	462a      	mov	r2, r5
 800eaa4:	d110      	bne.n	800eac8 <__ieee754_sqrt+0x3c>
 800eaa6:	ee10 2a10 	vmov	r2, s0
 800eaaa:	462b      	mov	r3, r5
 800eaac:	f7f1 fd5c 	bl	8000568 <__aeabi_dmul>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4620      	mov	r0, r4
 800eab6:	4629      	mov	r1, r5
 800eab8:	f7f1 fba0 	bl	80001fc <__adddf3>
 800eabc:	4604      	mov	r4, r0
 800eabe:	460d      	mov	r5, r1
 800eac0:	ec45 4b10 	vmov	d0, r4, r5
 800eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac8:	2d00      	cmp	r5, #0
 800eaca:	dc10      	bgt.n	800eaee <__ieee754_sqrt+0x62>
 800eacc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ead0:	4330      	orrs	r0, r6
 800ead2:	d0f5      	beq.n	800eac0 <__ieee754_sqrt+0x34>
 800ead4:	b15d      	cbz	r5, 800eaee <__ieee754_sqrt+0x62>
 800ead6:	ee10 2a10 	vmov	r2, s0
 800eada:	462b      	mov	r3, r5
 800eadc:	ee10 0a10 	vmov	r0, s0
 800eae0:	f7f1 fb8a 	bl	80001f8 <__aeabi_dsub>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	f7f1 fe68 	bl	80007bc <__aeabi_ddiv>
 800eaec:	e7e6      	b.n	800eabc <__ieee754_sqrt+0x30>
 800eaee:	1509      	asrs	r1, r1, #20
 800eaf0:	d076      	beq.n	800ebe0 <__ieee754_sqrt+0x154>
 800eaf2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eaf6:	07ce      	lsls	r6, r1, #31
 800eaf8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800eafc:	bf5e      	ittt	pl
 800eafe:	0fda      	lsrpl	r2, r3, #31
 800eb00:	005b      	lslpl	r3, r3, #1
 800eb02:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eb06:	0fda      	lsrs	r2, r3, #31
 800eb08:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800eb0c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800eb10:	2000      	movs	r0, #0
 800eb12:	106d      	asrs	r5, r5, #1
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	f04f 0e16 	mov.w	lr, #22
 800eb1a:	4684      	mov	ip, r0
 800eb1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb20:	eb0c 0401 	add.w	r4, ip, r1
 800eb24:	4294      	cmp	r4, r2
 800eb26:	bfde      	ittt	le
 800eb28:	1b12      	suble	r2, r2, r4
 800eb2a:	eb04 0c01 	addle.w	ip, r4, r1
 800eb2e:	1840      	addle	r0, r0, r1
 800eb30:	0052      	lsls	r2, r2, #1
 800eb32:	f1be 0e01 	subs.w	lr, lr, #1
 800eb36:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eb3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb42:	d1ed      	bne.n	800eb20 <__ieee754_sqrt+0x94>
 800eb44:	4671      	mov	r1, lr
 800eb46:	2720      	movs	r7, #32
 800eb48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eb4c:	4562      	cmp	r2, ip
 800eb4e:	eb04 060e 	add.w	r6, r4, lr
 800eb52:	dc02      	bgt.n	800eb5a <__ieee754_sqrt+0xce>
 800eb54:	d113      	bne.n	800eb7e <__ieee754_sqrt+0xf2>
 800eb56:	429e      	cmp	r6, r3
 800eb58:	d811      	bhi.n	800eb7e <__ieee754_sqrt+0xf2>
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	eb06 0e04 	add.w	lr, r6, r4
 800eb60:	da43      	bge.n	800ebea <__ieee754_sqrt+0x15e>
 800eb62:	f1be 0f00 	cmp.w	lr, #0
 800eb66:	db40      	blt.n	800ebea <__ieee754_sqrt+0x15e>
 800eb68:	f10c 0801 	add.w	r8, ip, #1
 800eb6c:	eba2 020c 	sub.w	r2, r2, ip
 800eb70:	429e      	cmp	r6, r3
 800eb72:	bf88      	it	hi
 800eb74:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800eb78:	1b9b      	subs	r3, r3, r6
 800eb7a:	4421      	add	r1, r4
 800eb7c:	46c4      	mov	ip, r8
 800eb7e:	0052      	lsls	r2, r2, #1
 800eb80:	3f01      	subs	r7, #1
 800eb82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eb86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eb8e:	d1dd      	bne.n	800eb4c <__ieee754_sqrt+0xc0>
 800eb90:	4313      	orrs	r3, r2
 800eb92:	d006      	beq.n	800eba2 <__ieee754_sqrt+0x116>
 800eb94:	1c4c      	adds	r4, r1, #1
 800eb96:	bf13      	iteet	ne
 800eb98:	3101      	addne	r1, #1
 800eb9a:	3001      	addeq	r0, #1
 800eb9c:	4639      	moveq	r1, r7
 800eb9e:	f021 0101 	bicne.w	r1, r1, #1
 800eba2:	1043      	asrs	r3, r0, #1
 800eba4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800eba8:	0849      	lsrs	r1, r1, #1
 800ebaa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ebae:	07c2      	lsls	r2, r0, #31
 800ebb0:	bf48      	it	mi
 800ebb2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ebb6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ebba:	460c      	mov	r4, r1
 800ebbc:	463d      	mov	r5, r7
 800ebbe:	e77f      	b.n	800eac0 <__ieee754_sqrt+0x34>
 800ebc0:	0ada      	lsrs	r2, r3, #11
 800ebc2:	3815      	subs	r0, #21
 800ebc4:	055b      	lsls	r3, r3, #21
 800ebc6:	2a00      	cmp	r2, #0
 800ebc8:	d0fa      	beq.n	800ebc0 <__ieee754_sqrt+0x134>
 800ebca:	02d7      	lsls	r7, r2, #11
 800ebcc:	d50a      	bpl.n	800ebe4 <__ieee754_sqrt+0x158>
 800ebce:	f1c1 0420 	rsb	r4, r1, #32
 800ebd2:	fa23 f404 	lsr.w	r4, r3, r4
 800ebd6:	1e4d      	subs	r5, r1, #1
 800ebd8:	408b      	lsls	r3, r1
 800ebda:	4322      	orrs	r2, r4
 800ebdc:	1b41      	subs	r1, r0, r5
 800ebde:	e788      	b.n	800eaf2 <__ieee754_sqrt+0x66>
 800ebe0:	4608      	mov	r0, r1
 800ebe2:	e7f0      	b.n	800ebc6 <__ieee754_sqrt+0x13a>
 800ebe4:	0052      	lsls	r2, r2, #1
 800ebe6:	3101      	adds	r1, #1
 800ebe8:	e7ef      	b.n	800ebca <__ieee754_sqrt+0x13e>
 800ebea:	46e0      	mov	r8, ip
 800ebec:	e7be      	b.n	800eb6c <__ieee754_sqrt+0xe0>
 800ebee:	bf00      	nop
 800ebf0:	7ff00000 	.word	0x7ff00000
 800ebf4:	00000000 	.word	0x00000000

0800ebf8 <__kernel_cos>:
 800ebf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	ec57 6b10 	vmov	r6, r7, d0
 800ec00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ec04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ec08:	ed8d 1b00 	vstr	d1, [sp]
 800ec0c:	da07      	bge.n	800ec1e <__kernel_cos+0x26>
 800ec0e:	ee10 0a10 	vmov	r0, s0
 800ec12:	4639      	mov	r1, r7
 800ec14:	f7f1 ff58 	bl	8000ac8 <__aeabi_d2iz>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	f000 8088 	beq.w	800ed2e <__kernel_cos+0x136>
 800ec1e:	4632      	mov	r2, r6
 800ec20:	463b      	mov	r3, r7
 800ec22:	4630      	mov	r0, r6
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 fc9f 	bl	8000568 <__aeabi_dmul>
 800ec2a:	4b51      	ldr	r3, [pc, #324]	; (800ed70 <__kernel_cos+0x178>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460d      	mov	r5, r1
 800ec32:	f7f1 fc99 	bl	8000568 <__aeabi_dmul>
 800ec36:	a340      	add	r3, pc, #256	; (adr r3, 800ed38 <__kernel_cos+0x140>)
 800ec38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3c:	4682      	mov	sl, r0
 800ec3e:	468b      	mov	fp, r1
 800ec40:	4620      	mov	r0, r4
 800ec42:	4629      	mov	r1, r5
 800ec44:	f7f1 fc90 	bl	8000568 <__aeabi_dmul>
 800ec48:	a33d      	add	r3, pc, #244	; (adr r3, 800ed40 <__kernel_cos+0x148>)
 800ec4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4e:	f7f1 fad5 	bl	80001fc <__adddf3>
 800ec52:	4622      	mov	r2, r4
 800ec54:	462b      	mov	r3, r5
 800ec56:	f7f1 fc87 	bl	8000568 <__aeabi_dmul>
 800ec5a:	a33b      	add	r3, pc, #236	; (adr r3, 800ed48 <__kernel_cos+0x150>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 faca 	bl	80001f8 <__aeabi_dsub>
 800ec64:	4622      	mov	r2, r4
 800ec66:	462b      	mov	r3, r5
 800ec68:	f7f1 fc7e 	bl	8000568 <__aeabi_dmul>
 800ec6c:	a338      	add	r3, pc, #224	; (adr r3, 800ed50 <__kernel_cos+0x158>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	f7f1 fac3 	bl	80001fc <__adddf3>
 800ec76:	4622      	mov	r2, r4
 800ec78:	462b      	mov	r3, r5
 800ec7a:	f7f1 fc75 	bl	8000568 <__aeabi_dmul>
 800ec7e:	a336      	add	r3, pc, #216	; (adr r3, 800ed58 <__kernel_cos+0x160>)
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	f7f1 fab8 	bl	80001f8 <__aeabi_dsub>
 800ec88:	4622      	mov	r2, r4
 800ec8a:	462b      	mov	r3, r5
 800ec8c:	f7f1 fc6c 	bl	8000568 <__aeabi_dmul>
 800ec90:	a333      	add	r3, pc, #204	; (adr r3, 800ed60 <__kernel_cos+0x168>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	f7f1 fab1 	bl	80001fc <__adddf3>
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	f7f1 fc63 	bl	8000568 <__aeabi_dmul>
 800eca2:	4622      	mov	r2, r4
 800eca4:	462b      	mov	r3, r5
 800eca6:	f7f1 fc5f 	bl	8000568 <__aeabi_dmul>
 800ecaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecae:	4604      	mov	r4, r0
 800ecb0:	460d      	mov	r5, r1
 800ecb2:	4630      	mov	r0, r6
 800ecb4:	4639      	mov	r1, r7
 800ecb6:	f7f1 fc57 	bl	8000568 <__aeabi_dmul>
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f7f1 fa99 	bl	80001f8 <__aeabi_dsub>
 800ecc6:	4b2b      	ldr	r3, [pc, #172]	; (800ed74 <__kernel_cos+0x17c>)
 800ecc8:	4598      	cmp	r8, r3
 800ecca:	4606      	mov	r6, r0
 800eccc:	460f      	mov	r7, r1
 800ecce:	dc10      	bgt.n	800ecf2 <__kernel_cos+0xfa>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4650      	mov	r0, sl
 800ecd6:	4659      	mov	r1, fp
 800ecd8:	f7f1 fa8e 	bl	80001f8 <__aeabi_dsub>
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4926      	ldr	r1, [pc, #152]	; (800ed78 <__kernel_cos+0x180>)
 800ece0:	4602      	mov	r2, r0
 800ece2:	2000      	movs	r0, #0
 800ece4:	f7f1 fa88 	bl	80001f8 <__aeabi_dsub>
 800ece8:	ec41 0b10 	vmov	d0, r0, r1
 800ecec:	b003      	add	sp, #12
 800ecee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf2:	4b22      	ldr	r3, [pc, #136]	; (800ed7c <__kernel_cos+0x184>)
 800ecf4:	4920      	ldr	r1, [pc, #128]	; (800ed78 <__kernel_cos+0x180>)
 800ecf6:	4598      	cmp	r8, r3
 800ecf8:	bfcc      	ite	gt
 800ecfa:	4d21      	ldrgt	r5, [pc, #132]	; (800ed80 <__kernel_cos+0x188>)
 800ecfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ed00:	2400      	movs	r4, #0
 800ed02:	4622      	mov	r2, r4
 800ed04:	462b      	mov	r3, r5
 800ed06:	2000      	movs	r0, #0
 800ed08:	f7f1 fa76 	bl	80001f8 <__aeabi_dsub>
 800ed0c:	4622      	mov	r2, r4
 800ed0e:	4680      	mov	r8, r0
 800ed10:	4689      	mov	r9, r1
 800ed12:	462b      	mov	r3, r5
 800ed14:	4650      	mov	r0, sl
 800ed16:	4659      	mov	r1, fp
 800ed18:	f7f1 fa6e 	bl	80001f8 <__aeabi_dsub>
 800ed1c:	4632      	mov	r2, r6
 800ed1e:	463b      	mov	r3, r7
 800ed20:	f7f1 fa6a 	bl	80001f8 <__aeabi_dsub>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4640      	mov	r0, r8
 800ed2a:	4649      	mov	r1, r9
 800ed2c:	e7da      	b.n	800ece4 <__kernel_cos+0xec>
 800ed2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ed68 <__kernel_cos+0x170>
 800ed32:	e7db      	b.n	800ecec <__kernel_cos+0xf4>
 800ed34:	f3af 8000 	nop.w
 800ed38:	be8838d4 	.word	0xbe8838d4
 800ed3c:	bda8fae9 	.word	0xbda8fae9
 800ed40:	bdb4b1c4 	.word	0xbdb4b1c4
 800ed44:	3e21ee9e 	.word	0x3e21ee9e
 800ed48:	809c52ad 	.word	0x809c52ad
 800ed4c:	3e927e4f 	.word	0x3e927e4f
 800ed50:	19cb1590 	.word	0x19cb1590
 800ed54:	3efa01a0 	.word	0x3efa01a0
 800ed58:	16c15177 	.word	0x16c15177
 800ed5c:	3f56c16c 	.word	0x3f56c16c
 800ed60:	5555554c 	.word	0x5555554c
 800ed64:	3fa55555 	.word	0x3fa55555
 800ed68:	00000000 	.word	0x00000000
 800ed6c:	3ff00000 	.word	0x3ff00000
 800ed70:	3fe00000 	.word	0x3fe00000
 800ed74:	3fd33332 	.word	0x3fd33332
 800ed78:	3ff00000 	.word	0x3ff00000
 800ed7c:	3fe90000 	.word	0x3fe90000
 800ed80:	3fd20000 	.word	0x3fd20000
 800ed84:	00000000 	.word	0x00000000

0800ed88 <__kernel_rem_pio2>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	ed2d 8b02 	vpush	{d8}
 800ed90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ed94:	f112 0f14 	cmn.w	r2, #20
 800ed98:	9308      	str	r3, [sp, #32]
 800ed9a:	9101      	str	r1, [sp, #4]
 800ed9c:	4bc6      	ldr	r3, [pc, #792]	; (800f0b8 <__kernel_rem_pio2+0x330>)
 800ed9e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800eda0:	9009      	str	r0, [sp, #36]	; 0x24
 800eda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eda6:	9304      	str	r3, [sp, #16]
 800eda8:	9b08      	ldr	r3, [sp, #32]
 800edaa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800edae:	bfa8      	it	ge
 800edb0:	1ed4      	subge	r4, r2, #3
 800edb2:	9306      	str	r3, [sp, #24]
 800edb4:	bfb2      	itee	lt
 800edb6:	2400      	movlt	r4, #0
 800edb8:	2318      	movge	r3, #24
 800edba:	fb94 f4f3 	sdivge	r4, r4, r3
 800edbe:	f06f 0317 	mvn.w	r3, #23
 800edc2:	fb04 3303 	mla	r3, r4, r3, r3
 800edc6:	eb03 0a02 	add.w	sl, r3, r2
 800edca:	9b04      	ldr	r3, [sp, #16]
 800edcc:	9a06      	ldr	r2, [sp, #24]
 800edce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f0a8 <__kernel_rem_pio2+0x320>
 800edd2:	eb03 0802 	add.w	r8, r3, r2
 800edd6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800edd8:	1aa7      	subs	r7, r4, r2
 800edda:	ae20      	add	r6, sp, #128	; 0x80
 800eddc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ede0:	2500      	movs	r5, #0
 800ede2:	4545      	cmp	r5, r8
 800ede4:	dd18      	ble.n	800ee18 <__kernel_rem_pio2+0x90>
 800ede6:	9b08      	ldr	r3, [sp, #32]
 800ede8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800edec:	aa20      	add	r2, sp, #128	; 0x80
 800edee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f0a8 <__kernel_rem_pio2+0x320>
 800edf2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800edf6:	f1c3 0301 	rsb	r3, r3, #1
 800edfa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800edfe:	9307      	str	r3, [sp, #28]
 800ee00:	9b07      	ldr	r3, [sp, #28]
 800ee02:	9a04      	ldr	r2, [sp, #16]
 800ee04:	4443      	add	r3, r8
 800ee06:	429a      	cmp	r2, r3
 800ee08:	db2f      	blt.n	800ee6a <__kernel_rem_pio2+0xe2>
 800ee0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ee0e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee12:	462f      	mov	r7, r5
 800ee14:	2600      	movs	r6, #0
 800ee16:	e01b      	b.n	800ee50 <__kernel_rem_pio2+0xc8>
 800ee18:	42ef      	cmn	r7, r5
 800ee1a:	d407      	bmi.n	800ee2c <__kernel_rem_pio2+0xa4>
 800ee1c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee20:	f7f1 fb38 	bl	8000494 <__aeabi_i2d>
 800ee24:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee28:	3501      	adds	r5, #1
 800ee2a:	e7da      	b.n	800ede2 <__kernel_rem_pio2+0x5a>
 800ee2c:	ec51 0b18 	vmov	r0, r1, d8
 800ee30:	e7f8      	b.n	800ee24 <__kernel_rem_pio2+0x9c>
 800ee32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee36:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee3a:	f7f1 fb95 	bl	8000568 <__aeabi_dmul>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	460b      	mov	r3, r1
 800ee42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee46:	f7f1 f9d9 	bl	80001fc <__adddf3>
 800ee4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee4e:	3601      	adds	r6, #1
 800ee50:	9b06      	ldr	r3, [sp, #24]
 800ee52:	429e      	cmp	r6, r3
 800ee54:	f1a7 0708 	sub.w	r7, r7, #8
 800ee58:	ddeb      	ble.n	800ee32 <__kernel_rem_pio2+0xaa>
 800ee5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee5e:	3508      	adds	r5, #8
 800ee60:	ecab 7b02 	vstmia	fp!, {d7}
 800ee64:	f108 0801 	add.w	r8, r8, #1
 800ee68:	e7ca      	b.n	800ee00 <__kernel_rem_pio2+0x78>
 800ee6a:	9b04      	ldr	r3, [sp, #16]
 800ee6c:	aa0c      	add	r2, sp, #48	; 0x30
 800ee6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee72:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee74:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ee76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee7a:	9c04      	ldr	r4, [sp, #16]
 800ee7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ee7e:	ab98      	add	r3, sp, #608	; 0x260
 800ee80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee84:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ee88:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ee8c:	f8cd b008 	str.w	fp, [sp, #8]
 800ee90:	4625      	mov	r5, r4
 800ee92:	2d00      	cmp	r5, #0
 800ee94:	dc78      	bgt.n	800ef88 <__kernel_rem_pio2+0x200>
 800ee96:	ec47 6b10 	vmov	d0, r6, r7
 800ee9a:	4650      	mov	r0, sl
 800ee9c:	f000 fc94 	bl	800f7c8 <scalbn>
 800eea0:	ec57 6b10 	vmov	r6, r7, d0
 800eea4:	2200      	movs	r2, #0
 800eea6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eeaa:	ee10 0a10 	vmov	r0, s0
 800eeae:	4639      	mov	r1, r7
 800eeb0:	f7f1 fb5a 	bl	8000568 <__aeabi_dmul>
 800eeb4:	ec41 0b10 	vmov	d0, r0, r1
 800eeb8:	f000 fb72 	bl	800f5a0 <floor>
 800eebc:	4b7f      	ldr	r3, [pc, #508]	; (800f0bc <__kernel_rem_pio2+0x334>)
 800eebe:	ec51 0b10 	vmov	r0, r1, d0
 800eec2:	2200      	movs	r2, #0
 800eec4:	f7f1 fb50 	bl	8000568 <__aeabi_dmul>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4630      	mov	r0, r6
 800eece:	4639      	mov	r1, r7
 800eed0:	f7f1 f992 	bl	80001f8 <__aeabi_dsub>
 800eed4:	460f      	mov	r7, r1
 800eed6:	4606      	mov	r6, r0
 800eed8:	f7f1 fdf6 	bl	8000ac8 <__aeabi_d2iz>
 800eedc:	9007      	str	r0, [sp, #28]
 800eede:	f7f1 fad9 	bl	8000494 <__aeabi_i2d>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4630      	mov	r0, r6
 800eee8:	4639      	mov	r1, r7
 800eeea:	f7f1 f985 	bl	80001f8 <__aeabi_dsub>
 800eeee:	f1ba 0f00 	cmp.w	sl, #0
 800eef2:	4606      	mov	r6, r0
 800eef4:	460f      	mov	r7, r1
 800eef6:	dd70      	ble.n	800efda <__kernel_rem_pio2+0x252>
 800eef8:	1e62      	subs	r2, r4, #1
 800eefa:	ab0c      	add	r3, sp, #48	; 0x30
 800eefc:	9d07      	ldr	r5, [sp, #28]
 800eefe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ef02:	f1ca 0118 	rsb	r1, sl, #24
 800ef06:	fa40 f301 	asr.w	r3, r0, r1
 800ef0a:	441d      	add	r5, r3
 800ef0c:	408b      	lsls	r3, r1
 800ef0e:	1ac0      	subs	r0, r0, r3
 800ef10:	ab0c      	add	r3, sp, #48	; 0x30
 800ef12:	9507      	str	r5, [sp, #28]
 800ef14:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ef18:	f1ca 0317 	rsb	r3, sl, #23
 800ef1c:	fa40 f303 	asr.w	r3, r0, r3
 800ef20:	9302      	str	r3, [sp, #8]
 800ef22:	9b02      	ldr	r3, [sp, #8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	dd66      	ble.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef28:	9b07      	ldr	r3, [sp, #28]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	9307      	str	r3, [sp, #28]
 800ef30:	4615      	mov	r5, r2
 800ef32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef36:	4294      	cmp	r4, r2
 800ef38:	f300 8099 	bgt.w	800f06e <__kernel_rem_pio2+0x2e6>
 800ef3c:	f1ba 0f00 	cmp.w	sl, #0
 800ef40:	dd07      	ble.n	800ef52 <__kernel_rem_pio2+0x1ca>
 800ef42:	f1ba 0f01 	cmp.w	sl, #1
 800ef46:	f000 80a5 	beq.w	800f094 <__kernel_rem_pio2+0x30c>
 800ef4a:	f1ba 0f02 	cmp.w	sl, #2
 800ef4e:	f000 80c1 	beq.w	800f0d4 <__kernel_rem_pio2+0x34c>
 800ef52:	9b02      	ldr	r3, [sp, #8]
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d14e      	bne.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef58:	4632      	mov	r2, r6
 800ef5a:	463b      	mov	r3, r7
 800ef5c:	4958      	ldr	r1, [pc, #352]	; (800f0c0 <__kernel_rem_pio2+0x338>)
 800ef5e:	2000      	movs	r0, #0
 800ef60:	f7f1 f94a 	bl	80001f8 <__aeabi_dsub>
 800ef64:	4606      	mov	r6, r0
 800ef66:	460f      	mov	r7, r1
 800ef68:	2d00      	cmp	r5, #0
 800ef6a:	d044      	beq.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef6c:	4650      	mov	r0, sl
 800ef6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f0b0 <__kernel_rem_pio2+0x328>
 800ef72:	f000 fc29 	bl	800f7c8 <scalbn>
 800ef76:	4630      	mov	r0, r6
 800ef78:	4639      	mov	r1, r7
 800ef7a:	ec53 2b10 	vmov	r2, r3, d0
 800ef7e:	f7f1 f93b 	bl	80001f8 <__aeabi_dsub>
 800ef82:	4606      	mov	r6, r0
 800ef84:	460f      	mov	r7, r1
 800ef86:	e036      	b.n	800eff6 <__kernel_rem_pio2+0x26e>
 800ef88:	4b4e      	ldr	r3, [pc, #312]	; (800f0c4 <__kernel_rem_pio2+0x33c>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	4639      	mov	r1, r7
 800ef90:	f7f1 faea 	bl	8000568 <__aeabi_dmul>
 800ef94:	f7f1 fd98 	bl	8000ac8 <__aeabi_d2iz>
 800ef98:	f7f1 fa7c 	bl	8000494 <__aeabi_i2d>
 800ef9c:	4b4a      	ldr	r3, [pc, #296]	; (800f0c8 <__kernel_rem_pio2+0x340>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	4680      	mov	r8, r0
 800efa2:	4689      	mov	r9, r1
 800efa4:	f7f1 fae0 	bl	8000568 <__aeabi_dmul>
 800efa8:	4602      	mov	r2, r0
 800efaa:	460b      	mov	r3, r1
 800efac:	4630      	mov	r0, r6
 800efae:	4639      	mov	r1, r7
 800efb0:	f7f1 f922 	bl	80001f8 <__aeabi_dsub>
 800efb4:	f7f1 fd88 	bl	8000ac8 <__aeabi_d2iz>
 800efb8:	9b02      	ldr	r3, [sp, #8]
 800efba:	f843 0b04 	str.w	r0, [r3], #4
 800efbe:	3d01      	subs	r5, #1
 800efc0:	9302      	str	r3, [sp, #8]
 800efc2:	ab70      	add	r3, sp, #448	; 0x1c0
 800efc4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800efc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efcc:	4640      	mov	r0, r8
 800efce:	4649      	mov	r1, r9
 800efd0:	f7f1 f914 	bl	80001fc <__adddf3>
 800efd4:	4606      	mov	r6, r0
 800efd6:	460f      	mov	r7, r1
 800efd8:	e75b      	b.n	800ee92 <__kernel_rem_pio2+0x10a>
 800efda:	d105      	bne.n	800efe8 <__kernel_rem_pio2+0x260>
 800efdc:	1e63      	subs	r3, r4, #1
 800efde:	aa0c      	add	r2, sp, #48	; 0x30
 800efe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800efe4:	15c3      	asrs	r3, r0, #23
 800efe6:	e79b      	b.n	800ef20 <__kernel_rem_pio2+0x198>
 800efe8:	4b38      	ldr	r3, [pc, #224]	; (800f0cc <__kernel_rem_pio2+0x344>)
 800efea:	2200      	movs	r2, #0
 800efec:	f7f1 fd42 	bl	8000a74 <__aeabi_dcmpge>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d139      	bne.n	800f068 <__kernel_rem_pio2+0x2e0>
 800eff4:	9002      	str	r0, [sp, #8]
 800eff6:	2200      	movs	r2, #0
 800eff8:	2300      	movs	r3, #0
 800effa:	4630      	mov	r0, r6
 800effc:	4639      	mov	r1, r7
 800effe:	f7f1 fd1b 	bl	8000a38 <__aeabi_dcmpeq>
 800f002:	2800      	cmp	r0, #0
 800f004:	f000 80b4 	beq.w	800f170 <__kernel_rem_pio2+0x3e8>
 800f008:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800f00c:	465b      	mov	r3, fp
 800f00e:	2200      	movs	r2, #0
 800f010:	9904      	ldr	r1, [sp, #16]
 800f012:	428b      	cmp	r3, r1
 800f014:	da65      	bge.n	800f0e2 <__kernel_rem_pio2+0x35a>
 800f016:	2a00      	cmp	r2, #0
 800f018:	d07b      	beq.n	800f112 <__kernel_rem_pio2+0x38a>
 800f01a:	ab0c      	add	r3, sp, #48	; 0x30
 800f01c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f020:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f024:	2b00      	cmp	r3, #0
 800f026:	f000 80a0 	beq.w	800f16a <__kernel_rem_pio2+0x3e2>
 800f02a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f0b0 <__kernel_rem_pio2+0x328>
 800f02e:	4650      	mov	r0, sl
 800f030:	f000 fbca 	bl	800f7c8 <scalbn>
 800f034:	4f23      	ldr	r7, [pc, #140]	; (800f0c4 <__kernel_rem_pio2+0x33c>)
 800f036:	ec55 4b10 	vmov	r4, r5, d0
 800f03a:	46d8      	mov	r8, fp
 800f03c:	2600      	movs	r6, #0
 800f03e:	f1b8 0f00 	cmp.w	r8, #0
 800f042:	f280 80cf 	bge.w	800f1e4 <__kernel_rem_pio2+0x45c>
 800f046:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f0a8 <__kernel_rem_pio2+0x320>
 800f04a:	465f      	mov	r7, fp
 800f04c:	f04f 0800 	mov.w	r8, #0
 800f050:	2f00      	cmp	r7, #0
 800f052:	f2c0 80fd 	blt.w	800f250 <__kernel_rem_pio2+0x4c8>
 800f056:	ab70      	add	r3, sp, #448	; 0x1c0
 800f058:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f0d0 <__kernel_rem_pio2+0x348>
 800f05c:	ec55 4b18 	vmov	r4, r5, d8
 800f060:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f064:	2600      	movs	r6, #0
 800f066:	e0e5      	b.n	800f234 <__kernel_rem_pio2+0x4ac>
 800f068:	2302      	movs	r3, #2
 800f06a:	9302      	str	r3, [sp, #8]
 800f06c:	e75c      	b.n	800ef28 <__kernel_rem_pio2+0x1a0>
 800f06e:	f8db 3000 	ldr.w	r3, [fp]
 800f072:	b955      	cbnz	r5, 800f08a <__kernel_rem_pio2+0x302>
 800f074:	b123      	cbz	r3, 800f080 <__kernel_rem_pio2+0x2f8>
 800f076:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f07a:	f8cb 3000 	str.w	r3, [fp]
 800f07e:	2301      	movs	r3, #1
 800f080:	3201      	adds	r2, #1
 800f082:	f10b 0b04 	add.w	fp, fp, #4
 800f086:	461d      	mov	r5, r3
 800f088:	e755      	b.n	800ef36 <__kernel_rem_pio2+0x1ae>
 800f08a:	1acb      	subs	r3, r1, r3
 800f08c:	f8cb 3000 	str.w	r3, [fp]
 800f090:	462b      	mov	r3, r5
 800f092:	e7f5      	b.n	800f080 <__kernel_rem_pio2+0x2f8>
 800f094:	1e62      	subs	r2, r4, #1
 800f096:	ab0c      	add	r3, sp, #48	; 0x30
 800f098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f09c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0a0:	a90c      	add	r1, sp, #48	; 0x30
 800f0a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f0a6:	e754      	b.n	800ef52 <__kernel_rem_pio2+0x1ca>
	...
 800f0b4:	3ff00000 	.word	0x3ff00000
 800f0b8:	0800fe18 	.word	0x0800fe18
 800f0bc:	40200000 	.word	0x40200000
 800f0c0:	3ff00000 	.word	0x3ff00000
 800f0c4:	3e700000 	.word	0x3e700000
 800f0c8:	41700000 	.word	0x41700000
 800f0cc:	3fe00000 	.word	0x3fe00000
 800f0d0:	0800fdd8 	.word	0x0800fdd8
 800f0d4:	1e62      	subs	r2, r4, #1
 800f0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800f0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f0e0:	e7de      	b.n	800f0a0 <__kernel_rem_pio2+0x318>
 800f0e2:	a90c      	add	r1, sp, #48	; 0x30
 800f0e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	430a      	orrs	r2, r1
 800f0ec:	e790      	b.n	800f010 <__kernel_rem_pio2+0x288>
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f0f4:	2900      	cmp	r1, #0
 800f0f6:	d0fa      	beq.n	800f0ee <__kernel_rem_pio2+0x366>
 800f0f8:	9a08      	ldr	r2, [sp, #32]
 800f0fa:	18e3      	adds	r3, r4, r3
 800f0fc:	18a6      	adds	r6, r4, r2
 800f0fe:	aa20      	add	r2, sp, #128	; 0x80
 800f100:	1c65      	adds	r5, r4, #1
 800f102:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f106:	9302      	str	r3, [sp, #8]
 800f108:	9b02      	ldr	r3, [sp, #8]
 800f10a:	42ab      	cmp	r3, r5
 800f10c:	da04      	bge.n	800f118 <__kernel_rem_pio2+0x390>
 800f10e:	461c      	mov	r4, r3
 800f110:	e6b5      	b.n	800ee7e <__kernel_rem_pio2+0xf6>
 800f112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f114:	2301      	movs	r3, #1
 800f116:	e7eb      	b.n	800f0f0 <__kernel_rem_pio2+0x368>
 800f118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f11e:	f7f1 f9b9 	bl	8000494 <__aeabi_i2d>
 800f122:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f128:	46b3      	mov	fp, r6
 800f12a:	461c      	mov	r4, r3
 800f12c:	2700      	movs	r7, #0
 800f12e:	f04f 0800 	mov.w	r8, #0
 800f132:	f04f 0900 	mov.w	r9, #0
 800f136:	9b06      	ldr	r3, [sp, #24]
 800f138:	429f      	cmp	r7, r3
 800f13a:	dd06      	ble.n	800f14a <__kernel_rem_pio2+0x3c2>
 800f13c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f13e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f142:	e9c3 8900 	strd	r8, r9, [r3]
 800f146:	3501      	adds	r5, #1
 800f148:	e7de      	b.n	800f108 <__kernel_rem_pio2+0x380>
 800f14a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f14e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f152:	f7f1 fa09 	bl	8000568 <__aeabi_dmul>
 800f156:	4602      	mov	r2, r0
 800f158:	460b      	mov	r3, r1
 800f15a:	4640      	mov	r0, r8
 800f15c:	4649      	mov	r1, r9
 800f15e:	f7f1 f84d 	bl	80001fc <__adddf3>
 800f162:	3701      	adds	r7, #1
 800f164:	4680      	mov	r8, r0
 800f166:	4689      	mov	r9, r1
 800f168:	e7e5      	b.n	800f136 <__kernel_rem_pio2+0x3ae>
 800f16a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f16e:	e754      	b.n	800f01a <__kernel_rem_pio2+0x292>
 800f170:	ec47 6b10 	vmov	d0, r6, r7
 800f174:	f1ca 0000 	rsb	r0, sl, #0
 800f178:	f000 fb26 	bl	800f7c8 <scalbn>
 800f17c:	ec57 6b10 	vmov	r6, r7, d0
 800f180:	4b9f      	ldr	r3, [pc, #636]	; (800f400 <__kernel_rem_pio2+0x678>)
 800f182:	ee10 0a10 	vmov	r0, s0
 800f186:	2200      	movs	r2, #0
 800f188:	4639      	mov	r1, r7
 800f18a:	f7f1 fc73 	bl	8000a74 <__aeabi_dcmpge>
 800f18e:	b300      	cbz	r0, 800f1d2 <__kernel_rem_pio2+0x44a>
 800f190:	4b9c      	ldr	r3, [pc, #624]	; (800f404 <__kernel_rem_pio2+0x67c>)
 800f192:	2200      	movs	r2, #0
 800f194:	4630      	mov	r0, r6
 800f196:	4639      	mov	r1, r7
 800f198:	f7f1 f9e6 	bl	8000568 <__aeabi_dmul>
 800f19c:	f7f1 fc94 	bl	8000ac8 <__aeabi_d2iz>
 800f1a0:	4605      	mov	r5, r0
 800f1a2:	f7f1 f977 	bl	8000494 <__aeabi_i2d>
 800f1a6:	4b96      	ldr	r3, [pc, #600]	; (800f400 <__kernel_rem_pio2+0x678>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f7f1 f9dd 	bl	8000568 <__aeabi_dmul>
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	4639      	mov	r1, r7
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	f7f1 f81f 	bl	80001f8 <__aeabi_dsub>
 800f1ba:	f7f1 fc85 	bl	8000ac8 <__aeabi_d2iz>
 800f1be:	f104 0b01 	add.w	fp, r4, #1
 800f1c2:	ab0c      	add	r3, sp, #48	; 0x30
 800f1c4:	f10a 0a18 	add.w	sl, sl, #24
 800f1c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f1cc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f1d0:	e72b      	b.n	800f02a <__kernel_rem_pio2+0x2a2>
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	f7f1 fc77 	bl	8000ac8 <__aeabi_d2iz>
 800f1da:	ab0c      	add	r3, sp, #48	; 0x30
 800f1dc:	46a3      	mov	fp, r4
 800f1de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f1e2:	e722      	b.n	800f02a <__kernel_rem_pio2+0x2a2>
 800f1e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800f1e6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f1ea:	ab0c      	add	r3, sp, #48	; 0x30
 800f1ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f1f0:	f7f1 f950 	bl	8000494 <__aeabi_i2d>
 800f1f4:	4622      	mov	r2, r4
 800f1f6:	462b      	mov	r3, r5
 800f1f8:	f7f1 f9b6 	bl	8000568 <__aeabi_dmul>
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	e9c9 0100 	strd	r0, r1, [r9]
 800f202:	463b      	mov	r3, r7
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 f9ae 	bl	8000568 <__aeabi_dmul>
 800f20c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f210:	4604      	mov	r4, r0
 800f212:	460d      	mov	r5, r1
 800f214:	e713      	b.n	800f03e <__kernel_rem_pio2+0x2b6>
 800f216:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f21a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f21e:	f7f1 f9a3 	bl	8000568 <__aeabi_dmul>
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	4620      	mov	r0, r4
 800f228:	4629      	mov	r1, r5
 800f22a:	f7f0 ffe7 	bl	80001fc <__adddf3>
 800f22e:	3601      	adds	r6, #1
 800f230:	4604      	mov	r4, r0
 800f232:	460d      	mov	r5, r1
 800f234:	9b04      	ldr	r3, [sp, #16]
 800f236:	429e      	cmp	r6, r3
 800f238:	dc01      	bgt.n	800f23e <__kernel_rem_pio2+0x4b6>
 800f23a:	45b0      	cmp	r8, r6
 800f23c:	daeb      	bge.n	800f216 <__kernel_rem_pio2+0x48e>
 800f23e:	ab48      	add	r3, sp, #288	; 0x120
 800f240:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f244:	e9c3 4500 	strd	r4, r5, [r3]
 800f248:	3f01      	subs	r7, #1
 800f24a:	f108 0801 	add.w	r8, r8, #1
 800f24e:	e6ff      	b.n	800f050 <__kernel_rem_pio2+0x2c8>
 800f250:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f252:	2b02      	cmp	r3, #2
 800f254:	dc0b      	bgt.n	800f26e <__kernel_rem_pio2+0x4e6>
 800f256:	2b00      	cmp	r3, #0
 800f258:	dc6e      	bgt.n	800f338 <__kernel_rem_pio2+0x5b0>
 800f25a:	d045      	beq.n	800f2e8 <__kernel_rem_pio2+0x560>
 800f25c:	9b07      	ldr	r3, [sp, #28]
 800f25e:	f003 0007 	and.w	r0, r3, #7
 800f262:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f266:	ecbd 8b02 	vpop	{d8}
 800f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f270:	2b03      	cmp	r3, #3
 800f272:	d1f3      	bne.n	800f25c <__kernel_rem_pio2+0x4d4>
 800f274:	ab48      	add	r3, sp, #288	; 0x120
 800f276:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f27a:	46d0      	mov	r8, sl
 800f27c:	46d9      	mov	r9, fp
 800f27e:	f1b9 0f00 	cmp.w	r9, #0
 800f282:	f1a8 0808 	sub.w	r8, r8, #8
 800f286:	dc64      	bgt.n	800f352 <__kernel_rem_pio2+0x5ca>
 800f288:	465c      	mov	r4, fp
 800f28a:	2c01      	cmp	r4, #1
 800f28c:	f1aa 0a08 	sub.w	sl, sl, #8
 800f290:	dc7e      	bgt.n	800f390 <__kernel_rem_pio2+0x608>
 800f292:	2000      	movs	r0, #0
 800f294:	2100      	movs	r1, #0
 800f296:	f1bb 0f01 	cmp.w	fp, #1
 800f29a:	f300 8097 	bgt.w	800f3cc <__kernel_rem_pio2+0x644>
 800f29e:	9b02      	ldr	r3, [sp, #8]
 800f2a0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f2a4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f040 8099 	bne.w	800f3e0 <__kernel_rem_pio2+0x658>
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	e9c3 5600 	strd	r5, r6, [r3]
 800f2b4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f2b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f2bc:	e7ce      	b.n	800f25c <__kernel_rem_pio2+0x4d4>
 800f2be:	ab48      	add	r3, sp, #288	; 0x120
 800f2c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c8:	f7f0 ff98 	bl	80001fc <__adddf3>
 800f2cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f2d0:	f1bb 0f00 	cmp.w	fp, #0
 800f2d4:	daf3      	bge.n	800f2be <__kernel_rem_pio2+0x536>
 800f2d6:	9b02      	ldr	r3, [sp, #8]
 800f2d8:	b113      	cbz	r3, 800f2e0 <__kernel_rem_pio2+0x558>
 800f2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2de:	4619      	mov	r1, r3
 800f2e0:	9b01      	ldr	r3, [sp, #4]
 800f2e2:	e9c3 0100 	strd	r0, r1, [r3]
 800f2e6:	e7b9      	b.n	800f25c <__kernel_rem_pio2+0x4d4>
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	e7f0      	b.n	800f2d0 <__kernel_rem_pio2+0x548>
 800f2ee:	ab48      	add	r3, sp, #288	; 0x120
 800f2f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f7f0 ff80 	bl	80001fc <__adddf3>
 800f2fc:	3c01      	subs	r4, #1
 800f2fe:	2c00      	cmp	r4, #0
 800f300:	daf5      	bge.n	800f2ee <__kernel_rem_pio2+0x566>
 800f302:	9b02      	ldr	r3, [sp, #8]
 800f304:	b1e3      	cbz	r3, 800f340 <__kernel_rem_pio2+0x5b8>
 800f306:	4602      	mov	r2, r0
 800f308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f30c:	9c01      	ldr	r4, [sp, #4]
 800f30e:	e9c4 2300 	strd	r2, r3, [r4]
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f31a:	f7f0 ff6d 	bl	80001f8 <__aeabi_dsub>
 800f31e:	ad4a      	add	r5, sp, #296	; 0x128
 800f320:	2401      	movs	r4, #1
 800f322:	45a3      	cmp	fp, r4
 800f324:	da0f      	bge.n	800f346 <__kernel_rem_pio2+0x5be>
 800f326:	9b02      	ldr	r3, [sp, #8]
 800f328:	b113      	cbz	r3, 800f330 <__kernel_rem_pio2+0x5a8>
 800f32a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f32e:	4619      	mov	r1, r3
 800f330:	9b01      	ldr	r3, [sp, #4]
 800f332:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f336:	e791      	b.n	800f25c <__kernel_rem_pio2+0x4d4>
 800f338:	465c      	mov	r4, fp
 800f33a:	2000      	movs	r0, #0
 800f33c:	2100      	movs	r1, #0
 800f33e:	e7de      	b.n	800f2fe <__kernel_rem_pio2+0x576>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	e7e2      	b.n	800f30c <__kernel_rem_pio2+0x584>
 800f346:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f34a:	f7f0 ff57 	bl	80001fc <__adddf3>
 800f34e:	3401      	adds	r4, #1
 800f350:	e7e7      	b.n	800f322 <__kernel_rem_pio2+0x59a>
 800f352:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f356:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f35a:	4620      	mov	r0, r4
 800f35c:	4632      	mov	r2, r6
 800f35e:	463b      	mov	r3, r7
 800f360:	4629      	mov	r1, r5
 800f362:	f7f0 ff4b 	bl	80001fc <__adddf3>
 800f366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	4620      	mov	r0, r4
 800f370:	4629      	mov	r1, r5
 800f372:	f7f0 ff41 	bl	80001f8 <__aeabi_dsub>
 800f376:	4632      	mov	r2, r6
 800f378:	463b      	mov	r3, r7
 800f37a:	f7f0 ff3f 	bl	80001fc <__adddf3>
 800f37e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f382:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f386:	ed88 7b00 	vstr	d7, [r8]
 800f38a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f38e:	e776      	b.n	800f27e <__kernel_rem_pio2+0x4f6>
 800f390:	e9da 8900 	ldrd	r8, r9, [sl]
 800f394:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f398:	4640      	mov	r0, r8
 800f39a:	4632      	mov	r2, r6
 800f39c:	463b      	mov	r3, r7
 800f39e:	4649      	mov	r1, r9
 800f3a0:	f7f0 ff2c 	bl	80001fc <__adddf3>
 800f3a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	4640      	mov	r0, r8
 800f3ae:	4649      	mov	r1, r9
 800f3b0:	f7f0 ff22 	bl	80001f8 <__aeabi_dsub>
 800f3b4:	4632      	mov	r2, r6
 800f3b6:	463b      	mov	r3, r7
 800f3b8:	f7f0 ff20 	bl	80001fc <__adddf3>
 800f3bc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f3c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3c4:	ed8a 7b00 	vstr	d7, [sl]
 800f3c8:	3c01      	subs	r4, #1
 800f3ca:	e75e      	b.n	800f28a <__kernel_rem_pio2+0x502>
 800f3cc:	ab48      	add	r3, sp, #288	; 0x120
 800f3ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	f7f0 ff11 	bl	80001fc <__adddf3>
 800f3da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f3de:	e75a      	b.n	800f296 <__kernel_rem_pio2+0x50e>
 800f3e0:	9b01      	ldr	r3, [sp, #4]
 800f3e2:	9a01      	ldr	r2, [sp, #4]
 800f3e4:	601d      	str	r5, [r3, #0]
 800f3e6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f3ea:	605c      	str	r4, [r3, #4]
 800f3ec:	609f      	str	r7, [r3, #8]
 800f3ee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f3f2:	60d3      	str	r3, [r2, #12]
 800f3f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3f8:	6110      	str	r0, [r2, #16]
 800f3fa:	6153      	str	r3, [r2, #20]
 800f3fc:	e72e      	b.n	800f25c <__kernel_rem_pio2+0x4d4>
 800f3fe:	bf00      	nop
 800f400:	41700000 	.word	0x41700000
 800f404:	3e700000 	.word	0x3e700000

0800f408 <__kernel_sin>:
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	ed2d 8b04 	vpush	{d8-d9}
 800f410:	eeb0 8a41 	vmov.f32	s16, s2
 800f414:	eef0 8a61 	vmov.f32	s17, s3
 800f418:	ec55 4b10 	vmov	r4, r5, d0
 800f41c:	b083      	sub	sp, #12
 800f41e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f422:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f426:	9001      	str	r0, [sp, #4]
 800f428:	da06      	bge.n	800f438 <__kernel_sin+0x30>
 800f42a:	ee10 0a10 	vmov	r0, s0
 800f42e:	4629      	mov	r1, r5
 800f430:	f7f1 fb4a 	bl	8000ac8 <__aeabi_d2iz>
 800f434:	2800      	cmp	r0, #0
 800f436:	d051      	beq.n	800f4dc <__kernel_sin+0xd4>
 800f438:	4622      	mov	r2, r4
 800f43a:	462b      	mov	r3, r5
 800f43c:	4620      	mov	r0, r4
 800f43e:	4629      	mov	r1, r5
 800f440:	f7f1 f892 	bl	8000568 <__aeabi_dmul>
 800f444:	4682      	mov	sl, r0
 800f446:	468b      	mov	fp, r1
 800f448:	4602      	mov	r2, r0
 800f44a:	460b      	mov	r3, r1
 800f44c:	4620      	mov	r0, r4
 800f44e:	4629      	mov	r1, r5
 800f450:	f7f1 f88a 	bl	8000568 <__aeabi_dmul>
 800f454:	a341      	add	r3, pc, #260	; (adr r3, 800f55c <__kernel_sin+0x154>)
 800f456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45a:	4680      	mov	r8, r0
 800f45c:	4689      	mov	r9, r1
 800f45e:	4650      	mov	r0, sl
 800f460:	4659      	mov	r1, fp
 800f462:	f7f1 f881 	bl	8000568 <__aeabi_dmul>
 800f466:	a33f      	add	r3, pc, #252	; (adr r3, 800f564 <__kernel_sin+0x15c>)
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	f7f0 fec4 	bl	80001f8 <__aeabi_dsub>
 800f470:	4652      	mov	r2, sl
 800f472:	465b      	mov	r3, fp
 800f474:	f7f1 f878 	bl	8000568 <__aeabi_dmul>
 800f478:	a33c      	add	r3, pc, #240	; (adr r3, 800f56c <__kernel_sin+0x164>)
 800f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47e:	f7f0 febd 	bl	80001fc <__adddf3>
 800f482:	4652      	mov	r2, sl
 800f484:	465b      	mov	r3, fp
 800f486:	f7f1 f86f 	bl	8000568 <__aeabi_dmul>
 800f48a:	a33a      	add	r3, pc, #232	; (adr r3, 800f574 <__kernel_sin+0x16c>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	f7f0 feb2 	bl	80001f8 <__aeabi_dsub>
 800f494:	4652      	mov	r2, sl
 800f496:	465b      	mov	r3, fp
 800f498:	f7f1 f866 	bl	8000568 <__aeabi_dmul>
 800f49c:	a337      	add	r3, pc, #220	; (adr r3, 800f57c <__kernel_sin+0x174>)
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	f7f0 feab 	bl	80001fc <__adddf3>
 800f4a6:	9b01      	ldr	r3, [sp, #4]
 800f4a8:	4606      	mov	r6, r0
 800f4aa:	460f      	mov	r7, r1
 800f4ac:	b9eb      	cbnz	r3, 800f4ea <__kernel_sin+0xe2>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4650      	mov	r0, sl
 800f4b4:	4659      	mov	r1, fp
 800f4b6:	f7f1 f857 	bl	8000568 <__aeabi_dmul>
 800f4ba:	a325      	add	r3, pc, #148	; (adr r3, 800f550 <__kernel_sin+0x148>)
 800f4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c0:	f7f0 fe9a 	bl	80001f8 <__aeabi_dsub>
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	464b      	mov	r3, r9
 800f4c8:	f7f1 f84e 	bl	8000568 <__aeabi_dmul>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	f7f0 fe92 	bl	80001fc <__adddf3>
 800f4d8:	4604      	mov	r4, r0
 800f4da:	460d      	mov	r5, r1
 800f4dc:	ec45 4b10 	vmov	d0, r4, r5
 800f4e0:	b003      	add	sp, #12
 800f4e2:	ecbd 8b04 	vpop	{d8-d9}
 800f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ea:	4b1b      	ldr	r3, [pc, #108]	; (800f558 <__kernel_sin+0x150>)
 800f4ec:	ec51 0b18 	vmov	r0, r1, d8
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f7f1 f839 	bl	8000568 <__aeabi_dmul>
 800f4f6:	4632      	mov	r2, r6
 800f4f8:	ec41 0b19 	vmov	d9, r0, r1
 800f4fc:	463b      	mov	r3, r7
 800f4fe:	4640      	mov	r0, r8
 800f500:	4649      	mov	r1, r9
 800f502:	f7f1 f831 	bl	8000568 <__aeabi_dmul>
 800f506:	4602      	mov	r2, r0
 800f508:	460b      	mov	r3, r1
 800f50a:	ec51 0b19 	vmov	r0, r1, d9
 800f50e:	f7f0 fe73 	bl	80001f8 <__aeabi_dsub>
 800f512:	4652      	mov	r2, sl
 800f514:	465b      	mov	r3, fp
 800f516:	f7f1 f827 	bl	8000568 <__aeabi_dmul>
 800f51a:	ec53 2b18 	vmov	r2, r3, d8
 800f51e:	f7f0 fe6b 	bl	80001f8 <__aeabi_dsub>
 800f522:	a30b      	add	r3, pc, #44	; (adr r3, 800f550 <__kernel_sin+0x148>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	4606      	mov	r6, r0
 800f52a:	460f      	mov	r7, r1
 800f52c:	4640      	mov	r0, r8
 800f52e:	4649      	mov	r1, r9
 800f530:	f7f1 f81a 	bl	8000568 <__aeabi_dmul>
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	4630      	mov	r0, r6
 800f53a:	4639      	mov	r1, r7
 800f53c:	f7f0 fe5e 	bl	80001fc <__adddf3>
 800f540:	4602      	mov	r2, r0
 800f542:	460b      	mov	r3, r1
 800f544:	4620      	mov	r0, r4
 800f546:	4629      	mov	r1, r5
 800f548:	f7f0 fe56 	bl	80001f8 <__aeabi_dsub>
 800f54c:	e7c4      	b.n	800f4d8 <__kernel_sin+0xd0>
 800f54e:	bf00      	nop
 800f550:	55555549 	.word	0x55555549
 800f554:	3fc55555 	.word	0x3fc55555
 800f558:	3fe00000 	.word	0x3fe00000
 800f55c:	5acfd57c 	.word	0x5acfd57c
 800f560:	3de5d93a 	.word	0x3de5d93a
 800f564:	8a2b9ceb 	.word	0x8a2b9ceb
 800f568:	3e5ae5e6 	.word	0x3e5ae5e6
 800f56c:	57b1fe7d 	.word	0x57b1fe7d
 800f570:	3ec71de3 	.word	0x3ec71de3
 800f574:	19c161d5 	.word	0x19c161d5
 800f578:	3f2a01a0 	.word	0x3f2a01a0
 800f57c:	1110f8a6 	.word	0x1110f8a6
 800f580:	3f811111 	.word	0x3f811111

0800f584 <finite>:
 800f584:	b082      	sub	sp, #8
 800f586:	ed8d 0b00 	vstr	d0, [sp]
 800f58a:	9801      	ldr	r0, [sp, #4]
 800f58c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f590:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f594:	0fc0      	lsrs	r0, r0, #31
 800f596:	b002      	add	sp, #8
 800f598:	4770      	bx	lr
 800f59a:	0000      	movs	r0, r0
 800f59c:	0000      	movs	r0, r0
	...

0800f5a0 <floor>:
 800f5a0:	ec51 0b10 	vmov	r0, r1, d0
 800f5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f5ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f5b0:	2e13      	cmp	r6, #19
 800f5b2:	ee10 5a10 	vmov	r5, s0
 800f5b6:	ee10 8a10 	vmov	r8, s0
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	dc32      	bgt.n	800f624 <floor+0x84>
 800f5be:	2e00      	cmp	r6, #0
 800f5c0:	da14      	bge.n	800f5ec <floor+0x4c>
 800f5c2:	a333      	add	r3, pc, #204	; (adr r3, 800f690 <floor+0xf0>)
 800f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c8:	f7f0 fe18 	bl	80001fc <__adddf3>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f7f1 fa5a 	bl	8000a88 <__aeabi_dcmpgt>
 800f5d4:	b138      	cbz	r0, 800f5e6 <floor+0x46>
 800f5d6:	2c00      	cmp	r4, #0
 800f5d8:	da57      	bge.n	800f68a <floor+0xea>
 800f5da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f5de:	431d      	orrs	r5, r3
 800f5e0:	d001      	beq.n	800f5e6 <floor+0x46>
 800f5e2:	4c2d      	ldr	r4, [pc, #180]	; (800f698 <floor+0xf8>)
 800f5e4:	2500      	movs	r5, #0
 800f5e6:	4621      	mov	r1, r4
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	e025      	b.n	800f638 <floor+0x98>
 800f5ec:	4f2b      	ldr	r7, [pc, #172]	; (800f69c <floor+0xfc>)
 800f5ee:	4137      	asrs	r7, r6
 800f5f0:	ea01 0307 	and.w	r3, r1, r7
 800f5f4:	4303      	orrs	r3, r0
 800f5f6:	d01f      	beq.n	800f638 <floor+0x98>
 800f5f8:	a325      	add	r3, pc, #148	; (adr r3, 800f690 <floor+0xf0>)
 800f5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fe:	f7f0 fdfd 	bl	80001fc <__adddf3>
 800f602:	2200      	movs	r2, #0
 800f604:	2300      	movs	r3, #0
 800f606:	f7f1 fa3f 	bl	8000a88 <__aeabi_dcmpgt>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d0eb      	beq.n	800f5e6 <floor+0x46>
 800f60e:	2c00      	cmp	r4, #0
 800f610:	bfbe      	ittt	lt
 800f612:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f616:	fa43 f606 	asrlt.w	r6, r3, r6
 800f61a:	19a4      	addlt	r4, r4, r6
 800f61c:	ea24 0407 	bic.w	r4, r4, r7
 800f620:	2500      	movs	r5, #0
 800f622:	e7e0      	b.n	800f5e6 <floor+0x46>
 800f624:	2e33      	cmp	r6, #51	; 0x33
 800f626:	dd0b      	ble.n	800f640 <floor+0xa0>
 800f628:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f62c:	d104      	bne.n	800f638 <floor+0x98>
 800f62e:	ee10 2a10 	vmov	r2, s0
 800f632:	460b      	mov	r3, r1
 800f634:	f7f0 fde2 	bl	80001fc <__adddf3>
 800f638:	ec41 0b10 	vmov	d0, r0, r1
 800f63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f640:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f648:	fa23 f707 	lsr.w	r7, r3, r7
 800f64c:	4207      	tst	r7, r0
 800f64e:	d0f3      	beq.n	800f638 <floor+0x98>
 800f650:	a30f      	add	r3, pc, #60	; (adr r3, 800f690 <floor+0xf0>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	f7f0 fdd1 	bl	80001fc <__adddf3>
 800f65a:	2200      	movs	r2, #0
 800f65c:	2300      	movs	r3, #0
 800f65e:	f7f1 fa13 	bl	8000a88 <__aeabi_dcmpgt>
 800f662:	2800      	cmp	r0, #0
 800f664:	d0bf      	beq.n	800f5e6 <floor+0x46>
 800f666:	2c00      	cmp	r4, #0
 800f668:	da02      	bge.n	800f670 <floor+0xd0>
 800f66a:	2e14      	cmp	r6, #20
 800f66c:	d103      	bne.n	800f676 <floor+0xd6>
 800f66e:	3401      	adds	r4, #1
 800f670:	ea25 0507 	bic.w	r5, r5, r7
 800f674:	e7b7      	b.n	800f5e6 <floor+0x46>
 800f676:	2301      	movs	r3, #1
 800f678:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f67c:	fa03 f606 	lsl.w	r6, r3, r6
 800f680:	4435      	add	r5, r6
 800f682:	4545      	cmp	r5, r8
 800f684:	bf38      	it	cc
 800f686:	18e4      	addcc	r4, r4, r3
 800f688:	e7f2      	b.n	800f670 <floor+0xd0>
 800f68a:	2500      	movs	r5, #0
 800f68c:	462c      	mov	r4, r5
 800f68e:	e7aa      	b.n	800f5e6 <floor+0x46>
 800f690:	8800759c 	.word	0x8800759c
 800f694:	7e37e43c 	.word	0x7e37e43c
 800f698:	bff00000 	.word	0xbff00000
 800f69c:	000fffff 	.word	0x000fffff

0800f6a0 <nan>:
 800f6a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f6a8 <nan+0x8>
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	00000000 	.word	0x00000000
 800f6ac:	7ff80000 	.word	0x7ff80000

0800f6b0 <rint>:
 800f6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6b2:	ec51 0b10 	vmov	r0, r1, d0
 800f6b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f6ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f6be:	2e13      	cmp	r6, #19
 800f6c0:	ee10 4a10 	vmov	r4, s0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f6ca:	dc58      	bgt.n	800f77e <rint+0xce>
 800f6cc:	2e00      	cmp	r6, #0
 800f6ce:	da2b      	bge.n	800f728 <rint+0x78>
 800f6d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f6d4:	4302      	orrs	r2, r0
 800f6d6:	d023      	beq.n	800f720 <rint+0x70>
 800f6d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f6dc:	4302      	orrs	r2, r0
 800f6de:	4254      	negs	r4, r2
 800f6e0:	4314      	orrs	r4, r2
 800f6e2:	0c4b      	lsrs	r3, r1, #17
 800f6e4:	0b24      	lsrs	r4, r4, #12
 800f6e6:	045b      	lsls	r3, r3, #17
 800f6e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f6ec:	ea44 0103 	orr.w	r1, r4, r3
 800f6f0:	4b32      	ldr	r3, [pc, #200]	; (800f7bc <rint+0x10c>)
 800f6f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f6f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4630      	mov	r0, r6
 800f700:	4639      	mov	r1, r7
 800f702:	f7f0 fd7b 	bl	80001fc <__adddf3>
 800f706:	e9cd 0100 	strd	r0, r1, [sp]
 800f70a:	463b      	mov	r3, r7
 800f70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f710:	4632      	mov	r2, r6
 800f712:	f7f0 fd71 	bl	80001f8 <__aeabi_dsub>
 800f716:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f71a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f71e:	4639      	mov	r1, r7
 800f720:	ec41 0b10 	vmov	d0, r0, r1
 800f724:	b003      	add	sp, #12
 800f726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f728:	4a25      	ldr	r2, [pc, #148]	; (800f7c0 <rint+0x110>)
 800f72a:	4132      	asrs	r2, r6
 800f72c:	ea01 0702 	and.w	r7, r1, r2
 800f730:	4307      	orrs	r7, r0
 800f732:	d0f5      	beq.n	800f720 <rint+0x70>
 800f734:	0851      	lsrs	r1, r2, #1
 800f736:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800f73a:	4314      	orrs	r4, r2
 800f73c:	d00c      	beq.n	800f758 <rint+0xa8>
 800f73e:	ea23 0201 	bic.w	r2, r3, r1
 800f742:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f746:	2e13      	cmp	r6, #19
 800f748:	fa43 f606 	asr.w	r6, r3, r6
 800f74c:	bf0c      	ite	eq
 800f74e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f752:	2400      	movne	r4, #0
 800f754:	ea42 0306 	orr.w	r3, r2, r6
 800f758:	4918      	ldr	r1, [pc, #96]	; (800f7bc <rint+0x10c>)
 800f75a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f75e:	4622      	mov	r2, r4
 800f760:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f764:	4620      	mov	r0, r4
 800f766:	4629      	mov	r1, r5
 800f768:	f7f0 fd48 	bl	80001fc <__adddf3>
 800f76c:	e9cd 0100 	strd	r0, r1, [sp]
 800f770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f774:	4622      	mov	r2, r4
 800f776:	462b      	mov	r3, r5
 800f778:	f7f0 fd3e 	bl	80001f8 <__aeabi_dsub>
 800f77c:	e7d0      	b.n	800f720 <rint+0x70>
 800f77e:	2e33      	cmp	r6, #51	; 0x33
 800f780:	dd07      	ble.n	800f792 <rint+0xe2>
 800f782:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f786:	d1cb      	bne.n	800f720 <rint+0x70>
 800f788:	ee10 2a10 	vmov	r2, s0
 800f78c:	f7f0 fd36 	bl	80001fc <__adddf3>
 800f790:	e7c6      	b.n	800f720 <rint+0x70>
 800f792:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800f796:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f79a:	40d6      	lsrs	r6, r2
 800f79c:	4230      	tst	r0, r6
 800f79e:	d0bf      	beq.n	800f720 <rint+0x70>
 800f7a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800f7a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800f7a8:	bf1f      	itttt	ne
 800f7aa:	ea24 0101 	bicne.w	r1, r4, r1
 800f7ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f7b2:	fa44 f202 	asrne.w	r2, r4, r2
 800f7b6:	ea41 0402 	orrne.w	r4, r1, r2
 800f7ba:	e7cd      	b.n	800f758 <rint+0xa8>
 800f7bc:	0800fe28 	.word	0x0800fe28
 800f7c0:	000fffff 	.word	0x000fffff
 800f7c4:	00000000 	.word	0x00000000

0800f7c8 <scalbn>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	ec55 4b10 	vmov	r4, r5, d0
 800f7ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	462b      	mov	r3, r5
 800f7d6:	b99a      	cbnz	r2, 800f800 <scalbn+0x38>
 800f7d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f7dc:	4323      	orrs	r3, r4
 800f7de:	d036      	beq.n	800f84e <scalbn+0x86>
 800f7e0:	4b39      	ldr	r3, [pc, #228]	; (800f8c8 <scalbn+0x100>)
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	ee10 0a10 	vmov	r0, s0
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f7f0 febd 	bl	8000568 <__aeabi_dmul>
 800f7ee:	4b37      	ldr	r3, [pc, #220]	; (800f8cc <scalbn+0x104>)
 800f7f0:	429e      	cmp	r6, r3
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	460d      	mov	r5, r1
 800f7f6:	da10      	bge.n	800f81a <scalbn+0x52>
 800f7f8:	a32b      	add	r3, pc, #172	; (adr r3, 800f8a8 <scalbn+0xe0>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	e03a      	b.n	800f876 <scalbn+0xae>
 800f800:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f804:	428a      	cmp	r2, r1
 800f806:	d10c      	bne.n	800f822 <scalbn+0x5a>
 800f808:	ee10 2a10 	vmov	r2, s0
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fcf4 	bl	80001fc <__adddf3>
 800f814:	4604      	mov	r4, r0
 800f816:	460d      	mov	r5, r1
 800f818:	e019      	b.n	800f84e <scalbn+0x86>
 800f81a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f81e:	460b      	mov	r3, r1
 800f820:	3a36      	subs	r2, #54	; 0x36
 800f822:	4432      	add	r2, r6
 800f824:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f828:	428a      	cmp	r2, r1
 800f82a:	dd08      	ble.n	800f83e <scalbn+0x76>
 800f82c:	2d00      	cmp	r5, #0
 800f82e:	a120      	add	r1, pc, #128	; (adr r1, 800f8b0 <scalbn+0xe8>)
 800f830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f834:	da1c      	bge.n	800f870 <scalbn+0xa8>
 800f836:	a120      	add	r1, pc, #128	; (adr r1, 800f8b8 <scalbn+0xf0>)
 800f838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83c:	e018      	b.n	800f870 <scalbn+0xa8>
 800f83e:	2a00      	cmp	r2, #0
 800f840:	dd08      	ble.n	800f854 <scalbn+0x8c>
 800f842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f84a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f84e:	ec45 4b10 	vmov	d0, r4, r5
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f858:	da19      	bge.n	800f88e <scalbn+0xc6>
 800f85a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f85e:	429e      	cmp	r6, r3
 800f860:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f864:	dd0a      	ble.n	800f87c <scalbn+0xb4>
 800f866:	a112      	add	r1, pc, #72	; (adr r1, 800f8b0 <scalbn+0xe8>)
 800f868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1e2      	bne.n	800f836 <scalbn+0x6e>
 800f870:	a30f      	add	r3, pc, #60	; (adr r3, 800f8b0 <scalbn+0xe8>)
 800f872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f876:	f7f0 fe77 	bl	8000568 <__aeabi_dmul>
 800f87a:	e7cb      	b.n	800f814 <scalbn+0x4c>
 800f87c:	a10a      	add	r1, pc, #40	; (adr r1, 800f8a8 <scalbn+0xe0>)
 800f87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d0b8      	beq.n	800f7f8 <scalbn+0x30>
 800f886:	a10e      	add	r1, pc, #56	; (adr r1, 800f8c0 <scalbn+0xf8>)
 800f888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f88c:	e7b4      	b.n	800f7f8 <scalbn+0x30>
 800f88e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f892:	3236      	adds	r2, #54	; 0x36
 800f894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f898:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f89c:	4620      	mov	r0, r4
 800f89e:	4b0c      	ldr	r3, [pc, #48]	; (800f8d0 <scalbn+0x108>)
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	e7e8      	b.n	800f876 <scalbn+0xae>
 800f8a4:	f3af 8000 	nop.w
 800f8a8:	c2f8f359 	.word	0xc2f8f359
 800f8ac:	01a56e1f 	.word	0x01a56e1f
 800f8b0:	8800759c 	.word	0x8800759c
 800f8b4:	7e37e43c 	.word	0x7e37e43c
 800f8b8:	8800759c 	.word	0x8800759c
 800f8bc:	fe37e43c 	.word	0xfe37e43c
 800f8c0:	c2f8f359 	.word	0xc2f8f359
 800f8c4:	81a56e1f 	.word	0x81a56e1f
 800f8c8:	43500000 	.word	0x43500000
 800f8cc:	ffff3cb0 	.word	0xffff3cb0
 800f8d0:	3c900000 	.word	0x3c900000

0800f8d4 <_init>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	bf00      	nop
 800f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8da:	bc08      	pop	{r3}
 800f8dc:	469e      	mov	lr, r3
 800f8de:	4770      	bx	lr

0800f8e0 <_fini>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	bf00      	nop
 800f8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8e6:	bc08      	pop	{r3}
 800f8e8:	469e      	mov	lr, r3
 800f8ea:	4770      	bx	lr
