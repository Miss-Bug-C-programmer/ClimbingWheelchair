
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d46c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800d620  0800d620  0001d620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8d0  0800d8d0  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8d0  0800d8d0  0001d8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8d8  0800d8d8  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8d8  0800d8d8  0001d8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8dc  0800d8dc  0001d8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800d8e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  200001a0  0800da80  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000870  0800da80  00020870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020be3  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e8  00000000  00000000  00040db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00044fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  000465f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027318  00000000  00000000  00047a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfc3  00000000  00000000  0006eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b0b  00000000  00000000  0008cd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  001708cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d604 	.word	0x0800d604

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	0800d604 	.word	0x0800d604

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f004 f861 	bl	8005018 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f004 f84c 	bl	8005018 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 ffb3 	bl	8005018 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	pid->iterm = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <MotorInit>:
 * param [targetNumber]	1 or 2, or a Simplified Serial character like '1' or '2'.
 * return		None.
 */
static void writeSabertoothGetCommand(Sabertooth_Handler *st_handler, uint8_t getType, uint8_t targetType, uint8_t targetNumber);

void MotorInit(Sabertooth_Handler* st_handler, uint8_t address, UART_HandleTypeDef* huart){
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	460b      	mov	r3, r1
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	72fb      	strb	r3, [r7, #11]
	st_handler->address = address;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	7afa      	ldrb	r2, [r7, #11]
 80013f2:	701a      	strb	r2, [r3, #0]
	st_handler->huart = huart;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	605a      	str	r2, [r3, #4]
	st_handler->motor1.battery = 0;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	815a      	strh	r2, [r3, #10]
	st_handler->motor1.duty_cycle = 0;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	811a      	strh	r2, [r3, #8]
	st_handler->motor1.current = 0;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	819a      	strh	r2, [r3, #12]
	st_handler->motor1.temp = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	81da      	strh	r2, [r3, #14]
	st_handler->motor2.battery = 0;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	825a      	strh	r2, [r3, #18]
	st_handler->motor2.duty_cycle = 0;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	821a      	strh	r2, [r3, #16]
	st_handler->motor2.current = 0;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	829a      	strh	r2, [r3, #20]
	st_handler->motor2.temp = 0;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	82da      	strh	r2, [r3, #22]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <MotorProcessReply>:
		return;
	uint8_t target_number = (motor == 1) ? TARGET_1 : TARGET_2;
	writeSabertoothGetCommand(st_handler, GET_DUTY_CYCLE, TYPE_MOTOR, target_number);
}

void MotorProcessReply(Sabertooth_Handler *st_handler, uint8_t *receive_buf, uint8_t size) {
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	4613      	mov	r3, r2
 8001444:	71fb      	strb	r3, [r7, #7]
	//make sure the byte is have the right reply number
	if (receive_buf[IDX_COMMAND] != SABERTOOTH_REPLY)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3301      	adds	r3, #1
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b49      	cmp	r3, #73	; 0x49
 800144e:	f040 810b 	bne.w	8001668 <MotorProcessReply+0x230>
		return;
	//Checksum to make sure data receive is in the corrent form
	uint8_t dataChecksum = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	77fb      	strb	r3, [r7, #31]
	dataChecksum = (receive_buf[IDX_ADDRESS] + receive_buf[IDX_COMMAND] + receive_buf[IDX_COMMAND_VALUE]) & 127;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4413      	add	r3, r2
 8001462:	b2da      	uxtb	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001472:	77fb      	strb	r3, [r7, #31]
	if (dataChecksum != receive_buf[IDX_CHECKSUM_1])
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3303      	adds	r3, #3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	7ffa      	ldrb	r2, [r7, #31]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 80f5 	bne.w	800166c <MotorProcessReply+0x234>
		return;
	dataChecksum = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	77fb      	strb	r3, [r7, #31]
	for (int i = 4; i < size - 1; i++)
 8001486:	2304      	movs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e009      	b.n	80014a0 <MotorProcessReply+0x68>
		dataChecksum += receive_buf[i];
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	4413      	add	r3, r2
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	4413      	add	r3, r2
 8001498:	77fb      	strb	r3, [r7, #31]
	for (int i = 4; i < size - 1; i++)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	3301      	adds	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbf0      	blt.n	800148c <MotorProcessReply+0x54>
	dataChecksum &= 127;
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014b0:	77fb      	strb	r3, [r7, #31]
	if (dataChecksum != receive_buf[IDX_CHECKSUM_2(SABERTOOTH_REPLY)])
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3308      	adds	r3, #8
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	7ffa      	ldrb	r2, [r7, #31]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	f040 80d8 	bne.w	8001670 <MotorProcessReply+0x238>
		return;

	int16_t reply_value = (receive_buf[IDX_VALUE_LOW] & 0x7F) + ((receive_buf[IDX_VALUE_HIGH] & 0x7F) << 7);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3304      	adds	r3, #4
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3305      	adds	r3, #5
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	01db      	lsls	r3, r3, #7
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	827b      	strh	r3, [r7, #18]

	//Create a pointer to hold the motor handler
	Sabertooth_Motor_Handler* pMotor;
	if ((receive_buf[IDX_TARGET_TYPE(SABERTOOTH_REPLY)] == TYPE_MOTOR ) && (receive_buf[IDX_TARGET_ID(SABERTOOTH_REPLY)] == TARGET_1))
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3306      	adds	r3, #6
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b4d      	cmp	r3, #77	; 0x4d
 80014ea:	d107      	bne.n	80014fc <MotorProcessReply+0xc4>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3307      	adds	r3, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d102      	bne.n	80014fc <MotorProcessReply+0xc4>
		pMotor = &(st_handler->motor1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3308      	adds	r3, #8
 80014fa:	617b      	str	r3, [r7, #20]
	if ((receive_buf[IDX_TARGET_TYPE(SABERTOOTH_REPLY)] == TYPE_MOTOR ) && (receive_buf[IDX_TARGET_ID(SABERTOOTH_REPLY)] == TARGET_2))
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3306      	adds	r3, #6
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b4d      	cmp	r3, #77	; 0x4d
 8001504:	d107      	bne.n	8001516 <MotorProcessReply+0xde>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3307      	adds	r3, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d102      	bne.n	8001516 <MotorProcessReply+0xde>
		pMotor = &(st_handler->motor2);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3310      	adds	r3, #16
 8001514:	617b      	str	r3, [r7, #20]

	//Check reply from which command
	switch (receive_buf[IDX_COMMAND_VALUE]) {
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3302      	adds	r3, #2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b31      	cmp	r3, #49	; 0x31
 800151e:	f200 80a9 	bhi.w	8001674 <MotorProcessReply+0x23c>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <MotorProcessReply+0xf0>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	0800164b 	.word	0x0800164b
 800152c:	0800164b 	.word	0x0800164b
 8001530:	08001675 	.word	0x08001675
 8001534:	08001675 	.word	0x08001675
 8001538:	08001675 	.word	0x08001675
 800153c:	08001675 	.word	0x08001675
 8001540:	08001675 	.word	0x08001675
 8001544:	08001675 	.word	0x08001675
 8001548:	08001675 	.word	0x08001675
 800154c:	08001675 	.word	0x08001675
 8001550:	08001675 	.word	0x08001675
 8001554:	08001675 	.word	0x08001675
 8001558:	08001675 	.word	0x08001675
 800155c:	08001675 	.word	0x08001675
 8001560:	08001675 	.word	0x08001675
 8001564:	08001675 	.word	0x08001675
 8001568:	080015f1 	.word	0x080015f1
 800156c:	080015f1 	.word	0x080015f1
 8001570:	08001675 	.word	0x08001675
 8001574:	08001675 	.word	0x08001675
 8001578:	08001675 	.word	0x08001675
 800157c:	08001675 	.word	0x08001675
 8001580:	08001675 	.word	0x08001675
 8001584:	08001675 	.word	0x08001675
 8001588:	08001675 	.word	0x08001675
 800158c:	08001675 	.word	0x08001675
 8001590:	08001675 	.word	0x08001675
 8001594:	08001675 	.word	0x08001675
 8001598:	08001675 	.word	0x08001675
 800159c:	08001675 	.word	0x08001675
 80015a0:	08001675 	.word	0x08001675
 80015a4:	08001675 	.word	0x08001675
 80015a8:	0800160f 	.word	0x0800160f
 80015ac:	0800160f 	.word	0x0800160f
 80015b0:	08001675 	.word	0x08001675
 80015b4:	08001675 	.word	0x08001675
 80015b8:	08001675 	.word	0x08001675
 80015bc:	08001675 	.word	0x08001675
 80015c0:	08001675 	.word	0x08001675
 80015c4:	08001675 	.word	0x08001675
 80015c8:	08001675 	.word	0x08001675
 80015cc:	08001675 	.word	0x08001675
 80015d0:	08001675 	.word	0x08001675
 80015d4:	08001675 	.word	0x08001675
 80015d8:	08001675 	.word	0x08001675
 80015dc:	08001675 	.word	0x08001675
 80015e0:	08001675 	.word	0x08001675
 80015e4:	08001675 	.word	0x08001675
 80015e8:	0800162d 	.word	0x0800162d
 80015ec:	0800162d 	.word	0x0800162d
		case GET_BATTERY:
		case GET_BATTERY + 1:
			pMotor->battery = (receive_buf[IDX_COMMAND_VALUE] == GET_BATTERY) ? reply_value : -reply_value;
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3302      	adds	r3, #2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d004      	beq.n	8001604 <MotorProcessReply+0x1cc>
 80015fa:	8a7b      	ldrh	r3, [r7, #18]
 80015fc:	425b      	negs	r3, r3
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b21b      	sxth	r3, r3
 8001602:	e001      	b.n	8001608 <MotorProcessReply+0x1d0>
 8001604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	8053      	strh	r3, [r2, #2]
			break;
 800160c:	e033      	b.n	8001676 <MotorProcessReply+0x23e>
		case GET_CURRENT:
		case GET_CURRENT + 1:
			pMotor->current = (receive_buf[IDX_COMMAND_VALUE] == GET_CURRENT) ? reply_value : -reply_value;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3302      	adds	r3, #2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b20      	cmp	r3, #32
 8001616:	d004      	beq.n	8001622 <MotorProcessReply+0x1ea>
 8001618:	8a7b      	ldrh	r3, [r7, #18]
 800161a:	425b      	negs	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b21b      	sxth	r3, r3
 8001620:	e001      	b.n	8001626 <MotorProcessReply+0x1ee>
 8001622:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	8093      	strh	r3, [r2, #4]
			break;
 800162a:	e024      	b.n	8001676 <MotorProcessReply+0x23e>
		case GET_TEMP:
		case GET_TEMP + 1:
			pMotor->temp = (receive_buf[IDX_COMMAND_VALUE] == GET_TEMP) ? reply_value : -reply_value;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3302      	adds	r3, #2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b30      	cmp	r3, #48	; 0x30
 8001634:	d004      	beq.n	8001640 <MotorProcessReply+0x208>
 8001636:	8a7b      	ldrh	r3, [r7, #18]
 8001638:	425b      	negs	r3, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	b21b      	sxth	r3, r3
 800163e:	e001      	b.n	8001644 <MotorProcessReply+0x20c>
 8001640:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	80d3      	strh	r3, [r2, #6]
			break;
 8001648:	e015      	b.n	8001676 <MotorProcessReply+0x23e>
		case GET_DUTY_CYCLE:
		case GET_DUTY_CYCLE + 1:
			pMotor->temp = (receive_buf[IDX_COMMAND_VALUE] == GET_TEMP) ? reply_value : -reply_value;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3302      	adds	r3, #2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b30      	cmp	r3, #48	; 0x30
 8001652:	d004      	beq.n	800165e <MotorProcessReply+0x226>
 8001654:	8a7b      	ldrh	r3, [r7, #18]
 8001656:	425b      	negs	r3, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	b21b      	sxth	r3, r3
 800165c:	e001      	b.n	8001662 <MotorProcessReply+0x22a>
 800165e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	80d3      	strh	r3, [r2, #6]
			break;
 8001666:	e006      	b.n	8001676 <MotorProcessReply+0x23e>
		return;
 8001668:	bf00      	nop
 800166a:	e004      	b.n	8001676 <MotorProcessReply+0x23e>
		return;
 800166c:	bf00      	nop
 800166e:	e002      	b.n	8001676 <MotorProcessReply+0x23e>
		return;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <MotorProcessReply+0x23e>
		default:
			return;
 8001674:	bf00      	nop
		}
}
 8001676:	3724      	adds	r7, #36	; 0x24
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168a:	4808      	ldr	r0, [pc, #32]	; (80016ac <hubMotor_Init+0x2c>)
 800168c:	f005 fa4a 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <hubMotor_Init+0x2c>)
 8001698:	f005 fa44 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a2:	4802      	ldr	r0, [pc, #8]	; (80016ac <hubMotor_Init+0x2c>)
 80016a4:	f005 fa3e 	bl	8006b24 <HAL_GPIO_WritePin>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40020c00 	.word	0x40020c00

080016b0 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ba:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe fefa 	bl	80004b8 <__aeabi_f2d>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <send_HubMotor+0x1a8>)
 80016ca:	f7fe ff4d 	bl	8000568 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	a35e      	add	r3, pc, #376	; (adr r3, 8001850 <send_HubMotor+0x1a0>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7ff f86e 	bl	80007bc <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9ee 	bl	8000ac8 <__aeabi_d2iz>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	425b      	negs	r3, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f7fe fedd 	bl	80004b8 <__aeabi_f2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <send_HubMotor+0x1a8>)
 8001704:	f7fe ff30 	bl	8000568 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	a34f      	add	r3, pc, #316	; (adr r3, 8001850 <send_HubMotor+0x1a0>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f851 	bl	80007bc <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f9d1 	bl	8000ac8 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 800172a:	23aa      	movs	r3, #170	; 0xaa
 800172c:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 800172e:	23a4      	movs	r3, #164	; 0xa4
 8001730:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 8001732:	230e      	movs	r3, #14
 8001734:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 8001746:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b29b      	uxth	r3, r3
 800174c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001752:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 8001756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800175a:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 800175c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001760:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 8001762:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001766:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 8001772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001774:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800177c:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 800177e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001782:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 8001784:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001788:	121b      	asrs	r3, r3, #8
 800178a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 800178e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 8001794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001798:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 800179a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800179e:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80017a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80017a4:	121b      	asrs	r3, r3, #8
 80017a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80017aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017ac:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80017b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b4:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80017b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017ba:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80017bc:	7b3b      	ldrb	r3, [r7, #12]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	7b7b      	ldrb	r3, [r7, #13]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 80017d8:	7c3b      	ldrb	r3, [r7, #16]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b29a      	uxth	r2, r3
 80017e0:	7c7b      	ldrb	r3, [r7, #17]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	7cbb      	ldrb	r3, [r7, #18]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 80017f0:	7cfb      	ldrb	r3, [r7, #19]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	7d3b      	ldrb	r3, [r7, #20]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b29a      	uxth	r2, r3
 8001800:	7d7b      	ldrb	r3, [r7, #21]
 8001802:	b29b      	uxth	r3, r3
 8001804:	4413      	add	r3, r2
 8001806:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001808:	7dbb      	ldrb	r3, [r7, #22]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4413      	add	r3, r2
 800180e:	b29a      	uxth	r2, r3
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4413      	add	r3, r2
 8001816:	b29a      	uxth	r2, r3
 8001818:	7e3b      	ldrb	r3, [r7, #24]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4413      	add	r3, r2
 800181e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001820:	7e7b      	ldrb	r3, [r7, #25]
 8001822:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001824:	4413      	add	r3, r2
 8001826:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001828:	8bfb      	ldrh	r3, [r7, #30]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 800182e:	f107 010c 	add.w	r1, r7, #12
 8001832:	230a      	movs	r3, #10
 8001834:	220f      	movs	r2, #15
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <send_HubMotor+0x1ac>)
 8001838:	f008 f8bf 	bl	80099ba <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 800183c:	220f      	movs	r2, #15
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <send_HubMotor+0x1b0>)
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <send_HubMotor+0x1ac>)
 8001842:	f008 f94c 	bl	8009ade <HAL_UART_Receive_DMA>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	54442d18 	.word	0x54442d18
 8001854:	401921fb 	.word	0x401921fb
 8001858:	40b00000 	.word	0x40b00000
 800185c:	20000710 	.word	0x20000710
 8001860:	20000518 	.word	0x20000518

08001864 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001868:	2201      	movs	r2, #1
 800186a:	2110      	movs	r1, #16
 800186c:	481c      	ldr	r0, [pc, #112]	; (80018e0 <ADC_Init+0x7c>)
 800186e:	f005 f959 	bl	8006b24 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 8001872:	2200      	movs	r2, #0
 8001874:	2120      	movs	r1, #32
 8001876:	481b      	ldr	r0, [pc, #108]	; (80018e4 <ADC_Init+0x80>)
 8001878:	f005 f954 	bl	8006b24 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 800187c:	2200      	movs	r2, #0
 800187e:	2110      	movs	r1, #16
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <ADC_Init+0x80>)
 8001882:	f005 f94f 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f003 fbd2 	bl	8005030 <HAL_Delay>
	AD7606_RST_HIGH;
 800188c:	2201      	movs	r2, #1
 800188e:	2110      	movs	r1, #16
 8001890:	4814      	ldr	r0, [pc, #80]	; (80018e4 <ADC_Init+0x80>)
 8001892:	f005 f947 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f003 fbca 	bl	8005030 <HAL_Delay>
	AD7606_RST_LOW;
 800189c:	2200      	movs	r2, #0
 800189e:	2110      	movs	r1, #16
 80018a0:	4810      	ldr	r0, [pc, #64]	; (80018e4 <ADC_Init+0x80>)
 80018a2:	f005 f93f 	bl	8006b24 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 80018a6:	2200      	movs	r2, #0
 80018a8:	2101      	movs	r1, #1
 80018aa:	480e      	ldr	r0, [pc, #56]	; (80018e4 <ADC_Init+0x80>)
 80018ac:	f005 f93a 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f003 fbbd 	bl	8005030 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2102      	movs	r1, #2
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <ADC_Init+0x80>)
 80018bc:	f005 f932 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2104      	movs	r1, #4
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <ADC_Init+0x80>)
 80018c6:	f005 f92d 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2108      	movs	r1, #8
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <ADC_Init+0x80>)
 80018d0:	f005 f928 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f003 fbab 	bl	8005030 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020800 	.word	0x40020800

080018e8 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 80018ec:	2200      	movs	r2, #0
 80018ee:	2120      	movs	r1, #32
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <ADC_DataRequest+0x1c>)
 80018f2:	f005 f917 	bl	8006b24 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 80018f6:	2201      	movs	r2, #1
 80018f8:	2120      	movs	r1, #32
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <ADC_DataRequest+0x1c>)
 80018fc:	f005 f912 	bl	8006b24 <HAL_GPIO_WritePin>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40020800 	.word	0x40020800

08001908 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001910:	2200      	movs	r2, #0
 8001912:	2110      	movs	r1, #16
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <ADC_Read+0x30>)
 8001916:	f005 f905 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 800191a:	2302      	movs	r3, #2
 800191c:	2208      	movs	r2, #8
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <ADC_Read+0x34>)
 8001922:	f006 f83c 	bl	800799e <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001926:	2201      	movs	r2, #1
 8001928:	2110      	movs	r1, #16
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <ADC_Read+0x30>)
 800192c:	f005 f8fa 	bl	8006b24 <HAL_GPIO_WritePin>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020000 	.word	0x40020000
 800193c:	2000025c 	.word	0x2000025c

08001940 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f808 	bl	8001960 <enableMotor>
	brakeMotor(motor, 0);
 8001950:	2100      	movs	r1, #0
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f828 	bl	80019a8 <brakeMotor>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	4619      	mov	r1, r3
 8001978:	f005 f8d4 	bl	8006b24 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	461a      	mov	r2, r3
 8001992:	2108      	movs	r1, #8
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <emBrakeMotor+0x20>)
 8001996:	f005 f8c5 	bl	8006b24 <HAL_GPIO_WritePin>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69d8      	ldr	r0, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8c1b      	ldrh	r3, [r3, #32]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	4619      	mov	r1, r3
 80019c0:	f005 f8b0 	bl	8006b24 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	8b1b      	ldrh	r3, [r3, #24]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f006 fd38 	bl	8008444 <HAL_TIM_PWM_Stop>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	4619      	mov	r1, r3
 80019f4:	f005 f896 	bl	8006b24 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 8001a12:	edd7 7a00 	vldr	s15, [r7]
 8001a16:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001b48 <setMotorSpeed+0x148>
 8001a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	dd01      	ble.n	8001a28 <setMotorSpeed+0x28>
 8001a24:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <setMotorSpeed+0x14c>)
 8001a26:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f7fe fd45 	bl	80004b8 <__aeabi_f2d>
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <setMotorSpeed+0x130>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fbe0 	bl	80001f8 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	a33d      	add	r3, pc, #244	; (adr r3, 8001b38 <setMotorSpeed+0x138>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe feb9 	bl	80007bc <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7ff f861 	bl	8000b18 <__aeabi_d2uiz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a62:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7fe fd26 	bl	80004b8 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	a133      	add	r1, pc, #204	; (adr r1, 8001b40 <setMotorSpeed+0x140>)
 8001a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a76:	f7fe fea1 	bl	80007bc <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f821 	bl	8000ac8 <__aeabi_d2iz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 8001a8e:	8a7b      	ldrh	r3, [r7, #18]
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001a96:	edd7 7a00 	vldr	s15, [r7]
 8001a9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	d503      	bpl.n	8001ab0 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff7c 	bl	80019a8 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	8a7a      	ldrh	r2, [r7, #18]
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8b1b      	ldrh	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
 8001acc:	e01c      	b.n	8001b08 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8b1b      	ldrh	r3, [r3, #24]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d105      	bne.n	8001ae2 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	639a      	str	r2, [r3, #56]	; 0x38
 8001ae0:	e012      	b.n	8001b08 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	8b1b      	ldrh	r3, [r3, #24]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d105      	bne.n	8001af6 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af4:	e008      	b.n	8001b08 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	8b1b      	ldrh	r3, [r3, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d104      	bne.n	8001b08 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8b1b      	ldrh	r3, [r3, #24]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f006 fbce 	bl	80082b4 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	f3af 8000 	nop.w
 8001b30:	bfb15b57 	.word	0xbfb15b57
 8001b34:	3fd09eec 	.word	0x3fd09eec
 8001b38:	1172ef0b 	.word	0x1172ef0b
 8001b3c:	3f9989df 	.word	0x3f9989df
 8001b40:	00000000 	.word	0x00000000
 8001b44:	412e8480 	.word	0x412e8480
 8001b48:	42c80000 	.word	0x42c80000
 8001b4c:	42c80000 	.word	0x42c80000

08001b50 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d129      	bne.n	8001bba <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 8001b66:	edd7 7a00 	vldr	s15, [r7]
 8001b6a:	eef0 7ae7 	vabs.f32	s15, s15
 8001b6e:	ee17 0a90 	vmov	r0, s15
 8001b72:	f7fe fca1 	bl	80004b8 <__aeabi_f2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	6838      	ldr	r0, [r7, #0]
 8001b7c:	f7fe fc9c 	bl	80004b8 <__aeabi_f2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fe18 	bl	80007bc <__aeabi_ddiv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	f7fe ff6a 	bl	8000a74 <__aeabi_dcmpge>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff17 	bl	80019dc <setMotorDir>
 8001bae:	e032      	b.n	8001c16 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff12 	bl	80019dc <setMotorDir>
 8001bb8:	e02d      	b.n	8001c16 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d128      	bne.n	8001c16 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001bc4:	edd7 7a00 	vldr	s15, [r7]
 8001bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7fe fc72 	bl	80004b8 <__aeabi_f2d>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f7fe fc6d 	bl	80004b8 <__aeabi_f2d>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7fe fde9 	bl	80007bc <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f7fe ff3b 	bl	8000a74 <__aeabi_dcmpge>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001c04:	2101      	movs	r1, #1
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fee8 	bl	80019dc <setMotorDir>
 8001c0c:	e003      	b.n	8001c16 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fee3 	bl	80019dc <setMotorDir>
    }

    HAL_Delay(50);
 8001c16:	2032      	movs	r0, #50	; 0x32
 8001c18:	f003 fa0a 	bl	8005030 <HAL_Delay>
    brakeMotor(motor, 0);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fec2 	bl	80019a8 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001c24:	edd7 7a00 	vldr	s15, [r7]
 8001c28:	eef0 7ae7 	vabs.f32	s15, s15
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fee5 	bl	8001a00 <setMotorSpeed>

}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bdb0      	pop	{r4, r5, r7, pc}

08001c3e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f004 ff4e 	bl	8006af4 <HAL_GPIO_ReadPin>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	799a      	ldrb	r2, [r3, #6]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	79db      	ldrb	r3, [r3, #7]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d004      	beq.n	8001c76 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001c6c:	f003 f9d4 	bl	8005018 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001c76:	f003 f9cf 	bl	8005018 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d209      	bcs.n	8001c9c <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	799a      	ldrb	r2, [r3, #6]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7a1b      	ldrb	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e004      	b.n	8001ca6 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	799a      	ldrb	r2, [r3, #6]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cb8:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <MX_CAN1_Init+0xcc>)
 8001cba:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001cbc:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cbe:	2209      	movs	r2, #9
 8001cc0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cd4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cdc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d02:	481d      	ldr	r0, [pc, #116]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001d04:	f003 f9b8 	bl	8005078 <HAL_CAN_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001d0e:	f001 fe71 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001d40:	f003 fa96 	bl	8005270 <HAL_CAN_ConfigFilter>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_CAN1_Init+0x9e>
				Error_Handler();
 8001d4a:	f001 fe53 	bl	80039f4 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001d52:	f003 fd9e 	bl	8005892 <HAL_CAN_ActivateNotification>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001d5c:	f001 fe4a 	bl	80039f4 <Error_Handler>
 8001d60:	e007      	b.n	8001d72 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_CAN1_Init+0xc8>)
 8001d64:	f003 fb64 	bl	8005430 <HAL_CAN_Start>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001d6e:	f001 fe41 	bl	80039f4 <Error_Handler>


  /* USER CODE END CAN1_Init 2 */

}
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200002b4 	.word	0x200002b4
 8001d7c:	40006400 	.word	0x40006400

08001d80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_CAN_MspInit+0x94>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d133      	bne.n	8001e0a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_CAN_MspInit+0x98>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <HAL_CAN_MspInit+0x98>)
 8001dac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_CAN_MspInit+0x98>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_CAN_MspInit+0x98>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <HAL_CAN_MspInit+0x98>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_CAN_MspInit+0x98>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001dea:	2309      	movs	r3, #9
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4809      	ldr	r0, [pc, #36]	; (8001e1c <HAL_CAN_MspInit+0x9c>)
 8001df6:	f004 fcd1 	bl	800679c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2014      	movs	r0, #20
 8001e00:	f004 f877 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e04:	2014      	movs	r0, #20
 8001e06:	f004 f890 	bl	8005f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40006400 	.word	0x40006400
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020c00 	.word	0x40020c00

08001e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_DMA_Init+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <MX_DMA_Init+0x88>)
 8001e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_DMA_Init+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_DMA_Init+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <MX_DMA_Init+0x88>)
 8001e4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_DMA_Init+0x88>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	200c      	movs	r0, #12
 8001e64:	f004 f845 	bl	8005ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e68:	200c      	movs	r0, #12
 8001e6a:	f004 f85e 	bl	8005f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	200e      	movs	r0, #14
 8001e74:	f004 f83d 	bl	8005ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e78:	200e      	movs	r0, #14
 8001e7a:	f004 f856 	bl	8005f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2039      	movs	r0, #57	; 0x39
 8001e84:	f004 f835 	bl	8005ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e88:	2039      	movs	r0, #57	; 0x39
 8001e8a:	f004 f84e 	bl	8005f2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2045      	movs	r0, #69	; 0x45
 8001e94:	f004 f82d 	bl	8005ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001e98:	2045      	movs	r0, #69	; 0x45
 8001e9a:	f004 f846 	bl	8005f2a <HAL_NVIC_EnableIRQ>

}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800

08001eac <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <ENCODER_Init+0x24>)
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <ENCODER_Init+0x28>)
 8001eb4:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <ENCODER_Init+0x2c>)
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <ENCODER_Init+0x28>)
 8001eba:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <ENCODER_Init+0x24>)
 8001ec0:	f000 f83f 	bl	8001f42 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <ENCODER_Init+0x2c>)
 8001ec8:	f000 f83b 	bl	8001f42 <ENCODER_Set_TxHeader>

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000035c 	.word	0x2000035c
 8001ed4:	200002b4 	.word	0x200002b4
 8001ed8:	20000304 	.word	0x20000304

08001edc <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	785a      	ldrb	r2, [r3, #1]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	789a      	ldrb	r2, [r3, #2]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	78da      	ldrb	r2, [r3, #3]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	791a      	ldrb	r2, [r3, #4]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	795a      	ldrb	r2, [r3, #5]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	799a      	ldrb	r2, [r3, #6]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	79da      	ldrb	r2, [r3, #7]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f103 0120 	add.w	r1, r3, #32
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3338      	adds	r3, #56	; 0x38
 8001fc2:	f003 fa79 	bl	80054b8 <HAL_CAN_AddTxMessage>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffd1 	bl	8001f7e <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002012:	461a      	mov	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	4b82      	ldr	r3, [pc, #520]	; (800225c <MX_GPIO_Init+0x224>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a81      	ldr	r2, [pc, #516]	; (800225c <MX_GPIO_Init+0x224>)
 8002058:	f043 0310 	orr.w	r3, r3, #16
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b7f      	ldr	r3, [pc, #508]	; (800225c <MX_GPIO_Init+0x224>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	4b7b      	ldr	r3, [pc, #492]	; (800225c <MX_GPIO_Init+0x224>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a7a      	ldr	r2, [pc, #488]	; (800225c <MX_GPIO_Init+0x224>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <MX_GPIO_Init+0x224>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b74      	ldr	r3, [pc, #464]	; (800225c <MX_GPIO_Init+0x224>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a73      	ldr	r2, [pc, #460]	; (800225c <MX_GPIO_Init+0x224>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b71      	ldr	r3, [pc, #452]	; (800225c <MX_GPIO_Init+0x224>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b6d      	ldr	r3, [pc, #436]	; (800225c <MX_GPIO_Init+0x224>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a6c      	ldr	r2, [pc, #432]	; (800225c <MX_GPIO_Init+0x224>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b6a      	ldr	r3, [pc, #424]	; (800225c <MX_GPIO_Init+0x224>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b66      	ldr	r3, [pc, #408]	; (800225c <MX_GPIO_Init+0x224>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a65      	ldr	r2, [pc, #404]	; (800225c <MX_GPIO_Init+0x224>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <MX_GPIO_Init+0x224>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b5f      	ldr	r3, [pc, #380]	; (800225c <MX_GPIO_Init+0x224>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a5e      	ldr	r2, [pc, #376]	; (800225c <MX_GPIO_Init+0x224>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b5c      	ldr	r3, [pc, #368]	; (800225c <MX_GPIO_Init+0x224>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 80020f6:	2200      	movs	r2, #0
 80020f8:	213f      	movs	r1, #63	; 0x3f
 80020fa:	4859      	ldr	r0, [pc, #356]	; (8002260 <MX_GPIO_Init+0x228>)
 80020fc:	f004 fd12 	bl	8006b24 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	2110      	movs	r1, #16
 8002104:	4857      	ldr	r0, [pc, #348]	; (8002264 <MX_GPIO_Init+0x22c>)
 8002106:	f004 fd0d 	bl	8006b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 800210a:	2200      	movs	r2, #0
 800210c:	219b      	movs	r1, #155	; 0x9b
 800210e:	4856      	ldr	r0, [pc, #344]	; (8002268 <MX_GPIO_Init+0x230>)
 8002110:	f004 fd08 	bl	8006b24 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 800211a:	4854      	ldr	r0, [pc, #336]	; (800226c <MX_GPIO_Init+0x234>)
 800211c:	f004 fd02 	bl	8006b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8002120:	2200      	movs	r2, #0
 8002122:	f64e 4108 	movw	r1, #60424	; 0xec08
 8002126:	4852      	ldr	r0, [pc, #328]	; (8002270 <MX_GPIO_Init+0x238>)
 8002128:	f004 fcfc 	bl	8006b24 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 800212c:	2307      	movs	r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002134:	2302      	movs	r3, #2
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	484b      	ldr	r0, [pc, #300]	; (800226c <MX_GPIO_Init+0x234>)
 8002140:	f004 fb2c 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8002144:	f248 1378 	movw	r3, #33144	; 0x8178
 8002148:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	4844      	ldr	r0, [pc, #272]	; (800226c <MX_GPIO_Init+0x234>)
 800215a:	f004 fb1f 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 800215e:	233f      	movs	r3, #63	; 0x3f
 8002160:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002166:	2301      	movs	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	483a      	ldr	r0, [pc, #232]	; (8002260 <MX_GPIO_Init+0x228>)
 8002176:	f004 fb11 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 800217a:	2310      	movs	r3, #16
 800217c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	4834      	ldr	r0, [pc, #208]	; (8002264 <MX_GPIO_Init+0x22c>)
 8002192:	f004 fb03 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800219a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800219e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	482e      	ldr	r0, [pc, #184]	; (8002264 <MX_GPIO_Init+0x22c>)
 80021ac:	f004 faf6 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80021b0:	239b      	movs	r3, #155	; 0x9b
 80021b2:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4828      	ldr	r0, [pc, #160]	; (8002268 <MX_GPIO_Init+0x230>)
 80021c8:	f004 fae8 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 80021cc:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	4821      	ldr	r0, [pc, #132]	; (800226c <MX_GPIO_Init+0x234>)
 80021e6:	f004 fad9 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 80021ea:	f64e 4308 	movw	r3, #60424	; 0xec08
 80021ee:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <MX_GPIO_Init+0x238>)
 8002204:	f004 faca 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4814      	ldr	r0, [pc, #80]	; (8002270 <MX_GPIO_Init+0x238>)
 800221e:	f004 fabd 	bl	800679c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002222:	2320      	movs	r3, #32
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002232:	2309      	movs	r3, #9
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	480a      	ldr	r0, [pc, #40]	; (8002268 <MX_GPIO_Init+0x230>)
 800223e:	f004 faad 	bl	800679c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2017      	movs	r0, #23
 8002248:	f003 fe53 	bl	8005ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800224c:	2017      	movs	r0, #23
 800224e:	f003 fe6c 	bl	8005f2a <HAL_NVIC_EnableIRQ>

}
 8002252:	bf00      	nop
 8002254:	3730      	adds	r7, #48	; 0x30
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40020800 	.word	0x40020800
 8002264:	40020000 	.word	0x40020000
 8002268:	40020400 	.word	0x40020400
 800226c:	40021000 	.word	0x40021000
 8002270:	40020c00 	.word	0x40020c00

08002274 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_I2C1_Init+0x74>)
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <MX_I2C1_Init+0x78>)
 800227c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_I2C1_Init+0x74>)
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <MX_I2C1_Init+0x7c>)
 8002282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_I2C1_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_I2C1_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <MX_I2C1_Init+0x74>)
 8002292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <MX_I2C1_Init+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_I2C1_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <MX_I2C1_Init+0x74>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_I2C1_Init+0x74>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022b0:	480d      	ldr	r0, [pc, #52]	; (80022e8 <MX_I2C1_Init+0x74>)
 80022b2:	f004 fc69 	bl	8006b88 <HAL_I2C_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022bc:	f001 fb9a 	bl	80039f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022c0:	2100      	movs	r1, #0
 80022c2:	4809      	ldr	r0, [pc, #36]	; (80022e8 <MX_I2C1_Init+0x74>)
 80022c4:	f004 fda4 	bl	8006e10 <HAL_I2CEx_ConfigAnalogFilter>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80022ce:	f001 fb91 	bl	80039f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022d2:	2100      	movs	r1, #0
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <MX_I2C1_Init+0x74>)
 80022d6:	f004 fdd7 	bl	8006e88 <HAL_I2CEx_ConfigDigitalFilter>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80022e0:	f001 fb88 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200003b4 	.word	0x200003b4
 80022ec:	40005400 	.word	0x40005400
 80022f0:	00061a80 	.word	0x00061a80

080022f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_I2C_MspInit+0x84>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d12c      	bne.n	8002370 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_I2C_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002338:	2312      	movs	r3, #18
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002344:	2304      	movs	r3, #4
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	480c      	ldr	r0, [pc, #48]	; (8002380 <HAL_I2C_MspInit+0x8c>)
 8002350:	f004 fa24 	bl	800679c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_I2C_MspInit+0x88>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_I2C_MspInit+0x88>)
 800235e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40005400 	.word	0x40005400
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400
 8002384:	00000000 	.word	0x00000000

08002388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800238e:	f002 fddd 	bl	8004f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002392:	f000 fd75 	bl	8002e80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8002396:	f005 fa45 	bl	8007824 <HAL_RCC_GetHCLKFreq>
 800239a:	4603      	mov	r3, r0
 800239c:	4abf      	ldr	r2, [pc, #764]	; (800269c <main+0x314>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	099b      	lsrs	r3, r3, #6
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fdce 	bl	8005f46 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023aa:	2004      	movs	r0, #4
 80023ac:	f003 fdd8 	bl	8005f60 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b8:	f003 fd9b 	bl	8005ef2 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f7ff fe3c 	bl	8002038 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c0:	f7ff fd2e 	bl	8001e20 <MX_DMA_Init>
  MX_I2C1_Init();
 80023c4:	f7ff ff56 	bl	8002274 <MX_I2C1_Init>
  MX_TIM1_Init();
 80023c8:	f001 fc8e 	bl	8003ce8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023cc:	f001 fd2c 	bl	8003e28 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80023d0:	f001 ff6a 	bl	80042a8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80023d4:	f001 fd9c 	bl	8003f10 <MX_TIM3_Init>
  MX_TIM8_Init();
 80023d8:	f001 fde8 	bl	8003fac <MX_TIM8_Init>
  MX_CAN1_Init();
 80023dc:	f7ff fc68 	bl	8001cb0 <MX_CAN1_Init>
  MX_SPI1_Init();
 80023e0:	f001 fb20 	bl	8003a24 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80023e4:	f001 ff8a 	bl	80042fc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 80023e8:	f002 f90a 	bl	8004600 <joystick_Init>
	ADC_Init();
 80023ec:	f7ff fa3a 	bl	8001864 <ADC_Init>
	ADC_DataRequest();
 80023f0:	f7ff fa7a 	bl	80018e8 <ADC_DataRequest>
	ENCODER_Init();
 80023f4:	f7ff fd5a 	bl	8001eac <ENCODER_Init>
	MotorInit(&sabertooth_handler, 128, &huart6);
 80023f8:	4aa9      	ldr	r2, [pc, #676]	; (80026a0 <main+0x318>)
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	48a9      	ldr	r0, [pc, #676]	; (80026a4 <main+0x31c>)
 80023fe:	f7fe ffef 	bl	80013e0 <MotorInit>
//			Error_Handler();
//	}


//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002402:	48a9      	ldr	r0, [pc, #676]	; (80026a8 <main+0x320>)
 8002404:	f7ff fa9c 	bl	8001940 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002408:	48a8      	ldr	r0, [pc, #672]	; (80026ac <main+0x324>)
 800240a:	f7ff fa99 	bl	8001940 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800240e:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80026b0 <main+0x328>
 8002412:	48a5      	ldr	r0, [pc, #660]	; (80026a8 <main+0x320>)
 8002414:	f7ff fb9c 	bl	8001b50 <runMotor>
	runMotor(&backMotor, 0);
 8002418:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80026b0 <main+0x328>
 800241c:	48a3      	ldr	r0, [pc, #652]	; (80026ac <main+0x324>)
 800241e:	f7ff fb97 	bl	8001b50 <runMotor>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8002422:	210c      	movs	r1, #12
 8002424:	48a3      	ldr	r0, [pc, #652]	; (80026b4 <main+0x32c>)
 8002426:	f006 f8d7 	bl	80085d8 <HAL_TIM_IC_Start_IT>
	emBrakeMotor(0);
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff faaa 	bl	8001984 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8002430:	f7ff f926 	bl	8001680 <hubMotor_Init>
	send_HubMotor(0, 0);
 8002434:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80026b0 <main+0x328>
 8002438:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80026b0 <main+0x328>
 800243c:	f7ff f938 	bl	80016b0 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8002440:	4b9d      	ldr	r3, [pc, #628]	; (80026b8 <main+0x330>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	4b9d      	ldr	r3, [pc, #628]	; (80026bc <main+0x334>)
 8002448:	ed93 7a00 	vldr	s14, [r3]
 800244c:	4b9c      	ldr	r3, [pc, #624]	; (80026c0 <main+0x338>)
 800244e:	edd3 6a00 	vldr	s13, [r3]
 8002452:	eeb0 1a66 	vmov.f32	s2, s13
 8002456:	eef0 0a47 	vmov.f32	s1, s14
 800245a:	eeb0 0a67 	vmov.f32	s0, s15
 800245e:	4b99      	ldr	r3, [pc, #612]	; (80026c4 <main+0x33c>)
 8002460:	4a99      	ldr	r2, [pc, #612]	; (80026c8 <main+0x340>)
 8002462:	499a      	ldr	r1, [pc, #616]	; (80026cc <main+0x344>)
 8002464:	489a      	ldr	r0, [pc, #616]	; (80026d0 <main+0x348>)
 8002466:	f7fe fd43 	bl	8000ef0 <pid_create>
 800246a:	4603      	mov	r3, r0
 800246c:	4a99      	ldr	r2, [pc, #612]	; (80026d4 <main+0x34c>)
 800246e:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -80, 80);
 8002470:	4b98      	ldr	r3, [pc, #608]	; (80026d4 <main+0x34c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	eddf 0a98 	vldr	s1, [pc, #608]	; 80026d8 <main+0x350>
 8002478:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80026dc <main+0x354>
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fec3 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 8002482:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <main+0x34c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fe89 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 800248e:	4b91      	ldr	r3, [pc, #580]	; (80026d4 <main+0x34c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe ff1d 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002498:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <main+0x358>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	4b91      	ldr	r3, [pc, #580]	; (80026e4 <main+0x35c>)
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <main+0x360>)
 80024a6:	edd3 6a00 	vldr	s13, [r3]
 80024aa:	eeb0 1a66 	vmov.f32	s2, s13
 80024ae:	eef0 0a47 	vmov.f32	s1, s14
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	4b8d      	ldr	r3, [pc, #564]	; (80026ec <main+0x364>)
 80024b8:	4a8d      	ldr	r2, [pc, #564]	; (80026f0 <main+0x368>)
 80024ba:	498e      	ldr	r1, [pc, #568]	; (80026f4 <main+0x36c>)
 80024bc:	488e      	ldr	r0, [pc, #568]	; (80026f8 <main+0x370>)
 80024be:	f7fe fd17 	bl	8000ef0 <pid_create>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a8d      	ldr	r2, [pc, #564]	; (80026fc <main+0x374>)
 80024c6:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -80, 80);
 80024c8:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <main+0x374>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	eddf 0a82 	vldr	s1, [pc, #520]	; 80026d8 <main+0x350>
 80024d0:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80026dc <main+0x354>
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fe97 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <main+0x374>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fe5d 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 80024e6:	4b85      	ldr	r3, [pc, #532]	; (80026fc <main+0x374>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fef1 	bl	80012d2 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 80024f0:	f002 fd92 	bl	8005018 <HAL_GetTick>
 80024f4:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 80024f6:	4882      	ldr	r0, [pc, #520]	; (8002700 <main+0x378>)
 80024f8:	f7ff fd69 	bl	8001fce <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 80024fc:	4881      	ldr	r0, [pc, #516]	; (8002704 <main+0x37c>)
 80024fe:	f7ff fd66 	bl	8001fce <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8002502:	4b81      	ldr	r3, [pc, #516]	; (8002708 <main+0x380>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002508:	2001      	movs	r0, #1
 800250a:	f7ff fa3b 	bl	8001984 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800250e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002512:	f002 fd8d 	bl	8005030 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8002516:	f002 fd7f 	bl	8005018 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4293      	cmp	r3, r2
 8002520:	d0f9      	beq.n	8002516 <main+0x18e>
		{
			ADC_DataRequest();
 8002522:	f7ff f9e1 	bl	80018e8 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8002526:	4876      	ldr	r0, [pc, #472]	; (8002700 <main+0x378>)
 8002528:	f7ff fd29 	bl	8001f7e <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800252c:	4875      	ldr	r0, [pc, #468]	; (8002704 <main+0x37c>)
 800252e:	f7ff fd26 	bl	8001f7e <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8002532:	211e      	movs	r1, #30
 8002534:	4875      	ldr	r0, [pc, #468]	; (800270c <main+0x384>)
 8002536:	f7ff fb82 	bl	8001c3e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 800253a:	211e      	movs	r1, #30
 800253c:	4874      	ldr	r0, [pc, #464]	; (8002710 <main+0x388>)
 800253e:	f7ff fb7e 	bl	8001c3e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8002542:	211e      	movs	r1, #30
 8002544:	4873      	ldr	r0, [pc, #460]	; (8002714 <main+0x38c>)
 8002546:	f7ff fb7a 	bl	8001c3e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 800254a:	2105      	movs	r1, #5
 800254c:	4872      	ldr	r0, [pc, #456]	; (8002718 <main+0x390>)
 800254e:	f7ff fb76 	bl	8001c3e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8002552:	2105      	movs	r1, #5
 8002554:	4871      	ldr	r0, [pc, #452]	; (800271c <main+0x394>)
 8002556:	f7ff fb72 	bl	8001c3e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 800255a:	2105      	movs	r1, #5
 800255c:	4870      	ldr	r0, [pc, #448]	; (8002720 <main+0x398>)
 800255e:	f7ff fb6e 	bl	8001c3e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8002562:	2105      	movs	r1, #5
 8002564:	486f      	ldr	r0, [pc, #444]	; (8002724 <main+0x39c>)
 8002566:	f7ff fb6a 	bl	8001c3e <GPIO_Digital_Filtered_Input>
			 *	1. Climbing wheel extension.
			 *	2. Wheelchair lifting/dropping
			 *	3. Climbing wheel retraction
			 *-------------------------------------------------------------------*/
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if ((button3.state == 1 || button_prev_state == 1)
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <main+0x38c>)
 800256c:	7a1b      	ldrb	r3, [r3, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d003      	beq.n	800257a <main+0x1f2>
 8002572:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <main+0x3a0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d038      	beq.n	80025ec <main+0x264>
					&& climb_first_iteration == true)
 800257a:	4b6c      	ldr	r3, [pc, #432]	; (800272c <main+0x3a4>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d034      	beq.n	80025ec <main+0x264>
			{
				button_prev_state = 1;
 8002582:	4b69      	ldr	r3, [pc, #420]	; (8002728 <main+0x3a0>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
				if (abs(encoderFront.signed_encoder_pos) >= 50
 8002588:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <main+0x37c>)
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	2b00      	cmp	r3, #0
 800258e:	bfb8      	it	lt
 8002590:	425b      	neglt	r3, r3
 8002592:	2b31      	cmp	r3, #49	; 0x31
 8002594:	dc06      	bgt.n	80025a4 <main+0x21c>
						|| abs(encoderBack.signed_encoder_pos) >= 50)
 8002596:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <main+0x378>)
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	2b00      	cmp	r3, #0
 800259c:	bfb8      	it	lt
 800259e:	425b      	neglt	r3, r3
 80025a0:	2b31      	cmp	r3, #49	; 0x31
 80025a2:	dd0f      	ble.n	80025c4 <main+0x23c>
				{
					goto_pos(0, frontClimb_pid);
 80025a4:	4b4b      	ldr	r3, [pc, #300]	; (80026d4 <main+0x34c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	2000      	movs	r0, #0
 80025ac:	f000 ffe8 	bl	8003580 <goto_pos>
					goto_pos(0, backClimb_pid);
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <main+0x374>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	2000      	movs	r0, #0
 80025b8:	f000 ffe2 	bl	8003580 <goto_pos>
					lifting_mode = EMPTY;
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <main+0x3a8>)
 80025be:	2205      	movs	r2, #5
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e013      	b.n	80025ec <main+0x264>
				}
				else
				{
					runMotor(&rearMotor, 0);
 80025c4:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80026b0 <main+0x328>
 80025c8:	4837      	ldr	r0, [pc, #220]	; (80026a8 <main+0x320>)
 80025ca:	f7ff fac1 	bl	8001b50 <runMotor>
					runMotor(&backMotor, 0);
 80025ce:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80026b0 <main+0x328>
 80025d2:	4836      	ldr	r0, [pc, #216]	; (80026ac <main+0x324>)
 80025d4:	f7ff fabc 	bl	8001b50 <runMotor>
					lifting_mode = LANDING;
 80025d8:	4b55      	ldr	r3, [pc, #340]	; (8002730 <main+0x3a8>)
 80025da:	2204      	movs	r2, #4
 80025dc:	701a      	strb	r2, [r3, #0]
					button_prev_state = 0;
 80025de:	4b52      	ldr	r3, [pc, #328]	; (8002728 <main+0x3a0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80025e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025e8:	f002 fd22 	bl	8005030 <HAL_Delay>

				}
			}

			if (front_touchdown == false && back_touchdown == false
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <main+0x3ac>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8100 	beq.w	80027fc <main+0x474>
 80025fc:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <main+0x3b0>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	f083 0301 	eor.w	r3, r3, #1
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80f8 	beq.w	80027fc <main+0x474>
					&& lifting_mode == LANDING)
 800260c:	4b48      	ldr	r3, [pc, #288]	; (8002730 <main+0x3a8>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	f040 80f3 	bne.w	80027fc <main+0x474>
			{
				//Stop the base wheel completely
				baseWheelSpeed.cur_r = 0;
 8002616:	4b49      	ldr	r3, [pc, #292]	; (800273c <main+0x3b4>)
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
				baseWheelSpeed.cur_l = 0;
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <main+0x3b4>)
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
				baseMotorCommand();
 8002626:	f000 fe9b 	bl	8003360 <baseMotorCommand>

				//Disengage the motor brake
				emBrakeMotor(1);
 800262a:	2001      	movs	r0, #1
 800262c:	f7ff f9aa 	bl	8001984 <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 8002630:	e0c2      	b.n	80027b8 <main+0x430>
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 8002632:	2105      	movs	r1, #5
 8002634:	4838      	ldr	r0, [pc, #224]	; (8002718 <main+0x390>)
 8002636:	f7ff fb02 	bl	8001c3e <GPIO_Digital_Filtered_Input>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <main+0x2c6>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 8002640:	2105      	movs	r1, #5
 8002642:	4836      	ldr	r0, [pc, #216]	; (800271c <main+0x394>)
 8002644:	f7ff fafb 	bl	8001c3e <GPIO_Digital_Filtered_Input>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <main+0x2cc>
						front_touchdown = 1;
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <main+0x3ac>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 8002654:	2105      	movs	r1, #5
 8002656:	4832      	ldr	r0, [pc, #200]	; (8002720 <main+0x398>)
 8002658:	f7ff faf1 	bl	8001c3e <GPIO_Digital_Filtered_Input>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <main+0x2e8>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 8002662:	2105      	movs	r1, #5
 8002664:	482f      	ldr	r0, [pc, #188]	; (8002724 <main+0x39c>)
 8002666:	f7ff faea 	bl	8001c3e <GPIO_Digital_Filtered_Input>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <main+0x2ee>
						back_touchdown = 1;
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <main+0x3b0>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <main+0x3b0>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05d      	beq.n	8002740 <main+0x3b8>
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <main+0x3ac>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d059      	beq.n	8002740 <main+0x3b8>
							&& lifting_mode == LANDING)
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <main+0x3a8>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d155      	bne.n	8002740 <main+0x3b8>
						lifting_mode = CLIMB_UP;
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <main+0x3a8>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e063      	b.n	8002764 <main+0x3dc>
 800269c:	10624dd3 	.word	0x10624dd3
 80026a0:	20000814 	.word	0x20000814
 80026a4:	20000408 	.word	0x20000408
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000034 	.word	0x20000034
 80026b0:	00000000 	.word	0x00000000
 80026b4:	20000530 	.word	0x20000530
 80026b8:	2000010c 	.word	0x2000010c
 80026bc:	20000110 	.word	0x20000110
 80026c0:	20000114 	.word	0x20000114
 80026c4:	200001d4 	.word	0x200001d4
 80026c8:	200001d0 	.word	0x200001d0
 80026cc:	200001cc 	.word	0x200001cc
 80026d0:	200004d8 	.word	0x200004d8
 80026d4:	200004d4 	.word	0x200004d4
 80026d8:	42a00000 	.word	0x42a00000
 80026dc:	c2a00000 	.word	0xc2a00000
 80026e0:	20000118 	.word	0x20000118
 80026e4:	2000011c 	.word	0x2000011c
 80026e8:	20000120 	.word	0x20000120
 80026ec:	200001e0 	.word	0x200001e0
 80026f0:	200001dc 	.word	0x200001dc
 80026f4:	200001d8 	.word	0x200001d8
 80026f8:	20000490 	.word	0x20000490
 80026fc:	2000052c 	.word	0x2000052c
 8002700:	2000035c 	.word	0x2000035c
 8002704:	20000304 	.word	0x20000304
 8002708:	200001fc 	.word	0x200001fc
 800270c:	200000a8 	.word	0x200000a8
 8002710:	200000b8 	.word	0x200000b8
 8002714:	200000c8 	.word	0x200000c8
 8002718:	20000068 	.word	0x20000068
 800271c:	20000078 	.word	0x20000078
 8002720:	20000088 	.word	0x20000088
 8002724:	20000098 	.word	0x20000098
 8002728:	200001c2 	.word	0x200001c2
 800272c:	20000109 	.word	0x20000109
 8002730:	20000108 	.word	0x20000108
 8002734:	200001c0 	.word	0x200001c0
 8002738:	200001c1 	.word	0x200001c1
 800273c:	200000d8 	.word	0x200000d8
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0
 8002740:	4bc5      	ldr	r3, [pc, #788]	; (8002a58 <main+0x6d0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <main+0x3dc>
 8002748:	4bc4      	ldr	r3, [pc, #784]	; (8002a5c <main+0x6d4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	f083 0301 	eor.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <main+0x3dc>
							&& lifting_mode == LANDING)
 8002756:	4bc2      	ldr	r3, [pc, #776]	; (8002a60 <main+0x6d8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b04      	cmp	r3, #4
 800275c:	d102      	bne.n	8002764 <main+0x3dc>
						lifting_mode = CLIMB_DOWN;
 800275e:	4bc0      	ldr	r3, [pc, #768]	; (8002a60 <main+0x6d8>)
 8002760:	2202      	movs	r2, #2
 8002762:	701a      	strb	r2, [r3, #0]

					ENCODER_Read(&encoderBack);
 8002764:	48bf      	ldr	r0, [pc, #764]	; (8002a64 <main+0x6dc>)
 8002766:	f7ff fc0a 	bl	8001f7e <ENCODER_Read>
					ENCODER_Read(&encoderFront);
 800276a:	48bf      	ldr	r0, [pc, #764]	; (8002a68 <main+0x6e0>)
 800276c:	f7ff fc07 	bl	8001f7e <ENCODER_Read>

					if (back_touchdown == false)
 8002770:	4bb9      	ldr	r3, [pc, #740]	; (8002a58 <main+0x6d0>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	f083 0301 	eor.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <main+0x402>
						runMotor(&backMotor, 30);
 800277e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002782:	48ba      	ldr	r0, [pc, #744]	; (8002a6c <main+0x6e4>)
 8002784:	f7ff f9e4 	bl	8001b50 <runMotor>
 8002788:	e004      	b.n	8002794 <main+0x40c>
					else
						runMotor(&backMotor, 0);
 800278a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8002a70 <main+0x6e8>
 800278e:	48b7      	ldr	r0, [pc, #732]	; (8002a6c <main+0x6e4>)
 8002790:	f7ff f9de 	bl	8001b50 <runMotor>

					if (front_touchdown == false)
 8002794:	4bb1      	ldr	r3, [pc, #708]	; (8002a5c <main+0x6d4>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <main+0x426>
						runMotor(&rearMotor, 30);
 80027a2:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80027a6:	48b3      	ldr	r0, [pc, #716]	; (8002a74 <main+0x6ec>)
 80027a8:	f7ff f9d2 	bl	8001b50 <runMotor>
 80027ac:	e004      	b.n	80027b8 <main+0x430>
					else
						runMotor(&rearMotor, 0);
 80027ae:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8002a70 <main+0x6e8>
 80027b2:	48b0      	ldr	r0, [pc, #704]	; (8002a74 <main+0x6ec>)
 80027b4:	f7ff f9cc 	bl	8001b50 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 80027b8:	4ba8      	ldr	r3, [pc, #672]	; (8002a5c <main+0x6d4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f af35 	bne.w	8002632 <main+0x2aa>
 80027c8:	4ba3      	ldr	r3, [pc, #652]	; (8002a58 <main+0x6d0>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f47f af2d 	bne.w	8002632 <main+0x2aa>

				}
				runMotor(&rearMotor, 0);
 80027d8:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8002a70 <main+0x6e8>
 80027dc:	48a5      	ldr	r0, [pc, #660]	; (8002a74 <main+0x6ec>)
 80027de:	f7ff f9b7 	bl	8001b50 <runMotor>
				runMotor(&backMotor, 0);
 80027e2:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8002a70 <main+0x6e8>
 80027e6:	48a1      	ldr	r0, [pc, #644]	; (8002a6c <main+0x6e4>)
 80027e8:	f7ff f9b2 	bl	8001b50 <runMotor>
				emBrakeMotor(0);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7ff f8c9 	bl	8001984 <emBrakeMotor>
				HAL_Delay(500);
 80027f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027f6:	f002 fc1b 	bl	8005030 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 80027fa:	e335      	b.n	8002e68 <main+0xae0>
			}
			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 80027fc:	4b98      	ldr	r3, [pc, #608]	; (8002a60 <main+0x6d8>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11f      	bne.n	8002844 <main+0x4bc>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	2108      	movs	r1, #8
 8002808:	489b      	ldr	r0, [pc, #620]	; (8002a78 <main+0x6f0>)
 800280a:	f004 f98b 	bl	8006b24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	2110      	movs	r1, #16
 8002812:	4899      	ldr	r0, [pc, #612]	; (8002a78 <main+0x6f0>)
 8002814:	f004 f986 	bl	8006b24 <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 8002818:	4898      	ldr	r0, [pc, #608]	; (8002a7c <main+0x6f4>)
 800281a:	f002 f8ff 	bl	8004a1c <wheel_Control>
				baseMotorCommand();
 800281e:	f000 fd9f 	bl	8003360 <baseMotorCommand>
				front_touchdown = false;
 8002822:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <main+0x6d4>)
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 8002828:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <main+0x6d0>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 800282e:	4b94      	ldr	r3, [pc, #592]	; (8002a80 <main+0x6f8>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
				speed[FRONT_INDEX] = 0;
 8002834:	4b93      	ldr	r3, [pc, #588]	; (8002a84 <main+0x6fc>)
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
				speed[BACK_INDEX] = 0;
 800283c:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <main+0x6fc>)
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
			}
			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 8002844:	4b86      	ldr	r3, [pc, #536]	; (8002a60 <main+0x6d8>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 818e 	bne.w	8002b6a <main+0x7e2>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800284e:	2201      	movs	r2, #1
 8002850:	2108      	movs	r1, #8
 8002852:	4889      	ldr	r0, [pc, #548]	; (8002a78 <main+0x6f0>)
 8002854:	f004 f966 	bl	8006b24 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002858:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <main+0x6f8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 813a 	beq.w	8002ad6 <main+0x74e>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 8002862:	4b89      	ldr	r3, [pc, #548]	; (8002a88 <main+0x700>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe27 	bl	80004b8 <__aeabi_f2d>
 800286a:	4604      	mov	r4, r0
 800286c:	460d      	mov	r5, r1
 800286e:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <main+0x6e0>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe20 	bl	80004b8 <__aeabi_f2d>
 8002878:	a36f      	add	r3, pc, #444	; (adr r3, 8002a38 <main+0x6b0>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd fe73 	bl	8000568 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <main+0x704>)
 8002890:	f7fd ff94 	bl	80007bc <__aeabi_ddiv>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	ec43 2b17 	vmov	d7, r2, r3
 800289c:	eeb0 0a47 	vmov.f32	s0, s14
 80028a0:	eef0 0a67 	vmov.f32	s1, s15
 80028a4:	f008 fb60 	bl	800af68 <cos>
 80028a8:	ec53 2b10 	vmov	r2, r3, d0
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fe5a 	bl	8000568 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4614      	mov	r4, r2
 80028ba:	461d      	mov	r5, r3
 80028bc:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <main+0x708>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fdfa 	bl	80004b8 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fc96 	bl	80001fc <__adddf3>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <main+0x70c>)
 80028de:	f7fd fc8b 	bl	80001f8 <__aeabi_dsub>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f7fe f935 	bl	8000b58 <__aeabi_d2f>
 80028ee:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 80028f0:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <main+0x710>)
 80028f2:	6013      	str	r3, [r2, #0]
					curb_height += 0.015; //Small error correction 10%
 80028f4:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <main+0x710>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fddd 	bl	80004b8 <__aeabi_f2d>
 80028fe:	a350      	add	r3, pc, #320	; (adr r3, 8002a40 <main+0x6b8>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f7fd fc7a 	bl	80001fc <__adddf3>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f7fe f922 	bl	8000b58 <__aeabi_d2f>
 8002914:	4603      	mov	r3, r0
 8002916:	4a60      	ldr	r2, [pc, #384]	; (8002a98 <main+0x710>)
 8002918:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800291a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002a9c <main+0x714>
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <main+0x710>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fdc4 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 8002930:	a345      	add	r3, pc, #276	; (adr r3, 8002a48 <main+0x6c0>)
 8002932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002936:	f7fd fc5f 	bl	80001f8 <__aeabi_dsub>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f7fe f909 	bl	8000b58 <__aeabi_d2f>
 8002946:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 8002948:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <main+0x718>)
 800294a:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 800294c:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <main+0x718>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	eef1 7a67 	vneg.f32	s15, s15
 8002956:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002aa4 <main+0x71c>
 800295a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800295e:	ee16 0a90 	vmov	r0, s13
 8002962:	f7fd fda9 	bl	80004b8 <__aeabi_f2d>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	ec43 2b10 	vmov	d0, r2, r3
 800296e:	f008 fbab 	bl	800b0c8 <acos>
 8002972:	ec53 2b10 	vmov	r2, r3, d0
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f8ed 	bl	8000b58 <__aeabi_d2f>
 800297e:	ee07 0a10 	vmov	s14, r0
 8002982:	eddf 7a49 	vldr	s15, [pc, #292]	; 8002aa8 <main+0x720>
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	ee17 0a90 	vmov	r0, s15
 800298e:	f7fd fd93 	bl	80004b8 <__aeabi_f2d>
 8002992:	a329      	add	r3, pc, #164	; (adr r3, 8002a38 <main+0x6b0>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd ff10 	bl	80007bc <__aeabi_ddiv>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <main+0x724>)
 80029aa:	f7fd fc25 	bl	80001f8 <__aeabi_dsub>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f8cf 	bl	8000b58 <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
					back_lifting_angle =
 80029bc:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <main+0x728>)
 80029be:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <main+0x728>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fd77 	bl	80004b8 <__aeabi_f2d>
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <main+0x72c>)
 80029d0:	f7fd fef4 	bl	80007bc <__aeabi_ddiv>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <main+0x730>)
 80029e2:	f7fd fdc1 	bl	8000568 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7fe f86b 	bl	8000ac8 <__aeabi_d2iz>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a31      	ldr	r2, [pc, #196]	; (8002abc <main+0x734>)
 80029f6:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <main+0x728>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eef4 7a67 	vcmp.f32	s15, s15
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d613      	bvs.n	8002a30 <main+0x6a8>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <main+0x734>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <main+0x6a8>
								|| curb_height <= 0.05 )
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <main+0x710>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd4c 	bl	80004b8 <__aeabi_f2d>
 8002a20:	a30b      	add	r3, pc, #44	; (adr r3, 8002a50 <main+0x6c8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fe f81b 	bl	8000a60 <__aeabi_dcmple>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d047      	beq.n	8002ac0 <main+0x738>
					{
						lifting_mode = RETRACTION;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <main+0x6d8>)
 8002a32:	2203      	movs	r2, #3
 8002a34:	701a      	strb	r2, [r3, #0]
						continue;
 8002a36:	e217      	b.n	8002e68 <main+0xae0>
 8002a38:	54442d18 	.word	0x54442d18
 8002a3c:	400921fb 	.word	0x400921fb
 8002a40:	eb851eb8 	.word	0xeb851eb8
 8002a44:	3f8eb851 	.word	0x3f8eb851
 8002a48:	916872b0 	.word	0x916872b0
 8002a4c:	3faf7ced 	.word	0x3faf7ced
 8002a50:	9999999a 	.word	0x9999999a
 8002a54:	3fa99999 	.word	0x3fa99999
 8002a58:	200001c1 	.word	0x200001c1
 8002a5c:	200001c0 	.word	0x200001c0
 8002a60:	20000108 	.word	0x20000108
 8002a64:	2000035c 	.word	0x2000035c
 8002a68:	20000304 	.word	0x20000304
 8002a6c:	20000034 	.word	0x20000034
 8002a70:	00000000 	.word	0x00000000
 8002a74:	20000000 	.word	0x20000000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	200000d8 	.word	0x200000d8
 8002a80:	20000109 	.word	0x20000109
 8002a84:	200001c4 	.word	0x200001c4
 8002a88:	3eb2b021 	.word	0x3eb2b021
 8002a8c:	40668000 	.word	0x40668000
 8002a90:	3e19999a 	.word	0x3e19999a
 8002a94:	3fb00000 	.word	0x3fb00000
 8002a98:	200001e4 	.word	0x200001e4
 8002a9c:	3e19999a 	.word	0x3e19999a
 8002aa0:	200001ec 	.word	0x200001ec
 8002aa4:	3eb2b021 	.word	0x3eb2b021
 8002aa8:	43340000 	.word	0x43340000
 8002aac:	403e0000 	.word	0x403e0000
 8002ab0:	200001f0 	.word	0x200001f0
 8002ab4:	40768000 	.word	0x40768000
 8002ab8:	40c00000 	.word	0x40c00000
 8002abc:	200001f4 	.word	0x200001f4
					}
					speed[BACK_INDEX] = 0;
 8002ac0:	4ba9      	ldr	r3, [pc, #676]	; (8002d68 <main+0x9e0>)
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002ac8:	4ba7      	ldr	r3, [pc, #668]	; (8002d68 <main+0x9e0>)
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
					climb_first_iteration = false;
 8002ad0:	4ba6      	ldr	r3, [pc, #664]	; (8002d6c <main+0x9e4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
				}
				//Mathematical Model
				//Start Climbing process
				if (finish_climbing_flag == false){
 8002ad6:	4ba6      	ldr	r3, [pc, #664]	; (8002d70 <main+0x9e8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	f083 0301 	eor.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <main+0x780>
					if(!in_climb_process(MAX_FRONT_CLIMBING_ENC,back_encoder_input))
 8002ae4:	f240 739e 	movw	r3, #1950	; 0x79e
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4ba2      	ldr	r3, [pc, #648]	; (8002d74 <main+0x9ec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f000 fe5d 	bl	80037b0 <in_climb_process>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <main+0x780>
						finish_climbing_flag = true;
 8002b02:	4b9b      	ldr	r3, [pc, #620]	; (8002d70 <main+0x9e8>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
				}

				if (finish_climbing_flag == true){
 8002b08:	4b99      	ldr	r3, [pc, #612]	; (8002d70 <main+0x9e8>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 809b 	beq.w	8002c48 <main+0x8c0>
					emBrakeMotor(0);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe ff36 	bl	8001984 <emBrakeMotor>
					if(!(climbingForward(forward_distance+0.03)))
 8002b18:	4b97      	ldr	r3, [pc, #604]	; (8002d78 <main+0x9f0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fccb 	bl	80004b8 <__aeabi_f2d>
 8002b22:	a38d      	add	r3, pc, #564	; (adr r3, 8002d58 <main+0x9d0>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fb68 	bl	80001fc <__adddf3>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f810 	bl	8000b58 <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	ee00 3a10 	vmov	s0, r3
 8002b3e:	f000 fc33 	bl	80033a8 <climbingForward>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d07c      	beq.n	8002c48 <main+0x8c0>
					{
						emBrakeMotor(1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7fe ff18 	bl	8001984 <emBrakeMotor>
						finish_climbing_flag = false;
 8002b54:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <main+0x9e8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002b5a:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <main+0x9f4>)
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8002b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b64:	f002 fa64 	bl	8005030 <HAL_Delay>
 8002b68:	e06e      	b.n	8002c48 <main+0x8c0>
					}
				}
			}

			else if (lifting_mode == CLIMB_DOWN)
 8002b6a:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <main+0x9f4>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d16a      	bne.n	8002c48 <main+0x8c0>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002b72:	2201      	movs	r2, #1
 8002b74:	2110      	movs	r1, #16
 8002b76:	4882      	ldr	r0, [pc, #520]	; (8002d80 <main+0x9f8>)
 8002b78:	f003 ffd4 	bl	8006b24 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	; (8002d6c <main+0x9e4>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d028      	beq.n	8002bd6 <main+0x84e>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 8002b84:	4b7f      	ldr	r3, [pc, #508]	; (8002d84 <main+0x9fc>)
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 5.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc73 	bl	8000474 <__aeabi_ui2d>
 8002b8e:	a374      	add	r3, pc, #464	; (adr r3, 8002d60 <main+0x9d8>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fb32 	bl	80001fc <__adddf3>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f7fd ff92 	bl	8000ac8 <__aeabi_d2iz>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a78      	ldr	r2, [pc, #480]	; (8002d88 <main+0xa00>)
 8002ba8:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC )
 8002baa:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <main+0xa00>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f640 431c 	movw	r3, #3100	; 0xc1c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d903      	bls.n	8002bc0 <main+0x838>
					{
						lifting_mode = RETRACTION;
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <main+0x9f4>)
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
						continue;
 8002bbe:	e153      	b.n	8002e68 <main+0xae0>
					}
					climb_first_iteration = false;
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <main+0x9e4>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]

					speed[BACK_INDEX] = 0;
 8002bc6:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <main+0x9e0>)
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002bce:	4b66      	ldr	r3, [pc, #408]	; (8002d68 <main+0x9e0>)
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
				}

				//Start Climbing process
				if (finish_climbing_flag == false){
 8002bd6:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <main+0x9e8>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <main+0x87e>
					if(!in_climb_process(front_climbDown_enc,MAX_BACK_CLIMBING_ENC))
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <main+0xa00>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f240 723a 	movw	r2, #1850	; 0x73a
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fdde 	bl	80037b0 <in_climb_process>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <main+0x87e>
						finish_climbing_flag = true;
 8002c00:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <main+0x9e8>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
				}

				if (finish_climbing_flag == true){
 8002c06:	4b5a      	ldr	r3, [pc, #360]	; (8002d70 <main+0x9e8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01c      	beq.n	8002c48 <main+0x8c0>
					emBrakeMotor(0);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe feb8 	bl	8001984 <emBrakeMotor>
					if(!(climbingForward(forward_distance)))
 8002c14:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <main+0x9f0>)
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1e:	f000 fbc3 	bl	80033a8 <climbingForward>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <main+0x8c0>
					{
						emBrakeMotor(1);
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f7fe fea8 	bl	8001984 <emBrakeMotor>
						finish_climbing_flag = false;
 8002c34:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <main+0x9e8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
						lifting_mode = RETRACTION;
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <main+0x9f4>)
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	701a      	strb	r2, [r3, #0]
						HAL_Delay(500);
 8002c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c44:	f002 f9f4 	bl	8005030 <HAL_Delay>
					}
				}
			}
			if (lifting_mode == RETRACTION)
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <main+0x9f4>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d148      	bne.n	8002ce2 <main+0x95a>
			{

				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002c50:	2201      	movs	r2, #1
 8002c52:	2108      	movs	r1, #8
 8002c54:	484a      	ldr	r0, [pc, #296]	; (8002d80 <main+0x9f8>)
 8002c56:	f003 ff65 	bl	8006b24 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2110      	movs	r1, #16
 8002c5e:	4848      	ldr	r0, [pc, #288]	; (8002d80 <main+0x9f8>)
 8002c60:	f003 ff60 	bl	8006b24 <HAL_GPIO_WritePin>
				//retraction process
				if (abs(encoderBack.encoder_pos- (MIN_BACK_ALLOWABLE_ENC)) > 30
 8002c64:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <main+0xa04>)
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bfb8      	it	lt
 8002c72:	425b      	neglt	r3, r3
 8002c74:	2b1e      	cmp	r3, #30
 8002c76:	dc09      	bgt.n	8002c8c <main+0x904>
						|| abs(encoderFront.encoder_pos - (MIN_FRONT_ALLOWABLE_ENC))
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <main+0x9fc>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bfb8      	it	lt
 8002c86:	425b      	neglt	r3, r3
 8002c88:	2b1e      	cmp	r3, #30
 8002c8a:	dd25      	ble.n	8002cd8 <main+0x950>
								> 30)
				{
					goto_pos(MIN_BACK_ALLOWABLE_ENC, backClimb_pid);
 8002c8c:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <main+0xa08>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f000 fc71 	bl	8003580 <goto_pos>
					goto_pos(MIN_FRONT_ALLOWABLE_ENC, frontClimb_pid);
 8002c9e:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <main+0xa0c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fc68 	bl	8003580 <goto_pos>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <main+0x9e0>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	d10f      	bne.n	8002ce0 <main+0x958>
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <main+0x9e0>)
 8002cc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	d107      	bne.n	8002ce0 <main+0x958>
						lifting_mode = NORMAL;
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <main+0x9f4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002cd6:	e003      	b.n	8002ce0 <main+0x958>
				}
				else
				{

					lifting_mode = NORMAL;
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <main+0x9f4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e000      	b.n	8002ce2 <main+0x95a>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002ce0:	bf00      	nop

			}

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <main+0x9e0>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	eef0 7ae7 	vabs.f32	s15, s15
 8002cec:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	d503      	bpl.n	8002d02 <main+0x97a>
				speed[FRONT_INDEX] = 0;
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <main+0x9e0>)
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <main+0x9e0>)
 8002d04:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d08:	eef0 7ae7 	vabs.f32	s15, s15
 8002d0c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	d503      	bpl.n	8002d22 <main+0x99a>
				speed[BACK_INDEX] = 0;
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <main+0x9e0>)
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <main+0x9fc>)
 8002d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d26:	f242 3333 	movw	r3, #9011	; 0x2333
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d233      	bcs.n	8002d98 <main+0xa10>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <main+0x9fc>)
 8002d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d34:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d93f      	bls.n	8002dbc <main+0xa34>
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <main+0x9e0>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4a:	dd37      	ble.n	8002dbc <main+0xa34>
					speed[FRONT_INDEX] = 0;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <main+0x9e0>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e032      	b.n	8002dbc <main+0xa34>
 8002d56:	bf00      	nop
 8002d58:	eb851eb8 	.word	0xeb851eb8
 8002d5c:	3f9eb851 	.word	0x3f9eb851
 8002d60:	9f49f4a0 	.word	0x9f49f4a0
 8002d64:	405f49f4 	.word	0x405f49f4
 8002d68:	200001c4 	.word	0x200001c4
 8002d6c:	20000109 	.word	0x20000109
 8002d70:	200001f8 	.word	0x200001f8
 8002d74:	200001f4 	.word	0x200001f4
 8002d78:	20000124 	.word	0x20000124
 8002d7c:	20000108 	.word	0x20000108
 8002d80:	40020400 	.word	0x40020400
 8002d84:	20000304 	.word	0x20000304
 8002d88:	200001e8 	.word	0x200001e8
 8002d8c:	2000035c 	.word	0x2000035c
 8002d90:	2000052c 	.word	0x2000052c
 8002d94:	200004d4 	.word	0x200004d4
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <main+0xae4>)
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d20b      	bcs.n	8002dbc <main+0xa34>
 8002da4:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <main+0xae8>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	d503      	bpl.n	8002dbc <main+0xa34>
					speed[FRONT_INDEX] = 0;
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <main+0xae8>)
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <main+0xaec>)
 8002dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d212      	bcs.n	8002df0 <main+0xa68>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <main+0xaec>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d91e      	bls.n	8002e14 <main+0xa8c>
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <main+0xae8>)
 8002dd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	dd16      	ble.n	8002e14 <main+0xa8c>
					speed[BACK_INDEX] = 0;
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <main+0xae8>)
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e011      	b.n	8002e14 <main+0xa8c>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <main+0xaec>)
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d20b      	bcs.n	8002e14 <main+0xa8c>
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <main+0xae8>)
 8002dfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	d503      	bpl.n	8002e14 <main+0xa8c>
					speed[BACK_INDEX] = 0;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <main+0xae8>)
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002e14:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <main+0xae8>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	4816      	ldr	r0, [pc, #88]	; (8002e78 <main+0xaf0>)
 8002e20:	f7fe fe96 	bl	8001b50 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <main+0xae8>)
 8002e26:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2e:	4813      	ldr	r0, [pc, #76]	; (8002e7c <main+0xaf4>)
 8002e30:	f7fe fe8e 	bl	8001b50 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <main+0xae8>)
 8002e36:	edd3 7a00 	vldr	s15, [r3]
 8002e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e42:	d10b      	bne.n	8002e5c <main+0xad4>
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <main+0xae8>)
 8002e46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e52:	d103      	bne.n	8002e5c <main+0xad4>
				emBrakeMotor(0);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fe fd95 	bl	8001984 <emBrakeMotor>
 8002e5a:	e002      	b.n	8002e62 <main+0xada>
			else
				emBrakeMotor(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f7fe fd91 	bl	8001984 <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002e62:	f002 f8d9 	bl	8005018 <HAL_GetTick>
 8002e66:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8002e68:	f7ff bb55 	b.w	8002516 <main+0x18e>
 8002e6c:	20000304 	.word	0x20000304
 8002e70:	200001c4 	.word	0x200001c4
 8002e74:	2000035c 	.word	0x2000035c
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	20000034 	.word	0x20000034

08002e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b094      	sub	sp, #80	; 0x50
 8002e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	2230      	movs	r2, #48	; 0x30
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f007 fec2 	bl	800ac18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <SystemClock_Config+0xd8>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <SystemClock_Config+0xd8>)
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <SystemClock_Config+0xd8>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <SystemClock_Config+0xdc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <SystemClock_Config+0xdc>)
 8002eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <SystemClock_Config+0xdc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002ef4:	23b4      	movs	r3, #180	; 0xb4
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002efc:	2304      	movs	r3, #4
 8002efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f00:	f107 0320 	add.w	r3, r7, #32
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 f84f 	bl	8006fa8 <HAL_RCC_OscConfig>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f10:	f000 fd70 	bl	80039f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f14:	f003 fff8 	bl	8006f08 <HAL_PWREx_EnableOverDrive>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002f1e:	f000 fd69 	bl	80039f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f22:	230f      	movs	r3, #15
 8002f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f26:	2302      	movs	r3, #2
 8002f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	2105      	movs	r1, #5
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 faa9 	bl	8007498 <HAL_RCC_ClockConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002f4c:	f000 fd52 	bl	80039f4 <Error_Handler>
  }
}
 8002f50:	bf00      	nop
 8002f52:	3750      	adds	r7, #80	; 0x50
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000

08002f60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d11c      	bne.n	8002faa <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002f70:	f002 f852 	bl	8005018 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d916      	bls.n	8002fae <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002f80:	480e      	ldr	r0, [pc, #56]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f82:	f7fe fcc1 	bl	8001908 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002f90:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002f9c:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002f9e:	f002 f83b 	bl	8005018 <HAL_GetTick>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002fa6:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002fa8:	e001      	b.n	8002fae <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002fae:	bf00      	nop
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200001bc 	.word	0x200001bc
 8002fbc:	200004c4 	.word	0x200004c4
 8002fc0:	20000528 	.word	0x20000528
 8002fc4:	20000420 	.word	0x20000420

08002fc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a43      	ldr	r2, [pc, #268]	; (80030e4 <HAL_UART_RxCpltCallback+0x11c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d175      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8002fec:	789b      	ldrb	r3, [r3, #2]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8002ff6:	78db      	ldrb	r3, [r3, #3]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003000:	791b      	ldrb	r3, [r3, #4]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4413      	add	r3, r2
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 800300a:	795b      	ldrb	r3, [r3, #5]
 800300c:	b29b      	uxth	r3, r3
 800300e:	4413      	add	r3, r2
 8003010:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8003012:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003014:	799b      	ldrb	r3, [r3, #6]
 8003016:	b29b      	uxth	r3, r3
 8003018:	4413      	add	r3, r2
 800301a:	b29a      	uxth	r2, r3
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 800301e:	79db      	ldrb	r3, [r3, #7]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4413      	add	r3, r2
 8003024:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003028:	7a1b      	ldrb	r3, [r3, #8]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4413      	add	r3, r2
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003032:	7a5b      	ldrb	r3, [r3, #9]
 8003034:	b29b      	uxth	r3, r3
 8003036:	4413      	add	r3, r2
 8003038:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 800303c:	7a9b      	ldrb	r3, [r3, #10]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4413      	add	r3, r2
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003046:	7adb      	ldrb	r3, [r3, #11]
 8003048:	b29b      	uxth	r3, r3
 800304a:	4413      	add	r3, r2
 800304c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003050:	7b1b      	ldrb	r3, [r3, #12]
 8003052:	b29b      	uxth	r3, r3
 8003054:	4413      	add	r3, r2
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 800305a:	7b5b      	ldrb	r3, [r3, #13]
 800305c:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 800305e:	4413      	add	r3, r2
 8003060:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003068:	7b9b      	ldrb	r3, [r3, #14]
 800306a:	429a      	cmp	r2, r3
 800306c:	d12b      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2baa      	cmp	r3, #170	; 0xaa
 8003074:	d127      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0xfe>
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2ba4      	cmp	r3, #164	; 0xa4
 800307c:	d123      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003080:	78db      	ldrb	r3, [r3, #3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11f      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003088:	7a5b      	ldrb	r3, [r3, #9]
 800308a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 800308e:	7a1b      	ldrb	r3, [r3, #8]
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	441a      	add	r2, r3
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 8003096:	79db      	ldrb	r3, [r3, #7]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	4413      	add	r3, r2
						+ (receive_buf[6]);
 800309c:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 800309e:	7992      	ldrb	r2, [r2, #6]
 80030a0:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 80030a2:	4a12      	ldr	r2, [pc, #72]	; (80030ec <HAL_UART_RxCpltCallback+0x124>)
 80030a4:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 80030a8:	7b5b      	ldrb	r3, [r3, #13]
 80030aa:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 80030ae:	7b1b      	ldrb	r3, [r3, #12]
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	441a      	add	r2, r3
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 80030b6:	7adb      	ldrb	r3, [r3, #11]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	4413      	add	r3, r2
						+ (receive_buf[10]);
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_UART_RxCpltCallback+0x120>)
 80030be:	7a92      	ldrb	r2, [r2, #10]
 80030c0:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_UART_RxCpltCallback+0x124>)
 80030c4:	6053      	str	r3, [r2, #4]
			}
		}
	}
	//Sabertooth Callback
	if (huart->Instance == USART6)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_UART_RxCpltCallback+0x128>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d104      	bne.n	80030da <HAL_UART_RxCpltCallback+0x112>
	{
		MotorProcessReply(&sabertooth_handler, motor_receive_buf, sizeof(motor_receive_buf));
 80030d0:	2209      	movs	r2, #9
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <HAL_UART_RxCpltCallback+0x12c>)
 80030d4:	4808      	ldr	r0, [pc, #32]	; (80030f8 <HAL_UART_RxCpltCallback+0x130>)
 80030d6:	f7fe f9af 	bl	8001438 <MotorProcessReply>
	}

}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40004800 	.word	0x40004800
 80030e8:	20000518 	.word	0x20000518
 80030ec:	20000424 	.word	0x20000424
 80030f0:	40011400 	.word	0x40011400
 80030f4:	2000050c 	.word	0x2000050c
 80030f8:	20000408 	.word	0x20000408
 80030fc:	00000000 	.word	0x00000000

08003100 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a8d      	ldr	r2, [pc, #564]	; (8003340 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800310c:	4293      	cmp	r3, r2
 800310e:	f040 810b 	bne.w	8003328 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4a8b      	ldr	r2, [pc, #556]	; (8003344 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8003118:	2100      	movs	r1, #0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f002 faa7 	bl	800566e <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8003120:	7a7b      	ldrb	r3, [r7, #9]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d150      	bne.n	80031c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	4987      	ldr	r1, [pc, #540]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fed5 	bl	8001edc <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8003132:	4885      	ldr	r0, [pc, #532]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003134:	f7fe ff4b 	bl	8001fce <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8003138:	4b83      	ldr	r3, [pc, #524]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 800313c:	425b      	negs	r3, r3
 800313e:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8003142:	4a81      	ldr	r2, [pc, #516]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8003146:	4b80      	ldr	r3, [pc, #512]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8003152:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8003156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800315a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 800315e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003162:	ee17 0a90 	vmov	r0, s15
 8003166:	f7fd f9a7 	bl	80004b8 <__aeabi_f2d>
 800316a:	a371      	add	r3, pc, #452	; (adr r3, 8003330 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f844 	bl	80001fc <__adddf3>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7fd fcec 	bl	8000b58 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8003186:	4b70      	ldr	r3, [pc, #448]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8003188:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800318c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8003190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	dd09      	ble.n	80031ae <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 800319a:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800319c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80031a0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 80031a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031a8:	4b67      	ldr	r3, [pc, #412]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80031aa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 80031ae:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d306      	bcc.n	80031c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 80031be:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80031c2:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 80031c4:	4b60      	ldr	r3, [pc, #384]	; (8003348 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80031c6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 80031c8:	7a7b      	ldrb	r3, [r7, #9]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	f040 80ac 	bne.w	8003328 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	495f      	ldr	r1, [pc, #380]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fe80 	bl	8001edc <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 80031dc:	485d      	ldr	r0, [pc, #372]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80031de:	f7fe fef6 	bl	8001fce <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 80031ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d839      	bhi.n	8003266 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 80031f2:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	0b5b      	lsrs	r3, r3, #13
 8003202:	f242 3133 	movw	r1, #9011	; 0x2333
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800320c:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800320e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	ee17 0a90 	vmov	r0, s15
 8003220:	f7fd f94a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8003224:	a344      	add	r3, pc, #272	; (adr r3, 8003338 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f7fd fac7 	bl	80007bc <__aeabi_ddiv>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	4b48      	ldr	r3, [pc, #288]	; (800335c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800323c:	f7fd f994 	bl	8000568 <__aeabi_dmul>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	a339      	add	r3, pc, #228	; (adr r3, 8003330 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fc ffd5 	bl	80001fc <__adddf3>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd fc7d 	bl	8000b58 <__aeabi_d2f>
 800325e:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003260:	4a3c      	ldr	r2, [pc, #240]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
 8003264:	e047      	b.n	80032f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd f902 	bl	8000474 <__aeabi_ui2d>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	a130      	add	r1, pc, #192	; (adr r1, 8003338 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800327a:	f7fc ffbd 	bl	80001f8 <__aeabi_dsub>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7fd fc47 	bl	8000b18 <__aeabi_d2uiz>
 800328a:	4603      	mov	r3, r0
 800328c:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800328e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003290:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329c:	ee17 0a90 	vmov	r0, s15
 80032a0:	f7fd f90a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 80032a4:	a324      	add	r3, pc, #144	; (adr r3, 8003338 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd fa87 	bl	80007bc <__aeabi_ddiv>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80032bc:	f7fd f954 	bl	8000568 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	a319      	add	r3, pc, #100	; (adr r3, 8003330 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fc ff95 	bl	80001fc <__adddf3>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	4b1f      	ldr	r3, [pc, #124]	; (800335c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80032e0:	f7fc ff8a 	bl	80001f8 <__aeabi_dsub>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	f7fd fc34 	bl	8000b58 <__aeabi_d2f>
 80032f0:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 80032f6:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f640 421c 	movw	r2, #3100	; 0xc1c
 80032fe:	4293      	cmp	r3, r2
 8003300:	d312      	bcc.n	8003328 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f8b4 	bl	8000474 <__aeabi_ui2d>
 800330c:	a30a      	add	r3, pc, #40	; (adr r3, 8003338 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fc ff71 	bl	80001f8 <__aeabi_dsub>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f7fd fbd3 	bl	8000ac8 <__aeabi_d2iz>
 8003322:	4603      	mov	r3, r0
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003326:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	d0e56042 	.word	0xd0e56042
 8003334:	40424b22 	.word	0x40424b22
 8003338:	9999999a 	.word	0x9999999a
 800333c:	40c19999 	.word	0x40c19999
 8003340:	200002b4 	.word	0x200002b4
 8003344:	20000200 	.word	0x20000200
 8003348:	2000035c 	.word	0x2000035c
 800334c:	46000000 	.word	0x46000000
 8003350:	43b40000 	.word	0x43b40000
 8003354:	20000304 	.word	0x20000304
 8003358:	e8bb8111 	.word	0xe8bb8111
 800335c:	40768000 	.word	0x40768000

08003360 <baseMotorCommand>:

void baseMotorCommand(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <baseMotorCommand+0x40>)
 8003366:	edd3 7a01 	vldr	s15, [r3, #4]
 800336a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336e:	ee17 3a90 	vmov	r3, s15
 8003372:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <baseMotorCommand+0x44>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <baseMotorCommand+0x40>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003386:	ee17 3a90 	vmov	r3, s15
 800338a:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <baseMotorCommand+0x44>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	200000d8 	.word	0x200000d8
 80033a4:	20000578 	.word	0x20000578

080033a8 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 80033a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint32_t prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 80033b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	db02      	blt.n	80033c8 <climbingForward+0x20>
 80033c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80033c6:	e000      	b.n	80033ca <climbingForward+0x22>
 80033c8:	4b63      	ldr	r3, [pc, #396]	; (8003558 <climbingForward+0x1b0>)
 80033ca:	617b      	str	r3, [r7, #20]

	if (first_loop)
 80033cc:	4b63      	ldr	r3, [pc, #396]	; (800355c <climbingForward+0x1b4>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00e      	beq.n	80033f2 <climbingForward+0x4a>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 80033d4:	4b62      	ldr	r3, [pc, #392]	; (8003560 <climbingForward+0x1b8>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a62      	ldr	r2, [pc, #392]	; (8003564 <climbingForward+0x1bc>)
 80033da:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 80033dc:	f001 fe1c 	bl	8005018 <HAL_GetTick>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a61      	ldr	r2, [pc, #388]	; (8003568 <climbingForward+0x1c0>)
 80033e4:	6013      	str	r3, [r2, #0]
		first_loop = false;
 80033e6:	4b5d      	ldr	r3, [pc, #372]	; (800355c <climbingForward+0x1b4>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 80033ec:	4a5f      	ldr	r2, [pc, #380]	; (800356c <climbingForward+0x1c4>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 80033f2:	4b5e      	ldr	r3, [pc, #376]	; (800356c <climbingForward+0x1c4>)
 80033f4:	ed93 7a00 	vldr	s14, [r3]
 80033f8:	edd7 6a01 	vldr	s13, [r7, #4]
 80033fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003400:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003408:	f2c0 808f 	blt.w	800352a <climbingForward+0x182>
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <climbingForward+0x1b4>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 8087 	beq.w	800352a <climbingForward+0x182>
	{
		send_HubMotor(rps, rps);
 800341c:	edd7 0a05 	vldr	s1, [r7, #20]
 8003420:	ed97 0a05 	vldr	s0, [r7, #20]
 8003424:	f7fe f944 	bl	80016b0 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 8003428:	f001 fdf6 	bl	8005018 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <climbingForward+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d976      	bls.n	8003526 <climbingForward+0x17e>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 8003438:	f001 fdee 	bl	8005018 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <climbingForward+0x1c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800344c:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003570 <climbingForward+0x1c8>
 8003450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003454:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003458:	4b41      	ldr	r3, [pc, #260]	; (8003560 <climbingForward+0x1b8>)
 800345a:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <climbingForward+0x1bc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 800346a:	ed97 7a04 	vldr	s14, [r7, #16]
 800346e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003472:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003476:	ee17 0a90 	vmov	r0, s15
 800347a:	f7fd f81d 	bl	80004b8 <__aeabi_f2d>
 800347e:	a332      	add	r3, pc, #200	; (adr r3, 8003548 <climbingForward+0x1a0>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f7fd f870 	bl	8000568 <__aeabi_dmul>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	4b37      	ldr	r3, [pc, #220]	; (8003574 <climbingForward+0x1cc>)
 8003496:	f7fd f991 	bl	80007bc <__aeabi_ddiv>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7fd fb59 	bl	8000b58 <__aeabi_d2f>
 80034a6:	4603      	mov	r3, r0
 80034a8:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 80034aa:	4b30      	ldr	r3, [pc, #192]	; (800356c <climbingForward+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f802 	bl	80004b8 <__aeabi_f2d>
 80034b4:	4604      	mov	r4, r0
 80034b6:	460d      	mov	r5, r1
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7fc fffd 	bl	80004b8 <__aeabi_f2d>
 80034be:	a324      	add	r3, pc, #144	; (adr r3, 8003550 <climbingForward+0x1a8>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f850 	bl	8000568 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4690      	mov	r8, r2
 80034ce:	4699      	mov	r9, r3
 80034d0:	6938      	ldr	r0, [r7, #16]
 80034d2:	f7fc fff1 	bl	80004b8 <__aeabi_f2d>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4640      	mov	r0, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	f7fd f843 	bl	8000568 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4610      	mov	r0, r2
 80034e8:	4619      	mov	r1, r3
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f2:	f7fd f963 	bl	80007bc <__aeabi_ddiv>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fc fe7b 	bl	80001f8 <__aeabi_dsub>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	f7fd fb25 	bl	8000b58 <__aeabi_d2f>
 800350e:	4603      	mov	r3, r0
 8003510:	4a16      	ldr	r2, [pc, #88]	; (800356c <climbingForward+0x1c4>)
 8003512:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 8003514:	f001 fd80 	bl	8005018 <HAL_GetTick>
 8003518:	4603      	mov	r3, r0
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <climbingForward+0x1c0>)
 800351c:	6013      	str	r3, [r2, #0]
//					dist_remaining = 0;
//				}
//			}
//			else
//				stationary_tick = HAL_GetTick();
			prev_enc = hub_encoder_feedback.encoder_2;
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <climbingForward+0x1b8>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <climbingForward+0x1bc>)
 8003524:	6013      	str	r3, [r2, #0]

		}
		return true;
 8003526:	2301      	movs	r3, #1
 8003528:	e009      	b.n	800353e <climbingForward+0x196>
	}
	else
	{
		first_loop = true;
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <climbingForward+0x1b4>)
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 8003530:	eddf 0a11 	vldr	s1, [pc, #68]	; 8003578 <climbingForward+0x1d0>
 8003534:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003578 <climbingForward+0x1d0>
 8003538:	f7fe f8ba 	bl	80016b0 <send_HubMotor>
		return false;
 800353c:	2300      	movs	r3, #0
	}
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003548:	54442d18 	.word	0x54442d18
 800354c:	400921fb 	.word	0x400921fb
 8003550:	916872b0 	.word	0x916872b0
 8003554:	3fbf7ced 	.word	0x3fbf7ced
 8003558:	bf800000 	.word	0xbf800000
 800355c:	20000128 	.word	0x20000128
 8003560:	20000424 	.word	0x20000424
 8003564:	2000021c 	.word	0x2000021c
 8003568:	20000220 	.word	0x20000220
 800356c:	20000224 	.word	0x20000224
 8003570:	447a0000 	.word	0x447a0000
 8003574:	40b00000 	.word	0x40b00000
	...

08003580 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 8003580:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;
	ENCODER_Read(&encoderBack);
 800358c:	487c      	ldr	r0, [pc, #496]	; (8003780 <goto_pos+0x200>)
 800358e:	f7fe fcf6 	bl	8001f7e <ENCODER_Read>
	ENCODER_Read(&encoderFront);
 8003592:	487c      	ldr	r0, [pc, #496]	; (8003784 <goto_pos+0x204>)
 8003594:	f7fe fcf3 	bl	8001f7e <ENCODER_Read>
	if (pid_t == frontClimb_pid)
 8003598:	4b7b      	ldr	r3, [pc, #492]	; (8003788 <goto_pos+0x208>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d17b      	bne.n	800369a <goto_pos+0x11a>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 80035a2:	4b78      	ldr	r3, [pc, #480]	; (8003784 <goto_pos+0x204>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 80035a8:	4b77      	ldr	r3, [pc, #476]	; (8003788 <goto_pos+0x208>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd fce1 	bl	8000f74 <pid_need_compute>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d06e      	beq.n	8003696 <goto_pos+0x116>
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc ff68 	bl	8000494 <__aeabi_i2d>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4690      	mov	r8, r2
 80035ca:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	4b6e      	ldr	r3, [pc, #440]	; (800378c <goto_pos+0x20c>)
 80035d4:	4640      	mov	r0, r8
 80035d6:	4649      	mov	r1, r9
 80035d8:	f7fd fa56 	bl	8000a88 <__aeabi_dcmpgt>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d059      	beq.n	8003696 <goto_pos+0x116>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f640 421c 	movw	r2, #3100	; 0xc1c
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d90f      	bls.n	800360c <goto_pos+0x8c>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7fc ff51 	bl	8000494 <__aeabi_i2d>
 80035f2:	a361      	add	r3, pc, #388	; (adr r3, 8003778 <goto_pos+0x1f8>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f7fc fdfe 	bl	80001f8 <__aeabi_dsub>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fd fa60 	bl	8000ac8 <__aeabi_d2iz>
 8003608:	4603      	mov	r3, r0
 800360a:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003612:	4293      	cmp	r3, r2
 8003614:	d30f      	bcc.n	8003636 <goto_pos+0xb6>
				enc -= 4096 * FRONT_GEAR_RATIO;
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fc ff3c 	bl	8000494 <__aeabi_i2d>
 800361c:	a356      	add	r3, pc, #344	; (adr r3, 8003778 <goto_pos+0x1f8>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fc fde9 	bl	80001f8 <__aeabi_dsub>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fa4b 	bl	8000ac8 <__aeabi_d2iz>
 8003632:	4603      	mov	r3, r0
 8003634:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <goto_pos+0x210>)
 8003642:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003650:	4b50      	ldr	r3, [pc, #320]	; (8003794 <goto_pos+0x214>)
 8003652:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 8003656:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <goto_pos+0x208>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fc9f 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8003660:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <goto_pos+0x218>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4d      	ldr	r2, [pc, #308]	; (800379c <goto_pos+0x21c>)
 8003666:	6013      	str	r3, [r2, #0]
			if(fabs(speed[FRONT_INDEX]) < 5)
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <goto_pos+0x21c>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	eef0 7ae7 	vabs.f32	s15, s15
 8003672:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d508      	bpl.n	8003692 <goto_pos+0x112>
			{
				speed[FRONT_INDEX] = 0;
 8003680:	4b46      	ldr	r3, [pc, #280]	; (800379c <goto_pos+0x21c>)
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <goto_pos+0x208>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fe99 	bl	80013c4 <pid_reset>
			}

			return true;
 8003692:	2301      	movs	r3, #1
 8003694:	e06b      	b.n	800376e <goto_pos+0x1ee>
		}
		else
		{
//			speed[FRONT_INDEX] = 0;

			return false;
 8003696:	2300      	movs	r3, #0
 8003698:	e069      	b.n	800376e <goto_pos+0x1ee>
		}
	}
	else if (pid_t == backClimb_pid)
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <goto_pos+0x220>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d163      	bne.n	800376c <goto_pos+0x1ec>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 80036a4:	4b36      	ldr	r3, [pc, #216]	; (8003780 <goto_pos+0x200>)
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <goto_pos+0x220>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fc60 	bl	8000f74 <pid_need_compute>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d056      	beq.n	8003768 <goto_pos+0x1e8>
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc fee7 	bl	8000494 <__aeabi_i2d>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4614      	mov	r4, r2
 80036cc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <goto_pos+0x20c>)
 80036d6:	4620      	mov	r0, r4
 80036d8:	4629      	mov	r1, r5
 80036da:	f7fd f9d5 	bl	8000a88 <__aeabi_dcmpgt>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d041      	beq.n	8003768 <goto_pos+0x1e8>
		{
			// Read process feedback
			//following code is causing back turn
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d903      	bls.n	80036f6 <goto_pos+0x176>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80036f4:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d303      	bcc.n	8003708 <goto_pos+0x188>
				enc -= 4096 * BACK_GEAR_RATIO;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003706:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <goto_pos+0x224>)
 8003714:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <goto_pos+0x228>)
 8003724:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <goto_pos+0x220>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fc36 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <goto_pos+0x22c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a19      	ldr	r2, [pc, #100]	; (800379c <goto_pos+0x21c>)
 8003738:	6053      	str	r3, [r2, #4]
			if(fabs(speed[BACK_INDEX]) < 5)
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <goto_pos+0x21c>)
 800373c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003740:	eef0 7ae7 	vabs.f32	s15, s15
 8003744:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003750:	d508      	bpl.n	8003764 <goto_pos+0x1e4>
			{
				speed[BACK_INDEX] = 0;
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <goto_pos+0x21c>)
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	605a      	str	r2, [r3, #4]
				pid_reset(backClimb_pid);
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <goto_pos+0x220>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fe30 	bl	80013c4 <pid_reset>
			}
			return true;
 8003764:	2301      	movs	r3, #1
 8003766:	e002      	b.n	800376e <goto_pos+0x1ee>
		else
		{
//			speed[BACK_INDEX] = 0;
//			if(fabs(speed[BACK_INDEX]) < 5)
//				pid_reset(backClimb_pid);
			return false;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <goto_pos+0x1ee>
		}
	}
	return false;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003778:	9999999a 	.word	0x9999999a
 800377c:	40c19999 	.word	0x40c19999
 8003780:	2000035c 	.word	0x2000035c
 8003784:	20000304 	.word	0x20000304
 8003788:	200004d4 	.word	0x200004d4
 800378c:	40140000 	.word	0x40140000
 8003790:	200001d4 	.word	0x200001d4
 8003794:	200001cc 	.word	0x200001cc
 8003798:	200001d0 	.word	0x200001d0
 800379c:	200001c4 	.word	0x200001c4
 80037a0:	2000052c 	.word	0x2000052c
 80037a4:	200001e0 	.word	0x200001e0
 80037a8:	200001d8 	.word	0x200001d8
 80037ac:	200001dc 	.word	0x200001dc

080037b0 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc)
{
 80037b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]

	if (first_loop)
 80037c2:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <in_climb_process+0x218>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 80037ca:	4b80      	ldr	r3, [pc, #512]	; (80039cc <in_climb_process+0x21c>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <in_climb_process+0x220>)
 80037d0:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 80037d2:	f001 fc21 	bl	8005018 <HAL_GetTick>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4a7e      	ldr	r2, [pc, #504]	; (80039d4 <in_climb_process+0x224>)
 80037da:	6013      	str	r3, [r2, #0]
		first_loop = false;
 80037dc:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <in_climb_process+0x218>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 80037e2:	4b7d      	ldr	r3, [pc, #500]	; (80039d8 <in_climb_process+0x228>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff fec9 	bl	8003580 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 80037ee:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <in_climb_process+0x22c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4619      	mov	r1, r3
 80037f4:	6838      	ldr	r0, [r7, #0]
 80037f6:	f7ff fec3 	bl	8003580 <goto_pos>

	if (fabs(speed[FRONT_INDEX]) >= 5 || fabs(speed[BACK_INDEX]) >= 5)
 80037fa:	4b79      	ldr	r3, [pc, #484]	; (80039e0 <in_climb_process+0x230>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	eef0 7ae7 	vabs.f32	s15, s15
 8003804:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	da0b      	bge.n	800382a <in_climb_process+0x7a>
 8003812:	4b73      	ldr	r3, [pc, #460]	; (80039e0 <in_climb_process+0x230>)
 8003814:	edd3 7a01 	vldr	s15, [r3, #4]
 8003818:	eef0 7ae7 	vabs.f32	s15, s15
 800381c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	db02      	blt.n	8003830 <in_climb_process+0x80>
		is_lifting = true;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
 800382e:	e001      	b.n	8003834 <in_climb_process+0x84>
	else
		is_lifting = false;
 8003830:	2300      	movs	r3, #0
 8003832:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 809d 	beq.w	8003976 <in_climb_process+0x1c6>
 800383c:	4b68      	ldr	r3, [pc, #416]	; (80039e0 <in_climb_process+0x230>)
 800383e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003842:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	f000 8094 	beq.w	8003976 <in_climb_process+0x1c6>
	{
		double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 800384e:	f001 fbe3 	bl	8005018 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <in_climb_process+0x224>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003862:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80039e4 <in_climb_process+0x234>
 8003866:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800386a:	ee16 0a90 	vmov	r0, s13
 800386e:	f7fc fe23 	bl	80004b8 <__aeabi_f2d>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg)))
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <in_climb_process+0x238>)
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fe1b 	bl	80004b8 <__aeabi_f2d>
 8003882:	4604      	mov	r4, r0
 8003884:	460d      	mov	r5, r1
 8003886:	4b52      	ldr	r3, [pc, #328]	; (80039d0 <in_climb_process+0x220>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fc fe14 	bl	80004b8 <__aeabi_f2d>
 8003890:	a349      	add	r3, pc, #292	; (adr r3, 80039b8 <in_climb_process+0x208>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc fe67 	bl	8000568 <__aeabi_dmul>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	4b51      	ldr	r3, [pc, #324]	; (80039ec <in_climb_process+0x23c>)
 80038a8:	f7fc ff88 	bl	80007bc <__aeabi_ddiv>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	ec43 2b17 	vmov	d7, r2, r3
 80038b4:	eeb0 0a47 	vmov.f32	s0, s14
 80038b8:	eef0 0a67 	vmov.f32	s1, s15
 80038bc:	f007 fbb0 	bl	800b020 <sin>
 80038c0:	ec59 8b10 	vmov	r8, r9, d0
 80038c4:	4b41      	ldr	r3, [pc, #260]	; (80039cc <in_climb_process+0x21c>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fdf5 	bl	80004b8 <__aeabi_f2d>
 80038ce:	a33a      	add	r3, pc, #232	; (adr r3, 80039b8 <in_climb_process+0x208>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fc fe48 	bl	8000568 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	4b41      	ldr	r3, [pc, #260]	; (80039ec <in_climb_process+0x23c>)
 80038e6:	f7fc ff69 	bl	80007bc <__aeabi_ddiv>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	ec43 2b17 	vmov	d7, r2, r3
 80038f2:	eeb0 0a47 	vmov.f32	s0, s14
 80038f6:	eef0 0a67 	vmov.f32	s1, s15
 80038fa:	f007 fb91 	bl	800b020 <sin>
 80038fe:	ec53 2b10 	vmov	r2, r3, d0
 8003902:	4640      	mov	r0, r8
 8003904:	4649      	mov	r1, r9
 8003906:	f7fc fc77 	bl	80001f8 <__aeabi_dsub>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	f7fc fe29 	bl	8000568 <__aeabi_dmul>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
				/ dt; //unit: m/s,
 800391e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003922:	f7fc ff4b 	bl	80007bc <__aeabi_ddiv>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	f7fd f913 	bl	8000b58 <__aeabi_d2f>
 8003932:	4603      	mov	r3, r0
 8003934:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 8003936:	6938      	ldr	r0, [r7, #16]
 8003938:	f7fc fdbe 	bl	80004b8 <__aeabi_f2d>
 800393c:	a320      	add	r3, pc, #128	; (adr r3, 80039c0 <in_climb_process+0x210>)
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f7fc ff3b 	bl	80007bc <__aeabi_ddiv>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	f7fd f903 	bl	8000b58 <__aeabi_d2f>
 8003952:	4603      	mov	r3, r0
 8003954:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 8003956:	edd7 0a04 	vldr	s1, [r7, #16]
 800395a:	ed97 0a04 	vldr	s0, [r7, #16]
 800395e:	f7fd fea7 	bl	80016b0 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 8003962:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <in_climb_process+0x21c>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <in_climb_process+0x220>)
 8003968:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 800396a:	f001 fb55 	bl	8005018 <HAL_GetTick>
 800396e:	4603      	mov	r3, r0
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <in_climb_process+0x224>)
 8003972:	6013      	str	r3, [r2, #0]
	{
 8003974:	e010      	b.n	8003998 <in_climb_process+0x1e8>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <in_climb_process+0x1e8>
 800397c:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <in_climb_process+0x230>)
 800397e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003982:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398a:	d105      	bne.n	8003998 <in_climb_process+0x1e8>
		send_HubMotor(0, 0);
 800398c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80039f0 <in_climb_process+0x240>
 8003990:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80039f0 <in_climb_process+0x240>
 8003994:	f7fd fe8c 	bl	80016b0 <send_HubMotor>

	if (!is_lifting)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <in_climb_process+0x1fa>
		first_loop = true;
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <in_climb_process+0x218>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]

}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039b6:	bf00      	nop
 80039b8:	54442d18 	.word	0x54442d18
 80039bc:	400921fb 	.word	0x400921fb
 80039c0:	916872b0 	.word	0x916872b0
 80039c4:	3faf7ced 	.word	0x3faf7ced
 80039c8:	20000129 	.word	0x20000129
 80039cc:	2000035c 	.word	0x2000035c
 80039d0:	20000228 	.word	0x20000228
 80039d4:	2000022c 	.word	0x2000022c
 80039d8:	200004d4 	.word	0x200004d4
 80039dc:	2000052c 	.word	0x2000052c
 80039e0:	200001c4 	.word	0x200001c4
 80039e4:	447a0000 	.word	0x447a0000
 80039e8:	3eb2b021 	.word	0x3eb2b021
 80039ec:	40668000 	.word	0x40668000
 80039f0:	00000000 	.word	0x00000000

080039f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 80039f8:	2100      	movs	r1, #0
 80039fa:	4808      	ldr	r0, [pc, #32]	; (8003a1c <Error_Handler+0x28>)
 80039fc:	f004 fd22 	bl	8008444 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 8003a00:	2104      	movs	r1, #4
 8003a02:	4806      	ldr	r0, [pc, #24]	; (8003a1c <Error_Handler+0x28>)
 8003a04:	f004 fd1e 	bl	8008444 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4805      	ldr	r0, [pc, #20]	; (8003a20 <Error_Handler+0x2c>)
 8003a0c:	f7fd ffcc 	bl	80019a8 <brakeMotor>
	brakeMotor(&backMotor, 1);
 8003a10:	2101      	movs	r1, #1
 8003a12:	4803      	ldr	r0, [pc, #12]	; (8003a20 <Error_Handler+0x2c>)
 8003a14:	f7fd ffc8 	bl	80019a8 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000578 	.word	0x20000578
 8003a20:	20000034 	.word	0x20000034

08003a24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <MX_SPI1_Init+0x6c>)
 8003a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a3c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a48:	2202      	movs	r2, #2
 8003a4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a5c:	2228      	movs	r2, #40	; 0x28
 8003a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a74:	220a      	movs	r2, #10
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a78:	4804      	ldr	r0, [pc, #16]	; (8003a8c <MX_SPI1_Init+0x68>)
 8003a7a:	f003 ff07 	bl	800788c <HAL_SPI_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003a84:	f7ff ffb6 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	2000025c 	.word	0x2000025c
 8003a90:	40013000 	.word	0x40013000

08003a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0314 	add.w	r3, r7, #20
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_SPI_MspInit+0x84>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d12b      	bne.n	8003b0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <HAL_SPI_MspInit+0x88>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_SPI_MspInit+0x88>)
 8003ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <HAL_SPI_MspInit+0x88>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_SPI_MspInit+0x88>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <HAL_SPI_MspInit+0x88>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <HAL_SPI_MspInit+0x88>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003aee:	2360      	movs	r3, #96	; 0x60
 8003af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afa:	2303      	movs	r3, #3
 8003afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003afe:	2305      	movs	r3, #5
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	4619      	mov	r1, r3
 8003b08:	4805      	ldr	r0, [pc, #20]	; (8003b20 <HAL_SPI_MspInit+0x8c>)
 8003b0a:	f002 fe47 	bl	800679c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3728      	adds	r7, #40	; 0x28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40013000 	.word	0x40013000
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40020000 	.word	0x40020000

08003b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b38:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b86:	e7fe      	b.n	8003b86 <HardFault_Handler+0x4>

08003b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b8c:	e7fe      	b.n	8003b8c <MemManage_Handler+0x4>

08003b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <BusFault_Handler+0x4>

08003b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <UsageFault_Handler+0x4>

08003b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc8:	f001 fa12 	bl	8004ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA1_Stream1_IRQHandler+0x10>)
 8003bd6:	f002 fb77 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200006b0 	.word	0x200006b0

08003be4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <DMA1_Stream3_IRQHandler+0x10>)
 8003bea:	f002 fb6d 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000754 	.word	0x20000754

08003bf8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <CAN1_RX0_IRQHandler+0x10>)
 8003bfe:	f001 fe6e 	bl	80058de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200002b4 	.word	0x200002b4

08003c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003c10:	2080      	movs	r0, #128	; 0x80
 8003c12:	f002 ffa1 	bl	8006b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <USART3_IRQHandler+0x10>)
 8003c22:	f005 ff8d 	bl	8009b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000710 	.word	0x20000710

08003c30 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003c36:	f004 fdf7 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000530 	.word	0x20000530

08003c44 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003c4a:	f004 fded 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000530 	.word	0x20000530

08003c58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003c5e:	f004 fde3 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000530 	.word	0x20000530

08003c6c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <TIM8_CC_IRQHandler+0x10>)
 8003c72:	f004 fdd9 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000530 	.word	0x20000530

08003c80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c84:	4802      	ldr	r0, [pc, #8]	; (8003c90 <DMA2_Stream1_IRQHandler+0x10>)
 8003c86:	f002 fb1f 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000650 	.word	0x20000650

08003c94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003c98:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <DMA2_Stream6_IRQHandler+0x10>)
 8003c9a:	f002 fb15 	bl	80062c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200007b4 	.word	0x200007b4

08003ca8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003cac:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <USART6_IRQHandler+0x10>)
 8003cae:	f005 ff47 	bl	8009b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000814 	.word	0x20000814

08003cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <SystemInit+0x28>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <SystemInit+0x28>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <SystemInit+0x28>)
 8003cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cd6:	609a      	str	r2, [r3, #8]
#endif
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b096      	sub	sp, #88	; 0x58
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	60da      	str	r2, [r3, #12]
 8003d14:	611a      	str	r2, [r3, #16]
 8003d16:	615a      	str	r2, [r3, #20]
 8003d18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f006 ff79 	bl	800ac18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d28:	4a3e      	ldr	r2, [pc, #248]	; (8003e24 <MX_TIM1_Init+0x13c>)
 8003d2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003d2c:	4b3c      	ldr	r3, [pc, #240]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d2e:	22b3      	movs	r2, #179	; 0xb3
 8003d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003d38:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d3a:	2263      	movs	r2, #99	; 0x63
 8003d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d44:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d50:	4833      	ldr	r0, [pc, #204]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d52:	f004 fa07 	bl	8008164 <HAL_TIM_Base_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003d5c:	f7ff fe4a 	bl	80039f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	482c      	ldr	r0, [pc, #176]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d6e:	f004 ffc1 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003d78:	f7ff fe3c 	bl	80039f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d7c:	4828      	ldr	r0, [pc, #160]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d7e:	f004 fa40 	bl	8008202 <HAL_TIM_PWM_Init>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003d88:	f7ff fe34 	bl	80039f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4821      	ldr	r0, [pc, #132]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003d9c:	f005 fcde 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003da6:	f7ff fe25 	bl	80039f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003daa:	2360      	movs	r3, #96	; 0x60
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003db6:	2300      	movs	r3, #0
 8003db8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4814      	ldr	r0, [pc, #80]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003dd0:	f004 fece 	bl	8008b70 <HAL_TIM_PWM_ConfigChannel>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003dda:	f7ff fe0b 	bl	80039f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4807      	ldr	r0, [pc, #28]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003e02:	f005 fd27 	bl	8009854 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003e0c:	f7ff fdf2 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e10:	4803      	ldr	r0, [pc, #12]	; (8003e20 <MX_TIM1_Init+0x138>)
 8003e12:	f000 f9e7 	bl	80041e4 <HAL_TIM_MspPostInit>

}
 8003e16:	bf00      	nop
 8003e18:	3758      	adds	r7, #88	; 0x58
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200005c0 	.word	0x200005c0
 8003e24:	40010000 	.word	0x40010000

08003e28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08e      	sub	sp, #56	; 0x38
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	609a      	str	r2, [r3, #8]
 8003e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e3c:	f107 0320 	add.w	r3, r7, #32
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e46:	1d3b      	adds	r3, r7, #4
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
 8003e54:	615a      	str	r2, [r3, #20]
 8003e56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e58:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e62:	2259      	movs	r2, #89	; 0x59
 8003e64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e6e:	2263      	movs	r2, #99	; 0x63
 8003e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e7e:	4823      	ldr	r0, [pc, #140]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e80:	f004 f970 	bl	8008164 <HAL_TIM_Base_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003e8a:	f7ff fdb3 	bl	80039f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e98:	4619      	mov	r1, r3
 8003e9a:	481c      	ldr	r0, [pc, #112]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003e9c:	f004 ff2a 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003ea6:	f7ff fda5 	bl	80039f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003eaa:	4818      	ldr	r0, [pc, #96]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003eac:	f004 f9a9 	bl	8008202 <HAL_TIM_PWM_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003eb6:	f7ff fd9d 	bl	80039f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ec2:	f107 0320 	add.w	r3, r7, #32
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4810      	ldr	r0, [pc, #64]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003eca:	f005 fc47 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003ed4:	f7ff fd8e 	bl	80039f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ed8:	2360      	movs	r3, #96	; 0x60
 8003eda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	2208      	movs	r2, #8
 8003eec:	4619      	mov	r1, r3
 8003eee:	4807      	ldr	r0, [pc, #28]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003ef0:	f004 fe3e 	bl	8008b70 <HAL_TIM_PWM_ConfigChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003efa:	f7ff fd7b 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003efe:	4803      	ldr	r0, [pc, #12]	; (8003f0c <MX_TIM2_Init+0xe4>)
 8003f00:	f000 f970 	bl	80041e4 <HAL_TIM_MspPostInit>

}
 8003f04:	bf00      	nop
 8003f06:	3738      	adds	r7, #56	; 0x38
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000608 	.word	0x20000608

08003f10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f24:	463b      	mov	r3, r7
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <MX_TIM3_Init+0x98>)
 8003f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f34:	2259      	movs	r2, #89	; 0x59
 8003f36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f40:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003f44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f46:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f52:	4814      	ldr	r0, [pc, #80]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f54:	f004 f906 	bl	8008164 <HAL_TIM_Base_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003f5e:	f7ff fd49 	bl	80039f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	480d      	ldr	r0, [pc, #52]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f70:	f004 fec0 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003f7a:	f7ff fd3b 	bl	80039f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f86:	463b      	mov	r3, r7
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <MX_TIM3_Init+0x94>)
 8003f8c:	f005 fbe6 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003f96:	f7ff fd2d 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000578 	.word	0x20000578
 8003fa8:	40000400 	.word	0x40000400

08003fac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb2:	f107 0318 	add.w	r3, r7, #24
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc0:	f107 0310 	add.w	r3, r7, #16
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fca:	463b      	mov	r3, r7
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	; (800408c <MX_TIM8_Init+0xe0>)
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <MX_TIM8_Init+0xe4>)
 8003fda:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	; (800408c <MX_TIM8_Init+0xe0>)
 8003fde:	2259      	movs	r2, #89	; 0x59
 8003fe0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <MX_TIM8_Init+0xe0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003fe8:	4b28      	ldr	r3, [pc, #160]	; (800408c <MX_TIM8_Init+0xe0>)
 8003fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <MX_TIM8_Init+0xe0>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ff6:	4b25      	ldr	r3, [pc, #148]	; (800408c <MX_TIM8_Init+0xe0>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <MX_TIM8_Init+0xe0>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004002:	4822      	ldr	r0, [pc, #136]	; (800408c <MX_TIM8_Init+0xe0>)
 8004004:	f004 f8ae 	bl	8008164 <HAL_TIM_Base_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800400e:	f7ff fcf1 	bl	80039f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004016:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	4619      	mov	r1, r3
 800401e:	481b      	ldr	r0, [pc, #108]	; (800408c <MX_TIM8_Init+0xe0>)
 8004020:	f004 fe68 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800402a:	f7ff fce3 	bl	80039f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800402e:	4817      	ldr	r0, [pc, #92]	; (800408c <MX_TIM8_Init+0xe0>)
 8004030:	f004 fa78 	bl	8008524 <HAL_TIM_IC_Init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800403a:	f7ff fcdb 	bl	80039f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004046:	f107 0310 	add.w	r3, r7, #16
 800404a:	4619      	mov	r1, r3
 800404c:	480f      	ldr	r0, [pc, #60]	; (800408c <MX_TIM8_Init+0xe0>)
 800404e:	f005 fb85 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8004058:	f7ff fccc 	bl	80039f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800405c:	2300      	movs	r3, #0
 800405e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004060:	2301      	movs	r3, #1
 8004062:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800406c:	463b      	mov	r3, r7
 800406e:	220c      	movs	r2, #12
 8004070:	4619      	mov	r1, r3
 8004072:	4806      	ldr	r0, [pc, #24]	; (800408c <MX_TIM8_Init+0xe0>)
 8004074:	f004 fce0 	bl	8008a38 <HAL_TIM_IC_ConfigChannel>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800407e:	f7ff fcb9 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004082:	bf00      	nop
 8004084:	3728      	adds	r7, #40	; 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000530 	.word	0x20000530
 8004090:	40010400 	.word	0x40010400

08004094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	f107 031c 	add.w	r3, r7, #28
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a47      	ldr	r2, [pc, #284]	; (80041d0 <HAL_TIM_Base_MspInit+0x13c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a45      	ldr	r2, [pc, #276]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80040d2:	e079      	b.n	80041c8 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	697b      	ldr	r3, [r7, #20]
}
 80040fa:	e065      	b.n	80041c8 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a35      	ldr	r2, [pc, #212]	; (80041d8 <HAL_TIM_Base_MspInit+0x144>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004110:	f043 0302 	orr.w	r3, r3, #2
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	4b2f      	ldr	r3, [pc, #188]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	693b      	ldr	r3, [r7, #16]
}
 8004122:	e051      	b.n	80041c8 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_TIM_Base_MspInit+0x148>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d14c      	bne.n	80041c8 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6453      	str	r3, [r2, #68]	; 0x44
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6313      	str	r3, [r2, #48]	; 0x30
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <HAL_TIM_Base_MspInit+0x140>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416c:	2302      	movs	r3, #2
 800416e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004178:	2303      	movs	r3, #3
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800417c:	f107 031c 	add.w	r3, r7, #28
 8004180:	4619      	mov	r1, r3
 8004182:	4817      	ldr	r0, [pc, #92]	; (80041e0 <HAL_TIM_Base_MspInit+0x14c>)
 8004184:	f002 fb0a 	bl	800679c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004188:	2200      	movs	r2, #0
 800418a:	2100      	movs	r1, #0
 800418c:	202b      	movs	r0, #43	; 0x2b
 800418e:	f001 feb0 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004192:	202b      	movs	r0, #43	; 0x2b
 8004194:	f001 fec9 	bl	8005f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004198:	2200      	movs	r2, #0
 800419a:	2100      	movs	r1, #0
 800419c:	202c      	movs	r0, #44	; 0x2c
 800419e:	f001 fea8 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041a2:	202c      	movs	r0, #44	; 0x2c
 80041a4:	f001 fec1 	bl	8005f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	202d      	movs	r0, #45	; 0x2d
 80041ae:	f001 fea0 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80041b2:	202d      	movs	r0, #45	; 0x2d
 80041b4:	f001 feb9 	bl	8005f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80041b8:	2200      	movs	r2, #0
 80041ba:	2100      	movs	r1, #0
 80041bc:	202e      	movs	r0, #46	; 0x2e
 80041be:	f001 fe98 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80041c2:	202e      	movs	r0, #46	; 0x2e
 80041c4:	f001 feb1 	bl	8005f2a <HAL_NVIC_EnableIRQ>
}
 80041c8:	bf00      	nop
 80041ca:	3730      	adds	r7, #48	; 0x30
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40010400 	.word	0x40010400
 80041e0:	40020800 	.word	0x40020800

080041e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_TIM_MspPostInit+0xb4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d11f      	bne.n	8004246 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <HAL_TIM_MspPostInit+0xb8>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a23      	ldr	r2, [pc, #140]	; (800429c <HAL_TIM_MspPostInit+0xb8>)
 8004210:	f043 0310 	orr.w	r3, r3, #16
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b21      	ldr	r3, [pc, #132]	; (800429c <HAL_TIM_MspPostInit+0xb8>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8004222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	2300      	movs	r3, #0
 8004232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004234:	2301      	movs	r3, #1
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4619      	mov	r1, r3
 800423e:	4818      	ldr	r0, [pc, #96]	; (80042a0 <HAL_TIM_MspPostInit+0xbc>)
 8004240:	f002 faac 	bl	800679c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004244:	e023      	b.n	800428e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d11e      	bne.n	800428e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <HAL_TIM_MspPostInit+0xb8>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4a10      	ldr	r2, [pc, #64]	; (800429c <HAL_TIM_MspPostInit+0xb8>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	6313      	str	r3, [r2, #48]	; 0x30
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <HAL_TIM_MspPostInit+0xb8>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 800426c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004272:	2302      	movs	r3, #2
 8004274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800427e:	2301      	movs	r3, #1
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8004282:	f107 0314 	add.w	r3, r7, #20
 8004286:	4619      	mov	r1, r3
 8004288:	4806      	ldr	r0, [pc, #24]	; (80042a4 <HAL_TIM_MspPostInit+0xc0>)
 800428a:	f002 fa87 	bl	800679c <HAL_GPIO_Init>
}
 800428e:	bf00      	nop
 8004290:	3728      	adds	r7, #40	; 0x28
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40023800 	.word	0x40023800
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40020400 	.word	0x40020400

080042a8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <MX_USART3_UART_Init+0x50>)
 80042b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042ce:	220c      	movs	r2, #12
 80042d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d2:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042de:	4805      	ldr	r0, [pc, #20]	; (80042f4 <MX_USART3_UART_Init+0x4c>)
 80042e0:	f005 fb1e 	bl	8009920 <HAL_UART_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80042ea:	f7ff fb83 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000710 	.word	0x20000710
 80042f8:	40004800 	.word	0x40004800

080042fc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <MX_USART6_UART_Init+0x50>)
 8004304:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800430c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004314:	4b0c      	ldr	r3, [pc, #48]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004322:	220c      	movs	r2, #12
 8004324:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004332:	4805      	ldr	r0, [pc, #20]	; (8004348 <MX_USART6_UART_Init+0x4c>)
 8004334:	f005 faf4 	bl	8009920 <HAL_UART_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800433e:	f7ff fb59 	bl	80039f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000814 	.word	0x20000814
 800434c:	40011400 	.word	0x40011400

08004350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	; 0x30
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 031c 	add.w	r3, r7, #28
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a97      	ldr	r2, [pc, #604]	; (80045cc <HAL_UART_MspInit+0x27c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f040 8092 	bne.w	8004498 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	4b95      	ldr	r3, [pc, #596]	; (80045d0 <HAL_UART_MspInit+0x280>)
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	4a94      	ldr	r2, [pc, #592]	; (80045d0 <HAL_UART_MspInit+0x280>)
 800437e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004382:	6413      	str	r3, [r2, #64]	; 0x40
 8004384:	4b92      	ldr	r3, [pc, #584]	; (80045d0 <HAL_UART_MspInit+0x280>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	4b8e      	ldr	r3, [pc, #568]	; (80045d0 <HAL_UART_MspInit+0x280>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4a8d      	ldr	r2, [pc, #564]	; (80045d0 <HAL_UART_MspInit+0x280>)
 800439a:	f043 0308 	orr.w	r3, r3, #8
 800439e:	6313      	str	r3, [r2, #48]	; 0x30
 80043a0:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80043ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b2:	2302      	movs	r3, #2
 80043b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ba:	2303      	movs	r3, #3
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043be:	2307      	movs	r3, #7
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043c2:	f107 031c 	add.w	r3, r7, #28
 80043c6:	4619      	mov	r1, r3
 80043c8:	4882      	ldr	r0, [pc, #520]	; (80045d4 <HAL_UART_MspInit+0x284>)
 80043ca:	f002 f9e7 	bl	800679c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80043ce:	4b82      	ldr	r3, [pc, #520]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043d0:	4a82      	ldr	r2, [pc, #520]	; (80045dc <HAL_UART_MspInit+0x28c>)
 80043d2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80043d4:	4b80      	ldr	r3, [pc, #512]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043dc:	4b7e      	ldr	r3, [pc, #504]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e2:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043e8:	4b7b      	ldr	r3, [pc, #492]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f0:	4b79      	ldr	r3, [pc, #484]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f6:	4b78      	ldr	r3, [pc, #480]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80043fc:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_UART_MspInit+0x288>)
 80043fe:	2200      	movs	r2, #0
 8004400:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004402:	4b75      	ldr	r3, [pc, #468]	; (80045d8 <HAL_UART_MspInit+0x288>)
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_UART_MspInit+0x288>)
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800440e:	4872      	ldr	r0, [pc, #456]	; (80045d8 <HAL_UART_MspInit+0x288>)
 8004410:	f001 fdc2 	bl	8005f98 <HAL_DMA_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800441a:	f7ff faeb 	bl	80039f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a6d      	ldr	r2, [pc, #436]	; (80045d8 <HAL_UART_MspInit+0x288>)
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
 8004424:	4a6c      	ldr	r2, [pc, #432]	; (80045d8 <HAL_UART_MspInit+0x288>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <HAL_UART_MspInit+0x290>)
 800442c:	4a6d      	ldr	r2, [pc, #436]	; (80045e4 <HAL_UART_MspInit+0x294>)
 800442e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004430:	4b6b      	ldr	r3, [pc, #428]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004436:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004438:	4b69      	ldr	r3, [pc, #420]	; (80045e0 <HAL_UART_MspInit+0x290>)
 800443a:	2240      	movs	r2, #64	; 0x40
 800443c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800443e:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004440:	2200      	movs	r2, #0
 8004442:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004444:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800444a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <HAL_UART_MspInit+0x290>)
 800444e:	2200      	movs	r2, #0
 8004450:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004452:	4b63      	ldr	r3, [pc, #396]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004454:	2200      	movs	r2, #0
 8004456:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004458:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <HAL_UART_MspInit+0x290>)
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800445e:	4b60      	ldr	r3, [pc, #384]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004460:	2200      	movs	r2, #0
 8004462:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004464:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004466:	2200      	movs	r2, #0
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800446a:	485d      	ldr	r0, [pc, #372]	; (80045e0 <HAL_UART_MspInit+0x290>)
 800446c:	f001 fd94 	bl	8005f98 <HAL_DMA_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004476:	f7ff fabd 	bl	80039f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a58      	ldr	r2, [pc, #352]	; (80045e0 <HAL_UART_MspInit+0x290>)
 800447e:	635a      	str	r2, [r3, #52]	; 0x34
 8004480:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <HAL_UART_MspInit+0x290>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004486:	2200      	movs	r2, #0
 8004488:	2100      	movs	r1, #0
 800448a:	2027      	movs	r0, #39	; 0x27
 800448c:	f001 fd31 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004490:	2027      	movs	r0, #39	; 0x27
 8004492:	f001 fd4a 	bl	8005f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004496:	e095      	b.n	80045c4 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART6)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a52      	ldr	r2, [pc, #328]	; (80045e8 <HAL_UART_MspInit+0x298>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f040 8090 	bne.w	80045c4 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	4b49      	ldr	r3, [pc, #292]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	4a48      	ldr	r2, [pc, #288]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80044ae:	f043 0320 	orr.w	r3, r3, #32
 80044b2:	6453      	str	r3, [r2, #68]	; 0x44
 80044b4:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	4b42      	ldr	r3, [pc, #264]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a41      	ldr	r2, [pc, #260]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	6313      	str	r3, [r2, #48]	; 0x30
 80044d0:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_UART_MspInit+0x280>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044dc:	23c0      	movs	r3, #192	; 0xc0
 80044de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e0:	2302      	movs	r3, #2
 80044e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e8:	2303      	movs	r3, #3
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80044ec:	2308      	movs	r3, #8
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	4619      	mov	r1, r3
 80044f6:	483d      	ldr	r0, [pc, #244]	; (80045ec <HAL_UART_MspInit+0x29c>)
 80044f8:	f002 f950 	bl	800679c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80044fc:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 80044fe:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <HAL_UART_MspInit+0x2a4>)
 8004500:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004504:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004508:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004510:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004516:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800451c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800451e:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004520:	2200      	movs	r2, #0
 8004522:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004526:	2200      	movs	r2, #0
 8004528:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800452a:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 800452c:	2200      	movs	r2, #0
 800452e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004530:	4b2f      	ldr	r3, [pc, #188]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004532:	2200      	movs	r2, #0
 8004534:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004536:	4b2e      	ldr	r3, [pc, #184]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004538:	2200      	movs	r2, #0
 800453a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800453c:	482c      	ldr	r0, [pc, #176]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 800453e:	f001 fd2b 	bl	8005f98 <HAL_DMA_Init>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8004548:	f7ff fa54 	bl	80039f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a28      	ldr	r2, [pc, #160]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
 8004552:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <HAL_UART_MspInit+0x2a0>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004558:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 800455a:	4a28      	ldr	r2, [pc, #160]	; (80045fc <HAL_UART_MspInit+0x2ac>)
 800455c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 8004560:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004564:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800456c:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 800456e:	2200      	movs	r2, #0
 8004570:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004572:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 8004574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004578:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 800457c:	2200      	movs	r2, #0
 800457e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 8004582:	2200      	movs	r2, #0
 8004584:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 8004588:	2200      	movs	r2, #0
 800458a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 800458e:	2200      	movs	r2, #0
 8004590:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 8004594:	2200      	movs	r2, #0
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004598:	4817      	ldr	r0, [pc, #92]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 800459a:	f001 fcfd 	bl	8005f98 <HAL_DMA_Init>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80045a4:	f7ff fa26 	bl	80039f4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34
 80045ae:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_UART_MspInit+0x2a8>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80045b4:	2200      	movs	r2, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	2047      	movs	r0, #71	; 0x47
 80045ba:	f001 fc9a 	bl	8005ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80045be:	2047      	movs	r0, #71	; 0x47
 80045c0:	f001 fcb3 	bl	8005f2a <HAL_NVIC_EnableIRQ>
}
 80045c4:	bf00      	nop
 80045c6:	3730      	adds	r7, #48	; 0x30
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40004800 	.word	0x40004800
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40020c00 	.word	0x40020c00
 80045d8:	200006b0 	.word	0x200006b0
 80045dc:	40026028 	.word	0x40026028
 80045e0:	20000754 	.word	0x20000754
 80045e4:	40026058 	.word	0x40026058
 80045e8:	40011400 	.word	0x40011400
 80045ec:	40020800 	.word	0x40020800
 80045f0:	20000650 	.word	0x20000650
 80045f4:	40026428 	.word	0x40026428
 80045f8:	200007b4 	.word	0x200007b4
 80045fc:	400264a0 	.word	0x400264a0

08004600 <joystick_Init>:
static const float JoyTurnAngleDeadzone = 0.2;

static const float JoyLeftTurnAngle = 3.142;
static const float JoyRightTurnAngle = 0;

void joystick_Init(void){
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8004604:	2228      	movs	r2, #40	; 0x28
 8004606:	2100      	movs	r1, #0
 8004608:	4802      	ldr	r0, [pc, #8]	; (8004614 <joystick_Init+0x14>)
 800460a:	f006 fb05 	bl	800ac18 <memset>
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000230 	.word	0x20000230

08004618 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8004618:	b5b0      	push	{r4, r5, r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <joystickCalculatePos+0x88>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2205      	movs	r2, #5
 8004624:	4293      	cmp	r3, r2
 8004626:	d102      	bne.n	800462e <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <joystickCalculatePos+0x88>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <joystickCalculatePos+0x8c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	da05      	bge.n	8004642 <joystickCalculatePos+0x2a>
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <joystickCalculatePos+0x8c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800463e:	4413      	add	r3, r2
 8004640:	e004      	b.n	800464c <joystickCalculatePos+0x34>
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <joystickCalculatePos+0x8c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <joystickCalculatePos+0x8c>)
 800464e:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <joystickCalculatePos+0x90>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	dd05      	ble.n	8004664 <joystickCalculatePos+0x4c>
 8004658:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800465c:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <joystickCalculatePos+0x90>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	e005      	b.n	8004670 <joystickCalculatePos+0x58>
 8004664:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <joystickCalculatePos+0x90>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	425b      	negs	r3, r3
 800466a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	4a0d      	ldr	r2, [pc, #52]	; (80046a8 <joystickCalculatePos+0x90>)
 8004672:	6013      	str	r3, [r2, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <joystickCalculatePos+0x88>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <joystickCalculatePos+0x8c>)
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	490b      	ldr	r1, [pc, #44]	; (80046ac <joystickCalculatePos+0x94>)
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <joystickCalculatePos+0x88>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <joystickCalculatePos+0x90>)
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	4908      	ldr	r1, [pc, #32]	; (80046ac <joystickCalculatePos+0x94>)
 800468c:	3305      	adds	r3, #5
 800468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	e019      	b.n	80046d4 <joystickCalculatePos+0xbc>
 80046a0:	20000258 	.word	0x20000258
 80046a4:	20000528 	.word	0x20000528
 80046a8:	20000420 	.word	0x20000420
 80046ac:	20000230 	.word	0x20000230
  {
    sum_x += joyPosBuffer[0][i];
 80046b0:	4acf      	ldr	r2, [pc, #828]	; (80049f0 <joystickCalculatePos+0x3d8>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 80046be:	4acc      	ldr	r2, [pc, #816]	; (80049f0 <joystickCalculatePos+0x3d8>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3305      	adds	r3, #5
 80046c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	4413      	add	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3301      	adds	r3, #1
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	2205      	movs	r2, #5
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4293      	cmp	r3, r2
 80046da:	dbe9      	blt.n	80046b0 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 80046dc:	2205      	movs	r2, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80046e4:	b21a      	sxth	r2, r3
 80046e6:	4bc3      	ldr	r3, [pc, #780]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80046e8:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 80046ea:	2205      	movs	r2, #5
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80046f2:	b21a      	sxth	r2, r3
 80046f4:	4bbf      	ldr	r3, [pc, #764]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80046f6:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 80046f8:	4bbe      	ldr	r3, [pc, #760]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80046fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fb fec8 	bl	8000494 <__aeabi_i2d>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 80049e0 <joystickCalculatePos+0x3c8>
 800470c:	ec43 2b10 	vmov	d0, r2, r3
 8004710:	f006 fd16 	bl	800b140 <pow>
 8004714:	ec55 4b10 	vmov	r4, r5, d0
 8004718:	4bb6      	ldr	r3, [pc, #728]	; (80049f4 <joystickCalculatePos+0x3dc>)
 800471a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fb feb8 	bl	8000494 <__aeabi_i2d>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	ed9f 1bad 	vldr	d1, [pc, #692]	; 80049e0 <joystickCalculatePos+0x3c8>
 800472c:	ec43 2b10 	vmov	d0, r2, r3
 8004730:	f006 fd06 	bl	800b140 <pow>
 8004734:	ec53 2b10 	vmov	r2, r3, d0
 8004738:	4620      	mov	r0, r4
 800473a:	4629      	mov	r1, r5
 800473c:	f7fb fd5e 	bl	80001fc <__adddf3>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	ec43 2b17 	vmov	d7, r2, r3
 8004748:	eeb0 0a47 	vmov.f32	s0, s14
 800474c:	eef0 0a67 	vmov.f32	s1, s15
 8004750:	f006 fda4 	bl	800b29c <sqrt>
 8004754:	ec53 2b10 	vmov	r2, r3, d0
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f7fc f9fc 	bl	8000b58 <__aeabi_d2f>
 8004760:	4603      	mov	r3, r0
 8004762:	4aa4      	ldr	r2, [pc, #656]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004764:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 8004766:	4ba3      	ldr	r3, [pc, #652]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004768:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fb fe91 	bl	8000494 <__aeabi_i2d>
 8004772:	4604      	mov	r4, r0
 8004774:	460d      	mov	r5, r1
 8004776:	4b9f      	ldr	r3, [pc, #636]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fb fe89 	bl	8000494 <__aeabi_i2d>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	ec43 2b11 	vmov	d1, r2, r3
 800478a:	ec45 4b10 	vmov	d0, r4, r5
 800478e:	f006 fcd5 	bl	800b13c <atan2>
 8004792:	ec53 2b10 	vmov	r2, r3, d0
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f7fc f9dd 	bl	8000b58 <__aeabi_d2f>
 800479e:	4603      	mov	r3, r0
 80047a0:	4a94      	ldr	r2, [pc, #592]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80047a2:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 80047a4:	4b93      	ldr	r3, [pc, #588]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80047a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80047aa:	eddf 7a93 	vldr	s15, [pc, #588]	; 80049f8 <joystickCalculatePos+0x3e0>
 80047ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ba:	dd06      	ble.n	80047ca <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 80047bc:	eddf 7a8e 	vldr	s15, [pc, #568]	; 80049f8 <joystickCalculatePos+0x3e0>
 80047c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c4:	4b8b      	ldr	r3, [pc, #556]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80047c6:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 80047ca:	4b8a      	ldr	r3, [pc, #552]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80047cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80047d0:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80049fc <joystickCalculatePos+0x3e4>
 80047d4:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8004a00 <joystickCalculatePos+0x3e8>
 80047d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e4:	dd10      	ble.n	8004808 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 80047e6:	4b83      	ldr	r3, [pc, #524]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80047e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80047ec:	eddf 6a83 	vldr	s13, [pc, #524]	; 80049fc <joystickCalculatePos+0x3e4>
 80047f0:	eddf 7a83 	vldr	s15, [pc, #524]	; 8004a00 <joystickCalculatePos+0x3e8>
 80047f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 80047f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004800:	d502      	bpl.n	8004808 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 8004802:	4a80      	ldr	r2, [pc, #512]	; (8004a04 <joystickCalculatePos+0x3ec>)
 8004804:	4b7b      	ldr	r3, [pc, #492]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004806:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8004808:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <joystickCalculatePos+0x3dc>)
 800480a:	ed93 7a02 	vldr	s14, [r3, #8]
 800480e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80049fc <joystickCalculatePos+0x3e4>
 8004812:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8004a00 <joystickCalculatePos+0x3e8>
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef1 7a67 	vneg.f32	s15, s15
 800481e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004826:	dd16      	ble.n	8004856 <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 8004828:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <joystickCalculatePos+0x3dc>)
 800482a:	ed93 7a02 	vldr	s14, [r3, #8]
 800482e:	eddf 6a73 	vldr	s13, [pc, #460]	; 80049fc <joystickCalculatePos+0x3e4>
 8004832:	eddf 7a73 	vldr	s15, [pc, #460]	; 8004a00 <joystickCalculatePos+0x3e8>
 8004836:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800483a:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 800483e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	d506      	bpl.n	8004856 <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 8004848:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80049fc <joystickCalculatePos+0x3e4>
 800484c:	eef1 7a67 	vneg.f32	s15, s15
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004852:	edc3 7a02 	vstr	s15, [r3, #8]

  // filter joystick right turn deadzone
	if (hJoystick.angle > JoyRightTurnAngle - JoyTurnAngleDeadzone &&
 8004856:	4b67      	ldr	r3, [pc, #412]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004858:	ed93 7a02 	vldr	s14, [r3, #8]
 800485c:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8004a08 <joystickCalculatePos+0x3f0>
 8004860:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8004a0c <joystickCalculatePos+0x3f4>
 8004864:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	dd11      	ble.n	8004896 <joystickCalculatePos+0x27e>
		hJoystick.angle < JoyRightTurnAngle + JoyTurnAngleDeadzone)
 8004872:	4b60      	ldr	r3, [pc, #384]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004874:	ed93 7a02 	vldr	s14, [r3, #8]
 8004878:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004a08 <joystickCalculatePos+0x3f0>
 800487c:	eddf 7a63 	vldr	s15, [pc, #396]	; 8004a0c <joystickCalculatePos+0x3f4>
 8004880:	ee76 7aa7 	vadd.f32	s15, s13, s15
	if (hJoystick.angle > JoyRightTurnAngle - JoyTurnAngleDeadzone &&
 8004884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488c:	d503      	bpl.n	8004896 <joystickCalculatePos+0x27e>
	  hJoystick.angle = JoyRightTurnAngle;
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	4b58      	ldr	r3, [pc, #352]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004894:	609a      	str	r2, [r3, #8]
  // filter joystick left turn deadzone
    if (hJoystick.angle > JoyLeftTurnAngle - JoyTurnAngleDeadzone ||
 8004896:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004898:	ed93 7a02 	vldr	s14, [r3, #8]
 800489c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8004a10 <joystickCalculatePos+0x3f8>
 80048a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004a0c <joystickCalculatePos+0x3f4>
 80048a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	dc0d      	bgt.n	80048ce <joystickCalculatePos+0x2b6>
        hJoystick.angle < -JoyLeftTurnAngle + JoyTurnAngleDeadzone)
 80048b2:	4b50      	ldr	r3, [pc, #320]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80048b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80048b8:	eddf 6a54 	vldr	s13, [pc, #336]	; 8004a0c <joystickCalculatePos+0x3f4>
 80048bc:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004a10 <joystickCalculatePos+0x3f8>
 80048c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
    if (hJoystick.angle > JoyLeftTurnAngle - JoyTurnAngleDeadzone ||
 80048c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	d502      	bpl.n	80048d4 <joystickCalculatePos+0x2bc>
      hJoystick.angle = JoyLeftTurnAngle;
 80048ce:	4a51      	ldr	r2, [pc, #324]	; (8004a14 <joystickCalculatePos+0x3fc>)
 80048d0:	4b48      	ldr	r3, [pc, #288]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80048d2:	609a      	str	r2, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80048d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80048da:	eddf 7a47 	vldr	s15, [pc, #284]	; 80049f8 <joystickCalculatePos+0x3e0>
 80048de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048e6:	ee16 0a90 	vmov	r0, s13
 80048ea:	f7fb fde5 	bl	80004b8 <__aeabi_f2d>
 80048ee:	4604      	mov	r4, r0
 80048f0:	460d      	mov	r5, r1
 80048f2:	4b40      	ldr	r3, [pc, #256]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fb fdde 	bl	80004b8 <__aeabi_f2d>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	ec43 2b10 	vmov	d0, r2, r3
 8004904:	f006 fb8c 	bl	800b020 <sin>
 8004908:	ec53 2b10 	vmov	r2, r3, d0
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fb fe2a 	bl	8000568 <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f7fc f91c 	bl	8000b58 <__aeabi_d2f>
 8004920:	4603      	mov	r3, r0
 8004922:	4a34      	ldr	r2, [pc, #208]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004924:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8004926:	4b33      	ldr	r3, [pc, #204]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004928:	ed93 7a01 	vldr	s14, [r3, #4]
 800492c:	eddf 7a32 	vldr	s15, [pc, #200]	; 80049f8 <joystickCalculatePos+0x3e0>
 8004930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004934:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004938:	ee16 0a90 	vmov	r0, s13
 800493c:	f7fb fdbc 	bl	80004b8 <__aeabi_f2d>
 8004940:	4604      	mov	r4, r0
 8004942:	460d      	mov	r5, r1
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fb fdb5 	bl	80004b8 <__aeabi_f2d>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	ec43 2b10 	vmov	d0, r2, r3
 8004956:	f006 fb07 	bl	800af68 <cos>
 800495a:	ec53 2b10 	vmov	r2, r3, d0
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	f7fb fe01 	bl	8000568 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f7fc f8f3 	bl	8000b58 <__aeabi_d2f>
 8004972:	4603      	mov	r3, r0
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <joystickCalculatePos+0x3dc>)
 8004976:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <joystickCalculatePos+0x3dc>)
 800497a:	edd3 7a03 	vldr	s15, [r3, #12]
 800497e:	eef0 7ae7 	vabs.f32	s15, s15
 8004982:	ee17 0a90 	vmov	r0, s15
 8004986:	f7fb fd97 	bl	80004b8 <__aeabi_f2d>
 800498a:	a317      	add	r3, pc, #92	; (adr r3, 80049e8 <joystickCalculatePos+0x3d0>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f7fc f85c 	bl	8000a4c <__aeabi_dcmplt>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <joystickCalculatePos+0x38a>
    hJoystick.linear = 0;
 800499a:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <joystickCalculatePos+0x3dc>)
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80049a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80049a8:	eef0 7ae7 	vabs.f32	s15, s15
 80049ac:	ee17 0a90 	vmov	r0, s15
 80049b0:	f7fb fd82 	bl	80004b8 <__aeabi_f2d>
 80049b4:	a30c      	add	r3, pc, #48	; (adr r3, 80049e8 <joystickCalculatePos+0x3d0>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f7fc f847 	bl	8000a4c <__aeabi_dcmplt>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <joystickCalculatePos+0x3b4>
    hJoystick.angular = 0;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <joystickCalculatePos+0x3dc>)
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <joystickCalculatePos+0x400>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <joystickCalculatePos+0x400>)
 80049d4:	6013      	str	r3, [r2, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bdb0      	pop	{r4, r5, r7, pc}
 80049de:	bf00      	nop
 80049e0:	00000000 	.word	0x00000000
 80049e4:	40000000 	.word	0x40000000
 80049e8:	9999999a 	.word	0x9999999a
 80049ec:	3fa99999 	.word	0x3fa99999
 80049f0:	20000230 	.word	0x20000230
 80049f4:	20000858 	.word	0x20000858
 80049f8:	00004650 	.word	0x00004650
 80049fc:	3fc8f5c3 	.word	0x3fc8f5c3
 8004a00:	3e99999a 	.word	0x3e99999a
 8004a04:	3fc8f5c3 	.word	0x3fc8f5c3
 8004a08:	00000000 	.word	0x00000000
 8004a0c:	3e4ccccd 	.word	0x3e4ccccd
 8004a10:	40491687 	.word	0x40491687
 8004a14:	40491687 	.word	0x40491687
 8004a18:	20000258 	.word	0x20000258

08004a1c <wheel_Control>:
  wheel->max_linear_speed = max_lin_speed;
  wheel->start_from_stationary = false;
}

void wheel_Control(WheelSpeed* wheel)
{
 8004a1c:	b5b0      	push	{r4, r5, r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 25)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b18      	cmp	r3, #24
 8004a2a:	dc05      	bgt.n	8004a38 <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]
    return;
 8004a36:	e207      	b.n	8004e48 <wheel_Control+0x42c>
  }

  joystickCalculatePos();
 8004a38:	f7ff fdee 	bl	8004618 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fa07 	bl	8004e50 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	d10a      	bne.n	8004a68 <wheel_Control+0x4c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a60:	d102      	bne.n	8004a68 <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 8004a68:	4bc8      	ldr	r3, [pc, #800]	; (8004d8c <wheel_Control+0x370>)
 8004a6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a6e:	eddf 7ac8 	vldr	s15, [pc, #800]	; 8004d90 <wheel_Control+0x374>
 8004a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7e:	f340 8107 	ble.w	8004c90 <wheel_Control+0x274>
  {
    float left_speed_step = wheel->left_speed_step;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	617b      	str	r3, [r7, #20]
    float right_speed_step = wheel->right_speed_step;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	613b      	str	r3, [r7, #16]

    if (wheel->start_from_stationary)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7f1b      	ldrb	r3, [r3, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d072      	beq.n	8004b7c <wheel_Control+0x160>
    {
    	//deadzone 25, speed up initial speed
      left_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	edd3 7a00 	vldr	s15, [r3]
 8004a9c:	eef0 7ae7 	vabs.f32	s15, s15
 8004aa0:	ee17 0a90 	vmov	r0, s15
 8004aa4:	f7fb fd08 	bl	80004b8 <__aeabi_f2d>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	460d      	mov	r5, r1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fb fd01 	bl	80004b8 <__aeabi_f2d>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7fb fe7d 	bl	80007bc <__aeabi_ddiv>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	4bb1      	ldr	r3, [pc, #708]	; (8004d94 <wheel_Control+0x378>)
 8004ad0:	f7fb fb94 	bl	80001fc <__adddf3>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7fc f83c 	bl	8000b58 <__aeabi_d2f>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	617b      	str	r3, [r7, #20]
      right_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	edd3 7a00 	vldr	s15, [r3]
 8004aea:	eef0 7ae7 	vabs.f32	s15, s15
 8004aee:	ee17 0a90 	vmov	r0, s15
 8004af2:	f7fb fce1 	bl	80004b8 <__aeabi_f2d>
 8004af6:	4604      	mov	r4, r0
 8004af8:	460d      	mov	r5, r1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fcda 	bl	80004b8 <__aeabi_f2d>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	f7fb fe56 	bl	80007bc <__aeabi_ddiv>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	4b9d      	ldr	r3, [pc, #628]	; (8004d94 <wheel_Control+0x378>)
 8004b1e:	f7fb fb6d 	bl	80001fc <__adddf3>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f7fc f815 	bl	8000b58 <__aeabi_d2f>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	613b      	str	r3, [r7, #16]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b38:	eeb0 7ae7 	vabs.f32	s14, s15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b42:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	dd13      	ble.n	8004b7c <wheel_Control+0x160>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b5a:	eeb0 7ae7 	vabs.f32	s14, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b64:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004b68:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8004b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	dd02      	ble.n	8004b7c <wheel_Control+0x160>
      {
	  wheel->start_from_stationary = false;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
      }
    }

    if (wheel->cur_l/wheel->pre_l < 0)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	edd3 6a00 	vldr	s13, [r3]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	d501      	bpl.n	8004b9a <wheel_Control+0x17e>
    	left_speed_step = 50;
 8004b96:	4b80      	ldr	r3, [pc, #512]	; (8004d98 <wheel_Control+0x37c>)
 8004b98:	617b      	str	r3, [r7, #20]
    if (wheel->cur_r/wheel->pre_r < 0)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	d501      	bpl.n	8004bb8 <wheel_Control+0x19c>
        	right_speed_step = 50;
 8004bb4:	4b78      	ldr	r3, [pc, #480]	; (8004d98 <wheel_Control+0x37c>)
 8004bb6:	613b      	str	r3, [r7, #16]

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	ed93 7a00 	vldr	s14, [r3]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d50a      	bpl.n	8004bec <wheel_Control+0x1d0>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	edc3 7a00 	vstr	s15, [r3]
 8004bea:	e01a      	b.n	8004c22 <wheel_Control+0x206>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	ed93 7a00 	vldr	s14, [r3]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c00:	eef1 7a67 	vneg.f32	s15, s15
 8004c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0c:	d509      	bpl.n	8004c22 <wheel_Control+0x206>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	d50a      	bpl.n	8004c56 <wheel_Control+0x23a>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	ed93 7a03 	vldr	s14, [r3, #12]
 8004c46:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c54:	e0a8      	b.n	8004da8 <wheel_Control+0x38c>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c66:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c6a:	eef1 7a67 	vneg.f32	s15, s15
 8004c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	f140 8097 	bpl.w	8004da8 <wheel_Control+0x38c>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004c8e:	e08b      	b.n	8004da8 <wheel_Control+0x38c>
//      wheel->cur_r = 0;

//    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
//    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
//
    float left_speed_step = 30;
 8004c90:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <wheel_Control+0x380>)
 8004c92:	60fb      	str	r3, [r7, #12]
    float right_speed_step = 30;
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <wheel_Control+0x380>)
 8004c96:	60bb      	str	r3, [r7, #8]
//      wheel->cur_r = wheel->pre_r - right_speed_step;
//    else if (wheel->cur_r < -right_speed_step)
//      wheel->cur_r = wheel->pre_r + right_speed_step;
//    else
//      wheel->cur_r = 0;
    if (wheel->cur_l/wheel->pre_l < 0)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	edd3 6a00 	vldr	s13, [r3]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	d501      	bpl.n	8004cb6 <wheel_Control+0x29a>
    	left_speed_step = 50;
 8004cb2:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <wheel_Control+0x37c>)
 8004cb4:	60fb      	str	r3, [r7, #12]
    if (wheel->cur_r/wheel->pre_r < 0)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d501      	bpl.n	8004cd4 <wheel_Control+0x2b8>
    	right_speed_step = 50;
 8004cd0:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <wheel_Control+0x37c>)
 8004cd2:	60bb      	str	r3, [r7, #8]

    //Latency when sign change
    if (wheel->pre_l > left_speed_step)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cda:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	d50a      	bpl.n	8004cfe <wheel_Control+0x2e2>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	ed93 7a02 	vldr	s14, [r3, #8]
 8004cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	edc3 7a00 	vstr	s15, [r3]
 8004cfc:	e01a      	b.n	8004d34 <wheel_Control+0x318>
    else if (wheel->pre_l < -left_speed_step)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d08:	eef1 7a67 	vneg.f32	s15, s15
 8004d0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	d50a      	bpl.n	8004d2c <wheel_Control+0x310>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	edc3 7a00 	vstr	s15, [r3]
 8004d2a:	e003      	b.n	8004d34 <wheel_Control+0x318>
    else
      wheel->cur_l = 0;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
    
    if (wheel->pre_r > right_speed_step)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d46:	d50a      	bpl.n	8004d5e <wheel_Control+0x342>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d5c:	e024      	b.n	8004da8 <wheel_Control+0x38c>
    else if (wheel->pre_r < -right_speed_step)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d68:	eef1 7a67 	vneg.f32	s15, s15
 8004d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d74:	d514      	bpl.n	8004da0 <wheel_Control+0x384>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	ed93 7a03 	vldr	s14, [r3, #12]
 8004d7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d8a:	e00d      	b.n	8004da8 <wheel_Control+0x38c>
 8004d8c:	20000858 	.word	0x20000858
 8004d90:	00000bb8 	.word	0x00000bb8
 8004d94:	40390000 	.word	0x40390000
 8004d98:	42480000 	.word	0x42480000
 8004d9c:	41f00000 	.word	0x41f00000
    else
      wheel->cur_r = 0;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]



  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	ed93 7a00 	vldr	s14, [r3]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	edd3 7a05 	vldr	s15, [r3, #20]
 8004db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbc:	dd03      	ble.n	8004dc6 <wheel_Control+0x3aa>
    wheel->cur_l = wheel->max_linear_speed;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	edd3 7a05 	vldr	s15, [r3, #20]
 8004dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	dd03      	ble.n	8004de4 <wheel_Control+0x3c8>
    wheel->cur_r = wheel->max_linear_speed;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	ed93 7a00 	vldr	s14, [r3]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	edd3 7a05 	vldr	s15, [r3, #20]
 8004df0:	eef1 7a67 	vneg.f32	s15, s15
 8004df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d507      	bpl.n	8004e0e <wheel_Control+0x3f2>
    wheel->cur_l = -wheel->max_linear_speed;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	edd3 7a05 	vldr	s15, [r3, #20]
 8004e04:	eef1 7a67 	vneg.f32	s15, s15
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	edd3 7a05 	vldr	s15, [r3, #20]
 8004e1a:	eef1 7a67 	vneg.f32	s15, s15
 8004e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	d507      	bpl.n	8004e38 <wheel_Control+0x41c>
    wheel->cur_r = -wheel->max_linear_speed;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004e2e:	eef1 7a67 	vneg.f32	s15, s15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]
  
}
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4e:	bf00      	nop

08004e50 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e5e:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <wheelCalculateSpeed+0xa4>)
 8004e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e68:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <wheelCalculateSpeed+0xa4>)
 8004e74:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7c:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8004e80:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8004e92:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough50
  // direct step to 0 if speed is small enough50
  if(fabs(wheel->cur_l) < 25)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	edd3 7a00 	vldr	s15, [r3]
 8004eaa:	eef0 7ae7 	vabs.f32	s15, s15
 8004eae:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	d503      	bpl.n	8004ec4 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 25)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eca:	eef0 7ae7 	vabs.f32	s15, s15
 8004ece:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	d400      	bmi.n	8004ede <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004edc:	e003      	b.n	8004ee6 <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000858 	.word	0x20000858

08004ef8 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f30 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004efc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004efe:	e003      	b.n	8004f08 <LoopCopyDataInit>

08004f00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f06:	3104      	adds	r1, #4

08004f08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f08:	480b      	ldr	r0, [pc, #44]	; (8004f38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f10:	d3f6      	bcc.n	8004f00 <CopyDataInit>
  ldr  r2, =_sbss
 8004f12:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f14:	e002      	b.n	8004f1c <LoopFillZerobss>

08004f16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f18:	f842 3b04 	str.w	r3, [r2], #4

08004f1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f20:	d3f9      	bcc.n	8004f16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f22:	f7fe fecb 	bl	8003cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f26:	f005 fe53 	bl	800abd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f2a:	f7fd fa2d 	bl	8002388 <main>
  bx  lr    
 8004f2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004f30:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004f34:	0800d8e0 	.word	0x0800d8e0
  ldr  r0, =_sdata
 8004f38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f3c:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8004f40:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8004f44:	20000870 	.word	0x20000870

08004f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f48:	e7fe      	b.n	8004f48 <ADC_IRQHandler>
	...

08004f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_Init+0x40>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0d      	ldr	r2, [pc, #52]	; (8004f8c <HAL_Init+0x40>)
 8004f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_Init+0x40>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_Init+0x40>)
 8004f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f68:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_Init+0x40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <HAL_Init+0x40>)
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f74:	2003      	movs	r0, #3
 8004f76:	f000 ffb1 	bl	8005edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f000 f808 	bl	8004f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f80:	f7fe fdd0 	bl	8003b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023c00 	.word	0x40023c00

08004f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f98:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_InitTick+0x54>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_InitTick+0x58>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 ffc9 	bl	8005f46 <HAL_SYSTICK_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e00e      	b.n	8004fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b0f      	cmp	r3, #15
 8004fc2:	d80a      	bhi.n	8004fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fcc:	f000 ff91 	bl	8005ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fd0:	4a06      	ldr	r2, [pc, #24]	; (8004fec <HAL_InitTick+0x5c>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	2000012c 	.word	0x2000012c
 8004fe8:	20000134 	.word	0x20000134
 8004fec:	20000130 	.word	0x20000130

08004ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_IncTick+0x20>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_IncTick+0x24>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4413      	add	r3, r2
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_IncTick+0x24>)
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000134 	.word	0x20000134
 8005014:	2000086c 	.word	0x2000086c

08005018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return uwTick;
 800501c:	4b03      	ldr	r3, [pc, #12]	; (800502c <HAL_GetTick+0x14>)
 800501e:	681b      	ldr	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	2000086c 	.word	0x2000086c

08005030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005038:	f7ff ffee 	bl	8005018 <HAL_GetTick>
 800503c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005048:	d005      	beq.n	8005056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <HAL_Delay+0x44>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4413      	add	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005056:	bf00      	nop
 8005058:	f7ff ffde 	bl	8005018 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	429a      	cmp	r2, r3
 8005066:	d8f7      	bhi.n	8005058 <HAL_Delay+0x28>
  {
  }
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20000134 	.word	0x20000134

08005078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0ed      	b.n	8005266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fc fe72 	bl	8001d80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050ac:	f7ff ffb4 	bl	8005018 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050b2:	e012      	b.n	80050da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b4:	f7ff ffb0 	bl	8005018 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b0a      	cmp	r3, #10
 80050c0:	d90b      	bls.n	80050da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2205      	movs	r2, #5
 80050d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0c5      	b.n	8005266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0e5      	beq.n	80050b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0202 	bic.w	r2, r2, #2
 80050f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f8:	f7ff ff8e 	bl	8005018 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80050fe:	e012      	b.n	8005126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005100:	f7ff ff8a 	bl	8005018 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b0a      	cmp	r3, #10
 800510c:	d90b      	bls.n	8005126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2205      	movs	r2, #5
 800511e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e09f      	b.n	8005266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7e1b      	ldrb	r3, [r3, #24]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d108      	bne.n	800514e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e007      	b.n	800515e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7e5b      	ldrb	r3, [r3, #25]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d108      	bne.n	8005178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e007      	b.n	8005188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7e9b      	ldrb	r3, [r3, #26]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d108      	bne.n	80051a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0220 	orr.w	r2, r2, #32
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e007      	b.n	80051b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0220 	bic.w	r2, r2, #32
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7edb      	ldrb	r3, [r3, #27]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d108      	bne.n	80051cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0210 	bic.w	r2, r2, #16
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0210 	orr.w	r2, r2, #16
 80051da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	7f1b      	ldrb	r3, [r3, #28]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d108      	bne.n	80051f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0208 	orr.w	r2, r2, #8
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e007      	b.n	8005206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0208 	bic.w	r2, r2, #8
 8005204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	7f5b      	ldrb	r3, [r3, #29]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d108      	bne.n	8005220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0204 	orr.w	r2, r2, #4
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	ea42 0103 	orr.w	r1, r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005286:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d003      	beq.n	8005296 <HAL_CAN_ConfigFilter+0x26>
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	2b02      	cmp	r3, #2
 8005292:	f040 80be 	bne.w	8005412 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005296:	4b65      	ldr	r3, [pc, #404]	; (800542c <HAL_CAN_ConfigFilter+0x1bc>)
 8005298:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052a0:	f043 0201 	orr.w	r2, r3, #1
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	431a      	orrs	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2201      	movs	r2, #1
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	401a      	ands	r2, r3
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d123      	bne.n	8005340 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800531a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3248      	adds	r2, #72	; 0x48
 8005320:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005334:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005336:	6979      	ldr	r1, [r7, #20]
 8005338:	3348      	adds	r3, #72	; 0x48
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d122      	bne.n	800538e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	431a      	orrs	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005368:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3248      	adds	r2, #72	; 0x48
 800536e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005382:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	3348      	adds	r3, #72	; 0x48
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	43db      	mvns	r3, r3
 80053a0:	401a      	ands	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80053a8:	e007      	b.n	80053ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	401a      	ands	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80053d4:	e007      	b.n	80053e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	431a      	orrs	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d107      	bne.n	80053fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005404:	f023 0201 	bic.w	r2, r3, #1
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e006      	b.n	8005420 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40006400 	.word	0x40006400

08005430 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d12e      	bne.n	80054a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800545c:	f7ff fddc 	bl	8005018 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005462:	e012      	b.n	800548a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005464:	f7ff fdd8 	bl	8005018 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b0a      	cmp	r3, #10
 8005470:	d90b      	bls.n	800548a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2205      	movs	r2, #5
 8005482:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e012      	b.n	80054b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e006      	b.n	80054b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80054d6:	7ffb      	ldrb	r3, [r7, #31]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d003      	beq.n	80054e4 <HAL_CAN_AddTxMessage+0x2c>
 80054dc:	7ffb      	ldrb	r3, [r7, #31]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	f040 80b8 	bne.w	8005654 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80a0 	beq.w	8005644 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	0e1b      	lsrs	r3, r3, #24
 8005508:	f003 0303 	and.w	r3, r3, #3
 800550c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d907      	bls.n	8005524 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e09e      	b.n	8005662 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005524:	2201      	movs	r2, #1
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	409a      	lsls	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	6809      	ldr	r1, [r1, #0]
 8005544:	431a      	orrs	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	3318      	adds	r3, #24
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	440b      	add	r3, r1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e00f      	b.n	8005572 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800555c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005566:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3318      	adds	r3, #24
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	440b      	add	r3, r1
 8005570:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	3318      	adds	r3, #24
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	440b      	add	r3, r1
 8005582:	3304      	adds	r3, #4
 8005584:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	7d1b      	ldrb	r3, [r3, #20]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d111      	bne.n	80055b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	3318      	adds	r3, #24
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	6811      	ldr	r1, [r2, #0]
 80055a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	3318      	adds	r3, #24
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	440b      	add	r3, r1
 80055ae:	3304      	adds	r3, #4
 80055b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3307      	adds	r3, #7
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	061a      	lsls	r2, r3, #24
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3306      	adds	r3, #6
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3305      	adds	r3, #5
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	4313      	orrs	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	3204      	adds	r2, #4
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	4610      	mov	r0, r2
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	6811      	ldr	r1, [r2, #0]
 80055da:	ea43 0200 	orr.w	r2, r3, r0
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	440b      	add	r3, r1
 80055e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80055e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3303      	adds	r3, #3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	061a      	lsls	r2, r3, #24
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3302      	adds	r3, #2
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3301      	adds	r3, #1
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	4313      	orrs	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	4610      	mov	r0, r2
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	6811      	ldr	r1, [r2, #0]
 8005610:	ea43 0200 	orr.w	r2, r3, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	440b      	add	r3, r1
 800561a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800561e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3318      	adds	r3, #24
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	4413      	add	r3, r2
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	f043 0201 	orr.w	r2, r3, #1
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3318      	adds	r3, #24
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	440b      	add	r3, r1
 800563e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e00e      	b.n	8005662 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e006      	b.n	8005662 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3724      	adds	r7, #36	; 0x24
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005682:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d003      	beq.n	8005692 <HAL_CAN_GetRxMessage+0x24>
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	2b02      	cmp	r3, #2
 800568e:	f040 80f3 	bne.w	8005878 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10e      	bne.n	80056b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d116      	bne.n	80056d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0e7      	b.n	8005886 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d107      	bne.n	80056d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0d8      	b.n	8005886 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	331b      	adds	r3, #27
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	4413      	add	r3, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0204 	and.w	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10c      	bne.n	800570c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	331b      	adds	r3, #27
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	4413      	add	r3, r2
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0d5b      	lsrs	r3, r3, #21
 8005702:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e00b      	b.n	8005724 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	331b      	adds	r3, #27
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4413      	add	r3, r2
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	08db      	lsrs	r3, r3, #3
 800571c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	331b      	adds	r3, #27
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	4413      	add	r3, r2
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0202 	and.w	r2, r3, #2
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	331b      	adds	r3, #27
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	4413      	add	r3, r2
 8005746:	3304      	adds	r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 020f 	and.w	r2, r3, #15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	331b      	adds	r3, #27
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	4413      	add	r3, r2
 800575e:	3304      	adds	r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	b2da      	uxtb	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	331b      	adds	r3, #27
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	4413      	add	r3, r2
 8005776:	3304      	adds	r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4413      	add	r3, r2
 800578c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	0a1a      	lsrs	r2, r3, #8
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	0c1a      	lsrs	r2, r3, #16
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	3302      	adds	r3, #2
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0e1a      	lsrs	r2, r3, #24
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	3303      	adds	r3, #3
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	3304      	adds	r3, #4
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	4413      	add	r3, r2
 8005808:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	0a1a      	lsrs	r2, r3, #8
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	3305      	adds	r3, #5
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	4413      	add	r3, r2
 8005822:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0c1a      	lsrs	r2, r3, #16
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	3306      	adds	r3, #6
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	4413      	add	r3, r2
 800583c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	0e1a      	lsrs	r2, r3, #24
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	3307      	adds	r3, #7
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d108      	bne.n	8005864 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0220 	orr.w	r2, r2, #32
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	e007      	b.n	8005874 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0220 	orr.w	r2, r2, #32
 8005872:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e006      	b.n	8005886 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d002      	beq.n	80058b0 <HAL_CAN_ActivateNotification+0x1e>
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d109      	bne.n	80058c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6959      	ldr	r1, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e006      	b.n	80058d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b08a      	sub	sp, #40	; 0x28
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d07c      	beq.n	8005a1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d023      	beq.n	8005976 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2201      	movs	r2, #1
 8005934:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f983 	bl	8005c4c <HAL_CAN_TxMailbox0CompleteCallback>
 8005946:	e016      	b.n	8005976 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	e00c      	b.n	8005976 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
 800596e:	e002      	b.n	8005976 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f989 	bl	8005c88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d024      	beq.n	80059ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005988:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f963 	bl	8005c60 <HAL_CAN_TxMailbox1CompleteCallback>
 800599a:	e016      	b.n	80059ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
 80059ae:	e00c      	b.n	80059ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
 80059c2:	e002      	b.n	80059ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f969 	bl	8005c9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d024      	beq.n	8005a1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f943 	bl	8005c74 <HAL_CAN_TxMailbox2CompleteCallback>
 80059ee:	e016      	b.n	8005a1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
 8005a02:	e00c      	b.n	8005a1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
 8005a16:	e002      	b.n	8005a1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f949 	bl	8005cb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f930 	bl	8005cc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7fd fb3f 	bl	8003100 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d006      	beq.n	8005ac8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2208      	movs	r2, #8
 8005ac0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f912 	bl	8005cec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0303 	and.w	r3, r3, #3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f8f9 	bl	8005cd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2210      	movs	r2, #16
 8005b00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8fc 	bl	8005d00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2208      	movs	r2, #8
 8005b22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8f5 	bl	8005d14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d07b      	beq.n	8005c2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d072      	beq.n	8005c24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	f043 0302 	orr.w	r3, r3, #2
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f043 0304 	orr.w	r3, r3, #4
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d043      	beq.n	8005c24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d03e      	beq.n	8005c24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bac:	2b60      	cmp	r3, #96	; 0x60
 8005bae:	d02b      	beq.n	8005c08 <HAL_CAN_IRQHandler+0x32a>
 8005bb0:	2b60      	cmp	r3, #96	; 0x60
 8005bb2:	d82e      	bhi.n	8005c12 <HAL_CAN_IRQHandler+0x334>
 8005bb4:	2b50      	cmp	r3, #80	; 0x50
 8005bb6:	d022      	beq.n	8005bfe <HAL_CAN_IRQHandler+0x320>
 8005bb8:	2b50      	cmp	r3, #80	; 0x50
 8005bba:	d82a      	bhi.n	8005c12 <HAL_CAN_IRQHandler+0x334>
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d019      	beq.n	8005bf4 <HAL_CAN_IRQHandler+0x316>
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d826      	bhi.n	8005c12 <HAL_CAN_IRQHandler+0x334>
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d010      	beq.n	8005bea <HAL_CAN_IRQHandler+0x30c>
 8005bc8:	2b30      	cmp	r3, #48	; 0x30
 8005bca:	d822      	bhi.n	8005c12 <HAL_CAN_IRQHandler+0x334>
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d002      	beq.n	8005bd6 <HAL_CAN_IRQHandler+0x2f8>
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	d005      	beq.n	8005be0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005bd4:	e01d      	b.n	8005c12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f043 0308 	orr.w	r3, r3, #8
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bde:	e019      	b.n	8005c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	f043 0310 	orr.w	r3, r3, #16
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005be8:	e014      	b.n	8005c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	f043 0320 	orr.w	r3, r3, #32
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bf2:	e00f      	b.n	8005c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bfc:	e00a      	b.n	8005c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c06:	e005      	b.n	8005c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c10:	e000      	b.n	8005c14 <HAL_CAN_IRQHandler+0x336>
            break;
 8005c12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f872 	bl	8005d28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c44:	bf00      	nop
 8005c46:	3728      	adds	r7, #40	; 0x28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <__NVIC_SetPriorityGrouping+0x44>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d6e:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <__NVIC_SetPriorityGrouping+0x44>)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	60d3      	str	r3, [r2, #12]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	e000ed00 	.word	0xe000ed00

08005d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <__NVIC_GetPriorityGrouping+0x18>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	0a1b      	lsrs	r3, r3, #8
 8005d8e:	f003 0307 	and.w	r3, r3, #7
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	e000ed00 	.word	0xe000ed00

08005da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	db0b      	blt.n	8005dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	f003 021f 	and.w	r2, r3, #31
 8005db8:	4907      	ldr	r1, [pc, #28]	; (8005dd8 <__NVIC_EnableIRQ+0x38>)
 8005dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	e000e100 	.word	0xe000e100

08005ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	4603      	mov	r3, r0
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	db0a      	blt.n	8005e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	490c      	ldr	r1, [pc, #48]	; (8005e28 <__NVIC_SetPriority+0x4c>)
 8005df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfa:	0112      	lsls	r2, r2, #4
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	440b      	add	r3, r1
 8005e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e04:	e00a      	b.n	8005e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	4908      	ldr	r1, [pc, #32]	; (8005e2c <__NVIC_SetPriority+0x50>)
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	3b04      	subs	r3, #4
 8005e14:	0112      	lsls	r2, r2, #4
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	440b      	add	r3, r1
 8005e1a:	761a      	strb	r2, [r3, #24]
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	e000e100 	.word	0xe000e100
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b089      	sub	sp, #36	; 0x24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f1c3 0307 	rsb	r3, r3, #7
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	bf28      	it	cs
 8005e4e:	2304      	movcs	r3, #4
 8005e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3304      	adds	r3, #4
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d902      	bls.n	8005e60 <NVIC_EncodePriority+0x30>
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	3b03      	subs	r3, #3
 8005e5e:	e000      	b.n	8005e62 <NVIC_EncodePriority+0x32>
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43da      	mvns	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	401a      	ands	r2, r3
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	43d9      	mvns	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e88:	4313      	orrs	r3, r2
         );
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3724      	adds	r7, #36	; 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ea8:	d301      	bcc.n	8005eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e00f      	b.n	8005ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eae:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <SysTick_Config+0x40>)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005eb6:	210f      	movs	r1, #15
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ebc:	f7ff ff8e 	bl	8005ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <SysTick_Config+0x40>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ec6:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <SysTick_Config+0x40>)
 8005ec8:	2207      	movs	r2, #7
 8005eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	e000e010 	.word	0xe000e010

08005edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff29 	bl	8005d3c <__NVIC_SetPriorityGrouping>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b086      	sub	sp, #24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	4603      	mov	r3, r0
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f04:	f7ff ff3e 	bl	8005d84 <__NVIC_GetPriorityGrouping>
 8005f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	6978      	ldr	r0, [r7, #20]
 8005f10:	f7ff ff8e 	bl	8005e30 <NVIC_EncodePriority>
 8005f14:	4602      	mov	r2, r0
 8005f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff ff5d 	bl	8005ddc <__NVIC_SetPriority>
}
 8005f22:	bf00      	nop
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	4603      	mov	r3, r0
 8005f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff31 	bl	8005da0 <__NVIC_EnableIRQ>
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff ffa2 	bl	8005e98 <SysTick_Config>
 8005f54:	4603      	mov	r3, r0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d106      	bne.n	8005f7c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005f6e:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f74:	f043 0304 	orr.w	r3, r3, #4
 8005f78:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8005f7a:	e005      	b.n	8005f88 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a04      	ldr	r2, [pc, #16]	; (8005f94 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005f82:	f023 0304 	bic.w	r3, r3, #4
 8005f86:	6013      	str	r3, [r2, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	e000e010 	.word	0xe000e010

08005f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005fa4:	f7ff f838 	bl	8005018 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e099      	b.n	80060e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0201 	bic.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fd4:	e00f      	b.n	8005ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fd6:	f7ff f81f 	bl	8005018 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b05      	cmp	r3, #5
 8005fe2:	d908      	bls.n	8005ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2203      	movs	r2, #3
 8005fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e078      	b.n	80060e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e8      	bne.n	8005fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4b38      	ldr	r3, [pc, #224]	; (80060f0 <HAL_DMA_Init+0x158>)
 8006010:	4013      	ands	r3, r2
 8006012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800602e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800603a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	2b04      	cmp	r3, #4
 800604e:	d107      	bne.n	8006060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006058:	4313      	orrs	r3, r2
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0307 	bic.w	r3, r3, #7
 8006076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	2b04      	cmp	r3, #4
 8006088:	d117      	bne.n	80060ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00e      	beq.n	80060ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fb01 	bl	80066a4 <DMA_CheckFifoParam>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2240      	movs	r2, #64	; 0x40
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80060b6:	2301      	movs	r3, #1
 80060b8:	e016      	b.n	80060e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fab8 	bl	8006638 <DMA_CalcBaseAndBitshift>
 80060c8:	4603      	mov	r3, r0
 80060ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	223f      	movs	r2, #63	; 0x3f
 80060d2:	409a      	lsls	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	f010803f 	.word	0xf010803f

080060f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_DMA_Start_IT+0x26>
 8006116:	2302      	movs	r3, #2
 8006118:	e040      	b.n	800619c <HAL_DMA_Start_IT+0xa8>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d12f      	bne.n	800618e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fa4a 	bl	80065dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	223f      	movs	r2, #63	; 0x3f
 800614e:	409a      	lsls	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0216 	orr.w	r2, r2, #22
 8006162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0208 	orr.w	r2, r2, #8
 800617a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e005      	b.n	800619a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80061b2:	f7fe ff31 	bl	8005018 <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d008      	beq.n	80061d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2280      	movs	r2, #128	; 0x80
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e052      	b.n	800627c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0216 	bic.w	r2, r2, #22
 80061e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_DMA_Abort+0x62>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0208 	bic.w	r2, r2, #8
 8006214:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006226:	e013      	b.n	8006250 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006228:	f7fe fef6 	bl	8005018 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b05      	cmp	r3, #5
 8006234:	d90c      	bls.n	8006250 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2203      	movs	r2, #3
 8006240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e015      	b.n	800627c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e4      	bne.n	8006228 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006262:	223f      	movs	r2, #63	; 0x3f
 8006264:	409a      	lsls	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2280      	movs	r2, #128	; 0x80
 800629c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e00c      	b.n	80062bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2205      	movs	r2, #5
 80062a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062d4:	4b92      	ldr	r3, [pc, #584]	; (8006520 <HAL_DMA_IRQHandler+0x258>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a92      	ldr	r2, [pc, #584]	; (8006524 <HAL_DMA_IRQHandler+0x25c>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	0a9b      	lsrs	r3, r3, #10
 80062e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	2208      	movs	r2, #8
 80062f4:	409a      	lsls	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d01a      	beq.n	8006334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d013      	beq.n	8006334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0204 	bic.w	r2, r2, #4
 800631a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006320:	2208      	movs	r2, #8
 8006322:	409a      	lsls	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	f043 0201 	orr.w	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006338:	2201      	movs	r2, #1
 800633a:	409a      	lsls	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d012      	beq.n	800636a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006356:	2201      	movs	r2, #1
 8006358:	409a      	lsls	r2, r3
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f043 0202 	orr.w	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636e:	2204      	movs	r2, #4
 8006370:	409a      	lsls	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d012      	beq.n	80063a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	2204      	movs	r2, #4
 800638e:	409a      	lsls	r2, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	f043 0204 	orr.w	r2, r3, #4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a4:	2210      	movs	r2, #16
 80063a6:	409a      	lsls	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d043      	beq.n	8006438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d03c      	beq.n	8006438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c2:	2210      	movs	r2, #16
 80063c4:	409a      	lsls	r2, r3
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d018      	beq.n	800640a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d108      	bne.n	80063f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d024      	beq.n	8006438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
 80063f6:	e01f      	b.n	8006438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
 8006408:	e016      	b.n	8006438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d107      	bne.n	8006428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0208 	bic.w	r2, r2, #8
 8006426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	2220      	movs	r2, #32
 800643e:	409a      	lsls	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4013      	ands	r3, r2
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 808e 	beq.w	8006566 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8086 	beq.w	8006566 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	2220      	movs	r2, #32
 8006460:	409a      	lsls	r2, r3
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b05      	cmp	r3, #5
 8006470:	d136      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0216 	bic.w	r2, r2, #22
 8006480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <HAL_DMA_IRQHandler+0x1da>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0208 	bic.w	r2, r2, #8
 80064b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b6:	223f      	movs	r2, #63	; 0x3f
 80064b8:	409a      	lsls	r2, r3
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d07d      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
        }
        return;
 80064de:	e078      	b.n	80065d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01c      	beq.n	8006528 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d108      	bne.n	800650e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006500:	2b00      	cmp	r3, #0
 8006502:	d030      	beq.n	8006566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
 800650c:	e02b      	b.n	8006566 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d027      	beq.n	8006566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	4798      	blx	r3
 800651e:	e022      	b.n	8006566 <HAL_DMA_IRQHandler+0x29e>
 8006520:	2000012c 	.word	0x2000012c
 8006524:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0210 	bic.w	r2, r2, #16
 8006544:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656a:	2b00      	cmp	r3, #0
 800656c:	d032      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d022      	beq.n	80065c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2205      	movs	r2, #5
 800657e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	3301      	adds	r3, #1
 8006596:	60bb      	str	r3, [r7, #8]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	429a      	cmp	r2, r3
 800659c:	d307      	bcc.n	80065ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f2      	bne.n	8006592 <HAL_DMA_IRQHandler+0x2ca>
 80065ac:	e000      	b.n	80065b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80065ae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
 80065d0:	e000      	b.n	80065d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80065d2:	bf00      	nop
    }
  }
}
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop

080065dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b40      	cmp	r3, #64	; 0x40
 8006608:	d108      	bne.n	800661c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800661a:	e007      	b.n	800662c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	3b10      	subs	r3, #16
 8006648:	4a14      	ldr	r2, [pc, #80]	; (800669c <DMA_CalcBaseAndBitshift+0x64>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	091b      	lsrs	r3, r3, #4
 8006650:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006652:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b03      	cmp	r3, #3
 8006664:	d909      	bls.n	800667a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	659a      	str	r2, [r3, #88]	; 0x58
 8006678:	e007      	b.n	800668a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	aaaaaaab 	.word	0xaaaaaaab
 80066a0:	0800d638 	.word	0x0800d638

080066a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d11f      	bne.n	80066fe <DMA_CheckFifoParam+0x5a>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d856      	bhi.n	8006772 <DMA_CheckFifoParam+0xce>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <DMA_CheckFifoParam+0x28>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066ef 	.word	0x080066ef
 80066d4:	080066dd 	.word	0x080066dd
 80066d8:	08006773 	.word	0x08006773
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d046      	beq.n	8006776 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ec:	e043      	b.n	8006776 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066f6:	d140      	bne.n	800677a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066fc:	e03d      	b.n	800677a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	d121      	bne.n	800674c <DMA_CheckFifoParam+0xa8>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d837      	bhi.n	800677e <DMA_CheckFifoParam+0xda>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <DMA_CheckFifoParam+0x70>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006725 	.word	0x08006725
 8006718:	0800672b 	.word	0x0800672b
 800671c:	08006725 	.word	0x08006725
 8006720:	0800673d 	.word	0x0800673d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e030      	b.n	800678c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d025      	beq.n	8006782 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800673a:	e022      	b.n	8006782 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006744:	d11f      	bne.n	8006786 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800674a:	e01c      	b.n	8006786 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d903      	bls.n	800675a <DMA_CheckFifoParam+0xb6>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d003      	beq.n	8006760 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006758:	e018      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
      break;
 800675e:	e015      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00e      	beq.n	800678a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
      break;
 8006770:	e00b      	b.n	800678a <DMA_CheckFifoParam+0xe6>
      break;
 8006772:	bf00      	nop
 8006774:	e00a      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      break;
 8006776:	bf00      	nop
 8006778:	e008      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      break;
 800677a:	bf00      	nop
 800677c:	e006      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      break;
 800677e:	bf00      	nop
 8006780:	e004      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      break;
 8006782:	bf00      	nop
 8006784:	e002      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      break;   
 8006786:	bf00      	nop
 8006788:	e000      	b.n	800678c <DMA_CheckFifoParam+0xe8>
      break;
 800678a:	bf00      	nop
    }
  } 
  
  return status; 
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800679c:	b480      	push	{r7}
 800679e:	b089      	sub	sp, #36	; 0x24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e177      	b.n	8006aa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067b8:	2201      	movs	r2, #1
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4013      	ands	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	f040 8166 	bne.w	8006aa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d005      	beq.n	80067ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d130      	bne.n	8006850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	2203      	movs	r2, #3
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4013      	ands	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	4313      	orrs	r3, r2
 8006816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006824:	2201      	movs	r2, #1
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	43db      	mvns	r3, r3
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	4013      	ands	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	091b      	lsrs	r3, r3, #4
 800683a:	f003 0201 	and.w	r2, r3, #1
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	4313      	orrs	r3, r2
 8006848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	2b03      	cmp	r3, #3
 800685a:	d017      	beq.n	800688c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	2203      	movs	r2, #3
 8006868:	fa02 f303 	lsl.w	r3, r2, r3
 800686c:	43db      	mvns	r3, r3
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	4013      	ands	r3, r2
 8006872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4313      	orrs	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d123      	bne.n	80068e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	08da      	lsrs	r2, r3, #3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3208      	adds	r2, #8
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	220f      	movs	r2, #15
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	43db      	mvns	r3, r3
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4013      	ands	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	08da      	lsrs	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3208      	adds	r2, #8
 80068da:	69b9      	ldr	r1, [r7, #24]
 80068dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	2203      	movs	r2, #3
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	43db      	mvns	r3, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4013      	ands	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f003 0203 	and.w	r2, r3, #3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4313      	orrs	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80c0 	beq.w	8006aa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	4b66      	ldr	r3, [pc, #408]	; (8006ac0 <HAL_GPIO_Init+0x324>)
 8006928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692a:	4a65      	ldr	r2, [pc, #404]	; (8006ac0 <HAL_GPIO_Init+0x324>)
 800692c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006930:	6453      	str	r3, [r2, #68]	; 0x44
 8006932:	4b63      	ldr	r3, [pc, #396]	; (8006ac0 <HAL_GPIO_Init+0x324>)
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800693e:	4a61      	ldr	r2, [pc, #388]	; (8006ac4 <HAL_GPIO_Init+0x328>)
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	3302      	adds	r3, #2
 8006946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	220f      	movs	r2, #15
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43db      	mvns	r3, r3
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	4013      	ands	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a58      	ldr	r2, [pc, #352]	; (8006ac8 <HAL_GPIO_Init+0x32c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d037      	beq.n	80069da <HAL_GPIO_Init+0x23e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a57      	ldr	r2, [pc, #348]	; (8006acc <HAL_GPIO_Init+0x330>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d031      	beq.n	80069d6 <HAL_GPIO_Init+0x23a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a56      	ldr	r2, [pc, #344]	; (8006ad0 <HAL_GPIO_Init+0x334>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d02b      	beq.n	80069d2 <HAL_GPIO_Init+0x236>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a55      	ldr	r2, [pc, #340]	; (8006ad4 <HAL_GPIO_Init+0x338>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d025      	beq.n	80069ce <HAL_GPIO_Init+0x232>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a54      	ldr	r2, [pc, #336]	; (8006ad8 <HAL_GPIO_Init+0x33c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01f      	beq.n	80069ca <HAL_GPIO_Init+0x22e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a53      	ldr	r2, [pc, #332]	; (8006adc <HAL_GPIO_Init+0x340>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d019      	beq.n	80069c6 <HAL_GPIO_Init+0x22a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a52      	ldr	r2, [pc, #328]	; (8006ae0 <HAL_GPIO_Init+0x344>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_GPIO_Init+0x226>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a51      	ldr	r2, [pc, #324]	; (8006ae4 <HAL_GPIO_Init+0x348>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00d      	beq.n	80069be <HAL_GPIO_Init+0x222>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a50      	ldr	r2, [pc, #320]	; (8006ae8 <HAL_GPIO_Init+0x34c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <HAL_GPIO_Init+0x21e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a4f      	ldr	r2, [pc, #316]	; (8006aec <HAL_GPIO_Init+0x350>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_GPIO_Init+0x21a>
 80069b2:	2309      	movs	r3, #9
 80069b4:	e012      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069b6:	230a      	movs	r3, #10
 80069b8:	e010      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069ba:	2308      	movs	r3, #8
 80069bc:	e00e      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069be:	2307      	movs	r3, #7
 80069c0:	e00c      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069c2:	2306      	movs	r3, #6
 80069c4:	e00a      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069c6:	2305      	movs	r3, #5
 80069c8:	e008      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069ca:	2304      	movs	r3, #4
 80069cc:	e006      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069ce:	2303      	movs	r3, #3
 80069d0:	e004      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e002      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <HAL_GPIO_Init+0x240>
 80069da:	2300      	movs	r3, #0
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	f002 0203 	and.w	r2, r2, #3
 80069e2:	0092      	lsls	r2, r2, #2
 80069e4:	4093      	lsls	r3, r2
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069ec:	4935      	ldr	r1, [pc, #212]	; (8006ac4 <HAL_GPIO_Init+0x328>)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	089b      	lsrs	r3, r3, #2
 80069f2:	3302      	adds	r3, #2
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069fa:	4b3d      	ldr	r3, [pc, #244]	; (8006af0 <HAL_GPIO_Init+0x354>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	43db      	mvns	r3, r3
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	4013      	ands	r3, r2
 8006a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a1e:	4a34      	ldr	r2, [pc, #208]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a24:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4013      	ands	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a48:	4a29      	ldr	r2, [pc, #164]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a4e:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	43db      	mvns	r3, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a72:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a78:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a9c:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <HAL_GPIO_Init+0x354>)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	f67f ae84 	bls.w	80067b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	40013800 	.word	0x40013800
 8006ac8:	40020000 	.word	0x40020000
 8006acc:	40020400 	.word	0x40020400
 8006ad0:	40020800 	.word	0x40020800
 8006ad4:	40020c00 	.word	0x40020c00
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40021400 	.word	0x40021400
 8006ae0:	40021800 	.word	0x40021800
 8006ae4:	40021c00 	.word	0x40021c00
 8006ae8:	40022000 	.word	0x40022000
 8006aec:	40022400 	.word	0x40022400
 8006af0:	40013c00 	.word	0x40013c00

08006af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	887b      	ldrh	r3, [r7, #2]
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
 8006b10:	e001      	b.n	8006b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	807b      	strh	r3, [r7, #2]
 8006b30:	4613      	mov	r3, r2
 8006b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b34:	787b      	ldrb	r3, [r7, #1]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b3a:	887a      	ldrh	r2, [r7, #2]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b40:	e003      	b.n	8006b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b42:	887b      	ldrh	r3, [r7, #2]
 8006b44:	041a      	lsls	r2, r3, #16
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	619a      	str	r2, [r3, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b6e:	4a05      	ldr	r2, [pc, #20]	; (8006b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fc f9f2 	bl	8002f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40013c00 	.word	0x40013c00

08006b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e12b      	b.n	8006df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fb fba0 	bl	80022f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2224      	movs	r2, #36	; 0x24
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bec:	f000 fe26 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 8006bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4a81      	ldr	r2, [pc, #516]	; (8006dfc <HAL_I2C_Init+0x274>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d807      	bhi.n	8006c0c <HAL_I2C_Init+0x84>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a80      	ldr	r2, [pc, #512]	; (8006e00 <HAL_I2C_Init+0x278>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	bf94      	ite	ls
 8006c04:	2301      	movls	r3, #1
 8006c06:	2300      	movhi	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	e006      	b.n	8006c1a <HAL_I2C_Init+0x92>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a7d      	ldr	r2, [pc, #500]	; (8006e04 <HAL_I2C_Init+0x27c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	bf94      	ite	ls
 8006c14:	2301      	movls	r3, #1
 8006c16:	2300      	movhi	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0e7      	b.n	8006df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4a78      	ldr	r2, [pc, #480]	; (8006e08 <HAL_I2C_Init+0x280>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	0c9b      	lsrs	r3, r3, #18
 8006c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4a6a      	ldr	r2, [pc, #424]	; (8006dfc <HAL_I2C_Init+0x274>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d802      	bhi.n	8006c5c <HAL_I2C_Init+0xd4>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	e009      	b.n	8006c70 <HAL_I2C_Init+0xe8>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
 8006c66:	4a69      	ldr	r2, [pc, #420]	; (8006e0c <HAL_I2C_Init+0x284>)
 8006c68:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6c:	099b      	lsrs	r3, r3, #6
 8006c6e:	3301      	adds	r3, #1
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6812      	ldr	r2, [r2, #0]
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006c82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	495c      	ldr	r1, [pc, #368]	; (8006dfc <HAL_I2C_Init+0x274>)
 8006c8c:	428b      	cmp	r3, r1
 8006c8e:	d819      	bhi.n	8006cc4 <HAL_I2C_Init+0x13c>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	1e59      	subs	r1, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ca4:	400b      	ands	r3, r1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <HAL_I2C_Init+0x138>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1e59      	subs	r1, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cbe:	e051      	b.n	8006d64 <HAL_I2C_Init+0x1dc>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	e04f      	b.n	8006d64 <HAL_I2C_Init+0x1dc>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d111      	bne.n	8006cf0 <HAL_I2C_Init+0x168>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	1e58      	subs	r0, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	440b      	add	r3, r1
 8006cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cde:	3301      	adds	r3, #1
 8006ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bf0c      	ite	eq
 8006ce8:	2301      	moveq	r3, #1
 8006cea:	2300      	movne	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e012      	b.n	8006d16 <HAL_I2C_Init+0x18e>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1e58      	subs	r0, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6859      	ldr	r1, [r3, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	0099      	lsls	r1, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d06:	3301      	adds	r3, #1
 8006d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bf0c      	ite	eq
 8006d10:	2301      	moveq	r3, #1
 8006d12:	2300      	movne	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_I2C_Init+0x196>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e022      	b.n	8006d64 <HAL_I2C_Init+0x1dc>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10e      	bne.n	8006d44 <HAL_I2C_Init+0x1bc>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1e58      	subs	r0, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6859      	ldr	r1, [r3, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	440b      	add	r3, r1
 8006d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d42:	e00f      	b.n	8006d64 <HAL_I2C_Init+0x1dc>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	1e58      	subs	r0, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6859      	ldr	r1, [r3, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	0099      	lsls	r1, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	6809      	ldr	r1, [r1, #0]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6911      	ldr	r1, [r2, #16]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68d2      	ldr	r2, [r2, #12]
 8006d9e:	4311      	orrs	r1, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	000186a0 	.word	0x000186a0
 8006e00:	001e847f 	.word	0x001e847f
 8006e04:	003d08ff 	.word	0x003d08ff
 8006e08:	431bde83 	.word	0x431bde83
 8006e0c:	10624dd3 	.word	0x10624dd3

08006e10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d129      	bne.n	8006e7a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2224      	movs	r2, #36	; 0x24
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0210 	bic.w	r2, r2, #16
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d12a      	bne.n	8006ef8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2224      	movs	r2, #36	; 0x24
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
 8006ec4:	f023 030f 	bic.w	r3, r3, #15
 8006ec8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	89fb      	ldrh	r3, [r7, #14]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	89fa      	ldrh	r2, [r7, #14]
 8006eda:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006ef8:	2302      	movs	r3, #2
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
	...

08006f08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f12:	2300      	movs	r3, #0
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	4a1f      	ldr	r2, [pc, #124]	; (8006f98 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f20:	6413      	str	r3, [r2, #64]	; 0x40
 8006f22:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <HAL_PWREx_EnableOverDrive+0x90>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f2e:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <HAL_PWREx_EnableOverDrive+0x94>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f34:	f7fe f870 	bl	8005018 <HAL_GetTick>
 8006f38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f3a:	e009      	b.n	8006f50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f3c:	f7fe f86c 	bl	8005018 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f4a:	d901      	bls.n	8006f50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e01f      	b.n	8006f90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f50:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5c:	d1ee      	bne.n	8006f3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f64:	f7fe f858 	bl	8005018 <HAL_GetTick>
 8006f68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f6a:	e009      	b.n	8006f80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f6c:	f7fe f854 	bl	8005018 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f7a:	d901      	bls.n	8006f80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e007      	b.n	8006f90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8c:	d1ee      	bne.n	8006f6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	420e0040 	.word	0x420e0040
 8006fa0:	40007000 	.word	0x40007000
 8006fa4:	420e0044 	.word	0x420e0044

08006fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e264      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d075      	beq.n	80070b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fc6:	4ba3      	ldr	r3, [pc, #652]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 030c 	and.w	r3, r3, #12
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d00c      	beq.n	8006fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fd2:	4ba0      	ldr	r3, [pc, #640]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d112      	bne.n	8007004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fde:	4b9d      	ldr	r3, [pc, #628]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fea:	d10b      	bne.n	8007004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fec:	4b99      	ldr	r3, [pc, #612]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05b      	beq.n	80070b0 <HAL_RCC_OscConfig+0x108>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d157      	bne.n	80070b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e23f      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d106      	bne.n	800701c <HAL_RCC_OscConfig+0x74>
 800700e:	4b91      	ldr	r3, [pc, #580]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a90      	ldr	r2, [pc, #576]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e01d      	b.n	8007058 <HAL_RCC_OscConfig+0xb0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007024:	d10c      	bne.n	8007040 <HAL_RCC_OscConfig+0x98>
 8007026:	4b8b      	ldr	r3, [pc, #556]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a8a      	ldr	r2, [pc, #552]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800702c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	4b88      	ldr	r3, [pc, #544]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a87      	ldr	r2, [pc, #540]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e00b      	b.n	8007058 <HAL_RCC_OscConfig+0xb0>
 8007040:	4b84      	ldr	r3, [pc, #528]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a83      	ldr	r2, [pc, #524]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4b81      	ldr	r3, [pc, #516]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a80      	ldr	r2, [pc, #512]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d013      	beq.n	8007088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007060:	f7fd ffda 	bl	8005018 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007068:	f7fd ffd6 	bl	8005018 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b64      	cmp	r3, #100	; 0x64
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e204      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707a:	4b76      	ldr	r3, [pc, #472]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0xc0>
 8007086:	e014      	b.n	80070b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007088:	f7fd ffc6 	bl	8005018 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007090:	f7fd ffc2 	bl	8005018 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b64      	cmp	r3, #100	; 0x64
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e1f0      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a2:	4b6c      	ldr	r3, [pc, #432]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f0      	bne.n	8007090 <HAL_RCC_OscConfig+0xe8>
 80070ae:	e000      	b.n	80070b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d063      	beq.n	8007186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070be:	4b65      	ldr	r3, [pc, #404]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 030c 	and.w	r3, r3, #12
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ca:	4b62      	ldr	r3, [pc, #392]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	d11c      	bne.n	8007110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070d6:	4b5f      	ldr	r3, [pc, #380]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d116      	bne.n	8007110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070e2:	4b5c      	ldr	r3, [pc, #368]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_RCC_OscConfig+0x152>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d001      	beq.n	80070fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e1c4      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fa:	4b56      	ldr	r3, [pc, #344]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4952      	ldr	r1, [pc, #328]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800710a:	4313      	orrs	r3, r2
 800710c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710e:	e03a      	b.n	8007186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d020      	beq.n	800715a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007118:	4b4f      	ldr	r3, [pc, #316]	; (8007258 <HAL_RCC_OscConfig+0x2b0>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fd ff7b 	bl	8005018 <HAL_GetTick>
 8007122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007124:	e008      	b.n	8007138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007126:	f7fd ff77 	bl	8005018 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e1a5      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007138:	4b46      	ldr	r3, [pc, #280]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f0      	beq.n	8007126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007144:	4b43      	ldr	r3, [pc, #268]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4940      	ldr	r1, [pc, #256]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]
 8007158:	e015      	b.n	8007186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800715a:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <HAL_RCC_OscConfig+0x2b0>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fd ff5a 	bl	8005018 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007168:	f7fd ff56 	bl	8005018 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e184      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717a:	4b36      	ldr	r3, [pc, #216]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d030      	beq.n	80071f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_RCC_OscConfig+0x2b4>)
 800719c:	2201      	movs	r2, #1
 800719e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a0:	f7fd ff3a 	bl	8005018 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071a8:	f7fd ff36 	bl	8005018 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e164      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ba:	4b26      	ldr	r3, [pc, #152]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCC_OscConfig+0x200>
 80071c6:	e015      	b.n	80071f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c8:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCC_OscConfig+0x2b4>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ce:	f7fd ff23 	bl	8005018 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071d6:	f7fd ff1f 	bl	8005018 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e14d      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80071ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f0      	bne.n	80071d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a0 	beq.w	8007342 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10f      	bne.n	8007232 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]
 8007216:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	4a0e      	ldr	r2, [pc, #56]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800721c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007220:	6413      	str	r3, [r2, #64]	; 0x40
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCC_OscConfig+0x2b8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d121      	bne.n	8007282 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800723e:	4b08      	ldr	r3, [pc, #32]	; (8007260 <HAL_RCC_OscConfig+0x2b8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a07      	ldr	r2, [pc, #28]	; (8007260 <HAL_RCC_OscConfig+0x2b8>)
 8007244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724a:	f7fd fee5 	bl	8005018 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007250:	e011      	b.n	8007276 <HAL_RCC_OscConfig+0x2ce>
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800
 8007258:	42470000 	.word	0x42470000
 800725c:	42470e80 	.word	0x42470e80
 8007260:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fd fed8 	bl	8005018 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e106      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007276:	4b85      	ldr	r3, [pc, #532]	; (800748c <HAL_RCC_OscConfig+0x4e4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d106      	bne.n	8007298 <HAL_RCC_OscConfig+0x2f0>
 800728a:	4b81      	ldr	r3, [pc, #516]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	4a80      	ldr	r2, [pc, #512]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 8007290:	f043 0301 	orr.w	r3, r3, #1
 8007294:	6713      	str	r3, [r2, #112]	; 0x70
 8007296:	e01c      	b.n	80072d2 <HAL_RCC_OscConfig+0x32a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b05      	cmp	r3, #5
 800729e:	d10c      	bne.n	80072ba <HAL_RCC_OscConfig+0x312>
 80072a0:	4b7b      	ldr	r3, [pc, #492]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a4:	4a7a      	ldr	r2, [pc, #488]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072a6:	f043 0304 	orr.w	r3, r3, #4
 80072aa:	6713      	str	r3, [r2, #112]	; 0x70
 80072ac:	4b78      	ldr	r3, [pc, #480]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	4a77      	ldr	r2, [pc, #476]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	6713      	str	r3, [r2, #112]	; 0x70
 80072b8:	e00b      	b.n	80072d2 <HAL_RCC_OscConfig+0x32a>
 80072ba:	4b75      	ldr	r3, [pc, #468]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a74      	ldr	r2, [pc, #464]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
 80072c6:	4b72      	ldr	r3, [pc, #456]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4a71      	ldr	r2, [pc, #452]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072cc:	f023 0304 	bic.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d015      	beq.n	8007306 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072da:	f7fd fe9d 	bl	8005018 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e0:	e00a      	b.n	80072f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e2:	f7fd fe99 	bl	8005018 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e0c5      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f8:	4b65      	ldr	r3, [pc, #404]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ee      	beq.n	80072e2 <HAL_RCC_OscConfig+0x33a>
 8007304:	e014      	b.n	8007330 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007306:	f7fd fe87 	bl	8005018 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800730c:	e00a      	b.n	8007324 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800730e:	f7fd fe83 	bl	8005018 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f241 3288 	movw	r2, #5000	; 0x1388
 800731c:	4293      	cmp	r3, r2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e0af      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007324:	4b5a      	ldr	r3, [pc, #360]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ee      	bne.n	800730e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d105      	bne.n	8007342 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007336:	4b56      	ldr	r3, [pc, #344]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a55      	ldr	r2, [pc, #340]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 800733c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 809b 	beq.w	8007482 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800734c:	4b50      	ldr	r3, [pc, #320]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 030c 	and.w	r3, r3, #12
 8007354:	2b08      	cmp	r3, #8
 8007356:	d05c      	beq.n	8007412 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d141      	bne.n	80073e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007360:	4b4c      	ldr	r3, [pc, #304]	; (8007494 <HAL_RCC_OscConfig+0x4ec>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007366:	f7fd fe57 	bl	8005018 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800736e:	f7fd fe53 	bl	8005018 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e081      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007380:	4b43      	ldr	r3, [pc, #268]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	019b      	lsls	r3, r3, #6
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	3b01      	subs	r3, #1
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	061b      	lsls	r3, r3, #24
 80073b0:	4937      	ldr	r1, [pc, #220]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073b6:	4b37      	ldr	r3, [pc, #220]	; (8007494 <HAL_RCC_OscConfig+0x4ec>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073bc:	f7fd fe2c 	bl	8005018 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c4:	f7fd fe28 	bl	8005018 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e056      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d6:	4b2e      	ldr	r3, [pc, #184]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0x41c>
 80073e2:	e04e      	b.n	8007482 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e4:	4b2b      	ldr	r3, [pc, #172]	; (8007494 <HAL_RCC_OscConfig+0x4ec>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ea:	f7fd fe15 	bl	8005018 <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073f2:	f7fd fe11 	bl	8005018 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e03f      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007404:	4b22      	ldr	r3, [pc, #136]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f0      	bne.n	80073f2 <HAL_RCC_OscConfig+0x44a>
 8007410:	e037      	b.n	8007482 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e032      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800741e:	4b1c      	ldr	r3, [pc, #112]	; (8007490 <HAL_RCC_OscConfig+0x4e8>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d028      	beq.n	800747e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d121      	bne.n	800747e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007444:	429a      	cmp	r2, r3
 8007446:	d11a      	bne.n	800747e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800744e:	4013      	ands	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007454:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007456:	4293      	cmp	r3, r2
 8007458:	d111      	bne.n	800747e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	3b01      	subs	r3, #1
 8007468:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800746a:	429a      	cmp	r2, r3
 800746c:	d107      	bne.n	800747e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800747a:	429a      	cmp	r2, r3
 800747c:	d001      	beq.n	8007482 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40007000 	.word	0x40007000
 8007490:	40023800 	.word	0x40023800
 8007494:	42470060 	.word	0x42470060

08007498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0cc      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074ac:	4b68      	ldr	r3, [pc, #416]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d90c      	bls.n	80074d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ba:	4b65      	ldr	r3, [pc, #404]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c2:	4b63      	ldr	r3, [pc, #396]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0b8      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d020      	beq.n	8007522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ec:	4b59      	ldr	r3, [pc, #356]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	4a58      	ldr	r2, [pc, #352]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 80074f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007504:	4b53      	ldr	r3, [pc, #332]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a52      	ldr	r2, [pc, #328]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 800750a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800750e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007510:	4b50      	ldr	r3, [pc, #320]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	494d      	ldr	r1, [pc, #308]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d044      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d107      	bne.n	8007546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007536:	4b47      	ldr	r3, [pc, #284]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d119      	bne.n	8007576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e07f      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d003      	beq.n	8007556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007552:	2b03      	cmp	r3, #3
 8007554:	d107      	bne.n	8007566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007556:	4b3f      	ldr	r3, [pc, #252]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e06f      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007566:	4b3b      	ldr	r3, [pc, #236]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e067      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007576:	4b37      	ldr	r3, [pc, #220]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 0203 	bic.w	r2, r3, #3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4934      	ldr	r1, [pc, #208]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007584:	4313      	orrs	r3, r2
 8007586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007588:	f7fd fd46 	bl	8005018 <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800758e:	e00a      	b.n	80075a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007590:	f7fd fd42 	bl	8005018 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f241 3288 	movw	r2, #5000	; 0x1388
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e04f      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a6:	4b2b      	ldr	r3, [pc, #172]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 020c 	and.w	r2, r3, #12
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d1eb      	bne.n	8007590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075b8:	4b25      	ldr	r3, [pc, #148]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d20c      	bcs.n	80075e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c6:	4b22      	ldr	r3, [pc, #136]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ce:	4b20      	ldr	r3, [pc, #128]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d001      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e032      	b.n	8007646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4916      	ldr	r1, [pc, #88]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800760a:	4b12      	ldr	r3, [pc, #72]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	490e      	ldr	r1, [pc, #56]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	4313      	orrs	r3, r2
 800761c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800761e:	f000 f821 	bl	8007664 <HAL_RCC_GetSysClockFreq>
 8007622:	4602      	mov	r2, r0
 8007624:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	490a      	ldr	r1, [pc, #40]	; (8007658 <HAL_RCC_ClockConfig+0x1c0>)
 8007630:	5ccb      	ldrb	r3, [r1, r3]
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	4a09      	ldr	r2, [pc, #36]	; (800765c <HAL_RCC_ClockConfig+0x1c4>)
 8007638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800763a:	4b09      	ldr	r3, [pc, #36]	; (8007660 <HAL_RCC_ClockConfig+0x1c8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd fca6 	bl	8004f90 <HAL_InitTick>

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40023c00 	.word	0x40023c00
 8007654:	40023800 	.word	0x40023800
 8007658:	0800d620 	.word	0x0800d620
 800765c:	2000012c 	.word	0x2000012c
 8007660:	20000130 	.word	0x20000130

08007664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	2300      	movs	r3, #0
 8007676:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800767c:	4b67      	ldr	r3, [pc, #412]	; (800781c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b08      	cmp	r3, #8
 8007686:	d00d      	beq.n	80076a4 <HAL_RCC_GetSysClockFreq+0x40>
 8007688:	2b08      	cmp	r3, #8
 800768a:	f200 80bd 	bhi.w	8007808 <HAL_RCC_GetSysClockFreq+0x1a4>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_RCC_GetSysClockFreq+0x34>
 8007692:	2b04      	cmp	r3, #4
 8007694:	d003      	beq.n	800769e <HAL_RCC_GetSysClockFreq+0x3a>
 8007696:	e0b7      	b.n	8007808 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007698:	4b61      	ldr	r3, [pc, #388]	; (8007820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800769a:	60bb      	str	r3, [r7, #8]
       break;
 800769c:	e0b7      	b.n	800780e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800769e:	4b60      	ldr	r3, [pc, #384]	; (8007820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80076a0:	60bb      	str	r3, [r7, #8]
      break;
 80076a2:	e0b4      	b.n	800780e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076a4:	4b5d      	ldr	r3, [pc, #372]	; (800781c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076ae:	4b5b      	ldr	r3, [pc, #364]	; (800781c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d04d      	beq.n	8007756 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ba:	4b58      	ldr	r3, [pc, #352]	; (800781c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	099b      	lsrs	r3, r3, #6
 80076c0:	461a      	mov	r2, r3
 80076c2:	f04f 0300 	mov.w	r3, #0
 80076c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076ca:	f04f 0100 	mov.w	r1, #0
 80076ce:	ea02 0800 	and.w	r8, r2, r0
 80076d2:	ea03 0901 	and.w	r9, r3, r1
 80076d6:	4640      	mov	r0, r8
 80076d8:	4649      	mov	r1, r9
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	014b      	lsls	r3, r1, #5
 80076e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076e8:	0142      	lsls	r2, r0, #5
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	ebb0 0008 	subs.w	r0, r0, r8
 80076f2:	eb61 0109 	sbc.w	r1, r1, r9
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	018b      	lsls	r3, r1, #6
 8007700:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007704:	0182      	lsls	r2, r0, #6
 8007706:	1a12      	subs	r2, r2, r0
 8007708:	eb63 0301 	sbc.w	r3, r3, r1
 800770c:	f04f 0000 	mov.w	r0, #0
 8007710:	f04f 0100 	mov.w	r1, #0
 8007714:	00d9      	lsls	r1, r3, #3
 8007716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800771a:	00d0      	lsls	r0, r2, #3
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	eb12 0208 	adds.w	r2, r2, r8
 8007724:	eb43 0309 	adc.w	r3, r3, r9
 8007728:	f04f 0000 	mov.w	r0, #0
 800772c:	f04f 0100 	mov.w	r1, #0
 8007730:	0299      	lsls	r1, r3, #10
 8007732:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007736:	0290      	lsls	r0, r2, #10
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4610      	mov	r0, r2
 800773e:	4619      	mov	r1, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	461a      	mov	r2, r3
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	f7f9 fa56 	bl	8000bf8 <__aeabi_uldivmod>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4613      	mov	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e04a      	b.n	80077ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007756:	4b31      	ldr	r3, [pc, #196]	; (800781c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	099b      	lsrs	r3, r3, #6
 800775c:	461a      	mov	r2, r3
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007766:	f04f 0100 	mov.w	r1, #0
 800776a:	ea02 0400 	and.w	r4, r2, r0
 800776e:	ea03 0501 	and.w	r5, r3, r1
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	014b      	lsls	r3, r1, #5
 8007780:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007784:	0142      	lsls	r2, r0, #5
 8007786:	4610      	mov	r0, r2
 8007788:	4619      	mov	r1, r3
 800778a:	1b00      	subs	r0, r0, r4
 800778c:	eb61 0105 	sbc.w	r1, r1, r5
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	018b      	lsls	r3, r1, #6
 800779a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800779e:	0182      	lsls	r2, r0, #6
 80077a0:	1a12      	subs	r2, r2, r0
 80077a2:	eb63 0301 	sbc.w	r3, r3, r1
 80077a6:	f04f 0000 	mov.w	r0, #0
 80077aa:	f04f 0100 	mov.w	r1, #0
 80077ae:	00d9      	lsls	r1, r3, #3
 80077b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077b4:	00d0      	lsls	r0, r2, #3
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	1912      	adds	r2, r2, r4
 80077bc:	eb45 0303 	adc.w	r3, r5, r3
 80077c0:	f04f 0000 	mov.w	r0, #0
 80077c4:	f04f 0100 	mov.w	r1, #0
 80077c8:	0299      	lsls	r1, r3, #10
 80077ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80077ce:	0290      	lsls	r0, r2, #10
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4610      	mov	r0, r2
 80077d6:	4619      	mov	r1, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	461a      	mov	r2, r3
 80077dc:	f04f 0300 	mov.w	r3, #0
 80077e0:	f7f9 fa0a 	bl	8000bf8 <__aeabi_uldivmod>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4613      	mov	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	3301      	adds	r3, #1
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	60bb      	str	r3, [r7, #8]
      break;
 8007806:	e002      	b.n	800780e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800780a:	60bb      	str	r3, [r7, #8]
      break;
 800780c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800780e:	68bb      	ldr	r3, [r7, #8]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800781a:	bf00      	nop
 800781c:	40023800 	.word	0x40023800
 8007820:	00f42400 	.word	0x00f42400

08007824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007828:	4b03      	ldr	r3, [pc, #12]	; (8007838 <HAL_RCC_GetHCLKFreq+0x14>)
 800782a:	681b      	ldr	r3, [r3, #0]
}
 800782c:	4618      	mov	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	2000012c 	.word	0x2000012c

0800783c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007840:	f7ff fff0 	bl	8007824 <HAL_RCC_GetHCLKFreq>
 8007844:	4602      	mov	r2, r0
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	0a9b      	lsrs	r3, r3, #10
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	4903      	ldr	r1, [pc, #12]	; (8007860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007852:	5ccb      	ldrb	r3, [r1, r3]
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007858:	4618      	mov	r0, r3
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40023800 	.word	0x40023800
 8007860:	0800d630 	.word	0x0800d630

08007864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007868:	f7ff ffdc 	bl	8007824 <HAL_RCC_GetHCLKFreq>
 800786c:	4602      	mov	r2, r0
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	0b5b      	lsrs	r3, r3, #13
 8007874:	f003 0307 	and.w	r3, r3, #7
 8007878:	4903      	ldr	r1, [pc, #12]	; (8007888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800787a:	5ccb      	ldrb	r3, [r1, r3]
 800787c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007880:	4618      	mov	r0, r3
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40023800 	.word	0x40023800
 8007888:	0800d630 	.word	0x0800d630

0800788c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e07b      	b.n	8007996 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d108      	bne.n	80078b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ae:	d009      	beq.n	80078c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	61da      	str	r2, [r3, #28]
 80078b6:	e005      	b.n	80078c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fc f8d8 	bl	8003a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007948:	ea42 0103 	orr.w	r1, r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	f003 0104 	and.w	r1, r3, #4
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	f003 0210 	and.w	r2, r3, #16
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007984:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b088      	sub	sp, #32
 80079a2:	af02      	add	r7, sp, #8
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	603b      	str	r3, [r7, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ba:	d112      	bne.n	80079e2 <HAL_SPI_Receive+0x44>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10e      	bne.n	80079e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2204      	movs	r2, #4
 80079c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	4613      	mov	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 f8f1 	bl	8007bc0 <HAL_SPI_TransmitReceive>
 80079de:	4603      	mov	r3, r0
 80079e0:	e0ea      	b.n	8007bb8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_SPI_Receive+0x52>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e0e3      	b.n	8007bb8 <HAL_SPI_Receive+0x21a>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079f8:	f7fd fb0e 	bl	8005018 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d002      	beq.n	8007a10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a0e:	e0ca      	b.n	8007ba6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_SPI_Receive+0x7e>
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a20:	e0c1      	b.n	8007ba6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2204      	movs	r2, #4
 8007a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a68:	d10f      	bne.n	8007a8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d007      	beq.n	8007aa8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d162      	bne.n	8007b76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ab0:	e02e      	b.n	8007b10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d115      	bne.n	8007aec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f103 020c 	add.w	r2, r3, #12
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	7812      	ldrb	r2, [r2, #0]
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aea:	e011      	b.n	8007b10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aec:	f7fd fa94 	bl	8005018 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d803      	bhi.n	8007b04 <HAL_SPI_Receive+0x166>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b02:	d102      	bne.n	8007b0a <HAL_SPI_Receive+0x16c>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b0e:	e04a      	b.n	8007ba6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1cb      	bne.n	8007ab2 <HAL_SPI_Receive+0x114>
 8007b1a:	e031      	b.n	8007b80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d113      	bne.n	8007b52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	b292      	uxth	r2, r2
 8007b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	1c9a      	adds	r2, r3, #2
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b50:	e011      	b.n	8007b76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b52:	f7fd fa61 	bl	8005018 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d803      	bhi.n	8007b6a <HAL_SPI_Receive+0x1cc>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b68:	d102      	bne.n	8007b70 <HAL_SPI_Receive+0x1d2>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b74:	e017      	b.n	8007ba6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1cd      	bne.n	8007b1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fa45 	bl	8008014 <SPI_EndRxTransaction>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]
 8007ba2:	e000      	b.n	8007ba6 <HAL_SPI_Receive+0x208>
  }

error :
 8007ba4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08c      	sub	sp, #48	; 0x30
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x26>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e18a      	b.n	8007efc <HAL_SPI_TransmitReceive+0x33c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bee:	f7fd fa13 	bl	8005018 <HAL_GetTick>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c04:	887b      	ldrh	r3, [r7, #2]
 8007c06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d00f      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0x70>
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c16:	d107      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x68>
 8007c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d003      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c2e:	e15b      	b.n	8007ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x82>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x82>
 8007c3c:	887b      	ldrh	r3, [r7, #2]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c48:	e14e      	b.n	8007ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d003      	beq.n	8007c5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2205      	movs	r2, #5
 8007c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	887a      	ldrh	r2, [r7, #2]
 8007c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	887a      	ldrh	r2, [r7, #2]
 8007c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	887a      	ldrh	r2, [r7, #2]
 8007c80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	887a      	ldrh	r2, [r7, #2]
 8007c86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d007      	beq.n	8007cb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cba:	d178      	bne.n	8007dae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x10a>
 8007cc4:	8b7b      	ldrh	r3, [r7, #26]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d166      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	881a      	ldrh	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	1c9a      	adds	r2, r3, #2
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cee:	e053      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d11b      	bne.n	8007d36 <HAL_SPI_TransmitReceive+0x176>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d016      	beq.n	8007d36 <HAL_SPI_TransmitReceive+0x176>
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d113      	bne.n	8007d36 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	881a      	ldrh	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1e:	1c9a      	adds	r2, r3, #2
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d119      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x1b8>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d014      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	b292      	uxth	r2, r2
 8007d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d60:	1c9a      	adds	r2, r3, #2
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d74:	2301      	movs	r3, #1
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d78:	f7fd f94e 	bl	8005018 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d807      	bhi.n	8007d98 <HAL_SPI_TransmitReceive+0x1d8>
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8e:	d003      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d96:	e0a7      	b.n	8007ee8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1a6      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x130>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1a1      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x130>
 8007dac:	e07c      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <HAL_SPI_TransmitReceive+0x1fc>
 8007db6:	8b7b      	ldrh	r3, [r7, #26]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d16b      	bne.n	8007e94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de2:	e057      	b.n	8007e94 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d11c      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x26c>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d017      	beq.n	8007e2c <HAL_SPI_TransmitReceive+0x26c>
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d114      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d119      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x2ae>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d014      	beq.n	8007e6e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e6e:	f7fd f8d3 	bl	8005018 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d803      	bhi.n	8007e86 <HAL_SPI_TransmitReceive+0x2c6>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e84:	d102      	bne.n	8007e8c <HAL_SPI_TransmitReceive+0x2cc>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e92:	e029      	b.n	8007ee8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1a2      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x224>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d19d      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f917 	bl	80080e0 <SPI_EndRxTxTransaction>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ec4:	e010      	b.n	8007ee8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	e000      	b.n	8007ee8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ee6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3730      	adds	r7, #48	; 0x30
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f14:	f7fd f880 	bl	8005018 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	4413      	add	r3, r2
 8007f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f24:	f7fd f878 	bl	8005018 <HAL_GetTick>
 8007f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f2a:	4b39      	ldr	r3, [pc, #228]	; (8008010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	015b      	lsls	r3, r3, #5
 8007f30:	0d1b      	lsrs	r3, r3, #20
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	fb02 f303 	mul.w	r3, r2, r3
 8007f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f3a:	e054      	b.n	8007fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f42:	d050      	beq.n	8007fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f44:	f7fd f868 	bl	8005018 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d902      	bls.n	8007f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d13d      	bne.n	8007fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f72:	d111      	bne.n	8007f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f7c:	d004      	beq.n	8007f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f86:	d107      	bne.n	8007f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fa0:	d10f      	bne.n	8007fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e017      	b.n	8008006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2301      	moveq	r3, #1
 8007ff8:	2300      	movne	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	429a      	cmp	r2, r3
 8008002:	d19b      	bne.n	8007f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	2000012c 	.word	0x2000012c

08008014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008028:	d111      	bne.n	800804e <SPI_EndRxTransaction+0x3a>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008032:	d004      	beq.n	800803e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803c:	d107      	bne.n	800804e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800804c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008056:	d12a      	bne.n	80080ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008060:	d012      	beq.n	8008088 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2200      	movs	r2, #0
 800806a:	2180      	movs	r1, #128	; 0x80
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff ff49 	bl	8007f04 <SPI_WaitFlagStateUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d02d      	beq.n	80080d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807c:	f043 0220 	orr.w	r2, r3, #32
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e026      	b.n	80080d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	2101      	movs	r1, #1
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff ff36 	bl	8007f04 <SPI_WaitFlagStateUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d01a      	beq.n	80080d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a2:	f043 0220 	orr.w	r2, r3, #32
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e013      	b.n	80080d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2101      	movs	r1, #1
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff ff23 	bl	8007f04 <SPI_WaitFlagStateUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e000      	b.n	80080d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080ec:	4b1b      	ldr	r3, [pc, #108]	; (800815c <SPI_EndRxTxTransaction+0x7c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <SPI_EndRxTxTransaction+0x80>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	0d5b      	lsrs	r3, r3, #21
 80080f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080fc:	fb02 f303 	mul.w	r3, r2, r3
 8008100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800810a:	d112      	bne.n	8008132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2200      	movs	r2, #0
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f7ff fef4 	bl	8007f04 <SPI_WaitFlagStateUntilTimeout>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d016      	beq.n	8008150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f043 0220 	orr.w	r2, r3, #32
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e00f      	b.n	8008152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	3b01      	subs	r3, #1
 800813c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d0f2      	beq.n	8008132 <SPI_EndRxTxTransaction+0x52>
 800814c:	e000      	b.n	8008150 <SPI_EndRxTxTransaction+0x70>
        break;
 800814e:	bf00      	nop
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	2000012c 	.word	0x2000012c
 8008160:	165e9f81 	.word	0x165e9f81

08008164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e041      	b.n	80081fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fb ff82 	bl	8004094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f000 fea0 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b082      	sub	sp, #8
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e041      	b.n	8008298 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d106      	bne.n	800822e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f839 	bl	80082a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	4619      	mov	r1, r3
 8008240:	4610      	mov	r0, r2
 8008242:	f000 fe51 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start+0x24>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e022      	b.n	800831e <HAL_TIM_PWM_Start+0x6a>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d109      	bne.n	80082f2 <HAL_TIM_PWM_Start+0x3e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	bf14      	ite	ne
 80082ea:	2301      	movne	r3, #1
 80082ec:	2300      	moveq	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	e015      	b.n	800831e <HAL_TIM_PWM_Start+0x6a>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d109      	bne.n	800830c <HAL_TIM_PWM_Start+0x58>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e008      	b.n	800831e <HAL_TIM_PWM_Start+0x6a>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e07c      	b.n	8008420 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0x82>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008334:	e013      	b.n	800835e <HAL_TIM_PWM_Start+0xaa>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b04      	cmp	r3, #4
 800833a:	d104      	bne.n	8008346 <HAL_TIM_PWM_Start+0x92>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008344:	e00b      	b.n	800835e <HAL_TIM_PWM_Start+0xaa>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0xa2>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008354:	e003      	b.n	800835e <HAL_TIM_PWM_Start+0xaa>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2201      	movs	r2, #1
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f001 f9d2 	bl	8009710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a2d      	ldr	r2, [pc, #180]	; (8008428 <HAL_TIM_PWM_Start+0x174>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d004      	beq.n	8008380 <HAL_TIM_PWM_Start+0xcc>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a2c      	ldr	r2, [pc, #176]	; (800842c <HAL_TIM_PWM_Start+0x178>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d101      	bne.n	8008384 <HAL_TIM_PWM_Start+0xd0>
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <HAL_TIM_PWM_Start+0xd2>
 8008384:	2300      	movs	r3, #0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008398:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a22      	ldr	r2, [pc, #136]	; (8008428 <HAL_TIM_PWM_Start+0x174>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d022      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ac:	d01d      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <HAL_TIM_PWM_Start+0x17c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d018      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a1d      	ldr	r2, [pc, #116]	; (8008434 <HAL_TIM_PWM_Start+0x180>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <HAL_TIM_PWM_Start+0x184>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00e      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a16      	ldr	r2, [pc, #88]	; (800842c <HAL_TIM_PWM_Start+0x178>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a18      	ldr	r2, [pc, #96]	; (800843c <HAL_TIM_PWM_Start+0x188>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d004      	beq.n	80083ea <HAL_TIM_PWM_Start+0x136>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a16      	ldr	r2, [pc, #88]	; (8008440 <HAL_TIM_PWM_Start+0x18c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d111      	bne.n	800840e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b06      	cmp	r3, #6
 80083fa:	d010      	beq.n	800841e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0201 	orr.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840c:	e007      	b.n	800841e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40010000 	.word	0x40010000
 800842c:	40010400 	.word	0x40010400
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40014000 	.word	0x40014000
 8008440:	40001800 	.word	0x40001800

08008444 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2200      	movs	r2, #0
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f001 f95a 	bl	8009710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a2e      	ldr	r2, [pc, #184]	; (800851c <HAL_TIM_PWM_Stop+0xd8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d004      	beq.n	8008470 <HAL_TIM_PWM_Stop+0x2c>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a2d      	ldr	r2, [pc, #180]	; (8008520 <HAL_TIM_PWM_Stop+0xdc>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d101      	bne.n	8008474 <HAL_TIM_PWM_Stop+0x30>
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <HAL_TIM_PWM_Stop+0x32>
 8008474:	2300      	movs	r3, #0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d017      	beq.n	80084aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6a1a      	ldr	r2, [r3, #32]
 8008480:	f241 1311 	movw	r3, #4369	; 0x1111
 8008484:	4013      	ands	r3, r2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10f      	bne.n	80084aa <HAL_TIM_PWM_Stop+0x66>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6a1a      	ldr	r2, [r3, #32]
 8008490:	f240 4344 	movw	r3, #1092	; 0x444
 8008494:	4013      	ands	r3, r2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <HAL_TIM_PWM_Stop+0x66>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6a1a      	ldr	r2, [r3, #32]
 80084b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80084b4:	4013      	ands	r3, r2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10f      	bne.n	80084da <HAL_TIM_PWM_Stop+0x96>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6a1a      	ldr	r2, [r3, #32]
 80084c0:	f240 4344 	movw	r3, #1092	; 0x444
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d107      	bne.n	80084da <HAL_TIM_PWM_Stop+0x96>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0201 	bic.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d104      	bne.n	80084ea <HAL_TIM_PWM_Stop+0xa6>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084e8:	e013      	b.n	8008512 <HAL_TIM_PWM_Stop+0xce>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d104      	bne.n	80084fa <HAL_TIM_PWM_Stop+0xb6>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084f8:	e00b      	b.n	8008512 <HAL_TIM_PWM_Stop+0xce>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d104      	bne.n	800850a <HAL_TIM_PWM_Stop+0xc6>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008508:	e003      	b.n	8008512 <HAL_TIM_PWM_Stop+0xce>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	40010000 	.word	0x40010000
 8008520:	40010400 	.word	0x40010400

08008524 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e041      	b.n	80085ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d106      	bne.n	8008550 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f839 	bl	80085c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3304      	adds	r3, #4
 8008560:	4619      	mov	r1, r3
 8008562:	4610      	mov	r0, r2
 8008564:	f000 fcc0 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_IC_Start_IT+0x1e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	e013      	b.n	800861e <HAL_TIM_IC_Start_IT+0x46>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_IC_Start_IT+0x2e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008602:	b2db      	uxtb	r3, r3
 8008604:	e00b      	b.n	800861e <HAL_TIM_IC_Start_IT+0x46>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d104      	bne.n	8008616 <HAL_TIM_IC_Start_IT+0x3e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008612:	b2db      	uxtb	r3, r3
 8008614:	e003      	b.n	800861e <HAL_TIM_IC_Start_IT+0x46>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800861c:	b2db      	uxtb	r3, r3
 800861e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <HAL_TIM_IC_Start_IT+0x58>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800862c:	b2db      	uxtb	r3, r3
 800862e:	e013      	b.n	8008658 <HAL_TIM_IC_Start_IT+0x80>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b04      	cmp	r3, #4
 8008634:	d104      	bne.n	8008640 <HAL_TIM_IC_Start_IT+0x68>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800863c:	b2db      	uxtb	r3, r3
 800863e:	e00b      	b.n	8008658 <HAL_TIM_IC_Start_IT+0x80>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b08      	cmp	r3, #8
 8008644:	d104      	bne.n	8008650 <HAL_TIM_IC_Start_IT+0x78>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800864c:	b2db      	uxtb	r3, r3
 800864e:	e003      	b.n	8008658 <HAL_TIM_IC_Start_IT+0x80>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008656:	b2db      	uxtb	r3, r3
 8008658:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d102      	bne.n	8008666 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008660:	7b7b      	ldrb	r3, [r7, #13]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d001      	beq.n	800866a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e0cc      	b.n	8008804 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d104      	bne.n	800867a <HAL_TIM_IC_Start_IT+0xa2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008678:	e013      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0xca>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b04      	cmp	r3, #4
 800867e:	d104      	bne.n	800868a <HAL_TIM_IC_Start_IT+0xb2>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008688:	e00b      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0xca>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b08      	cmp	r3, #8
 800868e:	d104      	bne.n	800869a <HAL_TIM_IC_Start_IT+0xc2>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008698:	e003      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0xca>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <HAL_TIM_IC_Start_IT+0xda>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086b0:	e013      	b.n	80086da <HAL_TIM_IC_Start_IT+0x102>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d104      	bne.n	80086c2 <HAL_TIM_IC_Start_IT+0xea>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086c0:	e00b      	b.n	80086da <HAL_TIM_IC_Start_IT+0x102>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d104      	bne.n	80086d2 <HAL_TIM_IC_Start_IT+0xfa>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d0:	e003      	b.n	80086da <HAL_TIM_IC_Start_IT+0x102>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b0c      	cmp	r3, #12
 80086de:	d841      	bhi.n	8008764 <HAL_TIM_IC_Start_IT+0x18c>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <HAL_TIM_IC_Start_IT+0x110>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	0800871d 	.word	0x0800871d
 80086ec:	08008765 	.word	0x08008765
 80086f0:	08008765 	.word	0x08008765
 80086f4:	08008765 	.word	0x08008765
 80086f8:	0800872f 	.word	0x0800872f
 80086fc:	08008765 	.word	0x08008765
 8008700:	08008765 	.word	0x08008765
 8008704:	08008765 	.word	0x08008765
 8008708:	08008741 	.word	0x08008741
 800870c:	08008765 	.word	0x08008765
 8008710:	08008765 	.word	0x08008765
 8008714:	08008765 	.word	0x08008765
 8008718:	08008753 	.word	0x08008753
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0202 	orr.w	r2, r2, #2
 800872a:	60da      	str	r2, [r3, #12]
      break;
 800872c:	e01d      	b.n	800876a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0204 	orr.w	r2, r2, #4
 800873c:	60da      	str	r2, [r3, #12]
      break;
 800873e:	e014      	b.n	800876a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0208 	orr.w	r2, r2, #8
 800874e:	60da      	str	r2, [r3, #12]
      break;
 8008750:	e00b      	b.n	800876a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0210 	orr.w	r2, r2, #16
 8008760:	60da      	str	r2, [r3, #12]
      break;
 8008762:	e002      	b.n	800876a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
      break;
 8008768:	bf00      	nop
  }

  if (status == HAL_OK)
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d148      	bne.n	8008802 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2201      	movs	r2, #1
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 ffc9 	bl	8009710 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a22      	ldr	r2, [pc, #136]	; (800880c <HAL_TIM_IC_Start_IT+0x234>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d022      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d01d      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1e      	ldr	r2, [pc, #120]	; (8008810 <HAL_TIM_IC_Start_IT+0x238>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d018      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <HAL_TIM_IC_Start_IT+0x23c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <HAL_TIM_IC_Start_IT+0x240>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00e      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a19      	ldr	r2, [pc, #100]	; (800881c <HAL_TIM_IC_Start_IT+0x244>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d009      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a18      	ldr	r2, [pc, #96]	; (8008820 <HAL_TIM_IC_Start_IT+0x248>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d004      	beq.n	80087ce <HAL_TIM_IC_Start_IT+0x1f6>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a16      	ldr	r2, [pc, #88]	; (8008824 <HAL_TIM_IC_Start_IT+0x24c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d111      	bne.n	80087f2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b06      	cmp	r3, #6
 80087de:	d010      	beq.n	8008802 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f0:	e007      	b.n	8008802 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	40010000 	.word	0x40010000
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40010400 	.word	0x40010400
 8008820:	40014000 	.word	0x40014000
 8008824:	40001800 	.word	0x40001800

08008828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b02      	cmp	r3, #2
 800883c:	d122      	bne.n	8008884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b02      	cmp	r3, #2
 800884a:	d11b      	bne.n	8008884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0202 	mvn.w	r2, #2
 8008854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fb1d 	bl	8008eaa <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fb0f 	bl	8008e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fb20 	bl	8008ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b04      	cmp	r3, #4
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b04      	cmp	r3, #4
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0204 	mvn.w	r2, #4
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 faf3 	bl	8008eaa <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fae5 	bl	8008e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 faf6 	bl	8008ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0208 	mvn.w	r2, #8
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2204      	movs	r2, #4
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fac9 	bl	8008eaa <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fabb 	bl	8008e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 facc 	bl	8008ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b10      	cmp	r3, #16
 8008938:	d122      	bne.n	8008980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b10      	cmp	r3, #16
 8008946:	d11b      	bne.n	8008980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0210 	mvn.w	r2, #16
 8008950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2208      	movs	r2, #8
 8008956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fa9f 	bl	8008eaa <HAL_TIM_IC_CaptureCallback>
 800896c:	e005      	b.n	800897a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa91 	bl	8008e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 faa2 	bl	8008ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b01      	cmp	r3, #1
 800898c:	d10e      	bne.n	80089ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b01      	cmp	r3, #1
 800899a:	d107      	bne.n	80089ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0201 	mvn.w	r2, #1
 80089a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa6b 	bl	8008e82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b80      	cmp	r3, #128	; 0x80
 80089b8:	d10e      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c4:	2b80      	cmp	r3, #128	; 0x80
 80089c6:	d107      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 ff9a 	bl	800990c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	d10e      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f0:	2b40      	cmp	r3, #64	; 0x40
 80089f2:	d107      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa67 	bl	8008ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d10e      	bne.n	8008a30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d107      	bne.n	8008a30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f06f 0220 	mvn.w	r2, #32
 8008a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 ff64 	bl	80098f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e088      	b.n	8008b68 <HAL_TIM_IC_ConfigChannel+0x130>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11b      	bne.n	8008a9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6819      	ldr	r1, [r3, #0]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f000 fc88 	bl	8009388 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699a      	ldr	r2, [r3, #24]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 020c 	bic.w	r2, r2, #12
 8008a86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6999      	ldr	r1, [r3, #24]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	619a      	str	r2, [r3, #24]
 8008a9a:	e060      	b.n	8008b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d11c      	bne.n	8008adc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6819      	ldr	r1, [r3, #0]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f000 fd0c 	bl	80094ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699a      	ldr	r2, [r3, #24]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ac4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6999      	ldr	r1, [r3, #24]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	021a      	lsls	r2, r3, #8
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	619a      	str	r2, [r3, #24]
 8008ada:	e040      	b.n	8008b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d11b      	bne.n	8008b1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6819      	ldr	r1, [r3, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f000 fd59 	bl	80095a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 020c 	bic.w	r2, r2, #12
 8008b04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69d9      	ldr	r1, [r3, #28]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	61da      	str	r2, [r3, #28]
 8008b18:	e021      	b.n	8008b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b0c      	cmp	r3, #12
 8008b1e:	d11c      	bne.n	8008b5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	6819      	ldr	r1, [r3, #0]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f000 fd76 	bl	8009620 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69da      	ldr	r2, [r3, #28]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69d9      	ldr	r1, [r3, #28]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	021a      	lsls	r2, r3, #8
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	61da      	str	r2, [r3, #28]
 8008b58:	e001      	b.n	8008b5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e0ae      	b.n	8008cec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b0c      	cmp	r3, #12
 8008b9a:	f200 809f 	bhi.w	8008cdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bd9 	.word	0x08008bd9
 8008ba8:	08008cdd 	.word	0x08008cdd
 8008bac:	08008cdd 	.word	0x08008cdd
 8008bb0:	08008cdd 	.word	0x08008cdd
 8008bb4:	08008c19 	.word	0x08008c19
 8008bb8:	08008cdd 	.word	0x08008cdd
 8008bbc:	08008cdd 	.word	0x08008cdd
 8008bc0:	08008cdd 	.word	0x08008cdd
 8008bc4:	08008c5b 	.word	0x08008c5b
 8008bc8:	08008cdd 	.word	0x08008cdd
 8008bcc:	08008cdd 	.word	0x08008cdd
 8008bd0:	08008cdd 	.word	0x08008cdd
 8008bd4:	08008c9b 	.word	0x08008c9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fa22 	bl	8009028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0204 	bic.w	r2, r2, #4
 8008c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6999      	ldr	r1, [r3, #24]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	619a      	str	r2, [r3, #24]
      break;
 8008c16:	e064      	b.n	8008ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fa72 	bl	8009108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6999      	ldr	r1, [r3, #24]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	021a      	lsls	r2, r3, #8
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	619a      	str	r2, [r3, #24]
      break;
 8008c58:	e043      	b.n	8008ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 fac7 	bl	80091f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0208 	orr.w	r2, r2, #8
 8008c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0204 	bic.w	r2, r2, #4
 8008c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69d9      	ldr	r1, [r3, #28]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	61da      	str	r2, [r3, #28]
      break;
 8008c98:	e023      	b.n	8008ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68b9      	ldr	r1, [r7, #8]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fb1b 	bl	80092dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69da      	ldr	r2, [r3, #28]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69d9      	ldr	r1, [r3, #28]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	021a      	lsls	r2, r3, #8
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	61da      	str	r2, [r3, #28]
      break;
 8008cda:	e002      	b.n	8008ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_TIM_ConfigClockSource+0x1c>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e0b4      	b.n	8008e7a <HAL_TIM_ConfigClockSource+0x186>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d48:	d03e      	beq.n	8008dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8008d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d4e:	f200 8087 	bhi.w	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d56:	f000 8086 	beq.w	8008e66 <HAL_TIM_ConfigClockSource+0x172>
 8008d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5e:	d87f      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d60:	2b70      	cmp	r3, #112	; 0x70
 8008d62:	d01a      	beq.n	8008d9a <HAL_TIM_ConfigClockSource+0xa6>
 8008d64:	2b70      	cmp	r3, #112	; 0x70
 8008d66:	d87b      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d68:	2b60      	cmp	r3, #96	; 0x60
 8008d6a:	d050      	beq.n	8008e0e <HAL_TIM_ConfigClockSource+0x11a>
 8008d6c:	2b60      	cmp	r3, #96	; 0x60
 8008d6e:	d877      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d70:	2b50      	cmp	r3, #80	; 0x50
 8008d72:	d03c      	beq.n	8008dee <HAL_TIM_ConfigClockSource+0xfa>
 8008d74:	2b50      	cmp	r3, #80	; 0x50
 8008d76:	d873      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d058      	beq.n	8008e2e <HAL_TIM_ConfigClockSource+0x13a>
 8008d7c:	2b40      	cmp	r3, #64	; 0x40
 8008d7e:	d86f      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d80:	2b30      	cmp	r3, #48	; 0x30
 8008d82:	d064      	beq.n	8008e4e <HAL_TIM_ConfigClockSource+0x15a>
 8008d84:	2b30      	cmp	r3, #48	; 0x30
 8008d86:	d86b      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d060      	beq.n	8008e4e <HAL_TIM_ConfigClockSource+0x15a>
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d867      	bhi.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d05c      	beq.n	8008e4e <HAL_TIM_ConfigClockSource+0x15a>
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	d05a      	beq.n	8008e4e <HAL_TIM_ConfigClockSource+0x15a>
 8008d98:	e062      	b.n	8008e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	6899      	ldr	r1, [r3, #8]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f000 fc91 	bl	80096d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	609a      	str	r2, [r3, #8]
      break;
 8008dc6:	e04f      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	6899      	ldr	r1, [r3, #8]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f000 fc7a 	bl	80096d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dea:	609a      	str	r2, [r3, #8]
      break;
 8008dec:	e03c      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	6859      	ldr	r1, [r3, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f000 fb38 	bl	8009470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2150      	movs	r1, #80	; 0x50
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fc47 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 8008e0c:	e02c      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6859      	ldr	r1, [r3, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f000 fb94 	bl	8009548 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2160      	movs	r1, #96	; 0x60
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fc37 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 8008e2c:	e01c      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	6859      	ldr	r1, [r3, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f000 fb18 	bl	8009470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2140      	movs	r1, #64	; 0x40
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fc27 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 8008e4c:	e00c      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4619      	mov	r1, r3
 8008e58:	4610      	mov	r0, r2
 8008e5a:	f000 fc1e 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 8008e5e:	e003      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
      break;
 8008e64:	e000      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
	...

08008ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a40      	ldr	r2, [pc, #256]	; (8008ffc <TIM_Base_SetConfig+0x114>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d013      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f06:	d00f      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a3d      	ldr	r2, [pc, #244]	; (8009000 <TIM_Base_SetConfig+0x118>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00b      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a3c      	ldr	r2, [pc, #240]	; (8009004 <TIM_Base_SetConfig+0x11c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a3b      	ldr	r2, [pc, #236]	; (8009008 <TIM_Base_SetConfig+0x120>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a3a      	ldr	r2, [pc, #232]	; (800900c <TIM_Base_SetConfig+0x124>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d108      	bne.n	8008f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2f      	ldr	r2, [pc, #188]	; (8008ffc <TIM_Base_SetConfig+0x114>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d02b      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f48:	d027      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a2c      	ldr	r2, [pc, #176]	; (8009000 <TIM_Base_SetConfig+0x118>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d023      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a2b      	ldr	r2, [pc, #172]	; (8009004 <TIM_Base_SetConfig+0x11c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d01f      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <TIM_Base_SetConfig+0x120>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d01b      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a29      	ldr	r2, [pc, #164]	; (800900c <TIM_Base_SetConfig+0x124>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d017      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a28      	ldr	r2, [pc, #160]	; (8009010 <TIM_Base_SetConfig+0x128>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d013      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a27      	ldr	r2, [pc, #156]	; (8009014 <TIM_Base_SetConfig+0x12c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00f      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a26      	ldr	r2, [pc, #152]	; (8009018 <TIM_Base_SetConfig+0x130>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00b      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a25      	ldr	r2, [pc, #148]	; (800901c <TIM_Base_SetConfig+0x134>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d007      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a24      	ldr	r2, [pc, #144]	; (8009020 <TIM_Base_SetConfig+0x138>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d003      	beq.n	8008f9a <TIM_Base_SetConfig+0xb2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a23      	ldr	r2, [pc, #140]	; (8009024 <TIM_Base_SetConfig+0x13c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d108      	bne.n	8008fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <TIM_Base_SetConfig+0x114>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d003      	beq.n	8008fe0 <TIM_Base_SetConfig+0xf8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a0c      	ldr	r2, [pc, #48]	; (800900c <TIM_Base_SetConfig+0x124>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d103      	bne.n	8008fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	615a      	str	r2, [r3, #20]
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40000400 	.word	0x40000400
 8009004:	40000800 	.word	0x40000800
 8009008:	40000c00 	.word	0x40000c00
 800900c:	40010400 	.word	0x40010400
 8009010:	40014000 	.word	0x40014000
 8009014:	40014400 	.word	0x40014400
 8009018:	40014800 	.word	0x40014800
 800901c:	40001800 	.word	0x40001800
 8009020:	40001c00 	.word	0x40001c00
 8009024:	40002000 	.word	0x40002000

08009028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	f023 0201 	bic.w	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f023 0302 	bic.w	r3, r3, #2
 8009070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a20      	ldr	r2, [pc, #128]	; (8009100 <TIM_OC1_SetConfig+0xd8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_OC1_SetConfig+0x64>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a1f      	ldr	r2, [pc, #124]	; (8009104 <TIM_OC1_SetConfig+0xdc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d10c      	bne.n	80090a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0308 	bic.w	r3, r3, #8
 8009092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 0304 	bic.w	r3, r3, #4
 80090a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <TIM_OC1_SetConfig+0xd8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d003      	beq.n	80090b6 <TIM_OC1_SetConfig+0x8e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a14      	ldr	r2, [pc, #80]	; (8009104 <TIM_OC1_SetConfig+0xdc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d111      	bne.n	80090da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	621a      	str	r2, [r3, #32]
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	40010000 	.word	0x40010000
 8009104:	40010400 	.word	0x40010400

08009108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	f023 0210 	bic.w	r2, r3, #16
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800913e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f023 0320 	bic.w	r3, r3, #32
 8009152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a22      	ldr	r2, [pc, #136]	; (80091ec <TIM_OC2_SetConfig+0xe4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d003      	beq.n	8009170 <TIM_OC2_SetConfig+0x68>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a21      	ldr	r2, [pc, #132]	; (80091f0 <TIM_OC2_SetConfig+0xe8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10d      	bne.n	800918c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	4313      	orrs	r3, r2
 8009182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a17      	ldr	r2, [pc, #92]	; (80091ec <TIM_OC2_SetConfig+0xe4>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d003      	beq.n	800919c <TIM_OC2_SetConfig+0x94>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a16      	ldr	r2, [pc, #88]	; (80091f0 <TIM_OC2_SetConfig+0xe8>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d113      	bne.n	80091c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40010000 	.word	0x40010000
 80091f0:	40010400 	.word	0x40010400

080091f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800923c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <TIM_OC3_SetConfig+0xe0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d003      	beq.n	800925a <TIM_OC3_SetConfig+0x66>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a20      	ldr	r2, [pc, #128]	; (80092d8 <TIM_OC3_SetConfig+0xe4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d10d      	bne.n	8009276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	021b      	lsls	r3, r3, #8
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a16      	ldr	r2, [pc, #88]	; (80092d4 <TIM_OC3_SetConfig+0xe0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d003      	beq.n	8009286 <TIM_OC3_SetConfig+0x92>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <TIM_OC3_SetConfig+0xe4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d113      	bne.n	80092ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	621a      	str	r2, [r3, #32]
}
 80092c8:	bf00      	nop
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40010400 	.word	0x40010400

080092dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	4313      	orrs	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	031b      	lsls	r3, r3, #12
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a12      	ldr	r2, [pc, #72]	; (8009380 <TIM_OC4_SetConfig+0xa4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d003      	beq.n	8009344 <TIM_OC4_SetConfig+0x68>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a11      	ldr	r2, [pc, #68]	; (8009384 <TIM_OC4_SetConfig+0xa8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d109      	bne.n	8009358 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800934a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	019b      	lsls	r3, r3, #6
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	621a      	str	r2, [r3, #32]
}
 8009372:	bf00      	nop
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	40010000 	.word	0x40010000
 8009384:	40010400 	.word	0x40010400

08009388 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f023 0201 	bic.w	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4a28      	ldr	r2, [pc, #160]	; (8009454 <TIM_TI1_SetConfig+0xcc>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d01b      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093bc:	d017      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4a25      	ldr	r2, [pc, #148]	; (8009458 <TIM_TI1_SetConfig+0xd0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4a24      	ldr	r2, [pc, #144]	; (800945c <TIM_TI1_SetConfig+0xd4>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00f      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4a23      	ldr	r2, [pc, #140]	; (8009460 <TIM_TI1_SetConfig+0xd8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d00b      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4a22      	ldr	r2, [pc, #136]	; (8009464 <TIM_TI1_SetConfig+0xdc>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d007      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4a21      	ldr	r2, [pc, #132]	; (8009468 <TIM_TI1_SetConfig+0xe0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d003      	beq.n	80093ee <TIM_TI1_SetConfig+0x66>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4a20      	ldr	r2, [pc, #128]	; (800946c <TIM_TI1_SetConfig+0xe4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d101      	bne.n	80093f2 <TIM_TI1_SetConfig+0x6a>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <TIM_TI1_SetConfig+0x6c>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d008      	beq.n	800940a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	e003      	b.n	8009412 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	b2db      	uxtb	r3, r3
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f023 030a 	bic.w	r3, r3, #10
 800942c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f003 030a 	and.w	r3, r3, #10
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4313      	orrs	r3, r2
 8009438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	621a      	str	r2, [r3, #32]
}
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	40010000 	.word	0x40010000
 8009458:	40000400 	.word	0x40000400
 800945c:	40000800 	.word	0x40000800
 8009460:	40000c00 	.word	0x40000c00
 8009464:	40010400 	.word	0x40010400
 8009468:	40014000 	.word	0x40014000
 800946c:	40001800 	.word	0x40001800

08009470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f023 0201 	bic.w	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800949a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f023 030a 	bic.w	r3, r3, #10
 80094ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	621a      	str	r2, [r3, #32]
}
 80094c2:	bf00      	nop
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b087      	sub	sp, #28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	f023 0210 	bic.w	r2, r3, #16
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800950c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	031b      	lsls	r3, r3, #12
 8009512:	b29b      	uxth	r3, r3
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	4313      	orrs	r3, r2
 8009518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009520:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	011b      	lsls	r3, r3, #4
 8009526:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	621a      	str	r2, [r3, #32]
}
 800953c:	bf00      	nop
 800953e:	371c      	adds	r7, #28
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f023 0210 	bic.w	r2, r3, #16
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009572:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	031b      	lsls	r3, r3, #12
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4313      	orrs	r3, r2
 800958e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	621a      	str	r2, [r3, #32]
}
 800959c:	bf00      	nop
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80095f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	4313      	orrs	r3, r2
 8009606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	621a      	str	r2, [r3, #32]
}
 8009614:	bf00      	nop
 8009616:	371c      	adds	r7, #28
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800964c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800965e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	031b      	lsls	r3, r3, #12
 8009664:	b29b      	uxth	r3, r3
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009672:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	031b      	lsls	r3, r3, #12
 8009678:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	621a      	str	r2, [r3, #32]
}
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f043 0307 	orr.w	r3, r3, #7
 80096bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	609a      	str	r2, [r3, #8]
}
 80096c4:	bf00      	nop
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	021a      	lsls	r2, r3, #8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	609a      	str	r2, [r3, #8]
}
 8009704:	bf00      	nop
 8009706:	371c      	adds	r7, #28
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f003 031f 	and.w	r3, r3, #31
 8009722:	2201      	movs	r2, #1
 8009724:	fa02 f303 	lsl.w	r3, r2, r3
 8009728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a1a      	ldr	r2, [r3, #32]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	43db      	mvns	r3, r3
 8009732:	401a      	ands	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 031f 	and.w	r3, r3, #31
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	fa01 f303 	lsl.w	r3, r1, r3
 8009748:	431a      	orrs	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	621a      	str	r2, [r3, #32]
}
 800974e:	bf00      	nop
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
	...

0800975c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009770:	2302      	movs	r3, #2
 8009772:	e05a      	b.n	800982a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a21      	ldr	r2, [pc, #132]	; (8009838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d022      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c0:	d01d      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1d      	ldr	r2, [pc, #116]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d018      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1b      	ldr	r2, [pc, #108]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a18      	ldr	r2, [pc, #96]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a17      	ldr	r2, [pc, #92]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a15      	ldr	r2, [pc, #84]	; (8009850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d10c      	bne.n	8009818 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4313      	orrs	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40010400 	.word	0x40010400
 800984c:	40014000 	.word	0x40014000
 8009850:	40001800 	.word	0x40001800

08009854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800986c:	2302      	movs	r3, #2
 800986e:	e03d      	b.n	80098ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e03f      	b.n	80099b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7fa fd02 	bl	8004350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2224      	movs	r2, #36	; 0x24
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 ff65 	bl	800a834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	691a      	ldr	r2, [r3, #16]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68da      	ldr	r2, [r3, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b08a      	sub	sp, #40	; 0x28
 80099be:	af02      	add	r7, sp, #8
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	603b      	str	r3, [r7, #0]
 80099c6:	4613      	mov	r3, r2
 80099c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80099ca:	2300      	movs	r3, #0
 80099cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d17c      	bne.n	8009ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <HAL_UART_Transmit+0x2c>
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e075      	b.n	8009ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d101      	bne.n	80099f8 <HAL_UART_Transmit+0x3e>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e06e      	b.n	8009ad6 <HAL_UART_Transmit+0x11c>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2221      	movs	r2, #33	; 0x21
 8009a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a0e:	f7fb fb03 	bl	8005018 <HAL_GetTick>
 8009a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	88fa      	ldrh	r2, [r7, #6]
 8009a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	88fa      	ldrh	r2, [r7, #6]
 8009a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a28:	d108      	bne.n	8009a3c <HAL_UART_Transmit+0x82>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d104      	bne.n	8009a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009a32:	2300      	movs	r3, #0
 8009a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	61bb      	str	r3, [r7, #24]
 8009a3a:	e003      	b.n	8009a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009a4c:	e02a      	b.n	8009aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2200      	movs	r2, #0
 8009a56:	2180      	movs	r1, #128	; 0x80
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fc21 	bl	800a2a0 <UART_WaitOnFlagUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e036      	b.n	8009ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10b      	bne.n	8009a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	3302      	adds	r3, #2
 8009a82:	61bb      	str	r3, [r7, #24]
 8009a84:	e007      	b.n	8009a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	3301      	adds	r3, #1
 8009a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1cf      	bne.n	8009a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2140      	movs	r1, #64	; 0x40
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fbf1 	bl	800a2a0 <UART_WaitOnFlagUntilTimeout>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e006      	b.n	8009ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e000      	b.n	8009ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ad4:	2302      	movs	r3, #2
  }
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	d11d      	bne.n	8009b34 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_UART_Receive_DMA+0x26>
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e016      	b.n	8009b36 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Receive_DMA+0x38>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e00f      	b.n	8009b36 <HAL_UART_Receive_DMA+0x58>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b24:	88fb      	ldrh	r3, [r7, #6]
 8009b26:	461a      	mov	r2, r3
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 fc26 	bl	800a37c <UART_Start_Receive_DMA>
 8009b30:	4603      	mov	r3, r0
 8009b32:	e000      	b.n	8009b36 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009b34:	2302      	movs	r3, #2
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b0ba      	sub	sp, #232	; 0xe8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10f      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x66>
 8009b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b96:	f003 0320 	and.w	r3, r3, #32
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fd8d 	bl	800a6be <UART_Receive_IT>
      return;
 8009ba4:	e256      	b.n	800a054 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 80de 	beq.w	8009d6c <HAL_UART_IRQHandler+0x22c>
 8009bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 80d1 	beq.w	8009d6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <HAL_UART_IRQHandler+0xae>
 8009bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be6:	f043 0201 	orr.w	r2, r3, #1
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <HAL_UART_IRQHandler+0xd2>
 8009bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0a:	f043 0202 	orr.w	r2, r3, #2
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00b      	beq.n	8009c36 <HAL_UART_IRQHandler+0xf6>
 8009c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d005      	beq.n	8009c36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	f043 0204 	orr.w	r2, r3, #4
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d011      	beq.n	8009c66 <HAL_UART_IRQHandler+0x126>
 8009c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d105      	bne.n	8009c5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f043 0208 	orr.w	r2, r3, #8
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 81ed 	beq.w	800a04a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d008      	beq.n	8009c8e <HAL_UART_IRQHandler+0x14e>
 8009c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c80:	f003 0320 	and.w	r3, r3, #32
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fd18 	bl	800a6be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c98:	2b40      	cmp	r3, #64	; 0x40
 8009c9a:	bf0c      	ite	eq
 8009c9c:	2301      	moveq	r3, #1
 8009c9e:	2300      	movne	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f003 0308 	and.w	r3, r3, #8
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <HAL_UART_IRQHandler+0x17a>
 8009cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d04f      	beq.n	8009d5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fc20 	bl	800a500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cca:	2b40      	cmp	r3, #64	; 0x40
 8009ccc:	d141      	bne.n	8009d52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3314      	adds	r3, #20
 8009cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3314      	adds	r3, #20
 8009cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1d9      	bne.n	8009cce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d013      	beq.n	8009d4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	4a7d      	ldr	r2, [pc, #500]	; (8009f1c <HAL_UART_IRQHandler+0x3dc>)
 8009d28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fc faa8 	bl	8006284 <HAL_DMA_Abort_IT>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d016      	beq.n	8009d68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d44:	4610      	mov	r0, r2
 8009d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d48:	e00e      	b.n	8009d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f99a 	bl	800a084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d50:	e00a      	b.n	8009d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f996 	bl	800a084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d58:	e006      	b.n	8009d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f992 	bl	800a084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009d66:	e170      	b.n	800a04a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d68:	bf00      	nop
    return;
 8009d6a:	e16e      	b.n	800a04a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	f040 814a 	bne.w	800a00a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7a:	f003 0310 	and.w	r3, r3, #16
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 8143 	beq.w	800a00a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d88:	f003 0310 	and.w	r3, r3, #16
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 813c 	beq.w	800a00a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60bb      	str	r3, [r7, #8]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	60bb      	str	r3, [r7, #8]
 8009da6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db2:	2b40      	cmp	r3, #64	; 0x40
 8009db4:	f040 80b4 	bne.w	8009f20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 8140 	beq.w	800a04e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	f080 8139 	bcs.w	800a04e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009de2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dee:	f000 8088 	beq.w	8009f02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	330c      	adds	r3, #12
 8009e1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1d9      	bne.n	8009df2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3314      	adds	r3, #20
 8009e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e50:	f023 0301 	bic.w	r3, r3, #1
 8009e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3314      	adds	r3, #20
 8009e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e1      	bne.n	8009e3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3314      	adds	r3, #20
 8009e80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3314      	adds	r3, #20
 8009e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1e3      	bne.n	8009e7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	330c      	adds	r3, #12
 8009ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eca:	e853 3f00 	ldrex	r3, [r3]
 8009ece:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ed2:	f023 0310 	bic.w	r3, r3, #16
 8009ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	330c      	adds	r3, #12
 8009ee0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ee4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ee6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009eea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e3      	bne.n	8009ec0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fc f951 	bl	80061a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f8c0 	bl	800a098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f18:	e099      	b.n	800a04e <HAL_UART_IRQHandler+0x50e>
 8009f1a:	bf00      	nop
 8009f1c:	0800a5c7 	.word	0x0800a5c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 808b 	beq.w	800a052 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 8086 	beq.w	800a052 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	330c      	adds	r3, #12
 8009f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	330c      	adds	r3, #12
 8009f66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009f6a:	647a      	str	r2, [r7, #68]	; 0x44
 8009f6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1e3      	bne.n	8009f46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3314      	adds	r3, #20
 8009f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f8e:	6a3b      	ldr	r3, [r7, #32]
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e3      	bne.n	8009f7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2220      	movs	r2, #32
 8009fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	330c      	adds	r3, #12
 8009fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0310 	bic.w	r3, r3, #16
 8009fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009fe8:	61fa      	str	r2, [r7, #28]
 8009fea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	69b9      	ldr	r1, [r7, #24]
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e3      	bne.n	8009fc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f848 	bl	800a098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a008:	e023      	b.n	800a052 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <HAL_UART_IRQHandler+0x4ea>
 800a016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fae3 	bl	800a5ee <UART_Transmit_IT>
    return;
 800a028:	e014      	b.n	800a054 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00e      	beq.n	800a054 <HAL_UART_IRQHandler+0x514>
 800a036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fb23 	bl	800a68e <UART_EndTransmit_IT>
    return;
 800a048:	e004      	b.n	800a054 <HAL_UART_IRQHandler+0x514>
    return;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <HAL_UART_IRQHandler+0x514>
      return;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_UART_IRQHandler+0x514>
      return;
 800a052:	bf00      	nop
  }
}
 800a054:	37e8      	adds	r7, #232	; 0xe8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop

0800a05c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b09c      	sub	sp, #112	; 0x70
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d172      	bne.n	800a1b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	330c      	adds	r3, #12
 800a0d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	330c      	adds	r3, #12
 800a0f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0f2:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0fa:	e841 2300 	strex	r3, r2, [r1]
 800a0fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1e5      	bne.n	800a0d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3314      	adds	r3, #20
 800a10c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	f023 0301 	bic.w	r3, r3, #1
 800a11c:	667b      	str	r3, [r7, #100]	; 0x64
 800a11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3314      	adds	r3, #20
 800a124:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a126:	647a      	str	r2, [r7, #68]	; 0x44
 800a128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a12c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e5      	bne.n	800a106 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a13a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3314      	adds	r3, #20
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	e853 3f00 	ldrex	r3, [r3]
 800a148:	623b      	str	r3, [r7, #32]
   return(result);
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a150:	663b      	str	r3, [r7, #96]	; 0x60
 800a152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3314      	adds	r3, #20
 800a158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a15a:	633a      	str	r2, [r7, #48]	; 0x30
 800a15c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e5      	bne.n	800a13a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a16e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a170:	2220      	movs	r2, #32
 800a172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d119      	bne.n	800a1b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a17e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	330c      	adds	r3, #12
 800a184:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f023 0310 	bic.w	r3, r3, #16
 800a194:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	330c      	adds	r3, #12
 800a19c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a19e:	61fa      	str	r2, [r7, #28]
 800a1a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	69b9      	ldr	r1, [r7, #24]
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d106      	bne.n	800a1c8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a1c2:	f7ff ff69 	bl	800a098 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1c6:	e002      	b.n	800a1ce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a1c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a1ca:	f7f8 fefd 	bl	8002fc8 <HAL_UART_RxCpltCallback>
}
 800a1ce:	bf00      	nop
 800a1d0:	3770      	adds	r7, #112	; 0x70
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d108      	bne.n	800a1fe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1f0:	085b      	lsrs	r3, r3, #1
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff ff4e 	bl	800a098 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1fc:	e002      	b.n	800a204 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff ff36 	bl	800a070 <HAL_UART_RxHalfCpltCallback>
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a228:	2b80      	cmp	r3, #128	; 0x80
 800a22a:	bf0c      	ite	eq
 800a22c:	2301      	moveq	r3, #1
 800a22e:	2300      	movne	r3, #0
 800a230:	b2db      	uxtb	r3, r3
 800a232:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b21      	cmp	r3, #33	; 0x21
 800a23e:	d108      	bne.n	800a252 <UART_DMAError+0x46>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d005      	beq.n	800a252 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2200      	movs	r2, #0
 800a24a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f000 f92f 	bl	800a4b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	bf0c      	ite	eq
 800a260:	2301      	moveq	r3, #1
 800a262:	2300      	movne	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b22      	cmp	r3, #34	; 0x22
 800a272:	d108      	bne.n	800a286 <UART_DMAError+0x7a>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a280:	68b8      	ldr	r0, [r7, #8]
 800a282:	f000 f93d 	bl	800a500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	f043 0210 	orr.w	r2, r3, #16
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	f7ff fef6 	bl	800a084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b090      	sub	sp, #64	; 0x40
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2b0:	e050      	b.n	800a354 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2b8:	d04c      	beq.n	800a354 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d007      	beq.n	800a2d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2c0:	f7fa feaa 	bl	8005018 <HAL_GetTick>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d241      	bcs.n	800a354 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	330c      	adds	r3, #12
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2f0:	637a      	str	r2, [r7, #52]	; 0x34
 800a2f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e5      	bne.n	800a2d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3314      	adds	r3, #20
 800a30a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	613b      	str	r3, [r7, #16]
   return(result);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f023 0301 	bic.w	r3, r3, #1
 800a31a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3314      	adds	r3, #20
 800a322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a324:	623a      	str	r2, [r7, #32]
 800a326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	69f9      	ldr	r1, [r7, #28]
 800a32a:	6a3a      	ldr	r2, [r7, #32]
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	61bb      	str	r3, [r7, #24]
   return(result);
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e5      	bne.n	800a304 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e00f      	b.n	800a374 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	4013      	ands	r3, r2
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	429a      	cmp	r2, r3
 800a362:	bf0c      	ite	eq
 800a364:	2301      	moveq	r3, #1
 800a366:	2300      	movne	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d09f      	beq.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3740      	adds	r7, #64	; 0x40
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b098      	sub	sp, #96	; 0x60
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2222      	movs	r2, #34	; 0x22
 800a3a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a8:	4a3e      	ldr	r2, [pc, #248]	; (800a4a4 <UART_Start_Receive_DMA+0x128>)
 800a3aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b0:	4a3d      	ldr	r2, [pc, #244]	; (800a4a8 <UART_Start_Receive_DMA+0x12c>)
 800a3b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	4a3c      	ldr	r2, [pc, #240]	; (800a4ac <UART_Start_Receive_DMA+0x130>)
 800a3ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a3c4:	f107 0308 	add.w	r3, r7, #8
 800a3c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	f7fb fe8a 	bl	80060f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	613b      	str	r3, [r7, #16]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	330c      	adds	r3, #12
 800a404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a414:	65bb      	str	r3, [r7, #88]	; 0x58
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	330c      	adds	r3, #12
 800a41c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a41e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a420:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a424:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e5      	bne.n	800a3fe <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3314      	adds	r3, #20
 800a438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	f043 0301 	orr.w	r3, r3, #1
 800a448:	657b      	str	r3, [r7, #84]	; 0x54
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3314      	adds	r3, #20
 800a450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a452:	63ba      	str	r2, [r7, #56]	; 0x38
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e5      	bne.n	800a432 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3314      	adds	r3, #20
 800a46c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	e853 3f00 	ldrex	r3, [r3]
 800a474:	617b      	str	r3, [r7, #20]
   return(result);
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a47c:	653b      	str	r3, [r7, #80]	; 0x50
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3314      	adds	r3, #20
 800a484:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a486:	627a      	str	r2, [r7, #36]	; 0x24
 800a488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48a:	6a39      	ldr	r1, [r7, #32]
 800a48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48e:	e841 2300 	strex	r3, r2, [r1]
 800a492:	61fb      	str	r3, [r7, #28]
   return(result);
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1e5      	bne.n	800a466 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3760      	adds	r7, #96	; 0x60
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	0800a0b1 	.word	0x0800a0b1
 800a4a8:	0800a1d7 	.word	0x0800a1d7
 800a4ac:	0800a20d 	.word	0x0800a20d

0800a4b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b089      	sub	sp, #36	; 0x24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	330c      	adds	r3, #12
 800a4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	e853 3f00 	ldrex	r3, [r3]
 800a4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	61ba      	str	r2, [r7, #24]
 800a4da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	6979      	ldr	r1, [r7, #20]
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e5      	bne.n	800a4b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a4f4:	bf00      	nop
 800a4f6:	3724      	adds	r7, #36	; 0x24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b095      	sub	sp, #84	; 0x54
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	330c      	adds	r3, #12
 800a50e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a51e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	330c      	adds	r3, #12
 800a526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a528:	643a      	str	r2, [r7, #64]	; 0x40
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a52e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e5      	bne.n	800a508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	64bb      	str	r3, [r7, #72]	; 0x48
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a55c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a55e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e5      	bne.n	800a53c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a574:	2b01      	cmp	r3, #1
 800a576:	d119      	bne.n	800a5ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	330c      	adds	r3, #12
 800a57e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	60bb      	str	r3, [r7, #8]
   return(result);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f023 0310 	bic.w	r3, r3, #16
 800a58e:	647b      	str	r3, [r7, #68]	; 0x44
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	330c      	adds	r3, #12
 800a596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a598:	61ba      	str	r2, [r7, #24]
 800a59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59c:	6979      	ldr	r1, [r7, #20]
 800a59e:	69ba      	ldr	r2, [r7, #24]
 800a5a0:	e841 2300 	strex	r3, r2, [r1]
 800a5a4:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1e5      	bne.n	800a578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a5ba:	bf00      	nop
 800a5bc:	3754      	adds	r7, #84	; 0x54
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7ff fd4f 	bl	800a084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b085      	sub	sp, #20
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b21      	cmp	r3, #33	; 0x21
 800a600:	d13e      	bne.n	800a680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a60a:	d114      	bne.n	800a636 <UART_Transmit_IT+0x48>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d110      	bne.n	800a636 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a1b      	ldr	r3, [r3, #32]
 800a618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	1c9a      	adds	r2, r3, #2
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	621a      	str	r2, [r3, #32]
 800a634:	e008      	b.n	800a648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	1c59      	adds	r1, r3, #1
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6211      	str	r1, [r2, #32]
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	b29b      	uxth	r3, r3
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	4619      	mov	r1, r3
 800a656:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10f      	bne.n	800a67c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a66a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68da      	ldr	r2, [r3, #12]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a67a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e000      	b.n	800a682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a680:	2302      	movs	r3, #2
  }
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fcd4 	bl	800a05c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b08c      	sub	sp, #48	; 0x30
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b22      	cmp	r3, #34	; 0x22
 800a6d0:	f040 80ab 	bne.w	800a82a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6dc:	d117      	bne.n	800a70e <UART_Receive_IT+0x50>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d113      	bne.n	800a70e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	1c9a      	adds	r2, r3, #2
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	629a      	str	r2, [r3, #40]	; 0x28
 800a70c:	e026      	b.n	800a75c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a714:	2300      	movs	r3, #0
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a720:	d007      	beq.n	800a732 <UART_Receive_IT+0x74>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10a      	bne.n	800a740 <UART_Receive_IT+0x82>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	701a      	strb	r2, [r3, #0]
 800a73e:	e008      	b.n	800a752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a760:	b29b      	uxth	r3, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	b29b      	uxth	r3, r3
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	4619      	mov	r1, r3
 800a76a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d15a      	bne.n	800a826 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f022 0220 	bic.w	r2, r2, #32
 800a77e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a78e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695a      	ldr	r2, [r3, #20]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 0201 	bic.w	r2, r2, #1
 800a79e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d135      	bne.n	800a81c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f023 0310 	bic.w	r3, r3, #16
 800a7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	330c      	adds	r3, #12
 800a7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d6:	623a      	str	r2, [r7, #32]
 800a7d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	69f9      	ldr	r1, [r7, #28]
 800a7dc:	6a3a      	ldr	r2, [r7, #32]
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e5      	bne.n	800a7b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	d10a      	bne.n	800a80e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff fc3f 	bl	800a098 <HAL_UARTEx_RxEventCallback>
 800a81a:	e002      	b.n	800a822 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7f8 fbd3 	bl	8002fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	e002      	b.n	800a82c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	e000      	b.n	800a82c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a82a:	2302      	movs	r3, #2
  }
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3730      	adds	r7, #48	; 0x30
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	b09f      	sub	sp, #124	; 0x7c
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84a:	68d9      	ldr	r1, [r3, #12]
 800a84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	ea40 0301 	orr.w	r3, r0, r1
 800a854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	431a      	orrs	r2, r3
 800a860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	431a      	orrs	r2, r3
 800a866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a878:	f021 010c 	bic.w	r1, r1, #12
 800a87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a882:	430b      	orrs	r3, r1
 800a884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a892:	6999      	ldr	r1, [r3, #24]
 800a894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	ea40 0301 	orr.w	r3, r0, r1
 800a89c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4bc5      	ldr	r3, [pc, #788]	; (800abb8 <UART_SetConfig+0x384>)
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d004      	beq.n	800a8b2 <UART_SetConfig+0x7e>
 800a8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	4bc3      	ldr	r3, [pc, #780]	; (800abbc <UART_SetConfig+0x388>)
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d103      	bne.n	800a8ba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8b2:	f7fc ffd7 	bl	8007864 <HAL_RCC_GetPCLK2Freq>
 800a8b6:	6778      	str	r0, [r7, #116]	; 0x74
 800a8b8:	e002      	b.n	800a8c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8ba:	f7fc ffbf 	bl	800783c <HAL_RCC_GetPCLK1Freq>
 800a8be:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8c8:	f040 80b6 	bne.w	800aa38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8ce:	461c      	mov	r4, r3
 800a8d0:	f04f 0500 	mov.w	r5, #0
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	1891      	adds	r1, r2, r2
 800a8da:	6439      	str	r1, [r7, #64]	; 0x40
 800a8dc:	415b      	adcs	r3, r3
 800a8de:	647b      	str	r3, [r7, #68]	; 0x44
 800a8e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a8e4:	1912      	adds	r2, r2, r4
 800a8e6:	eb45 0303 	adc.w	r3, r5, r3
 800a8ea:	f04f 0000 	mov.w	r0, #0
 800a8ee:	f04f 0100 	mov.w	r1, #0
 800a8f2:	00d9      	lsls	r1, r3, #3
 800a8f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a8f8:	00d0      	lsls	r0, r2, #3
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	1911      	adds	r1, r2, r4
 800a900:	6639      	str	r1, [r7, #96]	; 0x60
 800a902:	416b      	adcs	r3, r5
 800a904:	667b      	str	r3, [r7, #100]	; 0x64
 800a906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	1891      	adds	r1, r2, r2
 800a912:	63b9      	str	r1, [r7, #56]	; 0x38
 800a914:	415b      	adcs	r3, r3
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a91c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a920:	f7f6 f96a 	bl	8000bf8 <__aeabi_uldivmod>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4ba5      	ldr	r3, [pc, #660]	; (800abc0 <UART_SetConfig+0x38c>)
 800a92a:	fba3 2302 	umull	r2, r3, r3, r2
 800a92e:	095b      	lsrs	r3, r3, #5
 800a930:	011e      	lsls	r6, r3, #4
 800a932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a934:	461c      	mov	r4, r3
 800a936:	f04f 0500 	mov.w	r5, #0
 800a93a:	4622      	mov	r2, r4
 800a93c:	462b      	mov	r3, r5
 800a93e:	1891      	adds	r1, r2, r2
 800a940:	6339      	str	r1, [r7, #48]	; 0x30
 800a942:	415b      	adcs	r3, r3
 800a944:	637b      	str	r3, [r7, #52]	; 0x34
 800a946:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a94a:	1912      	adds	r2, r2, r4
 800a94c:	eb45 0303 	adc.w	r3, r5, r3
 800a950:	f04f 0000 	mov.w	r0, #0
 800a954:	f04f 0100 	mov.w	r1, #0
 800a958:	00d9      	lsls	r1, r3, #3
 800a95a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a95e:	00d0      	lsls	r0, r2, #3
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	1911      	adds	r1, r2, r4
 800a966:	65b9      	str	r1, [r7, #88]	; 0x58
 800a968:	416b      	adcs	r3, r5
 800a96a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	461a      	mov	r2, r3
 800a972:	f04f 0300 	mov.w	r3, #0
 800a976:	1891      	adds	r1, r2, r2
 800a978:	62b9      	str	r1, [r7, #40]	; 0x28
 800a97a:	415b      	adcs	r3, r3
 800a97c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a97e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a982:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a986:	f7f6 f937 	bl	8000bf8 <__aeabi_uldivmod>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4b8c      	ldr	r3, [pc, #560]	; (800abc0 <UART_SetConfig+0x38c>)
 800a990:	fba3 1302 	umull	r1, r3, r3, r2
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	2164      	movs	r1, #100	; 0x64
 800a998:	fb01 f303 	mul.w	r3, r1, r3
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	00db      	lsls	r3, r3, #3
 800a9a0:	3332      	adds	r3, #50	; 0x32
 800a9a2:	4a87      	ldr	r2, [pc, #540]	; (800abc0 <UART_SetConfig+0x38c>)
 800a9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9b0:	441e      	add	r6, r3
 800a9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f04f 0100 	mov.w	r1, #0
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	1894      	adds	r4, r2, r2
 800a9c0:	623c      	str	r4, [r7, #32]
 800a9c2:	415b      	adcs	r3, r3
 800a9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9ca:	1812      	adds	r2, r2, r0
 800a9cc:	eb41 0303 	adc.w	r3, r1, r3
 800a9d0:	f04f 0400 	mov.w	r4, #0
 800a9d4:	f04f 0500 	mov.w	r5, #0
 800a9d8:	00dd      	lsls	r5, r3, #3
 800a9da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9de:	00d4      	lsls	r4, r2, #3
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	462b      	mov	r3, r5
 800a9e4:	1814      	adds	r4, r2, r0
 800a9e6:	653c      	str	r4, [r7, #80]	; 0x50
 800a9e8:	414b      	adcs	r3, r1
 800a9ea:	657b      	str	r3, [r7, #84]	; 0x54
 800a9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	1891      	adds	r1, r2, r2
 800a9f8:	61b9      	str	r1, [r7, #24]
 800a9fa:	415b      	adcs	r3, r3
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aa06:	f7f6 f8f7 	bl	8000bf8 <__aeabi_uldivmod>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4b6c      	ldr	r3, [pc, #432]	; (800abc0 <UART_SetConfig+0x38c>)
 800aa10:	fba3 1302 	umull	r1, r3, r3, r2
 800aa14:	095b      	lsrs	r3, r3, #5
 800aa16:	2164      	movs	r1, #100	; 0x64
 800aa18:	fb01 f303 	mul.w	r3, r1, r3
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	3332      	adds	r3, #50	; 0x32
 800aa22:	4a67      	ldr	r2, [pc, #412]	; (800abc0 <UART_SetConfig+0x38c>)
 800aa24:	fba2 2303 	umull	r2, r3, r2, r3
 800aa28:	095b      	lsrs	r3, r3, #5
 800aa2a:	f003 0207 	and.w	r2, r3, #7
 800aa2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4432      	add	r2, r6
 800aa34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa36:	e0b9      	b.n	800abac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	f04f 0500 	mov.w	r5, #0
 800aa40:	4622      	mov	r2, r4
 800aa42:	462b      	mov	r3, r5
 800aa44:	1891      	adds	r1, r2, r2
 800aa46:	6139      	str	r1, [r7, #16]
 800aa48:	415b      	adcs	r3, r3
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa50:	1912      	adds	r2, r2, r4
 800aa52:	eb45 0303 	adc.w	r3, r5, r3
 800aa56:	f04f 0000 	mov.w	r0, #0
 800aa5a:	f04f 0100 	mov.w	r1, #0
 800aa5e:	00d9      	lsls	r1, r3, #3
 800aa60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aa64:	00d0      	lsls	r0, r2, #3
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	eb12 0804 	adds.w	r8, r2, r4
 800aa6e:	eb43 0905 	adc.w	r9, r3, r5
 800aa72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f04f 0100 	mov.w	r1, #0
 800aa7c:	f04f 0200 	mov.w	r2, #0
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	008b      	lsls	r3, r1, #2
 800aa86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa8a:	0082      	lsls	r2, r0, #2
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	4649      	mov	r1, r9
 800aa90:	f7f6 f8b2 	bl	8000bf8 <__aeabi_uldivmod>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4b49      	ldr	r3, [pc, #292]	; (800abc0 <UART_SetConfig+0x38c>)
 800aa9a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa9e:	095b      	lsrs	r3, r3, #5
 800aaa0:	011e      	lsls	r6, r3, #4
 800aaa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f04f 0100 	mov.w	r1, #0
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	1894      	adds	r4, r2, r2
 800aab0:	60bc      	str	r4, [r7, #8]
 800aab2:	415b      	adcs	r3, r3
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaba:	1812      	adds	r2, r2, r0
 800aabc:	eb41 0303 	adc.w	r3, r1, r3
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	f04f 0500 	mov.w	r5, #0
 800aac8:	00dd      	lsls	r5, r3, #3
 800aaca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aace:	00d4      	lsls	r4, r2, #3
 800aad0:	4622      	mov	r2, r4
 800aad2:	462b      	mov	r3, r5
 800aad4:	1814      	adds	r4, r2, r0
 800aad6:	64bc      	str	r4, [r7, #72]	; 0x48
 800aad8:	414b      	adcs	r3, r1
 800aada:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f04f 0100 	mov.w	r1, #0
 800aae6:	f04f 0200 	mov.w	r2, #0
 800aaea:	f04f 0300 	mov.w	r3, #0
 800aaee:	008b      	lsls	r3, r1, #2
 800aaf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aaf4:	0082      	lsls	r2, r0, #2
 800aaf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800aafa:	f7f6 f87d 	bl	8000bf8 <__aeabi_uldivmod>
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4b2f      	ldr	r3, [pc, #188]	; (800abc0 <UART_SetConfig+0x38c>)
 800ab04:	fba3 1302 	umull	r1, r3, r3, r2
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	2164      	movs	r1, #100	; 0x64
 800ab0c:	fb01 f303 	mul.w	r3, r1, r3
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	3332      	adds	r3, #50	; 0x32
 800ab16:	4a2a      	ldr	r2, [pc, #168]	; (800abc0 <UART_SetConfig+0x38c>)
 800ab18:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1c:	095b      	lsrs	r3, r3, #5
 800ab1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab22:	441e      	add	r6, r3
 800ab24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab26:	4618      	mov	r0, r3
 800ab28:	f04f 0100 	mov.w	r1, #0
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	1894      	adds	r4, r2, r2
 800ab32:	603c      	str	r4, [r7, #0]
 800ab34:	415b      	adcs	r3, r3
 800ab36:	607b      	str	r3, [r7, #4]
 800ab38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab3c:	1812      	adds	r2, r2, r0
 800ab3e:	eb41 0303 	adc.w	r3, r1, r3
 800ab42:	f04f 0400 	mov.w	r4, #0
 800ab46:	f04f 0500 	mov.w	r5, #0
 800ab4a:	00dd      	lsls	r5, r3, #3
 800ab4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ab50:	00d4      	lsls	r4, r2, #3
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	eb12 0a00 	adds.w	sl, r2, r0
 800ab5a:	eb43 0b01 	adc.w	fp, r3, r1
 800ab5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f04f 0100 	mov.w	r1, #0
 800ab68:	f04f 0200 	mov.w	r2, #0
 800ab6c:	f04f 0300 	mov.w	r3, #0
 800ab70:	008b      	lsls	r3, r1, #2
 800ab72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ab76:	0082      	lsls	r2, r0, #2
 800ab78:	4650      	mov	r0, sl
 800ab7a:	4659      	mov	r1, fp
 800ab7c:	f7f6 f83c 	bl	8000bf8 <__aeabi_uldivmod>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4b0e      	ldr	r3, [pc, #56]	; (800abc0 <UART_SetConfig+0x38c>)
 800ab86:	fba3 1302 	umull	r1, r3, r3, r2
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	2164      	movs	r1, #100	; 0x64
 800ab8e:	fb01 f303 	mul.w	r3, r1, r3
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	3332      	adds	r3, #50	; 0x32
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <UART_SetConfig+0x38c>)
 800ab9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9e:	095b      	lsrs	r3, r3, #5
 800aba0:	f003 020f 	and.w	r2, r3, #15
 800aba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4432      	add	r2, r6
 800abaa:	609a      	str	r2, [r3, #8]
}
 800abac:	bf00      	nop
 800abae:	377c      	adds	r7, #124	; 0x7c
 800abb0:	46bd      	mov	sp, r7
 800abb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb6:	bf00      	nop
 800abb8:	40011000 	.word	0x40011000
 800abbc:	40011400 	.word	0x40011400
 800abc0:	51eb851f 	.word	0x51eb851f

0800abc4 <__errno>:
 800abc4:	4b01      	ldr	r3, [pc, #4]	; (800abcc <__errno+0x8>)
 800abc6:	6818      	ldr	r0, [r3, #0]
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20000138 	.word	0x20000138

0800abd0 <__libc_init_array>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4d0d      	ldr	r5, [pc, #52]	; (800ac08 <__libc_init_array+0x38>)
 800abd4:	4c0d      	ldr	r4, [pc, #52]	; (800ac0c <__libc_init_array+0x3c>)
 800abd6:	1b64      	subs	r4, r4, r5
 800abd8:	10a4      	asrs	r4, r4, #2
 800abda:	2600      	movs	r6, #0
 800abdc:	42a6      	cmp	r6, r4
 800abde:	d109      	bne.n	800abf4 <__libc_init_array+0x24>
 800abe0:	4d0b      	ldr	r5, [pc, #44]	; (800ac10 <__libc_init_array+0x40>)
 800abe2:	4c0c      	ldr	r4, [pc, #48]	; (800ac14 <__libc_init_array+0x44>)
 800abe4:	f002 fd0e 	bl	800d604 <_init>
 800abe8:	1b64      	subs	r4, r4, r5
 800abea:	10a4      	asrs	r4, r4, #2
 800abec:	2600      	movs	r6, #0
 800abee:	42a6      	cmp	r6, r4
 800abf0:	d105      	bne.n	800abfe <__libc_init_array+0x2e>
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf8:	4798      	blx	r3
 800abfa:	3601      	adds	r6, #1
 800abfc:	e7ee      	b.n	800abdc <__libc_init_array+0xc>
 800abfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac02:	4798      	blx	r3
 800ac04:	3601      	adds	r6, #1
 800ac06:	e7f2      	b.n	800abee <__libc_init_array+0x1e>
 800ac08:	0800d8d8 	.word	0x0800d8d8
 800ac0c:	0800d8d8 	.word	0x0800d8d8
 800ac10:	0800d8d8 	.word	0x0800d8d8
 800ac14:	0800d8dc 	.word	0x0800d8dc

0800ac18 <memset>:
 800ac18:	4402      	add	r2, r0
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d100      	bne.n	800ac22 <memset+0xa>
 800ac20:	4770      	bx	lr
 800ac22:	f803 1b01 	strb.w	r1, [r3], #1
 800ac26:	e7f9      	b.n	800ac1c <memset+0x4>

0800ac28 <atan>:
 800ac28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	ec55 4b10 	vmov	r4, r5, d0
 800ac30:	4bc3      	ldr	r3, [pc, #780]	; (800af40 <atan+0x318>)
 800ac32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac36:	429e      	cmp	r6, r3
 800ac38:	46ab      	mov	fp, r5
 800ac3a:	dd18      	ble.n	800ac6e <atan+0x46>
 800ac3c:	4bc1      	ldr	r3, [pc, #772]	; (800af44 <atan+0x31c>)
 800ac3e:	429e      	cmp	r6, r3
 800ac40:	dc01      	bgt.n	800ac46 <atan+0x1e>
 800ac42:	d109      	bne.n	800ac58 <atan+0x30>
 800ac44:	b144      	cbz	r4, 800ac58 <atan+0x30>
 800ac46:	4622      	mov	r2, r4
 800ac48:	462b      	mov	r3, r5
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	f7f5 fad5 	bl	80001fc <__adddf3>
 800ac52:	4604      	mov	r4, r0
 800ac54:	460d      	mov	r5, r1
 800ac56:	e006      	b.n	800ac66 <atan+0x3e>
 800ac58:	f1bb 0f00 	cmp.w	fp, #0
 800ac5c:	f300 8131 	bgt.w	800aec2 <atan+0x29a>
 800ac60:	a59b      	add	r5, pc, #620	; (adr r5, 800aed0 <atan+0x2a8>)
 800ac62:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac66:	ec45 4b10 	vmov	d0, r4, r5
 800ac6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	4bb6      	ldr	r3, [pc, #728]	; (800af48 <atan+0x320>)
 800ac70:	429e      	cmp	r6, r3
 800ac72:	dc14      	bgt.n	800ac9e <atan+0x76>
 800ac74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ac78:	429e      	cmp	r6, r3
 800ac7a:	dc0d      	bgt.n	800ac98 <atan+0x70>
 800ac7c:	a396      	add	r3, pc, #600	; (adr r3, 800aed8 <atan+0x2b0>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	ee10 0a10 	vmov	r0, s0
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fab8 	bl	80001fc <__adddf3>
 800ac8c:	4baf      	ldr	r3, [pc, #700]	; (800af4c <atan+0x324>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f7f5 fefa 	bl	8000a88 <__aeabi_dcmpgt>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1e6      	bne.n	800ac66 <atan+0x3e>
 800ac98:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac9c:	e02b      	b.n	800acf6 <atan+0xce>
 800ac9e:	f000 f9b3 	bl	800b008 <fabs>
 800aca2:	4bab      	ldr	r3, [pc, #684]	; (800af50 <atan+0x328>)
 800aca4:	429e      	cmp	r6, r3
 800aca6:	ec55 4b10 	vmov	r4, r5, d0
 800acaa:	f300 80bf 	bgt.w	800ae2c <atan+0x204>
 800acae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800acb2:	429e      	cmp	r6, r3
 800acb4:	f300 80a0 	bgt.w	800adf8 <atan+0x1d0>
 800acb8:	ee10 2a10 	vmov	r2, s0
 800acbc:	ee10 0a10 	vmov	r0, s0
 800acc0:	462b      	mov	r3, r5
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7f5 fa9a 	bl	80001fc <__adddf3>
 800acc8:	4ba0      	ldr	r3, [pc, #640]	; (800af4c <atan+0x324>)
 800acca:	2200      	movs	r2, #0
 800accc:	f7f5 fa94 	bl	80001f8 <__aeabi_dsub>
 800acd0:	2200      	movs	r2, #0
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acda:	4620      	mov	r0, r4
 800acdc:	4629      	mov	r1, r5
 800acde:	f7f5 fa8d 	bl	80001fc <__adddf3>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	4630      	mov	r0, r6
 800ace8:	4639      	mov	r1, r7
 800acea:	f7f5 fd67 	bl	80007bc <__aeabi_ddiv>
 800acee:	f04f 0a00 	mov.w	sl, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	460d      	mov	r5, r1
 800acf6:	4622      	mov	r2, r4
 800acf8:	462b      	mov	r3, r5
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	f7f5 fc33 	bl	8000568 <__aeabi_dmul>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4680      	mov	r8, r0
 800ad08:	4689      	mov	r9, r1
 800ad0a:	f7f5 fc2d 	bl	8000568 <__aeabi_dmul>
 800ad0e:	a374      	add	r3, pc, #464	; (adr r3, 800aee0 <atan+0x2b8>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	f7f5 fc26 	bl	8000568 <__aeabi_dmul>
 800ad1c:	a372      	add	r3, pc, #456	; (adr r3, 800aee8 <atan+0x2c0>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fa6b 	bl	80001fc <__adddf3>
 800ad26:	4632      	mov	r2, r6
 800ad28:	463b      	mov	r3, r7
 800ad2a:	f7f5 fc1d 	bl	8000568 <__aeabi_dmul>
 800ad2e:	a370      	add	r3, pc, #448	; (adr r3, 800aef0 <atan+0x2c8>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f7f5 fa62 	bl	80001fc <__adddf3>
 800ad38:	4632      	mov	r2, r6
 800ad3a:	463b      	mov	r3, r7
 800ad3c:	f7f5 fc14 	bl	8000568 <__aeabi_dmul>
 800ad40:	a36d      	add	r3, pc, #436	; (adr r3, 800aef8 <atan+0x2d0>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 fa59 	bl	80001fc <__adddf3>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	f7f5 fc0b 	bl	8000568 <__aeabi_dmul>
 800ad52:	a36b      	add	r3, pc, #428	; (adr r3, 800af00 <atan+0x2d8>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f7f5 fa50 	bl	80001fc <__adddf3>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f7f5 fc02 	bl	8000568 <__aeabi_dmul>
 800ad64:	a368      	add	r3, pc, #416	; (adr r3, 800af08 <atan+0x2e0>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 fa47 	bl	80001fc <__adddf3>
 800ad6e:	4642      	mov	r2, r8
 800ad70:	464b      	mov	r3, r9
 800ad72:	f7f5 fbf9 	bl	8000568 <__aeabi_dmul>
 800ad76:	a366      	add	r3, pc, #408	; (adr r3, 800af10 <atan+0x2e8>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	4680      	mov	r8, r0
 800ad7e:	4689      	mov	r9, r1
 800ad80:	4630      	mov	r0, r6
 800ad82:	4639      	mov	r1, r7
 800ad84:	f7f5 fbf0 	bl	8000568 <__aeabi_dmul>
 800ad88:	a363      	add	r3, pc, #396	; (adr r3, 800af18 <atan+0x2f0>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7f5 fa33 	bl	80001f8 <__aeabi_dsub>
 800ad92:	4632      	mov	r2, r6
 800ad94:	463b      	mov	r3, r7
 800ad96:	f7f5 fbe7 	bl	8000568 <__aeabi_dmul>
 800ad9a:	a361      	add	r3, pc, #388	; (adr r3, 800af20 <atan+0x2f8>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f7f5 fa2a 	bl	80001f8 <__aeabi_dsub>
 800ada4:	4632      	mov	r2, r6
 800ada6:	463b      	mov	r3, r7
 800ada8:	f7f5 fbde 	bl	8000568 <__aeabi_dmul>
 800adac:	a35e      	add	r3, pc, #376	; (adr r3, 800af28 <atan+0x300>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f7f5 fa21 	bl	80001f8 <__aeabi_dsub>
 800adb6:	4632      	mov	r2, r6
 800adb8:	463b      	mov	r3, r7
 800adba:	f7f5 fbd5 	bl	8000568 <__aeabi_dmul>
 800adbe:	a35c      	add	r3, pc, #368	; (adr r3, 800af30 <atan+0x308>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 fa18 	bl	80001f8 <__aeabi_dsub>
 800adc8:	4632      	mov	r2, r6
 800adca:	463b      	mov	r3, r7
 800adcc:	f7f5 fbcc 	bl	8000568 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4640      	mov	r0, r8
 800add6:	4649      	mov	r1, r9
 800add8:	f7f5 fa10 	bl	80001fc <__adddf3>
 800addc:	4622      	mov	r2, r4
 800adde:	462b      	mov	r3, r5
 800ade0:	f7f5 fbc2 	bl	8000568 <__aeabi_dmul>
 800ade4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	d14b      	bne.n	800ae86 <atan+0x25e>
 800adee:	4620      	mov	r0, r4
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7f5 fa01 	bl	80001f8 <__aeabi_dsub>
 800adf6:	e72c      	b.n	800ac52 <atan+0x2a>
 800adf8:	ee10 0a10 	vmov	r0, s0
 800adfc:	4b53      	ldr	r3, [pc, #332]	; (800af4c <atan+0x324>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	4629      	mov	r1, r5
 800ae02:	f7f5 f9f9 	bl	80001f8 <__aeabi_dsub>
 800ae06:	4b51      	ldr	r3, [pc, #324]	; (800af4c <atan+0x324>)
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460f      	mov	r7, r1
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 f9f3 	bl	80001fc <__adddf3>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	f7f5 fccd 	bl	80007bc <__aeabi_ddiv>
 800ae22:	f04f 0a01 	mov.w	sl, #1
 800ae26:	4604      	mov	r4, r0
 800ae28:	460d      	mov	r5, r1
 800ae2a:	e764      	b.n	800acf6 <atan+0xce>
 800ae2c:	4b49      	ldr	r3, [pc, #292]	; (800af54 <atan+0x32c>)
 800ae2e:	429e      	cmp	r6, r3
 800ae30:	da1d      	bge.n	800ae6e <atan+0x246>
 800ae32:	ee10 0a10 	vmov	r0, s0
 800ae36:	4b48      	ldr	r3, [pc, #288]	; (800af58 <atan+0x330>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	f7f5 f9dc 	bl	80001f8 <__aeabi_dsub>
 800ae40:	4b45      	ldr	r3, [pc, #276]	; (800af58 <atan+0x330>)
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	2200      	movs	r2, #0
 800ae48:	4620      	mov	r0, r4
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	f7f5 fb8c 	bl	8000568 <__aeabi_dmul>
 800ae50:	4b3e      	ldr	r3, [pc, #248]	; (800af4c <atan+0x324>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	f7f5 f9d2 	bl	80001fc <__adddf3>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 fcac 	bl	80007bc <__aeabi_ddiv>
 800ae64:	f04f 0a02 	mov.w	sl, #2
 800ae68:	4604      	mov	r4, r0
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	e743      	b.n	800acf6 <atan+0xce>
 800ae6e:	462b      	mov	r3, r5
 800ae70:	ee10 2a10 	vmov	r2, s0
 800ae74:	4939      	ldr	r1, [pc, #228]	; (800af5c <atan+0x334>)
 800ae76:	2000      	movs	r0, #0
 800ae78:	f7f5 fca0 	bl	80007bc <__aeabi_ddiv>
 800ae7c:	f04f 0a03 	mov.w	sl, #3
 800ae80:	4604      	mov	r4, r0
 800ae82:	460d      	mov	r5, r1
 800ae84:	e737      	b.n	800acf6 <atan+0xce>
 800ae86:	4b36      	ldr	r3, [pc, #216]	; (800af60 <atan+0x338>)
 800ae88:	4e36      	ldr	r6, [pc, #216]	; (800af64 <atan+0x33c>)
 800ae8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ae8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ae92:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae96:	f7f5 f9af 	bl	80001f8 <__aeabi_dsub>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	f7f5 f9ab 	bl	80001f8 <__aeabi_dsub>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aeaa:	f7f5 f9a5 	bl	80001f8 <__aeabi_dsub>
 800aeae:	f1bb 0f00 	cmp.w	fp, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	f6bf aed6 	bge.w	800ac66 <atan+0x3e>
 800aeba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aebe:	461d      	mov	r5, r3
 800aec0:	e6d1      	b.n	800ac66 <atan+0x3e>
 800aec2:	a51d      	add	r5, pc, #116	; (adr r5, 800af38 <atan+0x310>)
 800aec4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aec8:	e6cd      	b.n	800ac66 <atan+0x3e>
 800aeca:	bf00      	nop
 800aecc:	f3af 8000 	nop.w
 800aed0:	54442d18 	.word	0x54442d18
 800aed4:	bff921fb 	.word	0xbff921fb
 800aed8:	8800759c 	.word	0x8800759c
 800aedc:	7e37e43c 	.word	0x7e37e43c
 800aee0:	e322da11 	.word	0xe322da11
 800aee4:	3f90ad3a 	.word	0x3f90ad3a
 800aee8:	24760deb 	.word	0x24760deb
 800aeec:	3fa97b4b 	.word	0x3fa97b4b
 800aef0:	a0d03d51 	.word	0xa0d03d51
 800aef4:	3fb10d66 	.word	0x3fb10d66
 800aef8:	c54c206e 	.word	0xc54c206e
 800aefc:	3fb745cd 	.word	0x3fb745cd
 800af00:	920083ff 	.word	0x920083ff
 800af04:	3fc24924 	.word	0x3fc24924
 800af08:	5555550d 	.word	0x5555550d
 800af0c:	3fd55555 	.word	0x3fd55555
 800af10:	2c6a6c2f 	.word	0x2c6a6c2f
 800af14:	bfa2b444 	.word	0xbfa2b444
 800af18:	52defd9a 	.word	0x52defd9a
 800af1c:	3fadde2d 	.word	0x3fadde2d
 800af20:	af749a6d 	.word	0xaf749a6d
 800af24:	3fb3b0f2 	.word	0x3fb3b0f2
 800af28:	fe231671 	.word	0xfe231671
 800af2c:	3fbc71c6 	.word	0x3fbc71c6
 800af30:	9998ebc4 	.word	0x9998ebc4
 800af34:	3fc99999 	.word	0x3fc99999
 800af38:	54442d18 	.word	0x54442d18
 800af3c:	3ff921fb 	.word	0x3ff921fb
 800af40:	440fffff 	.word	0x440fffff
 800af44:	7ff00000 	.word	0x7ff00000
 800af48:	3fdbffff 	.word	0x3fdbffff
 800af4c:	3ff00000 	.word	0x3ff00000
 800af50:	3ff2ffff 	.word	0x3ff2ffff
 800af54:	40038000 	.word	0x40038000
 800af58:	3ff80000 	.word	0x3ff80000
 800af5c:	bff00000 	.word	0xbff00000
 800af60:	0800d660 	.word	0x0800d660
 800af64:	0800d640 	.word	0x0800d640

0800af68 <cos>:
 800af68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af6a:	ec53 2b10 	vmov	r2, r3, d0
 800af6e:	4824      	ldr	r0, [pc, #144]	; (800b000 <cos+0x98>)
 800af70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af74:	4281      	cmp	r1, r0
 800af76:	dc06      	bgt.n	800af86 <cos+0x1e>
 800af78:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800aff8 <cos+0x90>
 800af7c:	f001 fcd4 	bl	800c928 <__kernel_cos>
 800af80:	ec51 0b10 	vmov	r0, r1, d0
 800af84:	e007      	b.n	800af96 <cos+0x2e>
 800af86:	481f      	ldr	r0, [pc, #124]	; (800b004 <cos+0x9c>)
 800af88:	4281      	cmp	r1, r0
 800af8a:	dd09      	ble.n	800afa0 <cos+0x38>
 800af8c:	ee10 0a10 	vmov	r0, s0
 800af90:	4619      	mov	r1, r3
 800af92:	f7f5 f931 	bl	80001f8 <__aeabi_dsub>
 800af96:	ec41 0b10 	vmov	d0, r0, r1
 800af9a:	b005      	add	sp, #20
 800af9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800afa0:	4668      	mov	r0, sp
 800afa2:	f001 fa01 	bl	800c3a8 <__ieee754_rem_pio2>
 800afa6:	f000 0003 	and.w	r0, r0, #3
 800afaa:	2801      	cmp	r0, #1
 800afac:	d007      	beq.n	800afbe <cos+0x56>
 800afae:	2802      	cmp	r0, #2
 800afb0:	d012      	beq.n	800afd8 <cos+0x70>
 800afb2:	b9c0      	cbnz	r0, 800afe6 <cos+0x7e>
 800afb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afb8:	ed9d 0b00 	vldr	d0, [sp]
 800afbc:	e7de      	b.n	800af7c <cos+0x14>
 800afbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afc2:	ed9d 0b00 	vldr	d0, [sp]
 800afc6:	f002 f8b7 	bl	800d138 <__kernel_sin>
 800afca:	ec53 2b10 	vmov	r2, r3, d0
 800afce:	ee10 0a10 	vmov	r0, s0
 800afd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afd6:	e7de      	b.n	800af96 <cos+0x2e>
 800afd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afdc:	ed9d 0b00 	vldr	d0, [sp]
 800afe0:	f001 fca2 	bl	800c928 <__kernel_cos>
 800afe4:	e7f1      	b.n	800afca <cos+0x62>
 800afe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afea:	ed9d 0b00 	vldr	d0, [sp]
 800afee:	2001      	movs	r0, #1
 800aff0:	f002 f8a2 	bl	800d138 <__kernel_sin>
 800aff4:	e7c4      	b.n	800af80 <cos+0x18>
 800aff6:	bf00      	nop
	...
 800b000:	3fe921fb 	.word	0x3fe921fb
 800b004:	7fefffff 	.word	0x7fefffff

0800b008 <fabs>:
 800b008:	ec51 0b10 	vmov	r0, r1, d0
 800b00c:	ee10 2a10 	vmov	r2, s0
 800b010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b014:	ec43 2b10 	vmov	d0, r2, r3
 800b018:	4770      	bx	lr
 800b01a:	0000      	movs	r0, r0
 800b01c:	0000      	movs	r0, r0
	...

0800b020 <sin>:
 800b020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b022:	ec53 2b10 	vmov	r2, r3, d0
 800b026:	4826      	ldr	r0, [pc, #152]	; (800b0c0 <sin+0xa0>)
 800b028:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b02c:	4281      	cmp	r1, r0
 800b02e:	dc07      	bgt.n	800b040 <sin+0x20>
 800b030:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b0b8 <sin+0x98>
 800b034:	2000      	movs	r0, #0
 800b036:	f002 f87f 	bl	800d138 <__kernel_sin>
 800b03a:	ec51 0b10 	vmov	r0, r1, d0
 800b03e:	e007      	b.n	800b050 <sin+0x30>
 800b040:	4820      	ldr	r0, [pc, #128]	; (800b0c4 <sin+0xa4>)
 800b042:	4281      	cmp	r1, r0
 800b044:	dd09      	ble.n	800b05a <sin+0x3a>
 800b046:	ee10 0a10 	vmov	r0, s0
 800b04a:	4619      	mov	r1, r3
 800b04c:	f7f5 f8d4 	bl	80001f8 <__aeabi_dsub>
 800b050:	ec41 0b10 	vmov	d0, r0, r1
 800b054:	b005      	add	sp, #20
 800b056:	f85d fb04 	ldr.w	pc, [sp], #4
 800b05a:	4668      	mov	r0, sp
 800b05c:	f001 f9a4 	bl	800c3a8 <__ieee754_rem_pio2>
 800b060:	f000 0003 	and.w	r0, r0, #3
 800b064:	2801      	cmp	r0, #1
 800b066:	d008      	beq.n	800b07a <sin+0x5a>
 800b068:	2802      	cmp	r0, #2
 800b06a:	d00d      	beq.n	800b088 <sin+0x68>
 800b06c:	b9d0      	cbnz	r0, 800b0a4 <sin+0x84>
 800b06e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b072:	ed9d 0b00 	vldr	d0, [sp]
 800b076:	2001      	movs	r0, #1
 800b078:	e7dd      	b.n	800b036 <sin+0x16>
 800b07a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b07e:	ed9d 0b00 	vldr	d0, [sp]
 800b082:	f001 fc51 	bl	800c928 <__kernel_cos>
 800b086:	e7d8      	b.n	800b03a <sin+0x1a>
 800b088:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b08c:	ed9d 0b00 	vldr	d0, [sp]
 800b090:	2001      	movs	r0, #1
 800b092:	f002 f851 	bl	800d138 <__kernel_sin>
 800b096:	ec53 2b10 	vmov	r2, r3, d0
 800b09a:	ee10 0a10 	vmov	r0, s0
 800b09e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0a2:	e7d5      	b.n	800b050 <sin+0x30>
 800b0a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0a8:	ed9d 0b00 	vldr	d0, [sp]
 800b0ac:	f001 fc3c 	bl	800c928 <__kernel_cos>
 800b0b0:	e7f1      	b.n	800b096 <sin+0x76>
 800b0b2:	bf00      	nop
 800b0b4:	f3af 8000 	nop.w
	...
 800b0c0:	3fe921fb 	.word	0x3fe921fb
 800b0c4:	7fefffff 	.word	0x7fefffff

0800b0c8 <acos>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	ed2d 8b02 	vpush	{d8}
 800b0ce:	ec55 4b10 	vmov	r4, r5, d0
 800b0d2:	f000 f919 	bl	800b308 <__ieee754_acos>
 800b0d6:	4b16      	ldr	r3, [pc, #88]	; (800b130 <acos+0x68>)
 800b0d8:	eeb0 8a40 	vmov.f32	s16, s0
 800b0dc:	eef0 8a60 	vmov.f32	s17, s1
 800b0e0:	f993 3000 	ldrsb.w	r3, [r3]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	d01c      	beq.n	800b122 <acos+0x5a>
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 fcd4 	bl	8000a9c <__aeabi_dcmpun>
 800b0f4:	b9a8      	cbnz	r0, 800b122 <acos+0x5a>
 800b0f6:	ec45 4b10 	vmov	d0, r4, r5
 800b0fa:	f7ff ff85 	bl	800b008 <fabs>
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <acos+0x6c>)
 800b100:	ec51 0b10 	vmov	r0, r1, d0
 800b104:	2200      	movs	r2, #0
 800b106:	f7f5 fcbf 	bl	8000a88 <__aeabi_dcmpgt>
 800b10a:	b150      	cbz	r0, 800b122 <acos+0x5a>
 800b10c:	f7ff fd5a 	bl	800abc4 <__errno>
 800b110:	ecbd 8b02 	vpop	{d8}
 800b114:	2321      	movs	r3, #33	; 0x21
 800b116:	6003      	str	r3, [r0, #0]
 800b118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b11c:	4806      	ldr	r0, [pc, #24]	; (800b138 <acos+0x70>)
 800b11e:	f002 b957 	b.w	800d3d0 <nan>
 800b122:	eeb0 0a48 	vmov.f32	s0, s16
 800b126:	eef0 0a68 	vmov.f32	s1, s17
 800b12a:	ecbd 8b02 	vpop	{d8}
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	2000019c 	.word	0x2000019c
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	0800d680 	.word	0x0800d680

0800b13c <atan2>:
 800b13c:	f000 bb44 	b.w	800b7c8 <__ieee754_atan2>

0800b140 <pow>:
 800b140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b144:	ec59 8b10 	vmov	r8, r9, d0
 800b148:	ec57 6b11 	vmov	r6, r7, d1
 800b14c:	f000 fc08 	bl	800b960 <__ieee754_pow>
 800b150:	4b4e      	ldr	r3, [pc, #312]	; (800b28c <pow+0x14c>)
 800b152:	f993 3000 	ldrsb.w	r3, [r3]
 800b156:	3301      	adds	r3, #1
 800b158:	ec55 4b10 	vmov	r4, r5, d0
 800b15c:	d015      	beq.n	800b18a <pow+0x4a>
 800b15e:	4632      	mov	r2, r6
 800b160:	463b      	mov	r3, r7
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 fc99 	bl	8000a9c <__aeabi_dcmpun>
 800b16a:	b970      	cbnz	r0, 800b18a <pow+0x4a>
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 fc92 	bl	8000a9c <__aeabi_dcmpun>
 800b178:	2200      	movs	r2, #0
 800b17a:	2300      	movs	r3, #0
 800b17c:	b148      	cbz	r0, 800b192 <pow+0x52>
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 fc59 	bl	8000a38 <__aeabi_dcmpeq>
 800b186:	2800      	cmp	r0, #0
 800b188:	d17d      	bne.n	800b286 <pow+0x146>
 800b18a:	ec45 4b10 	vmov	d0, r4, r5
 800b18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b192:	4640      	mov	r0, r8
 800b194:	4649      	mov	r1, r9
 800b196:	f7f5 fc4f 	bl	8000a38 <__aeabi_dcmpeq>
 800b19a:	b1e0      	cbz	r0, 800b1d6 <pow+0x96>
 800b19c:	2200      	movs	r2, #0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	f7f5 fc48 	bl	8000a38 <__aeabi_dcmpeq>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d16c      	bne.n	800b286 <pow+0x146>
 800b1ac:	ec47 6b10 	vmov	d0, r6, r7
 800b1b0:	f002 f880 	bl	800d2b4 <finite>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d0e8      	beq.n	800b18a <pow+0x4a>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	4630      	mov	r0, r6
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7f5 fc44 	bl	8000a4c <__aeabi_dcmplt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d0e0      	beq.n	800b18a <pow+0x4a>
 800b1c8:	f7ff fcfc 	bl	800abc4 <__errno>
 800b1cc:	2321      	movs	r3, #33	; 0x21
 800b1ce:	6003      	str	r3, [r0, #0]
 800b1d0:	2400      	movs	r4, #0
 800b1d2:	4d2f      	ldr	r5, [pc, #188]	; (800b290 <pow+0x150>)
 800b1d4:	e7d9      	b.n	800b18a <pow+0x4a>
 800b1d6:	ec45 4b10 	vmov	d0, r4, r5
 800b1da:	f002 f86b 	bl	800d2b4 <finite>
 800b1de:	bbb8      	cbnz	r0, 800b250 <pow+0x110>
 800b1e0:	ec49 8b10 	vmov	d0, r8, r9
 800b1e4:	f002 f866 	bl	800d2b4 <finite>
 800b1e8:	b390      	cbz	r0, 800b250 <pow+0x110>
 800b1ea:	ec47 6b10 	vmov	d0, r6, r7
 800b1ee:	f002 f861 	bl	800d2b4 <finite>
 800b1f2:	b368      	cbz	r0, 800b250 <pow+0x110>
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	462b      	mov	r3, r5
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	f7f5 fc4e 	bl	8000a9c <__aeabi_dcmpun>
 800b200:	b160      	cbz	r0, 800b21c <pow+0xdc>
 800b202:	f7ff fcdf 	bl	800abc4 <__errno>
 800b206:	2321      	movs	r3, #33	; 0x21
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4610      	mov	r0, r2
 800b210:	4619      	mov	r1, r3
 800b212:	f7f5 fad3 	bl	80007bc <__aeabi_ddiv>
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	e7b6      	b.n	800b18a <pow+0x4a>
 800b21c:	f7ff fcd2 	bl	800abc4 <__errno>
 800b220:	2322      	movs	r3, #34	; 0x22
 800b222:	6003      	str	r3, [r0, #0]
 800b224:	2200      	movs	r2, #0
 800b226:	2300      	movs	r3, #0
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	f7f5 fc0e 	bl	8000a4c <__aeabi_dcmplt>
 800b230:	2400      	movs	r4, #0
 800b232:	b158      	cbz	r0, 800b24c <pow+0x10c>
 800b234:	ec47 6b10 	vmov	d0, r6, r7
 800b238:	f002 f8d2 	bl	800d3e0 <rint>
 800b23c:	4632      	mov	r2, r6
 800b23e:	ec51 0b10 	vmov	r0, r1, d0
 800b242:	463b      	mov	r3, r7
 800b244:	f7f5 fbf8 	bl	8000a38 <__aeabi_dcmpeq>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d0c2      	beq.n	800b1d2 <pow+0x92>
 800b24c:	4d11      	ldr	r5, [pc, #68]	; (800b294 <pow+0x154>)
 800b24e:	e79c      	b.n	800b18a <pow+0x4a>
 800b250:	2200      	movs	r2, #0
 800b252:	2300      	movs	r3, #0
 800b254:	4620      	mov	r0, r4
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 fbee 	bl	8000a38 <__aeabi_dcmpeq>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d094      	beq.n	800b18a <pow+0x4a>
 800b260:	ec49 8b10 	vmov	d0, r8, r9
 800b264:	f002 f826 	bl	800d2b4 <finite>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d08e      	beq.n	800b18a <pow+0x4a>
 800b26c:	ec47 6b10 	vmov	d0, r6, r7
 800b270:	f002 f820 	bl	800d2b4 <finite>
 800b274:	2800      	cmp	r0, #0
 800b276:	d088      	beq.n	800b18a <pow+0x4a>
 800b278:	f7ff fca4 	bl	800abc4 <__errno>
 800b27c:	2322      	movs	r3, #34	; 0x22
 800b27e:	6003      	str	r3, [r0, #0]
 800b280:	2400      	movs	r4, #0
 800b282:	2500      	movs	r5, #0
 800b284:	e781      	b.n	800b18a <pow+0x4a>
 800b286:	4d04      	ldr	r5, [pc, #16]	; (800b298 <pow+0x158>)
 800b288:	2400      	movs	r4, #0
 800b28a:	e77e      	b.n	800b18a <pow+0x4a>
 800b28c:	2000019c 	.word	0x2000019c
 800b290:	fff00000 	.word	0xfff00000
 800b294:	7ff00000 	.word	0x7ff00000
 800b298:	3ff00000 	.word	0x3ff00000

0800b29c <sqrt>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	ed2d 8b02 	vpush	{d8}
 800b2a2:	ec55 4b10 	vmov	r4, r5, d0
 800b2a6:	f001 fa89 	bl	800c7bc <__ieee754_sqrt>
 800b2aa:	4b15      	ldr	r3, [pc, #84]	; (800b300 <sqrt+0x64>)
 800b2ac:	eeb0 8a40 	vmov.f32	s16, s0
 800b2b0:	eef0 8a60 	vmov.f32	s17, s1
 800b2b4:	f993 3000 	ldrsb.w	r3, [r3]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	d019      	beq.n	800b2f0 <sqrt+0x54>
 800b2bc:	4622      	mov	r2, r4
 800b2be:	462b      	mov	r3, r5
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 fbea 	bl	8000a9c <__aeabi_dcmpun>
 800b2c8:	b990      	cbnz	r0, 800b2f0 <sqrt+0x54>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f5 fbbb 	bl	8000a4c <__aeabi_dcmplt>
 800b2d6:	b158      	cbz	r0, 800b2f0 <sqrt+0x54>
 800b2d8:	f7ff fc74 	bl	800abc4 <__errno>
 800b2dc:	2321      	movs	r3, #33	; 0x21
 800b2de:	6003      	str	r3, [r0, #0]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	f7f5 fa68 	bl	80007bc <__aeabi_ddiv>
 800b2ec:	ec41 0b18 	vmov	d8, r0, r1
 800b2f0:	eeb0 0a48 	vmov.f32	s0, s16
 800b2f4:	eef0 0a68 	vmov.f32	s1, s17
 800b2f8:	ecbd 8b02 	vpop	{d8}
 800b2fc:	bd38      	pop	{r3, r4, r5, pc}
 800b2fe:	bf00      	nop
 800b300:	2000019c 	.word	0x2000019c
 800b304:	00000000 	.word	0x00000000

0800b308 <__ieee754_acos>:
 800b308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	ec55 4b10 	vmov	r4, r5, d0
 800b310:	49b7      	ldr	r1, [pc, #732]	; (800b5f0 <__ieee754_acos+0x2e8>)
 800b312:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b316:	428b      	cmp	r3, r1
 800b318:	dd1b      	ble.n	800b352 <__ieee754_acos+0x4a>
 800b31a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800b31e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b322:	4323      	orrs	r3, r4
 800b324:	d106      	bne.n	800b334 <__ieee754_acos+0x2c>
 800b326:	2d00      	cmp	r5, #0
 800b328:	f300 8211 	bgt.w	800b74e <__ieee754_acos+0x446>
 800b32c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800b588 <__ieee754_acos+0x280>
 800b330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	ee10 2a10 	vmov	r2, s0
 800b338:	462b      	mov	r3, r5
 800b33a:	ee10 0a10 	vmov	r0, s0
 800b33e:	4629      	mov	r1, r5
 800b340:	f7f4 ff5a 	bl	80001f8 <__aeabi_dsub>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	f7f5 fa38 	bl	80007bc <__aeabi_ddiv>
 800b34c:	ec41 0b10 	vmov	d0, r0, r1
 800b350:	e7ee      	b.n	800b330 <__ieee754_acos+0x28>
 800b352:	49a8      	ldr	r1, [pc, #672]	; (800b5f4 <__ieee754_acos+0x2ec>)
 800b354:	428b      	cmp	r3, r1
 800b356:	f300 8087 	bgt.w	800b468 <__ieee754_acos+0x160>
 800b35a:	4aa7      	ldr	r2, [pc, #668]	; (800b5f8 <__ieee754_acos+0x2f0>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	f340 81f9 	ble.w	800b754 <__ieee754_acos+0x44c>
 800b362:	ee10 2a10 	vmov	r2, s0
 800b366:	ee10 0a10 	vmov	r0, s0
 800b36a:	462b      	mov	r3, r5
 800b36c:	4629      	mov	r1, r5
 800b36e:	f7f5 f8fb 	bl	8000568 <__aeabi_dmul>
 800b372:	a387      	add	r3, pc, #540	; (adr r3, 800b590 <__ieee754_acos+0x288>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	4606      	mov	r6, r0
 800b37a:	460f      	mov	r7, r1
 800b37c:	f7f5 f8f4 	bl	8000568 <__aeabi_dmul>
 800b380:	a385      	add	r3, pc, #532	; (adr r3, 800b598 <__ieee754_acos+0x290>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f4 ff39 	bl	80001fc <__adddf3>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	f7f5 f8eb 	bl	8000568 <__aeabi_dmul>
 800b392:	a383      	add	r3, pc, #524	; (adr r3, 800b5a0 <__ieee754_acos+0x298>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f7f4 ff2e 	bl	80001f8 <__aeabi_dsub>
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	f7f5 f8e2 	bl	8000568 <__aeabi_dmul>
 800b3a4:	a380      	add	r3, pc, #512	; (adr r3, 800b5a8 <__ieee754_acos+0x2a0>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f4 ff27 	bl	80001fc <__adddf3>
 800b3ae:	4632      	mov	r2, r6
 800b3b0:	463b      	mov	r3, r7
 800b3b2:	f7f5 f8d9 	bl	8000568 <__aeabi_dmul>
 800b3b6:	a37e      	add	r3, pc, #504	; (adr r3, 800b5b0 <__ieee754_acos+0x2a8>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f4 ff1c 	bl	80001f8 <__aeabi_dsub>
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	463b      	mov	r3, r7
 800b3c4:	f7f5 f8d0 	bl	8000568 <__aeabi_dmul>
 800b3c8:	a37b      	add	r3, pc, #492	; (adr r3, 800b5b8 <__ieee754_acos+0x2b0>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f4 ff15 	bl	80001fc <__adddf3>
 800b3d2:	4632      	mov	r2, r6
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	f7f5 f8c7 	bl	8000568 <__aeabi_dmul>
 800b3da:	a379      	add	r3, pc, #484	; (adr r3, 800b5c0 <__ieee754_acos+0x2b8>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	4689      	mov	r9, r1
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f5 f8be 	bl	8000568 <__aeabi_dmul>
 800b3ec:	a376      	add	r3, pc, #472	; (adr r3, 800b5c8 <__ieee754_acos+0x2c0>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f4 ff01 	bl	80001f8 <__aeabi_dsub>
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	f7f5 f8b5 	bl	8000568 <__aeabi_dmul>
 800b3fe:	a374      	add	r3, pc, #464	; (adr r3, 800b5d0 <__ieee754_acos+0x2c8>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f4 fefa 	bl	80001fc <__adddf3>
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	f7f5 f8ac 	bl	8000568 <__aeabi_dmul>
 800b410:	a371      	add	r3, pc, #452	; (adr r3, 800b5d8 <__ieee754_acos+0x2d0>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f4 feef 	bl	80001f8 <__aeabi_dsub>
 800b41a:	4632      	mov	r2, r6
 800b41c:	463b      	mov	r3, r7
 800b41e:	f7f5 f8a3 	bl	8000568 <__aeabi_dmul>
 800b422:	4b76      	ldr	r3, [pc, #472]	; (800b5fc <__ieee754_acos+0x2f4>)
 800b424:	2200      	movs	r2, #0
 800b426:	f7f4 fee9 	bl	80001fc <__adddf3>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4640      	mov	r0, r8
 800b430:	4649      	mov	r1, r9
 800b432:	f7f5 f9c3 	bl	80007bc <__aeabi_ddiv>
 800b436:	4622      	mov	r2, r4
 800b438:	462b      	mov	r3, r5
 800b43a:	f7f5 f895 	bl	8000568 <__aeabi_dmul>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	a167      	add	r1, pc, #412	; (adr r1, 800b5e0 <__ieee754_acos+0x2d8>)
 800b444:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b448:	f7f4 fed6 	bl	80001f8 <__aeabi_dsub>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f4 fed0 	bl	80001f8 <__aeabi_dsub>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	a162      	add	r1, pc, #392	; (adr r1, 800b5e8 <__ieee754_acos+0x2e0>)
 800b45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b462:	f7f4 fec9 	bl	80001f8 <__aeabi_dsub>
 800b466:	e771      	b.n	800b34c <__ieee754_acos+0x44>
 800b468:	2d00      	cmp	r5, #0
 800b46a:	f280 80cb 	bge.w	800b604 <__ieee754_acos+0x2fc>
 800b46e:	ee10 0a10 	vmov	r0, s0
 800b472:	4b62      	ldr	r3, [pc, #392]	; (800b5fc <__ieee754_acos+0x2f4>)
 800b474:	2200      	movs	r2, #0
 800b476:	4629      	mov	r1, r5
 800b478:	f7f4 fec0 	bl	80001fc <__adddf3>
 800b47c:	4b60      	ldr	r3, [pc, #384]	; (800b600 <__ieee754_acos+0x2f8>)
 800b47e:	2200      	movs	r2, #0
 800b480:	f7f5 f872 	bl	8000568 <__aeabi_dmul>
 800b484:	a342      	add	r3, pc, #264	; (adr r3, 800b590 <__ieee754_acos+0x288>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	f7f5 f86b 	bl	8000568 <__aeabi_dmul>
 800b492:	a341      	add	r3, pc, #260	; (adr r3, 800b598 <__ieee754_acos+0x290>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 feb0 	bl	80001fc <__adddf3>
 800b49c:	4622      	mov	r2, r4
 800b49e:	462b      	mov	r3, r5
 800b4a0:	f7f5 f862 	bl	8000568 <__aeabi_dmul>
 800b4a4:	a33e      	add	r3, pc, #248	; (adr r3, 800b5a0 <__ieee754_acos+0x298>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f7f4 fea5 	bl	80001f8 <__aeabi_dsub>
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	f7f5 f859 	bl	8000568 <__aeabi_dmul>
 800b4b6:	a33c      	add	r3, pc, #240	; (adr r3, 800b5a8 <__ieee754_acos+0x2a0>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	f7f4 fe9e 	bl	80001fc <__adddf3>
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	462b      	mov	r3, r5
 800b4c4:	f7f5 f850 	bl	8000568 <__aeabi_dmul>
 800b4c8:	a339      	add	r3, pc, #228	; (adr r3, 800b5b0 <__ieee754_acos+0x2a8>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7f4 fe93 	bl	80001f8 <__aeabi_dsub>
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	462b      	mov	r3, r5
 800b4d6:	f7f5 f847 	bl	8000568 <__aeabi_dmul>
 800b4da:	a337      	add	r3, pc, #220	; (adr r3, 800b5b8 <__ieee754_acos+0x2b0>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f7f4 fe8c 	bl	80001fc <__adddf3>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	f7f5 f83e 	bl	8000568 <__aeabi_dmul>
 800b4ec:	ec45 4b10 	vmov	d0, r4, r5
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4689      	mov	r9, r1
 800b4f4:	f001 f962 	bl	800c7bc <__ieee754_sqrt>
 800b4f8:	a331      	add	r3, pc, #196	; (adr r3, 800b5c0 <__ieee754_acos+0x2b8>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	ec57 6b10 	vmov	r6, r7, d0
 800b506:	f7f5 f82f 	bl	8000568 <__aeabi_dmul>
 800b50a:	a32f      	add	r3, pc, #188	; (adr r3, 800b5c8 <__ieee754_acos+0x2c0>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f4 fe72 	bl	80001f8 <__aeabi_dsub>
 800b514:	4622      	mov	r2, r4
 800b516:	462b      	mov	r3, r5
 800b518:	f7f5 f826 	bl	8000568 <__aeabi_dmul>
 800b51c:	a32c      	add	r3, pc, #176	; (adr r3, 800b5d0 <__ieee754_acos+0x2c8>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 fe6b 	bl	80001fc <__adddf3>
 800b526:	4622      	mov	r2, r4
 800b528:	462b      	mov	r3, r5
 800b52a:	f7f5 f81d 	bl	8000568 <__aeabi_dmul>
 800b52e:	a32a      	add	r3, pc, #168	; (adr r3, 800b5d8 <__ieee754_acos+0x2d0>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fe60 	bl	80001f8 <__aeabi_dsub>
 800b538:	4622      	mov	r2, r4
 800b53a:	462b      	mov	r3, r5
 800b53c:	f7f5 f814 	bl	8000568 <__aeabi_dmul>
 800b540:	4b2e      	ldr	r3, [pc, #184]	; (800b5fc <__ieee754_acos+0x2f4>)
 800b542:	2200      	movs	r2, #0
 800b544:	f7f4 fe5a 	bl	80001fc <__adddf3>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f5 f934 	bl	80007bc <__aeabi_ddiv>
 800b554:	4632      	mov	r2, r6
 800b556:	463b      	mov	r3, r7
 800b558:	f7f5 f806 	bl	8000568 <__aeabi_dmul>
 800b55c:	a320      	add	r3, pc, #128	; (adr r3, 800b5e0 <__ieee754_acos+0x2d8>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f4 fe49 	bl	80001f8 <__aeabi_dsub>
 800b566:	4632      	mov	r2, r6
 800b568:	463b      	mov	r3, r7
 800b56a:	f7f4 fe47 	bl	80001fc <__adddf3>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	f7f4 fe43 	bl	80001fc <__adddf3>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	a103      	add	r1, pc, #12	; (adr r1, 800b588 <__ieee754_acos+0x280>)
 800b57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b580:	e76f      	b.n	800b462 <__ieee754_acos+0x15a>
 800b582:	bf00      	nop
 800b584:	f3af 8000 	nop.w
 800b588:	54442d18 	.word	0x54442d18
 800b58c:	400921fb 	.word	0x400921fb
 800b590:	0dfdf709 	.word	0x0dfdf709
 800b594:	3f023de1 	.word	0x3f023de1
 800b598:	7501b288 	.word	0x7501b288
 800b59c:	3f49efe0 	.word	0x3f49efe0
 800b5a0:	b5688f3b 	.word	0xb5688f3b
 800b5a4:	3fa48228 	.word	0x3fa48228
 800b5a8:	0e884455 	.word	0x0e884455
 800b5ac:	3fc9c155 	.word	0x3fc9c155
 800b5b0:	03eb6f7d 	.word	0x03eb6f7d
 800b5b4:	3fd4d612 	.word	0x3fd4d612
 800b5b8:	55555555 	.word	0x55555555
 800b5bc:	3fc55555 	.word	0x3fc55555
 800b5c0:	b12e9282 	.word	0xb12e9282
 800b5c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b5c8:	1b8d0159 	.word	0x1b8d0159
 800b5cc:	3fe6066c 	.word	0x3fe6066c
 800b5d0:	9c598ac8 	.word	0x9c598ac8
 800b5d4:	40002ae5 	.word	0x40002ae5
 800b5d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b5dc:	40033a27 	.word	0x40033a27
 800b5e0:	33145c07 	.word	0x33145c07
 800b5e4:	3c91a626 	.word	0x3c91a626
 800b5e8:	54442d18 	.word	0x54442d18
 800b5ec:	3ff921fb 	.word	0x3ff921fb
 800b5f0:	3fefffff 	.word	0x3fefffff
 800b5f4:	3fdfffff 	.word	0x3fdfffff
 800b5f8:	3c600000 	.word	0x3c600000
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	ee10 2a10 	vmov	r2, s0
 800b608:	462b      	mov	r3, r5
 800b60a:	496d      	ldr	r1, [pc, #436]	; (800b7c0 <__ieee754_acos+0x4b8>)
 800b60c:	2000      	movs	r0, #0
 800b60e:	f7f4 fdf3 	bl	80001f8 <__aeabi_dsub>
 800b612:	4b6c      	ldr	r3, [pc, #432]	; (800b7c4 <__ieee754_acos+0x4bc>)
 800b614:	2200      	movs	r2, #0
 800b616:	f7f4 ffa7 	bl	8000568 <__aeabi_dmul>
 800b61a:	4604      	mov	r4, r0
 800b61c:	460d      	mov	r5, r1
 800b61e:	ec45 4b10 	vmov	d0, r4, r5
 800b622:	f001 f8cb 	bl	800c7bc <__ieee754_sqrt>
 800b626:	a34e      	add	r3, pc, #312	; (adr r3, 800b760 <__ieee754_acos+0x458>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	4620      	mov	r0, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	ec59 8b10 	vmov	r8, r9, d0
 800b634:	f7f4 ff98 	bl	8000568 <__aeabi_dmul>
 800b638:	a34b      	add	r3, pc, #300	; (adr r3, 800b768 <__ieee754_acos+0x460>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 fddd 	bl	80001fc <__adddf3>
 800b642:	4622      	mov	r2, r4
 800b644:	462b      	mov	r3, r5
 800b646:	f7f4 ff8f 	bl	8000568 <__aeabi_dmul>
 800b64a:	a349      	add	r3, pc, #292	; (adr r3, 800b770 <__ieee754_acos+0x468>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fdd2 	bl	80001f8 <__aeabi_dsub>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 ff86 	bl	8000568 <__aeabi_dmul>
 800b65c:	a346      	add	r3, pc, #280	; (adr r3, 800b778 <__ieee754_acos+0x470>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fdcb 	bl	80001fc <__adddf3>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f7f4 ff7d 	bl	8000568 <__aeabi_dmul>
 800b66e:	a344      	add	r3, pc, #272	; (adr r3, 800b780 <__ieee754_acos+0x478>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fdc0 	bl	80001f8 <__aeabi_dsub>
 800b678:	4622      	mov	r2, r4
 800b67a:	462b      	mov	r3, r5
 800b67c:	f7f4 ff74 	bl	8000568 <__aeabi_dmul>
 800b680:	a341      	add	r3, pc, #260	; (adr r3, 800b788 <__ieee754_acos+0x480>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fdb9 	bl	80001fc <__adddf3>
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	f7f4 ff6b 	bl	8000568 <__aeabi_dmul>
 800b692:	a33f      	add	r3, pc, #252	; (adr r3, 800b790 <__ieee754_acos+0x488>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	4682      	mov	sl, r0
 800b69a:	468b      	mov	fp, r1
 800b69c:	4620      	mov	r0, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7f4 ff62 	bl	8000568 <__aeabi_dmul>
 800b6a4:	a33c      	add	r3, pc, #240	; (adr r3, 800b798 <__ieee754_acos+0x490>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 fda5 	bl	80001f8 <__aeabi_dsub>
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	f7f4 ff59 	bl	8000568 <__aeabi_dmul>
 800b6b6:	a33a      	add	r3, pc, #232	; (adr r3, 800b7a0 <__ieee754_acos+0x498>)
 800b6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6bc:	f7f4 fd9e 	bl	80001fc <__adddf3>
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	f7f4 ff50 	bl	8000568 <__aeabi_dmul>
 800b6c8:	a337      	add	r3, pc, #220	; (adr r3, 800b7a8 <__ieee754_acos+0x4a0>)
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 fd93 	bl	80001f8 <__aeabi_dsub>
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	462b      	mov	r3, r5
 800b6d6:	f7f4 ff47 	bl	8000568 <__aeabi_dmul>
 800b6da:	4b39      	ldr	r3, [pc, #228]	; (800b7c0 <__ieee754_acos+0x4b8>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f7f4 fd8d 	bl	80001fc <__adddf3>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	4659      	mov	r1, fp
 800b6ea:	f7f5 f867 	bl	80007bc <__aeabi_ddiv>
 800b6ee:	4642      	mov	r2, r8
 800b6f0:	464b      	mov	r3, r9
 800b6f2:	f7f4 ff39 	bl	8000568 <__aeabi_dmul>
 800b6f6:	2600      	movs	r6, #0
 800b6f8:	4682      	mov	sl, r0
 800b6fa:	468b      	mov	fp, r1
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	464b      	mov	r3, r9
 800b700:	4630      	mov	r0, r6
 800b702:	4649      	mov	r1, r9
 800b704:	f7f4 ff30 	bl	8000568 <__aeabi_dmul>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4620      	mov	r0, r4
 800b70e:	4629      	mov	r1, r5
 800b710:	f7f4 fd72 	bl	80001f8 <__aeabi_dsub>
 800b714:	4632      	mov	r2, r6
 800b716:	4604      	mov	r4, r0
 800b718:	460d      	mov	r5, r1
 800b71a:	464b      	mov	r3, r9
 800b71c:	4640      	mov	r0, r8
 800b71e:	4649      	mov	r1, r9
 800b720:	f7f4 fd6c 	bl	80001fc <__adddf3>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4620      	mov	r0, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7f5 f846 	bl	80007bc <__aeabi_ddiv>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4650      	mov	r0, sl
 800b736:	4659      	mov	r1, fp
 800b738:	f7f4 fd60 	bl	80001fc <__adddf3>
 800b73c:	4632      	mov	r2, r6
 800b73e:	464b      	mov	r3, r9
 800b740:	f7f4 fd5c 	bl	80001fc <__adddf3>
 800b744:	4602      	mov	r2, r0
 800b746:	460b      	mov	r3, r1
 800b748:	f7f4 fd58 	bl	80001fc <__adddf3>
 800b74c:	e5fe      	b.n	800b34c <__ieee754_acos+0x44>
 800b74e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b7b0 <__ieee754_acos+0x4a8>
 800b752:	e5ed      	b.n	800b330 <__ieee754_acos+0x28>
 800b754:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b7b8 <__ieee754_acos+0x4b0>
 800b758:	e5ea      	b.n	800b330 <__ieee754_acos+0x28>
 800b75a:	bf00      	nop
 800b75c:	f3af 8000 	nop.w
 800b760:	0dfdf709 	.word	0x0dfdf709
 800b764:	3f023de1 	.word	0x3f023de1
 800b768:	7501b288 	.word	0x7501b288
 800b76c:	3f49efe0 	.word	0x3f49efe0
 800b770:	b5688f3b 	.word	0xb5688f3b
 800b774:	3fa48228 	.word	0x3fa48228
 800b778:	0e884455 	.word	0x0e884455
 800b77c:	3fc9c155 	.word	0x3fc9c155
 800b780:	03eb6f7d 	.word	0x03eb6f7d
 800b784:	3fd4d612 	.word	0x3fd4d612
 800b788:	55555555 	.word	0x55555555
 800b78c:	3fc55555 	.word	0x3fc55555
 800b790:	b12e9282 	.word	0xb12e9282
 800b794:	3fb3b8c5 	.word	0x3fb3b8c5
 800b798:	1b8d0159 	.word	0x1b8d0159
 800b79c:	3fe6066c 	.word	0x3fe6066c
 800b7a0:	9c598ac8 	.word	0x9c598ac8
 800b7a4:	40002ae5 	.word	0x40002ae5
 800b7a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b7ac:	40033a27 	.word	0x40033a27
	...
 800b7b8:	54442d18 	.word	0x54442d18
 800b7bc:	3ff921fb 	.word	0x3ff921fb
 800b7c0:	3ff00000 	.word	0x3ff00000
 800b7c4:	3fe00000 	.word	0x3fe00000

0800b7c8 <__ieee754_atan2>:
 800b7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7cc:	ec57 6b11 	vmov	r6, r7, d1
 800b7d0:	4273      	negs	r3, r6
 800b7d2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b958 <__ieee754_atan2+0x190>
 800b7d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b7da:	4333      	orrs	r3, r6
 800b7dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b7e0:	4573      	cmp	r3, lr
 800b7e2:	ec51 0b10 	vmov	r0, r1, d0
 800b7e6:	ee11 8a10 	vmov	r8, s2
 800b7ea:	d80a      	bhi.n	800b802 <__ieee754_atan2+0x3a>
 800b7ec:	4244      	negs	r4, r0
 800b7ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7f2:	4304      	orrs	r4, r0
 800b7f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b7f8:	4574      	cmp	r4, lr
 800b7fa:	ee10 9a10 	vmov	r9, s0
 800b7fe:	468c      	mov	ip, r1
 800b800:	d907      	bls.n	800b812 <__ieee754_atan2+0x4a>
 800b802:	4632      	mov	r2, r6
 800b804:	463b      	mov	r3, r7
 800b806:	f7f4 fcf9 	bl	80001fc <__adddf3>
 800b80a:	ec41 0b10 	vmov	d0, r0, r1
 800b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b812:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b816:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b81a:	4334      	orrs	r4, r6
 800b81c:	d103      	bne.n	800b826 <__ieee754_atan2+0x5e>
 800b81e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b822:	f7ff ba01 	b.w	800ac28 <atan>
 800b826:	17bc      	asrs	r4, r7, #30
 800b828:	f004 0402 	and.w	r4, r4, #2
 800b82c:	ea53 0909 	orrs.w	r9, r3, r9
 800b830:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b834:	d107      	bne.n	800b846 <__ieee754_atan2+0x7e>
 800b836:	2c02      	cmp	r4, #2
 800b838:	d060      	beq.n	800b8fc <__ieee754_atan2+0x134>
 800b83a:	2c03      	cmp	r4, #3
 800b83c:	d1e5      	bne.n	800b80a <__ieee754_atan2+0x42>
 800b83e:	a142      	add	r1, pc, #264	; (adr r1, 800b948 <__ieee754_atan2+0x180>)
 800b840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b844:	e7e1      	b.n	800b80a <__ieee754_atan2+0x42>
 800b846:	ea52 0808 	orrs.w	r8, r2, r8
 800b84a:	d106      	bne.n	800b85a <__ieee754_atan2+0x92>
 800b84c:	f1bc 0f00 	cmp.w	ip, #0
 800b850:	da5f      	bge.n	800b912 <__ieee754_atan2+0x14a>
 800b852:	a13f      	add	r1, pc, #252	; (adr r1, 800b950 <__ieee754_atan2+0x188>)
 800b854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b858:	e7d7      	b.n	800b80a <__ieee754_atan2+0x42>
 800b85a:	4572      	cmp	r2, lr
 800b85c:	d10f      	bne.n	800b87e <__ieee754_atan2+0xb6>
 800b85e:	4293      	cmp	r3, r2
 800b860:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b864:	d107      	bne.n	800b876 <__ieee754_atan2+0xae>
 800b866:	2c02      	cmp	r4, #2
 800b868:	d84c      	bhi.n	800b904 <__ieee754_atan2+0x13c>
 800b86a:	4b35      	ldr	r3, [pc, #212]	; (800b940 <__ieee754_atan2+0x178>)
 800b86c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b870:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b874:	e7c9      	b.n	800b80a <__ieee754_atan2+0x42>
 800b876:	2c02      	cmp	r4, #2
 800b878:	d848      	bhi.n	800b90c <__ieee754_atan2+0x144>
 800b87a:	4b32      	ldr	r3, [pc, #200]	; (800b944 <__ieee754_atan2+0x17c>)
 800b87c:	e7f6      	b.n	800b86c <__ieee754_atan2+0xa4>
 800b87e:	4573      	cmp	r3, lr
 800b880:	d0e4      	beq.n	800b84c <__ieee754_atan2+0x84>
 800b882:	1a9b      	subs	r3, r3, r2
 800b884:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b888:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b88c:	da1e      	bge.n	800b8cc <__ieee754_atan2+0x104>
 800b88e:	2f00      	cmp	r7, #0
 800b890:	da01      	bge.n	800b896 <__ieee754_atan2+0xce>
 800b892:	323c      	adds	r2, #60	; 0x3c
 800b894:	db1e      	blt.n	800b8d4 <__ieee754_atan2+0x10c>
 800b896:	4632      	mov	r2, r6
 800b898:	463b      	mov	r3, r7
 800b89a:	f7f4 ff8f 	bl	80007bc <__aeabi_ddiv>
 800b89e:	ec41 0b10 	vmov	d0, r0, r1
 800b8a2:	f7ff fbb1 	bl	800b008 <fabs>
 800b8a6:	f7ff f9bf 	bl	800ac28 <atan>
 800b8aa:	ec51 0b10 	vmov	r0, r1, d0
 800b8ae:	2c01      	cmp	r4, #1
 800b8b0:	d013      	beq.n	800b8da <__ieee754_atan2+0x112>
 800b8b2:	2c02      	cmp	r4, #2
 800b8b4:	d015      	beq.n	800b8e2 <__ieee754_atan2+0x11a>
 800b8b6:	2c00      	cmp	r4, #0
 800b8b8:	d0a7      	beq.n	800b80a <__ieee754_atan2+0x42>
 800b8ba:	a319      	add	r3, pc, #100	; (adr r3, 800b920 <__ieee754_atan2+0x158>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f7f4 fc9a 	bl	80001f8 <__aeabi_dsub>
 800b8c4:	a318      	add	r3, pc, #96	; (adr r3, 800b928 <__ieee754_atan2+0x160>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	e014      	b.n	800b8f6 <__ieee754_atan2+0x12e>
 800b8cc:	a118      	add	r1, pc, #96	; (adr r1, 800b930 <__ieee754_atan2+0x168>)
 800b8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d2:	e7ec      	b.n	800b8ae <__ieee754_atan2+0xe6>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	e7e9      	b.n	800b8ae <__ieee754_atan2+0xe6>
 800b8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8de:	4619      	mov	r1, r3
 800b8e0:	e793      	b.n	800b80a <__ieee754_atan2+0x42>
 800b8e2:	a30f      	add	r3, pc, #60	; (adr r3, 800b920 <__ieee754_atan2+0x158>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 fc86 	bl	80001f8 <__aeabi_dsub>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	a10d      	add	r1, pc, #52	; (adr r1, 800b928 <__ieee754_atan2+0x160>)
 800b8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f6:	f7f4 fc7f 	bl	80001f8 <__aeabi_dsub>
 800b8fa:	e786      	b.n	800b80a <__ieee754_atan2+0x42>
 800b8fc:	a10a      	add	r1, pc, #40	; (adr r1, 800b928 <__ieee754_atan2+0x160>)
 800b8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b902:	e782      	b.n	800b80a <__ieee754_atan2+0x42>
 800b904:	a10c      	add	r1, pc, #48	; (adr r1, 800b938 <__ieee754_atan2+0x170>)
 800b906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b90a:	e77e      	b.n	800b80a <__ieee754_atan2+0x42>
 800b90c:	2000      	movs	r0, #0
 800b90e:	2100      	movs	r1, #0
 800b910:	e77b      	b.n	800b80a <__ieee754_atan2+0x42>
 800b912:	a107      	add	r1, pc, #28	; (adr r1, 800b930 <__ieee754_atan2+0x168>)
 800b914:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b918:	e777      	b.n	800b80a <__ieee754_atan2+0x42>
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w
 800b920:	33145c07 	.word	0x33145c07
 800b924:	3ca1a626 	.word	0x3ca1a626
 800b928:	54442d18 	.word	0x54442d18
 800b92c:	400921fb 	.word	0x400921fb
 800b930:	54442d18 	.word	0x54442d18
 800b934:	3ff921fb 	.word	0x3ff921fb
 800b938:	54442d18 	.word	0x54442d18
 800b93c:	3fe921fb 	.word	0x3fe921fb
 800b940:	0800d688 	.word	0x0800d688
 800b944:	0800d6a0 	.word	0x0800d6a0
 800b948:	54442d18 	.word	0x54442d18
 800b94c:	c00921fb 	.word	0xc00921fb
 800b950:	54442d18 	.word	0x54442d18
 800b954:	bff921fb 	.word	0xbff921fb
 800b958:	7ff00000 	.word	0x7ff00000
 800b95c:	00000000 	.word	0x00000000

0800b960 <__ieee754_pow>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	ed2d 8b06 	vpush	{d8-d10}
 800b968:	b08d      	sub	sp, #52	; 0x34
 800b96a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b96e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b972:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b976:	ea56 0100 	orrs.w	r1, r6, r0
 800b97a:	ec53 2b10 	vmov	r2, r3, d0
 800b97e:	f000 84d1 	beq.w	800c324 <__ieee754_pow+0x9c4>
 800b982:	497f      	ldr	r1, [pc, #508]	; (800bb80 <__ieee754_pow+0x220>)
 800b984:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b988:	428c      	cmp	r4, r1
 800b98a:	ee10 8a10 	vmov	r8, s0
 800b98e:	4699      	mov	r9, r3
 800b990:	dc09      	bgt.n	800b9a6 <__ieee754_pow+0x46>
 800b992:	d103      	bne.n	800b99c <__ieee754_pow+0x3c>
 800b994:	b97a      	cbnz	r2, 800b9b6 <__ieee754_pow+0x56>
 800b996:	42a6      	cmp	r6, r4
 800b998:	dd02      	ble.n	800b9a0 <__ieee754_pow+0x40>
 800b99a:	e00c      	b.n	800b9b6 <__ieee754_pow+0x56>
 800b99c:	428e      	cmp	r6, r1
 800b99e:	dc02      	bgt.n	800b9a6 <__ieee754_pow+0x46>
 800b9a0:	428e      	cmp	r6, r1
 800b9a2:	d110      	bne.n	800b9c6 <__ieee754_pow+0x66>
 800b9a4:	b178      	cbz	r0, 800b9c6 <__ieee754_pow+0x66>
 800b9a6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b9aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9ae:	ea54 0308 	orrs.w	r3, r4, r8
 800b9b2:	f000 84b7 	beq.w	800c324 <__ieee754_pow+0x9c4>
 800b9b6:	4873      	ldr	r0, [pc, #460]	; (800bb84 <__ieee754_pow+0x224>)
 800b9b8:	b00d      	add	sp, #52	; 0x34
 800b9ba:	ecbd 8b06 	vpop	{d8-d10}
 800b9be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c2:	f001 bd05 	b.w	800d3d0 <nan>
 800b9c6:	f1b9 0f00 	cmp.w	r9, #0
 800b9ca:	da36      	bge.n	800ba3a <__ieee754_pow+0xda>
 800b9cc:	496e      	ldr	r1, [pc, #440]	; (800bb88 <__ieee754_pow+0x228>)
 800b9ce:	428e      	cmp	r6, r1
 800b9d0:	dc51      	bgt.n	800ba76 <__ieee754_pow+0x116>
 800b9d2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b9d6:	428e      	cmp	r6, r1
 800b9d8:	f340 84af 	ble.w	800c33a <__ieee754_pow+0x9da>
 800b9dc:	1531      	asrs	r1, r6, #20
 800b9de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b9e2:	2914      	cmp	r1, #20
 800b9e4:	dd0f      	ble.n	800ba06 <__ieee754_pow+0xa6>
 800b9e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b9ea:	fa20 fc01 	lsr.w	ip, r0, r1
 800b9ee:	fa0c f101 	lsl.w	r1, ip, r1
 800b9f2:	4281      	cmp	r1, r0
 800b9f4:	f040 84a1 	bne.w	800c33a <__ieee754_pow+0x9da>
 800b9f8:	f00c 0c01 	and.w	ip, ip, #1
 800b9fc:	f1cc 0102 	rsb	r1, ip, #2
 800ba00:	9100      	str	r1, [sp, #0]
 800ba02:	b180      	cbz	r0, 800ba26 <__ieee754_pow+0xc6>
 800ba04:	e059      	b.n	800baba <__ieee754_pow+0x15a>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d155      	bne.n	800bab6 <__ieee754_pow+0x156>
 800ba0a:	f1c1 0114 	rsb	r1, r1, #20
 800ba0e:	fa46 fc01 	asr.w	ip, r6, r1
 800ba12:	fa0c f101 	lsl.w	r1, ip, r1
 800ba16:	42b1      	cmp	r1, r6
 800ba18:	f040 848c 	bne.w	800c334 <__ieee754_pow+0x9d4>
 800ba1c:	f00c 0c01 	and.w	ip, ip, #1
 800ba20:	f1cc 0102 	rsb	r1, ip, #2
 800ba24:	9100      	str	r1, [sp, #0]
 800ba26:	4959      	ldr	r1, [pc, #356]	; (800bb8c <__ieee754_pow+0x22c>)
 800ba28:	428e      	cmp	r6, r1
 800ba2a:	d12d      	bne.n	800ba88 <__ieee754_pow+0x128>
 800ba2c:	2f00      	cmp	r7, #0
 800ba2e:	da79      	bge.n	800bb24 <__ieee754_pow+0x1c4>
 800ba30:	4956      	ldr	r1, [pc, #344]	; (800bb8c <__ieee754_pow+0x22c>)
 800ba32:	2000      	movs	r0, #0
 800ba34:	f7f4 fec2 	bl	80007bc <__aeabi_ddiv>
 800ba38:	e016      	b.n	800ba68 <__ieee754_pow+0x108>
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	9100      	str	r1, [sp, #0]
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d13b      	bne.n	800baba <__ieee754_pow+0x15a>
 800ba42:	494f      	ldr	r1, [pc, #316]	; (800bb80 <__ieee754_pow+0x220>)
 800ba44:	428e      	cmp	r6, r1
 800ba46:	d1ee      	bne.n	800ba26 <__ieee754_pow+0xc6>
 800ba48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ba4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba50:	ea53 0308 	orrs.w	r3, r3, r8
 800ba54:	f000 8466 	beq.w	800c324 <__ieee754_pow+0x9c4>
 800ba58:	4b4d      	ldr	r3, [pc, #308]	; (800bb90 <__ieee754_pow+0x230>)
 800ba5a:	429c      	cmp	r4, r3
 800ba5c:	dd0d      	ble.n	800ba7a <__ieee754_pow+0x11a>
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	f280 8464 	bge.w	800c32c <__ieee754_pow+0x9cc>
 800ba64:	2000      	movs	r0, #0
 800ba66:	2100      	movs	r1, #0
 800ba68:	ec41 0b10 	vmov	d0, r0, r1
 800ba6c:	b00d      	add	sp, #52	; 0x34
 800ba6e:	ecbd 8b06 	vpop	{d8-d10}
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	2102      	movs	r1, #2
 800ba78:	e7e0      	b.n	800ba3c <__ieee754_pow+0xdc>
 800ba7a:	2f00      	cmp	r7, #0
 800ba7c:	daf2      	bge.n	800ba64 <__ieee754_pow+0x104>
 800ba7e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ba82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba86:	e7ef      	b.n	800ba68 <__ieee754_pow+0x108>
 800ba88:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ba8c:	d104      	bne.n	800ba98 <__ieee754_pow+0x138>
 800ba8e:	4610      	mov	r0, r2
 800ba90:	4619      	mov	r1, r3
 800ba92:	f7f4 fd69 	bl	8000568 <__aeabi_dmul>
 800ba96:	e7e7      	b.n	800ba68 <__ieee754_pow+0x108>
 800ba98:	493e      	ldr	r1, [pc, #248]	; (800bb94 <__ieee754_pow+0x234>)
 800ba9a:	428f      	cmp	r7, r1
 800ba9c:	d10d      	bne.n	800baba <__ieee754_pow+0x15a>
 800ba9e:	f1b9 0f00 	cmp.w	r9, #0
 800baa2:	db0a      	blt.n	800baba <__ieee754_pow+0x15a>
 800baa4:	ec43 2b10 	vmov	d0, r2, r3
 800baa8:	b00d      	add	sp, #52	; 0x34
 800baaa:	ecbd 8b06 	vpop	{d8-d10}
 800baae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab2:	f000 be83 	b.w	800c7bc <__ieee754_sqrt>
 800bab6:	2100      	movs	r1, #0
 800bab8:	9100      	str	r1, [sp, #0]
 800baba:	ec43 2b10 	vmov	d0, r2, r3
 800babe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bac2:	f7ff faa1 	bl	800b008 <fabs>
 800bac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baca:	ec51 0b10 	vmov	r0, r1, d0
 800bace:	f1b8 0f00 	cmp.w	r8, #0
 800bad2:	d12a      	bne.n	800bb2a <__ieee754_pow+0x1ca>
 800bad4:	b12c      	cbz	r4, 800bae2 <__ieee754_pow+0x182>
 800bad6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800bb8c <__ieee754_pow+0x22c>
 800bada:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800bade:	45e6      	cmp	lr, ip
 800bae0:	d123      	bne.n	800bb2a <__ieee754_pow+0x1ca>
 800bae2:	2f00      	cmp	r7, #0
 800bae4:	da05      	bge.n	800baf2 <__ieee754_pow+0x192>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	2000      	movs	r0, #0
 800baec:	4927      	ldr	r1, [pc, #156]	; (800bb8c <__ieee754_pow+0x22c>)
 800baee:	f7f4 fe65 	bl	80007bc <__aeabi_ddiv>
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	dab7      	bge.n	800ba68 <__ieee754_pow+0x108>
 800baf8:	9b00      	ldr	r3, [sp, #0]
 800bafa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bafe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb02:	4323      	orrs	r3, r4
 800bb04:	d108      	bne.n	800bb18 <__ieee754_pow+0x1b8>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4610      	mov	r0, r2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	f7f4 fb73 	bl	80001f8 <__aeabi_dsub>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	e78d      	b.n	800ba34 <__ieee754_pow+0xd4>
 800bb18:	9b00      	ldr	r3, [sp, #0]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d1a4      	bne.n	800ba68 <__ieee754_pow+0x108>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb24:	4610      	mov	r0, r2
 800bb26:	4619      	mov	r1, r3
 800bb28:	e79e      	b.n	800ba68 <__ieee754_pow+0x108>
 800bb2a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800bb2e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800bb32:	950a      	str	r5, [sp, #40]	; 0x28
 800bb34:	9d00      	ldr	r5, [sp, #0]
 800bb36:	46ac      	mov	ip, r5
 800bb38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb3a:	ea5c 0505 	orrs.w	r5, ip, r5
 800bb3e:	d0e4      	beq.n	800bb0a <__ieee754_pow+0x1aa>
 800bb40:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <__ieee754_pow+0x238>)
 800bb42:	429e      	cmp	r6, r3
 800bb44:	f340 80fc 	ble.w	800bd40 <__ieee754_pow+0x3e0>
 800bb48:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bb4c:	429e      	cmp	r6, r3
 800bb4e:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <__ieee754_pow+0x230>)
 800bb50:	dd07      	ble.n	800bb62 <__ieee754_pow+0x202>
 800bb52:	429c      	cmp	r4, r3
 800bb54:	dc0a      	bgt.n	800bb6c <__ieee754_pow+0x20c>
 800bb56:	2f00      	cmp	r7, #0
 800bb58:	da84      	bge.n	800ba64 <__ieee754_pow+0x104>
 800bb5a:	a307      	add	r3, pc, #28	; (adr r3, 800bb78 <__ieee754_pow+0x218>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	e795      	b.n	800ba8e <__ieee754_pow+0x12e>
 800bb62:	429c      	cmp	r4, r3
 800bb64:	dbf7      	blt.n	800bb56 <__ieee754_pow+0x1f6>
 800bb66:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <__ieee754_pow+0x22c>)
 800bb68:	429c      	cmp	r4, r3
 800bb6a:	dd17      	ble.n	800bb9c <__ieee754_pow+0x23c>
 800bb6c:	2f00      	cmp	r7, #0
 800bb6e:	dcf4      	bgt.n	800bb5a <__ieee754_pow+0x1fa>
 800bb70:	e778      	b.n	800ba64 <__ieee754_pow+0x104>
 800bb72:	bf00      	nop
 800bb74:	f3af 8000 	nop.w
 800bb78:	8800759c 	.word	0x8800759c
 800bb7c:	7e37e43c 	.word	0x7e37e43c
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	0800d680 	.word	0x0800d680
 800bb88:	433fffff 	.word	0x433fffff
 800bb8c:	3ff00000 	.word	0x3ff00000
 800bb90:	3fefffff 	.word	0x3fefffff
 800bb94:	3fe00000 	.word	0x3fe00000
 800bb98:	41e00000 	.word	0x41e00000
 800bb9c:	4b64      	ldr	r3, [pc, #400]	; (800bd30 <__ieee754_pow+0x3d0>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f7f4 fb2a 	bl	80001f8 <__aeabi_dsub>
 800bba4:	a356      	add	r3, pc, #344	; (adr r3, 800bd00 <__ieee754_pow+0x3a0>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	4604      	mov	r4, r0
 800bbac:	460d      	mov	r5, r1
 800bbae:	f7f4 fcdb 	bl	8000568 <__aeabi_dmul>
 800bbb2:	a355      	add	r3, pc, #340	; (adr r3, 800bd08 <__ieee754_pow+0x3a8>)
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	4606      	mov	r6, r0
 800bbba:	460f      	mov	r7, r1
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f7f4 fcd2 	bl	8000568 <__aeabi_dmul>
 800bbc4:	4b5b      	ldr	r3, [pc, #364]	; (800bd34 <__ieee754_pow+0x3d4>)
 800bbc6:	4682      	mov	sl, r0
 800bbc8:	468b      	mov	fp, r1
 800bbca:	2200      	movs	r2, #0
 800bbcc:	4620      	mov	r0, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 fcca 	bl	8000568 <__aeabi_dmul>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	a14d      	add	r1, pc, #308	; (adr r1, 800bd10 <__ieee754_pow+0x3b0>)
 800bbda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbde:	f7f4 fb0b 	bl	80001f8 <__aeabi_dsub>
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	462b      	mov	r3, r5
 800bbe6:	f7f4 fcbf 	bl	8000568 <__aeabi_dmul>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	2000      	movs	r0, #0
 800bbf0:	4951      	ldr	r1, [pc, #324]	; (800bd38 <__ieee754_pow+0x3d8>)
 800bbf2:	f7f4 fb01 	bl	80001f8 <__aeabi_dsub>
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	4689      	mov	r9, r1
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fcb1 	bl	8000568 <__aeabi_dmul>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	f7f4 fcab 	bl	8000568 <__aeabi_dmul>
 800bc12:	a341      	add	r3, pc, #260	; (adr r3, 800bd18 <__ieee754_pow+0x3b8>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fca6 	bl	8000568 <__aeabi_dmul>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4650      	mov	r0, sl
 800bc22:	4659      	mov	r1, fp
 800bc24:	f7f4 fae8 	bl	80001f8 <__aeabi_dsub>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	4689      	mov	r9, r1
 800bc30:	4630      	mov	r0, r6
 800bc32:	4639      	mov	r1, r7
 800bc34:	f7f4 fae2 	bl	80001fc <__adddf3>
 800bc38:	2400      	movs	r4, #0
 800bc3a:	4632      	mov	r2, r6
 800bc3c:	463b      	mov	r3, r7
 800bc3e:	4620      	mov	r0, r4
 800bc40:	460d      	mov	r5, r1
 800bc42:	f7f4 fad9 	bl	80001f8 <__aeabi_dsub>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fad3 	bl	80001f8 <__aeabi_dsub>
 800bc52:	9b00      	ldr	r3, [sp, #0]
 800bc54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc56:	3b01      	subs	r3, #1
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	4682      	mov	sl, r0
 800bc5c:	468b      	mov	fp, r1
 800bc5e:	f040 81f1 	bne.w	800c044 <__ieee754_pow+0x6e4>
 800bc62:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bd20 <__ieee754_pow+0x3c0>
 800bc66:	eeb0 8a47 	vmov.f32	s16, s14
 800bc6a:	eef0 8a67 	vmov.f32	s17, s15
 800bc6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc72:	2600      	movs	r6, #0
 800bc74:	4632      	mov	r2, r6
 800bc76:	463b      	mov	r3, r7
 800bc78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7c:	f7f4 fabc 	bl	80001f8 <__aeabi_dsub>
 800bc80:	4622      	mov	r2, r4
 800bc82:	462b      	mov	r3, r5
 800bc84:	f7f4 fc70 	bl	8000568 <__aeabi_dmul>
 800bc88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	4650      	mov	r0, sl
 800bc92:	4659      	mov	r1, fp
 800bc94:	f7f4 fc68 	bl	8000568 <__aeabi_dmul>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 faac 	bl	80001fc <__adddf3>
 800bca4:	4632      	mov	r2, r6
 800bca6:	463b      	mov	r3, r7
 800bca8:	4680      	mov	r8, r0
 800bcaa:	4689      	mov	r9, r1
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 fc5a 	bl	8000568 <__aeabi_dmul>
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	460d      	mov	r5, r1
 800bcba:	4602      	mov	r2, r0
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	f7f4 fa9c 	bl	80001fc <__adddf3>
 800bcc4:	4b1d      	ldr	r3, [pc, #116]	; (800bd3c <__ieee754_pow+0x3dc>)
 800bcc6:	4299      	cmp	r1, r3
 800bcc8:	ec45 4b19 	vmov	d9, r4, r5
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	f340 82fe 	ble.w	800c2d2 <__ieee754_pow+0x972>
 800bcd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bcda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bcde:	4303      	orrs	r3, r0
 800bce0:	f000 81f0 	beq.w	800c0c4 <__ieee754_pow+0x764>
 800bce4:	a310      	add	r3, pc, #64	; (adr r3, 800bd28 <__ieee754_pow+0x3c8>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	ec51 0b18 	vmov	r0, r1, d8
 800bcee:	f7f4 fc3b 	bl	8000568 <__aeabi_dmul>
 800bcf2:	a30d      	add	r3, pc, #52	; (adr r3, 800bd28 <__ieee754_pow+0x3c8>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	e6cb      	b.n	800ba92 <__ieee754_pow+0x132>
 800bcfa:	bf00      	nop
 800bcfc:	f3af 8000 	nop.w
 800bd00:	60000000 	.word	0x60000000
 800bd04:	3ff71547 	.word	0x3ff71547
 800bd08:	f85ddf44 	.word	0xf85ddf44
 800bd0c:	3e54ae0b 	.word	0x3e54ae0b
 800bd10:	55555555 	.word	0x55555555
 800bd14:	3fd55555 	.word	0x3fd55555
 800bd18:	652b82fe 	.word	0x652b82fe
 800bd1c:	3ff71547 	.word	0x3ff71547
 800bd20:	00000000 	.word	0x00000000
 800bd24:	bff00000 	.word	0xbff00000
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	3ff00000 	.word	0x3ff00000
 800bd34:	3fd00000 	.word	0x3fd00000
 800bd38:	3fe00000 	.word	0x3fe00000
 800bd3c:	408fffff 	.word	0x408fffff
 800bd40:	4bd7      	ldr	r3, [pc, #860]	; (800c0a0 <__ieee754_pow+0x740>)
 800bd42:	ea03 0309 	and.w	r3, r3, r9
 800bd46:	2200      	movs	r2, #0
 800bd48:	b92b      	cbnz	r3, 800bd56 <__ieee754_pow+0x3f6>
 800bd4a:	4bd6      	ldr	r3, [pc, #856]	; (800c0a4 <__ieee754_pow+0x744>)
 800bd4c:	f7f4 fc0c 	bl	8000568 <__aeabi_dmul>
 800bd50:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bd54:	460c      	mov	r4, r1
 800bd56:	1523      	asrs	r3, r4, #20
 800bd58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd5c:	4413      	add	r3, r2
 800bd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd60:	4bd1      	ldr	r3, [pc, #836]	; (800c0a8 <__ieee754_pow+0x748>)
 800bd62:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bd66:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bd6a:	429c      	cmp	r4, r3
 800bd6c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd70:	dd08      	ble.n	800bd84 <__ieee754_pow+0x424>
 800bd72:	4bce      	ldr	r3, [pc, #824]	; (800c0ac <__ieee754_pow+0x74c>)
 800bd74:	429c      	cmp	r4, r3
 800bd76:	f340 8163 	ble.w	800c040 <__ieee754_pow+0x6e0>
 800bd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd80:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bd84:	2400      	movs	r4, #0
 800bd86:	00e3      	lsls	r3, r4, #3
 800bd88:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd8a:	4bc9      	ldr	r3, [pc, #804]	; (800c0b0 <__ieee754_pow+0x750>)
 800bd8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd90:	ed93 7b00 	vldr	d7, [r3]
 800bd94:	4629      	mov	r1, r5
 800bd96:	ec53 2b17 	vmov	r2, r3, d7
 800bd9a:	eeb0 8a47 	vmov.f32	s16, s14
 800bd9e:	eef0 8a67 	vmov.f32	s17, s15
 800bda2:	4682      	mov	sl, r0
 800bda4:	f7f4 fa28 	bl	80001f8 <__aeabi_dsub>
 800bda8:	4652      	mov	r2, sl
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460f      	mov	r7, r1
 800bdae:	462b      	mov	r3, r5
 800bdb0:	ec51 0b18 	vmov	r0, r1, d8
 800bdb4:	f7f4 fa22 	bl	80001fc <__adddf3>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	49bd      	ldr	r1, [pc, #756]	; (800c0b4 <__ieee754_pow+0x754>)
 800bdc0:	f7f4 fcfc 	bl	80007bc <__aeabi_ddiv>
 800bdc4:	ec41 0b19 	vmov	d9, r0, r1
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 fbca 	bl	8000568 <__aeabi_dmul>
 800bdd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bddc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bde0:	2300      	movs	r3, #0
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bde8:	46ab      	mov	fp, r5
 800bdea:	106d      	asrs	r5, r5, #1
 800bdec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bdf0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bdf4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	4614      	mov	r4, r2
 800be00:	461d      	mov	r5, r3
 800be02:	f7f4 fbb1 	bl	8000568 <__aeabi_dmul>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 f9f3 	bl	80001f8 <__aeabi_dsub>
 800be12:	ec53 2b18 	vmov	r2, r3, d8
 800be16:	4606      	mov	r6, r0
 800be18:	460f      	mov	r7, r1
 800be1a:	4620      	mov	r0, r4
 800be1c:	4629      	mov	r1, r5
 800be1e:	f7f4 f9eb 	bl	80001f8 <__aeabi_dsub>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4650      	mov	r0, sl
 800be28:	4659      	mov	r1, fp
 800be2a:	f7f4 f9e5 	bl	80001f8 <__aeabi_dsub>
 800be2e:	4642      	mov	r2, r8
 800be30:	464b      	mov	r3, r9
 800be32:	f7f4 fb99 	bl	8000568 <__aeabi_dmul>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 f9db 	bl	80001f8 <__aeabi_dsub>
 800be42:	ec53 2b19 	vmov	r2, r3, d9
 800be46:	f7f4 fb8f 	bl	8000568 <__aeabi_dmul>
 800be4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be4e:	ec41 0b18 	vmov	d8, r0, r1
 800be52:	4610      	mov	r0, r2
 800be54:	4619      	mov	r1, r3
 800be56:	f7f4 fb87 	bl	8000568 <__aeabi_dmul>
 800be5a:	a37d      	add	r3, pc, #500	; (adr r3, 800c050 <__ieee754_pow+0x6f0>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	f7f4 fb80 	bl	8000568 <__aeabi_dmul>
 800be68:	a37b      	add	r3, pc, #492	; (adr r3, 800c058 <__ieee754_pow+0x6f8>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 f9c5 	bl	80001fc <__adddf3>
 800be72:	4622      	mov	r2, r4
 800be74:	462b      	mov	r3, r5
 800be76:	f7f4 fb77 	bl	8000568 <__aeabi_dmul>
 800be7a:	a379      	add	r3, pc, #484	; (adr r3, 800c060 <__ieee754_pow+0x700>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f7f4 f9bc 	bl	80001fc <__adddf3>
 800be84:	4622      	mov	r2, r4
 800be86:	462b      	mov	r3, r5
 800be88:	f7f4 fb6e 	bl	8000568 <__aeabi_dmul>
 800be8c:	a376      	add	r3, pc, #472	; (adr r3, 800c068 <__ieee754_pow+0x708>)
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	f7f4 f9b3 	bl	80001fc <__adddf3>
 800be96:	4622      	mov	r2, r4
 800be98:	462b      	mov	r3, r5
 800be9a:	f7f4 fb65 	bl	8000568 <__aeabi_dmul>
 800be9e:	a374      	add	r3, pc, #464	; (adr r3, 800c070 <__ieee754_pow+0x710>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 f9aa 	bl	80001fc <__adddf3>
 800bea8:	4622      	mov	r2, r4
 800beaa:	462b      	mov	r3, r5
 800beac:	f7f4 fb5c 	bl	8000568 <__aeabi_dmul>
 800beb0:	a371      	add	r3, pc, #452	; (adr r3, 800c078 <__ieee754_pow+0x718>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 f9a1 	bl	80001fc <__adddf3>
 800beba:	4622      	mov	r2, r4
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	462b      	mov	r3, r5
 800bec2:	4620      	mov	r0, r4
 800bec4:	4629      	mov	r1, r5
 800bec6:	f7f4 fb4f 	bl	8000568 <__aeabi_dmul>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 fb49 	bl	8000568 <__aeabi_dmul>
 800bed6:	4642      	mov	r2, r8
 800bed8:	4604      	mov	r4, r0
 800beda:	460d      	mov	r5, r1
 800bedc:	464b      	mov	r3, r9
 800bede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bee2:	f7f4 f98b 	bl	80001fc <__adddf3>
 800bee6:	ec53 2b18 	vmov	r2, r3, d8
 800beea:	f7f4 fb3d 	bl	8000568 <__aeabi_dmul>
 800beee:	4622      	mov	r2, r4
 800bef0:	462b      	mov	r3, r5
 800bef2:	f7f4 f983 	bl	80001fc <__adddf3>
 800bef6:	4642      	mov	r2, r8
 800bef8:	4682      	mov	sl, r0
 800befa:	468b      	mov	fp, r1
 800befc:	464b      	mov	r3, r9
 800befe:	4640      	mov	r0, r8
 800bf00:	4649      	mov	r1, r9
 800bf02:	f7f4 fb31 	bl	8000568 <__aeabi_dmul>
 800bf06:	4b6c      	ldr	r3, [pc, #432]	; (800c0b8 <__ieee754_pow+0x758>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460f      	mov	r7, r1
 800bf0e:	f7f4 f975 	bl	80001fc <__adddf3>
 800bf12:	4652      	mov	r2, sl
 800bf14:	465b      	mov	r3, fp
 800bf16:	f7f4 f971 	bl	80001fc <__adddf3>
 800bf1a:	9c04      	ldr	r4, [sp, #16]
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	4622      	mov	r2, r4
 800bf20:	460b      	mov	r3, r1
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	f7f4 fb1f 	bl	8000568 <__aeabi_dmul>
 800bf2a:	4b63      	ldr	r3, [pc, #396]	; (800c0b8 <__ieee754_pow+0x758>)
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	4689      	mov	r9, r1
 800bf30:	2200      	movs	r2, #0
 800bf32:	4620      	mov	r0, r4
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7f4 f95f 	bl	80001f8 <__aeabi_dsub>
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	f7f4 f95b 	bl	80001f8 <__aeabi_dsub>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4650      	mov	r0, sl
 800bf48:	4659      	mov	r1, fp
 800bf4a:	f7f4 f955 	bl	80001f8 <__aeabi_dsub>
 800bf4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf52:	f7f4 fb09 	bl	8000568 <__aeabi_dmul>
 800bf56:	4622      	mov	r2, r4
 800bf58:	4606      	mov	r6, r0
 800bf5a:	460f      	mov	r7, r1
 800bf5c:	462b      	mov	r3, r5
 800bf5e:	ec51 0b18 	vmov	r0, r1, d8
 800bf62:	f7f4 fb01 	bl	8000568 <__aeabi_dmul>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	f7f4 f945 	bl	80001fc <__adddf3>
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4640      	mov	r0, r8
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	f7f4 f93d 	bl	80001fc <__adddf3>
 800bf82:	9c04      	ldr	r4, [sp, #16]
 800bf84:	a33e      	add	r3, pc, #248	; (adr r3, 800c080 <__ieee754_pow+0x720>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	460d      	mov	r5, r1
 800bf8e:	f7f4 faeb 	bl	8000568 <__aeabi_dmul>
 800bf92:	4642      	mov	r2, r8
 800bf94:	ec41 0b18 	vmov	d8, r0, r1
 800bf98:	464b      	mov	r3, r9
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f92b 	bl	80001f8 <__aeabi_dsub>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	f7f4 f925 	bl	80001f8 <__aeabi_dsub>
 800bfae:	a336      	add	r3, pc, #216	; (adr r3, 800c088 <__ieee754_pow+0x728>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 fad8 	bl	8000568 <__aeabi_dmul>
 800bfb8:	a335      	add	r3, pc, #212	; (adr r3, 800c090 <__ieee754_pow+0x730>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	460f      	mov	r7, r1
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7f4 facf 	bl	8000568 <__aeabi_dmul>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4630      	mov	r0, r6
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	f7f4 f913 	bl	80001fc <__adddf3>
 800bfd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfd8:	4b38      	ldr	r3, [pc, #224]	; (800c0bc <__ieee754_pow+0x75c>)
 800bfda:	4413      	add	r3, r2
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 f90c 	bl	80001fc <__adddf3>
 800bfe4:	4682      	mov	sl, r0
 800bfe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfe8:	468b      	mov	fp, r1
 800bfea:	f7f4 fa53 	bl	8000494 <__aeabi_i2d>
 800bfee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bff0:	4b33      	ldr	r3, [pc, #204]	; (800c0c0 <__ieee754_pow+0x760>)
 800bff2:	4413      	add	r3, r2
 800bff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bff8:	4606      	mov	r6, r0
 800bffa:	460f      	mov	r7, r1
 800bffc:	4652      	mov	r2, sl
 800bffe:	465b      	mov	r3, fp
 800c000:	ec51 0b18 	vmov	r0, r1, d8
 800c004:	f7f4 f8fa 	bl	80001fc <__adddf3>
 800c008:	4642      	mov	r2, r8
 800c00a:	464b      	mov	r3, r9
 800c00c:	f7f4 f8f6 	bl	80001fc <__adddf3>
 800c010:	4632      	mov	r2, r6
 800c012:	463b      	mov	r3, r7
 800c014:	f7f4 f8f2 	bl	80001fc <__adddf3>
 800c018:	9c04      	ldr	r4, [sp, #16]
 800c01a:	4632      	mov	r2, r6
 800c01c:	463b      	mov	r3, r7
 800c01e:	4620      	mov	r0, r4
 800c020:	460d      	mov	r5, r1
 800c022:	f7f4 f8e9 	bl	80001f8 <__aeabi_dsub>
 800c026:	4642      	mov	r2, r8
 800c028:	464b      	mov	r3, r9
 800c02a:	f7f4 f8e5 	bl	80001f8 <__aeabi_dsub>
 800c02e:	ec53 2b18 	vmov	r2, r3, d8
 800c032:	f7f4 f8e1 	bl	80001f8 <__aeabi_dsub>
 800c036:	4602      	mov	r2, r0
 800c038:	460b      	mov	r3, r1
 800c03a:	4650      	mov	r0, sl
 800c03c:	4659      	mov	r1, fp
 800c03e:	e606      	b.n	800bc4e <__ieee754_pow+0x2ee>
 800c040:	2401      	movs	r4, #1
 800c042:	e6a0      	b.n	800bd86 <__ieee754_pow+0x426>
 800c044:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c098 <__ieee754_pow+0x738>
 800c048:	e60d      	b.n	800bc66 <__ieee754_pow+0x306>
 800c04a:	bf00      	nop
 800c04c:	f3af 8000 	nop.w
 800c050:	4a454eef 	.word	0x4a454eef
 800c054:	3fca7e28 	.word	0x3fca7e28
 800c058:	93c9db65 	.word	0x93c9db65
 800c05c:	3fcd864a 	.word	0x3fcd864a
 800c060:	a91d4101 	.word	0xa91d4101
 800c064:	3fd17460 	.word	0x3fd17460
 800c068:	518f264d 	.word	0x518f264d
 800c06c:	3fd55555 	.word	0x3fd55555
 800c070:	db6fabff 	.word	0xdb6fabff
 800c074:	3fdb6db6 	.word	0x3fdb6db6
 800c078:	33333303 	.word	0x33333303
 800c07c:	3fe33333 	.word	0x3fe33333
 800c080:	e0000000 	.word	0xe0000000
 800c084:	3feec709 	.word	0x3feec709
 800c088:	dc3a03fd 	.word	0xdc3a03fd
 800c08c:	3feec709 	.word	0x3feec709
 800c090:	145b01f5 	.word	0x145b01f5
 800c094:	be3e2fe0 	.word	0xbe3e2fe0
 800c098:	00000000 	.word	0x00000000
 800c09c:	3ff00000 	.word	0x3ff00000
 800c0a0:	7ff00000 	.word	0x7ff00000
 800c0a4:	43400000 	.word	0x43400000
 800c0a8:	0003988e 	.word	0x0003988e
 800c0ac:	000bb679 	.word	0x000bb679
 800c0b0:	0800d6b8 	.word	0x0800d6b8
 800c0b4:	3ff00000 	.word	0x3ff00000
 800c0b8:	40080000 	.word	0x40080000
 800c0bc:	0800d6d8 	.word	0x0800d6d8
 800c0c0:	0800d6c8 	.word	0x0800d6c8
 800c0c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800c39c <__ieee754_pow+0xa3c>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 f895 	bl	80001fc <__adddf3>
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	ec41 0b1a 	vmov	d10, r0, r1
 800c0d8:	462b      	mov	r3, r5
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 f88b 	bl	80001f8 <__aeabi_dsub>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	ec51 0b1a 	vmov	r0, r1, d10
 800c0ea:	f7f4 fccd 	bl	8000a88 <__aeabi_dcmpgt>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f47f adf8 	bne.w	800bce4 <__ieee754_pow+0x384>
 800c0f4:	4aa4      	ldr	r2, [pc, #656]	; (800c388 <__ieee754_pow+0xa28>)
 800c0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	f340 810b 	ble.w	800c316 <__ieee754_pow+0x9b6>
 800c100:	151b      	asrs	r3, r3, #20
 800c102:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c106:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c10a:	fa4a f303 	asr.w	r3, sl, r3
 800c10e:	445b      	add	r3, fp
 800c110:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c114:	4e9d      	ldr	r6, [pc, #628]	; (800c38c <__ieee754_pow+0xa2c>)
 800c116:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c11a:	4116      	asrs	r6, r2
 800c11c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c120:	2000      	movs	r0, #0
 800c122:	ea23 0106 	bic.w	r1, r3, r6
 800c126:	f1c2 0214 	rsb	r2, r2, #20
 800c12a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c12e:	fa4a fa02 	asr.w	sl, sl, r2
 800c132:	f1bb 0f00 	cmp.w	fp, #0
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4620      	mov	r0, r4
 800c13c:	4629      	mov	r1, r5
 800c13e:	bfb8      	it	lt
 800c140:	f1ca 0a00 	rsblt	sl, sl, #0
 800c144:	f7f4 f858 	bl	80001f8 <__aeabi_dsub>
 800c148:	ec41 0b19 	vmov	d9, r0, r1
 800c14c:	4642      	mov	r2, r8
 800c14e:	464b      	mov	r3, r9
 800c150:	ec51 0b19 	vmov	r0, r1, d9
 800c154:	f7f4 f852 	bl	80001fc <__adddf3>
 800c158:	2400      	movs	r4, #0
 800c15a:	a379      	add	r3, pc, #484	; (adr r3, 800c340 <__ieee754_pow+0x9e0>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	4620      	mov	r0, r4
 800c162:	460d      	mov	r5, r1
 800c164:	f7f4 fa00 	bl	8000568 <__aeabi_dmul>
 800c168:	ec53 2b19 	vmov	r2, r3, d9
 800c16c:	4606      	mov	r6, r0
 800c16e:	460f      	mov	r7, r1
 800c170:	4620      	mov	r0, r4
 800c172:	4629      	mov	r1, r5
 800c174:	f7f4 f840 	bl	80001f8 <__aeabi_dsub>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f4 f83a 	bl	80001f8 <__aeabi_dsub>
 800c184:	a370      	add	r3, pc, #448	; (adr r3, 800c348 <__ieee754_pow+0x9e8>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f7f4 f9ed 	bl	8000568 <__aeabi_dmul>
 800c18e:	a370      	add	r3, pc, #448	; (adr r3, 800c350 <__ieee754_pow+0x9f0>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	4620      	mov	r0, r4
 800c19a:	4629      	mov	r1, r5
 800c19c:	f7f4 f9e4 	bl	8000568 <__aeabi_dmul>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4640      	mov	r0, r8
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	f7f4 f828 	bl	80001fc <__adddf3>
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	460d      	mov	r5, r1
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 f820 	bl	80001fc <__adddf3>
 800c1bc:	4632      	mov	r2, r6
 800c1be:	463b      	mov	r3, r7
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	4689      	mov	r9, r1
 800c1c4:	f7f4 f818 	bl	80001f8 <__aeabi_dsub>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 f812 	bl	80001f8 <__aeabi_dsub>
 800c1d4:	4642      	mov	r2, r8
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460f      	mov	r7, r1
 800c1da:	464b      	mov	r3, r9
 800c1dc:	4640      	mov	r0, r8
 800c1de:	4649      	mov	r1, r9
 800c1e0:	f7f4 f9c2 	bl	8000568 <__aeabi_dmul>
 800c1e4:	a35c      	add	r3, pc, #368	; (adr r3, 800c358 <__ieee754_pow+0x9f8>)
 800c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	460d      	mov	r5, r1
 800c1ee:	f7f4 f9bb 	bl	8000568 <__aeabi_dmul>
 800c1f2:	a35b      	add	r3, pc, #364	; (adr r3, 800c360 <__ieee754_pow+0xa00>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f3 fffe 	bl	80001f8 <__aeabi_dsub>
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 f9b2 	bl	8000568 <__aeabi_dmul>
 800c204:	a358      	add	r3, pc, #352	; (adr r3, 800c368 <__ieee754_pow+0xa08>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f3 fff7 	bl	80001fc <__adddf3>
 800c20e:	4622      	mov	r2, r4
 800c210:	462b      	mov	r3, r5
 800c212:	f7f4 f9a9 	bl	8000568 <__aeabi_dmul>
 800c216:	a356      	add	r3, pc, #344	; (adr r3, 800c370 <__ieee754_pow+0xa10>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f7f3 ffec 	bl	80001f8 <__aeabi_dsub>
 800c220:	4622      	mov	r2, r4
 800c222:	462b      	mov	r3, r5
 800c224:	f7f4 f9a0 	bl	8000568 <__aeabi_dmul>
 800c228:	a353      	add	r3, pc, #332	; (adr r3, 800c378 <__ieee754_pow+0xa18>)
 800c22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22e:	f7f3 ffe5 	bl	80001fc <__adddf3>
 800c232:	4622      	mov	r2, r4
 800c234:	462b      	mov	r3, r5
 800c236:	f7f4 f997 	bl	8000568 <__aeabi_dmul>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4640      	mov	r0, r8
 800c240:	4649      	mov	r1, r9
 800c242:	f7f3 ffd9 	bl	80001f8 <__aeabi_dsub>
 800c246:	4604      	mov	r4, r0
 800c248:	460d      	mov	r5, r1
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4640      	mov	r0, r8
 800c250:	4649      	mov	r1, r9
 800c252:	f7f4 f989 	bl	8000568 <__aeabi_dmul>
 800c256:	2200      	movs	r2, #0
 800c258:	ec41 0b19 	vmov	d9, r0, r1
 800c25c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c260:	4620      	mov	r0, r4
 800c262:	4629      	mov	r1, r5
 800c264:	f7f3 ffc8 	bl	80001f8 <__aeabi_dsub>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	ec51 0b19 	vmov	r0, r1, d9
 800c270:	f7f4 faa4 	bl	80007bc <__aeabi_ddiv>
 800c274:	4632      	mov	r2, r6
 800c276:	4604      	mov	r4, r0
 800c278:	460d      	mov	r5, r1
 800c27a:	463b      	mov	r3, r7
 800c27c:	4640      	mov	r0, r8
 800c27e:	4649      	mov	r1, r9
 800c280:	f7f4 f972 	bl	8000568 <__aeabi_dmul>
 800c284:	4632      	mov	r2, r6
 800c286:	463b      	mov	r3, r7
 800c288:	f7f3 ffb8 	bl	80001fc <__adddf3>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	f7f3 ffb0 	bl	80001f8 <__aeabi_dsub>
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	f7f3 ffac 	bl	80001f8 <__aeabi_dsub>
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	493a      	ldr	r1, [pc, #232]	; (800c390 <__ieee754_pow+0xa30>)
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f7f3 ffa6 	bl	80001f8 <__aeabi_dsub>
 800c2ac:	e9cd 0100 	strd	r0, r1, [sp]
 800c2b0:	9b01      	ldr	r3, [sp, #4]
 800c2b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c2b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2ba:	da2f      	bge.n	800c31c <__ieee754_pow+0x9bc>
 800c2bc:	4650      	mov	r0, sl
 800c2be:	ed9d 0b00 	vldr	d0, [sp]
 800c2c2:	f001 f919 	bl	800d4f8 <scalbn>
 800c2c6:	ec51 0b10 	vmov	r0, r1, d0
 800c2ca:	ec53 2b18 	vmov	r2, r3, d8
 800c2ce:	f7ff bbe0 	b.w	800ba92 <__ieee754_pow+0x132>
 800c2d2:	4b30      	ldr	r3, [pc, #192]	; (800c394 <__ieee754_pow+0xa34>)
 800c2d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	f77f af0b 	ble.w	800c0f4 <__ieee754_pow+0x794>
 800c2de:	4b2e      	ldr	r3, [pc, #184]	; (800c398 <__ieee754_pow+0xa38>)
 800c2e0:	440b      	add	r3, r1
 800c2e2:	4303      	orrs	r3, r0
 800c2e4:	d00b      	beq.n	800c2fe <__ieee754_pow+0x99e>
 800c2e6:	a326      	add	r3, pc, #152	; (adr r3, 800c380 <__ieee754_pow+0xa20>)
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	ec51 0b18 	vmov	r0, r1, d8
 800c2f0:	f7f4 f93a 	bl	8000568 <__aeabi_dmul>
 800c2f4:	a322      	add	r3, pc, #136	; (adr r3, 800c380 <__ieee754_pow+0xa20>)
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	f7ff bbca 	b.w	800ba92 <__ieee754_pow+0x132>
 800c2fe:	4622      	mov	r2, r4
 800c300:	462b      	mov	r3, r5
 800c302:	f7f3 ff79 	bl	80001f8 <__aeabi_dsub>
 800c306:	4642      	mov	r2, r8
 800c308:	464b      	mov	r3, r9
 800c30a:	f7f4 fbb3 	bl	8000a74 <__aeabi_dcmpge>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f43f aef0 	beq.w	800c0f4 <__ieee754_pow+0x794>
 800c314:	e7e7      	b.n	800c2e6 <__ieee754_pow+0x986>
 800c316:	f04f 0a00 	mov.w	sl, #0
 800c31a:	e717      	b.n	800c14c <__ieee754_pow+0x7ec>
 800c31c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c320:	4619      	mov	r1, r3
 800c322:	e7d2      	b.n	800c2ca <__ieee754_pow+0x96a>
 800c324:	491a      	ldr	r1, [pc, #104]	; (800c390 <__ieee754_pow+0xa30>)
 800c326:	2000      	movs	r0, #0
 800c328:	f7ff bb9e 	b.w	800ba68 <__ieee754_pow+0x108>
 800c32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c330:	f7ff bb9a 	b.w	800ba68 <__ieee754_pow+0x108>
 800c334:	9000      	str	r0, [sp, #0]
 800c336:	f7ff bb76 	b.w	800ba26 <__ieee754_pow+0xc6>
 800c33a:	2100      	movs	r1, #0
 800c33c:	f7ff bb60 	b.w	800ba00 <__ieee754_pow+0xa0>
 800c340:	00000000 	.word	0x00000000
 800c344:	3fe62e43 	.word	0x3fe62e43
 800c348:	fefa39ef 	.word	0xfefa39ef
 800c34c:	3fe62e42 	.word	0x3fe62e42
 800c350:	0ca86c39 	.word	0x0ca86c39
 800c354:	be205c61 	.word	0xbe205c61
 800c358:	72bea4d0 	.word	0x72bea4d0
 800c35c:	3e663769 	.word	0x3e663769
 800c360:	c5d26bf1 	.word	0xc5d26bf1
 800c364:	3ebbbd41 	.word	0x3ebbbd41
 800c368:	af25de2c 	.word	0xaf25de2c
 800c36c:	3f11566a 	.word	0x3f11566a
 800c370:	16bebd93 	.word	0x16bebd93
 800c374:	3f66c16c 	.word	0x3f66c16c
 800c378:	5555553e 	.word	0x5555553e
 800c37c:	3fc55555 	.word	0x3fc55555
 800c380:	c2f8f359 	.word	0xc2f8f359
 800c384:	01a56e1f 	.word	0x01a56e1f
 800c388:	3fe00000 	.word	0x3fe00000
 800c38c:	000fffff 	.word	0x000fffff
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	4090cbff 	.word	0x4090cbff
 800c398:	3f6f3400 	.word	0x3f6f3400
 800c39c:	652b82fe 	.word	0x652b82fe
 800c3a0:	3c971547 	.word	0x3c971547
 800c3a4:	00000000 	.word	0x00000000

0800c3a8 <__ieee754_rem_pio2>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	ed2d 8b02 	vpush	{d8}
 800c3b0:	ec55 4b10 	vmov	r4, r5, d0
 800c3b4:	4bca      	ldr	r3, [pc, #808]	; (800c6e0 <__ieee754_rem_pio2+0x338>)
 800c3b6:	b08b      	sub	sp, #44	; 0x2c
 800c3b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c3bc:	4598      	cmp	r8, r3
 800c3be:	4682      	mov	sl, r0
 800c3c0:	9502      	str	r5, [sp, #8]
 800c3c2:	dc08      	bgt.n	800c3d6 <__ieee754_rem_pio2+0x2e>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	ed80 0b00 	vstr	d0, [r0]
 800c3cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c3d0:	f04f 0b00 	mov.w	fp, #0
 800c3d4:	e028      	b.n	800c428 <__ieee754_rem_pio2+0x80>
 800c3d6:	4bc3      	ldr	r3, [pc, #780]	; (800c6e4 <__ieee754_rem_pio2+0x33c>)
 800c3d8:	4598      	cmp	r8, r3
 800c3da:	dc78      	bgt.n	800c4ce <__ieee754_rem_pio2+0x126>
 800c3dc:	9b02      	ldr	r3, [sp, #8]
 800c3de:	4ec2      	ldr	r6, [pc, #776]	; (800c6e8 <__ieee754_rem_pio2+0x340>)
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	ee10 0a10 	vmov	r0, s0
 800c3e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x300>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	dd39      	ble.n	800c464 <__ieee754_rem_pio2+0xbc>
 800c3f0:	f7f3 ff02 	bl	80001f8 <__aeabi_dsub>
 800c3f4:	45b0      	cmp	r8, r6
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	d01b      	beq.n	800c434 <__ieee754_rem_pio2+0x8c>
 800c3fc:	a3ac      	add	r3, pc, #688	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x308>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	f7f3 fef9 	bl	80001f8 <__aeabi_dsub>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	e9ca 2300 	strd	r2, r3, [sl]
 800c40e:	4620      	mov	r0, r4
 800c410:	4629      	mov	r1, r5
 800c412:	f7f3 fef1 	bl	80001f8 <__aeabi_dsub>
 800c416:	a3a6      	add	r3, pc, #664	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x308>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f7f3 feec 	bl	80001f8 <__aeabi_dsub>
 800c420:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c424:	f04f 0b01 	mov.w	fp, #1
 800c428:	4658      	mov	r0, fp
 800c42a:	b00b      	add	sp, #44	; 0x2c
 800c42c:	ecbd 8b02 	vpop	{d8}
 800c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c434:	a3a0      	add	r3, pc, #640	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x310>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 fedd 	bl	80001f8 <__aeabi_dsub>
 800c43e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x318>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	4604      	mov	r4, r0
 800c446:	460d      	mov	r5, r1
 800c448:	f7f3 fed6 	bl	80001f8 <__aeabi_dsub>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	e9ca 2300 	strd	r2, r3, [sl]
 800c454:	4620      	mov	r0, r4
 800c456:	4629      	mov	r1, r5
 800c458:	f7f3 fece 	bl	80001f8 <__aeabi_dsub>
 800c45c:	a398      	add	r3, pc, #608	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x318>)
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	e7db      	b.n	800c41c <__ieee754_rem_pio2+0x74>
 800c464:	f7f3 feca 	bl	80001fc <__adddf3>
 800c468:	45b0      	cmp	r8, r6
 800c46a:	4604      	mov	r4, r0
 800c46c:	460d      	mov	r5, r1
 800c46e:	d016      	beq.n	800c49e <__ieee754_rem_pio2+0xf6>
 800c470:	a38f      	add	r3, pc, #572	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x308>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f3 fec1 	bl	80001fc <__adddf3>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	e9ca 2300 	strd	r2, r3, [sl]
 800c482:	4620      	mov	r0, r4
 800c484:	4629      	mov	r1, r5
 800c486:	f7f3 feb7 	bl	80001f8 <__aeabi_dsub>
 800c48a:	a389      	add	r3, pc, #548	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x308>)
 800c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c490:	f7f3 feb4 	bl	80001fc <__adddf3>
 800c494:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c498:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c49c:	e7c4      	b.n	800c428 <__ieee754_rem_pio2+0x80>
 800c49e:	a386      	add	r3, pc, #536	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x310>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f3 feaa 	bl	80001fc <__adddf3>
 800c4a8:	a385      	add	r3, pc, #532	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x318>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	460d      	mov	r5, r1
 800c4b2:	f7f3 fea3 	bl	80001fc <__adddf3>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	e9ca 2300 	strd	r2, r3, [sl]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7f3 fe99 	bl	80001f8 <__aeabi_dsub>
 800c4c6:	a37e      	add	r3, pc, #504	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x318>)
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	e7e0      	b.n	800c490 <__ieee754_rem_pio2+0xe8>
 800c4ce:	4b87      	ldr	r3, [pc, #540]	; (800c6ec <__ieee754_rem_pio2+0x344>)
 800c4d0:	4598      	cmp	r8, r3
 800c4d2:	f300 80d9 	bgt.w	800c688 <__ieee754_rem_pio2+0x2e0>
 800c4d6:	f7fe fd97 	bl	800b008 <fabs>
 800c4da:	ec55 4b10 	vmov	r4, r5, d0
 800c4de:	ee10 0a10 	vmov	r0, s0
 800c4e2:	a379      	add	r3, pc, #484	; (adr r3, 800c6c8 <__ieee754_rem_pio2+0x320>)
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f4 f83d 	bl	8000568 <__aeabi_dmul>
 800c4ee:	4b80      	ldr	r3, [pc, #512]	; (800c6f0 <__ieee754_rem_pio2+0x348>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f7f3 fe83 	bl	80001fc <__adddf3>
 800c4f6:	f7f4 fae7 	bl	8000ac8 <__aeabi_d2iz>
 800c4fa:	4683      	mov	fp, r0
 800c4fc:	f7f3 ffca 	bl	8000494 <__aeabi_i2d>
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	ec43 2b18 	vmov	d8, r2, r3
 800c508:	a367      	add	r3, pc, #412	; (adr r3, 800c6a8 <__ieee754_rem_pio2+0x300>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f4 f82b 	bl	8000568 <__aeabi_dmul>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f3 fe6d 	bl	80001f8 <__aeabi_dsub>
 800c51e:	a364      	add	r3, pc, #400	; (adr r3, 800c6b0 <__ieee754_rem_pio2+0x308>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	4606      	mov	r6, r0
 800c526:	460f      	mov	r7, r1
 800c528:	ec51 0b18 	vmov	r0, r1, d8
 800c52c:	f7f4 f81c 	bl	8000568 <__aeabi_dmul>
 800c530:	f1bb 0f1f 	cmp.w	fp, #31
 800c534:	4604      	mov	r4, r0
 800c536:	460d      	mov	r5, r1
 800c538:	dc0d      	bgt.n	800c556 <__ieee754_rem_pio2+0x1ae>
 800c53a:	4b6e      	ldr	r3, [pc, #440]	; (800c6f4 <__ieee754_rem_pio2+0x34c>)
 800c53c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c544:	4543      	cmp	r3, r8
 800c546:	d006      	beq.n	800c556 <__ieee754_rem_pio2+0x1ae>
 800c548:	4622      	mov	r2, r4
 800c54a:	462b      	mov	r3, r5
 800c54c:	4630      	mov	r0, r6
 800c54e:	4639      	mov	r1, r7
 800c550:	f7f3 fe52 	bl	80001f8 <__aeabi_dsub>
 800c554:	e00f      	b.n	800c576 <__ieee754_rem_pio2+0x1ce>
 800c556:	462b      	mov	r3, r5
 800c558:	4622      	mov	r2, r4
 800c55a:	4630      	mov	r0, r6
 800c55c:	4639      	mov	r1, r7
 800c55e:	f7f3 fe4b 	bl	80001f8 <__aeabi_dsub>
 800c562:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c566:	9303      	str	r3, [sp, #12]
 800c568:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c56c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c570:	f1b8 0f10 	cmp.w	r8, #16
 800c574:	dc02      	bgt.n	800c57c <__ieee754_rem_pio2+0x1d4>
 800c576:	e9ca 0100 	strd	r0, r1, [sl]
 800c57a:	e039      	b.n	800c5f0 <__ieee754_rem_pio2+0x248>
 800c57c:	a34e      	add	r3, pc, #312	; (adr r3, 800c6b8 <__ieee754_rem_pio2+0x310>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	ec51 0b18 	vmov	r0, r1, d8
 800c586:	f7f3 ffef 	bl	8000568 <__aeabi_dmul>
 800c58a:	4604      	mov	r4, r0
 800c58c:	460d      	mov	r5, r1
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4630      	mov	r0, r6
 800c594:	4639      	mov	r1, r7
 800c596:	f7f3 fe2f 	bl	80001f8 <__aeabi_dsub>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4680      	mov	r8, r0
 800c5a0:	4689      	mov	r9, r1
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	f7f3 fe27 	bl	80001f8 <__aeabi_dsub>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	f7f3 fe23 	bl	80001f8 <__aeabi_dsub>
 800c5b2:	a343      	add	r3, pc, #268	; (adr r3, 800c6c0 <__ieee754_rem_pio2+0x318>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	460d      	mov	r5, r1
 800c5bc:	ec51 0b18 	vmov	r0, r1, d8
 800c5c0:	f7f3 ffd2 	bl	8000568 <__aeabi_dmul>
 800c5c4:	4622      	mov	r2, r4
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	f7f3 fe16 	bl	80001f8 <__aeabi_dsub>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	f7f3 fe0e 	bl	80001f8 <__aeabi_dsub>
 800c5dc:	9a03      	ldr	r2, [sp, #12]
 800c5de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c5e2:	1ad3      	subs	r3, r2, r3
 800c5e4:	2b31      	cmp	r3, #49	; 0x31
 800c5e6:	dc24      	bgt.n	800c632 <__ieee754_rem_pio2+0x28a>
 800c5e8:	e9ca 0100 	strd	r0, r1, [sl]
 800c5ec:	4646      	mov	r6, r8
 800c5ee:	464f      	mov	r7, r9
 800c5f0:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	4639      	mov	r1, r7
 800c5fc:	f7f3 fdfc 	bl	80001f8 <__aeabi_dsub>
 800c600:	462b      	mov	r3, r5
 800c602:	4622      	mov	r2, r4
 800c604:	f7f3 fdf8 	bl	80001f8 <__aeabi_dsub>
 800c608:	9b02      	ldr	r3, [sp, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c610:	f6bf af0a 	bge.w	800c428 <__ieee754_rem_pio2+0x80>
 800c614:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c618:	f8ca 3004 	str.w	r3, [sl, #4]
 800c61c:	f8ca 8000 	str.w	r8, [sl]
 800c620:	f8ca 0008 	str.w	r0, [sl, #8]
 800c624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c628:	f8ca 300c 	str.w	r3, [sl, #12]
 800c62c:	f1cb 0b00 	rsb	fp, fp, #0
 800c630:	e6fa      	b.n	800c428 <__ieee754_rem_pio2+0x80>
 800c632:	a327      	add	r3, pc, #156	; (adr r3, 800c6d0 <__ieee754_rem_pio2+0x328>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	ec51 0b18 	vmov	r0, r1, d8
 800c63c:	f7f3 ff94 	bl	8000568 <__aeabi_dmul>
 800c640:	4604      	mov	r4, r0
 800c642:	460d      	mov	r5, r1
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	4640      	mov	r0, r8
 800c64a:	4649      	mov	r1, r9
 800c64c:	f7f3 fdd4 	bl	80001f8 <__aeabi_dsub>
 800c650:	4602      	mov	r2, r0
 800c652:	460b      	mov	r3, r1
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
 800c658:	4640      	mov	r0, r8
 800c65a:	4649      	mov	r1, r9
 800c65c:	f7f3 fdcc 	bl	80001f8 <__aeabi_dsub>
 800c660:	4622      	mov	r2, r4
 800c662:	462b      	mov	r3, r5
 800c664:	f7f3 fdc8 	bl	80001f8 <__aeabi_dsub>
 800c668:	a31b      	add	r3, pc, #108	; (adr r3, 800c6d8 <__ieee754_rem_pio2+0x330>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	4604      	mov	r4, r0
 800c670:	460d      	mov	r5, r1
 800c672:	ec51 0b18 	vmov	r0, r1, d8
 800c676:	f7f3 ff77 	bl	8000568 <__aeabi_dmul>
 800c67a:	4622      	mov	r2, r4
 800c67c:	462b      	mov	r3, r5
 800c67e:	f7f3 fdbb 	bl	80001f8 <__aeabi_dsub>
 800c682:	4604      	mov	r4, r0
 800c684:	460d      	mov	r5, r1
 800c686:	e75f      	b.n	800c548 <__ieee754_rem_pio2+0x1a0>
 800c688:	4b1b      	ldr	r3, [pc, #108]	; (800c6f8 <__ieee754_rem_pio2+0x350>)
 800c68a:	4598      	cmp	r8, r3
 800c68c:	dd36      	ble.n	800c6fc <__ieee754_rem_pio2+0x354>
 800c68e:	ee10 2a10 	vmov	r2, s0
 800c692:	462b      	mov	r3, r5
 800c694:	4620      	mov	r0, r4
 800c696:	4629      	mov	r1, r5
 800c698:	f7f3 fdae 	bl	80001f8 <__aeabi_dsub>
 800c69c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6a0:	e9ca 0100 	strd	r0, r1, [sl]
 800c6a4:	e694      	b.n	800c3d0 <__ieee754_rem_pio2+0x28>
 800c6a6:	bf00      	nop
 800c6a8:	54400000 	.word	0x54400000
 800c6ac:	3ff921fb 	.word	0x3ff921fb
 800c6b0:	1a626331 	.word	0x1a626331
 800c6b4:	3dd0b461 	.word	0x3dd0b461
 800c6b8:	1a600000 	.word	0x1a600000
 800c6bc:	3dd0b461 	.word	0x3dd0b461
 800c6c0:	2e037073 	.word	0x2e037073
 800c6c4:	3ba3198a 	.word	0x3ba3198a
 800c6c8:	6dc9c883 	.word	0x6dc9c883
 800c6cc:	3fe45f30 	.word	0x3fe45f30
 800c6d0:	2e000000 	.word	0x2e000000
 800c6d4:	3ba3198a 	.word	0x3ba3198a
 800c6d8:	252049c1 	.word	0x252049c1
 800c6dc:	397b839a 	.word	0x397b839a
 800c6e0:	3fe921fb 	.word	0x3fe921fb
 800c6e4:	4002d97b 	.word	0x4002d97b
 800c6e8:	3ff921fb 	.word	0x3ff921fb
 800c6ec:	413921fb 	.word	0x413921fb
 800c6f0:	3fe00000 	.word	0x3fe00000
 800c6f4:	0800d6e8 	.word	0x0800d6e8
 800c6f8:	7fefffff 	.word	0x7fefffff
 800c6fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c700:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c704:	ee10 0a10 	vmov	r0, s0
 800c708:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c70c:	ee10 6a10 	vmov	r6, s0
 800c710:	460f      	mov	r7, r1
 800c712:	f7f4 f9d9 	bl	8000ac8 <__aeabi_d2iz>
 800c716:	f7f3 febd 	bl	8000494 <__aeabi_i2d>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4630      	mov	r0, r6
 800c720:	4639      	mov	r1, r7
 800c722:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c726:	f7f3 fd67 	bl	80001f8 <__aeabi_dsub>
 800c72a:	4b22      	ldr	r3, [pc, #136]	; (800c7b4 <__ieee754_rem_pio2+0x40c>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	f7f3 ff1b 	bl	8000568 <__aeabi_dmul>
 800c732:	460f      	mov	r7, r1
 800c734:	4606      	mov	r6, r0
 800c736:	f7f4 f9c7 	bl	8000ac8 <__aeabi_d2iz>
 800c73a:	f7f3 feab 	bl	8000494 <__aeabi_i2d>
 800c73e:	4602      	mov	r2, r0
 800c740:	460b      	mov	r3, r1
 800c742:	4630      	mov	r0, r6
 800c744:	4639      	mov	r1, r7
 800c746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c74a:	f7f3 fd55 	bl	80001f8 <__aeabi_dsub>
 800c74e:	4b19      	ldr	r3, [pc, #100]	; (800c7b4 <__ieee754_rem_pio2+0x40c>)
 800c750:	2200      	movs	r2, #0
 800c752:	f7f3 ff09 	bl	8000568 <__aeabi_dmul>
 800c756:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c75a:	ad04      	add	r5, sp, #16
 800c75c:	f04f 0803 	mov.w	r8, #3
 800c760:	46a9      	mov	r9, r5
 800c762:	2600      	movs	r6, #0
 800c764:	2700      	movs	r7, #0
 800c766:	4632      	mov	r2, r6
 800c768:	463b      	mov	r3, r7
 800c76a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c76e:	46c3      	mov	fp, r8
 800c770:	3d08      	subs	r5, #8
 800c772:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c776:	f7f4 f95f 	bl	8000a38 <__aeabi_dcmpeq>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d1f3      	bne.n	800c766 <__ieee754_rem_pio2+0x3be>
 800c77e:	4b0e      	ldr	r3, [pc, #56]	; (800c7b8 <__ieee754_rem_pio2+0x410>)
 800c780:	9301      	str	r3, [sp, #4]
 800c782:	2302      	movs	r3, #2
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	4622      	mov	r2, r4
 800c788:	465b      	mov	r3, fp
 800c78a:	4651      	mov	r1, sl
 800c78c:	4648      	mov	r0, r9
 800c78e:	f000 f993 	bl	800cab8 <__kernel_rem_pio2>
 800c792:	9b02      	ldr	r3, [sp, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	4683      	mov	fp, r0
 800c798:	f6bf ae46 	bge.w	800c428 <__ieee754_rem_pio2+0x80>
 800c79c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c7a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7a4:	f8ca 3004 	str.w	r3, [sl, #4]
 800c7a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c7ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7b0:	e73a      	b.n	800c628 <__ieee754_rem_pio2+0x280>
 800c7b2:	bf00      	nop
 800c7b4:	41700000 	.word	0x41700000
 800c7b8:	0800d768 	.word	0x0800d768

0800c7bc <__ieee754_sqrt>:
 800c7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c0:	ec55 4b10 	vmov	r4, r5, d0
 800c7c4:	4e56      	ldr	r6, [pc, #344]	; (800c920 <__ieee754_sqrt+0x164>)
 800c7c6:	43ae      	bics	r6, r5
 800c7c8:	ee10 0a10 	vmov	r0, s0
 800c7cc:	ee10 3a10 	vmov	r3, s0
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	462a      	mov	r2, r5
 800c7d4:	d110      	bne.n	800c7f8 <__ieee754_sqrt+0x3c>
 800c7d6:	ee10 2a10 	vmov	r2, s0
 800c7da:	462b      	mov	r3, r5
 800c7dc:	f7f3 fec4 	bl	8000568 <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	f7f3 fd08 	bl	80001fc <__adddf3>
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	ec45 4b10 	vmov	d0, r4, r5
 800c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	dc10      	bgt.n	800c81e <__ieee754_sqrt+0x62>
 800c7fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c800:	4330      	orrs	r0, r6
 800c802:	d0f5      	beq.n	800c7f0 <__ieee754_sqrt+0x34>
 800c804:	b15d      	cbz	r5, 800c81e <__ieee754_sqrt+0x62>
 800c806:	ee10 2a10 	vmov	r2, s0
 800c80a:	462b      	mov	r3, r5
 800c80c:	ee10 0a10 	vmov	r0, s0
 800c810:	f7f3 fcf2 	bl	80001f8 <__aeabi_dsub>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	f7f3 ffd0 	bl	80007bc <__aeabi_ddiv>
 800c81c:	e7e6      	b.n	800c7ec <__ieee754_sqrt+0x30>
 800c81e:	1509      	asrs	r1, r1, #20
 800c820:	d076      	beq.n	800c910 <__ieee754_sqrt+0x154>
 800c822:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c826:	07ce      	lsls	r6, r1, #31
 800c828:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c82c:	bf5e      	ittt	pl
 800c82e:	0fda      	lsrpl	r2, r3, #31
 800c830:	005b      	lslpl	r3, r3, #1
 800c832:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c836:	0fda      	lsrs	r2, r3, #31
 800c838:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c83c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c840:	2000      	movs	r0, #0
 800c842:	106d      	asrs	r5, r5, #1
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	f04f 0e16 	mov.w	lr, #22
 800c84a:	4684      	mov	ip, r0
 800c84c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c850:	eb0c 0401 	add.w	r4, ip, r1
 800c854:	4294      	cmp	r4, r2
 800c856:	bfde      	ittt	le
 800c858:	1b12      	suble	r2, r2, r4
 800c85a:	eb04 0c01 	addle.w	ip, r4, r1
 800c85e:	1840      	addle	r0, r0, r1
 800c860:	0052      	lsls	r2, r2, #1
 800c862:	f1be 0e01 	subs.w	lr, lr, #1
 800c866:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c86a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c86e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c872:	d1ed      	bne.n	800c850 <__ieee754_sqrt+0x94>
 800c874:	4671      	mov	r1, lr
 800c876:	2720      	movs	r7, #32
 800c878:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c87c:	4562      	cmp	r2, ip
 800c87e:	eb04 060e 	add.w	r6, r4, lr
 800c882:	dc02      	bgt.n	800c88a <__ieee754_sqrt+0xce>
 800c884:	d113      	bne.n	800c8ae <__ieee754_sqrt+0xf2>
 800c886:	429e      	cmp	r6, r3
 800c888:	d811      	bhi.n	800c8ae <__ieee754_sqrt+0xf2>
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	eb06 0e04 	add.w	lr, r6, r4
 800c890:	da43      	bge.n	800c91a <__ieee754_sqrt+0x15e>
 800c892:	f1be 0f00 	cmp.w	lr, #0
 800c896:	db40      	blt.n	800c91a <__ieee754_sqrt+0x15e>
 800c898:	f10c 0801 	add.w	r8, ip, #1
 800c89c:	eba2 020c 	sub.w	r2, r2, ip
 800c8a0:	429e      	cmp	r6, r3
 800c8a2:	bf88      	it	hi
 800c8a4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c8a8:	1b9b      	subs	r3, r3, r6
 800c8aa:	4421      	add	r1, r4
 800c8ac:	46c4      	mov	ip, r8
 800c8ae:	0052      	lsls	r2, r2, #1
 800c8b0:	3f01      	subs	r7, #1
 800c8b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c8b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c8ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8be:	d1dd      	bne.n	800c87c <__ieee754_sqrt+0xc0>
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d006      	beq.n	800c8d2 <__ieee754_sqrt+0x116>
 800c8c4:	1c4c      	adds	r4, r1, #1
 800c8c6:	bf13      	iteet	ne
 800c8c8:	3101      	addne	r1, #1
 800c8ca:	3001      	addeq	r0, #1
 800c8cc:	4639      	moveq	r1, r7
 800c8ce:	f021 0101 	bicne.w	r1, r1, #1
 800c8d2:	1043      	asrs	r3, r0, #1
 800c8d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c8d8:	0849      	lsrs	r1, r1, #1
 800c8da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c8de:	07c2      	lsls	r2, r0, #31
 800c8e0:	bf48      	it	mi
 800c8e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c8e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	463d      	mov	r5, r7
 800c8ee:	e77f      	b.n	800c7f0 <__ieee754_sqrt+0x34>
 800c8f0:	0ada      	lsrs	r2, r3, #11
 800c8f2:	3815      	subs	r0, #21
 800c8f4:	055b      	lsls	r3, r3, #21
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	d0fa      	beq.n	800c8f0 <__ieee754_sqrt+0x134>
 800c8fa:	02d7      	lsls	r7, r2, #11
 800c8fc:	d50a      	bpl.n	800c914 <__ieee754_sqrt+0x158>
 800c8fe:	f1c1 0420 	rsb	r4, r1, #32
 800c902:	fa23 f404 	lsr.w	r4, r3, r4
 800c906:	1e4d      	subs	r5, r1, #1
 800c908:	408b      	lsls	r3, r1
 800c90a:	4322      	orrs	r2, r4
 800c90c:	1b41      	subs	r1, r0, r5
 800c90e:	e788      	b.n	800c822 <__ieee754_sqrt+0x66>
 800c910:	4608      	mov	r0, r1
 800c912:	e7f0      	b.n	800c8f6 <__ieee754_sqrt+0x13a>
 800c914:	0052      	lsls	r2, r2, #1
 800c916:	3101      	adds	r1, #1
 800c918:	e7ef      	b.n	800c8fa <__ieee754_sqrt+0x13e>
 800c91a:	46e0      	mov	r8, ip
 800c91c:	e7be      	b.n	800c89c <__ieee754_sqrt+0xe0>
 800c91e:	bf00      	nop
 800c920:	7ff00000 	.word	0x7ff00000
 800c924:	00000000 	.word	0x00000000

0800c928 <__kernel_cos>:
 800c928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	ec57 6b10 	vmov	r6, r7, d0
 800c930:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c934:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c938:	ed8d 1b00 	vstr	d1, [sp]
 800c93c:	da07      	bge.n	800c94e <__kernel_cos+0x26>
 800c93e:	ee10 0a10 	vmov	r0, s0
 800c942:	4639      	mov	r1, r7
 800c944:	f7f4 f8c0 	bl	8000ac8 <__aeabi_d2iz>
 800c948:	2800      	cmp	r0, #0
 800c94a:	f000 8088 	beq.w	800ca5e <__kernel_cos+0x136>
 800c94e:	4632      	mov	r2, r6
 800c950:	463b      	mov	r3, r7
 800c952:	4630      	mov	r0, r6
 800c954:	4639      	mov	r1, r7
 800c956:	f7f3 fe07 	bl	8000568 <__aeabi_dmul>
 800c95a:	4b51      	ldr	r3, [pc, #324]	; (800caa0 <__kernel_cos+0x178>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	4604      	mov	r4, r0
 800c960:	460d      	mov	r5, r1
 800c962:	f7f3 fe01 	bl	8000568 <__aeabi_dmul>
 800c966:	a340      	add	r3, pc, #256	; (adr r3, 800ca68 <__kernel_cos+0x140>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	4682      	mov	sl, r0
 800c96e:	468b      	mov	fp, r1
 800c970:	4620      	mov	r0, r4
 800c972:	4629      	mov	r1, r5
 800c974:	f7f3 fdf8 	bl	8000568 <__aeabi_dmul>
 800c978:	a33d      	add	r3, pc, #244	; (adr r3, 800ca70 <__kernel_cos+0x148>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc3d 	bl	80001fc <__adddf3>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fdef 	bl	8000568 <__aeabi_dmul>
 800c98a:	a33b      	add	r3, pc, #236	; (adr r3, 800ca78 <__kernel_cos+0x150>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fc32 	bl	80001f8 <__aeabi_dsub>
 800c994:	4622      	mov	r2, r4
 800c996:	462b      	mov	r3, r5
 800c998:	f7f3 fde6 	bl	8000568 <__aeabi_dmul>
 800c99c:	a338      	add	r3, pc, #224	; (adr r3, 800ca80 <__kernel_cos+0x158>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc2b 	bl	80001fc <__adddf3>
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	462b      	mov	r3, r5
 800c9aa:	f7f3 fddd 	bl	8000568 <__aeabi_dmul>
 800c9ae:	a336      	add	r3, pc, #216	; (adr r3, 800ca88 <__kernel_cos+0x160>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc20 	bl	80001f8 <__aeabi_dsub>
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	f7f3 fdd4 	bl	8000568 <__aeabi_dmul>
 800c9c0:	a333      	add	r3, pc, #204	; (adr r3, 800ca90 <__kernel_cos+0x168>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc19 	bl	80001fc <__adddf3>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	f7f3 fdcb 	bl	8000568 <__aeabi_dmul>
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	f7f3 fdc7 	bl	8000568 <__aeabi_dmul>
 800c9da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f3 fdbf 	bl	8000568 <__aeabi_dmul>
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f7f3 fc01 	bl	80001f8 <__aeabi_dsub>
 800c9f6:	4b2b      	ldr	r3, [pc, #172]	; (800caa4 <__kernel_cos+0x17c>)
 800c9f8:	4598      	cmp	r8, r3
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	dc10      	bgt.n	800ca22 <__kernel_cos+0xfa>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4650      	mov	r0, sl
 800ca06:	4659      	mov	r1, fp
 800ca08:	f7f3 fbf6 	bl	80001f8 <__aeabi_dsub>
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4926      	ldr	r1, [pc, #152]	; (800caa8 <__kernel_cos+0x180>)
 800ca10:	4602      	mov	r2, r0
 800ca12:	2000      	movs	r0, #0
 800ca14:	f7f3 fbf0 	bl	80001f8 <__aeabi_dsub>
 800ca18:	ec41 0b10 	vmov	d0, r0, r1
 800ca1c:	b003      	add	sp, #12
 800ca1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca22:	4b22      	ldr	r3, [pc, #136]	; (800caac <__kernel_cos+0x184>)
 800ca24:	4920      	ldr	r1, [pc, #128]	; (800caa8 <__kernel_cos+0x180>)
 800ca26:	4598      	cmp	r8, r3
 800ca28:	bfcc      	ite	gt
 800ca2a:	4d21      	ldrgt	r5, [pc, #132]	; (800cab0 <__kernel_cos+0x188>)
 800ca2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ca30:	2400      	movs	r4, #0
 800ca32:	4622      	mov	r2, r4
 800ca34:	462b      	mov	r3, r5
 800ca36:	2000      	movs	r0, #0
 800ca38:	f7f3 fbde 	bl	80001f8 <__aeabi_dsub>
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	4680      	mov	r8, r0
 800ca40:	4689      	mov	r9, r1
 800ca42:	462b      	mov	r3, r5
 800ca44:	4650      	mov	r0, sl
 800ca46:	4659      	mov	r1, fp
 800ca48:	f7f3 fbd6 	bl	80001f8 <__aeabi_dsub>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	f7f3 fbd2 	bl	80001f8 <__aeabi_dsub>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4640      	mov	r0, r8
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	e7da      	b.n	800ca14 <__kernel_cos+0xec>
 800ca5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ca98 <__kernel_cos+0x170>
 800ca62:	e7db      	b.n	800ca1c <__kernel_cos+0xf4>
 800ca64:	f3af 8000 	nop.w
 800ca68:	be8838d4 	.word	0xbe8838d4
 800ca6c:	bda8fae9 	.word	0xbda8fae9
 800ca70:	bdb4b1c4 	.word	0xbdb4b1c4
 800ca74:	3e21ee9e 	.word	0x3e21ee9e
 800ca78:	809c52ad 	.word	0x809c52ad
 800ca7c:	3e927e4f 	.word	0x3e927e4f
 800ca80:	19cb1590 	.word	0x19cb1590
 800ca84:	3efa01a0 	.word	0x3efa01a0
 800ca88:	16c15177 	.word	0x16c15177
 800ca8c:	3f56c16c 	.word	0x3f56c16c
 800ca90:	5555554c 	.word	0x5555554c
 800ca94:	3fa55555 	.word	0x3fa55555
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	3ff00000 	.word	0x3ff00000
 800caa0:	3fe00000 	.word	0x3fe00000
 800caa4:	3fd33332 	.word	0x3fd33332
 800caa8:	3ff00000 	.word	0x3ff00000
 800caac:	3fe90000 	.word	0x3fe90000
 800cab0:	3fd20000 	.word	0x3fd20000
 800cab4:	00000000 	.word	0x00000000

0800cab8 <__kernel_rem_pio2>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	ed2d 8b02 	vpush	{d8}
 800cac0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cac4:	f112 0f14 	cmn.w	r2, #20
 800cac8:	9308      	str	r3, [sp, #32]
 800caca:	9101      	str	r1, [sp, #4]
 800cacc:	4bc6      	ldr	r3, [pc, #792]	; (800cde8 <__kernel_rem_pio2+0x330>)
 800cace:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cad0:	9009      	str	r0, [sp, #36]	; 0x24
 800cad2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cad6:	9304      	str	r3, [sp, #16]
 800cad8:	9b08      	ldr	r3, [sp, #32]
 800cada:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800cade:	bfa8      	it	ge
 800cae0:	1ed4      	subge	r4, r2, #3
 800cae2:	9306      	str	r3, [sp, #24]
 800cae4:	bfb2      	itee	lt
 800cae6:	2400      	movlt	r4, #0
 800cae8:	2318      	movge	r3, #24
 800caea:	fb94 f4f3 	sdivge	r4, r4, r3
 800caee:	f06f 0317 	mvn.w	r3, #23
 800caf2:	fb04 3303 	mla	r3, r4, r3, r3
 800caf6:	eb03 0a02 	add.w	sl, r3, r2
 800cafa:	9b04      	ldr	r3, [sp, #16]
 800cafc:	9a06      	ldr	r2, [sp, #24]
 800cafe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cdd8 <__kernel_rem_pio2+0x320>
 800cb02:	eb03 0802 	add.w	r8, r3, r2
 800cb06:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cb08:	1aa7      	subs	r7, r4, r2
 800cb0a:	ae20      	add	r6, sp, #128	; 0x80
 800cb0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cb10:	2500      	movs	r5, #0
 800cb12:	4545      	cmp	r5, r8
 800cb14:	dd18      	ble.n	800cb48 <__kernel_rem_pio2+0x90>
 800cb16:	9b08      	ldr	r3, [sp, #32]
 800cb18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cb1c:	aa20      	add	r2, sp, #128	; 0x80
 800cb1e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800cdd8 <__kernel_rem_pio2+0x320>
 800cb22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cb26:	f1c3 0301 	rsb	r3, r3, #1
 800cb2a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	9b07      	ldr	r3, [sp, #28]
 800cb32:	9a04      	ldr	r2, [sp, #16]
 800cb34:	4443      	add	r3, r8
 800cb36:	429a      	cmp	r2, r3
 800cb38:	db2f      	blt.n	800cb9a <__kernel_rem_pio2+0xe2>
 800cb3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cb3e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cb42:	462f      	mov	r7, r5
 800cb44:	2600      	movs	r6, #0
 800cb46:	e01b      	b.n	800cb80 <__kernel_rem_pio2+0xc8>
 800cb48:	42ef      	cmn	r7, r5
 800cb4a:	d407      	bmi.n	800cb5c <__kernel_rem_pio2+0xa4>
 800cb4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cb50:	f7f3 fca0 	bl	8000494 <__aeabi_i2d>
 800cb54:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb58:	3501      	adds	r5, #1
 800cb5a:	e7da      	b.n	800cb12 <__kernel_rem_pio2+0x5a>
 800cb5c:	ec51 0b18 	vmov	r0, r1, d8
 800cb60:	e7f8      	b.n	800cb54 <__kernel_rem_pio2+0x9c>
 800cb62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb66:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cb6a:	f7f3 fcfd 	bl	8000568 <__aeabi_dmul>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb76:	f7f3 fb41 	bl	80001fc <__adddf3>
 800cb7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb7e:	3601      	adds	r6, #1
 800cb80:	9b06      	ldr	r3, [sp, #24]
 800cb82:	429e      	cmp	r6, r3
 800cb84:	f1a7 0708 	sub.w	r7, r7, #8
 800cb88:	ddeb      	ble.n	800cb62 <__kernel_rem_pio2+0xaa>
 800cb8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb8e:	3508      	adds	r5, #8
 800cb90:	ecab 7b02 	vstmia	fp!, {d7}
 800cb94:	f108 0801 	add.w	r8, r8, #1
 800cb98:	e7ca      	b.n	800cb30 <__kernel_rem_pio2+0x78>
 800cb9a:	9b04      	ldr	r3, [sp, #16]
 800cb9c:	aa0c      	add	r2, sp, #48	; 0x30
 800cb9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cba2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cba4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cba6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cbaa:	9c04      	ldr	r4, [sp, #16]
 800cbac:	930a      	str	r3, [sp, #40]	; 0x28
 800cbae:	ab98      	add	r3, sp, #608	; 0x260
 800cbb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbb4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cbb8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cbbc:	f8cd b008 	str.w	fp, [sp, #8]
 800cbc0:	4625      	mov	r5, r4
 800cbc2:	2d00      	cmp	r5, #0
 800cbc4:	dc78      	bgt.n	800ccb8 <__kernel_rem_pio2+0x200>
 800cbc6:	ec47 6b10 	vmov	d0, r6, r7
 800cbca:	4650      	mov	r0, sl
 800cbcc:	f000 fc94 	bl	800d4f8 <scalbn>
 800cbd0:	ec57 6b10 	vmov	r6, r7, d0
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cbda:	ee10 0a10 	vmov	r0, s0
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 fcc2 	bl	8000568 <__aeabi_dmul>
 800cbe4:	ec41 0b10 	vmov	d0, r0, r1
 800cbe8:	f000 fb72 	bl	800d2d0 <floor>
 800cbec:	4b7f      	ldr	r3, [pc, #508]	; (800cdec <__kernel_rem_pio2+0x334>)
 800cbee:	ec51 0b10 	vmov	r0, r1, d0
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f7f3 fcb8 	bl	8000568 <__aeabi_dmul>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 fafa 	bl	80001f8 <__aeabi_dsub>
 800cc04:	460f      	mov	r7, r1
 800cc06:	4606      	mov	r6, r0
 800cc08:	f7f3 ff5e 	bl	8000ac8 <__aeabi_d2iz>
 800cc0c:	9007      	str	r0, [sp, #28]
 800cc0e:	f7f3 fc41 	bl	8000494 <__aeabi_i2d>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4630      	mov	r0, r6
 800cc18:	4639      	mov	r1, r7
 800cc1a:	f7f3 faed 	bl	80001f8 <__aeabi_dsub>
 800cc1e:	f1ba 0f00 	cmp.w	sl, #0
 800cc22:	4606      	mov	r6, r0
 800cc24:	460f      	mov	r7, r1
 800cc26:	dd70      	ble.n	800cd0a <__kernel_rem_pio2+0x252>
 800cc28:	1e62      	subs	r2, r4, #1
 800cc2a:	ab0c      	add	r3, sp, #48	; 0x30
 800cc2c:	9d07      	ldr	r5, [sp, #28]
 800cc2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cc32:	f1ca 0118 	rsb	r1, sl, #24
 800cc36:	fa40 f301 	asr.w	r3, r0, r1
 800cc3a:	441d      	add	r5, r3
 800cc3c:	408b      	lsls	r3, r1
 800cc3e:	1ac0      	subs	r0, r0, r3
 800cc40:	ab0c      	add	r3, sp, #48	; 0x30
 800cc42:	9507      	str	r5, [sp, #28]
 800cc44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cc48:	f1ca 0317 	rsb	r3, sl, #23
 800cc4c:	fa40 f303 	asr.w	r3, r0, r3
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	9b02      	ldr	r3, [sp, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	dd66      	ble.n	800cd26 <__kernel_rem_pio2+0x26e>
 800cc58:	9b07      	ldr	r3, [sp, #28]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	9307      	str	r3, [sp, #28]
 800cc60:	4615      	mov	r5, r2
 800cc62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cc66:	4294      	cmp	r4, r2
 800cc68:	f300 8099 	bgt.w	800cd9e <__kernel_rem_pio2+0x2e6>
 800cc6c:	f1ba 0f00 	cmp.w	sl, #0
 800cc70:	dd07      	ble.n	800cc82 <__kernel_rem_pio2+0x1ca>
 800cc72:	f1ba 0f01 	cmp.w	sl, #1
 800cc76:	f000 80a5 	beq.w	800cdc4 <__kernel_rem_pio2+0x30c>
 800cc7a:	f1ba 0f02 	cmp.w	sl, #2
 800cc7e:	f000 80c1 	beq.w	800ce04 <__kernel_rem_pio2+0x34c>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d14e      	bne.n	800cd26 <__kernel_rem_pio2+0x26e>
 800cc88:	4632      	mov	r2, r6
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	4958      	ldr	r1, [pc, #352]	; (800cdf0 <__kernel_rem_pio2+0x338>)
 800cc8e:	2000      	movs	r0, #0
 800cc90:	f7f3 fab2 	bl	80001f8 <__aeabi_dsub>
 800cc94:	4606      	mov	r6, r0
 800cc96:	460f      	mov	r7, r1
 800cc98:	2d00      	cmp	r5, #0
 800cc9a:	d044      	beq.n	800cd26 <__kernel_rem_pio2+0x26e>
 800cc9c:	4650      	mov	r0, sl
 800cc9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cde0 <__kernel_rem_pio2+0x328>
 800cca2:	f000 fc29 	bl	800d4f8 <scalbn>
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	ec53 2b10 	vmov	r2, r3, d0
 800ccae:	f7f3 faa3 	bl	80001f8 <__aeabi_dsub>
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	e036      	b.n	800cd26 <__kernel_rem_pio2+0x26e>
 800ccb8:	4b4e      	ldr	r3, [pc, #312]	; (800cdf4 <__kernel_rem_pio2+0x33c>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f7f3 fc52 	bl	8000568 <__aeabi_dmul>
 800ccc4:	f7f3 ff00 	bl	8000ac8 <__aeabi_d2iz>
 800ccc8:	f7f3 fbe4 	bl	8000494 <__aeabi_i2d>
 800cccc:	4b4a      	ldr	r3, [pc, #296]	; (800cdf8 <__kernel_rem_pio2+0x340>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	4689      	mov	r9, r1
 800ccd4:	f7f3 fc48 	bl	8000568 <__aeabi_dmul>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4639      	mov	r1, r7
 800cce0:	f7f3 fa8a 	bl	80001f8 <__aeabi_dsub>
 800cce4:	f7f3 fef0 	bl	8000ac8 <__aeabi_d2iz>
 800cce8:	9b02      	ldr	r3, [sp, #8]
 800ccea:	f843 0b04 	str.w	r0, [r3], #4
 800ccee:	3d01      	subs	r5, #1
 800ccf0:	9302      	str	r3, [sp, #8]
 800ccf2:	ab70      	add	r3, sp, #448	; 0x1c0
 800ccf4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	4649      	mov	r1, r9
 800cd00:	f7f3 fa7c 	bl	80001fc <__adddf3>
 800cd04:	4606      	mov	r6, r0
 800cd06:	460f      	mov	r7, r1
 800cd08:	e75b      	b.n	800cbc2 <__kernel_rem_pio2+0x10a>
 800cd0a:	d105      	bne.n	800cd18 <__kernel_rem_pio2+0x260>
 800cd0c:	1e63      	subs	r3, r4, #1
 800cd0e:	aa0c      	add	r2, sp, #48	; 0x30
 800cd10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd14:	15c3      	asrs	r3, r0, #23
 800cd16:	e79b      	b.n	800cc50 <__kernel_rem_pio2+0x198>
 800cd18:	4b38      	ldr	r3, [pc, #224]	; (800cdfc <__kernel_rem_pio2+0x344>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f7f3 feaa 	bl	8000a74 <__aeabi_dcmpge>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d139      	bne.n	800cd98 <__kernel_rem_pio2+0x2e0>
 800cd24:	9002      	str	r0, [sp, #8]
 800cd26:	2200      	movs	r2, #0
 800cd28:	2300      	movs	r3, #0
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	f7f3 fe83 	bl	8000a38 <__aeabi_dcmpeq>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	f000 80b4 	beq.w	800cea0 <__kernel_rem_pio2+0x3e8>
 800cd38:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800cd3c:	465b      	mov	r3, fp
 800cd3e:	2200      	movs	r2, #0
 800cd40:	9904      	ldr	r1, [sp, #16]
 800cd42:	428b      	cmp	r3, r1
 800cd44:	da65      	bge.n	800ce12 <__kernel_rem_pio2+0x35a>
 800cd46:	2a00      	cmp	r2, #0
 800cd48:	d07b      	beq.n	800ce42 <__kernel_rem_pio2+0x38a>
 800cd4a:	ab0c      	add	r3, sp, #48	; 0x30
 800cd4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800cd50:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f000 80a0 	beq.w	800ce9a <__kernel_rem_pio2+0x3e2>
 800cd5a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800cde0 <__kernel_rem_pio2+0x328>
 800cd5e:	4650      	mov	r0, sl
 800cd60:	f000 fbca 	bl	800d4f8 <scalbn>
 800cd64:	4f23      	ldr	r7, [pc, #140]	; (800cdf4 <__kernel_rem_pio2+0x33c>)
 800cd66:	ec55 4b10 	vmov	r4, r5, d0
 800cd6a:	46d8      	mov	r8, fp
 800cd6c:	2600      	movs	r6, #0
 800cd6e:	f1b8 0f00 	cmp.w	r8, #0
 800cd72:	f280 80cf 	bge.w	800cf14 <__kernel_rem_pio2+0x45c>
 800cd76:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800cdd8 <__kernel_rem_pio2+0x320>
 800cd7a:	465f      	mov	r7, fp
 800cd7c:	f04f 0800 	mov.w	r8, #0
 800cd80:	2f00      	cmp	r7, #0
 800cd82:	f2c0 80fd 	blt.w	800cf80 <__kernel_rem_pio2+0x4c8>
 800cd86:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd88:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ce00 <__kernel_rem_pio2+0x348>
 800cd8c:	ec55 4b18 	vmov	r4, r5, d8
 800cd90:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800cd94:	2600      	movs	r6, #0
 800cd96:	e0e5      	b.n	800cf64 <__kernel_rem_pio2+0x4ac>
 800cd98:	2302      	movs	r3, #2
 800cd9a:	9302      	str	r3, [sp, #8]
 800cd9c:	e75c      	b.n	800cc58 <__kernel_rem_pio2+0x1a0>
 800cd9e:	f8db 3000 	ldr.w	r3, [fp]
 800cda2:	b955      	cbnz	r5, 800cdba <__kernel_rem_pio2+0x302>
 800cda4:	b123      	cbz	r3, 800cdb0 <__kernel_rem_pio2+0x2f8>
 800cda6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cdaa:	f8cb 3000 	str.w	r3, [fp]
 800cdae:	2301      	movs	r3, #1
 800cdb0:	3201      	adds	r2, #1
 800cdb2:	f10b 0b04 	add.w	fp, fp, #4
 800cdb6:	461d      	mov	r5, r3
 800cdb8:	e755      	b.n	800cc66 <__kernel_rem_pio2+0x1ae>
 800cdba:	1acb      	subs	r3, r1, r3
 800cdbc:	f8cb 3000 	str.w	r3, [fp]
 800cdc0:	462b      	mov	r3, r5
 800cdc2:	e7f5      	b.n	800cdb0 <__kernel_rem_pio2+0x2f8>
 800cdc4:	1e62      	subs	r2, r4, #1
 800cdc6:	ab0c      	add	r3, sp, #48	; 0x30
 800cdc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdcc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cdd0:	a90c      	add	r1, sp, #48	; 0x30
 800cdd2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cdd6:	e754      	b.n	800cc82 <__kernel_rem_pio2+0x1ca>
	...
 800cde4:	3ff00000 	.word	0x3ff00000
 800cde8:	0800d8b0 	.word	0x0800d8b0
 800cdec:	40200000 	.word	0x40200000
 800cdf0:	3ff00000 	.word	0x3ff00000
 800cdf4:	3e700000 	.word	0x3e700000
 800cdf8:	41700000 	.word	0x41700000
 800cdfc:	3fe00000 	.word	0x3fe00000
 800ce00:	0800d870 	.word	0x0800d870
 800ce04:	1e62      	subs	r2, r4, #1
 800ce06:	ab0c      	add	r3, sp, #48	; 0x30
 800ce08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ce10:	e7de      	b.n	800cdd0 <__kernel_rem_pio2+0x318>
 800ce12:	a90c      	add	r1, sp, #48	; 0x30
 800ce14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	430a      	orrs	r2, r1
 800ce1c:	e790      	b.n	800cd40 <__kernel_rem_pio2+0x288>
 800ce1e:	3301      	adds	r3, #1
 800ce20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ce24:	2900      	cmp	r1, #0
 800ce26:	d0fa      	beq.n	800ce1e <__kernel_rem_pio2+0x366>
 800ce28:	9a08      	ldr	r2, [sp, #32]
 800ce2a:	18e3      	adds	r3, r4, r3
 800ce2c:	18a6      	adds	r6, r4, r2
 800ce2e:	aa20      	add	r2, sp, #128	; 0x80
 800ce30:	1c65      	adds	r5, r4, #1
 800ce32:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ce36:	9302      	str	r3, [sp, #8]
 800ce38:	9b02      	ldr	r3, [sp, #8]
 800ce3a:	42ab      	cmp	r3, r5
 800ce3c:	da04      	bge.n	800ce48 <__kernel_rem_pio2+0x390>
 800ce3e:	461c      	mov	r4, r3
 800ce40:	e6b5      	b.n	800cbae <__kernel_rem_pio2+0xf6>
 800ce42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce44:	2301      	movs	r3, #1
 800ce46:	e7eb      	b.n	800ce20 <__kernel_rem_pio2+0x368>
 800ce48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce4e:	f7f3 fb21 	bl	8000494 <__aeabi_i2d>
 800ce52:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce58:	46b3      	mov	fp, r6
 800ce5a:	461c      	mov	r4, r3
 800ce5c:	2700      	movs	r7, #0
 800ce5e:	f04f 0800 	mov.w	r8, #0
 800ce62:	f04f 0900 	mov.w	r9, #0
 800ce66:	9b06      	ldr	r3, [sp, #24]
 800ce68:	429f      	cmp	r7, r3
 800ce6a:	dd06      	ble.n	800ce7a <__kernel_rem_pio2+0x3c2>
 800ce6c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ce6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ce72:	e9c3 8900 	strd	r8, r9, [r3]
 800ce76:	3501      	adds	r5, #1
 800ce78:	e7de      	b.n	800ce38 <__kernel_rem_pio2+0x380>
 800ce7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ce7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ce82:	f7f3 fb71 	bl	8000568 <__aeabi_dmul>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	4649      	mov	r1, r9
 800ce8e:	f7f3 f9b5 	bl	80001fc <__adddf3>
 800ce92:	3701      	adds	r7, #1
 800ce94:	4680      	mov	r8, r0
 800ce96:	4689      	mov	r9, r1
 800ce98:	e7e5      	b.n	800ce66 <__kernel_rem_pio2+0x3ae>
 800ce9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ce9e:	e754      	b.n	800cd4a <__kernel_rem_pio2+0x292>
 800cea0:	ec47 6b10 	vmov	d0, r6, r7
 800cea4:	f1ca 0000 	rsb	r0, sl, #0
 800cea8:	f000 fb26 	bl	800d4f8 <scalbn>
 800ceac:	ec57 6b10 	vmov	r6, r7, d0
 800ceb0:	4b9f      	ldr	r3, [pc, #636]	; (800d130 <__kernel_rem_pio2+0x678>)
 800ceb2:	ee10 0a10 	vmov	r0, s0
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	4639      	mov	r1, r7
 800ceba:	f7f3 fddb 	bl	8000a74 <__aeabi_dcmpge>
 800cebe:	b300      	cbz	r0, 800cf02 <__kernel_rem_pio2+0x44a>
 800cec0:	4b9c      	ldr	r3, [pc, #624]	; (800d134 <__kernel_rem_pio2+0x67c>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	4630      	mov	r0, r6
 800cec6:	4639      	mov	r1, r7
 800cec8:	f7f3 fb4e 	bl	8000568 <__aeabi_dmul>
 800cecc:	f7f3 fdfc 	bl	8000ac8 <__aeabi_d2iz>
 800ced0:	4605      	mov	r5, r0
 800ced2:	f7f3 fadf 	bl	8000494 <__aeabi_i2d>
 800ced6:	4b96      	ldr	r3, [pc, #600]	; (800d130 <__kernel_rem_pio2+0x678>)
 800ced8:	2200      	movs	r2, #0
 800ceda:	f7f3 fb45 	bl	8000568 <__aeabi_dmul>
 800cede:	460b      	mov	r3, r1
 800cee0:	4602      	mov	r2, r0
 800cee2:	4639      	mov	r1, r7
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7f3 f987 	bl	80001f8 <__aeabi_dsub>
 800ceea:	f7f3 fded 	bl	8000ac8 <__aeabi_d2iz>
 800ceee:	f104 0b01 	add.w	fp, r4, #1
 800cef2:	ab0c      	add	r3, sp, #48	; 0x30
 800cef4:	f10a 0a18 	add.w	sl, sl, #24
 800cef8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cefc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800cf00:	e72b      	b.n	800cd5a <__kernel_rem_pio2+0x2a2>
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7f3 fddf 	bl	8000ac8 <__aeabi_d2iz>
 800cf0a:	ab0c      	add	r3, sp, #48	; 0x30
 800cf0c:	46a3      	mov	fp, r4
 800cf0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cf12:	e722      	b.n	800cd5a <__kernel_rem_pio2+0x2a2>
 800cf14:	ab70      	add	r3, sp, #448	; 0x1c0
 800cf16:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800cf1a:	ab0c      	add	r3, sp, #48	; 0x30
 800cf1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cf20:	f7f3 fab8 	bl	8000494 <__aeabi_i2d>
 800cf24:	4622      	mov	r2, r4
 800cf26:	462b      	mov	r3, r5
 800cf28:	f7f3 fb1e 	bl	8000568 <__aeabi_dmul>
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	e9c9 0100 	strd	r0, r1, [r9]
 800cf32:	463b      	mov	r3, r7
 800cf34:	4620      	mov	r0, r4
 800cf36:	4629      	mov	r1, r5
 800cf38:	f7f3 fb16 	bl	8000568 <__aeabi_dmul>
 800cf3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cf40:	4604      	mov	r4, r0
 800cf42:	460d      	mov	r5, r1
 800cf44:	e713      	b.n	800cd6e <__kernel_rem_pio2+0x2b6>
 800cf46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cf4a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800cf4e:	f7f3 fb0b 	bl	8000568 <__aeabi_dmul>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4620      	mov	r0, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	f7f3 f94f 	bl	80001fc <__adddf3>
 800cf5e:	3601      	adds	r6, #1
 800cf60:	4604      	mov	r4, r0
 800cf62:	460d      	mov	r5, r1
 800cf64:	9b04      	ldr	r3, [sp, #16]
 800cf66:	429e      	cmp	r6, r3
 800cf68:	dc01      	bgt.n	800cf6e <__kernel_rem_pio2+0x4b6>
 800cf6a:	45b0      	cmp	r8, r6
 800cf6c:	daeb      	bge.n	800cf46 <__kernel_rem_pio2+0x48e>
 800cf6e:	ab48      	add	r3, sp, #288	; 0x120
 800cf70:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf74:	e9c3 4500 	strd	r4, r5, [r3]
 800cf78:	3f01      	subs	r7, #1
 800cf7a:	f108 0801 	add.w	r8, r8, #1
 800cf7e:	e6ff      	b.n	800cd80 <__kernel_rem_pio2+0x2c8>
 800cf80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	dc0b      	bgt.n	800cf9e <__kernel_rem_pio2+0x4e6>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dc6e      	bgt.n	800d068 <__kernel_rem_pio2+0x5b0>
 800cf8a:	d045      	beq.n	800d018 <__kernel_rem_pio2+0x560>
 800cf8c:	9b07      	ldr	r3, [sp, #28]
 800cf8e:	f003 0007 	and.w	r0, r3, #7
 800cf92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cf96:	ecbd 8b02 	vpop	{d8}
 800cf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d1f3      	bne.n	800cf8c <__kernel_rem_pio2+0x4d4>
 800cfa4:	ab48      	add	r3, sp, #288	; 0x120
 800cfa6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800cfaa:	46d0      	mov	r8, sl
 800cfac:	46d9      	mov	r9, fp
 800cfae:	f1b9 0f00 	cmp.w	r9, #0
 800cfb2:	f1a8 0808 	sub.w	r8, r8, #8
 800cfb6:	dc64      	bgt.n	800d082 <__kernel_rem_pio2+0x5ca>
 800cfb8:	465c      	mov	r4, fp
 800cfba:	2c01      	cmp	r4, #1
 800cfbc:	f1aa 0a08 	sub.w	sl, sl, #8
 800cfc0:	dc7e      	bgt.n	800d0c0 <__kernel_rem_pio2+0x608>
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	f1bb 0f01 	cmp.w	fp, #1
 800cfca:	f300 8097 	bgt.w	800d0fc <__kernel_rem_pio2+0x644>
 800cfce:	9b02      	ldr	r3, [sp, #8]
 800cfd0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800cfd4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f040 8099 	bne.w	800d110 <__kernel_rem_pio2+0x658>
 800cfde:	9b01      	ldr	r3, [sp, #4]
 800cfe0:	e9c3 5600 	strd	r5, r6, [r3]
 800cfe4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cfe8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cfec:	e7ce      	b.n	800cf8c <__kernel_rem_pio2+0x4d4>
 800cfee:	ab48      	add	r3, sp, #288	; 0x120
 800cff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	f7f3 f900 	bl	80001fc <__adddf3>
 800cffc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d000:	f1bb 0f00 	cmp.w	fp, #0
 800d004:	daf3      	bge.n	800cfee <__kernel_rem_pio2+0x536>
 800d006:	9b02      	ldr	r3, [sp, #8]
 800d008:	b113      	cbz	r3, 800d010 <__kernel_rem_pio2+0x558>
 800d00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d00e:	4619      	mov	r1, r3
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	e9c3 0100 	strd	r0, r1, [r3]
 800d016:	e7b9      	b.n	800cf8c <__kernel_rem_pio2+0x4d4>
 800d018:	2000      	movs	r0, #0
 800d01a:	2100      	movs	r1, #0
 800d01c:	e7f0      	b.n	800d000 <__kernel_rem_pio2+0x548>
 800d01e:	ab48      	add	r3, sp, #288	; 0x120
 800d020:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d028:	f7f3 f8e8 	bl	80001fc <__adddf3>
 800d02c:	3c01      	subs	r4, #1
 800d02e:	2c00      	cmp	r4, #0
 800d030:	daf5      	bge.n	800d01e <__kernel_rem_pio2+0x566>
 800d032:	9b02      	ldr	r3, [sp, #8]
 800d034:	b1e3      	cbz	r3, 800d070 <__kernel_rem_pio2+0x5b8>
 800d036:	4602      	mov	r2, r0
 800d038:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d03c:	9c01      	ldr	r4, [sp, #4]
 800d03e:	e9c4 2300 	strd	r2, r3, [r4]
 800d042:	4602      	mov	r2, r0
 800d044:	460b      	mov	r3, r1
 800d046:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d04a:	f7f3 f8d5 	bl	80001f8 <__aeabi_dsub>
 800d04e:	ad4a      	add	r5, sp, #296	; 0x128
 800d050:	2401      	movs	r4, #1
 800d052:	45a3      	cmp	fp, r4
 800d054:	da0f      	bge.n	800d076 <__kernel_rem_pio2+0x5be>
 800d056:	9b02      	ldr	r3, [sp, #8]
 800d058:	b113      	cbz	r3, 800d060 <__kernel_rem_pio2+0x5a8>
 800d05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d05e:	4619      	mov	r1, r3
 800d060:	9b01      	ldr	r3, [sp, #4]
 800d062:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d066:	e791      	b.n	800cf8c <__kernel_rem_pio2+0x4d4>
 800d068:	465c      	mov	r4, fp
 800d06a:	2000      	movs	r0, #0
 800d06c:	2100      	movs	r1, #0
 800d06e:	e7de      	b.n	800d02e <__kernel_rem_pio2+0x576>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	e7e2      	b.n	800d03c <__kernel_rem_pio2+0x584>
 800d076:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d07a:	f7f3 f8bf 	bl	80001fc <__adddf3>
 800d07e:	3401      	adds	r4, #1
 800d080:	e7e7      	b.n	800d052 <__kernel_rem_pio2+0x59a>
 800d082:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d086:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d08a:	4620      	mov	r0, r4
 800d08c:	4632      	mov	r2, r6
 800d08e:	463b      	mov	r3, r7
 800d090:	4629      	mov	r1, r5
 800d092:	f7f3 f8b3 	bl	80001fc <__adddf3>
 800d096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d09a:	4602      	mov	r2, r0
 800d09c:	460b      	mov	r3, r1
 800d09e:	4620      	mov	r0, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f7f3 f8a9 	bl	80001f8 <__aeabi_dsub>
 800d0a6:	4632      	mov	r2, r6
 800d0a8:	463b      	mov	r3, r7
 800d0aa:	f7f3 f8a7 	bl	80001fc <__adddf3>
 800d0ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d0b2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d0b6:	ed88 7b00 	vstr	d7, [r8]
 800d0ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d0be:	e776      	b.n	800cfae <__kernel_rem_pio2+0x4f6>
 800d0c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d0c4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	4632      	mov	r2, r6
 800d0cc:	463b      	mov	r3, r7
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	f7f3 f894 	bl	80001fc <__adddf3>
 800d0d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	4640      	mov	r0, r8
 800d0de:	4649      	mov	r1, r9
 800d0e0:	f7f3 f88a 	bl	80001f8 <__aeabi_dsub>
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	f7f3 f888 	bl	80001fc <__adddf3>
 800d0ec:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d0f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0f4:	ed8a 7b00 	vstr	d7, [sl]
 800d0f8:	3c01      	subs	r4, #1
 800d0fa:	e75e      	b.n	800cfba <__kernel_rem_pio2+0x502>
 800d0fc:	ab48      	add	r3, sp, #288	; 0x120
 800d0fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	f7f3 f879 	bl	80001fc <__adddf3>
 800d10a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d10e:	e75a      	b.n	800cfc6 <__kernel_rem_pio2+0x50e>
 800d110:	9b01      	ldr	r3, [sp, #4]
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	601d      	str	r5, [r3, #0]
 800d116:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d11a:	605c      	str	r4, [r3, #4]
 800d11c:	609f      	str	r7, [r3, #8]
 800d11e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d122:	60d3      	str	r3, [r2, #12]
 800d124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d128:	6110      	str	r0, [r2, #16]
 800d12a:	6153      	str	r3, [r2, #20]
 800d12c:	e72e      	b.n	800cf8c <__kernel_rem_pio2+0x4d4>
 800d12e:	bf00      	nop
 800d130:	41700000 	.word	0x41700000
 800d134:	3e700000 	.word	0x3e700000

0800d138 <__kernel_sin>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	ed2d 8b04 	vpush	{d8-d9}
 800d140:	eeb0 8a41 	vmov.f32	s16, s2
 800d144:	eef0 8a61 	vmov.f32	s17, s3
 800d148:	ec55 4b10 	vmov	r4, r5, d0
 800d14c:	b083      	sub	sp, #12
 800d14e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d152:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d156:	9001      	str	r0, [sp, #4]
 800d158:	da06      	bge.n	800d168 <__kernel_sin+0x30>
 800d15a:	ee10 0a10 	vmov	r0, s0
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fcb2 	bl	8000ac8 <__aeabi_d2iz>
 800d164:	2800      	cmp	r0, #0
 800d166:	d051      	beq.n	800d20c <__kernel_sin+0xd4>
 800d168:	4622      	mov	r2, r4
 800d16a:	462b      	mov	r3, r5
 800d16c:	4620      	mov	r0, r4
 800d16e:	4629      	mov	r1, r5
 800d170:	f7f3 f9fa 	bl	8000568 <__aeabi_dmul>
 800d174:	4682      	mov	sl, r0
 800d176:	468b      	mov	fp, r1
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4620      	mov	r0, r4
 800d17e:	4629      	mov	r1, r5
 800d180:	f7f3 f9f2 	bl	8000568 <__aeabi_dmul>
 800d184:	a341      	add	r3, pc, #260	; (adr r3, 800d28c <__kernel_sin+0x154>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	4680      	mov	r8, r0
 800d18c:	4689      	mov	r9, r1
 800d18e:	4650      	mov	r0, sl
 800d190:	4659      	mov	r1, fp
 800d192:	f7f3 f9e9 	bl	8000568 <__aeabi_dmul>
 800d196:	a33f      	add	r3, pc, #252	; (adr r3, 800d294 <__kernel_sin+0x15c>)
 800d198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19c:	f7f3 f82c 	bl	80001f8 <__aeabi_dsub>
 800d1a0:	4652      	mov	r2, sl
 800d1a2:	465b      	mov	r3, fp
 800d1a4:	f7f3 f9e0 	bl	8000568 <__aeabi_dmul>
 800d1a8:	a33c      	add	r3, pc, #240	; (adr r3, 800d29c <__kernel_sin+0x164>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	f7f3 f825 	bl	80001fc <__adddf3>
 800d1b2:	4652      	mov	r2, sl
 800d1b4:	465b      	mov	r3, fp
 800d1b6:	f7f3 f9d7 	bl	8000568 <__aeabi_dmul>
 800d1ba:	a33a      	add	r3, pc, #232	; (adr r3, 800d2a4 <__kernel_sin+0x16c>)
 800d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c0:	f7f3 f81a 	bl	80001f8 <__aeabi_dsub>
 800d1c4:	4652      	mov	r2, sl
 800d1c6:	465b      	mov	r3, fp
 800d1c8:	f7f3 f9ce 	bl	8000568 <__aeabi_dmul>
 800d1cc:	a337      	add	r3, pc, #220	; (adr r3, 800d2ac <__kernel_sin+0x174>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	f7f3 f813 	bl	80001fc <__adddf3>
 800d1d6:	9b01      	ldr	r3, [sp, #4]
 800d1d8:	4606      	mov	r6, r0
 800d1da:	460f      	mov	r7, r1
 800d1dc:	b9eb      	cbnz	r3, 800d21a <__kernel_sin+0xe2>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	4650      	mov	r0, sl
 800d1e4:	4659      	mov	r1, fp
 800d1e6:	f7f3 f9bf 	bl	8000568 <__aeabi_dmul>
 800d1ea:	a325      	add	r3, pc, #148	; (adr r3, 800d280 <__kernel_sin+0x148>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	f7f3 f802 	bl	80001f8 <__aeabi_dsub>
 800d1f4:	4642      	mov	r2, r8
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	f7f3 f9b6 	bl	8000568 <__aeabi_dmul>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4620      	mov	r0, r4
 800d202:	4629      	mov	r1, r5
 800d204:	f7f2 fffa 	bl	80001fc <__adddf3>
 800d208:	4604      	mov	r4, r0
 800d20a:	460d      	mov	r5, r1
 800d20c:	ec45 4b10 	vmov	d0, r4, r5
 800d210:	b003      	add	sp, #12
 800d212:	ecbd 8b04 	vpop	{d8-d9}
 800d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21a:	4b1b      	ldr	r3, [pc, #108]	; (800d288 <__kernel_sin+0x150>)
 800d21c:	ec51 0b18 	vmov	r0, r1, d8
 800d220:	2200      	movs	r2, #0
 800d222:	f7f3 f9a1 	bl	8000568 <__aeabi_dmul>
 800d226:	4632      	mov	r2, r6
 800d228:	ec41 0b19 	vmov	d9, r0, r1
 800d22c:	463b      	mov	r3, r7
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	f7f3 f999 	bl	8000568 <__aeabi_dmul>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	ec51 0b19 	vmov	r0, r1, d9
 800d23e:	f7f2 ffdb 	bl	80001f8 <__aeabi_dsub>
 800d242:	4652      	mov	r2, sl
 800d244:	465b      	mov	r3, fp
 800d246:	f7f3 f98f 	bl	8000568 <__aeabi_dmul>
 800d24a:	ec53 2b18 	vmov	r2, r3, d8
 800d24e:	f7f2 ffd3 	bl	80001f8 <__aeabi_dsub>
 800d252:	a30b      	add	r3, pc, #44	; (adr r3, 800d280 <__kernel_sin+0x148>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	4606      	mov	r6, r0
 800d25a:	460f      	mov	r7, r1
 800d25c:	4640      	mov	r0, r8
 800d25e:	4649      	mov	r1, r9
 800d260:	f7f3 f982 	bl	8000568 <__aeabi_dmul>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f2 ffc6 	bl	80001fc <__adddf3>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4620      	mov	r0, r4
 800d276:	4629      	mov	r1, r5
 800d278:	f7f2 ffbe 	bl	80001f8 <__aeabi_dsub>
 800d27c:	e7c4      	b.n	800d208 <__kernel_sin+0xd0>
 800d27e:	bf00      	nop
 800d280:	55555549 	.word	0x55555549
 800d284:	3fc55555 	.word	0x3fc55555
 800d288:	3fe00000 	.word	0x3fe00000
 800d28c:	5acfd57c 	.word	0x5acfd57c
 800d290:	3de5d93a 	.word	0x3de5d93a
 800d294:	8a2b9ceb 	.word	0x8a2b9ceb
 800d298:	3e5ae5e6 	.word	0x3e5ae5e6
 800d29c:	57b1fe7d 	.word	0x57b1fe7d
 800d2a0:	3ec71de3 	.word	0x3ec71de3
 800d2a4:	19c161d5 	.word	0x19c161d5
 800d2a8:	3f2a01a0 	.word	0x3f2a01a0
 800d2ac:	1110f8a6 	.word	0x1110f8a6
 800d2b0:	3f811111 	.word	0x3f811111

0800d2b4 <finite>:
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	ed8d 0b00 	vstr	d0, [sp]
 800d2ba:	9801      	ldr	r0, [sp, #4]
 800d2bc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d2c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d2c4:	0fc0      	lsrs	r0, r0, #31
 800d2c6:	b002      	add	sp, #8
 800d2c8:	4770      	bx	lr
 800d2ca:	0000      	movs	r0, r0
 800d2cc:	0000      	movs	r0, r0
	...

0800d2d0 <floor>:
 800d2d0:	ec51 0b10 	vmov	r0, r1, d0
 800d2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d2dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d2e0:	2e13      	cmp	r6, #19
 800d2e2:	ee10 5a10 	vmov	r5, s0
 800d2e6:	ee10 8a10 	vmov	r8, s0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	dc32      	bgt.n	800d354 <floor+0x84>
 800d2ee:	2e00      	cmp	r6, #0
 800d2f0:	da14      	bge.n	800d31c <floor+0x4c>
 800d2f2:	a333      	add	r3, pc, #204	; (adr r3, 800d3c0 <floor+0xf0>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f7f2 ff80 	bl	80001fc <__adddf3>
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2300      	movs	r3, #0
 800d300:	f7f3 fbc2 	bl	8000a88 <__aeabi_dcmpgt>
 800d304:	b138      	cbz	r0, 800d316 <floor+0x46>
 800d306:	2c00      	cmp	r4, #0
 800d308:	da57      	bge.n	800d3ba <floor+0xea>
 800d30a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d30e:	431d      	orrs	r5, r3
 800d310:	d001      	beq.n	800d316 <floor+0x46>
 800d312:	4c2d      	ldr	r4, [pc, #180]	; (800d3c8 <floor+0xf8>)
 800d314:	2500      	movs	r5, #0
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	e025      	b.n	800d368 <floor+0x98>
 800d31c:	4f2b      	ldr	r7, [pc, #172]	; (800d3cc <floor+0xfc>)
 800d31e:	4137      	asrs	r7, r6
 800d320:	ea01 0307 	and.w	r3, r1, r7
 800d324:	4303      	orrs	r3, r0
 800d326:	d01f      	beq.n	800d368 <floor+0x98>
 800d328:	a325      	add	r3, pc, #148	; (adr r3, 800d3c0 <floor+0xf0>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f2 ff65 	bl	80001fc <__adddf3>
 800d332:	2200      	movs	r2, #0
 800d334:	2300      	movs	r3, #0
 800d336:	f7f3 fba7 	bl	8000a88 <__aeabi_dcmpgt>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d0eb      	beq.n	800d316 <floor+0x46>
 800d33e:	2c00      	cmp	r4, #0
 800d340:	bfbe      	ittt	lt
 800d342:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d346:	fa43 f606 	asrlt.w	r6, r3, r6
 800d34a:	19a4      	addlt	r4, r4, r6
 800d34c:	ea24 0407 	bic.w	r4, r4, r7
 800d350:	2500      	movs	r5, #0
 800d352:	e7e0      	b.n	800d316 <floor+0x46>
 800d354:	2e33      	cmp	r6, #51	; 0x33
 800d356:	dd0b      	ble.n	800d370 <floor+0xa0>
 800d358:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d35c:	d104      	bne.n	800d368 <floor+0x98>
 800d35e:	ee10 2a10 	vmov	r2, s0
 800d362:	460b      	mov	r3, r1
 800d364:	f7f2 ff4a 	bl	80001fc <__adddf3>
 800d368:	ec41 0b10 	vmov	d0, r0, r1
 800d36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d370:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d378:	fa23 f707 	lsr.w	r7, r3, r7
 800d37c:	4207      	tst	r7, r0
 800d37e:	d0f3      	beq.n	800d368 <floor+0x98>
 800d380:	a30f      	add	r3, pc, #60	; (adr r3, 800d3c0 <floor+0xf0>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f2 ff39 	bl	80001fc <__adddf3>
 800d38a:	2200      	movs	r2, #0
 800d38c:	2300      	movs	r3, #0
 800d38e:	f7f3 fb7b 	bl	8000a88 <__aeabi_dcmpgt>
 800d392:	2800      	cmp	r0, #0
 800d394:	d0bf      	beq.n	800d316 <floor+0x46>
 800d396:	2c00      	cmp	r4, #0
 800d398:	da02      	bge.n	800d3a0 <floor+0xd0>
 800d39a:	2e14      	cmp	r6, #20
 800d39c:	d103      	bne.n	800d3a6 <floor+0xd6>
 800d39e:	3401      	adds	r4, #1
 800d3a0:	ea25 0507 	bic.w	r5, r5, r7
 800d3a4:	e7b7      	b.n	800d316 <floor+0x46>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d3ac:	fa03 f606 	lsl.w	r6, r3, r6
 800d3b0:	4435      	add	r5, r6
 800d3b2:	4545      	cmp	r5, r8
 800d3b4:	bf38      	it	cc
 800d3b6:	18e4      	addcc	r4, r4, r3
 800d3b8:	e7f2      	b.n	800d3a0 <floor+0xd0>
 800d3ba:	2500      	movs	r5, #0
 800d3bc:	462c      	mov	r4, r5
 800d3be:	e7aa      	b.n	800d316 <floor+0x46>
 800d3c0:	8800759c 	.word	0x8800759c
 800d3c4:	7e37e43c 	.word	0x7e37e43c
 800d3c8:	bff00000 	.word	0xbff00000
 800d3cc:	000fffff 	.word	0x000fffff

0800d3d0 <nan>:
 800d3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3d8 <nan+0x8>
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	00000000 	.word	0x00000000
 800d3dc:	7ff80000 	.word	0x7ff80000

0800d3e0 <rint>:
 800d3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3e2:	ec51 0b10 	vmov	r0, r1, d0
 800d3e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d3ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d3ee:	2e13      	cmp	r6, #19
 800d3f0:	ee10 4a10 	vmov	r4, s0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800d3fa:	dc58      	bgt.n	800d4ae <rint+0xce>
 800d3fc:	2e00      	cmp	r6, #0
 800d3fe:	da2b      	bge.n	800d458 <rint+0x78>
 800d400:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d404:	4302      	orrs	r2, r0
 800d406:	d023      	beq.n	800d450 <rint+0x70>
 800d408:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800d40c:	4302      	orrs	r2, r0
 800d40e:	4254      	negs	r4, r2
 800d410:	4314      	orrs	r4, r2
 800d412:	0c4b      	lsrs	r3, r1, #17
 800d414:	0b24      	lsrs	r4, r4, #12
 800d416:	045b      	lsls	r3, r3, #17
 800d418:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800d41c:	ea44 0103 	orr.w	r1, r4, r3
 800d420:	4b32      	ldr	r3, [pc, #200]	; (800d4ec <rint+0x10c>)
 800d422:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d426:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4630      	mov	r0, r6
 800d430:	4639      	mov	r1, r7
 800d432:	f7f2 fee3 	bl	80001fc <__adddf3>
 800d436:	e9cd 0100 	strd	r0, r1, [sp]
 800d43a:	463b      	mov	r3, r7
 800d43c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d440:	4632      	mov	r2, r6
 800d442:	f7f2 fed9 	bl	80001f8 <__aeabi_dsub>
 800d446:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d44a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800d44e:	4639      	mov	r1, r7
 800d450:	ec41 0b10 	vmov	d0, r0, r1
 800d454:	b003      	add	sp, #12
 800d456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d458:	4a25      	ldr	r2, [pc, #148]	; (800d4f0 <rint+0x110>)
 800d45a:	4132      	asrs	r2, r6
 800d45c:	ea01 0702 	and.w	r7, r1, r2
 800d460:	4307      	orrs	r7, r0
 800d462:	d0f5      	beq.n	800d450 <rint+0x70>
 800d464:	0851      	lsrs	r1, r2, #1
 800d466:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800d46a:	4314      	orrs	r4, r2
 800d46c:	d00c      	beq.n	800d488 <rint+0xa8>
 800d46e:	ea23 0201 	bic.w	r2, r3, r1
 800d472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d476:	2e13      	cmp	r6, #19
 800d478:	fa43 f606 	asr.w	r6, r3, r6
 800d47c:	bf0c      	ite	eq
 800d47e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800d482:	2400      	movne	r4, #0
 800d484:	ea42 0306 	orr.w	r3, r2, r6
 800d488:	4918      	ldr	r1, [pc, #96]	; (800d4ec <rint+0x10c>)
 800d48a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800d48e:	4622      	mov	r2, r4
 800d490:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d494:	4620      	mov	r0, r4
 800d496:	4629      	mov	r1, r5
 800d498:	f7f2 feb0 	bl	80001fc <__adddf3>
 800d49c:	e9cd 0100 	strd	r0, r1, [sp]
 800d4a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	462b      	mov	r3, r5
 800d4a8:	f7f2 fea6 	bl	80001f8 <__aeabi_dsub>
 800d4ac:	e7d0      	b.n	800d450 <rint+0x70>
 800d4ae:	2e33      	cmp	r6, #51	; 0x33
 800d4b0:	dd07      	ble.n	800d4c2 <rint+0xe2>
 800d4b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d4b6:	d1cb      	bne.n	800d450 <rint+0x70>
 800d4b8:	ee10 2a10 	vmov	r2, s0
 800d4bc:	f7f2 fe9e 	bl	80001fc <__adddf3>
 800d4c0:	e7c6      	b.n	800d450 <rint+0x70>
 800d4c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800d4c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d4ca:	40d6      	lsrs	r6, r2
 800d4cc:	4230      	tst	r0, r6
 800d4ce:	d0bf      	beq.n	800d450 <rint+0x70>
 800d4d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800d4d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800d4d8:	bf1f      	itttt	ne
 800d4da:	ea24 0101 	bicne.w	r1, r4, r1
 800d4de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800d4e2:	fa44 f202 	asrne.w	r2, r4, r2
 800d4e6:	ea41 0402 	orrne.w	r4, r1, r2
 800d4ea:	e7cd      	b.n	800d488 <rint+0xa8>
 800d4ec:	0800d8c0 	.word	0x0800d8c0
 800d4f0:	000fffff 	.word	0x000fffff
 800d4f4:	00000000 	.word	0x00000000

0800d4f8 <scalbn>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	ec55 4b10 	vmov	r4, r5, d0
 800d4fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d502:	4606      	mov	r6, r0
 800d504:	462b      	mov	r3, r5
 800d506:	b99a      	cbnz	r2, 800d530 <scalbn+0x38>
 800d508:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d50c:	4323      	orrs	r3, r4
 800d50e:	d036      	beq.n	800d57e <scalbn+0x86>
 800d510:	4b39      	ldr	r3, [pc, #228]	; (800d5f8 <scalbn+0x100>)
 800d512:	4629      	mov	r1, r5
 800d514:	ee10 0a10 	vmov	r0, s0
 800d518:	2200      	movs	r2, #0
 800d51a:	f7f3 f825 	bl	8000568 <__aeabi_dmul>
 800d51e:	4b37      	ldr	r3, [pc, #220]	; (800d5fc <scalbn+0x104>)
 800d520:	429e      	cmp	r6, r3
 800d522:	4604      	mov	r4, r0
 800d524:	460d      	mov	r5, r1
 800d526:	da10      	bge.n	800d54a <scalbn+0x52>
 800d528:	a32b      	add	r3, pc, #172	; (adr r3, 800d5d8 <scalbn+0xe0>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	e03a      	b.n	800d5a6 <scalbn+0xae>
 800d530:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d534:	428a      	cmp	r2, r1
 800d536:	d10c      	bne.n	800d552 <scalbn+0x5a>
 800d538:	ee10 2a10 	vmov	r2, s0
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f2 fe5c 	bl	80001fc <__adddf3>
 800d544:	4604      	mov	r4, r0
 800d546:	460d      	mov	r5, r1
 800d548:	e019      	b.n	800d57e <scalbn+0x86>
 800d54a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d54e:	460b      	mov	r3, r1
 800d550:	3a36      	subs	r2, #54	; 0x36
 800d552:	4432      	add	r2, r6
 800d554:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d558:	428a      	cmp	r2, r1
 800d55a:	dd08      	ble.n	800d56e <scalbn+0x76>
 800d55c:	2d00      	cmp	r5, #0
 800d55e:	a120      	add	r1, pc, #128	; (adr r1, 800d5e0 <scalbn+0xe8>)
 800d560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d564:	da1c      	bge.n	800d5a0 <scalbn+0xa8>
 800d566:	a120      	add	r1, pc, #128	; (adr r1, 800d5e8 <scalbn+0xf0>)
 800d568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d56c:	e018      	b.n	800d5a0 <scalbn+0xa8>
 800d56e:	2a00      	cmp	r2, #0
 800d570:	dd08      	ble.n	800d584 <scalbn+0x8c>
 800d572:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d576:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d57a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d57e:	ec45 4b10 	vmov	d0, r4, r5
 800d582:	bd70      	pop	{r4, r5, r6, pc}
 800d584:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d588:	da19      	bge.n	800d5be <scalbn+0xc6>
 800d58a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d58e:	429e      	cmp	r6, r3
 800d590:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d594:	dd0a      	ble.n	800d5ac <scalbn+0xb4>
 800d596:	a112      	add	r1, pc, #72	; (adr r1, 800d5e0 <scalbn+0xe8>)
 800d598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1e2      	bne.n	800d566 <scalbn+0x6e>
 800d5a0:	a30f      	add	r3, pc, #60	; (adr r3, 800d5e0 <scalbn+0xe8>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f2 ffdf 	bl	8000568 <__aeabi_dmul>
 800d5aa:	e7cb      	b.n	800d544 <scalbn+0x4c>
 800d5ac:	a10a      	add	r1, pc, #40	; (adr r1, 800d5d8 <scalbn+0xe0>)
 800d5ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0b8      	beq.n	800d528 <scalbn+0x30>
 800d5b6:	a10e      	add	r1, pc, #56	; (adr r1, 800d5f0 <scalbn+0xf8>)
 800d5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5bc:	e7b4      	b.n	800d528 <scalbn+0x30>
 800d5be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5c2:	3236      	adds	r2, #54	; 0x36
 800d5c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <scalbn+0x108>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	e7e8      	b.n	800d5a6 <scalbn+0xae>
 800d5d4:	f3af 8000 	nop.w
 800d5d8:	c2f8f359 	.word	0xc2f8f359
 800d5dc:	01a56e1f 	.word	0x01a56e1f
 800d5e0:	8800759c 	.word	0x8800759c
 800d5e4:	7e37e43c 	.word	0x7e37e43c
 800d5e8:	8800759c 	.word	0x8800759c
 800d5ec:	fe37e43c 	.word	0xfe37e43c
 800d5f0:	c2f8f359 	.word	0xc2f8f359
 800d5f4:	81a56e1f 	.word	0x81a56e1f
 800d5f8:	43500000 	.word	0x43500000
 800d5fc:	ffff3cb0 	.word	0xffff3cb0
 800d600:	3c900000 	.word	0x3c900000

0800d604 <_init>:
 800d604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d606:	bf00      	nop
 800d608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60a:	bc08      	pop	{r3}
 800d60c:	469e      	mov	lr, r3
 800d60e:	4770      	bx	lr

0800d610 <_fini>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr
